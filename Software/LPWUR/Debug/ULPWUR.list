
ULPWUR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cbc  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0007a8b4  08006e7c  08006e7c  00016e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08081730  08081730  000a0014  2**0
                  CONTENTS
  4 .ARM          00000008  08081730  08081730  00091730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08081738  08081738  000a0014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08081738  08081738  00091738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0808173c  0808173c  0009173c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08081740  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000710  20000014  08081754  000a0014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000724  08081754  000a0724  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000a0014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019071  00000000  00000000  000a0044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003387  00000000  00000000  000b90b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012c0  00000000  00000000  000bc440  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010e8  00000000  00000000  000bd700  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ccd1  00000000  00000000  000be7e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013619  00000000  00000000  000eb4b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00104374  00000000  00000000  000fead2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00202e46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b5c  00000000  00000000  00202ec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000014 	.word	0x20000014
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006e64 	.word	0x08006e64

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000018 	.word	0x20000018
 80001fc:	08006e64 	.word	0x08006e64

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b972 	b.w	80004fc <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	4688      	mov	r8, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14b      	bne.n	80002d6 <__udivmoddi4+0xa6>
 800023e:	428a      	cmp	r2, r1
 8000240:	4615      	mov	r5, r2
 8000242:	d967      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0720 	rsb	r7, r2, #32
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	fa20 f707 	lsr.w	r7, r0, r7
 8000256:	4095      	lsls	r5, r2
 8000258:	ea47 0803 	orr.w	r8, r7, r3
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbb8 f7fe 	udiv	r7, r8, lr
 8000268:	fa1f fc85 	uxth.w	ip, r5
 800026c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000270:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000274:	fb07 f10c 	mul.w	r1, r7, ip
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18eb      	adds	r3, r5, r3
 800027e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000282:	f080 811b 	bcs.w	80004bc <__udivmoddi4+0x28c>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8118 	bls.w	80004bc <__udivmoddi4+0x28c>
 800028c:	3f02      	subs	r7, #2
 800028e:	442b      	add	r3, r5
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0fe 	udiv	r0, r3, lr
 8000298:	fb0e 3310 	mls	r3, lr, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a4:	45a4      	cmp	ip, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	192c      	adds	r4, r5, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x290>
 80002b2:	45a4      	cmp	ip, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x290>
 80002b8:	3802      	subs	r0, #2
 80002ba:	442c      	add	r4, r5
 80002bc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c0:	eba4 040c 	sub.w	r4, r4, ip
 80002c4:	2700      	movs	r7, #0
 80002c6:	b11e      	cbz	r6, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c6 4300 	strd	r4, r3, [r6]
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xbe>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80eb 	beq.w	80004b6 <__udivmoddi4+0x286>
 80002e0:	2700      	movs	r7, #0
 80002e2:	e9c6 0100 	strd	r0, r1, [r6]
 80002e6:	4638      	mov	r0, r7
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f783 	clz	r7, r3
 80002f2:	2f00      	cmp	r7, #0
 80002f4:	d147      	bne.n	8000386 <__udivmoddi4+0x156>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd0>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80fa 	bhi.w	80004f4 <__udivmoddi4+0x2c4>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	4698      	mov	r8, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800030e:	e9c6 4800 	strd	r4, r8, [r6]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xe8>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 808f 	bne.w	8000440 <__udivmoddi4+0x210>
 8000322:	1b49      	subs	r1, r1, r5
 8000324:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000328:	fa1f f885 	uxth.w	r8, r5
 800032c:	2701      	movs	r7, #1
 800032e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fb0e 111c 	mls	r1, lr, ip, r1
 8000338:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800033c:	fb08 f10c 	mul.w	r1, r8, ip
 8000340:	4299      	cmp	r1, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x124>
 8000344:	18eb      	adds	r3, r5, r3
 8000346:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4299      	cmp	r1, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 8000352:	4684      	mov	ip, r0
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb1 f0fe 	udiv	r0, r1, lr
 800035c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000360:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000364:	fb08 f800 	mul.w	r8, r8, r0
 8000368:	45a0      	cmp	r8, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x14c>
 800036c:	192c      	adds	r4, r5, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x14a>
 8000374:	45a0      	cmp	r8, r4
 8000376:	f200 80b6 	bhi.w	80004e6 <__udivmoddi4+0x2b6>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 0408 	sub.w	r4, r4, r8
 8000380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000384:	e79f      	b.n	80002c6 <__udivmoddi4+0x96>
 8000386:	f1c7 0c20 	rsb	ip, r7, #32
 800038a:	40bb      	lsls	r3, r7
 800038c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000390:	ea4e 0e03 	orr.w	lr, lr, r3
 8000394:	fa01 f407 	lsl.w	r4, r1, r7
 8000398:	fa20 f50c 	lsr.w	r5, r0, ip
 800039c:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a4:	4325      	orrs	r5, r4
 80003a6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003aa:	0c2c      	lsrs	r4, r5, #16
 80003ac:	fb08 3319 	mls	r3, r8, r9, r3
 80003b0:	fa1f fa8e 	uxth.w	sl, lr
 80003b4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b8:	fb09 f40a 	mul.w	r4, r9, sl
 80003bc:	429c      	cmp	r4, r3
 80003be:	fa02 f207 	lsl.w	r2, r2, r7
 80003c2:	fa00 f107 	lsl.w	r1, r0, r7
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1e 0303 	adds.w	r3, lr, r3
 80003cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d0:	f080 8087 	bcs.w	80004e2 <__udivmoddi4+0x2b2>
 80003d4:	429c      	cmp	r4, r3
 80003d6:	f240 8084 	bls.w	80004e2 <__udivmoddi4+0x2b2>
 80003da:	f1a9 0902 	sub.w	r9, r9, #2
 80003de:	4473      	add	r3, lr
 80003e0:	1b1b      	subs	r3, r3, r4
 80003e2:	b2ad      	uxth	r5, r5
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1e 0404 	adds.w	r4, lr, r4
 80003fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000400:	d26b      	bcs.n	80004da <__udivmoddi4+0x2aa>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d969      	bls.n	80004da <__udivmoddi4+0x2aa>
 8000406:	3802      	subs	r0, #2
 8000408:	4474      	add	r4, lr
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c2      	mov	sl, r8
 800041a:	464b      	mov	r3, r9
 800041c:	d354      	bcc.n	80004c8 <__udivmoddi4+0x298>
 800041e:	d051      	beq.n	80004c4 <__udivmoddi4+0x294>
 8000420:	2e00      	cmp	r6, #0
 8000422:	d069      	beq.n	80004f8 <__udivmoddi4+0x2c8>
 8000424:	ebb1 050a 	subs.w	r5, r1, sl
 8000428:	eb64 0403 	sbc.w	r4, r4, r3
 800042c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000430:	40fd      	lsrs	r5, r7
 8000432:	40fc      	lsrs	r4, r7
 8000434:	ea4c 0505 	orr.w	r5, ip, r5
 8000438:	e9c6 5400 	strd	r5, r4, [r6]
 800043c:	2700      	movs	r7, #0
 800043e:	e747      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000440:	f1c2 0320 	rsb	r3, r2, #32
 8000444:	fa20 f703 	lsr.w	r7, r0, r3
 8000448:	4095      	lsls	r5, r2
 800044a:	fa01 f002 	lsl.w	r0, r1, r2
 800044e:	fa21 f303 	lsr.w	r3, r1, r3
 8000452:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000456:	4338      	orrs	r0, r7
 8000458:	0c01      	lsrs	r1, r0, #16
 800045a:	fbb3 f7fe 	udiv	r7, r3, lr
 800045e:	fa1f f885 	uxth.w	r8, r5
 8000462:	fb0e 3317 	mls	r3, lr, r7, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb07 f308 	mul.w	r3, r7, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	fa04 f402 	lsl.w	r4, r4, r2
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x256>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f107 3cff 	add.w	ip, r7, #4294967295
 800047c:	d22f      	bcs.n	80004de <__udivmoddi4+0x2ae>
 800047e:	428b      	cmp	r3, r1
 8000480:	d92d      	bls.n	80004de <__udivmoddi4+0x2ae>
 8000482:	3f02      	subs	r7, #2
 8000484:	4429      	add	r1, r5
 8000486:	1acb      	subs	r3, r1, r3
 8000488:	b281      	uxth	r1, r0
 800048a:	fbb3 f0fe 	udiv	r0, r3, lr
 800048e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000496:	fb00 f308 	mul.w	r3, r0, r8
 800049a:	428b      	cmp	r3, r1
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x27e>
 800049e:	1869      	adds	r1, r5, r1
 80004a0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a4:	d217      	bcs.n	80004d6 <__udivmoddi4+0x2a6>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d915      	bls.n	80004d6 <__udivmoddi4+0x2a6>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4429      	add	r1, r5
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b4:	e73b      	b.n	800032e <__udivmoddi4+0xfe>
 80004b6:	4637      	mov	r7, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e709      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004bc:	4607      	mov	r7, r0
 80004be:	e6e7      	b.n	8000290 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c4:	4541      	cmp	r1, r8
 80004c6:	d2ab      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004c8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004cc:	eb69 020e 	sbc.w	r2, r9, lr
 80004d0:	3801      	subs	r0, #1
 80004d2:	4613      	mov	r3, r2
 80004d4:	e7a4      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d6:	4660      	mov	r0, ip
 80004d8:	e7e9      	b.n	80004ae <__udivmoddi4+0x27e>
 80004da:	4618      	mov	r0, r3
 80004dc:	e795      	b.n	800040a <__udivmoddi4+0x1da>
 80004de:	4667      	mov	r7, ip
 80004e0:	e7d1      	b.n	8000486 <__udivmoddi4+0x256>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e77c      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	442c      	add	r4, r5
 80004ea:	e747      	b.n	800037c <__udivmoddi4+0x14c>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	442b      	add	r3, r5
 80004f2:	e72f      	b.n	8000354 <__udivmoddi4+0x124>
 80004f4:	4638      	mov	r0, r7
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xda>
 80004f8:	4637      	mov	r7, r6
 80004fa:	e6e9      	b.n	80002d0 <__udivmoddi4+0xa0>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <EpdOn>:
uint32_t gulImgBufAddr; //IT8951 Image buffer address



void EpdOn(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(EPD_OFF_GPIO_Port, EPD_OFF_Pin, RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2102      	movs	r1, #2
 8000508:	4808      	ldr	r0, [pc, #32]	; (800052c <EpdOn+0x2c>)
 800050a:	f002 f9b3 	bl	8002874 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_ON_GPIO_Port, EPD_ON_Pin, SET);
 800050e:	2201      	movs	r2, #1
 8000510:	2101      	movs	r1, #1
 8000512:	4806      	ldr	r0, [pc, #24]	; (800052c <EpdOn+0x2c>)
 8000514:	f002 f9ae 	bl	8002874 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000518:	2001      	movs	r0, #1
 800051a:	f001 fcb5 	bl	8001e88 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_ON_GPIO_Port, EPD_ON_Pin, RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2101      	movs	r1, #1
 8000522:	4802      	ldr	r0, [pc, #8]	; (800052c <EpdOn+0x2c>)
 8000524:	f002 f9a6 	bl	8002874 <HAL_GPIO_WritePin>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	48000800 	.word	0x48000800

08000530 <EpdOff>:

void EpdOff(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_ON_GPIO_Port, EPD_ON_Pin, RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	2101      	movs	r1, #1
 8000538:	4808      	ldr	r0, [pc, #32]	; (800055c <EpdOff+0x2c>)
 800053a:	f002 f99b 	bl	8002874 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_OFF_GPIO_Port, EPD_OFF_Pin, SET);
 800053e:	2201      	movs	r2, #1
 8000540:	2102      	movs	r1, #2
 8000542:	4806      	ldr	r0, [pc, #24]	; (800055c <EpdOff+0x2c>)
 8000544:	f002 f996 	bl	8002874 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000548:	2001      	movs	r0, #1
 800054a:	f001 fc9d 	bl	8001e88 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_OFF_GPIO_Port, EPD_OFF_Pin, RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2102      	movs	r1, #2
 8000552:	4802      	ldr	r0, [pc, #8]	; (800055c <EpdOff+0x2c>)
 8000554:	f002 f98e 	bl	8002874 <HAL_GPIO_WritePin>
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	48000800 	.word	0x48000800

08000560 <LCDWaitForReady>:

//-----------------------------------------------------------
//Host controller function 1---Wait for host data Bus Ready
//-----------------------------------------------------------
void LCDWaitForReady()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

	//while(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET )

	uint8_t ulData = HAL_GPIO_ReadPin(EPD_HRDY_GPIO_Port, EPD_HRDY_Pin);
 8000566:	2120      	movs	r1, #32
 8000568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056c:	f002 f96a 	bl	8002844 <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	71fb      	strb	r3, [r7, #7]
	while(ulData == 0)
 8000574:	e006      	b.n	8000584 <LCDWaitForReady+0x24>
	{
		ulData = HAL_GPIO_ReadPin(EPD_HRDY_GPIO_Port, EPD_HRDY_Pin);
 8000576:	2120      	movs	r1, #32
 8000578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057c:	f002 f962 	bl	8002844 <HAL_GPIO_ReadPin>
 8000580:	4603      	mov	r3, r0
 8000582:	71fb      	strb	r3, [r7, #7]
	while(ulData == 0)
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d0f5      	beq.n	8000576 <LCDWaitForReady+0x16>
	}
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <LCDWriteCmdCode>:

//-----------------------------------------------------------
//Host controller function 2---Write command code to host data Bus
//-----------------------------------------------------------
void LCDWriteCmdCode(uint16_t usCmdCode)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	80fb      	strh	r3, [r7, #6]
	//uint16_t wPreamble = 0x6000;


	//uint8_t wPreamble[2] = {0x00, 0x60};
	//uint8_t wDat[2] = {usCmdCode, usCmdCode>>8};
	uint8_t dat[4]={0x00, 0x60, usCmdCode, usCmdCode>>8};
 800059e:	2300      	movs	r3, #0
 80005a0:	733b      	strb	r3, [r7, #12]
 80005a2:	2360      	movs	r3, #96	; 0x60
 80005a4:	737b      	strb	r3, [r7, #13]
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	73bb      	strb	r3, [r7, #14]
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	0a1b      	lsrs	r3, r3, #8
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	73fb      	strb	r3, [r7, #15]
	LCDWaitForReady();
 80005b6:	f7ff ffd3 	bl	8000560 <LCDWaitForReady>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2101      	movs	r1, #1
 80005be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c2:	f002 f957 	bl	8002874 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, dat, 2, HAL_MAX_DELAY);
 80005c6:	f107 010c 	add.w	r1, r7, #12
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	2202      	movs	r2, #2
 80005d0:	4806      	ldr	r0, [pc, #24]	; (80005ec <LCDWriteCmdCode+0x58>)
 80005d2:	f003 ffe3 	bl	800459c <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
	//LCDWaitForReady();
	//HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	2101      	movs	r1, #1
 80005da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005de:	f002 f949 	bl	8002874 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &CmdMsb, 1, HAL_MAX_DELAY);
	HAL_SPI_Transmit(&hspi1, &CmdLsb, 1, HAL_MAX_DELAY);

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
*/
}
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000078 	.word	0x20000078

080005f0 <LCDWriteData>:

//-----------------------------------------------------------
//Host controller function 3---Write Data to host data Bus
//-----------------------------------------------------------
void LCDWriteData(uint16_t usData)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	80fb      	strh	r3, [r7, #6]

	uint8_t dat[4]={ 0x00, 0x00, (uint8_t)usData,(uint8_t)( usData>>8)};
 80005fa:	2300      	movs	r3, #0
 80005fc:	733b      	strb	r3, [r7, #12]
 80005fe:	2300      	movs	r3, #0
 8000600:	737b      	strb	r3, [r7, #13]
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	73bb      	strb	r3, [r7, #14]
 8000608:	88fb      	ldrh	r3, [r7, #6]
 800060a:	0a1b      	lsrs	r3, r3, #8
 800060c:	b29b      	uxth	r3, r3
 800060e:	b2db      	uxtb	r3, r3
 8000610:	73fb      	strb	r3, [r7, #15]
	//uint8_t wPreamble[2] = {0x00, 0x00};
	//uint8_t wDat[2] = { (uint8_t)usData,(uint8_t)( usData>>8)};
	LCDWaitForReady();
 8000612:	f7ff ffa5 	bl	8000560 <LCDWaitForReady>

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2101      	movs	r1, #1
 800061a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061e:	f002 f929 	bl	8002874 <HAL_GPIO_WritePin>
	//HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
	HAL_SPI_Transmit(&hspi1, dat, 2, HAL_MAX_DELAY);
 8000622:	f107 010c 	add.w	r1, r7, #12
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	2202      	movs	r2, #2
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <LCDWriteData+0x58>)
 800062e:	f003 ffb5 	bl	800459c <HAL_SPI_Transmit>
	//LCDWaitForReady();
	//HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2101      	movs	r1, #1
 8000636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063a:	f002 f91b 	bl	8002874 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &DatLsb, 1, HAL_MAX_DELAY);

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000078 	.word	0x20000078

0800064c <LCDWriteNData>:

void LCDWriteNData(uint16_t* pwBuf, uint32_t ulSizeWordCnt)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
	//uint32_t i;

	//uint8_t dma = 1;
	uint8_t wPreamble[2] = {0x00, 0x00};
 8000656:	2300      	movs	r3, #0
 8000658:	723b      	strb	r3, [r7, #8]
 800065a:	2300      	movs	r3, #0
 800065c:	727b      	strb	r3, [r7, #9]
	//uint8_t wDat[2];
	LCDWaitForReady();
 800065e:	f7ff ff7f 	bl	8000560 <LCDWaitForReady>
	uint8_t* Buf = (uint8_t*)pwBuf;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2101      	movs	r1, #1
 800066a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066e:	f002 f901 	bl	8002874 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 8000672:	f107 0108 	add.w	r1, r7, #8
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	2201      	movs	r2, #1
 800067c:	480a      	ldr	r0, [pc, #40]	; (80006a8 <LCDWriteNData+0x5c>)
 800067e:	f003 ff8d 	bl	800459c <HAL_SPI_Transmit>
	LCDWaitForReady();
 8000682:	f7ff ff6d 	bl	8000560 <LCDWaitForReady>
	//HAL_SPI_Transmit_DMA(&hspi1, Buf, ulSizeWordCnt);
	HAL_SPI_Transmit(&hspi1, Buf, ulSizeWordCnt, HAL_MAX_DELAY);
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
 800068a:	683a      	ldr	r2, [r7, #0]
 800068c:	68f9      	ldr	r1, [r7, #12]
 800068e:	4806      	ldr	r0, [pc, #24]	; (80006a8 <LCDWriteNData+0x5c>)
 8000690:	f003 ff84 	bl	800459c <HAL_SPI_Transmit>
//		wDat[1]=pwBuf[i]>>8;
//		HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
//		}
//	while(dma == 1)
//	{}
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000694:	2201      	movs	r2, #1
 8000696:	2101      	movs	r1, #1
 8000698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069c:	f002 f8ea 	bl	8002874 <HAL_GPIO_WritePin>
	}

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000078 	.word	0x20000078

080006ac <LCDReadData>:

//-----------------------------------------------------------
//Host controller function 4---Read Data from host data Bus
//-----------------------------------------------------------
uint16_t LCDReadData()
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af02      	add	r7, sp, #8

	uint8_t wRLsb[2];
	uint16_t wRData;
	uint8_t wdummy[2] = {0};
 80006b2:	2300      	movs	r3, #0
 80006b4:	813b      	strh	r3, [r7, #8]
	uint8_t rdummy[2] = {0};
 80006b6:	2300      	movs	r3, #0
 80006b8:	80bb      	strh	r3, [r7, #4]
	uint8_t wPreamble[2] = {0x00, 0x10};
 80006ba:	2300      	movs	r3, #0
 80006bc:	703b      	strb	r3, [r7, #0]
 80006be:	2310      	movs	r3, #16
 80006c0:	707b      	strb	r3, [r7, #1]

	LCDWaitForReady();
 80006c2:	f7ff ff4d 	bl	8000560 <LCDWaitForReady>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2101      	movs	r1, #1
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ce:	f002 f8d1 	bl	8002874 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 80006d2:	4639      	mov	r1, r7
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295
 80006d8:	2201      	movs	r2, #1
 80006da:	4818      	ldr	r0, [pc, #96]	; (800073c <LCDReadData+0x90>)
 80006dc:	f003 ff5e 	bl	800459c <HAL_SPI_Transmit>
	LCDWaitForReady();
 80006e0:	f7ff ff3e 	bl	8000560 <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, rdummy, 1,HAL_MAX_DELAY);
 80006e4:	1d3a      	adds	r2, r7, #4
 80006e6:	f107 0108 	add.w	r1, r7, #8
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2301      	movs	r3, #1
 80006f2:	4812      	ldr	r0, [pc, #72]	; (800073c <LCDReadData+0x90>)
 80006f4:	f004 f8a7 	bl	8004846 <HAL_SPI_TransmitReceive>

	LCDWaitForReady();
 80006f8:	f7ff ff32 	bl	8000560 <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, wRLsb, 1,HAL_MAX_DELAY);
 80006fc:	f107 020c 	add.w	r2, r7, #12
 8000700:	f107 0108 	add.w	r1, r7, #8
 8000704:	f04f 33ff 	mov.w	r3, #4294967295
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	2301      	movs	r3, #1
 800070c:	480b      	ldr	r0, [pc, #44]	; (800073c <LCDReadData+0x90>)
 800070e:	f004 f89a 	bl	8004846 <HAL_SPI_TransmitReceive>

	wRData = wRLsb[1]<<8;
 8000712:	7b7b      	ldrb	r3, [r7, #13]
 8000714:	b29b      	uxth	r3, r3
 8000716:	021b      	lsls	r3, r3, #8
 8000718:	81fb      	strh	r3, [r7, #14]
	wRData |= wRLsb[0];
 800071a:	7b3b      	ldrb	r3, [r7, #12]
 800071c:	b29a      	uxth	r2, r3
 800071e:	89fb      	ldrh	r3, [r7, #14]
 8000720:	4313      	orrs	r3, r2
 8000722:	81fb      	strh	r3, [r7, #14]
	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000724:	2201      	movs	r2, #1
 8000726:	2101      	movs	r1, #1
 8000728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072c:	f002 f8a2 	bl	8002874 <HAL_GPIO_WritePin>

	return wRData;
 8000730:	89fb      	ldrh	r3, [r7, #14]
	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);

	return wRData;
	*/
}
 8000732:	4618      	mov	r0, r3
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000078 	.word	0x20000078

08000740 <LCDReadNData>:

//-----------------------------------------------------------
//  Read Burst N words Data
//-----------------------------------------------------------
void LCDReadNData(uint16_t* pwBuf, uint32_t ulSizeWordCnt)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af02      	add	r7, sp, #8
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]

	uint32_t i;

	uint8_t wRLsb[2];
	//uint16_t wRData;
	uint8_t wdummy[2] = {0};
 800074a:	2300      	movs	r3, #0
 800074c:	82bb      	strh	r3, [r7, #20]
	uint8_t rdummy[2] = {0};
 800074e:	2300      	movs	r3, #0
 8000750:	823b      	strh	r3, [r7, #16]
	uint8_t wPreamble[2] = {0x00, 0x10};
 8000752:	2300      	movs	r3, #0
 8000754:	733b      	strb	r3, [r7, #12]
 8000756:	2310      	movs	r3, #16
 8000758:	737b      	strb	r3, [r7, #13]
	LCDWaitForReady();
 800075a:	f7ff ff01 	bl	8000560 <LCDWaitForReady>

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2101      	movs	r1, #1
 8000762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000766:	f002 f885 	bl	8002874 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 800076a:	f107 010c 	add.w	r1, r7, #12
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	2201      	movs	r2, #1
 8000774:	4823      	ldr	r0, [pc, #140]	; (8000804 <LCDReadNData+0xc4>)
 8000776:	f003 ff11 	bl	800459c <HAL_SPI_Transmit>

	LCDWaitForReady();
 800077a:	f7ff fef1 	bl	8000560 <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, rdummy, 1,HAL_MAX_DELAY);
 800077e:	f107 0210 	add.w	r2, r7, #16
 8000782:	f107 0114 	add.w	r1, r7, #20
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	2301      	movs	r3, #1
 800078e:	481d      	ldr	r0, [pc, #116]	; (8000804 <LCDReadNData+0xc4>)
 8000790:	f004 f859 	bl	8004846 <HAL_SPI_TransmitReceive>

	LCDWaitForReady();
 8000794:	f7ff fee4 	bl	8000560 <LCDWaitForReady>

		for(i=0;i<ulSizeWordCnt;i++)
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
 800079c:	e024      	b.n	80007e8 <LCDReadNData+0xa8>
		{
			HAL_SPI_TransmitReceive(&hspi1, wdummy, wRLsb, 1,HAL_MAX_DELAY);
 800079e:	f107 0218 	add.w	r2, r7, #24
 80007a2:	f107 0114 	add.w	r1, r7, #20
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2301      	movs	r3, #1
 80007ae:	4815      	ldr	r0, [pc, #84]	; (8000804 <LCDReadNData+0xc4>)
 80007b0:	f004 f849 	bl	8004846 <HAL_SPI_TransmitReceive>
			pwBuf[i] = wRLsb[1]<<8;
 80007b4:	7e7b      	ldrb	r3, [r7, #25]
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	6879      	ldr	r1, [r7, #4]
 80007be:	440b      	add	r3, r1
 80007c0:	0212      	lsls	r2, r2, #8
 80007c2:	b292      	uxth	r2, r2
 80007c4:	801a      	strh	r2, [r3, #0]
			pwBuf[i] |= wRLsb[0];
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	8819      	ldrh	r1, [r3, #0]
 80007d0:	7e3b      	ldrb	r3, [r7, #24]
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	4403      	add	r3, r0
 80007dc:	430a      	orrs	r2, r1
 80007de:	b292      	uxth	r2, r2
 80007e0:	801a      	strh	r2, [r3, #0]
		for(i=0;i<ulSizeWordCnt;i++)
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	3301      	adds	r3, #1
 80007e6:	61fb      	str	r3, [r7, #28]
 80007e8:	69fa      	ldr	r2, [r7, #28]
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d3d6      	bcc.n	800079e <LCDReadNData+0x5e>
		}

		HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2101      	movs	r1, #1
 80007f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f8:	f002 f83c 	bl	8002874 <HAL_GPIO_WritePin>
	}

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 80007fc:	bf00      	nop
 80007fe:	3720      	adds	r7, #32
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000078 	.word	0x20000078

08000808 <LCDSendCmdArg>:

//-----------------------------------------------------------
//Host controller function 5---Write command to host data Bus with aruments
//-----------------------------------------------------------
void LCDSendCmdArg(uint16_t usCmdCode,uint16_t* pArg, uint16_t usNumArg)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	6039      	str	r1, [r7, #0]
 8000812:	80fb      	strh	r3, [r7, #6]
 8000814:	4613      	mov	r3, r2
 8000816:	80bb      	strh	r3, [r7, #4]
     uint16_t i;
     //Send Cmd code
     LCDWriteCmdCode(usCmdCode);
 8000818:	88fb      	ldrh	r3, [r7, #6]
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff feba 	bl	8000594 <LCDWriteCmdCode>
     //Send Data
     for(i=0;i<usNumArg;i++)
 8000820:	2300      	movs	r3, #0
 8000822:	81fb      	strh	r3, [r7, #14]
 8000824:	e00a      	b.n	800083c <LCDSendCmdArg+0x34>
     {
         LCDWriteData(pArg[i]);
 8000826:	89fb      	ldrh	r3, [r7, #14]
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	683a      	ldr	r2, [r7, #0]
 800082c:	4413      	add	r3, r2
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fedd 	bl	80005f0 <LCDWriteData>
     for(i=0;i<usNumArg;i++)
 8000836:	89fb      	ldrh	r3, [r7, #14]
 8000838:	3301      	adds	r3, #1
 800083a:	81fb      	strh	r3, [r7, #14]
 800083c:	89fa      	ldrh	r2, [r7, #14]
 800083e:	88bb      	ldrh	r3, [r7, #4]
 8000840:	429a      	cmp	r2, r3
 8000842:	d3f0      	bcc.n	8000826 <LCDSendCmdArg+0x1e>
     }
}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <IT8951ReadReg>:

//-----------------------------------------------------------
//Host Cmd 4---REG_RD
//-----------------------------------------------------------
uint16_t IT8951ReadReg(uint16_t usRegAddr)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	80fb      	strh	r3, [r7, #6]
	uint16_t usData;

	//Send Cmd and Register Address
	LCDWriteCmdCode(IT8951_TCON_REG_RD);
 8000856:	2010      	movs	r0, #16
 8000858:	f7ff fe9c 	bl	8000594 <LCDWriteCmdCode>
	LCDWriteData(usRegAddr);
 800085c:	88fb      	ldrh	r3, [r7, #6]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fec6 	bl	80005f0 <LCDWriteData>
	//Read data from Host Data bus
	usData = LCDReadData();
 8000864:	f7ff ff22 	bl	80006ac <LCDReadData>
 8000868:	4603      	mov	r3, r0
 800086a:	81fb      	strh	r3, [r7, #14]
	return usData;
 800086c:	89fb      	ldrh	r3, [r7, #14]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <IT8951WriteReg>:
//-----------------------------------------------------------
//Host Cmd 5---REG_WR
//-----------------------------------------------------------
void IT8951WriteReg(uint16_t usRegAddr,uint16_t usValue)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	4603      	mov	r3, r0
 800087e:	460a      	mov	r2, r1
 8000880:	80fb      	strh	r3, [r7, #6]
 8000882:	4613      	mov	r3, r2
 8000884:	80bb      	strh	r3, [r7, #4]
	//Send Cmd , Register Address and Write Value
	LCDWriteCmdCode(IT8951_TCON_REG_WR);
 8000886:	2011      	movs	r0, #17
 8000888:	f7ff fe84 	bl	8000594 <LCDWriteCmdCode>
	LCDWriteData(usRegAddr);
 800088c:	88fb      	ldrh	r3, [r7, #6]
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff feae 	bl	80005f0 <LCDWriteData>
	LCDWriteData(usValue);
 8000894:	88bb      	ldrh	r3, [r7, #4]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff feaa 	bl	80005f0 <LCDWriteData>
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <IT8951LoadImgAreaStart>:
}
//-----------------------------------------------------------
//Host Cmd 11---LD_IMG_AREA
//-----------------------------------------------------------
void IT8951LoadImgAreaStart(IT8951LdImgInfo* pstLdImgInfo ,IT8951AreaImgInfo* pstAreaImgInfo)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
    uint16_t usArg[5];
    //Setting Argument for Load image start
    usArg[0] = (pstLdImgInfo->usEndianType << 8 )
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	021b      	lsls	r3, r3, #8
    |(pstLdImgInfo->usPixelFormat << 4)
 80008b4:	b21a      	sxth	r2, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	885b      	ldrh	r3, [r3, #2]
 80008ba:	011b      	lsls	r3, r3, #4
 80008bc:	b21b      	sxth	r3, r3
 80008be:	4313      	orrs	r3, r2
 80008c0:	b21a      	sxth	r2, r3
    |(pstLdImgInfo->usRotate);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	889b      	ldrh	r3, [r3, #4]
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	4313      	orrs	r3, r2
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	b29b      	uxth	r3, r3
    usArg[0] = (pstLdImgInfo->usEndianType << 8 )
 80008ce:	81bb      	strh	r3, [r7, #12]
    usArg[1] = pstAreaImgInfo->usX;
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	81fb      	strh	r3, [r7, #14]
    usArg[2] = pstAreaImgInfo->usY;
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	885b      	ldrh	r3, [r3, #2]
 80008da:	823b      	strh	r3, [r7, #16]
    usArg[3] = pstAreaImgInfo->usWidth;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	889b      	ldrh	r3, [r3, #4]
 80008e0:	827b      	strh	r3, [r7, #18]
    usArg[4] = pstAreaImgInfo->usHeight;
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	88db      	ldrh	r3, [r3, #6]
 80008e6:	82bb      	strh	r3, [r7, #20]
    //Send Cmd and Args
    LCDSendCmdArg(IT8951_TCON_LD_IMG_AREA , usArg , 5);
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	2205      	movs	r2, #5
 80008ee:	4619      	mov	r1, r3
 80008f0:	2021      	movs	r0, #33	; 0x21
 80008f2:	f7ff ff89 	bl	8000808 <LCDSendCmdArg>
}
 80008f6:	bf00      	nop
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <IT8951LoadImgEnd>:
//-----------------------------------------------------------
//Host Cmd 12---LD_IMG_END
//-----------------------------------------------------------
void IT8951LoadImgEnd(void)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	af00      	add	r7, sp, #0
    LCDWriteCmdCode(IT8951_TCON_LD_IMG_END);
 8000902:	2022      	movs	r0, #34	; 0x22
 8000904:	f7ff fe46 	bl	8000594 <LCDWriteCmdCode>
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <GetIT8951SystemInfo>:

void GetIT8951SystemInfo(void* pBuf)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	uint16_t* pusWord = (uint16_t*)pBuf;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	60fb      	str	r3, [r7, #12]
	//IT8951DevInfo* pstDevInfo;

	//Send I80 CMD
	LCDWriteCmdCode(USDEF_I80_CMD_GET_DEV_INFO);
 8000918:	f240 3002 	movw	r0, #770	; 0x302
 800091c:	f7ff fe3a 	bl	8000594 <LCDWriteCmdCode>

	//Burst Read Request for SPI interface only
	LCDReadNData(pusWord, sizeof(IT8951DevInfo)/2);//Polling HRDY for each words(2-bytes) if possible
 8000920:	2114      	movs	r1, #20
 8000922:	68f8      	ldr	r0, [r7, #12]
 8000924:	f7ff ff0c 	bl	8000740 <LCDReadNData>
//	printf("Image Buffer Address = %X\r\n",
//	pstDevInfo->usImgBufAddrL | (pstDevInfo->usImgBufAddrH << 16));
	//Show Firmware and LUT Version
//	printf("FW Version = %s\r\n", (uint8_t*)pstDevInfo->usFWVersion);
//	printf("LUT Version = %s\r\n", (uint8_t*)pstDevInfo->usLUTVersion);
}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <IT8951SetImgBufBaseAddr>:

//-----------------------------------------------------------
//Initial function 2---Set Image buffer base address
//-----------------------------------------------------------
void IT8951SetImgBufBaseAddr(uint32_t ulImgBufAddr)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	uint16_t usWordH = (uint16_t)((ulImgBufAddr >> 16) & 0x0000FFFF);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	0c1b      	lsrs	r3, r3, #16
 800093c:	81fb      	strh	r3, [r7, #14]
	uint16_t usWordL = (uint16_t)( ulImgBufAddr & 0x0000FFFF);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	81bb      	strh	r3, [r7, #12]
	//Write LISAR Reg
	IT8951WriteReg(LISAR + 2 ,usWordH);
 8000942:	89fb      	ldrh	r3, [r7, #14]
 8000944:	4619      	mov	r1, r3
 8000946:	f240 200a 	movw	r0, #522	; 0x20a
 800094a:	f7ff ff94 	bl	8000876 <IT8951WriteReg>
	IT8951WriteReg(LISAR ,usWordL);
 800094e:	89bb      	ldrh	r3, [r7, #12]
 8000950:	4619      	mov	r1, r3
 8000952:	f44f 7002 	mov.w	r0, #520	; 0x208
 8000956:	f7ff ff8e 	bl	8000876 <IT8951WriteReg>
}
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <IT8951WaitForDisplayReady>:
//-----------------------------------------------------------
//Display function 1---Wait for LUT Engine Finish
//                     Polling Display Engine Ready by LUTNo
//-----------------------------------------------------------
void IT8951WaitForDisplayReady()
{
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
	//Check IT8951 Register LUTAFSR => NonZero Busy, 0 - Free
	while(IT8951ReadReg(LUTAFSR));
 8000966:	bf00      	nop
 8000968:	f241 2024 	movw	r0, #4644	; 0x1224
 800096c:	f7ff ff6e 	bl	800084c <IT8951ReadReg>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1f8      	bne.n	8000968 <IT8951WaitForDisplayReady+0x6>
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}

0800097a <IT8951HostAreaPackedPixelWrite>:

//-----------------------------------------------------------
//Display function 2---Load Image Area process
//-----------------------------------------------------------
void IT8951HostAreaPackedPixelWrite(IT8951LdImgInfo* pstLdImgInfo,IT8951AreaImgInfo* pstAreaImgInfo)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b084      	sub	sp, #16
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
 8000982:	6039      	str	r1, [r7, #0]
	//uint32_t i,j;
	//Source buffer address of Host
	uint16_t* pusFrameBuf = (uint16_t*)pstLdImgInfo->ulStartFBAddr;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	60fb      	str	r3, [r7, #12]

	//Set Image buffer(IT8951) Base address
	IT8951SetImgBufBaseAddr(pstLdImgInfo->ulImgBufBaseAddr);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ffce 	bl	8000930 <IT8951SetImgBufBaseAddr>
	//Send Load Image start Cmd
	IT8951LoadImgAreaStart(pstLdImgInfo , pstAreaImgInfo);
 8000994:	6839      	ldr	r1, [r7, #0]
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff ff84 	bl	80008a4 <IT8951LoadImgAreaStart>
	//Host Write Data
	//LCDWriteNData(pusFrameBuf, (pstAreaImgInfo->usHeight*pstAreaImgInfo->usWidth/2));
	LCDWriteNData(pusFrameBuf, (pstAreaImgInfo->usHeight*pstAreaImgInfo->usWidth/4));
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	88db      	ldrh	r3, [r3, #6]
 80009a0:	461a      	mov	r2, r3
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	889b      	ldrh	r3, [r3, #4]
 80009a6:	fb03 f302 	mul.w	r3, r3, r2
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	da00      	bge.n	80009b0 <IT8951HostAreaPackedPixelWrite+0x36>
 80009ae:	3303      	adds	r3, #3
 80009b0:	109b      	asrs	r3, r3, #2
 80009b2:	4619      	mov	r1, r3
 80009b4:	68f8      	ldr	r0, [r7, #12]
 80009b6:	f7ff fe49 	bl	800064c <LCDWriteNData>
					LCDWriteData(*pusFrameBuf);
					pusFrameBuf++;
			}
	}*/
	//Send Load Img End Command
	IT8951LoadImgEnd();
 80009ba:	f7ff ffa0 	bl	80008fe <IT8951LoadImgEnd>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <IT8951DisplayArea>:

//-----------------------------------------------------------
//Display functions 3---Application for Display panel Area
//-----------------------------------------------------------
void IT8951DisplayArea(uint16_t usX, uint16_t usY, uint16_t usW, uint16_t usH, uint16_t usDpyMode)
{
 80009c6:	b590      	push	{r4, r7, lr}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4604      	mov	r4, r0
 80009ce:	4608      	mov	r0, r1
 80009d0:	4611      	mov	r1, r2
 80009d2:	461a      	mov	r2, r3
 80009d4:	4623      	mov	r3, r4
 80009d6:	80fb      	strh	r3, [r7, #6]
 80009d8:	4603      	mov	r3, r0
 80009da:	80bb      	strh	r3, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	807b      	strh	r3, [r7, #2]
 80009e0:	4613      	mov	r3, r2
 80009e2:	803b      	strh	r3, [r7, #0]
	//Send I80 Display Command (User defined command of IT8951)
	LCDWriteCmdCode(USDEF_I80_CMD_DPY_AREA); //0x0034
 80009e4:	2034      	movs	r0, #52	; 0x34
 80009e6:	f7ff fdd5 	bl	8000594 <LCDWriteCmdCode>
	//Write arguments
	LCDWriteData(usX);
 80009ea:	88fb      	ldrh	r3, [r7, #6]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fdff 	bl	80005f0 <LCDWriteData>
	LCDWriteData(usY);
 80009f2:	88bb      	ldrh	r3, [r7, #4]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fdfb 	bl	80005f0 <LCDWriteData>
	LCDWriteData(usW);
 80009fa:	887b      	ldrh	r3, [r7, #2]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fdf7 	bl	80005f0 <LCDWriteData>
	LCDWriteData(usH);
 8000a02:	883b      	ldrh	r3, [r7, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fdf3 	bl	80005f0 <LCDWriteData>
	LCDWriteData(usDpyMode);
 8000a0a:	8b3b      	ldrh	r3, [r7, #24]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fdef 	bl	80005f0 <LCDWriteData>
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd90      	pop	{r4, r7, pc}
	...

08000a1c <IT8951_Init>:

//-----------------------------------------------------------
//Test function 1---Software Initial
//-----------------------------------------------------------
uint8_t IT8951_Init()
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	//bcm2835_gpio_fsel(CS, BCM2835_GPIO_FSEL_OUTP);
	//bcm2835_gpio_fsel(HRDY, BCM2835_GPIO_FSEL_INPT);
	//bcm2835_gpio_fsel(RESET, BCM2835_GPIO_FSEL_OUTP);

	//bcm2835_gpio_write(CS, HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2101      	movs	r1, #1
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f001 ff24 	bl	8002874 <HAL_GPIO_WritePin>

	//printf("****** IT8951 ******\n");

	//bcm2835_gpio_write(RESET, LOW);
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2110      	movs	r1, #16
 8000a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a34:	f001 ff1e 	bl	8002874 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f001 fa25 	bl	8001e88 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, SET);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2110      	movs	r1, #16
 8000a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a46:	f001 ff15 	bl	8002874 <HAL_GPIO_WritePin>
	//bcm2835_gpio_write(RESET, HIGH);

	//Get Device Info
	GetIT8951SystemInfo(&gstI80DevInfo);
 8000a4a:	480a      	ldr	r0, [pc, #40]	; (8000a74 <IT8951_Init+0x58>)
 8000a4c:	f7ff ff5e 	bl	800090c <GetIT8951SystemInfo>
//	{
//		perror("malloc error!\n");
//		return 1;
//	}

 	gulImgBufAddr = gstI80DevInfo.usImgBufAddrL | (gstI80DevInfo.usImgBufAddrH << 16);
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <IT8951_Init+0x58>)
 8000a52:	889b      	ldrh	r3, [r3, #4]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <IT8951_Init+0x58>)
 8000a58:	88db      	ldrh	r3, [r3, #6]
 8000a5a:	041b      	lsls	r3, r3, #16
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <IT8951_Init+0x5c>)
 8000a62:	601a      	str	r2, [r3, #0]

 	//Set to Enable I80 Packed mode
 	IT8951WriteReg(I80CPCR, 0x0001);
 8000a64:	2101      	movs	r1, #1
 8000a66:	2004      	movs	r0, #4
 8000a68:	f7ff ff05 	bl	8000876 <IT8951WriteReg>
 	//EpdDriverLoadTemplate();
	return 0;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000034 	.word	0x20000034
 8000a78:	2000005c 	.word	0x2000005c

08000a7c <EpdDriverLoadTemplate>:



extern const unsigned char Kalender[];
void EpdDriverLoadTemplate()
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
	IT8951LdImgInfo stLdImgInfo;
	IT8951AreaImgInfo stAreaImgInfo;
	IT8951WaitForDisplayReady();
 8000a82:	f7ff ff6e 	bl	8000962 <IT8951WaitForDisplayReady>

	//Setting Load image information
	stLdImgInfo.ulStartFBAddr    = (uint32_t)Kalender;
 8000a86:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <EpdDriverLoadTemplate+0x58>)
 8000a88:	613b      	str	r3, [r7, #16]
	stLdImgInfo.usEndianType     = IT8951_LDIMG_L_ENDIAN;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	813b      	strh	r3, [r7, #8]
	stLdImgInfo.usPixelFormat    = IT8951_4BPP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	817b      	strh	r3, [r7, #10]
	stLdImgInfo.usRotate         = IT8951_ROTATE_0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	81bb      	strh	r3, [r7, #12]
	stLdImgInfo.ulImgBufBaseAddr = gulImgBufAddr;
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <EpdDriverLoadTemplate+0x5c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	617b      	str	r3, [r7, #20]
	//Set Load Area
	stAreaImgInfo.usX      = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	803b      	strh	r3, [r7, #0]
	stAreaImgInfo.usY      = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	807b      	strh	r3, [r7, #2]
	stAreaImgInfo.usWidth  = gstI80DevInfo.usPanelW;
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <EpdDriverLoadTemplate+0x60>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	80bb      	strh	r3, [r7, #4]
 	stAreaImgInfo.usHeight = gstI80DevInfo.usPanelH;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <EpdDriverLoadTemplate+0x60>)
 8000aac:	885b      	ldrh	r3, [r3, #2]
 8000aae:	80fb      	strh	r3, [r7, #6]

	//Load Image from Host to IT8951 Image Buffer
	IT8951HostAreaPackedPixelWrite(&stLdImgInfo, &stAreaImgInfo);//Display function 2
 8000ab0:	463a      	mov	r2, r7
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ff5e 	bl	800097a <IT8951HostAreaPackedPixelWrite>
	//Display Area ?V (x,y,w,h) with mode 2 for fast gray clear mode - depends on current waveform
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac4:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <EpdDriverLoadTemplate+0x64>)
 8000ac6:	f001 fed5 	bl	8002874 <HAL_GPIO_WritePin>
	//IT8951DisplayArea(stAreaImgInfo.usX ,stAreaImgInfo.usY, gstI80DevInfo.usPanelW, gstI80DevInfo.usPanelH, 2);
	//IT8951Sleep();
}
 8000aca:	bf00      	nop
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	08006e98 	.word	0x08006e98
 8000ad8:	2000005c 	.word	0x2000005c
 8000adc:	20000034 	.word	0x20000034
 8000ae0:	48000400 	.word	0x48000400

08000ae4 <EpdDriverDrawBox>:


void EpdDriverDrawBox(uint8_t* buffer, uint16_t usX, uint16_t usY, uint16_t usWidth, uint16_t usHeight)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	4608      	mov	r0, r1
 8000aee:	4611      	mov	r1, r2
 8000af0:	461a      	mov	r2, r3
 8000af2:	4603      	mov	r3, r0
 8000af4:	817b      	strh	r3, [r7, #10]
 8000af6:	460b      	mov	r3, r1
 8000af8:	813b      	strh	r3, [r7, #8]
 8000afa:	4613      	mov	r3, r2
 8000afc:	80fb      	strh	r3, [r7, #6]
	IT8951LdImgInfo stLdImgInfo;
	IT8951AreaImgInfo stAreaImgInfo;
	IT8951WaitForDisplayReady();
 8000afe:	f7ff ff30 	bl	8000962 <IT8951WaitForDisplayReady>

	//Setting Load image information
	stLdImgInfo.ulStartFBAddr    = (uint32_t)buffer;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	623b      	str	r3, [r7, #32]
	stLdImgInfo.usEndianType     = IT8951_LDIMG_L_ENDIAN;
 8000b06:	2300      	movs	r3, #0
 8000b08:	833b      	strh	r3, [r7, #24]
	stLdImgInfo.usPixelFormat    = IT8951_8BPP;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	837b      	strh	r3, [r7, #26]
	stLdImgInfo.usRotate         = IT8951_ROTATE_0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	83bb      	strh	r3, [r7, #28]
	stLdImgInfo.ulImgBufBaseAddr = gulImgBufAddr;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <EpdDriverDrawBox+0x5c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
	//Set Load Area
	stAreaImgInfo.usX      = usX;
 8000b18:	897b      	ldrh	r3, [r7, #10]
 8000b1a:	823b      	strh	r3, [r7, #16]
	stAreaImgInfo.usY      = usY;
 8000b1c:	893b      	ldrh	r3, [r7, #8]
 8000b1e:	827b      	strh	r3, [r7, #18]
	stAreaImgInfo.usWidth  = usWidth;
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	82bb      	strh	r3, [r7, #20]
 	stAreaImgInfo.usHeight = usHeight;
 8000b24:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000b26:	82fb      	strh	r3, [r7, #22]

	//Load Image from Host to IT8951 Image Buffer
	IT8951HostAreaPackedPixelWrite(&stLdImgInfo, &stAreaImgInfo);//Display function 2
 8000b28:	f107 0210 	add.w	r2, r7, #16
 8000b2c:	f107 0318 	add.w	r3, r7, #24
 8000b30:	4611      	mov	r1, r2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ff21 	bl	800097a <IT8951HostAreaPackedPixelWrite>
	//Display Area ?V (x,y,w,h) with mode 2 for fast gray clear mode - depends on current waveform
	//IT8951DisplayArea(stAreaImgInfo.usX,stAreaImgInfo.usY, stAreaImgInfo.usWidth, stAreaImgInfo.usHeight, 2);
	//IT8951Sleep();
}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	2000005c 	.word	0x2000005c

08000b44 <EpdDriverShowDisp>:

void EpdDriverShowDisp()
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af02      	add	r7, sp, #8
	IT8951DisplayArea(0,0,1200,825, 2);
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	f240 3339 	movw	r3, #825	; 0x339
 8000b52:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000b56:	2100      	movs	r1, #0
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f7ff ff34 	bl	80009c6 <IT8951DisplayArea>
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <Paint_NewImage>:
//    width   :   The width of the picture
//    Height  :   The height of the picture
//    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(uint8_t *image, uint16_t Width, uint16_t Height, uint16_t Rotate, uint16_t Color)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	4611      	mov	r1, r2
 8000b70:	461a      	mov	r2, r3
 8000b72:	4603      	mov	r3, r0
 8000b74:	817b      	strh	r3, [r7, #10]
 8000b76:	460b      	mov	r3, r1
 8000b78:	813b      	strh	r3, [r7, #8]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <Paint_NewImage+0x84>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8000b84:	4a18      	ldr	r2, [pc, #96]	; (8000be8 <Paint_NewImage+0x84>)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 8000b8a:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <Paint_NewImage+0x84>)
 8000b8c:	897b      	ldrh	r3, [r7, #10]
 8000b8e:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000b90:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <Paint_NewImage+0x84>)
 8000b92:	893b      	ldrh	r3, [r7, #8]
 8000b94:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8000b96:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <Paint_NewImage+0x84>)
 8000b98:	8b3b      	ldrh	r3, [r7, #24]
 8000b9a:	8193      	strh	r3, [r2, #12]
    //Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
    Paint.WidthByte = Width;
 8000b9c:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <Paint_NewImage+0x84>)
 8000b9e:	897b      	ldrh	r3, [r7, #10]
 8000ba0:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8000ba2:	4a11      	ldr	r2, [pc, #68]	; (8000be8 <Paint_NewImage+0x84>)
 8000ba4:	893b      	ldrh	r3, [r7, #8]
 8000ba6:	8293      	strh	r3, [r2, #20]
    //printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
    //printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 8000ba8:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <Paint_NewImage+0x84>)
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <Paint_NewImage+0x84>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000bb4:	88fb      	ldrh	r3, [r7, #6]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d002      	beq.n	8000bc0 <Paint_NewImage+0x5c>
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	2bb4      	cmp	r3, #180	; 0xb4
 8000bbe:	d106      	bne.n	8000bce <Paint_NewImage+0x6a>
        Paint.Width = Width;
 8000bc0:	4a09      	ldr	r2, [pc, #36]	; (8000be8 <Paint_NewImage+0x84>)
 8000bc2:	897b      	ldrh	r3, [r7, #10]
 8000bc4:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000bc6:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <Paint_NewImage+0x84>)
 8000bc8:	893b      	ldrh	r3, [r7, #8]
 8000bca:	80d3      	strh	r3, [r2, #6]
 8000bcc:	e005      	b.n	8000bda <Paint_NewImage+0x76>
    } else {
        Paint.Width = Height;
 8000bce:	4a06      	ldr	r2, [pc, #24]	; (8000be8 <Paint_NewImage+0x84>)
 8000bd0:	893b      	ldrh	r3, [r7, #8]
 8000bd2:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8000bd4:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <Paint_NewImage+0x84>)
 8000bd6:	897b      	ldrh	r3, [r7, #10]
 8000bd8:	80d3      	strh	r3, [r2, #6]
    }
}
 8000bda:	bf00      	nop
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000060 	.word	0x20000060

08000bec <Paint_SetPixel>:
//    Xpoint  :   At point X
//    Ypoint  :   At point Y
//    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	80fb      	strh	r3, [r7, #6]
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	80bb      	strh	r3, [r7, #4]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000bfe:	4b50      	ldr	r3, [pc, #320]	; (8000d40 <Paint_SetPixel+0x154>)
 8000c00:	889b      	ldrh	r3, [r3, #4]
 8000c02:	88fa      	ldrh	r2, [r7, #6]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	f200 8091 	bhi.w	8000d2c <Paint_SetPixel+0x140>
 8000c0a:	4b4d      	ldr	r3, [pc, #308]	; (8000d40 <Paint_SetPixel+0x154>)
 8000c0c:	88db      	ldrh	r3, [r3, #6]
 8000c0e:	88ba      	ldrh	r2, [r7, #4]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	f200 808b 	bhi.w	8000d2c <Paint_SetPixel+0x140>
//        Debug("Exceeding display boundaries\r\n");
        return;
    }      
    uint16_t X, Y;

    switch(Paint.Rotate) {
 8000c16:	4b4a      	ldr	r3, [pc, #296]	; (8000d40 <Paint_SetPixel+0x154>)
 8000c18:	89db      	ldrh	r3, [r3, #14]
 8000c1a:	2b5a      	cmp	r3, #90	; 0x5a
 8000c1c:	d00f      	beq.n	8000c3e <Paint_SetPixel+0x52>
 8000c1e:	2b5a      	cmp	r3, #90	; 0x5a
 8000c20:	dc02      	bgt.n	8000c28 <Paint_SetPixel+0x3c>
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d006      	beq.n	8000c34 <Paint_SetPixel+0x48>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
		
    default:
        return;
 8000c26:	e086      	b.n	8000d36 <Paint_SetPixel+0x14a>
    switch(Paint.Rotate) {
 8000c28:	2bb4      	cmp	r3, #180	; 0xb4
 8000c2a:	d012      	beq.n	8000c52 <Paint_SetPixel+0x66>
 8000c2c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000c30:	d01e      	beq.n	8000c70 <Paint_SetPixel+0x84>
        return;
 8000c32:	e080      	b.n	8000d36 <Paint_SetPixel+0x14a>
        X = Xpoint;
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 8000c38:	88bb      	ldrh	r3, [r7, #4]
 8000c3a:	81bb      	strh	r3, [r7, #12]
        break;
 8000c3c:	e022      	b.n	8000c84 <Paint_SetPixel+0x98>
        X = Paint.WidthMemory - Ypoint - 1;
 8000c3e:	4b40      	ldr	r3, [pc, #256]	; (8000d40 <Paint_SetPixel+0x154>)
 8000c40:	891a      	ldrh	r2, [r3, #8]
 8000c42:	88bb      	ldrh	r3, [r7, #4]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8000c4c:	88fb      	ldrh	r3, [r7, #6]
 8000c4e:	81bb      	strh	r3, [r7, #12]
        break;
 8000c50:	e018      	b.n	8000c84 <Paint_SetPixel+0x98>
        X = Paint.WidthMemory - Xpoint - 1;
 8000c52:	4b3b      	ldr	r3, [pc, #236]	; (8000d40 <Paint_SetPixel+0x154>)
 8000c54:	891a      	ldrh	r2, [r3, #8]
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8000c60:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <Paint_SetPixel+0x154>)
 8000c62:	895a      	ldrh	r2, [r3, #10]
 8000c64:	88bb      	ldrh	r3, [r7, #4]
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	81bb      	strh	r3, [r7, #12]
        break;
 8000c6e:	e009      	b.n	8000c84 <Paint_SetPixel+0x98>
        X = Ypoint;
 8000c70:	88bb      	ldrh	r3, [r7, #4]
 8000c72:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8000c74:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <Paint_SetPixel+0x154>)
 8000c76:	895a      	ldrh	r2, [r3, #10]
 8000c78:	88fb      	ldrh	r3, [r7, #6]
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	81bb      	strh	r3, [r7, #12]
        break;
 8000c82:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8000c84:	4b2e      	ldr	r3, [pc, #184]	; (8000d40 <Paint_SetPixel+0x154>)
 8000c86:	8a1b      	ldrh	r3, [r3, #16]
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	d851      	bhi.n	8000d30 <Paint_SetPixel+0x144>
 8000c8c:	a201      	add	r2, pc, #4	; (adr r2, 8000c94 <Paint_SetPixel+0xa8>)
 8000c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c92:	bf00      	nop
 8000c94:	08000ce3 	.word	0x08000ce3
 8000c98:	08000ca5 	.word	0x08000ca5
 8000c9c:	08000cb5 	.word	0x08000cb5
 8000ca0:	08000cc5 	.word	0x08000cc5
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8000ca4:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <Paint_SetPixel+0x154>)
 8000ca6:	891a      	ldrh	r2, [r3, #8]
 8000ca8:	89fb      	ldrh	r3, [r7, #14]
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	81fb      	strh	r3, [r7, #14]
        break;
 8000cb2:	e017      	b.n	8000ce4 <Paint_SetPixel+0xf8>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8000cb4:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <Paint_SetPixel+0x154>)
 8000cb6:	895a      	ldrh	r2, [r3, #10]
 8000cb8:	89bb      	ldrh	r3, [r7, #12]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	81bb      	strh	r3, [r7, #12]
        break;
 8000cc2:	e00f      	b.n	8000ce4 <Paint_SetPixel+0xf8>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8000cc4:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <Paint_SetPixel+0x154>)
 8000cc6:	891a      	ldrh	r2, [r3, #8]
 8000cc8:	89fb      	ldrh	r3, [r7, #14]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8000cd2:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <Paint_SetPixel+0x154>)
 8000cd4:	895a      	ldrh	r2, [r3, #10]
 8000cd6:	89bb      	ldrh	r3, [r7, #12]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	81bb      	strh	r3, [r7, #12]
        break;
 8000ce0:	e000      	b.n	8000ce4 <Paint_SetPixel+0xf8>
        break;
 8000ce2:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <Paint_SetPixel+0x154>)
 8000ce6:	891b      	ldrh	r3, [r3, #8]
 8000ce8:	89fa      	ldrh	r2, [r7, #14]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d822      	bhi.n	8000d34 <Paint_SetPixel+0x148>
 8000cee:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <Paint_SetPixel+0x154>)
 8000cf0:	895b      	ldrh	r3, [r3, #10]
 8000cf2:	89ba      	ldrh	r2, [r7, #12]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d81d      	bhi.n	8000d34 <Paint_SetPixel+0x148>
//        Debug("Exceeding display boundaries\r\n");
        return;
    }
    
   // uint32_t Addr = X / 8 + Y * Paint.WidthByte;
    uint32_t Addr = X + Y * Paint.WidthByte;
 8000cf8:	89fa      	ldrh	r2, [r7, #14]
 8000cfa:	89bb      	ldrh	r3, [r7, #12]
 8000cfc:	4910      	ldr	r1, [pc, #64]	; (8000d40 <Paint_SetPixel+0x154>)
 8000cfe:	8a49      	ldrh	r1, [r1, #18]
 8000d00:	fb01 f303 	mul.w	r3, r1, r3
 8000d04:	4413      	add	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
   // uint8_t Rdata = Paint.Image[Addr];
    if(Color == BLACK)
 8000d08:	887b      	ldrh	r3, [r7, #2]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d106      	bne.n	8000d1c <Paint_SetPixel+0x130>
        //Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
    	Paint.Image[Addr] = BLACK;
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <Paint_SetPixel+0x154>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	4413      	add	r3, r2
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	e00c      	b.n	8000d36 <Paint_SetPixel+0x14a>
    else
        //Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
    	Paint.Image[Addr] = Color;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <Paint_SetPixel+0x154>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	4413      	add	r3, r2
 8000d24:	887a      	ldrh	r2, [r7, #2]
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	e004      	b.n	8000d36 <Paint_SetPixel+0x14a>
        return;
 8000d2c:	bf00      	nop
 8000d2e:	e002      	b.n	8000d36 <Paint_SetPixel+0x14a>
        return;
 8000d30:	bf00      	nop
 8000d32:	e000      	b.n	8000d36 <Paint_SetPixel+0x14a>
        return;
 8000d34:	bf00      	nop
}
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	20000060 	.word	0x20000060

08000d44 <Paint_Clear>:
//function:	Clear the color of the picture
//parameter:
//    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(uint8_t Color)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
    for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000d4e:	2300      	movs	r3, #0
 8000d50:	81fb      	strh	r3, [r7, #14]
 8000d52:	e01b      	b.n	8000d8c <Paint_Clear+0x48>
        for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000d54:	2300      	movs	r3, #0
 8000d56:	81bb      	strh	r3, [r7, #12]
 8000d58:	e010      	b.n	8000d7c <Paint_Clear+0x38>
            uint32_t Addr = X + Y*Paint.WidthByte;
 8000d5a:	89ba      	ldrh	r2, [r7, #12]
 8000d5c:	89fb      	ldrh	r3, [r7, #14]
 8000d5e:	4911      	ldr	r1, [pc, #68]	; (8000da4 <Paint_Clear+0x60>)
 8000d60:	8a49      	ldrh	r1, [r1, #18]
 8000d62:	fb01 f303 	mul.w	r3, r1, r3
 8000d66:	4413      	add	r3, r2
 8000d68:	60bb      	str	r3, [r7, #8]
            Paint.Image[Addr] = Color;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <Paint_Clear+0x60>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	4413      	add	r3, r2
 8000d72:	79fa      	ldrb	r2, [r7, #7]
 8000d74:	701a      	strb	r2, [r3, #0]
        for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000d76:	89bb      	ldrh	r3, [r7, #12]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	81bb      	strh	r3, [r7, #12]
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <Paint_Clear+0x60>)
 8000d7e:	8a5b      	ldrh	r3, [r3, #18]
 8000d80:	89ba      	ldrh	r2, [r7, #12]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d3e9      	bcc.n	8000d5a <Paint_Clear+0x16>
    for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000d86:	89fb      	ldrh	r3, [r7, #14]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	81fb      	strh	r3, [r7, #14]
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <Paint_Clear+0x60>)
 8000d8e:	8a9b      	ldrh	r3, [r3, #20]
 8000d90:	89fa      	ldrh	r2, [r7, #14]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d3de      	bcc.n	8000d54 <Paint_Clear+0x10>
        }
    }
}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000060 	.word	0x20000060

08000da8 <Paint_DrawChar>:
//    Color_Background : Select the background color of the English character
//    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(uint16_t Xpoint, uint16_t Ypoint, const char Acsii_Char,
                    sFONT* Font, uint8_t Color_Background, uint8_t Color_Foreground)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	4603      	mov	r3, r0
 8000db2:	81fb      	strh	r3, [r7, #14]
 8000db4:	460b      	mov	r3, r1
 8000db6:	81bb      	strh	r3, [r7, #12]
 8000db8:	4613      	mov	r3, r2
 8000dba:	72fb      	strb	r3, [r7, #11]
    uint16_t Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000dbc:	4b4f      	ldr	r3, [pc, #316]	; (8000efc <Paint_DrawChar+0x154>)
 8000dbe:	889b      	ldrh	r3, [r3, #4]
 8000dc0:	89fa      	ldrh	r2, [r7, #14]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	f200 8096 	bhi.w	8000ef4 <Paint_DrawChar+0x14c>
 8000dc8:	4b4c      	ldr	r3, [pc, #304]	; (8000efc <Paint_DrawChar+0x154>)
 8000dca:	88db      	ldrh	r3, [r3, #6]
 8000dcc:	89ba      	ldrh	r2, [r7, #12]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 8090 	bhi.w	8000ef4 <Paint_DrawChar+0x14c>
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8000dd4:	7afb      	ldrb	r3, [r7, #11]
 8000dd6:	3b20      	subs	r3, #32
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	88d2      	ldrh	r2, [r2, #6]
 8000ddc:	fb02 f303 	mul.w	r3, r2, r3
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	8892      	ldrh	r2, [r2, #4]
 8000de4:	08d2      	lsrs	r2, r2, #3
 8000de6:	b292      	uxth	r2, r2
 8000de8:	4611      	mov	r1, r2
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	8892      	ldrh	r2, [r2, #4]
 8000dee:	f002 0207 	and.w	r2, r2, #7
 8000df2:	b292      	uxth	r2, r2
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	bf14      	ite	ne
 8000df8:	2201      	movne	r2, #1
 8000dfa:	2200      	moveq	r2, #0
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440a      	add	r2, r1
 8000e00:	fb02 f303 	mul.w	r3, r2, r3
 8000e04:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000e10:	2300      	movs	r3, #0
 8000e12:	83fb      	strh	r3, [r7, #30]
 8000e14:	e068      	b.n	8000ee8 <Paint_DrawChar+0x140>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000e16:	2300      	movs	r3, #0
 8000e18:	83bb      	strh	r3, [r7, #28]
 8000e1a:	e053      	b.n	8000ec4 <Paint_DrawChar+0x11c>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8000e1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e20:	2bff      	cmp	r3, #255	; 0xff
 8000e22:	d11a      	bne.n	8000e5a <Paint_DrawChar+0xb2>
                //if (*ptr & (0x80 >> (Column % 8)))
                if (*ptr & (0x80 >> (Column % 8)))
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	8bbb      	ldrh	r3, [r7, #28]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	2280      	movs	r2, #128	; 0x80
 8000e32:	fa42 f303 	asr.w	r3, r2, r3
 8000e36:	400b      	ands	r3, r1
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d037      	beq.n	8000eac <Paint_DrawChar+0x104>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000e3c:	89fa      	ldrh	r2, [r7, #14]
 8000e3e:	8bbb      	ldrh	r3, [r7, #28]
 8000e40:	4413      	add	r3, r2
 8000e42:	b298      	uxth	r0, r3
 8000e44:	89ba      	ldrh	r2, [r7, #12]
 8000e46:	8bfb      	ldrh	r3, [r7, #30]
 8000e48:	4413      	add	r3, r2
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000e50:	b292      	uxth	r2, r2
 8000e52:	4619      	mov	r1, r3
 8000e54:	f7ff feca 	bl	8000bec <Paint_SetPixel>
 8000e58:	e028      	b.n	8000eac <Paint_DrawChar+0x104>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column%8))) {
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	8bbb      	ldrh	r3, [r7, #28]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	2280      	movs	r2, #128	; 0x80
 8000e68:	fa42 f303 	asr.w	r3, r2, r3
 8000e6c:	400b      	ands	r3, r1
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d00e      	beq.n	8000e90 <Paint_DrawChar+0xe8>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000e72:	89fa      	ldrh	r2, [r7, #14]
 8000e74:	8bbb      	ldrh	r3, [r7, #28]
 8000e76:	4413      	add	r3, r2
 8000e78:	b298      	uxth	r0, r3
 8000e7a:	89ba      	ldrh	r2, [r7, #12]
 8000e7c:	8bfb      	ldrh	r3, [r7, #30]
 8000e7e:	4413      	add	r3, r2
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000e86:	b292      	uxth	r2, r2
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f7ff feaf 	bl	8000bec <Paint_SetPixel>
 8000e8e:	e00d      	b.n	8000eac <Paint_DrawChar+0x104>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8000e90:	89fa      	ldrh	r2, [r7, #14]
 8000e92:	8bbb      	ldrh	r3, [r7, #28]
 8000e94:	4413      	add	r3, r2
 8000e96:	b298      	uxth	r0, r3
 8000e98:	89ba      	ldrh	r2, [r7, #12]
 8000e9a:	8bfb      	ldrh	r3, [r7, #30]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000ea4:	b292      	uxth	r2, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f7ff fea0 	bl	8000bec <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8000eac:	8bbb      	ldrh	r3, [r7, #28]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	2b07      	cmp	r3, #7
 8000eb6:	d102      	bne.n	8000ebe <Paint_DrawChar+0x116>
                ptr++;
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000ebe:	8bbb      	ldrh	r3, [r7, #28]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	83bb      	strh	r3, [r7, #28]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	889b      	ldrh	r3, [r3, #4]
 8000ec8:	8bba      	ldrh	r2, [r7, #28]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d3a6      	bcc.n	8000e1c <Paint_DrawChar+0x74>
        }// Write a line
        if (Font->Width % 8 != 0)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	889b      	ldrh	r3, [r3, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <Paint_DrawChar+0x13a>
            ptr++;
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000ee2:	8bfb      	ldrh	r3, [r7, #30]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	83fb      	strh	r3, [r7, #30]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	88db      	ldrh	r3, [r3, #6]
 8000eec:	8bfa      	ldrh	r2, [r7, #30]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d391      	bcc.n	8000e16 <Paint_DrawChar+0x6e>
 8000ef2:	e000      	b.n	8000ef6 <Paint_DrawChar+0x14e>
        return;
 8000ef4:	bf00      	nop
    }// Write all
}
 8000ef6:	3720      	adds	r7, #32
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000060 	.word	0x20000060

08000f00 <Paint_DrawString_EN>:
//    Color_Background : Select the background color of the English character
//    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(uint16_t Xstart, uint16_t Ystart, const char * pString,
                         sFONT* Font, uint8_t Color_Background, uint8_t Color_Foreground )
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af02      	add	r7, sp, #8
 8000f06:	60ba      	str	r2, [r7, #8]
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	81fb      	strh	r3, [r7, #14]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	81bb      	strh	r3, [r7, #12]
    uint16_t Xpoint = Xstart;
 8000f12:	89fb      	ldrh	r3, [r7, #14]
 8000f14:	82fb      	strh	r3, [r7, #22]
    uint16_t Ypoint = Ystart;
 8000f16:	89bb      	ldrh	r3, [r7, #12]
 8000f18:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8000f1a:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <Paint_DrawString_EN+0xa4>)
 8000f1c:	889b      	ldrh	r3, [r3, #4]
 8000f1e:	89fa      	ldrh	r2, [r7, #14]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d83a      	bhi.n	8000f9a <Paint_DrawString_EN+0x9a>
 8000f24:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <Paint_DrawString_EN+0xa4>)
 8000f26:	88db      	ldrh	r3, [r3, #6]
 8000f28:	89ba      	ldrh	r2, [r7, #12]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d835      	bhi.n	8000f9a <Paint_DrawString_EN+0x9a>
//        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
        return;
    }

    while (* pString != '\0') {
 8000f2e:	e02f      	b.n	8000f90 <Paint_DrawString_EN+0x90>
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8000f30:	8afb      	ldrh	r3, [r7, #22]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	8892      	ldrh	r2, [r2, #4]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a1a      	ldr	r2, [pc, #104]	; (8000fa4 <Paint_DrawString_EN+0xa4>)
 8000f3a:	8892      	ldrh	r2, [r2, #4]
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	dd06      	ble.n	8000f4e <Paint_DrawString_EN+0x4e>
            Xpoint = Xstart;
 8000f40:	89fb      	ldrh	r3, [r7, #14]
 8000f42:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	88da      	ldrh	r2, [r3, #6]
 8000f48:	8abb      	ldrh	r3, [r7, #20]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8000f4e:	8abb      	ldrh	r3, [r7, #20]
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	88d2      	ldrh	r2, [r2, #6]
 8000f54:	4413      	add	r3, r2
 8000f56:	4a13      	ldr	r2, [pc, #76]	; (8000fa4 <Paint_DrawString_EN+0xa4>)
 8000f58:	88d2      	ldrh	r2, [r2, #6]
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	dd03      	ble.n	8000f66 <Paint_DrawString_EN+0x66>
            Xpoint = Xstart;
 8000f5e:	89fb      	ldrh	r3, [r7, #14]
 8000f60:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8000f62:	89bb      	ldrh	r3, [r7, #12]
 8000f64:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	781a      	ldrb	r2, [r3, #0]
 8000f6a:	8ab9      	ldrh	r1, [r7, #20]
 8000f6c:	8af8      	ldrh	r0, [r7, #22]
 8000f6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f7ff ff14 	bl	8000da8 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	3301      	adds	r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	889a      	ldrh	r2, [r3, #4]
 8000f8a:	8afb      	ldrh	r3, [r7, #22]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1cb      	bne.n	8000f30 <Paint_DrawString_EN+0x30>
 8000f98:	e000      	b.n	8000f9c <Paint_DrawString_EN+0x9c>
        return;
 8000f9a:	bf00      	nop
    }
}
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000060 	.word	0x20000060

08000fa8 <DrawCalenderField>:
//   NULL.
// Note:
//
// ****************************************************************************************
void DrawCalenderField(uint8_t place, char* fach, char* dozent)
{
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b08c      	sub	sp, #48	; 0x30
 8000fac:	af02      	add	r7, sp, #8
 8000fae:	4603      	mov	r3, r0
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	73fb      	strb	r3, [r7, #15]
 8000fb6:	466b      	mov	r3, sp
 8000fb8:	461d      	mov	r5, r3
	CalCellInfo cal;
	cal.imBufsize= 17336;
 8000fba:	f244 33b8 	movw	r3, #17336	; 0x43b8
 8000fbe:	61fb      	str	r3, [r7, #28]
	uint8_t frameBuf[cal.imBufsize];
 8000fc0:	69f8      	ldr	r0, [r7, #28]
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc8:	4601      	mov	r1, r0
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	f04f 0400 	mov.w	r4, #0
 8000fd6:	00d4      	lsls	r4, r2, #3
 8000fd8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000fdc:	00cb      	lsls	r3, r1, #3
 8000fde:	4601      	mov	r1, r0
 8000fe0:	f04f 0200 	mov.w	r2, #0
 8000fe4:	f04f 0300 	mov.w	r3, #0
 8000fe8:	f04f 0400 	mov.w	r4, #0
 8000fec:	00d4      	lsls	r4, r2, #3
 8000fee:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000ff2:	00cb      	lsls	r3, r1, #3
 8000ff4:	1dc3      	adds	r3, r0, #7
 8000ff6:	08db      	lsrs	r3, r3, #3
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	ebad 0d03 	sub.w	sp, sp, r3
 8000ffe:	ab02      	add	r3, sp, #8
 8001000:	3300      	adds	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
	cal.place = place;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	743b      	strb	r3, [r7, #16]
	if(cal.place%5!=0)
 8001008:	7c3a      	ldrb	r2, [r7, #16]
 800100a:	4b5a      	ldr	r3, [pc, #360]	; (8001174 <DrawCalenderField+0x1cc>)
 800100c:	fba3 1302 	umull	r1, r3, r3, r2
 8001010:	0899      	lsrs	r1, r3, #2
 8001012:	460b      	mov	r3, r1
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	440b      	add	r3, r1
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d019      	beq.n	8001054 <DrawCalenderField+0xac>
		cal.posX = 202 + (cal.place%5-1) * 200;
 8001020:	7c3a      	ldrb	r2, [r7, #16]
 8001022:	4b54      	ldr	r3, [pc, #336]	; (8001174 <DrawCalenderField+0x1cc>)
 8001024:	fba3 1302 	umull	r1, r3, r3, r2
 8001028:	0899      	lsrs	r1, r3, #2
 800102a:	460b      	mov	r3, r1
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	440b      	add	r3, r1
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	3b01      	subs	r3, #1
 8001036:	b29b      	uxth	r3, r3
 8001038:	461a      	mov	r2, r3
 800103a:	0092      	lsls	r2, r2, #2
 800103c:	4413      	add	r3, r2
 800103e:	461a      	mov	r2, r3
 8001040:	0091      	lsls	r1, r2, #2
 8001042:	461a      	mov	r2, r3
 8001044:	460b      	mov	r3, r1
 8001046:	4413      	add	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	b29b      	uxth	r3, r3
 800104c:	33ca      	adds	r3, #202	; 0xca
 800104e:	b29b      	uxth	r3, r3
 8001050:	827b      	strh	r3, [r7, #18]
 8001052:	e002      	b.n	800105a <DrawCalenderField+0xb2>
	else
		cal.posX = 1002;
 8001054:	f240 33ea 	movw	r3, #1002	; 0x3ea
 8001058:	827b      	strh	r3, [r7, #18]

	if(cal.place%5!=0)
 800105a:	7c3a      	ldrb	r2, [r7, #16]
 800105c:	4b45      	ldr	r3, [pc, #276]	; (8001174 <DrawCalenderField+0x1cc>)
 800105e:	fba3 1302 	umull	r1, r3, r3, r2
 8001062:	0899      	lsrs	r1, r3, #2
 8001064:	460b      	mov	r3, r1
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	440b      	add	r3, r1
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d012      	beq.n	8001098 <DrawCalenderField+0xf0>
	cal.posY = cal.place/5 *90 +195;
 8001072:	7c3b      	ldrb	r3, [r7, #16]
 8001074:	4a3f      	ldr	r2, [pc, #252]	; (8001174 <DrawCalenderField+0x1cc>)
 8001076:	fba2 2303 	umull	r2, r3, r2, r3
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	b2db      	uxtb	r3, r3
 800107e:	b29b      	uxth	r3, r3
 8001080:	461a      	mov	r2, r3
 8001082:	0052      	lsls	r2, r2, #1
 8001084:	4413      	add	r3, r2
 8001086:	461a      	mov	r2, r3
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	b29b      	uxth	r3, r3
 8001090:	33c3      	adds	r3, #195	; 0xc3
 8001092:	b29b      	uxth	r3, r3
 8001094:	82bb      	strh	r3, [r7, #20]
 8001096:	e012      	b.n	80010be <DrawCalenderField+0x116>
	else
		cal.posY = (cal.place/5 - 1) *90 +195;
 8001098:	7c3b      	ldrb	r3, [r7, #16]
 800109a:	4a36      	ldr	r2, [pc, #216]	; (8001174 <DrawCalenderField+0x1cc>)
 800109c:	fba2 2303 	umull	r2, r3, r2, r3
 80010a0:	089b      	lsrs	r3, r3, #2
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	3b01      	subs	r3, #1
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	461a      	mov	r2, r3
 80010aa:	0052      	lsls	r2, r2, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	461a      	mov	r2, r3
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	33c3      	adds	r3, #195	; 0xc3
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	82bb      	strh	r3, [r7, #20]

	if((cal.place%5 != 0))
 80010be:	7c3a      	ldrb	r2, [r7, #16]
 80010c0:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <DrawCalenderField+0x1cc>)
 80010c2:	fba3 1302 	umull	r1, r3, r3, r2
 80010c6:	0899      	lsrs	r1, r3, #2
 80010c8:	460b      	mov	r3, r1
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d010      	beq.n	80010f8 <DrawCalenderField+0x150>
	{
		if(cal.place/5%2 != 0)
 80010d6:	7c3b      	ldrb	r3, [r7, #16]
 80010d8:	4a26      	ldr	r2, [pc, #152]	; (8001174 <DrawCalenderField+0x1cc>)
 80010da:	fba2 2303 	umull	r2, r3, r2, r3
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d002      	beq.n	80010f2 <DrawCalenderField+0x14a>
			cal.color = KALBRIGHT;
 80010ec:	23e0      	movs	r3, #224	; 0xe0
 80010ee:	747b      	strb	r3, [r7, #17]
 80010f0:	e012      	b.n	8001118 <DrawCalenderField+0x170>
		else
			cal.color = KALDARK;
 80010f2:	23dd      	movs	r3, #221	; 0xdd
 80010f4:	747b      	strb	r3, [r7, #17]
 80010f6:	e00f      	b.n	8001118 <DrawCalenderField+0x170>
	}
	else
	{
		if(cal.place/5%2 != 0)
 80010f8:	7c3b      	ldrb	r3, [r7, #16]
 80010fa:	4a1e      	ldr	r2, [pc, #120]	; (8001174 <DrawCalenderField+0x1cc>)
 80010fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	b2db      	uxtb	r3, r3
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d002      	beq.n	8001114 <DrawCalenderField+0x16c>
					cal.color = KALDARK;
 800110e:	23dd      	movs	r3, #221	; 0xdd
 8001110:	747b      	strb	r3, [r7, #17]
 8001112:	e001      	b.n	8001118 <DrawCalenderField+0x170>
				else
					cal.color = KALBRIGHT;
 8001114:	23e0      	movs	r3, #224	; 0xe0
 8001116:	747b      	strb	r3, [r7, #17]
	}

	Paint_NewImage(frameBuf, 196, 88, 0, 0xff);
 8001118:	6a38      	ldr	r0, [r7, #32]
 800111a:	23ff      	movs	r3, #255	; 0xff
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2300      	movs	r3, #0
 8001120:	2258      	movs	r2, #88	; 0x58
 8001122:	21c4      	movs	r1, #196	; 0xc4
 8001124:	f7ff fd1e 	bl	8000b64 <Paint_NewImage>
	Paint_Clear(cal.color);
 8001128:	7c7b      	ldrb	r3, [r7, #17]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fe0a 	bl	8000d44 <Paint_Clear>
	Paint_DrawString_EN(5, 20, fach, &Font24, cal.color, 0x44 );
 8001130:	7c7b      	ldrb	r3, [r7, #17]
 8001132:	2244      	movs	r2, #68	; 0x44
 8001134:	9201      	str	r2, [sp, #4]
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <DrawCalenderField+0x1d0>)
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	2114      	movs	r1, #20
 800113e:	2005      	movs	r0, #5
 8001140:	f7ff fede 	bl	8000f00 <Paint_DrawString_EN>
	Paint_DrawString_EN(5, 50, dozent, &Font24, cal.color, 0x66 );
 8001144:	7c7b      	ldrb	r3, [r7, #17]
 8001146:	2266      	movs	r2, #102	; 0x66
 8001148:	9201      	str	r2, [sp, #4]
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <DrawCalenderField+0x1d0>)
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	2132      	movs	r1, #50	; 0x32
 8001152:	2005      	movs	r0, #5
 8001154:	f7ff fed4 	bl	8000f00 <Paint_DrawString_EN>
	//EpdDriverDrawBox(frameBuf, 202, 195, 196, 88);
	EpdDriverDrawBox(frameBuf, cal.posX, cal.posY, 196, 88);
 8001158:	6a38      	ldr	r0, [r7, #32]
 800115a:	8a79      	ldrh	r1, [r7, #18]
 800115c:	8aba      	ldrh	r2, [r7, #20]
 800115e:	2358      	movs	r3, #88	; 0x58
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	23c4      	movs	r3, #196	; 0xc4
 8001164:	f7ff fcbe 	bl	8000ae4 <EpdDriverDrawBox>
 8001168:	46ad      	mov	sp, r5
}
 800116a:	bf00      	nop
 800116c:	3728      	adds	r7, #40	; 0x28
 800116e:	46bd      	mov	sp, r7
 8001170:	bdb0      	pop	{r4, r5, r7, pc}
 8001172:	bf00      	nop
 8001174:	cccccccd 	.word	0xcccccccd
 8001178:	20000000 	.word	0x20000000

0800117c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_DMA_Init+0x70>)
 8001184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001186:	4a19      	ldr	r2, [pc, #100]	; (80011ec <MX_DMA_Init+0x70>)
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	6493      	str	r3, [r2, #72]	; 0x48
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <MX_DMA_Init+0x70>)
 8001190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MX_DMA_Init+0x70>)
 800119c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800119e:	4a13      	ldr	r2, [pc, #76]	; (80011ec <MX_DMA_Init+0x70>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6493      	str	r3, [r2, #72]	; 0x48
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <MX_DMA_Init+0x70>)
 80011a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	200b      	movs	r0, #11
 80011b8:	f000 ff63 	bl	8002082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011bc:	200b      	movs	r0, #11
 80011be:	f000 ff7c 	bl	80020ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	200c      	movs	r0, #12
 80011c8:	f000 ff5b 	bl	8002082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80011cc:	200c      	movs	r0, #12
 80011ce:	f000 ff74 	bl	80020ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	200d      	movs	r0, #13
 80011d8:	f000 ff53 	bl	8002082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80011dc:	200d      	movs	r0, #13
 80011de:	f000 ff6c 	bl	80020ba <HAL_NVIC_EnableIRQ>

}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000

080011f0 <MX_GPIO_Init>:
        * the Code Generation settings)
     PD8   ------> USART3_TX
     PD9   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08e      	sub	sp, #56	; 0x38
 80011f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001206:	4bb4      	ldr	r3, [pc, #720]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	4ab3      	ldr	r2, [pc, #716]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 800120c:	f043 0310 	orr.w	r3, r3, #16
 8001210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001212:	4bb1      	ldr	r3, [pc, #708]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	623b      	str	r3, [r7, #32]
 800121c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	4bae      	ldr	r3, [pc, #696]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	4aad      	ldr	r2, [pc, #692]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122a:	4bab      	ldr	r3, [pc, #684]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	61fb      	str	r3, [r7, #28]
 8001234:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001236:	4ba8      	ldr	r3, [pc, #672]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	4aa7      	ldr	r2, [pc, #668]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 800123c:	f043 0320 	orr.w	r3, r3, #32
 8001240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001242:	4ba5      	ldr	r3, [pc, #660]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	f003 0320 	and.w	r3, r3, #32
 800124a:	61bb      	str	r3, [r7, #24]
 800124c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124e:	4ba2      	ldr	r3, [pc, #648]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4aa1      	ldr	r2, [pc, #644]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125a:	4b9f      	ldr	r3, [pc, #636]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b9c      	ldr	r3, [pc, #624]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	4a9b      	ldr	r2, [pc, #620]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001272:	4b99      	ldr	r3, [pc, #612]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	4b96      	ldr	r3, [pc, #600]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a95      	ldr	r2, [pc, #596]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b93      	ldr	r3, [pc, #588]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001296:	4b90      	ldr	r3, [pc, #576]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	4a8f      	ldr	r2, [pc, #572]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 800129c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a2:	4b8d      	ldr	r3, [pc, #564]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ae:	4b8a      	ldr	r3, [pc, #552]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4a89      	ldr	r2, [pc, #548]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 80012b4:	f043 0308 	orr.w	r3, r3, #8
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4b87      	ldr	r3, [pc, #540]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80012c6:	f001 fd19 	bl	8002cfc <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EPD_ON_Pin|Kill_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2105      	movs	r1, #5
 80012ce:	4883      	ldr	r0, [pc, #524]	; (80014dc <MX_GPIO_Init+0x2ec>)
 80012d0:	f001 fad0 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EPD_OFF_GPIO_Port, EPD_OFF_Pin, GPIO_PIN_SET);
 80012d4:	2201      	movs	r2, #1
 80012d6:	2102      	movs	r1, #2
 80012d8:	4880      	ldr	r0, [pc, #512]	; (80014dc <MX_GPIO_Init+0x2ec>)
 80012da:	f001 facb 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EPD_CS_Pin|EPD_RST_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2111      	movs	r1, #17
 80012e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e6:	f001 fac5 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80012f0:	487b      	ldr	r0, [pc, #492]	; (80014e0 <MX_GPIO_Init+0x2f0>)
 80012f2:	f001 fabf 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2120      	movs	r1, #32
 80012fa:	487a      	ldr	r0, [pc, #488]	; (80014e4 <MX_GPIO_Init+0x2f4>)
 80012fc:	f001 faba 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE8 PE9 
                           PE10 PE11 PE12 PE13 
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8001300:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001306:	2303      	movs	r3, #3
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800130e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001312:	4619      	mov	r1, r3
 8001314:	4874      	ldr	r0, [pc, #464]	; (80014e8 <MX_GPIO_Init+0x2f8>)
 8001316:	f001 f903 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800131a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001320:	4b72      	ldr	r3, [pc, #456]	; (80014ec <MX_GPIO_Init+0x2fc>)
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132c:	4619      	mov	r1, r3
 800132e:	486b      	ldr	r0, [pc, #428]	; (80014dc <MX_GPIO_Init+0x2ec>)
 8001330:	f001 f8f6 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 
                           PF4 PF5 PF6 PF7 
                           PF8 PF9 PF10 PF11 
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001334:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133a:	2303      	movs	r3, #3
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001346:	4619      	mov	r1, r3
 8001348:	4869      	ldr	r0, [pc, #420]	; (80014f0 <MX_GPIO_Init+0x300>)
 800134a:	f001 f8e9 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_ON_Pin;
 800134e:	2301      	movs	r3, #1
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(EPD_ON_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001362:	4619      	mov	r1, r3
 8001364:	485d      	ldr	r0, [pc, #372]	; (80014dc <MX_GPIO_Init+0x2ec>)
 8001366:	f001 f8db 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = EPD_OFF_Pin|Kill_Pin;
 800136a:	2306      	movs	r3, #6
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137e:	4619      	mov	r1, r3
 8001380:	4856      	ldr	r0, [pc, #344]	; (80014dc <MX_GPIO_Init+0x2ec>)
 8001382:	f001 f8cd 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC4 PC5 PC6 
                           PC7 PC8 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8001386:	f241 33f8 	movw	r3, #5112	; 0x13f8
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800138c:	2303      	movs	r3, #3
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001398:	4619      	mov	r1, r3
 800139a:	4850      	ldr	r0, [pc, #320]	; (80014dc <MX_GPIO_Init+0x2ec>)
 800139c:	f001 f8c0 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_RST_Pin;
 80013a0:	2311      	movs	r3, #17
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b4:	4619      	mov	r1, r3
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ba:	f001 f8b1 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 80013be:	f248 030c 	movw	r3, #32780	; 0x800c
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c4:	2303      	movs	r3, #3
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d0:	4619      	mov	r1, r3
 80013d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d6:	f001 f8a3 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_HRDY_Pin;
 80013da:	2320      	movs	r3, #32
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EPD_HRDY_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ea:	4619      	mov	r1, r3
 80013ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f0:	f001 f896 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB15 
                           PB4 PB5 PB6 PB8 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80013f4:	f64b 7377 	movw	r3, #49015	; 0xbf77
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013fa:	2303      	movs	r3, #3
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001406:	4619      	mov	r1, r3
 8001408:	4835      	ldr	r0, [pc, #212]	; (80014e0 <MX_GPIO_Init+0x2f0>)
 800140a:	f001 f889 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 
                           PG4 PG9 PG10 PG11 
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800140e:	f64f 631f 	movw	r3, #65055	; 0xfe1f
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001414:	2303      	movs	r3, #3
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800141c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001420:	4619      	mov	r1, r3
 8001422:	4830      	ldr	r0, [pc, #192]	; (80014e4 <MX_GPIO_Init+0x2f4>)
 8001424:	f001 f87c 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001428:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143e:	4619      	mov	r1, r3
 8001440:	4827      	ldr	r0, [pc, #156]	; (80014e0 <MX_GPIO_Init+0x2f0>)
 8001442:	f001 f86d 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001446:	f44f 7340 	mov.w	r3, #768	; 0x300
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001458:	2307      	movs	r3, #7
 800145a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800145c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001460:	4619      	mov	r1, r3
 8001462:	4824      	ldr	r0, [pc, #144]	; (80014f4 <MX_GPIO_Init+0x304>)
 8001464:	f001 f85c 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13 
                           PD14 PD15 PD0 PD1 
                           PD2 PD3 PD4 PD5 
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8001468:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800146e:	2303      	movs	r3, #3
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	4619      	mov	r1, r3
 800147c:	481d      	ldr	r0, [pc, #116]	; (80014f4 <MX_GPIO_Init+0x304>)
 800147e:	f001 f84f 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001482:	2320      	movs	r3, #32
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001486:	2301      	movs	r3, #1
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148e:	2300      	movs	r3, #0
 8001490:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001496:	4619      	mov	r1, r3
 8001498:	4812      	ldr	r0, [pc, #72]	; (80014e4 <MX_GPIO_Init+0x2f4>)
 800149a:	f001 f841 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800149e:	2340      	movs	r3, #64	; 0x40
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ae:	4619      	mov	r1, r3
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <MX_GPIO_Init+0x2f4>)
 80014b2:	f001 f835 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014b6:	2308      	movs	r3, #8
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ba:	2303      	movs	r3, #3
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c6:	4619      	mov	r1, r3
 80014c8:	480b      	ldr	r0, [pc, #44]	; (80014f8 <MX_GPIO_Init+0x308>)
 80014ca:	f001 f829 	bl	8002520 <HAL_GPIO_Init>

}
 80014ce:	bf00      	nop
 80014d0:	3738      	adds	r7, #56	; 0x38
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000
 80014dc:	48000800 	.word	0x48000800
 80014e0:	48000400 	.word	0x48000400
 80014e4:	48001800 	.word	0x48001800
 80014e8:	48001000 	.word	0x48001000
 80014ec:	10110000 	.word	0x10110000
 80014f0:	48001400 	.word	0x48001400
 80014f4:	48000c00 	.word	0x48000c00
 80014f8:	48001c00 	.word	0x48001c00

080014fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	 // char tex[]={'H','A','L','L','O','\0'};
	  char  fach[]={'W','S','C','o','m','\0'};
 8001502:	4a1f      	ldr	r2, [pc, #124]	; (8001580 <main+0x84>)
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	e892 0003 	ldmia.w	r2, {r0, r1}
 800150a:	6018      	str	r0, [r3, #0]
 800150c:	3304      	adds	r3, #4
 800150e:	8019      	strh	r1, [r3, #0]
	  char  doz[]={'M','A','T','\0'};
 8001510:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <main+0x88>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	603b      	str	r3, [r7, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001516:	f000 fc46 	bl	8001da6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800151a:	f000 f837 	bl	800158c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151e:	f7ff fe67 	bl	80011f0 <MX_GPIO_Init>
  EpdOn();
 8001522:	f7fe ffed 	bl	8000500 <EpdOn>
  MX_LPUART1_UART_Init();
 8001526:	f000 fa35 	bl	8001994 <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800152a:	f000 fb7d 	bl	8001c28 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 800152e:	f000 f8c9 	bl	80016c4 <MX_SPI1_Init>
  MX_DMA_Init();
 8001532:	f7ff fe23 	bl	800117c <MX_DMA_Init>
  MX_UART4_Init();
 8001536:	f000 fa73 	bl	8001a20 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  IT8951_Init();
 800153a:	f7ff fa6f 	bl	8000a1c <IT8951_Init>
  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800153e:	2201      	movs	r2, #1
 8001540:	2180      	movs	r1, #128	; 0x80
 8001542:	4811      	ldr	r0, [pc, #68]	; (8001588 <main+0x8c>)
 8001544:	f001 f996 	bl	8002874 <HAL_GPIO_WritePin>
  EpdDriverLoadTemplate();
 8001548:	f7ff fa98 	bl	8000a7c <EpdDriverLoadTemplate>
  for(int i = 0; i<20;i++){
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	e009      	b.n	8001566 <main+0x6a>
	  DrawCalenderField(i, fach, doz);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	463a      	mov	r2, r7
 8001558:	1d39      	adds	r1, r7, #4
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fd24 	bl	8000fa8 <DrawCalenderField>
  for(int i = 0; i<20;i++){
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3301      	adds	r3, #1
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b13      	cmp	r3, #19
 800156a:	ddf2      	ble.n	8001552 <main+0x56>
  	  }
  EpdDriverShowDisp();
 800156c:	f7ff faea 	bl	8000b44 <EpdDriverShowDisp>
  HAL_Delay(2000);
 8001570:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001574:	f000 fc88 	bl	8001e88 <HAL_Delay>
  EpdOff();
 8001578:	f7fe ffda 	bl	8000530 <EpdOff>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800157c:	e7fe      	b.n	800157c <main+0x80>
 800157e:	bf00      	nop
 8001580:	08006e7c 	.word	0x08006e7c
 8001584:	08006e84 	.word	0x08006e84
 8001588:	48000400 	.word	0x48000400

0800158c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b0bc      	sub	sp, #240	; 0xf0
 8001590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001592:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001596:	2244      	movs	r2, #68	; 0x44
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f005 fc5a 	bl	8006e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	2294      	movs	r2, #148	; 0x94
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f005 fc4c 	bl	8006e54 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80015bc:	2000      	movs	r0, #0
 80015be:	f001 fae9 	bl	8002b94 <HAL_PWREx_ControlVoltageScaling>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0x40>
  {
    Error_Handler();
 80015c8:	f000 f874 	bl	80016b4 <Error_Handler>
  }
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80015cc:	f001 fab2 	bl	8002b34 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015d0:	4b37      	ldr	r3, [pc, #220]	; (80016b0 <SystemClock_Config+0x124>)
 80015d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d6:	4a36      	ldr	r2, [pc, #216]	; (80016b0 <SystemClock_Config+0x124>)
 80015d8:	f023 0318 	bic.w	r3, r3, #24
 80015dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80015e0:	2316      	movs	r3, #22
 80015e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015e6:	2301      	movs	r3, #1
 80015e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015f4:	2340      	movs	r3, #64	; 0x40
 80015f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015fa:	2301      	movs	r3, #1
 80015fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001606:	23b0      	movs	r3, #176	; 0xb0
 8001608:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160c:	2302      	movs	r3, #2
 800160e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001612:	2302      	movs	r3, #2
 8001614:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001618:	2302      	movs	r3, #2
 800161a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 28;
 800161e:	231c      	movs	r3, #28
 8001620:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001624:	2302      	movs	r3, #2
 8001626:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800162a:	2302      	movs	r3, #2
 800162c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001630:	2302      	movs	r3, #2
 8001632:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001636:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800163a:	4618      	mov	r0, r3
 800163c:	f001 fb6e 	bl	8002d1c <HAL_RCC_OscConfig>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001646:	f000 f835 	bl	80016b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164a:	230f      	movs	r3, #15
 800164c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001650:	2303      	movs	r3, #3
 8001652:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001668:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800166c:	2105      	movs	r1, #5
 800166e:	4618      	mov	r0, r3
 8001670:	f001 ff42 	bl	80034f8 <HAL_RCC_ClockConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800167a:	f000 f81b 	bl	80016b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_LPUART1
 800167e:	f242 0328 	movw	r3, #8232	; 0x2028
 8001682:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001684:	2300      	movs	r3, #0
 8001686:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001688:	2300      	movs	r3, #0
 800168a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800168c:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8001690:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	4618      	mov	r0, r3
 8001696:	f002 f9df 	bl	8003a58 <HAL_RCCEx_PeriphCLKConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <SystemClock_Config+0x118>
  {
    Error_Handler();
 80016a0:	f000 f808 	bl	80016b4 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80016a4:	f002 fd00 	bl	80040a8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80016a8:	bf00      	nop
 80016aa:	37f0      	adds	r7, #240	; 0xf0
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40021000 	.word	0x40021000

080016b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <MX_SPI1_Init+0x74>)
 80016ca:	4a1c      	ldr	r2, [pc, #112]	; (800173c <MX_SPI1_Init+0x78>)
 80016cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ce:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <MX_SPI1_Init+0x74>)
 80016d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016d6:	4b18      	ldr	r3, [pc, #96]	; (8001738 <MX_SPI1_Init+0x74>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016dc:	4b16      	ldr	r3, [pc, #88]	; (8001738 <MX_SPI1_Init+0x74>)
 80016de:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80016e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <MX_SPI1_Init+0x74>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <MX_SPI1_Init+0x74>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_SPI1_Init+0x74>)
 80016f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <MX_SPI1_Init+0x74>)
 80016fa:	2220      	movs	r2, #32
 80016fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <MX_SPI1_Init+0x74>)
 8001700:	2200      	movs	r2, #0
 8001702:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <MX_SPI1_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <MX_SPI1_Init+0x74>)
 800170c:	2200      	movs	r2, #0
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <MX_SPI1_Init+0x74>)
 8001712:	2207      	movs	r2, #7
 8001714:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <MX_SPI1_Init+0x74>)
 8001718:	2200      	movs	r2, #0
 800171a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <MX_SPI1_Init+0x74>)
 800171e:	2208      	movs	r2, #8
 8001720:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <MX_SPI1_Init+0x74>)
 8001724:	f002 feb0 	bl	8004488 <HAL_SPI_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800172e:	f7ff ffc1 	bl	80016b4 <Error_Handler>
  }

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000078 	.word	0x20000078
 800173c:	40013000 	.word	0x40013000

08001740 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a31      	ldr	r2, [pc, #196]	; (8001824 <HAL_SPI_MspInit+0xe4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d15c      	bne.n	800181c <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001762:	4b31      	ldr	r3, [pc, #196]	; (8001828 <HAL_SPI_MspInit+0xe8>)
 8001764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001766:	4a30      	ldr	r2, [pc, #192]	; (8001828 <HAL_SPI_MspInit+0xe8>)
 8001768:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800176c:	6613      	str	r3, [r2, #96]	; 0x60
 800176e:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <HAL_SPI_MspInit+0xe8>)
 8001770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001772:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <HAL_SPI_MspInit+0xe8>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177e:	4a2a      	ldr	r2, [pc, #168]	; (8001828 <HAL_SPI_MspInit+0xe8>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001786:	4b28      	ldr	r3, [pc, #160]	; (8001828 <HAL_SPI_MspInit+0xe8>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001792:	23c2      	movs	r3, #194	; 0xc2
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017a2:	2305      	movs	r3, #5
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b0:	f000 feb6 	bl	8002520 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80017b4:	4b1d      	ldr	r3, [pc, #116]	; (800182c <HAL_SPI_MspInit+0xec>)
 80017b6:	4a1e      	ldr	r2, [pc, #120]	; (8001830 <HAL_SPI_MspInit+0xf0>)
 80017b8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80017ba:	4b1c      	ldr	r3, [pc, #112]	; (800182c <HAL_SPI_MspInit+0xec>)
 80017bc:	220b      	movs	r2, #11
 80017be:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <HAL_SPI_MspInit+0xec>)
 80017c2:	2210      	movs	r2, #16
 80017c4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <HAL_SPI_MspInit+0xec>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <HAL_SPI_MspInit+0xec>)
 80017ce:	2280      	movs	r2, #128	; 0x80
 80017d0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <HAL_SPI_MspInit+0xec>)
 80017d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017da:	4b14      	ldr	r3, [pc, #80]	; (800182c <HAL_SPI_MspInit+0xec>)
 80017dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017e0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_SPI_MspInit+0xec>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <HAL_SPI_MspInit+0xec>)
 80017ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80017f0:	480e      	ldr	r0, [pc, #56]	; (800182c <HAL_SPI_MspInit+0xec>)
 80017f2:	f000 fc7d 	bl	80020f0 <HAL_DMA_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 80017fc:	f7ff ff5a 	bl	80016b4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a0a      	ldr	r2, [pc, #40]	; (800182c <HAL_SPI_MspInit+0xec>)
 8001804:	659a      	str	r2, [r3, #88]	; 0x58
 8001806:	4a09      	ldr	r2, [pc, #36]	; (800182c <HAL_SPI_MspInit+0xec>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800180c:	2200      	movs	r2, #0
 800180e:	2100      	movs	r1, #0
 8001810:	2023      	movs	r0, #35	; 0x23
 8001812:	f000 fc36 	bl	8002082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001816:	2023      	movs	r0, #35	; 0x23
 8001818:	f000 fc4f 	bl	80020ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800181c:	bf00      	nop
 800181e:	3728      	adds	r7, #40	; 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40013000 	.word	0x40013000
 8001828:	40021000 	.word	0x40021000
 800182c:	200000e0 	.word	0x200000e0
 8001830:	40020030 	.word	0x40020030

08001834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <HAL_MspInit+0x44>)
 800183c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183e:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <HAL_MspInit+0x44>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6613      	str	r3, [r2, #96]	; 0x60
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <HAL_MspInit+0x44>)
 8001848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_MspInit+0x44>)
 8001854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001856:	4a08      	ldr	r2, [pc, #32]	; (8001878 <HAL_MspInit+0x44>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185c:	6593      	str	r3, [r2, #88]	; 0x58
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_MspInit+0x44>)
 8001860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000

0800187c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <HardFault_Handler+0x4>

08001890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <MemManage_Handler+0x4>

08001896 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189a:	e7fe      	b.n	800189a <BusFault_Handler+0x4>

0800189c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <UsageFault_Handler+0x4>

080018a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d0:	f000 fabc 	bl	8001e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <DMA1_Channel1_IRQHandler+0x10>)
 80018de:	f000 fd0e 	bl	80022fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000140 	.word	0x20000140

080018ec <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <DMA1_Channel2_IRQHandler+0x10>)
 80018f2:	f000 fd04 	bl	80022fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200002b8 	.word	0x200002b8

08001900 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <DMA1_Channel3_IRQHandler+0x10>)
 8001906:	f000 fcfa 	bl	80022fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200000e0 	.word	0x200000e0

08001914 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <SPI1_IRQHandler+0x10>)
 800191a:	f003 f995 	bl	8004c48 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000078 	.word	0x20000078

08001928 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800192c:	4b17      	ldr	r3, [pc, #92]	; (800198c <SystemInit+0x64>)
 800192e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001932:	4a16      	ldr	r2, [pc, #88]	; (800198c <SystemInit+0x64>)
 8001934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800193c:	4b14      	ldr	r3, [pc, #80]	; (8001990 <SystemInit+0x68>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a13      	ldr	r2, [pc, #76]	; (8001990 <SystemInit+0x68>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001948:	4b11      	ldr	r3, [pc, #68]	; (8001990 <SystemInit+0x68>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <SystemInit+0x68>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a0f      	ldr	r2, [pc, #60]	; (8001990 <SystemInit+0x68>)
 8001954:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001958:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800195c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <SystemInit+0x68>)
 8001960:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001964:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <SystemInit+0x68>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a09      	ldr	r2, [pc, #36]	; (8001990 <SystemInit+0x68>)
 800196c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001970:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001972:	4b07      	ldr	r3, [pc, #28]	; (8001990 <SystemInit+0x68>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <SystemInit+0x64>)
 800197a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800197e:	609a      	str	r2, [r3, #8]
#endif
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00
 8001990:	40021000 	.word	0x40021000

08001994 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_uart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 8001998:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <MX_LPUART1_UART_Init+0x80>)
 800199a:	4a1f      	ldr	r2, [pc, #124]	; (8001a18 <MX_LPUART1_UART_Init+0x84>)
 800199c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800199e:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <MX_LPUART1_UART_Init+0x80>)
 80019a0:	4a1e      	ldr	r2, [pc, #120]	; (8001a1c <MX_LPUART1_UART_Init+0x88>)
 80019a2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80019a4:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <MX_LPUART1_UART_Init+0x80>)
 80019a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019aa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <MX_LPUART1_UART_Init+0x80>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80019b2:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <MX_LPUART1_UART_Init+0x80>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80019b8:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <MX_LPUART1_UART_Init+0x80>)
 80019ba:	220c      	movs	r2, #12
 80019bc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <MX_LPUART1_UART_Init+0x80>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019c4:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <MX_LPUART1_UART_Init+0x80>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <MX_LPUART1_UART_Init+0x80>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019d0:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <MX_LPUART1_UART_Init+0x80>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <MX_LPUART1_UART_Init+0x80>)
 80019d8:	2200      	movs	r2, #0
 80019da:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80019dc:	480d      	ldr	r0, [pc, #52]	; (8001a14 <MX_LPUART1_UART_Init+0x80>)
 80019de:	f003 fb6f 	bl	80050c0 <HAL_UART_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80019e8:	f7ff fe64 	bl	80016b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ec:	2100      	movs	r1, #0
 80019ee:	4809      	ldr	r0, [pc, #36]	; (8001a14 <MX_LPUART1_UART_Init+0x80>)
 80019f0:	f004 feaa 	bl	8006748 <HAL_UARTEx_SetTxFifoThreshold>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80019fa:	f7ff fe5b 	bl	80016b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019fe:	2100      	movs	r1, #0
 8001a00:	4804      	ldr	r0, [pc, #16]	; (8001a14 <MX_LPUART1_UART_Init+0x80>)
 8001a02:	f004 fedf 	bl	80067c4 <HAL_UARTEx_SetRxFifoThreshold>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a0c:	f7ff fe52 	bl	80016b4 <Error_Handler>
  }

}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200001a0 	.word	0x200001a0
 8001a18:	40008000 	.word	0x40008000
 8001a1c:	00033324 	.word	0x00033324

08001a20 <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <MX_UART4_Init+0x58>)
 8001a26:	4a15      	ldr	r2, [pc, #84]	; (8001a7c <MX_UART4_Init+0x5c>)
 8001a28:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001a2a:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <MX_UART4_Init+0x58>)
 8001a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a30:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <MX_UART4_Init+0x58>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <MX_UART4_Init+0x58>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <MX_UART4_Init+0x58>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <MX_UART4_Init+0x58>)
 8001a46:	220c      	movs	r2, #12
 8001a48:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <MX_UART4_Init+0x58>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <MX_UART4_Init+0x58>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <MX_UART4_Init+0x58>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <MX_UART4_Init+0x58>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a62:	4805      	ldr	r0, [pc, #20]	; (8001a78 <MX_UART4_Init+0x58>)
 8001a64:	f003 fb2c 	bl	80050c0 <HAL_UART_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001a6e:	f7ff fe21 	bl	80016b4 <Error_Handler>
  }

}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	2000022c 	.word	0x2000022c
 8001a7c:	40004c00 	.word	0x40004c00

08001a80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08c      	sub	sp, #48	; 0x30
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a59      	ldr	r2, [pc, #356]	; (8001c04 <HAL_UART_MspInit+0x184>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d12b      	bne.n	8001afa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001aa2:	4b59      	ldr	r3, [pc, #356]	; (8001c08 <HAL_UART_MspInit+0x188>)
 8001aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa6:	4a58      	ldr	r2, [pc, #352]	; (8001c08 <HAL_UART_MspInit+0x188>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001aae:	4b56      	ldr	r3, [pc, #344]	; (8001c08 <HAL_UART_MspInit+0x188>)
 8001ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	61bb      	str	r3, [r7, #24]
 8001ab8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aba:	4b53      	ldr	r3, [pc, #332]	; (8001c08 <HAL_UART_MspInit+0x188>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	4a52      	ldr	r2, [pc, #328]	; (8001c08 <HAL_UART_MspInit+0x188>)
 8001ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac6:	4b50      	ldr	r3, [pc, #320]	; (8001c08 <HAL_UART_MspInit+0x188>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8001ad2:	f001 f913 	bl	8002cfc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001ad6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001ae8:	2308      	movs	r3, #8
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	4619      	mov	r1, r3
 8001af2:	4846      	ldr	r0, [pc, #280]	; (8001c0c <HAL_UART_MspInit+0x18c>)
 8001af4:	f000 fd14 	bl	8002520 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001af8:	e07f      	b.n	8001bfa <HAL_UART_MspInit+0x17a>
  else if(uartHandle->Instance==UART4)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a44      	ldr	r2, [pc, #272]	; (8001c10 <HAL_UART_MspInit+0x190>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d17a      	bne.n	8001bfa <HAL_UART_MspInit+0x17a>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b04:	4b40      	ldr	r3, [pc, #256]	; (8001c08 <HAL_UART_MspInit+0x188>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	4a3f      	ldr	r2, [pc, #252]	; (8001c08 <HAL_UART_MspInit+0x188>)
 8001b0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b10:	4b3d      	ldr	r3, [pc, #244]	; (8001c08 <HAL_UART_MspInit+0x188>)
 8001b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1c:	4b3a      	ldr	r3, [pc, #232]	; (8001c08 <HAL_UART_MspInit+0x188>)
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b20:	4a39      	ldr	r2, [pc, #228]	; (8001c08 <HAL_UART_MspInit+0x188>)
 8001b22:	f043 0304 	orr.w	r3, r3, #4
 8001b26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b28:	4b37      	ldr	r3, [pc, #220]	; (8001c08 <HAL_UART_MspInit+0x188>)
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b42:	2303      	movs	r3, #3
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b46:	2308      	movs	r3, #8
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4830      	ldr	r0, [pc, #192]	; (8001c14 <HAL_UART_MspInit+0x194>)
 8001b52:	f000 fce5 	bl	8002520 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Channel1;
 8001b56:	4b30      	ldr	r3, [pc, #192]	; (8001c18 <HAL_UART_MspInit+0x198>)
 8001b58:	4a30      	ldr	r2, [pc, #192]	; (8001c1c <HAL_UART_MspInit+0x19c>)
 8001b5a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001b5c:	4b2e      	ldr	r3, [pc, #184]	; (8001c18 <HAL_UART_MspInit+0x198>)
 8001b5e:	221e      	movs	r2, #30
 8001b60:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b62:	4b2d      	ldr	r3, [pc, #180]	; (8001c18 <HAL_UART_MspInit+0x198>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b68:	4b2b      	ldr	r3, [pc, #172]	; (8001c18 <HAL_UART_MspInit+0x198>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <HAL_UART_MspInit+0x198>)
 8001b70:	2280      	movs	r2, #128	; 0x80
 8001b72:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b74:	4b28      	ldr	r3, [pc, #160]	; (8001c18 <HAL_UART_MspInit+0x198>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b7a:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <HAL_UART_MspInit+0x198>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001b80:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <HAL_UART_MspInit+0x198>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b86:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <HAL_UART_MspInit+0x198>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001b8c:	4822      	ldr	r0, [pc, #136]	; (8001c18 <HAL_UART_MspInit+0x198>)
 8001b8e:	f000 faaf 	bl	80020f0 <HAL_DMA_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_UART_MspInit+0x11c>
      Error_Handler();
 8001b98:	f7ff fd8c 	bl	80016b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a1e      	ldr	r2, [pc, #120]	; (8001c18 <HAL_UART_MspInit+0x198>)
 8001ba0:	679a      	str	r2, [r3, #120]	; 0x78
 8001ba2:	4a1d      	ldr	r2, [pc, #116]	; (8001c18 <HAL_UART_MspInit+0x198>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_uart4_tx.Instance = DMA1_Channel2;
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <HAL_UART_MspInit+0x1a0>)
 8001baa:	4a1e      	ldr	r2, [pc, #120]	; (8001c24 <HAL_UART_MspInit+0x1a4>)
 8001bac:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001bae:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <HAL_UART_MspInit+0x1a0>)
 8001bb0:	221f      	movs	r2, #31
 8001bb2:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <HAL_UART_MspInit+0x1a0>)
 8001bb6:	2210      	movs	r2, #16
 8001bb8:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bba:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <HAL_UART_MspInit+0x1a0>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc0:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <HAL_UART_MspInit+0x1a0>)
 8001bc2:	2280      	movs	r2, #128	; 0x80
 8001bc4:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bc6:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <HAL_UART_MspInit+0x1a0>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <HAL_UART_MspInit+0x1a0>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001bd2:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <HAL_UART_MspInit+0x1a0>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <HAL_UART_MspInit+0x1a0>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001bde:	4810      	ldr	r0, [pc, #64]	; (8001c20 <HAL_UART_MspInit+0x1a0>)
 8001be0:	f000 fa86 	bl	80020f0 <HAL_DMA_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8001bea:	f7ff fd63 	bl	80016b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <HAL_UART_MspInit+0x1a0>)
 8001bf2:	675a      	str	r2, [r3, #116]	; 0x74
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <HAL_UART_MspInit+0x1a0>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001bfa:	bf00      	nop
 8001bfc:	3730      	adds	r7, #48	; 0x30
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40008000 	.word	0x40008000
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	48001800 	.word	0x48001800
 8001c10:	40004c00 	.word	0x40004c00
 8001c14:	48000800 	.word	0x48000800
 8001c18:	20000140 	.word	0x20000140
 8001c1c:	40020008 	.word	0x40020008
 8001c20:	200002b8 	.word	0x200002b8
 8001c24:	4002001c 	.word	0x4002001c

08001c28 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001c2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001c32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001c34:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001c36:	2206      	movs	r2, #6
 8001c38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001c40:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c46:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001c64:	4804      	ldr	r0, [pc, #16]	; (8001c78 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001c66:	f000 fe1d 	bl	80028a4 <HAL_PCD_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8001c70:	f7ff fd20 	bl	80016b4 <Error_Handler>
  }

}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000318 	.word	0x20000318

08001c7c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c9c:	d154      	bne.n	8001d48 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9e:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <HAL_PCD_MspInit+0xd4>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca2:	4a2b      	ldr	r2, [pc, #172]	; (8001d50 <HAL_PCD_MspInit+0xd4>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001caa:	4b29      	ldr	r3, [pc, #164]	; (8001d50 <HAL_PCD_MspInit+0xd4>)
 8001cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001cb6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001cc8:	230a      	movs	r3, #10
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd6:	f000 fc23 	bl	8002520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4619      	mov	r1, r3
 8001cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf2:	f000 fc15 	bl	8002520 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001cf6:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <HAL_PCD_MspInit+0xd4>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	4a15      	ldr	r2, [pc, #84]	; (8001d50 <HAL_PCD_MspInit+0xd4>)
 8001cfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d02:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <HAL_PCD_MspInit+0xd4>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <HAL_PCD_MspInit+0xd4>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d114      	bne.n	8001d44 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <HAL_PCD_MspInit+0xd4>)
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	4a0c      	ldr	r2, [pc, #48]	; (8001d50 <HAL_PCD_MspInit+0xd4>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d24:	6593      	str	r3, [r2, #88]	; 0x58
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_PCD_MspInit+0xd4>)
 8001d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001d32:	f000 ffd3 	bl	8002cdc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_PCD_MspInit+0xd4>)
 8001d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3a:	4a05      	ldr	r2, [pc, #20]	; (8001d50 <HAL_PCD_MspInit+0xd4>)
 8001d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001d42:	e001      	b.n	8001d48 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001d44:	f000 ffca 	bl	8002cdc <HAL_PWREx_EnableVddUSB>
}
 8001d48:	bf00      	nop
 8001d4a:	3728      	adds	r7, #40	; 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000

08001d54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d8c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d5a:	e003      	b.n	8001d64 <LoopCopyDataInit>

08001d5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d62:	3104      	adds	r1, #4

08001d64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d64:	480b      	ldr	r0, [pc, #44]	; (8001d94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d66:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d6c:	d3f6      	bcc.n	8001d5c <CopyDataInit>
	ldr	r2, =_sbss
 8001d6e:	4a0b      	ldr	r2, [pc, #44]	; (8001d9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d70:	e002      	b.n	8001d78 <LoopFillZerobss>

08001d72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d74:	f842 3b04 	str.w	r3, [r2], #4

08001d78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d78:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <LoopForever+0x16>)
	cmp	r2, r3
 8001d7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d7c:	d3f9      	bcc.n	8001d72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d7e:	f7ff fdd3 	bl	8001928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d82:	f005 f843 	bl	8006e0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d86:	f7ff fbb9 	bl	80014fc <main>

08001d8a <LoopForever>:

LoopForever:
    b LoopForever
 8001d8a:	e7fe      	b.n	8001d8a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d8c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001d90:	08081740 	.word	0x08081740
	ldr	r0, =_sdata
 8001d94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d98:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8001d9c:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8001da0:	20000724 	.word	0x20000724

08001da4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001da4:	e7fe      	b.n	8001da4 <ADC1_IRQHandler>

08001da6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db0:	2003      	movs	r0, #3
 8001db2:	f000 f95b 	bl	800206c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001db6:	2000      	movs	r0, #0
 8001db8:	f000 f80e 	bl	8001dd8 <HAL_InitTick>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	71fb      	strb	r3, [r7, #7]
 8001dc6:	e001      	b.n	8001dcc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dc8:	f7ff fd34 	bl	8001834 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001de4:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <HAL_InitTick+0x68>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d022      	beq.n	8001e32 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001dec:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <HAL_InitTick+0x6c>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <HAL_InitTick+0x68>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001df8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e00:	4618      	mov	r0, r3
 8001e02:	f000 f968 	bl	80020d6 <HAL_SYSTICK_Config>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10f      	bne.n	8001e2c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b0f      	cmp	r3, #15
 8001e10:	d809      	bhi.n	8001e26 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e12:	2200      	movs	r2, #0
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1a:	f000 f932 	bl	8002082 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <HAL_InitTick+0x70>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	e007      	b.n	8001e36 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	73fb      	strb	r3, [r7, #15]
 8001e2a:	e004      	b.n	8001e36 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	e001      	b.n	8001e36 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000010 	.word	0x20000010
 8001e44:	20000008 	.word	0x20000008
 8001e48:	2000000c 	.word	0x2000000c

08001e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_IncTick+0x1c>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_IncTick+0x20>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4413      	add	r3, r2
 8001e5a:	4a03      	ldr	r2, [pc, #12]	; (8001e68 <HAL_IncTick+0x1c>)
 8001e5c:	6013      	str	r3, [r2, #0]
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	20000720 	.word	0x20000720
 8001e6c:	20000010 	.word	0x20000010

08001e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return uwTick;
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <HAL_GetTick+0x14>)
 8001e76:	681b      	ldr	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000720 	.word	0x20000720

08001e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e90:	f7ff ffee 	bl	8001e70 <HAL_GetTick>
 8001e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea0:	d004      	beq.n	8001eac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <HAL_Delay+0x40>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eac:	bf00      	nop
 8001eae:	f7ff ffdf 	bl	8001e70 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d8f7      	bhi.n	8001eae <HAL_Delay+0x26>
  {
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000010 	.word	0x20000010

08001ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efe:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	60d3      	str	r3, [r2, #12]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <__NVIC_GetPriorityGrouping+0x18>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	f003 0307 	and.w	r3, r3, #7
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	db0b      	blt.n	8001f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	f003 021f 	and.w	r2, r3, #31
 8001f48:	4907      	ldr	r1, [pc, #28]	; (8001f68 <__NVIC_EnableIRQ+0x38>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	2001      	movs	r0, #1
 8001f52:	fa00 f202 	lsl.w	r2, r0, r2
 8001f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000e100 	.word	0xe000e100

08001f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	db0a      	blt.n	8001f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	490c      	ldr	r1, [pc, #48]	; (8001fb8 <__NVIC_SetPriority+0x4c>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	0112      	lsls	r2, r2, #4
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f94:	e00a      	b.n	8001fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4908      	ldr	r1, [pc, #32]	; (8001fbc <__NVIC_SetPriority+0x50>)
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	3b04      	subs	r3, #4
 8001fa4:	0112      	lsls	r2, r2, #4
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	440b      	add	r3, r1
 8001faa:	761a      	strb	r2, [r3, #24]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000e100 	.word	0xe000e100
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	; 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f1c3 0307 	rsb	r3, r3, #7
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	bf28      	it	cs
 8001fde:	2304      	movcs	r3, #4
 8001fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d902      	bls.n	8001ff0 <NVIC_EncodePriority+0x30>
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3b03      	subs	r3, #3
 8001fee:	e000      	b.n	8001ff2 <NVIC_EncodePriority+0x32>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43da      	mvns	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	401a      	ands	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002008:	f04f 31ff 	mov.w	r1, #4294967295
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	43d9      	mvns	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	4313      	orrs	r3, r2
         );
}
 800201a:	4618      	mov	r0, r3
 800201c:	3724      	adds	r7, #36	; 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002038:	d301      	bcc.n	800203e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800203a:	2301      	movs	r3, #1
 800203c:	e00f      	b.n	800205e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800203e:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <SysTick_Config+0x40>)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3b01      	subs	r3, #1
 8002044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002046:	210f      	movs	r1, #15
 8002048:	f04f 30ff 	mov.w	r0, #4294967295
 800204c:	f7ff ff8e 	bl	8001f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <SysTick_Config+0x40>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002056:	4b04      	ldr	r3, [pc, #16]	; (8002068 <SysTick_Config+0x40>)
 8002058:	2207      	movs	r2, #7
 800205a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	e000e010 	.word	0xe000e010

0800206c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ff29 	bl	8001ecc <__NVIC_SetPriorityGrouping>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b086      	sub	sp, #24
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
 800208e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002094:	f7ff ff3e 	bl	8001f14 <__NVIC_GetPriorityGrouping>
 8002098:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	6978      	ldr	r0, [r7, #20]
 80020a0:	f7ff ff8e 	bl	8001fc0 <NVIC_EncodePriority>
 80020a4:	4602      	mov	r2, r0
 80020a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff5d 	bl	8001f6c <__NVIC_SetPriority>
}
 80020b2:	bf00      	nop
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	4603      	mov	r3, r0
 80020c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff31 	bl	8001f30 <__NVIC_EnableIRQ>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff ffa2 	bl	8002028 <SysTick_Config>
 80020e4:	4603      	mov	r3, r0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e08d      	b.n	800221e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	4b47      	ldr	r3, [pc, #284]	; (8002228 <HAL_DMA_Init+0x138>)
 800210a:	429a      	cmp	r2, r3
 800210c:	d80f      	bhi.n	800212e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	4b45      	ldr	r3, [pc, #276]	; (800222c <HAL_DMA_Init+0x13c>)
 8002116:	4413      	add	r3, r2
 8002118:	4a45      	ldr	r2, [pc, #276]	; (8002230 <HAL_DMA_Init+0x140>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	009a      	lsls	r2, r3, #2
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a42      	ldr	r2, [pc, #264]	; (8002234 <HAL_DMA_Init+0x144>)
 800212a:	641a      	str	r2, [r3, #64]	; 0x40
 800212c:	e00e      	b.n	800214c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	4b40      	ldr	r3, [pc, #256]	; (8002238 <HAL_DMA_Init+0x148>)
 8002136:	4413      	add	r3, r2
 8002138:	4a3d      	ldr	r2, [pc, #244]	; (8002230 <HAL_DMA_Init+0x140>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	091b      	lsrs	r3, r3, #4
 8002140:	009a      	lsls	r2, r3, #2
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a3c      	ldr	r2, [pc, #240]	; (800223c <HAL_DMA_Init+0x14c>)
 800214a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2202      	movs	r2, #2
 8002150:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002166:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002170:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800217c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002188:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	4313      	orrs	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f95c 	bl	800245c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021ac:	d102      	bne.n	80021b4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021c8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d010      	beq.n	80021f4 <HAL_DMA_Init+0x104>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d80c      	bhi.n	80021f4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f97c 	bl	80024d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	e008      	b.n	8002206 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40020407 	.word	0x40020407
 800222c:	bffdfff8 	.word	0xbffdfff8
 8002230:	cccccccd 	.word	0xcccccccd
 8002234:	40020000 	.word	0x40020000
 8002238:	bffdfbf8 	.word	0xbffdfbf8
 800223c:	40020400 	.word	0x40020400

08002240 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d005      	beq.n	8002264 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2204      	movs	r2, #4
 800225c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
 8002262:	e047      	b.n	80022f4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 020e 	bic.w	r2, r2, #14
 8002272:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002292:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002298:	f003 021c 	and.w	r2, r3, #28
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	2101      	movs	r1, #1
 80022a2:	fa01 f202 	lsl.w	r2, r1, r2
 80022a6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022b0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00c      	beq.n	80022d4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80022d2:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	4798      	blx	r3
    }
  }
  return status;
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b084      	sub	sp, #16
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	f003 031c 	and.w	r3, r3, #28
 800231e:	2204      	movs	r2, #4
 8002320:	409a      	lsls	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4013      	ands	r3, r2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d026      	beq.n	8002378 <HAL_DMA_IRQHandler+0x7a>
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d021      	beq.n	8002378 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0320 	and.w	r3, r3, #32
 800233e:	2b00      	cmp	r3, #0
 8002340:	d107      	bne.n	8002352 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0204 	bic.w	r2, r2, #4
 8002350:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	f003 021c 	and.w	r2, r3, #28
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	2104      	movs	r1, #4
 8002360:	fa01 f202 	lsl.w	r2, r1, r2
 8002364:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	2b00      	cmp	r3, #0
 800236c:	d071      	beq.n	8002452 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002376:	e06c      	b.n	8002452 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	f003 031c 	and.w	r3, r3, #28
 8002380:	2202      	movs	r2, #2
 8002382:	409a      	lsls	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4013      	ands	r3, r2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d02e      	beq.n	80023ea <HAL_DMA_IRQHandler+0xec>
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d029      	beq.n	80023ea <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0320 	and.w	r3, r3, #32
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10b      	bne.n	80023bc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 020a 	bic.w	r2, r2, #10
 80023b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c0:	f003 021c 	and.w	r2, r3, #28
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	2102      	movs	r1, #2
 80023ca:	fa01 f202 	lsl.w	r2, r1, r2
 80023ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d038      	beq.n	8002452 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80023e8:	e033      	b.n	8002452 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ee:	f003 031c 	and.w	r3, r3, #28
 80023f2:	2208      	movs	r2, #8
 80023f4:	409a      	lsls	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d02a      	beq.n	8002454 <HAL_DMA_IRQHandler+0x156>
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b00      	cmp	r3, #0
 8002406:	d025      	beq.n	8002454 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 020e 	bic.w	r2, r2, #14
 8002416:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241c:	f003 021c 	and.w	r2, r3, #28
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	2101      	movs	r1, #1
 8002426:	fa01 f202 	lsl.w	r2, r1, r2
 800242a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002446:	2b00      	cmp	r3, #0
 8002448:	d004      	beq.n	8002454 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002452:	bf00      	nop
 8002454:	bf00      	nop
}
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800246c:	429a      	cmp	r2, r3
 800246e:	d80a      	bhi.n	8002486 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002474:	089b      	lsrs	r3, r3, #2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800247c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6493      	str	r3, [r2, #72]	; 0x48
 8002484:	e007      	b.n	8002496 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	009a      	lsls	r2, r3, #2
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002490:	4413      	add	r3, r2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	3b08      	subs	r3, #8
 800249e:	4a0c      	ldr	r2, [pc, #48]	; (80024d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80024a0:	fba2 2303 	umull	r2, r3, r2, r3
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80024ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1CU);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f003 031c 	and.w	r3, r3, #28
 80024b4:	2201      	movs	r2, #1
 80024b6:	409a      	lsls	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	651a      	str	r2, [r3, #80]	; 0x50
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	40020407 	.word	0x40020407
 80024cc:	4002081c 	.word	0x4002081c
 80024d0:	cccccccd 	.word	0xcccccccd
 80024d4:	40020880 	.word	0x40020880

080024d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	461a      	mov	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a08      	ldr	r2, [pc, #32]	; (800251c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80024fa:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	3b01      	subs	r3, #1
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2201      	movs	r2, #1
 8002506:	409a      	lsls	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	1000823f 	.word	0x1000823f
 800251c:	40020940 	.word	0x40020940

08002520 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800252e:	e166      	b.n	80027fe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	2101      	movs	r1, #1
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	fa01 f303 	lsl.w	r3, r1, r3
 800253c:	4013      	ands	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 8158 	beq.w	80027f8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b02      	cmp	r3, #2
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x38>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b12      	cmp	r3, #18
 8002556:	d123      	bne.n	80025a0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	08da      	lsrs	r2, r3, #3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3208      	adds	r2, #8
 8002560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002564:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	220f      	movs	r2, #15
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	08da      	lsrs	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3208      	adds	r2, #8
 800259a:	6939      	ldr	r1, [r7, #16]
 800259c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	2203      	movs	r2, #3
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0203 	and.w	r2, r3, #3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d00b      	beq.n	80025f4 <HAL_GPIO_Init+0xd4>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d007      	beq.n	80025f4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025e8:	2b11      	cmp	r3, #17
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b12      	cmp	r3, #18
 80025f2:	d130      	bne.n	8002656 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	2203      	movs	r2, #3
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4013      	ands	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800262a:	2201      	movs	r2, #1
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4013      	ands	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	091b      	lsrs	r3, r3, #4
 8002640:	f003 0201 	and.w	r2, r3, #1
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	2203      	movs	r2, #3
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43db      	mvns	r3, r3
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4013      	ands	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 80b2 	beq.w	80027f8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002694:	4b61      	ldr	r3, [pc, #388]	; (800281c <HAL_GPIO_Init+0x2fc>)
 8002696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002698:	4a60      	ldr	r2, [pc, #384]	; (800281c <HAL_GPIO_Init+0x2fc>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6613      	str	r3, [r2, #96]	; 0x60
 80026a0:	4b5e      	ldr	r3, [pc, #376]	; (800281c <HAL_GPIO_Init+0x2fc>)
 80026a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026ac:	4a5c      	ldr	r2, [pc, #368]	; (8002820 <HAL_GPIO_Init+0x300>)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	089b      	lsrs	r3, r3, #2
 80026b2:	3302      	adds	r3, #2
 80026b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	220f      	movs	r2, #15
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4013      	ands	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026d6:	d02b      	beq.n	8002730 <HAL_GPIO_Init+0x210>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a52      	ldr	r2, [pc, #328]	; (8002824 <HAL_GPIO_Init+0x304>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d025      	beq.n	800272c <HAL_GPIO_Init+0x20c>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a51      	ldr	r2, [pc, #324]	; (8002828 <HAL_GPIO_Init+0x308>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d01f      	beq.n	8002728 <HAL_GPIO_Init+0x208>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a50      	ldr	r2, [pc, #320]	; (800282c <HAL_GPIO_Init+0x30c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d019      	beq.n	8002724 <HAL_GPIO_Init+0x204>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a4f      	ldr	r2, [pc, #316]	; (8002830 <HAL_GPIO_Init+0x310>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d013      	beq.n	8002720 <HAL_GPIO_Init+0x200>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a4e      	ldr	r2, [pc, #312]	; (8002834 <HAL_GPIO_Init+0x314>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d00d      	beq.n	800271c <HAL_GPIO_Init+0x1fc>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a4d      	ldr	r2, [pc, #308]	; (8002838 <HAL_GPIO_Init+0x318>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d007      	beq.n	8002718 <HAL_GPIO_Init+0x1f8>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a4c      	ldr	r2, [pc, #304]	; (800283c <HAL_GPIO_Init+0x31c>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d101      	bne.n	8002714 <HAL_GPIO_Init+0x1f4>
 8002710:	2307      	movs	r3, #7
 8002712:	e00e      	b.n	8002732 <HAL_GPIO_Init+0x212>
 8002714:	2308      	movs	r3, #8
 8002716:	e00c      	b.n	8002732 <HAL_GPIO_Init+0x212>
 8002718:	2306      	movs	r3, #6
 800271a:	e00a      	b.n	8002732 <HAL_GPIO_Init+0x212>
 800271c:	2305      	movs	r3, #5
 800271e:	e008      	b.n	8002732 <HAL_GPIO_Init+0x212>
 8002720:	2304      	movs	r3, #4
 8002722:	e006      	b.n	8002732 <HAL_GPIO_Init+0x212>
 8002724:	2303      	movs	r3, #3
 8002726:	e004      	b.n	8002732 <HAL_GPIO_Init+0x212>
 8002728:	2302      	movs	r3, #2
 800272a:	e002      	b.n	8002732 <HAL_GPIO_Init+0x212>
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <HAL_GPIO_Init+0x212>
 8002730:	2300      	movs	r3, #0
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	f002 0203 	and.w	r2, r2, #3
 8002738:	0092      	lsls	r2, r2, #2
 800273a:	4093      	lsls	r3, r2
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002742:	4937      	ldr	r1, [pc, #220]	; (8002820 <HAL_GPIO_Init+0x300>)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	089b      	lsrs	r3, r3, #2
 8002748:	3302      	adds	r3, #2
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002750:	4b3b      	ldr	r3, [pc, #236]	; (8002840 <HAL_GPIO_Init+0x320>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	43db      	mvns	r3, r3
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4013      	ands	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002774:	4a32      	ldr	r2, [pc, #200]	; (8002840 <HAL_GPIO_Init+0x320>)
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800277a:	4b31      	ldr	r3, [pc, #196]	; (8002840 <HAL_GPIO_Init+0x320>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	43db      	mvns	r3, r3
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4013      	ands	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800279e:	4a28      	ldr	r2, [pc, #160]	; (8002840 <HAL_GPIO_Init+0x320>)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027a4:	4b26      	ldr	r3, [pc, #152]	; (8002840 <HAL_GPIO_Init+0x320>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027c8:	4a1d      	ldr	r2, [pc, #116]	; (8002840 <HAL_GPIO_Init+0x320>)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027ce:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <HAL_GPIO_Init+0x320>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4013      	ands	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027f2:	4a13      	ldr	r2, [pc, #76]	; (8002840 <HAL_GPIO_Init+0x320>)
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	3301      	adds	r3, #1
 80027fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	f47f ae91 	bne.w	8002530 <HAL_GPIO_Init+0x10>
  }
}
 800280e:	bf00      	nop
 8002810:	371c      	adds	r7, #28
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40021000 	.word	0x40021000
 8002820:	40010000 	.word	0x40010000
 8002824:	48000400 	.word	0x48000400
 8002828:	48000800 	.word	0x48000800
 800282c:	48000c00 	.word	0x48000c00
 8002830:	48001000 	.word	0x48001000
 8002834:	48001400 	.word	0x48001400
 8002838:	48001800 	.word	0x48001800
 800283c:	48001c00 	.word	0x48001c00
 8002840:	40010400 	.word	0x40010400

08002844 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	887b      	ldrh	r3, [r7, #2]
 8002856:	4013      	ands	r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
 8002860:	e001      	b.n	8002866 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002862:	2300      	movs	r3, #0
 8002864:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002866:	7bfb      	ldrb	r3, [r7, #15]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	807b      	strh	r3, [r7, #2]
 8002880:	4613      	mov	r3, r2
 8002882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002884:	787b      	ldrb	r3, [r7, #1]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800288a:	887a      	ldrh	r2, [r7, #2]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002890:	e002      	b.n	8002898 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002892:	887a      	ldrh	r2, [r7, #2]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028a6:	b08f      	sub	sp, #60	; 0x3c
 80028a8:	af0a      	add	r7, sp, #40	; 0x28
 80028aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e116      	b.n	8002ae4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d106      	bne.n	80028d6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff f9d3 	bl	8001c7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2203      	movs	r2, #3
 80028da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d102      	bne.n	80028f0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f004 f85d 	bl	80069b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	687e      	ldr	r6, [r7, #4]
 8002902:	466d      	mov	r5, sp
 8002904:	f106 0410 	add.w	r4, r6, #16
 8002908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800290a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800290c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800290e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002910:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002914:	e885 0003 	stmia.w	r5, {r0, r1}
 8002918:	1d33      	adds	r3, r6, #4
 800291a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800291c:	6838      	ldr	r0, [r7, #0]
 800291e:	f003 fff7 	bl	8006910 <USB_CoreInit>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0d7      	b.n	8002ae4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2100      	movs	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f004 f84b 	bl	80069d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002940:	2300      	movs	r3, #0
 8002942:	73fb      	strb	r3, [r7, #15]
 8002944:	e04a      	b.n	80029dc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002946:	7bfa      	ldrb	r2, [r7, #15]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	1a9b      	subs	r3, r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	333d      	adds	r3, #61	; 0x3d
 8002956:	2201      	movs	r2, #1
 8002958:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800295a:	7bfa      	ldrb	r2, [r7, #15]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	333c      	adds	r3, #60	; 0x3c
 800296a:	7bfa      	ldrb	r2, [r7, #15]
 800296c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	b298      	uxth	r0, r3
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	3342      	adds	r3, #66	; 0x42
 8002982:	4602      	mov	r2, r0
 8002984:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002986:	7bfa      	ldrb	r2, [r7, #15]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	333f      	adds	r3, #63	; 0x3f
 8002996:	2200      	movs	r2, #0
 8002998:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800299a:	7bfa      	ldrb	r2, [r7, #15]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	1a9b      	subs	r3, r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	3344      	adds	r3, #68	; 0x44
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029ae:	7bfa      	ldrb	r2, [r7, #15]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	1a9b      	subs	r3, r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	3348      	adds	r3, #72	; 0x48
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029c2:	7bfa      	ldrb	r2, [r7, #15]
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	1a9b      	subs	r3, r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	3350      	adds	r3, #80	; 0x50
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
 80029d8:	3301      	adds	r3, #1
 80029da:	73fb      	strb	r3, [r7, #15]
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d3af      	bcc.n	8002946 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
 80029ea:	e044      	b.n	8002a76 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a02:	7bfa      	ldrb	r2, [r7, #15]
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a18:	7bfa      	ldrb	r2, [r7, #15]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a2e:	7bfa      	ldrb	r2, [r7, #15]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	1a9b      	subs	r3, r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a44:	7bfa      	ldrb	r2, [r7, #15]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	1a9b      	subs	r3, r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a5a:	7bfa      	ldrb	r2, [r7, #15]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	3301      	adds	r3, #1
 8002a74:	73fb      	strb	r3, [r7, #15]
 8002a76:	7bfa      	ldrb	r2, [r7, #15]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d3b5      	bcc.n	80029ec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	603b      	str	r3, [r7, #0]
 8002a86:	687e      	ldr	r6, [r7, #4]
 8002a88:	466d      	mov	r5, sp
 8002a8a:	f106 0410 	add.w	r4, r6, #16
 8002a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a9e:	1d33      	adds	r3, r6, #4
 8002aa0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aa2:	6838      	ldr	r0, [r7, #0]
 8002aa4:	f003 ffc2 	bl	8006a2c <USB_DevInit>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e014      	b.n	8002ae4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d102      	bne.n	8002ad8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f80a 	bl	8002aec <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f004 f948 	bl	8006d72 <USB_DevDisconnect>

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002aec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	f043 0303 	orr.w	r3, r3, #3
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b42:	6013      	str	r3, [r2, #0]
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40007000 	.word	0x40007000

08002b54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b58:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b64:	d102      	bne.n	8002b6c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b6a:	e00b      	b.n	8002b84 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002b6c:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b7a:	d102      	bne.n	8002b82 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b80:	e000      	b.n	8002b84 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002b82:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40007000 	.word	0x40007000

08002b94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d141      	bne.n	8002c26 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ba2:	4b4b      	ldr	r3, [pc, #300]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bae:	d131      	bne.n	8002c14 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bb0:	4b47      	ldr	r3, [pc, #284]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bb6:	4a46      	ldr	r2, [pc, #280]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bc0:	4b43      	ldr	r3, [pc, #268]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bc8:	4a41      	ldr	r2, [pc, #260]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002bd0:	4b40      	ldr	r3, [pc, #256]	; (8002cd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2232      	movs	r2, #50	; 0x32
 8002bd6:	fb02 f303 	mul.w	r3, r2, r3
 8002bda:	4a3f      	ldr	r2, [pc, #252]	; (8002cd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002be0:	0c9b      	lsrs	r3, r3, #18
 8002be2:	3301      	adds	r3, #1
 8002be4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002be6:	e002      	b.n	8002bee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bee:	4b38      	ldr	r3, [pc, #224]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bfa:	d102      	bne.n	8002c02 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f2      	bne.n	8002be8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c02:	4b33      	ldr	r3, [pc, #204]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c0e:	d158      	bne.n	8002cc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e057      	b.n	8002cc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c14:	4b2e      	ldr	r3, [pc, #184]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c1a:	4a2d      	ldr	r2, [pc, #180]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c24:	e04d      	b.n	8002cc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c2c:	d141      	bne.n	8002cb2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c2e:	4b28      	ldr	r3, [pc, #160]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3a:	d131      	bne.n	8002ca0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c3c:	4b24      	ldr	r3, [pc, #144]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c42:	4a23      	ldr	r2, [pc, #140]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c4c:	4b20      	ldr	r3, [pc, #128]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c54:	4a1e      	ldr	r2, [pc, #120]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2232      	movs	r2, #50	; 0x32
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
 8002c66:	4a1c      	ldr	r2, [pc, #112]	; (8002cd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c68:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6c:	0c9b      	lsrs	r3, r3, #18
 8002c6e:	3301      	adds	r3, #1
 8002c70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c72:	e002      	b.n	8002c7a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c7a:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c86:	d102      	bne.n	8002c8e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f2      	bne.n	8002c74 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c8e:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c9a:	d112      	bne.n	8002cc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e011      	b.n	8002cc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ca6:	4a0a      	ldr	r2, [pc, #40]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002cb0:	e007      	b.n	8002cc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cb2:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cba:	4a05      	ldr	r2, [pc, #20]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cc0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	40007000 	.word	0x40007000
 8002cd4:	20000008 	.word	0x20000008
 8002cd8:	431bde83 	.word	0x431bde83

08002cdc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cea:	6053      	str	r3, [r2, #4]
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40007000 	.word	0x40007000

08002cfc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	4a04      	ldr	r2, [pc, #16]	; (8002d18 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d0a:	6053      	str	r3, [r2, #4]
}
 8002d0c:	bf00      	nop
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40007000 	.word	0x40007000

08002d1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e3db      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d2e:	4ba4      	ldr	r3, [pc, #656]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d38:	4ba1      	ldr	r3, [pc, #644]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 80e1 	beq.w	8002f12 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d007      	beq.n	8002d66 <HAL_RCC_OscConfig+0x4a>
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	2b0c      	cmp	r3, #12
 8002d5a:	f040 8088 	bne.w	8002e6e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	f040 8084 	bne.w	8002e6e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d66:	4b96      	ldr	r3, [pc, #600]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_RCC_OscConfig+0x62>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e3b3      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1a      	ldr	r2, [r3, #32]
 8002d82:	4b8f      	ldr	r3, [pc, #572]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d004      	beq.n	8002d98 <HAL_RCC_OscConfig+0x7c>
 8002d8e:	4b8c      	ldr	r3, [pc, #560]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d96:	e005      	b.n	8002da4 <HAL_RCC_OscConfig+0x88>
 8002d98:	4b89      	ldr	r3, [pc, #548]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d9e:	091b      	lsrs	r3, r3, #4
 8002da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d223      	bcs.n	8002df0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 fd91 	bl	80038d4 <RCC_SetFlashLatencyFromMSIRange>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e394      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dbc:	4b80      	ldr	r3, [pc, #512]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a7f      	ldr	r2, [pc, #508]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002dc2:	f043 0308 	orr.w	r3, r3, #8
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	4b7d      	ldr	r3, [pc, #500]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	497a      	ldr	r1, [pc, #488]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dda:	4b79      	ldr	r3, [pc, #484]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	4975      	ldr	r1, [pc, #468]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	604b      	str	r3, [r1, #4]
 8002dee:	e022      	b.n	8002e36 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002df0:	4b73      	ldr	r3, [pc, #460]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a72      	ldr	r2, [pc, #456]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002df6:	f043 0308 	orr.w	r3, r3, #8
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	4b70      	ldr	r3, [pc, #448]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	496d      	ldr	r1, [pc, #436]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e0e:	4b6c      	ldr	r3, [pc, #432]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	021b      	lsls	r3, r3, #8
 8002e1c:	4968      	ldr	r1, [pc, #416]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fd54 	bl	80038d4 <RCC_SetFlashLatencyFromMSIRange>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e357      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e36:	f000 fc8b 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 8002e3a:	4601      	mov	r1, r0
 8002e3c:	4b60      	ldr	r3, [pc, #384]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	4a5f      	ldr	r2, [pc, #380]	; (8002fc4 <HAL_RCC_OscConfig+0x2a8>)
 8002e48:	5cd3      	ldrb	r3, [r2, r3]
 8002e4a:	f003 031f 	and.w	r3, r3, #31
 8002e4e:	fa21 f303 	lsr.w	r3, r1, r3
 8002e52:	4a5d      	ldr	r2, [pc, #372]	; (8002fc8 <HAL_RCC_OscConfig+0x2ac>)
 8002e54:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e56:	4b5d      	ldr	r3, [pc, #372]	; (8002fcc <HAL_RCC_OscConfig+0x2b0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe ffbc 	bl	8001dd8 <HAL_InitTick>
 8002e60:	4603      	mov	r3, r0
 8002e62:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d052      	beq.n	8002f10 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	e33b      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d032      	beq.n	8002edc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e76:	4b52      	ldr	r3, [pc, #328]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a51      	ldr	r2, [pc, #324]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e82:	f7fe fff5 	bl	8001e70 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e8a:	f7fe fff1 	bl	8001e70 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e324      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e9c:	4b48      	ldr	r3, [pc, #288]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ea8:	4b45      	ldr	r3, [pc, #276]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a44      	ldr	r2, [pc, #272]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002eae:	f043 0308 	orr.w	r3, r3, #8
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	4b42      	ldr	r3, [pc, #264]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	493f      	ldr	r1, [pc, #252]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ec6:	4b3e      	ldr	r3, [pc, #248]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	021b      	lsls	r3, r3, #8
 8002ed4:	493a      	ldr	r1, [pc, #232]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	604b      	str	r3, [r1, #4]
 8002eda:	e01a      	b.n	8002f12 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002edc:	4b38      	ldr	r3, [pc, #224]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a37      	ldr	r2, [pc, #220]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
 8002ee6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ee8:	f7fe ffc2 	bl	8001e70 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ef0:	f7fe ffbe 	bl	8001e70 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e2f1      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f02:	4b2f      	ldr	r3, [pc, #188]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x1d4>
 8002f0e:	e000      	b.n	8002f12 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d074      	beq.n	8003008 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_OscConfig+0x214>
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	2b0c      	cmp	r3, #12
 8002f28:	d10e      	bne.n	8002f48 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d10b      	bne.n	8002f48 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f30:	4b23      	ldr	r3, [pc, #140]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d064      	beq.n	8003006 <HAL_RCC_OscConfig+0x2ea>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d160      	bne.n	8003006 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e2ce      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f50:	d106      	bne.n	8002f60 <HAL_RCC_OscConfig+0x244>
 8002f52:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a1a      	ldr	r2, [pc, #104]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	e01d      	b.n	8002f9c <HAL_RCC_OscConfig+0x280>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f68:	d10c      	bne.n	8002f84 <HAL_RCC_OscConfig+0x268>
 8002f6a:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a14      	ldr	r2, [pc, #80]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a11      	ldr	r2, [pc, #68]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	e00b      	b.n	8002f9c <HAL_RCC_OscConfig+0x280>
 8002f84:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a0d      	ldr	r2, [pc, #52]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <HAL_RCC_OscConfig+0x2a4>)
 8002f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d01c      	beq.n	8002fde <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fe ff64 	bl	8001e70 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002faa:	e011      	b.n	8002fd0 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fac:	f7fe ff60 	bl	8001e70 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b64      	cmp	r3, #100	; 0x64
 8002fb8:	d90a      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e293      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
 8002fbe:	bf00      	nop
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	080816e8 	.word	0x080816e8
 8002fc8:	20000008 	.word	0x20000008
 8002fcc:	2000000c 	.word	0x2000000c
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fd0:	4bae      	ldr	r3, [pc, #696]	; (800328c <HAL_RCC_OscConfig+0x570>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0e7      	beq.n	8002fac <HAL_RCC_OscConfig+0x290>
 8002fdc:	e014      	b.n	8003008 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fde:	f7fe ff47 	bl	8001e70 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe6:	f7fe ff43 	bl	8001e70 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b64      	cmp	r3, #100	; 0x64
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e276      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ff8:	4ba4      	ldr	r3, [pc, #656]	; (800328c <HAL_RCC_OscConfig+0x570>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1f0      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x2ca>
 8003004:	e000      	b.n	8003008 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003006:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d060      	beq.n	80030d6 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2b04      	cmp	r3, #4
 8003018:	d005      	beq.n	8003026 <HAL_RCC_OscConfig+0x30a>
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	2b0c      	cmp	r3, #12
 800301e:	d119      	bne.n	8003054 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d116      	bne.n	8003054 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003026:	4b99      	ldr	r3, [pc, #612]	; (800328c <HAL_RCC_OscConfig+0x570>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302e:	2b00      	cmp	r3, #0
 8003030:	d005      	beq.n	800303e <HAL_RCC_OscConfig+0x322>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e253      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303e:	4b93      	ldr	r3, [pc, #588]	; (800328c <HAL_RCC_OscConfig+0x570>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	061b      	lsls	r3, r3, #24
 800304c:	498f      	ldr	r1, [pc, #572]	; (800328c <HAL_RCC_OscConfig+0x570>)
 800304e:	4313      	orrs	r3, r2
 8003050:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003052:	e040      	b.n	80030d6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d023      	beq.n	80030a4 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800305c:	4b8b      	ldr	r3, [pc, #556]	; (800328c <HAL_RCC_OscConfig+0x570>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a8a      	ldr	r2, [pc, #552]	; (800328c <HAL_RCC_OscConfig+0x570>)
 8003062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fe ff02 	bl	8001e70 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003070:	f7fe fefe 	bl	8001e70 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e231      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003082:	4b82      	ldr	r3, [pc, #520]	; (800328c <HAL_RCC_OscConfig+0x570>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308e:	4b7f      	ldr	r3, [pc, #508]	; (800328c <HAL_RCC_OscConfig+0x570>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	061b      	lsls	r3, r3, #24
 800309c:	497b      	ldr	r1, [pc, #492]	; (800328c <HAL_RCC_OscConfig+0x570>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	604b      	str	r3, [r1, #4]
 80030a2:	e018      	b.n	80030d6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a4:	4b79      	ldr	r3, [pc, #484]	; (800328c <HAL_RCC_OscConfig+0x570>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a78      	ldr	r2, [pc, #480]	; (800328c <HAL_RCC_OscConfig+0x570>)
 80030aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7fe fede 	bl	8001e70 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b8:	f7fe feda 	bl	8001e70 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e20d      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030ca:	4b70      	ldr	r3, [pc, #448]	; (800328c <HAL_RCC_OscConfig+0x570>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d03c      	beq.n	800315c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d01c      	beq.n	8003124 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ea:	4b68      	ldr	r3, [pc, #416]	; (800328c <HAL_RCC_OscConfig+0x570>)
 80030ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030f0:	4a66      	ldr	r2, [pc, #408]	; (800328c <HAL_RCC_OscConfig+0x570>)
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fa:	f7fe feb9 	bl	8001e70 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003102:	f7fe feb5 	bl	8001e70 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e1e8      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003114:	4b5d      	ldr	r3, [pc, #372]	; (800328c <HAL_RCC_OscConfig+0x570>)
 8003116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0ef      	beq.n	8003102 <HAL_RCC_OscConfig+0x3e6>
 8003122:	e01b      	b.n	800315c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003124:	4b59      	ldr	r3, [pc, #356]	; (800328c <HAL_RCC_OscConfig+0x570>)
 8003126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800312a:	4a58      	ldr	r2, [pc, #352]	; (800328c <HAL_RCC_OscConfig+0x570>)
 800312c:	f023 0301 	bic.w	r3, r3, #1
 8003130:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003134:	f7fe fe9c 	bl	8001e70 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800313c:	f7fe fe98 	bl	8001e70 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e1cb      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800314e:	4b4f      	ldr	r3, [pc, #316]	; (800328c <HAL_RCC_OscConfig+0x570>)
 8003150:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1ef      	bne.n	800313c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 80a5 	beq.w	80032b4 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800316a:	2300      	movs	r3, #0
 800316c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800316e:	4b47      	ldr	r3, [pc, #284]	; (800328c <HAL_RCC_OscConfig+0x570>)
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10d      	bne.n	8003196 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800317a:	4b44      	ldr	r3, [pc, #272]	; (800328c <HAL_RCC_OscConfig+0x570>)
 800317c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317e:	4a43      	ldr	r2, [pc, #268]	; (800328c <HAL_RCC_OscConfig+0x570>)
 8003180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003184:	6593      	str	r3, [r2, #88]	; 0x58
 8003186:	4b41      	ldr	r3, [pc, #260]	; (800328c <HAL_RCC_OscConfig+0x570>)
 8003188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318e:	60bb      	str	r3, [r7, #8]
 8003190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003192:	2301      	movs	r3, #1
 8003194:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003196:	4b3e      	ldr	r3, [pc, #248]	; (8003290 <HAL_RCC_OscConfig+0x574>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d118      	bne.n	80031d4 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031a2:	4b3b      	ldr	r3, [pc, #236]	; (8003290 <HAL_RCC_OscConfig+0x574>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a3a      	ldr	r2, [pc, #232]	; (8003290 <HAL_RCC_OscConfig+0x574>)
 80031a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ae:	f7fe fe5f 	bl	8001e70 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b6:	f7fe fe5b 	bl	8001e70 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e18e      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031c8:	4b31      	ldr	r3, [pc, #196]	; (8003290 <HAL_RCC_OscConfig+0x574>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d108      	bne.n	80031ee <HAL_RCC_OscConfig+0x4d2>
 80031dc:	4b2b      	ldr	r3, [pc, #172]	; (800328c <HAL_RCC_OscConfig+0x570>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e2:	4a2a      	ldr	r2, [pc, #168]	; (800328c <HAL_RCC_OscConfig+0x570>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031ec:	e024      	b.n	8003238 <HAL_RCC_OscConfig+0x51c>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b05      	cmp	r3, #5
 80031f4:	d110      	bne.n	8003218 <HAL_RCC_OscConfig+0x4fc>
 80031f6:	4b25      	ldr	r3, [pc, #148]	; (800328c <HAL_RCC_OscConfig+0x570>)
 80031f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fc:	4a23      	ldr	r2, [pc, #140]	; (800328c <HAL_RCC_OscConfig+0x570>)
 80031fe:	f043 0304 	orr.w	r3, r3, #4
 8003202:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003206:	4b21      	ldr	r3, [pc, #132]	; (800328c <HAL_RCC_OscConfig+0x570>)
 8003208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320c:	4a1f      	ldr	r2, [pc, #124]	; (800328c <HAL_RCC_OscConfig+0x570>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003216:	e00f      	b.n	8003238 <HAL_RCC_OscConfig+0x51c>
 8003218:	4b1c      	ldr	r3, [pc, #112]	; (800328c <HAL_RCC_OscConfig+0x570>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321e:	4a1b      	ldr	r2, [pc, #108]	; (800328c <HAL_RCC_OscConfig+0x570>)
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003228:	4b18      	ldr	r3, [pc, #96]	; (800328c <HAL_RCC_OscConfig+0x570>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322e:	4a17      	ldr	r2, [pc, #92]	; (800328c <HAL_RCC_OscConfig+0x570>)
 8003230:	f023 0304 	bic.w	r3, r3, #4
 8003234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d016      	beq.n	800326e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003240:	f7fe fe16 	bl	8001e70 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003246:	e00a      	b.n	800325e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003248:	f7fe fe12 	bl	8001e70 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	; 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e143      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800325e:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_RCC_OscConfig+0x570>)
 8003260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0ed      	beq.n	8003248 <HAL_RCC_OscConfig+0x52c>
 800326c:	e019      	b.n	80032a2 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326e:	f7fe fdff 	bl	8001e70 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003274:	e00e      	b.n	8003294 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003276:	f7fe fdfb 	bl	8001e70 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	f241 3288 	movw	r2, #5000	; 0x1388
 8003284:	4293      	cmp	r3, r2
 8003286:	d905      	bls.n	8003294 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e12c      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
 800328c:	40021000 	.word	0x40021000
 8003290:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003294:	4b96      	ldr	r3, [pc, #600]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1e9      	bne.n	8003276 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032a2:	7ffb      	ldrb	r3, [r7, #31]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d105      	bne.n	80032b4 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a8:	4b91      	ldr	r3, [pc, #580]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 80032aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ac:	4a90      	ldr	r2, [pc, #576]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 80032ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0320 	and.w	r3, r3, #32
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d03c      	beq.n	800333a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01c      	beq.n	8003302 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032c8:	4b89      	ldr	r3, [pc, #548]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 80032ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ce:	4a88      	ldr	r2, [pc, #544]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d8:	f7fe fdca 	bl	8001e70 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032e0:	f7fe fdc6 	bl	8001e70 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e0f9      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032f2:	4b7f      	ldr	r3, [pc, #508]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 80032f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ef      	beq.n	80032e0 <HAL_RCC_OscConfig+0x5c4>
 8003300:	e01b      	b.n	800333a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003302:	4b7b      	ldr	r3, [pc, #492]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 8003304:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003308:	4a79      	ldr	r2, [pc, #484]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 800330a:	f023 0301 	bic.w	r3, r3, #1
 800330e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003312:	f7fe fdad 	bl	8001e70 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800331a:	f7fe fda9 	bl	8001e70 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e0dc      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800332c:	4b70      	ldr	r3, [pc, #448]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 800332e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1ef      	bne.n	800331a <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 80d0 	beq.w	80034e4 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2b0c      	cmp	r3, #12
 8003348:	f000 808d 	beq.w	8003466 <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	2b02      	cmp	r3, #2
 8003352:	d15a      	bne.n	800340a <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003354:	4b66      	ldr	r3, [pc, #408]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a65      	ldr	r2, [pc, #404]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 800335a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800335e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fe fd86 	bl	8001e70 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003368:	f7fe fd82 	bl	8001e70 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e0b5      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800337a:	4b5d      	ldr	r3, [pc, #372]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003386:	4b5a      	ldr	r3, [pc, #360]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	4b5a      	ldr	r3, [pc, #360]	; (80034f4 <HAL_RCC_OscConfig+0x7d8>)
 800338c:	4013      	ands	r3, r2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003396:	3a01      	subs	r2, #1
 8003398:	0112      	lsls	r2, r2, #4
 800339a:	4311      	orrs	r1, r2
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033a0:	0212      	lsls	r2, r2, #8
 80033a2:	4311      	orrs	r1, r2
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033a8:	0852      	lsrs	r2, r2, #1
 80033aa:	3a01      	subs	r2, #1
 80033ac:	0552      	lsls	r2, r2, #21
 80033ae:	4311      	orrs	r1, r2
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033b4:	0852      	lsrs	r2, r2, #1
 80033b6:	3a01      	subs	r2, #1
 80033b8:	0652      	lsls	r2, r2, #25
 80033ba:	4311      	orrs	r1, r2
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033c0:	06d2      	lsls	r2, r2, #27
 80033c2:	430a      	orrs	r2, r1
 80033c4:	494a      	ldr	r1, [pc, #296]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ca:	4b49      	ldr	r3, [pc, #292]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a48      	ldr	r2, [pc, #288]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 80033d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033d4:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033d6:	4b46      	ldr	r3, [pc, #280]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	4a45      	ldr	r2, [pc, #276]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 80033dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033e0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e2:	f7fe fd45 	bl	8001e70 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ea:	f7fe fd41 	bl	8001e70 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e074      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033fc:	4b3c      	ldr	r3, [pc, #240]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x6ce>
 8003408:	e06c      	b.n	80034e4 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800340a:	4b39      	ldr	r3, [pc, #228]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a38      	ldr	r2, [pc, #224]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 8003410:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003414:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003416:	4b36      	ldr	r3, [pc, #216]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d105      	bne.n	800342e <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003422:	4b33      	ldr	r3, [pc, #204]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	4a32      	ldr	r2, [pc, #200]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 8003428:	f023 0303 	bic.w	r3, r3, #3
 800342c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800342e:	4b30      	ldr	r3, [pc, #192]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	4a2f      	ldr	r2, [pc, #188]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 8003434:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800343c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343e:	f7fe fd17 	bl	8001e70 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003446:	f7fe fd13 	bl	8001e70 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e046      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003458:	4b25      	ldr	r3, [pc, #148]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f0      	bne.n	8003446 <HAL_RCC_OscConfig+0x72a>
 8003464:	e03e      	b.n	80034e4 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346a:	2b01      	cmp	r3, #1
 800346c:	d101      	bne.n	8003472 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e039      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003472:	4b1f      	ldr	r3, [pc, #124]	; (80034f0 <HAL_RCC_OscConfig+0x7d4>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f003 0203 	and.w	r2, r3, #3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	429a      	cmp	r2, r3
 8003484:	d12c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	3b01      	subs	r3, #1
 8003492:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003494:	429a      	cmp	r2, r3
 8003496:	d123      	bne.n	80034e0 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a2:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d11b      	bne.n	80034e0 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b2:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d113      	bne.n	80034e0 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c2:	085b      	lsrs	r3, r3, #1
 80034c4:	3b01      	subs	r3, #1
 80034c6:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d109      	bne.n	80034e0 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	085b      	lsrs	r3, r3, #1
 80034d8:	3b01      	subs	r3, #1
 80034da:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034dc:	429a      	cmp	r2, r3
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3720      	adds	r7, #32
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	019d800c 	.word	0x019d800c

080034f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e10f      	b.n	8003730 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003510:	4b89      	ldr	r3, [pc, #548]	; (8003738 <HAL_RCC_ClockConfig+0x240>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 030f 	and.w	r3, r3, #15
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d910      	bls.n	8003540 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b86      	ldr	r3, [pc, #536]	; (8003738 <HAL_RCC_ClockConfig+0x240>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 020f 	bic.w	r2, r3, #15
 8003526:	4984      	ldr	r1, [pc, #528]	; (8003738 <HAL_RCC_ClockConfig+0x240>)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800352e:	4b82      	ldr	r3, [pc, #520]	; (8003738 <HAL_RCC_ClockConfig+0x240>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d001      	beq.n	8003540 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0f7      	b.n	8003730 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 8089 	beq.w	8003660 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b03      	cmp	r3, #3
 8003554:	d133      	bne.n	80035be <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003556:	4b79      	ldr	r3, [pc, #484]	; (800373c <HAL_RCC_ClockConfig+0x244>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e0e4      	b.n	8003730 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003566:	f000 fa0f 	bl	8003988 <RCC_GetSysClockFreqFromPLLSource>
 800356a:	4602      	mov	r2, r0
 800356c:	4b74      	ldr	r3, [pc, #464]	; (8003740 <HAL_RCC_ClockConfig+0x248>)
 800356e:	429a      	cmp	r2, r3
 8003570:	d955      	bls.n	800361e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003572:	4b72      	ldr	r3, [pc, #456]	; (800373c <HAL_RCC_ClockConfig+0x244>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10a      	bne.n	8003594 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800357e:	4b6f      	ldr	r3, [pc, #444]	; (800373c <HAL_RCC_ClockConfig+0x244>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003586:	4a6d      	ldr	r2, [pc, #436]	; (800373c <HAL_RCC_ClockConfig+0x244>)
 8003588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800358c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800358e:	2380      	movs	r3, #128	; 0x80
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	e044      	b.n	800361e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d03e      	beq.n	800361e <HAL_RCC_ClockConfig+0x126>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d13a      	bne.n	800361e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035a8:	4b64      	ldr	r3, [pc, #400]	; (800373c <HAL_RCC_ClockConfig+0x244>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035b0:	4a62      	ldr	r2, [pc, #392]	; (800373c <HAL_RCC_ClockConfig+0x244>)
 80035b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035b8:	2380      	movs	r3, #128	; 0x80
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	e02f      	b.n	800361e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d107      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035c6:	4b5d      	ldr	r3, [pc, #372]	; (800373c <HAL_RCC_ClockConfig+0x244>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d115      	bne.n	80035fe <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e0ac      	b.n	8003730 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d107      	bne.n	80035ee <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035de:	4b57      	ldr	r3, [pc, #348]	; (800373c <HAL_RCC_ClockConfig+0x244>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d109      	bne.n	80035fe <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e0a0      	b.n	8003730 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035ee:	4b53      	ldr	r3, [pc, #332]	; (800373c <HAL_RCC_ClockConfig+0x244>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e098      	b.n	8003730 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80035fe:	f000 f8a7 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 8003602:	4602      	mov	r2, r0
 8003604:	4b4e      	ldr	r3, [pc, #312]	; (8003740 <HAL_RCC_ClockConfig+0x248>)
 8003606:	429a      	cmp	r2, r3
 8003608:	d909      	bls.n	800361e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800360a:	4b4c      	ldr	r3, [pc, #304]	; (800373c <HAL_RCC_ClockConfig+0x244>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003612:	4a4a      	ldr	r2, [pc, #296]	; (800373c <HAL_RCC_ClockConfig+0x244>)
 8003614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003618:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800361a:	2380      	movs	r3, #128	; 0x80
 800361c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800361e:	4b47      	ldr	r3, [pc, #284]	; (800373c <HAL_RCC_ClockConfig+0x244>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f023 0203 	bic.w	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4944      	ldr	r1, [pc, #272]	; (800373c <HAL_RCC_ClockConfig+0x244>)
 800362c:	4313      	orrs	r3, r2
 800362e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003630:	f7fe fc1e 	bl	8001e70 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	e00a      	b.n	800364e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003638:	f7fe fc1a 	bl	8001e70 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	; 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e070      	b.n	8003730 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	4b3b      	ldr	r3, [pc, #236]	; (800373c <HAL_RCC_ClockConfig+0x244>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 020c 	and.w	r2, r3, #12
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	429a      	cmp	r2, r3
 800365e:	d1eb      	bne.n	8003638 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d009      	beq.n	8003680 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800366c:	4b33      	ldr	r3, [pc, #204]	; (800373c <HAL_RCC_ClockConfig+0x244>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	4930      	ldr	r1, [pc, #192]	; (800373c <HAL_RCC_ClockConfig+0x244>)
 800367a:	4313      	orrs	r3, r2
 800367c:	608b      	str	r3, [r1, #8]
 800367e:	e008      	b.n	8003692 <HAL_RCC_ClockConfig+0x19a>
  }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	2b80      	cmp	r3, #128	; 0x80
 8003684:	d105      	bne.n	8003692 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003686:	4b2d      	ldr	r3, [pc, #180]	; (800373c <HAL_RCC_ClockConfig+0x244>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	4a2c      	ldr	r2, [pc, #176]	; (800373c <HAL_RCC_ClockConfig+0x244>)
 800368c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003690:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003692:	4b29      	ldr	r3, [pc, #164]	; (8003738 <HAL_RCC_ClockConfig+0x240>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d210      	bcs.n	80036c2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a0:	4b25      	ldr	r3, [pc, #148]	; (8003738 <HAL_RCC_ClockConfig+0x240>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f023 020f 	bic.w	r2, r3, #15
 80036a8:	4923      	ldr	r1, [pc, #140]	; (8003738 <HAL_RCC_ClockConfig+0x240>)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b0:	4b21      	ldr	r3, [pc, #132]	; (8003738 <HAL_RCC_ClockConfig+0x240>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d001      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e036      	b.n	8003730 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d008      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036ce:	4b1b      	ldr	r3, [pc, #108]	; (800373c <HAL_RCC_ClockConfig+0x244>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	4918      	ldr	r1, [pc, #96]	; (800373c <HAL_RCC_ClockConfig+0x244>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d009      	beq.n	8003700 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ec:	4b13      	ldr	r3, [pc, #76]	; (800373c <HAL_RCC_ClockConfig+0x244>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	4910      	ldr	r1, [pc, #64]	; (800373c <HAL_RCC_ClockConfig+0x244>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003700:	f000 f826 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 8003704:	4601      	mov	r1, r0
 8003706:	4b0d      	ldr	r3, [pc, #52]	; (800373c <HAL_RCC_ClockConfig+0x244>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	091b      	lsrs	r3, r3, #4
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	4a0c      	ldr	r2, [pc, #48]	; (8003744 <HAL_RCC_ClockConfig+0x24c>)
 8003712:	5cd3      	ldrb	r3, [r2, r3]
 8003714:	f003 031f 	and.w	r3, r3, #31
 8003718:	fa21 f303 	lsr.w	r3, r1, r3
 800371c:	4a0a      	ldr	r2, [pc, #40]	; (8003748 <HAL_RCC_ClockConfig+0x250>)
 800371e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003720:	4b0a      	ldr	r3, [pc, #40]	; (800374c <HAL_RCC_ClockConfig+0x254>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f7fe fb57 	bl	8001dd8 <HAL_InitTick>
 800372a:	4603      	mov	r3, r0
 800372c:	73fb      	strb	r3, [r7, #15]

  return status;
 800372e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40022000 	.word	0x40022000
 800373c:	40021000 	.word	0x40021000
 8003740:	04c4b400 	.word	0x04c4b400
 8003744:	080816e8 	.word	0x080816e8
 8003748:	20000008 	.word	0x20000008
 800374c:	2000000c 	.word	0x2000000c

08003750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003750:	b480      	push	{r7}
 8003752:	b089      	sub	sp, #36	; 0x24
 8003754:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003756:	2300      	movs	r3, #0
 8003758:	61fb      	str	r3, [r7, #28]
 800375a:	2300      	movs	r3, #0
 800375c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800375e:	4b3d      	ldr	r3, [pc, #244]	; (8003854 <HAL_RCC_GetSysClockFreq+0x104>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 030c 	and.w	r3, r3, #12
 8003766:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003768:	4b3a      	ldr	r3, [pc, #232]	; (8003854 <HAL_RCC_GetSysClockFreq+0x104>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0x34>
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	2b0c      	cmp	r3, #12
 800377c:	d121      	bne.n	80037c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d11e      	bne.n	80037c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003784:	4b33      	ldr	r3, [pc, #204]	; (8003854 <HAL_RCC_GetSysClockFreq+0x104>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003790:	4b30      	ldr	r3, [pc, #192]	; (8003854 <HAL_RCC_GetSysClockFreq+0x104>)
 8003792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	e005      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037a0:	4b2c      	ldr	r3, [pc, #176]	; (8003854 <HAL_RCC_GetSysClockFreq+0x104>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	091b      	lsrs	r3, r3, #4
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037ac:	4a2a      	ldr	r2, [pc, #168]	; (8003858 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10d      	bne.n	80037d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037c0:	e00a      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d102      	bne.n	80037ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037c8:	4b24      	ldr	r3, [pc, #144]	; (800385c <HAL_RCC_GetSysClockFreq+0x10c>)
 80037ca:	61bb      	str	r3, [r7, #24]
 80037cc:	e004      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d101      	bne.n	80037d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037d4:	4b22      	ldr	r3, [pc, #136]	; (8003860 <HAL_RCC_GetSysClockFreq+0x110>)
 80037d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	2b0c      	cmp	r3, #12
 80037dc:	d133      	bne.n	8003846 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037de:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <HAL_RCC_GetSysClockFreq+0x104>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d002      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0xa4>
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d003      	beq.n	80037fa <HAL_RCC_GetSysClockFreq+0xaa>
 80037f2:	e005      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037f4:	4b19      	ldr	r3, [pc, #100]	; (800385c <HAL_RCC_GetSysClockFreq+0x10c>)
 80037f6:	617b      	str	r3, [r7, #20]
      break;
 80037f8:	e005      	b.n	8003806 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037fa:	4b19      	ldr	r3, [pc, #100]	; (8003860 <HAL_RCC_GetSysClockFreq+0x110>)
 80037fc:	617b      	str	r3, [r7, #20]
      break;
 80037fe:	e002      	b.n	8003806 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	617b      	str	r3, [r7, #20]
      break;
 8003804:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003806:	4b13      	ldr	r3, [pc, #76]	; (8003854 <HAL_RCC_GetSysClockFreq+0x104>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	091b      	lsrs	r3, r3, #4
 800380c:	f003 030f 	and.w	r3, r3, #15
 8003810:	3301      	adds	r3, #1
 8003812:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003814:	4b0f      	ldr	r3, [pc, #60]	; (8003854 <HAL_RCC_GetSysClockFreq+0x104>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	0a1b      	lsrs	r3, r3, #8
 800381a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	fb02 f203 	mul.w	r2, r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	fbb2 f3f3 	udiv	r3, r2, r3
 800382a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800382c:	4b09      	ldr	r3, [pc, #36]	; (8003854 <HAL_RCC_GetSysClockFreq+0x104>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	0e5b      	lsrs	r3, r3, #25
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	3301      	adds	r3, #1
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	fbb2 f3f3 	udiv	r3, r2, r3
 8003844:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003846:	69bb      	ldr	r3, [r7, #24]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3724      	adds	r7, #36	; 0x24
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	40021000 	.word	0x40021000
 8003858:	08081700 	.word	0x08081700
 800385c:	00f42400 	.word	0x00f42400
 8003860:	007a1200 	.word	0x007a1200

08003864 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003868:	4b03      	ldr	r3, [pc, #12]	; (8003878 <HAL_RCC_GetHCLKFreq+0x14>)
 800386a:	681b      	ldr	r3, [r3, #0]
}
 800386c:	4618      	mov	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	20000008 	.word	0x20000008

0800387c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003880:	f7ff fff0 	bl	8003864 <HAL_RCC_GetHCLKFreq>
 8003884:	4601      	mov	r1, r0
 8003886:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	0a1b      	lsrs	r3, r3, #8
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	4a04      	ldr	r2, [pc, #16]	; (80038a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003892:	5cd3      	ldrb	r3, [r2, r3]
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	fa21 f303 	lsr.w	r3, r1, r3
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40021000 	.word	0x40021000
 80038a4:	080816f8 	.word	0x080816f8

080038a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038ac:	f7ff ffda 	bl	8003864 <HAL_RCC_GetHCLKFreq>
 80038b0:	4601      	mov	r1, r0
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	0adb      	lsrs	r3, r3, #11
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	4a04      	ldr	r2, [pc, #16]	; (80038d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038be:	5cd3      	ldrb	r3, [r2, r3]
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40021000 	.word	0x40021000
 80038d0:	080816f8 	.word	0x080816f8

080038d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038dc:	2300      	movs	r3, #0
 80038de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038e0:	4b27      	ldr	r3, [pc, #156]	; (8003980 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80038e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038ec:	f7ff f932 	bl	8002b54 <HAL_PWREx_GetVoltageRange>
 80038f0:	6178      	str	r0, [r7, #20]
 80038f2:	e014      	b.n	800391e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038f4:	4b22      	ldr	r3, [pc, #136]	; (8003980 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80038f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f8:	4a21      	ldr	r2, [pc, #132]	; (8003980 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80038fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003900:	4b1f      	ldr	r3, [pc, #124]	; (8003980 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800390c:	f7ff f922 	bl	8002b54 <HAL_PWREx_GetVoltageRange>
 8003910:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003912:	4b1b      	ldr	r3, [pc, #108]	; (8003980 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003916:	4a1a      	ldr	r2, [pc, #104]	; (8003980 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800391c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003924:	d10b      	bne.n	800393e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b80      	cmp	r3, #128	; 0x80
 800392a:	d913      	bls.n	8003954 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2ba0      	cmp	r3, #160	; 0xa0
 8003930:	d902      	bls.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003932:	2302      	movs	r3, #2
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	e00d      	b.n	8003954 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003938:	2301      	movs	r3, #1
 800393a:	613b      	str	r3, [r7, #16]
 800393c:	e00a      	b.n	8003954 <RCC_SetFlashLatencyFromMSIRange+0x80>
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b7f      	cmp	r3, #127	; 0x7f
 8003942:	d902      	bls.n	800394a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003944:	2302      	movs	r3, #2
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	e004      	b.n	8003954 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b70      	cmp	r3, #112	; 0x70
 800394e:	d101      	bne.n	8003954 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003950:	2301      	movs	r3, #1
 8003952:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003954:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f023 020f 	bic.w	r2, r3, #15
 800395c:	4909      	ldr	r1, [pc, #36]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003964:	4b07      	ldr	r3, [pc, #28]	; (8003984 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	429a      	cmp	r2, r3
 8003970:	d001      	beq.n	8003976 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40021000 	.word	0x40021000
 8003984:	40022000 	.word	0x40022000

08003988 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003992:	4b2d      	ldr	r3, [pc, #180]	; (8003a48 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0303 	and.w	r3, r3, #3
 800399a:	2b01      	cmp	r3, #1
 800399c:	d118      	bne.n	80039d0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800399e:	4b2a      	ldr	r3, [pc, #168]	; (8003a48 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d107      	bne.n	80039ba <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039aa:	4b27      	ldr	r3, [pc, #156]	; (8003a48 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80039ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b0:	0a1b      	lsrs	r3, r3, #8
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	e005      	b.n	80039c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039ba:	4b23      	ldr	r3, [pc, #140]	; (8003a48 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	091b      	lsrs	r3, r3, #4
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039c6:	4a21      	ldr	r2, [pc, #132]	; (8003a4c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ce:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039d0:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d002      	beq.n	80039e6 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d003      	beq.n	80039ec <RCC_GetSysClockFreqFromPLLSource+0x64>
 80039e4:	e005      	b.n	80039f2 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80039e6:	4b1a      	ldr	r3, [pc, #104]	; (8003a50 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80039e8:	613b      	str	r3, [r7, #16]
    break;
 80039ea:	e005      	b.n	80039f8 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80039ec:	4b19      	ldr	r3, [pc, #100]	; (8003a54 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80039ee:	613b      	str	r3, [r7, #16]
    break;
 80039f0:	e002      	b.n	80039f8 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	613b      	str	r3, [r7, #16]
    break;
 80039f6:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039f8:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	091b      	lsrs	r3, r3, #4
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	3301      	adds	r3, #1
 8003a04:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a06:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	0a1b      	lsrs	r3, r3, #8
 8003a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	fb02 f203 	mul.w	r2, r2, r3
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1c:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	0e5b      	lsrs	r3, r3, #25
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	3301      	adds	r3, #1
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a36:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003a38:	683b      	ldr	r3, [r7, #0]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	08081700 	.word	0x08081700
 8003a50:	00f42400 	.word	0x00f42400
 8003a54:	007a1200 	.word	0x007a1200

08003a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a60:	2300      	movs	r3, #0
 8003a62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a64:	2300      	movs	r3, #0
 8003a66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d03d      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a78:	2b40      	cmp	r3, #64	; 0x40
 8003a7a:	d00b      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003a7c:	2b40      	cmp	r3, #64	; 0x40
 8003a7e:	d804      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00e      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	d015      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003a88:	e01d      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003a8a:	2b60      	cmp	r3, #96	; 0x60
 8003a8c:	d01e      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003a8e:	2b80      	cmp	r3, #128	; 0x80
 8003a90:	d01c      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003a92:	e018      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a94:	4b86      	ldr	r3, [pc, #536]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4a85      	ldr	r2, [pc, #532]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003aa0:	e015      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fb0d 	bl	80040c8 <RCCEx_PLLSAI1_Config>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ab2:	e00c      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3320      	adds	r3, #32
 8003ab8:	2100      	movs	r1, #0
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fbf4 	bl	80042a8 <RCCEx_PLLSAI2_Config>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ac4:	e003      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	74fb      	strb	r3, [r7, #19]
      break;
 8003aca:	e000      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003acc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ace:	7cfb      	ldrb	r3, [r7, #19]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10b      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ad4:	4b76      	ldr	r3, [pc, #472]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ad6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ada:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ae2:	4973      	ldr	r1, [pc, #460]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003aea:	e001      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aec:	7cfb      	ldrb	r3, [r7, #19]
 8003aee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d042      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b04:	d00f      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b0a:	d805      	bhi.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d011      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b14:	d017      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003b16:	e01f      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003b18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b1c:	d01f      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b22:	d01c      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b24:	e018      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b26:	4b62      	ldr	r3, [pc, #392]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	4a61      	ldr	r2, [pc, #388]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b30:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b32:	e015      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3304      	adds	r3, #4
 8003b38:	2100      	movs	r1, #0
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fac4 	bl	80040c8 <RCCEx_PLLSAI1_Config>
 8003b40:	4603      	mov	r3, r0
 8003b42:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b44:	e00c      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3320      	adds	r3, #32
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 fbab 	bl	80042a8 <RCCEx_PLLSAI2_Config>
 8003b52:	4603      	mov	r3, r0
 8003b54:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b56:	e003      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	74fb      	strb	r3, [r7, #19]
      break;
 8003b5c:	e000      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003b5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b60:	7cfb      	ldrb	r3, [r7, #19]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10b      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b66:	4b52      	ldr	r3, [pc, #328]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b74:	494e      	ldr	r1, [pc, #312]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003b7c:	e001      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7e:	7cfb      	ldrb	r3, [r7, #19]
 8003b80:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 809f 	beq.w	8003cce <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b90:	2300      	movs	r3, #0
 8003b92:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b94:	4b46      	ldr	r3, [pc, #280]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00d      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003baa:	4b41      	ldr	r3, [pc, #260]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bae:	4a40      	ldr	r2, [pc, #256]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8003bb6:	4b3e      	ldr	r3, [pc, #248]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bc6:	4b3b      	ldr	r3, [pc, #236]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a3a      	ldr	r2, [pc, #232]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bd2:	f7fe f94d 	bl	8001e70 <HAL_GetTick>
 8003bd6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bd8:	e009      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bda:	f7fe f949 	bl	8001e70 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d902      	bls.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	74fb      	strb	r3, [r7, #19]
        break;
 8003bec:	e005      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bee:	4b31      	ldr	r3, [pc, #196]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0ef      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003bfa:	7cfb      	ldrb	r3, [r7, #19]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d15b      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c00:	4b2b      	ldr	r3, [pc, #172]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d01f      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d019      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c1e:	4b24      	ldr	r3, [pc, #144]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c28:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c2a:	4b21      	ldr	r3, [pc, #132]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c30:	4a1f      	ldr	r2, [pc, #124]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c3a:	4b1d      	ldr	r3, [pc, #116]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c40:	4a1b      	ldr	r2, [pc, #108]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c4a:	4a19      	ldr	r2, [pc, #100]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d016      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7fe f908 	bl	8001e70 <HAL_GetTick>
 8003c60:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c62:	e00b      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c64:	f7fe f904 	bl	8001e70 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d902      	bls.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	74fb      	strb	r3, [r7, #19]
            break;
 8003c7a:	e006      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0ec      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8003c8a:	7cfb      	ldrb	r3, [r7, #19]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10c      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c90:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca0:	4903      	ldr	r1, [pc, #12]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ca8:	e008      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003caa:	7cfb      	ldrb	r3, [r7, #19]
 8003cac:	74bb      	strb	r3, [r7, #18]
 8003cae:	e005      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb8:	7cfb      	ldrb	r3, [r7, #19]
 8003cba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cbc:	7c7b      	ldrb	r3, [r7, #17]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d105      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc2:	4ba0      	ldr	r3, [pc, #640]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc6:	4a9f      	ldr	r2, [pc, #636]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ccc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cda:	4b9a      	ldr	r3, [pc, #616]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce0:	f023 0203 	bic.w	r2, r3, #3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce8:	4996      	ldr	r1, [pc, #600]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cfc:	4b91      	ldr	r3, [pc, #580]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d02:	f023 020c 	bic.w	r2, r3, #12
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	498e      	ldr	r1, [pc, #568]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d1e:	4b89      	ldr	r3, [pc, #548]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2c:	4985      	ldr	r1, [pc, #532]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d40:	4b80      	ldr	r3, [pc, #512]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d4e:	497d      	ldr	r1, [pc, #500]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0310 	and.w	r3, r3, #16
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d62:	4b78      	ldr	r3, [pc, #480]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d70:	4974      	ldr	r1, [pc, #464]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d84:	4b6f      	ldr	r3, [pc, #444]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d92:	496c      	ldr	r1, [pc, #432]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003da6:	4b67      	ldr	r3, [pc, #412]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003db4:	4963      	ldr	r1, [pc, #396]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00a      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dc8:	4b5e      	ldr	r3, [pc, #376]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dd6:	495b      	ldr	r1, [pc, #364]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dea:	4b56      	ldr	r3, [pc, #344]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df8:	4952      	ldr	r1, [pc, #328]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00a      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e0c:	4b4d      	ldr	r3, [pc, #308]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e12:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1a:	494a      	ldr	r1, [pc, #296]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e2e:	4b45      	ldr	r3, [pc, #276]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3c:	4941      	ldr	r1, [pc, #260]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e50:	4b3c      	ldr	r3, [pc, #240]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e56:	f023 0203 	bic.w	r2, r3, #3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5e:	4939      	ldr	r1, [pc, #228]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d028      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e72:	4b34      	ldr	r3, [pc, #208]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e80:	4930      	ldr	r1, [pc, #192]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e90:	d106      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e92:	4b2c      	ldr	r3, [pc, #176]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	4a2b      	ldr	r2, [pc, #172]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e9c:	60d3      	str	r3, [r2, #12]
 8003e9e:	e011      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3304      	adds	r3, #4
 8003eae:	2101      	movs	r1, #1
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 f909 	bl	80040c8 <RCCEx_PLLSAI1_Config>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003eba:	7cfb      	ldrb	r3, [r7, #19]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003ec0:	7cfb      	ldrb	r3, [r7, #19]
 8003ec2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d04d      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ed4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ed8:	d108      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003eda:	4b1a      	ldr	r3, [pc, #104]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003edc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ee0:	4a18      	ldr	r2, [pc, #96]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ee6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003eea:	e012      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003eec:	4b15      	ldr	r3, [pc, #84]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ef2:	4a14      	ldr	r2, [pc, #80]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ef8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003efc:	4b11      	ldr	r3, [pc, #68]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f0a:	490e      	ldr	r1, [pc, #56]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f1a:	d106      	bne.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f1c:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	4a08      	ldr	r2, [pc, #32]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f26:	60d3      	str	r3, [r2, #12]
 8003f28:	e020      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f32:	d109      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f34:	4b03      	ldr	r3, [pc, #12]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4a02      	ldr	r2, [pc, #8]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f3e:	60d3      	str	r3, [r2, #12]
 8003f40:	e014      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f42:	bf00      	nop
 8003f44:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f50:	d10c      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3304      	adds	r3, #4
 8003f56:	2101      	movs	r1, #1
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 f8b5 	bl	80040c8 <RCCEx_PLLSAI1_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f62:	7cfb      	ldrb	r3, [r7, #19]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003f68:	7cfb      	ldrb	r3, [r7, #19]
 8003f6a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d028      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f78:	4b4a      	ldr	r3, [pc, #296]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f86:	4947      	ldr	r1, [pc, #284]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f96:	d106      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f98:	4b42      	ldr	r3, [pc, #264]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4a41      	ldr	r2, [pc, #260]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fa2:	60d3      	str	r3, [r2, #12]
 8003fa4:	e011      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003faa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fae:	d10c      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 f886 	bl	80040c8 <RCCEx_PLLSAI1_Config>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fc0:	7cfb      	ldrb	r3, [r7, #19]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003fc6:	7cfb      	ldrb	r3, [r7, #19]
 8003fc8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01e      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fd6:	4b33      	ldr	r3, [pc, #204]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fdc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fe6:	492f      	ldr	r1, [pc, #188]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ff4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ff8:	d10c      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	2102      	movs	r1, #2
 8004000:	4618      	mov	r0, r3
 8004002:	f000 f861 	bl	80040c8 <RCCEx_PLLSAI1_Config>
 8004006:	4603      	mov	r3, r0
 8004008:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800400a:	7cfb      	ldrb	r3, [r7, #19]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8004010:	7cfb      	ldrb	r3, [r7, #19]
 8004012:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00b      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004020:	4b20      	ldr	r3, [pc, #128]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004022:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004026:	f023 0204 	bic.w	r2, r3, #4
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004030:	491c      	ldr	r1, [pc, #112]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00b      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004044:	4b17      	ldr	r3, [pc, #92]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004046:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800404a:	f023 0218 	bic.w	r2, r3, #24
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004054:	4913      	ldr	r1, [pc, #76]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d017      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004068:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800406a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800406e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004078:	490a      	ldr	r1, [pc, #40]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004086:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800408a:	d105      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800408c:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4a04      	ldr	r2, [pc, #16]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004096:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004098:	7cbb      	ldrb	r3, [r7, #18]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40021000 	.word	0x40021000

080040a8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80040ac:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a04      	ldr	r2, [pc, #16]	; (80040c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040b2:	f043 0304 	orr.w	r3, r3, #4
 80040b6:	6013      	str	r3, [r2, #0]
}
 80040b8:	bf00      	nop
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40021000 	.word	0x40021000

080040c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040d6:	4b70      	ldr	r3, [pc, #448]	; (8004298 <RCCEx_PLLSAI1_Config+0x1d0>)
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00e      	beq.n	8004100 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040e2:	4b6d      	ldr	r3, [pc, #436]	; (8004298 <RCCEx_PLLSAI1_Config+0x1d0>)
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f003 0203 	and.w	r2, r3, #3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d103      	bne.n	80040fa <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
       ||
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d13f      	bne.n	800417a <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	73fb      	strb	r3, [r7, #15]
 80040fe:	e03c      	b.n	800417a <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b02      	cmp	r3, #2
 8004106:	d00c      	beq.n	8004122 <RCCEx_PLLSAI1_Config+0x5a>
 8004108:	2b03      	cmp	r3, #3
 800410a:	d013      	beq.n	8004134 <RCCEx_PLLSAI1_Config+0x6c>
 800410c:	2b01      	cmp	r3, #1
 800410e:	d120      	bne.n	8004152 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004110:	4b61      	ldr	r3, [pc, #388]	; (8004298 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d11d      	bne.n	8004158 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004120:	e01a      	b.n	8004158 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004122:	4b5d      	ldr	r3, [pc, #372]	; (8004298 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800412a:	2b00      	cmp	r3, #0
 800412c:	d116      	bne.n	800415c <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004132:	e013      	b.n	800415c <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004134:	4b58      	ldr	r3, [pc, #352]	; (8004298 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10f      	bne.n	8004160 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004140:	4b55      	ldr	r3, [pc, #340]	; (8004298 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d109      	bne.n	8004160 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004150:	e006      	b.n	8004160 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	73fb      	strb	r3, [r7, #15]
      break;
 8004156:	e004      	b.n	8004162 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004158:	bf00      	nop
 800415a:	e002      	b.n	8004162 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800415c:	bf00      	nop
 800415e:	e000      	b.n	8004162 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004160:	bf00      	nop
    }

    if(status == HAL_OK)
 8004162:	7bfb      	ldrb	r3, [r7, #15]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d108      	bne.n	800417a <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004168:	4b4b      	ldr	r3, [pc, #300]	; (8004298 <RCCEx_PLLSAI1_Config+0x1d0>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f023 0203 	bic.w	r2, r3, #3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4948      	ldr	r1, [pc, #288]	; (8004298 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004176:	4313      	orrs	r3, r2
 8004178:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800417a:	7bfb      	ldrb	r3, [r7, #15]
 800417c:	2b00      	cmp	r3, #0
 800417e:	f040 8086 	bne.w	800428e <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004182:	4b45      	ldr	r3, [pc, #276]	; (8004298 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a44      	ldr	r2, [pc, #272]	; (8004298 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004188:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800418c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800418e:	f7fd fe6f 	bl	8001e70 <HAL_GetTick>
 8004192:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004194:	e009      	b.n	80041aa <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004196:	f7fd fe6b 	bl	8001e70 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d902      	bls.n	80041aa <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	73fb      	strb	r3, [r7, #15]
        break;
 80041a8:	e005      	b.n	80041b6 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041aa:	4b3b      	ldr	r3, [pc, #236]	; (8004298 <RCCEx_PLLSAI1_Config+0x1d0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1ef      	bne.n	8004196 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d168      	bne.n	800428e <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d113      	bne.n	80041ea <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041c2:	4b35      	ldr	r3, [pc, #212]	; (8004298 <RCCEx_PLLSAI1_Config+0x1d0>)
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	4b35      	ldr	r3, [pc, #212]	; (800429c <RCCEx_PLLSAI1_Config+0x1d4>)
 80041c8:	4013      	ands	r3, r2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6892      	ldr	r2, [r2, #8]
 80041ce:	0211      	lsls	r1, r2, #8
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	68d2      	ldr	r2, [r2, #12]
 80041d4:	06d2      	lsls	r2, r2, #27
 80041d6:	4311      	orrs	r1, r2
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6852      	ldr	r2, [r2, #4]
 80041dc:	3a01      	subs	r2, #1
 80041de:	0112      	lsls	r2, r2, #4
 80041e0:	430a      	orrs	r2, r1
 80041e2:	492d      	ldr	r1, [pc, #180]	; (8004298 <RCCEx_PLLSAI1_Config+0x1d0>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	610b      	str	r3, [r1, #16]
 80041e8:	e02d      	b.n	8004246 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d115      	bne.n	800421c <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041f0:	4b29      	ldr	r3, [pc, #164]	; (8004298 <RCCEx_PLLSAI1_Config+0x1d0>)
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	4b2a      	ldr	r3, [pc, #168]	; (80042a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6892      	ldr	r2, [r2, #8]
 80041fc:	0211      	lsls	r1, r2, #8
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6912      	ldr	r2, [r2, #16]
 8004202:	0852      	lsrs	r2, r2, #1
 8004204:	3a01      	subs	r2, #1
 8004206:	0552      	lsls	r2, r2, #21
 8004208:	4311      	orrs	r1, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6852      	ldr	r2, [r2, #4]
 800420e:	3a01      	subs	r2, #1
 8004210:	0112      	lsls	r2, r2, #4
 8004212:	430a      	orrs	r2, r1
 8004214:	4920      	ldr	r1, [pc, #128]	; (8004298 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004216:	4313      	orrs	r3, r2
 8004218:	610b      	str	r3, [r1, #16]
 800421a:	e014      	b.n	8004246 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800421c:	4b1e      	ldr	r3, [pc, #120]	; (8004298 <RCCEx_PLLSAI1_Config+0x1d0>)
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	4b20      	ldr	r3, [pc, #128]	; (80042a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004222:	4013      	ands	r3, r2
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6892      	ldr	r2, [r2, #8]
 8004228:	0211      	lsls	r1, r2, #8
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6952      	ldr	r2, [r2, #20]
 800422e:	0852      	lsrs	r2, r2, #1
 8004230:	3a01      	subs	r2, #1
 8004232:	0652      	lsls	r2, r2, #25
 8004234:	4311      	orrs	r1, r2
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6852      	ldr	r2, [r2, #4]
 800423a:	3a01      	subs	r2, #1
 800423c:	0112      	lsls	r2, r2, #4
 800423e:	430a      	orrs	r2, r1
 8004240:	4915      	ldr	r1, [pc, #84]	; (8004298 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004242:	4313      	orrs	r3, r2
 8004244:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004246:	4b14      	ldr	r3, [pc, #80]	; (8004298 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a13      	ldr	r2, [pc, #76]	; (8004298 <RCCEx_PLLSAI1_Config+0x1d0>)
 800424c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004250:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004252:	f7fd fe0d 	bl	8001e70 <HAL_GetTick>
 8004256:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004258:	e009      	b.n	800426e <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800425a:	f7fd fe09 	bl	8001e70 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d902      	bls.n	800426e <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	73fb      	strb	r3, [r7, #15]
          break;
 800426c:	e005      	b.n	800427a <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800426e:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0ef      	beq.n	800425a <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d106      	bne.n	800428e <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	4903      	ldr	r1, [pc, #12]	; (8004298 <RCCEx_PLLSAI1_Config+0x1d0>)
 800428a:	4313      	orrs	r3, r2
 800428c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800428e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40021000 	.word	0x40021000
 800429c:	07ff800f 	.word	0x07ff800f
 80042a0:	ff9f800f 	.word	0xff9f800f
 80042a4:	f9ff800f 	.word	0xf9ff800f

080042a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042b6:	4b70      	ldr	r3, [pc, #448]	; (8004478 <RCCEx_PLLSAI2_Config+0x1d0>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00e      	beq.n	80042e0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80042c2:	4b6d      	ldr	r3, [pc, #436]	; (8004478 <RCCEx_PLLSAI2_Config+0x1d0>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f003 0203 	and.w	r2, r3, #3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d103      	bne.n	80042da <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
       ||
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d13f      	bne.n	800435a <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	73fb      	strb	r3, [r7, #15]
 80042de:	e03c      	b.n	800435a <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d00c      	beq.n	8004302 <RCCEx_PLLSAI2_Config+0x5a>
 80042e8:	2b03      	cmp	r3, #3
 80042ea:	d013      	beq.n	8004314 <RCCEx_PLLSAI2_Config+0x6c>
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d120      	bne.n	8004332 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042f0:	4b61      	ldr	r3, [pc, #388]	; (8004478 <RCCEx_PLLSAI2_Config+0x1d0>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d11d      	bne.n	8004338 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004300:	e01a      	b.n	8004338 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004302:	4b5d      	ldr	r3, [pc, #372]	; (8004478 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430a:	2b00      	cmp	r3, #0
 800430c:	d116      	bne.n	800433c <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004312:	e013      	b.n	800433c <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004314:	4b58      	ldr	r3, [pc, #352]	; (8004478 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10f      	bne.n	8004340 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004320:	4b55      	ldr	r3, [pc, #340]	; (8004478 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d109      	bne.n	8004340 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004330:	e006      	b.n	8004340 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	73fb      	strb	r3, [r7, #15]
      break;
 8004336:	e004      	b.n	8004342 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004338:	bf00      	nop
 800433a:	e002      	b.n	8004342 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800433c:	bf00      	nop
 800433e:	e000      	b.n	8004342 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004340:	bf00      	nop
    }

    if(status == HAL_OK)
 8004342:	7bfb      	ldrb	r3, [r7, #15]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d108      	bne.n	800435a <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004348:	4b4b      	ldr	r3, [pc, #300]	; (8004478 <RCCEx_PLLSAI2_Config+0x1d0>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f023 0203 	bic.w	r2, r3, #3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4948      	ldr	r1, [pc, #288]	; (8004478 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004356:	4313      	orrs	r3, r2
 8004358:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	2b00      	cmp	r3, #0
 800435e:	f040 8086 	bne.w	800446e <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004362:	4b45      	ldr	r3, [pc, #276]	; (8004478 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a44      	ldr	r2, [pc, #272]	; (8004478 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800436c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800436e:	f7fd fd7f 	bl	8001e70 <HAL_GetTick>
 8004372:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004374:	e009      	b.n	800438a <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004376:	f7fd fd7b 	bl	8001e70 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d902      	bls.n	800438a <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	73fb      	strb	r3, [r7, #15]
        break;
 8004388:	e005      	b.n	8004396 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800438a:	4b3b      	ldr	r3, [pc, #236]	; (8004478 <RCCEx_PLLSAI2_Config+0x1d0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1ef      	bne.n	8004376 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8004396:	7bfb      	ldrb	r3, [r7, #15]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d168      	bne.n	800446e <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d113      	bne.n	80043ca <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043a2:	4b35      	ldr	r3, [pc, #212]	; (8004478 <RCCEx_PLLSAI2_Config+0x1d0>)
 80043a4:	695a      	ldr	r2, [r3, #20]
 80043a6:	4b35      	ldr	r3, [pc, #212]	; (800447c <RCCEx_PLLSAI2_Config+0x1d4>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6892      	ldr	r2, [r2, #8]
 80043ae:	0211      	lsls	r1, r2, #8
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	68d2      	ldr	r2, [r2, #12]
 80043b4:	06d2      	lsls	r2, r2, #27
 80043b6:	4311      	orrs	r1, r2
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6852      	ldr	r2, [r2, #4]
 80043bc:	3a01      	subs	r2, #1
 80043be:	0112      	lsls	r2, r2, #4
 80043c0:	430a      	orrs	r2, r1
 80043c2:	492d      	ldr	r1, [pc, #180]	; (8004478 <RCCEx_PLLSAI2_Config+0x1d0>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	614b      	str	r3, [r1, #20]
 80043c8:	e02d      	b.n	8004426 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d115      	bne.n	80043fc <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043d0:	4b29      	ldr	r3, [pc, #164]	; (8004478 <RCCEx_PLLSAI2_Config+0x1d0>)
 80043d2:	695a      	ldr	r2, [r3, #20]
 80043d4:	4b2a      	ldr	r3, [pc, #168]	; (8004480 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043d6:	4013      	ands	r3, r2
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6892      	ldr	r2, [r2, #8]
 80043dc:	0211      	lsls	r1, r2, #8
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6912      	ldr	r2, [r2, #16]
 80043e2:	0852      	lsrs	r2, r2, #1
 80043e4:	3a01      	subs	r2, #1
 80043e6:	0552      	lsls	r2, r2, #21
 80043e8:	4311      	orrs	r1, r2
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6852      	ldr	r2, [r2, #4]
 80043ee:	3a01      	subs	r2, #1
 80043f0:	0112      	lsls	r2, r2, #4
 80043f2:	430a      	orrs	r2, r1
 80043f4:	4920      	ldr	r1, [pc, #128]	; (8004478 <RCCEx_PLLSAI2_Config+0x1d0>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	614b      	str	r3, [r1, #20]
 80043fa:	e014      	b.n	8004426 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043fc:	4b1e      	ldr	r3, [pc, #120]	; (8004478 <RCCEx_PLLSAI2_Config+0x1d0>)
 80043fe:	695a      	ldr	r2, [r3, #20]
 8004400:	4b20      	ldr	r3, [pc, #128]	; (8004484 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004402:	4013      	ands	r3, r2
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6892      	ldr	r2, [r2, #8]
 8004408:	0211      	lsls	r1, r2, #8
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6952      	ldr	r2, [r2, #20]
 800440e:	0852      	lsrs	r2, r2, #1
 8004410:	3a01      	subs	r2, #1
 8004412:	0652      	lsls	r2, r2, #25
 8004414:	4311      	orrs	r1, r2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6852      	ldr	r2, [r2, #4]
 800441a:	3a01      	subs	r2, #1
 800441c:	0112      	lsls	r2, r2, #4
 800441e:	430a      	orrs	r2, r1
 8004420:	4915      	ldr	r1, [pc, #84]	; (8004478 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004422:	4313      	orrs	r3, r2
 8004424:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004426:	4b14      	ldr	r3, [pc, #80]	; (8004478 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a13      	ldr	r2, [pc, #76]	; (8004478 <RCCEx_PLLSAI2_Config+0x1d0>)
 800442c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004430:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004432:	f7fd fd1d 	bl	8001e70 <HAL_GetTick>
 8004436:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004438:	e009      	b.n	800444e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800443a:	f7fd fd19 	bl	8001e70 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d902      	bls.n	800444e <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	73fb      	strb	r3, [r7, #15]
          break;
 800444c:	e005      	b.n	800445a <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800444e:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0ef      	beq.n	800443a <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800445a:	7bfb      	ldrb	r3, [r7, #15]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d106      	bne.n	800446e <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004462:	695a      	ldr	r2, [r3, #20]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	4903      	ldr	r1, [pc, #12]	; (8004478 <RCCEx_PLLSAI2_Config+0x1d0>)
 800446a:	4313      	orrs	r3, r2
 800446c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800446e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40021000 	.word	0x40021000
 800447c:	07ff800f 	.word	0x07ff800f
 8004480:	ff9f800f 	.word	0xff9f800f
 8004484:	f9ff800f 	.word	0xf9ff800f

08004488 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e07c      	b.n	8004594 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d106      	bne.n	80044ba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7fd f943 	bl	8001740 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2202      	movs	r2, #2
 80044be:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044d0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044da:	d902      	bls.n	80044e2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	e002      	b.n	80044e8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044e6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80044f0:	d007      	beq.n	8004502 <HAL_SPI_Init+0x7a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044fa:	d002      	beq.n	8004502 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10b      	bne.n	8004522 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004512:	d903      	bls.n	800451c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	631a      	str	r2, [r3, #48]	; 0x30
 800451a:	e002      	b.n	8004522 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	431a      	orrs	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	ea42 0103 	orr.w	r1, r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	0c1b      	lsrs	r3, r3, #16
 8004562:	f003 0204 	and.w	r2, r3, #4
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	ea42 0103 	orr.w	r1, r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	430a      	orrs	r2, r1
 8004582:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->State     = HAL_SPI_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint32_t Size, uint32_t Timeout)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_SPI_Transmit+0x20>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e140      	b.n	800483e <HAL_SPI_Transmit+0x2a2>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045c4:	f7fd fc54 	bl	8001e70 <HAL_GetTick>
 80045c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	617b      	str	r3, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d002      	beq.n	80045e0 <HAL_SPI_Transmit+0x44>
  {
    errorcode = HAL_BUSY;
 80045da:	2302      	movs	r3, #2
 80045dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045de:	e125      	b.n	800482c <HAL_SPI_Transmit+0x290>
  }

  if ((pData == NULL) || (Size == 0U))
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <HAL_SPI_Transmit+0x50>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d102      	bne.n	80045f2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045f0:	e11c      	b.n	800482c <HAL_SPI_Transmit+0x290>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2203      	movs	r2, #3
 80045f6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	641a      	str	r2, [r3, #64]	; 0x40

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxXferSize  = 0U;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  hspi->RxXferCount = 0U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  hspi->TxISR       = NULL;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->RxISR       = NULL;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800463c:	d107      	bne.n	800464e <HAL_SPI_Transmit+0xb2>
  {
    SPI_1LINE_TX(hspi);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800464c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004658:	2b40      	cmp	r3, #64	; 0x40
 800465a:	d007      	beq.n	800466c <HAL_SPI_Transmit+0xd0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800466a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004674:	d946      	bls.n	8004704 <HAL_SPI_Transmit+0x168>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <HAL_SPI_Transmit+0xe8>
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d13a      	bne.n	80046fa <HAL_SPI_Transmit+0x15e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004688:	881a      	ldrh	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004694:	1c9a      	adds	r2, r3, #2
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	1e5a      	subs	r2, r3, #1
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046a4:	e029      	b.n	80046fa <HAL_SPI_Transmit+0x15e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d110      	bne.n	80046d6 <HAL_SPI_Transmit+0x13a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b8:	881a      	ldrh	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	1c9a      	adds	r2, r3, #2
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	1e5a      	subs	r2, r3, #1
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	641a      	str	r2, [r3, #64]	; 0x40
 80046d4:	e011      	b.n	80046fa <HAL_SPI_Transmit+0x15e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046d6:	f7fd fbcb 	bl	8001e70 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d803      	bhi.n	80046ee <HAL_SPI_Transmit+0x152>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ec:	d102      	bne.n	80046f4 <HAL_SPI_Transmit+0x158>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d102      	bne.n	80046fa <HAL_SPI_Transmit+0x15e>
        {
          errorcode = HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046f8:	e098      	b.n	800482c <HAL_SPI_Transmit+0x290>
    while (hspi->TxXferCount > 0U)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1d1      	bne.n	80046a6 <HAL_SPI_Transmit+0x10a>
 8004702:	e071      	b.n	80047e8 <HAL_SPI_Transmit+0x24c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <HAL_SPI_Transmit+0x176>
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d166      	bne.n	80047e0 <HAL_SPI_Transmit+0x244>
    {
      if (hspi->TxXferCount > 1U)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	2b01      	cmp	r3, #1
 8004718:	d910      	bls.n	800473c <HAL_SPI_Transmit+0x1a0>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	881a      	ldrh	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	1c9a      	adds	r2, r3, #2
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	1e9a      	subs	r2, r3, #2
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	641a      	str	r2, [r3, #64]	; 0x40
 800473a:	e051      	b.n	80047e0 <HAL_SPI_Transmit+0x244>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	330c      	adds	r3, #12
 8004746:	7812      	ldrb	r2, [r2, #0]
 8004748:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	1e5a      	subs	r2, r3, #1
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    while (hspi->TxXferCount > 0U)
 800475e:	e03f      	b.n	80047e0 <HAL_SPI_Transmit+0x244>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b02      	cmp	r3, #2
 800476c:	d126      	bne.n	80047bc <HAL_SPI_Transmit+0x220>
      {
        if (hspi->TxXferCount > 1U)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	2b01      	cmp	r3, #1
 8004774:	d910      	bls.n	8004798 <HAL_SPI_Transmit+0x1fc>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	881a      	ldrh	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004786:	1c9a      	adds	r2, r3, #2
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	1e9a      	subs	r2, r3, #2
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	641a      	str	r2, [r3, #64]	; 0x40
 8004796:	e023      	b.n	80047e0 <HAL_SPI_Transmit+0x244>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	330c      	adds	r3, #12
 80047a2:	7812      	ldrb	r2, [r2, #0]
 80047a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	1e5a      	subs	r2, r3, #1
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	641a      	str	r2, [r3, #64]	; 0x40
 80047ba:	e011      	b.n	80047e0 <HAL_SPI_Transmit+0x244>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047bc:	f7fd fb58 	bl	8001e70 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d803      	bhi.n	80047d4 <HAL_SPI_Transmit+0x238>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d2:	d102      	bne.n	80047da <HAL_SPI_Transmit+0x23e>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d102      	bne.n	80047e0 <HAL_SPI_Transmit+0x244>
        {
          errorcode = HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047de:	e025      	b.n	800482c <HAL_SPI_Transmit+0x290>
    while (hspi->TxXferCount > 0U)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1bb      	bne.n	8004760 <HAL_SPI_Transmit+0x1c4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	6839      	ldr	r1, [r7, #0]
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 fc21 	bl	8005034 <SPI_EndRxTxTransaction>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <HAL_SPI_Transmit+0x262>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2220      	movs	r2, #32
 80047fc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10a      	bne.n	800481c <HAL_SPI_Transmit+0x280>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004806:	2300      	movs	r3, #0
 8004808:	613b      	str	r3, [r7, #16]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <HAL_SPI_Transmit+0x28e>
  {
    errorcode = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	e000      	b.n	800482c <HAL_SPI_Transmit+0x290>
  }

error:
 800482a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return errorcode;
 800483c:	7ffb      	ldrb	r3, [r7, #31]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3720      	adds	r7, #32
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b08a      	sub	sp, #40	; 0x28
 800484a:	af00      	add	r7, sp, #0
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	607a      	str	r2, [r7, #4]
 8004852:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004854:	2301      	movs	r3, #1
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <HAL_SPI_TransmitReceive+0x26>
 8004868:	2302      	movs	r3, #2
 800486a:	e1e9      	b.n	8004c40 <HAL_SPI_TransmitReceive+0x3fa>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004874:	f7fd fafc 	bl	8001e70 <HAL_GetTick>
 8004878:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004880:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004888:	887b      	ldrh	r3, [r7, #2]
 800488a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800488c:	887b      	ldrh	r3, [r7, #2]
 800488e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004890:	7efb      	ldrb	r3, [r7, #27]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d00e      	beq.n	80048b4 <HAL_SPI_TransmitReceive+0x6e>
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800489c:	d106      	bne.n	80048ac <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d102      	bne.n	80048ac <HAL_SPI_TransmitReceive+0x66>
 80048a6:	7efb      	ldrb	r3, [r7, #27]
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d003      	beq.n	80048b4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80048ac:	2302      	movs	r3, #2
 80048ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80048b2:	e1bb      	b.n	8004c2c <HAL_SPI_TransmitReceive+0x3e6>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d005      	beq.n	80048c6 <HAL_SPI_TransmitReceive+0x80>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <HAL_SPI_TransmitReceive+0x80>
 80048c0:	887b      	ldrh	r3, [r7, #2]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d103      	bne.n	80048ce <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80048cc:	e1ae      	b.n	8004c2c <HAL_SPI_TransmitReceive+0x3e6>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d003      	beq.n	80048e2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2205      	movs	r2, #5
 80048de:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	887a      	ldrh	r2, [r7, #2]
 80048f2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  hspi->RxXferSize  = Size;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	887a      	ldrh	r2, [r7, #2]
 80048fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004904:	887a      	ldrh	r2, [r7, #2]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxXferSize  = Size;
 800490a:	887a      	ldrh	r2, [r7, #2]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	63da      	str	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxISR       = NULL;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	655a      	str	r2, [r3, #84]	; 0x54
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004924:	d802      	bhi.n	800492c <HAL_SPI_TransmitReceive+0xe6>
 8004926:	8a3b      	ldrh	r3, [r7, #16]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d908      	bls.n	800493e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800493a:	605a      	str	r2, [r3, #4]
 800493c:	e007      	b.n	800494e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800494c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004958:	2b40      	cmp	r3, #64	; 0x40
 800495a:	d007      	beq.n	800496c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800496a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004974:	d976      	bls.n	8004a64 <HAL_SPI_TransmitReceive+0x21e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d002      	beq.n	8004984 <HAL_SPI_TransmitReceive+0x13e>
 800497e:	8a7b      	ldrh	r3, [r7, #18]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d164      	bne.n	8004a4e <HAL_SPI_TransmitReceive+0x208>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004988:	881a      	ldrh	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	1c9a      	adds	r2, r3, #2
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	1e5a      	subs	r2, r3, #1
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049a4:	e053      	b.n	8004a4e <HAL_SPI_TransmitReceive+0x208>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d118      	bne.n	80049e6 <HAL_SPI_TransmitReceive+0x1a0>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d014      	beq.n	80049e6 <HAL_SPI_TransmitReceive+0x1a0>
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d111      	bne.n	80049e6 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c6:	881a      	ldrh	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	1c9a      	adds	r2, r3, #2
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	1e5a      	subs	r2, r3, #1
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	641a      	str	r2, [r3, #64]	; 0x40
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d11c      	bne.n	8004a2e <HAL_SPI_TransmitReceive+0x1e8>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d016      	beq.n	8004a2e <HAL_SPI_TransmitReceive+0x1e8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0a:	b292      	uxth	r2, r2
 8004a0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a12:	1c9a      	adds	r2, r3, #2
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	645a      	str	r2, [r3, #68]	; 0x44
        hspi->RxXferCount--;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a2e:	f7fd fa1f 	bl	8001e70 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d807      	bhi.n	8004a4e <HAL_SPI_TransmitReceive+0x208>
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a44:	d003      	beq.n	8004a4e <HAL_SPI_TransmitReceive+0x208>
      {
        errorcode = HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004a4c:	e0ee      	b.n	8004c2c <HAL_SPI_TransmitReceive+0x3e6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1a7      	bne.n	80049a6 <HAL_SPI_TransmitReceive+0x160>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1a1      	bne.n	80049a6 <HAL_SPI_TransmitReceive+0x160>
 8004a62:	e0d3      	b.n	8004c0c <HAL_SPI_TransmitReceive+0x3c6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <HAL_SPI_TransmitReceive+0x22e>
 8004a6c:	8a7b      	ldrh	r3, [r7, #18]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	f040 80c0 	bne.w	8004bf4 <HAL_SPI_TransmitReceive+0x3ae>
    {
      if (hspi->TxXferCount > 1U)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d910      	bls.n	8004a9e <HAL_SPI_TransmitReceive+0x258>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a80:	881a      	ldrh	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8c:	1c9a      	adds	r2, r3, #2
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	1e9a      	subs	r2, r3, #2
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	641a      	str	r2, [r3, #64]	; 0x40
 8004a9c:	e0aa      	b.n	8004bf4 <HAL_SPI_TransmitReceive+0x3ae>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	330c      	adds	r3, #12
 8004aa8:	7812      	ldrb	r2, [r2, #0]
 8004aaa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	1e5a      	subs	r2, r3, #1
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ac0:	e098      	b.n	8004bf4 <HAL_SPI_TransmitReceive+0x3ae>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d12e      	bne.n	8004b2e <HAL_SPI_TransmitReceive+0x2e8>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d02a      	beq.n	8004b2e <HAL_SPI_TransmitReceive+0x2e8>
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d127      	bne.n	8004b2e <HAL_SPI_TransmitReceive+0x2e8>
      {
        if (hspi->TxXferCount > 1U)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d910      	bls.n	8004b08 <HAL_SPI_TransmitReceive+0x2c2>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	881a      	ldrh	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	1c9a      	adds	r2, r3, #2
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	1e9a      	subs	r2, r3, #2
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	641a      	str	r2, [r3, #64]	; 0x40
 8004b06:	e010      	b.n	8004b2a <HAL_SPI_TransmitReceive+0x2e4>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	330c      	adds	r3, #12
 8004b12:	7812      	ldrb	r2, [r2, #0]
 8004b14:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	1e5a      	subs	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	641a      	str	r2, [r3, #64]	; 0x40
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d148      	bne.n	8004bce <HAL_SPI_TransmitReceive+0x388>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d042      	beq.n	8004bce <HAL_SPI_TransmitReceive+0x388>
      {
        if (hspi->RxXferCount > 1U)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d923      	bls.n	8004b9c <HAL_SPI_TransmitReceive+0x356>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5e:	b292      	uxth	r2, r2
 8004b60:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b66:	1c9a      	adds	r2, r3, #2
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	645a      	str	r2, [r3, #68]	; 0x44
          hspi->RxXferCount -= 2U;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b02      	subs	r3, #2
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (hspi->RxXferCount <= 1U)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d81f      	bhi.n	8004bca <HAL_SPI_TransmitReceive+0x384>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b98:	605a      	str	r2, [r3, #4]
 8004b9a:	e016      	b.n	8004bca <HAL_SPI_TransmitReceive+0x384>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f103 020c 	add.w	r2, r3, #12
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba8:	7812      	ldrb	r2, [r2, #0]
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	645a      	str	r2, [r3, #68]	; 0x44
          hspi->RxXferCount--;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004bce:	f7fd f94f 	bl	8001e70 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d803      	bhi.n	8004be6 <HAL_SPI_TransmitReceive+0x3a0>
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be4:	d102      	bne.n	8004bec <HAL_SPI_TransmitReceive+0x3a6>
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d103      	bne.n	8004bf4 <HAL_SPI_TransmitReceive+0x3ae>
      {
        errorcode = HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004bf2:	e01b      	b.n	8004c2c <HAL_SPI_TransmitReceive+0x3e6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f47f af62 	bne.w	8004ac2 <HAL_SPI_TransmitReceive+0x27c>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f47f af5b 	bne.w	8004ac2 <HAL_SPI_TransmitReceive+0x27c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c0c:	69fa      	ldr	r2, [r7, #28]
 8004c0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fa0f 	bl	8005034 <SPI_EndRxTxTransaction>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d006      	beq.n	8004c2a <HAL_SPI_TransmitReceive+0x3e4>
  {
    errorcode = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2220      	movs	r2, #32
 8004c26:	665a      	str	r2, [r3, #100]	; 0x64
 8004c28:	e000      	b.n	8004c2c <HAL_SPI_TransmitReceive+0x3e6>
  }

error :
 8004c2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_UNLOCK(hspi);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return errorcode;
 8004c3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3728      	adds	r7, #40	; 0x28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	099b      	lsrs	r3, r3, #6
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10f      	bne.n	8004c8c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	099b      	lsrs	r3, r3, #6
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d004      	beq.n	8004c8c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	4798      	blx	r3
    return;
 8004c8a:	e0d8      	b.n	8004e3e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	085b      	lsrs	r3, r3, #1
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <HAL_SPI_IRQHandler+0x66>
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	09db      	lsrs	r3, r3, #7
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d004      	beq.n	8004cae <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	4798      	blx	r3
    return;
 8004cac:	e0c7      	b.n	8004e3e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10c      	bne.n	8004cd4 <HAL_SPI_IRQHandler+0x8c>
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	099b      	lsrs	r3, r3, #6
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <HAL_SPI_IRQHandler+0x8c>
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	0a1b      	lsrs	r3, r3, #8
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 80b5 	beq.w	8004e3e <HAL_SPI_IRQHandler+0x1f6>
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 80ae 	beq.w	8004e3e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	099b      	lsrs	r3, r3, #6
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d023      	beq.n	8004d36 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d011      	beq.n	8004d1e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cfe:	f043 0204 	orr.w	r2, r3, #4
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	665a      	str	r2, [r3, #100]	; 0x64
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d06:	2300      	movs	r3, #0
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	617b      	str	r3, [r7, #20]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	617b      	str	r3, [r7, #20]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	e00b      	b.n	8004d36 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d1e:	2300      	movs	r3, #0
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	693b      	ldr	r3, [r7, #16]
        return;
 8004d34:	e083      	b.n	8004e3e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	095b      	lsrs	r3, r3, #5
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d014      	beq.n	8004d6c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d46:	f043 0201 	orr.w	r2, r3, #1
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	665a      	str	r2, [r3, #100]	; 0x64
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	0a1b      	lsrs	r3, r3, #8
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00c      	beq.n	8004d92 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d7c:	f043 0208 	orr.w	r2, r3, #8
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	665a      	str	r2, [r3, #100]	; 0x64
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004d84:	2300      	movs	r3, #0
 8004d86:	60bb      	str	r3, [r7, #8]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	60bb      	str	r3, [r7, #8]
 8004d90:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d050      	beq.n	8004e3c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004da8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d104      	bne.n	8004dc6 <HAL_SPI_IRQHandler+0x17e>
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d034      	beq.n	8004e30 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0203 	bic.w	r2, r2, #3
 8004dd4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d011      	beq.n	8004e02 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de2:	4a18      	ldr	r2, [pc, #96]	; (8004e44 <HAL_SPI_IRQHandler+0x1fc>)
 8004de4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fd fa28 	bl	8002240 <HAL_DMA_Abort_IT>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d005      	beq.n	8004e02 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	665a      	str	r2, [r3, #100]	; 0x64
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d016      	beq.n	8004e38 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0e:	4a0d      	ldr	r2, [pc, #52]	; (8004e44 <HAL_SPI_IRQHandler+0x1fc>)
 8004e10:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fd fa12 	bl	8002240 <HAL_DMA_Abort_IT>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	665a      	str	r2, [r3, #100]	; 0x64
        if (hspi->hdmatx != NULL)
 8004e2e:	e003      	b.n	8004e38 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f809 	bl	8004e48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004e36:	e000      	b.n	8004e3a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004e38:	bf00      	nop
    return;
 8004e3a:	bf00      	nop
 8004e3c:	bf00      	nop
  }
}
 8004e3e:	3720      	adds	r7, #32
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	08004e5d 	.word	0x08004e5d

08004e48 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e68:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  hspi->TxXferCount = 0U;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f7ff ffe5 	bl	8004e48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e7e:	bf00      	nop
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b084      	sub	sp, #16
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	603b      	str	r3, [r7, #0]
 8004e92:	4613      	mov	r3, r2
 8004e94:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e96:	e04c      	b.n	8004f32 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9e:	d048      	beq.n	8004f32 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004ea0:	f7fc ffe6 	bl	8001e70 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d902      	bls.n	8004eb6 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d13d      	bne.n	8004f32 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ec4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ece:	d111      	bne.n	8004ef4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ed8:	d004      	beq.n	8004ee4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee2:	d107      	bne.n	8004ef4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ef2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004efc:	d10f      	bne.n	8004f1e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e00f      	b.n	8004f52 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	bf0c      	ite	eq
 8004f42:	2301      	moveq	r3, #1
 8004f44:	2300      	movne	r3, #0
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	461a      	mov	r2, r3
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d1a3      	bne.n	8004e98 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b084      	sub	sp, #16
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	60f8      	str	r0, [r7, #12]
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	607a      	str	r2, [r7, #4]
 8004f66:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004f68:	e057      	b.n	800501a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f70:	d106      	bne.n	8004f80 <SPI_WaitFifoStateUntilTimeout+0x26>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d103      	bne.n	8004f80 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	330c      	adds	r3, #12
 8004f7e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f86:	d048      	beq.n	800501a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004f88:	f7fc ff72 	bl	8001e70 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d902      	bls.n	8004f9e <SPI_WaitFifoStateUntilTimeout+0x44>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d13d      	bne.n	800501a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fb6:	d111      	bne.n	8004fdc <SPI_WaitFifoStateUntilTimeout+0x82>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc0:	d004      	beq.n	8004fcc <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fca:	d107      	bne.n	8004fdc <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fe4:	d10f      	bne.n	8005006 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005004:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e008      	b.n	800502c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	4013      	ands	r3, r2
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	429a      	cmp	r2, r3
 8005028:	d19f      	bne.n	8004f6a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af02      	add	r7, sp, #8
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2200      	movs	r2, #0
 8005048:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f7ff ff84 	bl	8004f5a <SPI_WaitFifoStateUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d007      	beq.n	8005068 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800505c:	f043 0220 	orr.w	r2, r3, #32
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	665a      	str	r2, [r3, #100]	; 0x64
    return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e027      	b.n	80050b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2200      	movs	r2, #0
 8005070:	2180      	movs	r1, #128	; 0x80
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f7ff ff07 	bl	8004e86 <SPI_WaitFlagStateUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d007      	beq.n	800508e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005082:	f043 0220 	orr.w	r2, r3, #32
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	665a      	str	r2, [r3, #100]	; 0x64
    return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e014      	b.n	80050b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2200      	movs	r2, #0
 8005096:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f7ff ff5d 	bl	8004f5a <SPI_WaitFifoStateUntilTimeout>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d007      	beq.n	80050b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050aa:	f043 0220 	orr.w	r2, r3, #32
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	665a      	str	r2, [r3, #100]	; 0x64
    return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e000      	b.n	80050b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e042      	b.n	8005158 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d106      	bne.n	80050ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7fc fccb 	bl	8001a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2224      	movs	r2, #36	; 0x24
 80050ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0201 	bic.w	r2, r2, #1
 8005100:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f82c 	bl	8005160 <UART_SetConfig>
 8005108:	4603      	mov	r3, r0
 800510a:	2b01      	cmp	r3, #1
 800510c:	d101      	bne.n	8005112 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e022      	b.n	8005158 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f001 f9e0 	bl	80064e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800512e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800513e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0201 	orr.w	r2, r2, #1
 800514e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f001 fa67 	bl	8006624 <UART_CheckIdleState>
 8005156:	4603      	mov	r3, r0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005160:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005164:	b088      	sub	sp, #32
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800516a:	2300      	movs	r3, #0
 800516c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800516e:	2300      	movs	r3, #0
 8005170:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005172:	2300      	movs	r3, #0
 8005174:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	4313      	orrs	r3, r2
 800518c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005192:	69fa      	ldr	r2, [r7, #28]
 8005194:	4313      	orrs	r3, r2
 8005196:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	4bac      	ldr	r3, [pc, #688]	; (8005450 <UART_SetConfig+0x2f0>)
 80051a0:	4013      	ands	r3, r2
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6812      	ldr	r2, [r2, #0]
 80051a6:	69f9      	ldr	r1, [r7, #28]
 80051a8:	430b      	orrs	r3, r1
 80051aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4aa1      	ldr	r2, [pc, #644]	; (8005454 <UART_SetConfig+0x2f4>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d004      	beq.n	80051dc <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	69fa      	ldr	r2, [r7, #28]
 80051d8:	4313      	orrs	r3, r2
 80051da:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80051e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6812      	ldr	r2, [r2, #0]
 80051ee:	69f9      	ldr	r1, [r7, #28]
 80051f0:	430b      	orrs	r3, r1
 80051f2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fa:	f023 010f 	bic.w	r1, r3, #15
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a92      	ldr	r2, [pc, #584]	; (8005458 <UART_SetConfig+0x2f8>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d121      	bne.n	8005258 <UART_SetConfig+0xf8>
 8005214:	4b91      	ldr	r3, [pc, #580]	; (800545c <UART_SetConfig+0x2fc>)
 8005216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	2b03      	cmp	r3, #3
 8005220:	d816      	bhi.n	8005250 <UART_SetConfig+0xf0>
 8005222:	a201      	add	r2, pc, #4	; (adr r2, 8005228 <UART_SetConfig+0xc8>)
 8005224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005228:	08005239 	.word	0x08005239
 800522c:	08005245 	.word	0x08005245
 8005230:	0800523f 	.word	0x0800523f
 8005234:	0800524b 	.word	0x0800524b
 8005238:	2301      	movs	r3, #1
 800523a:	76fb      	strb	r3, [r7, #27]
 800523c:	e0e8      	b.n	8005410 <UART_SetConfig+0x2b0>
 800523e:	2302      	movs	r3, #2
 8005240:	76fb      	strb	r3, [r7, #27]
 8005242:	e0e5      	b.n	8005410 <UART_SetConfig+0x2b0>
 8005244:	2304      	movs	r3, #4
 8005246:	76fb      	strb	r3, [r7, #27]
 8005248:	e0e2      	b.n	8005410 <UART_SetConfig+0x2b0>
 800524a:	2308      	movs	r3, #8
 800524c:	76fb      	strb	r3, [r7, #27]
 800524e:	e0df      	b.n	8005410 <UART_SetConfig+0x2b0>
 8005250:	2310      	movs	r3, #16
 8005252:	76fb      	strb	r3, [r7, #27]
 8005254:	bf00      	nop
 8005256:	e0db      	b.n	8005410 <UART_SetConfig+0x2b0>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a80      	ldr	r2, [pc, #512]	; (8005460 <UART_SetConfig+0x300>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d134      	bne.n	80052cc <UART_SetConfig+0x16c>
 8005262:	4b7e      	ldr	r3, [pc, #504]	; (800545c <UART_SetConfig+0x2fc>)
 8005264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005268:	f003 030c 	and.w	r3, r3, #12
 800526c:	2b0c      	cmp	r3, #12
 800526e:	d829      	bhi.n	80052c4 <UART_SetConfig+0x164>
 8005270:	a201      	add	r2, pc, #4	; (adr r2, 8005278 <UART_SetConfig+0x118>)
 8005272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005276:	bf00      	nop
 8005278:	080052ad 	.word	0x080052ad
 800527c:	080052c5 	.word	0x080052c5
 8005280:	080052c5 	.word	0x080052c5
 8005284:	080052c5 	.word	0x080052c5
 8005288:	080052b9 	.word	0x080052b9
 800528c:	080052c5 	.word	0x080052c5
 8005290:	080052c5 	.word	0x080052c5
 8005294:	080052c5 	.word	0x080052c5
 8005298:	080052b3 	.word	0x080052b3
 800529c:	080052c5 	.word	0x080052c5
 80052a0:	080052c5 	.word	0x080052c5
 80052a4:	080052c5 	.word	0x080052c5
 80052a8:	080052bf 	.word	0x080052bf
 80052ac:	2300      	movs	r3, #0
 80052ae:	76fb      	strb	r3, [r7, #27]
 80052b0:	e0ae      	b.n	8005410 <UART_SetConfig+0x2b0>
 80052b2:	2302      	movs	r3, #2
 80052b4:	76fb      	strb	r3, [r7, #27]
 80052b6:	e0ab      	b.n	8005410 <UART_SetConfig+0x2b0>
 80052b8:	2304      	movs	r3, #4
 80052ba:	76fb      	strb	r3, [r7, #27]
 80052bc:	e0a8      	b.n	8005410 <UART_SetConfig+0x2b0>
 80052be:	2308      	movs	r3, #8
 80052c0:	76fb      	strb	r3, [r7, #27]
 80052c2:	e0a5      	b.n	8005410 <UART_SetConfig+0x2b0>
 80052c4:	2310      	movs	r3, #16
 80052c6:	76fb      	strb	r3, [r7, #27]
 80052c8:	bf00      	nop
 80052ca:	e0a1      	b.n	8005410 <UART_SetConfig+0x2b0>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a64      	ldr	r2, [pc, #400]	; (8005464 <UART_SetConfig+0x304>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d120      	bne.n	8005318 <UART_SetConfig+0x1b8>
 80052d6:	4b61      	ldr	r3, [pc, #388]	; (800545c <UART_SetConfig+0x2fc>)
 80052d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052e0:	2b10      	cmp	r3, #16
 80052e2:	d00f      	beq.n	8005304 <UART_SetConfig+0x1a4>
 80052e4:	2b10      	cmp	r3, #16
 80052e6:	d802      	bhi.n	80052ee <UART_SetConfig+0x18e>
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <UART_SetConfig+0x198>
 80052ec:	e010      	b.n	8005310 <UART_SetConfig+0x1b0>
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	d005      	beq.n	80052fe <UART_SetConfig+0x19e>
 80052f2:	2b30      	cmp	r3, #48	; 0x30
 80052f4:	d009      	beq.n	800530a <UART_SetConfig+0x1aa>
 80052f6:	e00b      	b.n	8005310 <UART_SetConfig+0x1b0>
 80052f8:	2300      	movs	r3, #0
 80052fa:	76fb      	strb	r3, [r7, #27]
 80052fc:	e088      	b.n	8005410 <UART_SetConfig+0x2b0>
 80052fe:	2302      	movs	r3, #2
 8005300:	76fb      	strb	r3, [r7, #27]
 8005302:	e085      	b.n	8005410 <UART_SetConfig+0x2b0>
 8005304:	2304      	movs	r3, #4
 8005306:	76fb      	strb	r3, [r7, #27]
 8005308:	e082      	b.n	8005410 <UART_SetConfig+0x2b0>
 800530a:	2308      	movs	r3, #8
 800530c:	76fb      	strb	r3, [r7, #27]
 800530e:	e07f      	b.n	8005410 <UART_SetConfig+0x2b0>
 8005310:	2310      	movs	r3, #16
 8005312:	76fb      	strb	r3, [r7, #27]
 8005314:	bf00      	nop
 8005316:	e07b      	b.n	8005410 <UART_SetConfig+0x2b0>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a52      	ldr	r2, [pc, #328]	; (8005468 <UART_SetConfig+0x308>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d120      	bne.n	8005364 <UART_SetConfig+0x204>
 8005322:	4b4e      	ldr	r3, [pc, #312]	; (800545c <UART_SetConfig+0x2fc>)
 8005324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005328:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800532c:	2b40      	cmp	r3, #64	; 0x40
 800532e:	d00f      	beq.n	8005350 <UART_SetConfig+0x1f0>
 8005330:	2b40      	cmp	r3, #64	; 0x40
 8005332:	d802      	bhi.n	800533a <UART_SetConfig+0x1da>
 8005334:	2b00      	cmp	r3, #0
 8005336:	d005      	beq.n	8005344 <UART_SetConfig+0x1e4>
 8005338:	e010      	b.n	800535c <UART_SetConfig+0x1fc>
 800533a:	2b80      	cmp	r3, #128	; 0x80
 800533c:	d005      	beq.n	800534a <UART_SetConfig+0x1ea>
 800533e:	2bc0      	cmp	r3, #192	; 0xc0
 8005340:	d009      	beq.n	8005356 <UART_SetConfig+0x1f6>
 8005342:	e00b      	b.n	800535c <UART_SetConfig+0x1fc>
 8005344:	2300      	movs	r3, #0
 8005346:	76fb      	strb	r3, [r7, #27]
 8005348:	e062      	b.n	8005410 <UART_SetConfig+0x2b0>
 800534a:	2302      	movs	r3, #2
 800534c:	76fb      	strb	r3, [r7, #27]
 800534e:	e05f      	b.n	8005410 <UART_SetConfig+0x2b0>
 8005350:	2304      	movs	r3, #4
 8005352:	76fb      	strb	r3, [r7, #27]
 8005354:	e05c      	b.n	8005410 <UART_SetConfig+0x2b0>
 8005356:	2308      	movs	r3, #8
 8005358:	76fb      	strb	r3, [r7, #27]
 800535a:	e059      	b.n	8005410 <UART_SetConfig+0x2b0>
 800535c:	2310      	movs	r3, #16
 800535e:	76fb      	strb	r3, [r7, #27]
 8005360:	bf00      	nop
 8005362:	e055      	b.n	8005410 <UART_SetConfig+0x2b0>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a40      	ldr	r2, [pc, #256]	; (800546c <UART_SetConfig+0x30c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d124      	bne.n	80053b8 <UART_SetConfig+0x258>
 800536e:	4b3b      	ldr	r3, [pc, #236]	; (800545c <UART_SetConfig+0x2fc>)
 8005370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005374:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800537c:	d012      	beq.n	80053a4 <UART_SetConfig+0x244>
 800537e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005382:	d802      	bhi.n	800538a <UART_SetConfig+0x22a>
 8005384:	2b00      	cmp	r3, #0
 8005386:	d007      	beq.n	8005398 <UART_SetConfig+0x238>
 8005388:	e012      	b.n	80053b0 <UART_SetConfig+0x250>
 800538a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800538e:	d006      	beq.n	800539e <UART_SetConfig+0x23e>
 8005390:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005394:	d009      	beq.n	80053aa <UART_SetConfig+0x24a>
 8005396:	e00b      	b.n	80053b0 <UART_SetConfig+0x250>
 8005398:	2300      	movs	r3, #0
 800539a:	76fb      	strb	r3, [r7, #27]
 800539c:	e038      	b.n	8005410 <UART_SetConfig+0x2b0>
 800539e:	2302      	movs	r3, #2
 80053a0:	76fb      	strb	r3, [r7, #27]
 80053a2:	e035      	b.n	8005410 <UART_SetConfig+0x2b0>
 80053a4:	2304      	movs	r3, #4
 80053a6:	76fb      	strb	r3, [r7, #27]
 80053a8:	e032      	b.n	8005410 <UART_SetConfig+0x2b0>
 80053aa:	2308      	movs	r3, #8
 80053ac:	76fb      	strb	r3, [r7, #27]
 80053ae:	e02f      	b.n	8005410 <UART_SetConfig+0x2b0>
 80053b0:	2310      	movs	r3, #16
 80053b2:	76fb      	strb	r3, [r7, #27]
 80053b4:	bf00      	nop
 80053b6:	e02b      	b.n	8005410 <UART_SetConfig+0x2b0>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a25      	ldr	r2, [pc, #148]	; (8005454 <UART_SetConfig+0x2f4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d124      	bne.n	800540c <UART_SetConfig+0x2ac>
 80053c2:	4b26      	ldr	r3, [pc, #152]	; (800545c <UART_SetConfig+0x2fc>)
 80053c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d0:	d012      	beq.n	80053f8 <UART_SetConfig+0x298>
 80053d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d6:	d802      	bhi.n	80053de <UART_SetConfig+0x27e>
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d007      	beq.n	80053ec <UART_SetConfig+0x28c>
 80053dc:	e012      	b.n	8005404 <UART_SetConfig+0x2a4>
 80053de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053e2:	d006      	beq.n	80053f2 <UART_SetConfig+0x292>
 80053e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053e8:	d009      	beq.n	80053fe <UART_SetConfig+0x29e>
 80053ea:	e00b      	b.n	8005404 <UART_SetConfig+0x2a4>
 80053ec:	2300      	movs	r3, #0
 80053ee:	76fb      	strb	r3, [r7, #27]
 80053f0:	e00e      	b.n	8005410 <UART_SetConfig+0x2b0>
 80053f2:	2302      	movs	r3, #2
 80053f4:	76fb      	strb	r3, [r7, #27]
 80053f6:	e00b      	b.n	8005410 <UART_SetConfig+0x2b0>
 80053f8:	2304      	movs	r3, #4
 80053fa:	76fb      	strb	r3, [r7, #27]
 80053fc:	e008      	b.n	8005410 <UART_SetConfig+0x2b0>
 80053fe:	2308      	movs	r3, #8
 8005400:	76fb      	strb	r3, [r7, #27]
 8005402:	e005      	b.n	8005410 <UART_SetConfig+0x2b0>
 8005404:	2310      	movs	r3, #16
 8005406:	76fb      	strb	r3, [r7, #27]
 8005408:	bf00      	nop
 800540a:	e001      	b.n	8005410 <UART_SetConfig+0x2b0>
 800540c:	2310      	movs	r3, #16
 800540e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a0f      	ldr	r2, [pc, #60]	; (8005454 <UART_SetConfig+0x2f4>)
 8005416:	4293      	cmp	r3, r2
 8005418:	f040 842d 	bne.w	8005c76 <UART_SetConfig+0xb16>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800541c:	7efb      	ldrb	r3, [r7, #27]
 800541e:	2b08      	cmp	r3, #8
 8005420:	f200 816b 	bhi.w	80056fa <UART_SetConfig+0x59a>
 8005424:	a201      	add	r2, pc, #4	; (adr r2, 800542c <UART_SetConfig+0x2cc>)
 8005426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542a:	bf00      	nop
 800542c:	08005471 	.word	0x08005471
 8005430:	080056fb 	.word	0x080056fb
 8005434:	08005513 	.word	0x08005513
 8005438:	080056fb 	.word	0x080056fb
 800543c:	080055ab 	.word	0x080055ab
 8005440:	080056fb 	.word	0x080056fb
 8005444:	080056fb 	.word	0x080056fb
 8005448:	080056fb 	.word	0x080056fb
 800544c:	0800564d 	.word	0x0800564d
 8005450:	cfff69f3 	.word	0xcfff69f3
 8005454:	40008000 	.word	0x40008000
 8005458:	40013800 	.word	0x40013800
 800545c:	40021000 	.word	0x40021000
 8005460:	40004400 	.word	0x40004400
 8005464:	40004800 	.word	0x40004800
 8005468:	40004c00 	.word	0x40004c00
 800546c:	40005000 	.word	0x40005000
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005470:	f7fe fa04 	bl	800387c <HAL_RCC_GetPCLK1Freq>
 8005474:	4602      	mov	r2, r0
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547a:	2b00      	cmp	r3, #0
 800547c:	d044      	beq.n	8005508 <UART_SetConfig+0x3a8>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	2b01      	cmp	r3, #1
 8005484:	d03e      	beq.n	8005504 <UART_SetConfig+0x3a4>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	2b02      	cmp	r3, #2
 800548c:	d038      	beq.n	8005500 <UART_SetConfig+0x3a0>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	2b03      	cmp	r3, #3
 8005494:	d032      	beq.n	80054fc <UART_SetConfig+0x39c>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	2b04      	cmp	r3, #4
 800549c:	d02c      	beq.n	80054f8 <UART_SetConfig+0x398>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	2b05      	cmp	r3, #5
 80054a4:	d026      	beq.n	80054f4 <UART_SetConfig+0x394>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	2b06      	cmp	r3, #6
 80054ac:	d020      	beq.n	80054f0 <UART_SetConfig+0x390>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	2b07      	cmp	r3, #7
 80054b4:	d01a      	beq.n	80054ec <UART_SetConfig+0x38c>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	2b08      	cmp	r3, #8
 80054bc:	d014      	beq.n	80054e8 <UART_SetConfig+0x388>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	2b09      	cmp	r3, #9
 80054c4:	d00e      	beq.n	80054e4 <UART_SetConfig+0x384>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	2b0a      	cmp	r3, #10
 80054cc:	d008      	beq.n	80054e0 <UART_SetConfig+0x380>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	2b0b      	cmp	r3, #11
 80054d4:	d102      	bne.n	80054dc <UART_SetConfig+0x37c>
 80054d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054da:	e016      	b.n	800550a <UART_SetConfig+0x3aa>
 80054dc:	2301      	movs	r3, #1
 80054de:	e014      	b.n	800550a <UART_SetConfig+0x3aa>
 80054e0:	2380      	movs	r3, #128	; 0x80
 80054e2:	e012      	b.n	800550a <UART_SetConfig+0x3aa>
 80054e4:	2340      	movs	r3, #64	; 0x40
 80054e6:	e010      	b.n	800550a <UART_SetConfig+0x3aa>
 80054e8:	2320      	movs	r3, #32
 80054ea:	e00e      	b.n	800550a <UART_SetConfig+0x3aa>
 80054ec:	2310      	movs	r3, #16
 80054ee:	e00c      	b.n	800550a <UART_SetConfig+0x3aa>
 80054f0:	230c      	movs	r3, #12
 80054f2:	e00a      	b.n	800550a <UART_SetConfig+0x3aa>
 80054f4:	230a      	movs	r3, #10
 80054f6:	e008      	b.n	800550a <UART_SetConfig+0x3aa>
 80054f8:	2308      	movs	r3, #8
 80054fa:	e006      	b.n	800550a <UART_SetConfig+0x3aa>
 80054fc:	2306      	movs	r3, #6
 80054fe:	e004      	b.n	800550a <UART_SetConfig+0x3aa>
 8005500:	2304      	movs	r3, #4
 8005502:	e002      	b.n	800550a <UART_SetConfig+0x3aa>
 8005504:	2302      	movs	r3, #2
 8005506:	e000      	b.n	800550a <UART_SetConfig+0x3aa>
 8005508:	2301      	movs	r3, #1
 800550a:	fbb2 f3f3 	udiv	r3, r2, r3
 800550e:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8005510:	e0f6      	b.n	8005700 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	2b00      	cmp	r3, #0
 8005518:	d044      	beq.n	80055a4 <UART_SetConfig+0x444>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	2b01      	cmp	r3, #1
 8005520:	d03e      	beq.n	80055a0 <UART_SetConfig+0x440>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	2b02      	cmp	r3, #2
 8005528:	d038      	beq.n	800559c <UART_SetConfig+0x43c>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	2b03      	cmp	r3, #3
 8005530:	d032      	beq.n	8005598 <UART_SetConfig+0x438>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	2b04      	cmp	r3, #4
 8005538:	d02c      	beq.n	8005594 <UART_SetConfig+0x434>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	2b05      	cmp	r3, #5
 8005540:	d026      	beq.n	8005590 <UART_SetConfig+0x430>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	2b06      	cmp	r3, #6
 8005548:	d020      	beq.n	800558c <UART_SetConfig+0x42c>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	2b07      	cmp	r3, #7
 8005550:	d01a      	beq.n	8005588 <UART_SetConfig+0x428>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	2b08      	cmp	r3, #8
 8005558:	d014      	beq.n	8005584 <UART_SetConfig+0x424>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	2b09      	cmp	r3, #9
 8005560:	d00e      	beq.n	8005580 <UART_SetConfig+0x420>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	2b0a      	cmp	r3, #10
 8005568:	d008      	beq.n	800557c <UART_SetConfig+0x41c>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	2b0b      	cmp	r3, #11
 8005570:	d102      	bne.n	8005578 <UART_SetConfig+0x418>
 8005572:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005576:	e016      	b.n	80055a6 <UART_SetConfig+0x446>
 8005578:	4ba1      	ldr	r3, [pc, #644]	; (8005800 <UART_SetConfig+0x6a0>)
 800557a:	e014      	b.n	80055a6 <UART_SetConfig+0x446>
 800557c:	4ba1      	ldr	r3, [pc, #644]	; (8005804 <UART_SetConfig+0x6a4>)
 800557e:	e012      	b.n	80055a6 <UART_SetConfig+0x446>
 8005580:	4ba1      	ldr	r3, [pc, #644]	; (8005808 <UART_SetConfig+0x6a8>)
 8005582:	e010      	b.n	80055a6 <UART_SetConfig+0x446>
 8005584:	4ba1      	ldr	r3, [pc, #644]	; (800580c <UART_SetConfig+0x6ac>)
 8005586:	e00e      	b.n	80055a6 <UART_SetConfig+0x446>
 8005588:	4ba1      	ldr	r3, [pc, #644]	; (8005810 <UART_SetConfig+0x6b0>)
 800558a:	e00c      	b.n	80055a6 <UART_SetConfig+0x446>
 800558c:	4ba1      	ldr	r3, [pc, #644]	; (8005814 <UART_SetConfig+0x6b4>)
 800558e:	e00a      	b.n	80055a6 <UART_SetConfig+0x446>
 8005590:	4ba1      	ldr	r3, [pc, #644]	; (8005818 <UART_SetConfig+0x6b8>)
 8005592:	e008      	b.n	80055a6 <UART_SetConfig+0x446>
 8005594:	4ba1      	ldr	r3, [pc, #644]	; (800581c <UART_SetConfig+0x6bc>)
 8005596:	e006      	b.n	80055a6 <UART_SetConfig+0x446>
 8005598:	4ba1      	ldr	r3, [pc, #644]	; (8005820 <UART_SetConfig+0x6c0>)
 800559a:	e004      	b.n	80055a6 <UART_SetConfig+0x446>
 800559c:	4ba1      	ldr	r3, [pc, #644]	; (8005824 <UART_SetConfig+0x6c4>)
 800559e:	e002      	b.n	80055a6 <UART_SetConfig+0x446>
 80055a0:	4ba1      	ldr	r3, [pc, #644]	; (8005828 <UART_SetConfig+0x6c8>)
 80055a2:	e000      	b.n	80055a6 <UART_SetConfig+0x446>
 80055a4:	4b96      	ldr	r3, [pc, #600]	; (8005800 <UART_SetConfig+0x6a0>)
 80055a6:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 80055a8:	e0aa      	b.n	8005700 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80055aa:	f7fe f8d1 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 80055ae:	4602      	mov	r2, r0
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d044      	beq.n	8005642 <UART_SetConfig+0x4e2>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d03e      	beq.n	800563e <UART_SetConfig+0x4de>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d038      	beq.n	800563a <UART_SetConfig+0x4da>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d032      	beq.n	8005636 <UART_SetConfig+0x4d6>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d02c      	beq.n	8005632 <UART_SetConfig+0x4d2>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	2b05      	cmp	r3, #5
 80055de:	d026      	beq.n	800562e <UART_SetConfig+0x4ce>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	2b06      	cmp	r3, #6
 80055e6:	d020      	beq.n	800562a <UART_SetConfig+0x4ca>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	2b07      	cmp	r3, #7
 80055ee:	d01a      	beq.n	8005626 <UART_SetConfig+0x4c6>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	d014      	beq.n	8005622 <UART_SetConfig+0x4c2>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	2b09      	cmp	r3, #9
 80055fe:	d00e      	beq.n	800561e <UART_SetConfig+0x4be>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	2b0a      	cmp	r3, #10
 8005606:	d008      	beq.n	800561a <UART_SetConfig+0x4ba>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	2b0b      	cmp	r3, #11
 800560e:	d102      	bne.n	8005616 <UART_SetConfig+0x4b6>
 8005610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005614:	e016      	b.n	8005644 <UART_SetConfig+0x4e4>
 8005616:	2301      	movs	r3, #1
 8005618:	e014      	b.n	8005644 <UART_SetConfig+0x4e4>
 800561a:	2380      	movs	r3, #128	; 0x80
 800561c:	e012      	b.n	8005644 <UART_SetConfig+0x4e4>
 800561e:	2340      	movs	r3, #64	; 0x40
 8005620:	e010      	b.n	8005644 <UART_SetConfig+0x4e4>
 8005622:	2320      	movs	r3, #32
 8005624:	e00e      	b.n	8005644 <UART_SetConfig+0x4e4>
 8005626:	2310      	movs	r3, #16
 8005628:	e00c      	b.n	8005644 <UART_SetConfig+0x4e4>
 800562a:	230c      	movs	r3, #12
 800562c:	e00a      	b.n	8005644 <UART_SetConfig+0x4e4>
 800562e:	230a      	movs	r3, #10
 8005630:	e008      	b.n	8005644 <UART_SetConfig+0x4e4>
 8005632:	2308      	movs	r3, #8
 8005634:	e006      	b.n	8005644 <UART_SetConfig+0x4e4>
 8005636:	2306      	movs	r3, #6
 8005638:	e004      	b.n	8005644 <UART_SetConfig+0x4e4>
 800563a:	2304      	movs	r3, #4
 800563c:	e002      	b.n	8005644 <UART_SetConfig+0x4e4>
 800563e:	2302      	movs	r3, #2
 8005640:	e000      	b.n	8005644 <UART_SetConfig+0x4e4>
 8005642:	2301      	movs	r3, #1
 8005644:	fbb2 f3f3 	udiv	r3, r2, r3
 8005648:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 800564a:	e059      	b.n	8005700 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	2b00      	cmp	r3, #0
 8005652:	d04e      	beq.n	80056f2 <UART_SetConfig+0x592>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	2b01      	cmp	r3, #1
 800565a:	d047      	beq.n	80056ec <UART_SetConfig+0x58c>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	2b02      	cmp	r3, #2
 8005662:	d040      	beq.n	80056e6 <UART_SetConfig+0x586>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	2b03      	cmp	r3, #3
 800566a:	d039      	beq.n	80056e0 <UART_SetConfig+0x580>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	2b04      	cmp	r3, #4
 8005672:	d032      	beq.n	80056da <UART_SetConfig+0x57a>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	2b05      	cmp	r3, #5
 800567a:	d02b      	beq.n	80056d4 <UART_SetConfig+0x574>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	2b06      	cmp	r3, #6
 8005682:	d024      	beq.n	80056ce <UART_SetConfig+0x56e>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	2b07      	cmp	r3, #7
 800568a:	d01d      	beq.n	80056c8 <UART_SetConfig+0x568>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	2b08      	cmp	r3, #8
 8005692:	d016      	beq.n	80056c2 <UART_SetConfig+0x562>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	2b09      	cmp	r3, #9
 800569a:	d00f      	beq.n	80056bc <UART_SetConfig+0x55c>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	2b0a      	cmp	r3, #10
 80056a2:	d008      	beq.n	80056b6 <UART_SetConfig+0x556>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	2b0b      	cmp	r3, #11
 80056aa:	d101      	bne.n	80056b0 <UART_SetConfig+0x550>
 80056ac:	2380      	movs	r3, #128	; 0x80
 80056ae:	e022      	b.n	80056f6 <UART_SetConfig+0x596>
 80056b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056b4:	e01f      	b.n	80056f6 <UART_SetConfig+0x596>
 80056b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056ba:	e01c      	b.n	80056f6 <UART_SetConfig+0x596>
 80056bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056c0:	e019      	b.n	80056f6 <UART_SetConfig+0x596>
 80056c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056c6:	e016      	b.n	80056f6 <UART_SetConfig+0x596>
 80056c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056cc:	e013      	b.n	80056f6 <UART_SetConfig+0x596>
 80056ce:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80056d2:	e010      	b.n	80056f6 <UART_SetConfig+0x596>
 80056d4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80056d8:	e00d      	b.n	80056f6 <UART_SetConfig+0x596>
 80056da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056de:	e00a      	b.n	80056f6 <UART_SetConfig+0x596>
 80056e0:	f241 5355 	movw	r3, #5461	; 0x1555
 80056e4:	e007      	b.n	80056f6 <UART_SetConfig+0x596>
 80056e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056ea:	e004      	b.n	80056f6 <UART_SetConfig+0x596>
 80056ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056f0:	e001      	b.n	80056f6 <UART_SetConfig+0x596>
 80056f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056f6:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 80056f8:	e002      	b.n	8005700 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	74fb      	strb	r3, [r7, #19]
        break;
 80056fe:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 86c2 	beq.w	800648c <UART_SetConfig+0x132c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	4613      	mov	r3, r2
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	4413      	add	r3, r2
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	429a      	cmp	r2, r3
 8005716:	d305      	bcc.n	8005724 <UART_SetConfig+0x5c4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	429a      	cmp	r2, r3
 8005722:	d903      	bls.n	800572c <UART_SetConfig+0x5cc>
      {
        ret = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	74fb      	strb	r3, [r7, #19]
 8005728:	f000 beb0 	b.w	800648c <UART_SetConfig+0x132c>
      }
      else
      {
        switch (clocksource)
 800572c:	7efb      	ldrb	r3, [r7, #27]
 800572e:	2b08      	cmp	r3, #8
 8005730:	f200 828c 	bhi.w	8005c4c <UART_SetConfig+0xaec>
 8005734:	a201      	add	r2, pc, #4	; (adr r2, 800573c <UART_SetConfig+0x5dc>)
 8005736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573a:	bf00      	nop
 800573c:	08005761 	.word	0x08005761
 8005740:	08005c4d 	.word	0x08005c4d
 8005744:	080058cb 	.word	0x080058cb
 8005748:	08005c4d 	.word	0x08005c4d
 800574c:	080059c1 	.word	0x080059c1
 8005750:	08005c4d 	.word	0x08005c4d
 8005754:	08005c4d 	.word	0x08005c4d
 8005758:	08005c4d 	.word	0x08005c4d
 800575c:	08005afd 	.word	0x08005afd
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005760:	f7fe f88c 	bl	800387c <HAL_RCC_GetPCLK1Freq>
 8005764:	4603      	mov	r3, r0
 8005766:	4618      	mov	r0, r3
 8005768:	f04f 0100 	mov.w	r1, #0
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	2b00      	cmp	r3, #0
 8005772:	d07e      	beq.n	8005872 <UART_SetConfig+0x712>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	2b01      	cmp	r3, #1
 800577a:	d075      	beq.n	8005868 <UART_SetConfig+0x708>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	2b02      	cmp	r3, #2
 8005782:	d06c      	beq.n	800585e <UART_SetConfig+0x6fe>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	2b03      	cmp	r3, #3
 800578a:	d063      	beq.n	8005854 <UART_SetConfig+0x6f4>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	2b04      	cmp	r3, #4
 8005792:	d05a      	beq.n	800584a <UART_SetConfig+0x6ea>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	2b05      	cmp	r3, #5
 800579a:	d051      	beq.n	8005840 <UART_SetConfig+0x6e0>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	2b06      	cmp	r3, #6
 80057a2:	d048      	beq.n	8005836 <UART_SetConfig+0x6d6>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	2b07      	cmp	r3, #7
 80057aa:	d03f      	beq.n	800582c <UART_SetConfig+0x6cc>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d01f      	beq.n	80057f4 <UART_SetConfig+0x694>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	2b09      	cmp	r3, #9
 80057ba:	d016      	beq.n	80057ea <UART_SetConfig+0x68a>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	2b0a      	cmp	r3, #10
 80057c2:	d00d      	beq.n	80057e0 <UART_SetConfig+0x680>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	2b0b      	cmp	r3, #11
 80057ca:	d104      	bne.n	80057d6 <UART_SetConfig+0x676>
 80057cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057d0:	f04f 0400 	mov.w	r4, #0
 80057d4:	e051      	b.n	800587a <UART_SetConfig+0x71a>
 80057d6:	f04f 0301 	mov.w	r3, #1
 80057da:	f04f 0400 	mov.w	r4, #0
 80057de:	e04c      	b.n	800587a <UART_SetConfig+0x71a>
 80057e0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80057e4:	f04f 0400 	mov.w	r4, #0
 80057e8:	e047      	b.n	800587a <UART_SetConfig+0x71a>
 80057ea:	f04f 0340 	mov.w	r3, #64	; 0x40
 80057ee:	f04f 0400 	mov.w	r4, #0
 80057f2:	e042      	b.n	800587a <UART_SetConfig+0x71a>
 80057f4:	f04f 0320 	mov.w	r3, #32
 80057f8:	f04f 0400 	mov.w	r4, #0
 80057fc:	e03d      	b.n	800587a <UART_SetConfig+0x71a>
 80057fe:	bf00      	nop
 8005800:	00f42400 	.word	0x00f42400
 8005804:	0001e848 	.word	0x0001e848
 8005808:	0003d090 	.word	0x0003d090
 800580c:	0007a120 	.word	0x0007a120
 8005810:	000f4240 	.word	0x000f4240
 8005814:	00145855 	.word	0x00145855
 8005818:	00186a00 	.word	0x00186a00
 800581c:	001e8480 	.word	0x001e8480
 8005820:	0028b0aa 	.word	0x0028b0aa
 8005824:	003d0900 	.word	0x003d0900
 8005828:	007a1200 	.word	0x007a1200
 800582c:	f04f 0310 	mov.w	r3, #16
 8005830:	f04f 0400 	mov.w	r4, #0
 8005834:	e021      	b.n	800587a <UART_SetConfig+0x71a>
 8005836:	f04f 030c 	mov.w	r3, #12
 800583a:	f04f 0400 	mov.w	r4, #0
 800583e:	e01c      	b.n	800587a <UART_SetConfig+0x71a>
 8005840:	f04f 030a 	mov.w	r3, #10
 8005844:	f04f 0400 	mov.w	r4, #0
 8005848:	e017      	b.n	800587a <UART_SetConfig+0x71a>
 800584a:	f04f 0308 	mov.w	r3, #8
 800584e:	f04f 0400 	mov.w	r4, #0
 8005852:	e012      	b.n	800587a <UART_SetConfig+0x71a>
 8005854:	f04f 0306 	mov.w	r3, #6
 8005858:	f04f 0400 	mov.w	r4, #0
 800585c:	e00d      	b.n	800587a <UART_SetConfig+0x71a>
 800585e:	f04f 0304 	mov.w	r3, #4
 8005862:	f04f 0400 	mov.w	r4, #0
 8005866:	e008      	b.n	800587a <UART_SetConfig+0x71a>
 8005868:	f04f 0302 	mov.w	r3, #2
 800586c:	f04f 0400 	mov.w	r4, #0
 8005870:	e003      	b.n	800587a <UART_SetConfig+0x71a>
 8005872:	f04f 0301 	mov.w	r3, #1
 8005876:	f04f 0400 	mov.w	r4, #0
 800587a:	461a      	mov	r2, r3
 800587c:	4623      	mov	r3, r4
 800587e:	f7fa fcbf 	bl	8000200 <__aeabi_uldivmod>
 8005882:	4603      	mov	r3, r0
 8005884:	460c      	mov	r4, r1
 8005886:	4619      	mov	r1, r3
 8005888:	4622      	mov	r2, r4
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	f04f 0400 	mov.w	r4, #0
 8005892:	0214      	lsls	r4, r2, #8
 8005894:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005898:	020b      	lsls	r3, r1, #8
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	6852      	ldr	r2, [r2, #4]
 800589e:	0852      	lsrs	r2, r2, #1
 80058a0:	4611      	mov	r1, r2
 80058a2:	f04f 0200 	mov.w	r2, #0
 80058a6:	eb13 0b01 	adds.w	fp, r3, r1
 80058aa:	eb44 0c02 	adc.w	ip, r4, r2
 80058ae:	4658      	mov	r0, fp
 80058b0:	4661      	mov	r1, ip
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f04f 0400 	mov.w	r4, #0
 80058ba:	461a      	mov	r2, r3
 80058bc:	4623      	mov	r3, r4
 80058be:	f7fa fc9f 	bl	8000200 <__aeabi_uldivmod>
 80058c2:	4603      	mov	r3, r0
 80058c4:	460c      	mov	r4, r1
 80058c6:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 80058c8:	e1c3      	b.n	8005c52 <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d05b      	beq.n	800598a <UART_SetConfig+0x82a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d053      	beq.n	8005982 <UART_SetConfig+0x822>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d04b      	beq.n	800597a <UART_SetConfig+0x81a>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	d043      	beq.n	8005972 <UART_SetConfig+0x812>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d03b      	beq.n	800596a <UART_SetConfig+0x80a>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	2b05      	cmp	r3, #5
 80058f8:	d033      	beq.n	8005962 <UART_SetConfig+0x802>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	2b06      	cmp	r3, #6
 8005900:	d02b      	beq.n	800595a <UART_SetConfig+0x7fa>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	2b07      	cmp	r3, #7
 8005908:	d023      	beq.n	8005952 <UART_SetConfig+0x7f2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	2b08      	cmp	r3, #8
 8005910:	d01b      	beq.n	800594a <UART_SetConfig+0x7ea>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	2b09      	cmp	r3, #9
 8005918:	d013      	beq.n	8005942 <UART_SetConfig+0x7e2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	2b0a      	cmp	r3, #10
 8005920:	d00b      	beq.n	800593a <UART_SetConfig+0x7da>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	2b0b      	cmp	r3, #11
 8005928:	d103      	bne.n	8005932 <UART_SetConfig+0x7d2>
 800592a:	4bad      	ldr	r3, [pc, #692]	; (8005be0 <UART_SetConfig+0xa80>)
 800592c:	f04f 0400 	mov.w	r4, #0
 8005930:	e02e      	b.n	8005990 <UART_SetConfig+0x830>
 8005932:	4bac      	ldr	r3, [pc, #688]	; (8005be4 <UART_SetConfig+0xa84>)
 8005934:	f04f 0400 	mov.w	r4, #0
 8005938:	e02a      	b.n	8005990 <UART_SetConfig+0x830>
 800593a:	4bab      	ldr	r3, [pc, #684]	; (8005be8 <UART_SetConfig+0xa88>)
 800593c:	f04f 0400 	mov.w	r4, #0
 8005940:	e026      	b.n	8005990 <UART_SetConfig+0x830>
 8005942:	4baa      	ldr	r3, [pc, #680]	; (8005bec <UART_SetConfig+0xa8c>)
 8005944:	f04f 0400 	mov.w	r4, #0
 8005948:	e022      	b.n	8005990 <UART_SetConfig+0x830>
 800594a:	4ba9      	ldr	r3, [pc, #676]	; (8005bf0 <UART_SetConfig+0xa90>)
 800594c:	f04f 0400 	mov.w	r4, #0
 8005950:	e01e      	b.n	8005990 <UART_SetConfig+0x830>
 8005952:	4ba8      	ldr	r3, [pc, #672]	; (8005bf4 <UART_SetConfig+0xa94>)
 8005954:	f04f 0400 	mov.w	r4, #0
 8005958:	e01a      	b.n	8005990 <UART_SetConfig+0x830>
 800595a:	a49d      	add	r4, pc, #628	; (adr r4, 8005bd0 <UART_SetConfig+0xa70>)
 800595c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005960:	e016      	b.n	8005990 <UART_SetConfig+0x830>
 8005962:	4ba5      	ldr	r3, [pc, #660]	; (8005bf8 <UART_SetConfig+0xa98>)
 8005964:	f04f 0400 	mov.w	r4, #0
 8005968:	e012      	b.n	8005990 <UART_SetConfig+0x830>
 800596a:	4ba4      	ldr	r3, [pc, #656]	; (8005bfc <UART_SetConfig+0xa9c>)
 800596c:	f04f 0400 	mov.w	r4, #0
 8005970:	e00e      	b.n	8005990 <UART_SetConfig+0x830>
 8005972:	a499      	add	r4, pc, #612	; (adr r4, 8005bd8 <UART_SetConfig+0xa78>)
 8005974:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005978:	e00a      	b.n	8005990 <UART_SetConfig+0x830>
 800597a:	4ba1      	ldr	r3, [pc, #644]	; (8005c00 <UART_SetConfig+0xaa0>)
 800597c:	f04f 0400 	mov.w	r4, #0
 8005980:	e006      	b.n	8005990 <UART_SetConfig+0x830>
 8005982:	4ba0      	ldr	r3, [pc, #640]	; (8005c04 <UART_SetConfig+0xaa4>)
 8005984:	f04f 0400 	mov.w	r4, #0
 8005988:	e002      	b.n	8005990 <UART_SetConfig+0x830>
 800598a:	4b96      	ldr	r3, [pc, #600]	; (8005be4 <UART_SetConfig+0xa84>)
 800598c:	f04f 0400 	mov.w	r4, #0
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6852      	ldr	r2, [r2, #4]
 8005994:	0852      	lsrs	r2, r2, #1
 8005996:	4611      	mov	r1, r2
 8005998:	f04f 0200 	mov.w	r2, #0
 800599c:	eb13 0b01 	adds.w	fp, r3, r1
 80059a0:	eb44 0c02 	adc.w	ip, r4, r2
 80059a4:	4658      	mov	r0, fp
 80059a6:	4661      	mov	r1, ip
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f04f 0400 	mov.w	r4, #0
 80059b0:	461a      	mov	r2, r3
 80059b2:	4623      	mov	r3, r4
 80059b4:	f7fa fc24 	bl	8000200 <__aeabi_uldivmod>
 80059b8:	4603      	mov	r3, r0
 80059ba:	460c      	mov	r4, r1
 80059bc:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 80059be:	e148      	b.n	8005c52 <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059c0:	f7fd fec6 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 80059c4:	4603      	mov	r3, r0
 80059c6:	4618      	mov	r0, r3
 80059c8:	f04f 0100 	mov.w	r1, #0
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d067      	beq.n	8005aa4 <UART_SetConfig+0x944>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d05e      	beq.n	8005a9a <UART_SetConfig+0x93a>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d055      	beq.n	8005a90 <UART_SetConfig+0x930>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	2b03      	cmp	r3, #3
 80059ea:	d04c      	beq.n	8005a86 <UART_SetConfig+0x926>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	2b04      	cmp	r3, #4
 80059f2:	d043      	beq.n	8005a7c <UART_SetConfig+0x91c>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	2b05      	cmp	r3, #5
 80059fa:	d03a      	beq.n	8005a72 <UART_SetConfig+0x912>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	2b06      	cmp	r3, #6
 8005a02:	d031      	beq.n	8005a68 <UART_SetConfig+0x908>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	2b07      	cmp	r3, #7
 8005a0a:	d028      	beq.n	8005a5e <UART_SetConfig+0x8fe>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d01f      	beq.n	8005a54 <UART_SetConfig+0x8f4>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	2b09      	cmp	r3, #9
 8005a1a:	d016      	beq.n	8005a4a <UART_SetConfig+0x8ea>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a20:	2b0a      	cmp	r3, #10
 8005a22:	d00d      	beq.n	8005a40 <UART_SetConfig+0x8e0>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	2b0b      	cmp	r3, #11
 8005a2a:	d104      	bne.n	8005a36 <UART_SetConfig+0x8d6>
 8005a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a30:	f04f 0400 	mov.w	r4, #0
 8005a34:	e03a      	b.n	8005aac <UART_SetConfig+0x94c>
 8005a36:	f04f 0301 	mov.w	r3, #1
 8005a3a:	f04f 0400 	mov.w	r4, #0
 8005a3e:	e035      	b.n	8005aac <UART_SetConfig+0x94c>
 8005a40:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005a44:	f04f 0400 	mov.w	r4, #0
 8005a48:	e030      	b.n	8005aac <UART_SetConfig+0x94c>
 8005a4a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005a4e:	f04f 0400 	mov.w	r4, #0
 8005a52:	e02b      	b.n	8005aac <UART_SetConfig+0x94c>
 8005a54:	f04f 0320 	mov.w	r3, #32
 8005a58:	f04f 0400 	mov.w	r4, #0
 8005a5c:	e026      	b.n	8005aac <UART_SetConfig+0x94c>
 8005a5e:	f04f 0310 	mov.w	r3, #16
 8005a62:	f04f 0400 	mov.w	r4, #0
 8005a66:	e021      	b.n	8005aac <UART_SetConfig+0x94c>
 8005a68:	f04f 030c 	mov.w	r3, #12
 8005a6c:	f04f 0400 	mov.w	r4, #0
 8005a70:	e01c      	b.n	8005aac <UART_SetConfig+0x94c>
 8005a72:	f04f 030a 	mov.w	r3, #10
 8005a76:	f04f 0400 	mov.w	r4, #0
 8005a7a:	e017      	b.n	8005aac <UART_SetConfig+0x94c>
 8005a7c:	f04f 0308 	mov.w	r3, #8
 8005a80:	f04f 0400 	mov.w	r4, #0
 8005a84:	e012      	b.n	8005aac <UART_SetConfig+0x94c>
 8005a86:	f04f 0306 	mov.w	r3, #6
 8005a8a:	f04f 0400 	mov.w	r4, #0
 8005a8e:	e00d      	b.n	8005aac <UART_SetConfig+0x94c>
 8005a90:	f04f 0304 	mov.w	r3, #4
 8005a94:	f04f 0400 	mov.w	r4, #0
 8005a98:	e008      	b.n	8005aac <UART_SetConfig+0x94c>
 8005a9a:	f04f 0302 	mov.w	r3, #2
 8005a9e:	f04f 0400 	mov.w	r4, #0
 8005aa2:	e003      	b.n	8005aac <UART_SetConfig+0x94c>
 8005aa4:	f04f 0301 	mov.w	r3, #1
 8005aa8:	f04f 0400 	mov.w	r4, #0
 8005aac:	461a      	mov	r2, r3
 8005aae:	4623      	mov	r3, r4
 8005ab0:	f7fa fba6 	bl	8000200 <__aeabi_uldivmod>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	460c      	mov	r4, r1
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4622      	mov	r2, r4
 8005abc:	f04f 0300 	mov.w	r3, #0
 8005ac0:	f04f 0400 	mov.w	r4, #0
 8005ac4:	0214      	lsls	r4, r2, #8
 8005ac6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005aca:	020b      	lsls	r3, r1, #8
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6852      	ldr	r2, [r2, #4]
 8005ad0:	0852      	lsrs	r2, r2, #1
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	eb13 0b01 	adds.w	fp, r3, r1
 8005adc:	eb44 0c02 	adc.w	ip, r4, r2
 8005ae0:	4658      	mov	r0, fp
 8005ae2:	4661      	mov	r1, ip
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f04f 0400 	mov.w	r4, #0
 8005aec:	461a      	mov	r2, r3
 8005aee:	4623      	mov	r3, r4
 8005af0:	f7fa fb86 	bl	8000200 <__aeabi_uldivmod>
 8005af4:	4603      	mov	r3, r0
 8005af6:	460c      	mov	r4, r1
 8005af8:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8005afa:	e0aa      	b.n	8005c52 <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 8087 	beq.w	8005c14 <UART_SetConfig+0xab4>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d05b      	beq.n	8005bc6 <UART_SetConfig+0xa66>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d052      	beq.n	8005bbc <UART_SetConfig+0xa5c>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	2b03      	cmp	r3, #3
 8005b1c:	d04a      	beq.n	8005bb4 <UART_SetConfig+0xa54>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d041      	beq.n	8005baa <UART_SetConfig+0xa4a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	2b05      	cmp	r3, #5
 8005b2c:	d039      	beq.n	8005ba2 <UART_SetConfig+0xa42>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	2b06      	cmp	r3, #6
 8005b34:	d031      	beq.n	8005b9a <UART_SetConfig+0xa3a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	2b07      	cmp	r3, #7
 8005b3c:	d028      	beq.n	8005b90 <UART_SetConfig+0xa30>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	2b08      	cmp	r3, #8
 8005b44:	d01f      	beq.n	8005b86 <UART_SetConfig+0xa26>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	2b09      	cmp	r3, #9
 8005b4c:	d016      	beq.n	8005b7c <UART_SetConfig+0xa1c>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	2b0a      	cmp	r3, #10
 8005b54:	d00d      	beq.n	8005b72 <UART_SetConfig+0xa12>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	2b0b      	cmp	r3, #11
 8005b5c:	d104      	bne.n	8005b68 <UART_SetConfig+0xa08>
 8005b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b62:	f04f 0400 	mov.w	r4, #0
 8005b66:	e059      	b.n	8005c1c <UART_SetConfig+0xabc>
 8005b68:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005b6c:	f04f 0400 	mov.w	r4, #0
 8005b70:	e054      	b.n	8005c1c <UART_SetConfig+0xabc>
 8005b72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b76:	f04f 0400 	mov.w	r4, #0
 8005b7a:	e04f      	b.n	8005c1c <UART_SetConfig+0xabc>
 8005b7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b80:	f04f 0400 	mov.w	r4, #0
 8005b84:	e04a      	b.n	8005c1c <UART_SetConfig+0xabc>
 8005b86:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005b8a:	f04f 0400 	mov.w	r4, #0
 8005b8e:	e045      	b.n	8005c1c <UART_SetConfig+0xabc>
 8005b90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005b94:	f04f 0400 	mov.w	r4, #0
 8005b98:	e040      	b.n	8005c1c <UART_SetConfig+0xabc>
 8005b9a:	4b1b      	ldr	r3, [pc, #108]	; (8005c08 <UART_SetConfig+0xaa8>)
 8005b9c:	f04f 0400 	mov.w	r4, #0
 8005ba0:	e03c      	b.n	8005c1c <UART_SetConfig+0xabc>
 8005ba2:	4b1a      	ldr	r3, [pc, #104]	; (8005c0c <UART_SetConfig+0xaac>)
 8005ba4:	f04f 0400 	mov.w	r4, #0
 8005ba8:	e038      	b.n	8005c1c <UART_SetConfig+0xabc>
 8005baa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005bae:	f04f 0400 	mov.w	r4, #0
 8005bb2:	e033      	b.n	8005c1c <UART_SetConfig+0xabc>
 8005bb4:	4b16      	ldr	r3, [pc, #88]	; (8005c10 <UART_SetConfig+0xab0>)
 8005bb6:	f04f 0400 	mov.w	r4, #0
 8005bba:	e02f      	b.n	8005c1c <UART_SetConfig+0xabc>
 8005bbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005bc0:	f04f 0400 	mov.w	r4, #0
 8005bc4:	e02a      	b.n	8005c1c <UART_SetConfig+0xabc>
 8005bc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005bca:	f04f 0400 	mov.w	r4, #0
 8005bce:	e025      	b.n	8005c1c <UART_SetConfig+0xabc>
 8005bd0:	14585500 	.word	0x14585500
 8005bd4:	00000000 	.word	0x00000000
 8005bd8:	28b0aa00 	.word	0x28b0aa00
 8005bdc:	00000000 	.word	0x00000000
 8005be0:	00f42400 	.word	0x00f42400
 8005be4:	f4240000 	.word	0xf4240000
 8005be8:	01e84800 	.word	0x01e84800
 8005bec:	03d09000 	.word	0x03d09000
 8005bf0:	07a12000 	.word	0x07a12000
 8005bf4:	0f424000 	.word	0x0f424000
 8005bf8:	186a0000 	.word	0x186a0000
 8005bfc:	1e848000 	.word	0x1e848000
 8005c00:	3d090000 	.word	0x3d090000
 8005c04:	7a120000 	.word	0x7a120000
 8005c08:	000aaa00 	.word	0x000aaa00
 8005c0c:	000ccc00 	.word	0x000ccc00
 8005c10:	00155500 	.word	0x00155500
 8005c14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005c18:	f04f 0400 	mov.w	r4, #0
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6852      	ldr	r2, [r2, #4]
 8005c20:	0852      	lsrs	r2, r2, #1
 8005c22:	4611      	mov	r1, r2
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	eb13 0b01 	adds.w	fp, r3, r1
 8005c2c:	eb44 0c02 	adc.w	ip, r4, r2
 8005c30:	4658      	mov	r0, fp
 8005c32:	4661      	mov	r1, ip
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f04f 0400 	mov.w	r4, #0
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	4623      	mov	r3, r4
 8005c40:	f7fa fade 	bl	8000200 <__aeabi_uldivmod>
 8005c44:	4603      	mov	r3, r0
 8005c46:	460c      	mov	r4, r1
 8005c48:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8005c4a:	e002      	b.n	8005c52 <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	74fb      	strb	r3, [r7, #19]
            break;
 8005c50:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c58:	d309      	bcc.n	8005c6e <UART_SetConfig+0xb0e>
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c60:	d205      	bcs.n	8005c6e <UART_SetConfig+0xb0e>
        {
          huart->Instance->BRR = usartdiv;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	60da      	str	r2, [r3, #12]
 8005c6a:	f000 bc0f 	b.w	800648c <UART_SetConfig+0x132c>
        }
        else
        {
          ret = HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	74fb      	strb	r3, [r7, #19]
 8005c72:	f000 bc0b 	b.w	800648c <UART_SetConfig+0x132c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c7e:	f040 81ff 	bne.w	8006080 <UART_SetConfig+0xf20>
  {
    switch (clocksource)
 8005c82:	7efb      	ldrb	r3, [r7, #27]
 8005c84:	2b08      	cmp	r3, #8
 8005c86:	f200 81db 	bhi.w	8006040 <UART_SetConfig+0xee0>
 8005c8a:	a201      	add	r2, pc, #4	; (adr r2, 8005c90 <UART_SetConfig+0xb30>)
 8005c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c90:	08005cb5 	.word	0x08005cb5
 8005c94:	08005d6b 	.word	0x08005d6b
 8005c98:	08005e21 	.word	0x08005e21
 8005c9c:	08006041 	.word	0x08006041
 8005ca0:	08005ec9 	.word	0x08005ec9
 8005ca4:	08006041 	.word	0x08006041
 8005ca8:	08006041 	.word	0x08006041
 8005cac:	08006041 	.word	0x08006041
 8005cb0:	08005f7f 	.word	0x08005f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cb4:	f7fd fde2 	bl	800387c <HAL_RCC_GetPCLK1Freq>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d044      	beq.n	8005d4c <UART_SetConfig+0xbec>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d03e      	beq.n	8005d48 <UART_SetConfig+0xbe8>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d038      	beq.n	8005d44 <UART_SetConfig+0xbe4>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d032      	beq.n	8005d40 <UART_SetConfig+0xbe0>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	d02c      	beq.n	8005d3c <UART_SetConfig+0xbdc>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	2b05      	cmp	r3, #5
 8005ce8:	d026      	beq.n	8005d38 <UART_SetConfig+0xbd8>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	2b06      	cmp	r3, #6
 8005cf0:	d020      	beq.n	8005d34 <UART_SetConfig+0xbd4>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	2b07      	cmp	r3, #7
 8005cf8:	d01a      	beq.n	8005d30 <UART_SetConfig+0xbd0>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfe:	2b08      	cmp	r3, #8
 8005d00:	d014      	beq.n	8005d2c <UART_SetConfig+0xbcc>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d06:	2b09      	cmp	r3, #9
 8005d08:	d00e      	beq.n	8005d28 <UART_SetConfig+0xbc8>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	2b0a      	cmp	r3, #10
 8005d10:	d008      	beq.n	8005d24 <UART_SetConfig+0xbc4>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	2b0b      	cmp	r3, #11
 8005d18:	d102      	bne.n	8005d20 <UART_SetConfig+0xbc0>
 8005d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d1e:	e016      	b.n	8005d4e <UART_SetConfig+0xbee>
 8005d20:	2301      	movs	r3, #1
 8005d22:	e014      	b.n	8005d4e <UART_SetConfig+0xbee>
 8005d24:	2380      	movs	r3, #128	; 0x80
 8005d26:	e012      	b.n	8005d4e <UART_SetConfig+0xbee>
 8005d28:	2340      	movs	r3, #64	; 0x40
 8005d2a:	e010      	b.n	8005d4e <UART_SetConfig+0xbee>
 8005d2c:	2320      	movs	r3, #32
 8005d2e:	e00e      	b.n	8005d4e <UART_SetConfig+0xbee>
 8005d30:	2310      	movs	r3, #16
 8005d32:	e00c      	b.n	8005d4e <UART_SetConfig+0xbee>
 8005d34:	230c      	movs	r3, #12
 8005d36:	e00a      	b.n	8005d4e <UART_SetConfig+0xbee>
 8005d38:	230a      	movs	r3, #10
 8005d3a:	e008      	b.n	8005d4e <UART_SetConfig+0xbee>
 8005d3c:	2308      	movs	r3, #8
 8005d3e:	e006      	b.n	8005d4e <UART_SetConfig+0xbee>
 8005d40:	2306      	movs	r3, #6
 8005d42:	e004      	b.n	8005d4e <UART_SetConfig+0xbee>
 8005d44:	2304      	movs	r3, #4
 8005d46:	e002      	b.n	8005d4e <UART_SetConfig+0xbee>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e000      	b.n	8005d4e <UART_SetConfig+0xbee>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d52:	005a      	lsls	r2, r3, #1
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	085b      	lsrs	r3, r3, #1
 8005d5a:	441a      	add	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005d68:	e16d      	b.n	8006046 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d6a:	f7fd fd9d 	bl	80038a8 <HAL_RCC_GetPCLK2Freq>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d044      	beq.n	8005e02 <UART_SetConfig+0xca2>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d03e      	beq.n	8005dfe <UART_SetConfig+0xc9e>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d038      	beq.n	8005dfa <UART_SetConfig+0xc9a>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	2b03      	cmp	r3, #3
 8005d8e:	d032      	beq.n	8005df6 <UART_SetConfig+0xc96>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d02c      	beq.n	8005df2 <UART_SetConfig+0xc92>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	2b05      	cmp	r3, #5
 8005d9e:	d026      	beq.n	8005dee <UART_SetConfig+0xc8e>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da4:	2b06      	cmp	r3, #6
 8005da6:	d020      	beq.n	8005dea <UART_SetConfig+0xc8a>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	2b07      	cmp	r3, #7
 8005dae:	d01a      	beq.n	8005de6 <UART_SetConfig+0xc86>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	2b08      	cmp	r3, #8
 8005db6:	d014      	beq.n	8005de2 <UART_SetConfig+0xc82>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	2b09      	cmp	r3, #9
 8005dbe:	d00e      	beq.n	8005dde <UART_SetConfig+0xc7e>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	2b0a      	cmp	r3, #10
 8005dc6:	d008      	beq.n	8005dda <UART_SetConfig+0xc7a>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	2b0b      	cmp	r3, #11
 8005dce:	d102      	bne.n	8005dd6 <UART_SetConfig+0xc76>
 8005dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005dd4:	e016      	b.n	8005e04 <UART_SetConfig+0xca4>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e014      	b.n	8005e04 <UART_SetConfig+0xca4>
 8005dda:	2380      	movs	r3, #128	; 0x80
 8005ddc:	e012      	b.n	8005e04 <UART_SetConfig+0xca4>
 8005dde:	2340      	movs	r3, #64	; 0x40
 8005de0:	e010      	b.n	8005e04 <UART_SetConfig+0xca4>
 8005de2:	2320      	movs	r3, #32
 8005de4:	e00e      	b.n	8005e04 <UART_SetConfig+0xca4>
 8005de6:	2310      	movs	r3, #16
 8005de8:	e00c      	b.n	8005e04 <UART_SetConfig+0xca4>
 8005dea:	230c      	movs	r3, #12
 8005dec:	e00a      	b.n	8005e04 <UART_SetConfig+0xca4>
 8005dee:	230a      	movs	r3, #10
 8005df0:	e008      	b.n	8005e04 <UART_SetConfig+0xca4>
 8005df2:	2308      	movs	r3, #8
 8005df4:	e006      	b.n	8005e04 <UART_SetConfig+0xca4>
 8005df6:	2306      	movs	r3, #6
 8005df8:	e004      	b.n	8005e04 <UART_SetConfig+0xca4>
 8005dfa:	2304      	movs	r3, #4
 8005dfc:	e002      	b.n	8005e04 <UART_SetConfig+0xca4>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e000      	b.n	8005e04 <UART_SetConfig+0xca4>
 8005e02:	2301      	movs	r3, #1
 8005e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e08:	005a      	lsls	r2, r3, #1
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	085b      	lsrs	r3, r3, #1
 8005e10:	441a      	add	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e1e:	e112      	b.n	8006046 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d043      	beq.n	8005eb0 <UART_SetConfig+0xd50>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d03d      	beq.n	8005eac <UART_SetConfig+0xd4c>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d037      	beq.n	8005ea8 <UART_SetConfig+0xd48>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d031      	beq.n	8005ea4 <UART_SetConfig+0xd44>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d02b      	beq.n	8005ea0 <UART_SetConfig+0xd40>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	2b05      	cmp	r3, #5
 8005e4e:	d025      	beq.n	8005e9c <UART_SetConfig+0xd3c>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	2b06      	cmp	r3, #6
 8005e56:	d01f      	beq.n	8005e98 <UART_SetConfig+0xd38>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	2b07      	cmp	r3, #7
 8005e5e:	d019      	beq.n	8005e94 <UART_SetConfig+0xd34>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d013      	beq.n	8005e90 <UART_SetConfig+0xd30>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	2b09      	cmp	r3, #9
 8005e6e:	d00d      	beq.n	8005e8c <UART_SetConfig+0xd2c>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	2b0a      	cmp	r3, #10
 8005e76:	d007      	beq.n	8005e88 <UART_SetConfig+0xd28>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	2b0b      	cmp	r3, #11
 8005e7e:	d101      	bne.n	8005e84 <UART_SetConfig+0xd24>
 8005e80:	4b8c      	ldr	r3, [pc, #560]	; (80060b4 <UART_SetConfig+0xf54>)
 8005e82:	e016      	b.n	8005eb2 <UART_SetConfig+0xd52>
 8005e84:	4b8c      	ldr	r3, [pc, #560]	; (80060b8 <UART_SetConfig+0xf58>)
 8005e86:	e014      	b.n	8005eb2 <UART_SetConfig+0xd52>
 8005e88:	4b8c      	ldr	r3, [pc, #560]	; (80060bc <UART_SetConfig+0xf5c>)
 8005e8a:	e012      	b.n	8005eb2 <UART_SetConfig+0xd52>
 8005e8c:	4b8c      	ldr	r3, [pc, #560]	; (80060c0 <UART_SetConfig+0xf60>)
 8005e8e:	e010      	b.n	8005eb2 <UART_SetConfig+0xd52>
 8005e90:	4b8c      	ldr	r3, [pc, #560]	; (80060c4 <UART_SetConfig+0xf64>)
 8005e92:	e00e      	b.n	8005eb2 <UART_SetConfig+0xd52>
 8005e94:	4b8c      	ldr	r3, [pc, #560]	; (80060c8 <UART_SetConfig+0xf68>)
 8005e96:	e00c      	b.n	8005eb2 <UART_SetConfig+0xd52>
 8005e98:	4b8c      	ldr	r3, [pc, #560]	; (80060cc <UART_SetConfig+0xf6c>)
 8005e9a:	e00a      	b.n	8005eb2 <UART_SetConfig+0xd52>
 8005e9c:	4b8c      	ldr	r3, [pc, #560]	; (80060d0 <UART_SetConfig+0xf70>)
 8005e9e:	e008      	b.n	8005eb2 <UART_SetConfig+0xd52>
 8005ea0:	4b8c      	ldr	r3, [pc, #560]	; (80060d4 <UART_SetConfig+0xf74>)
 8005ea2:	e006      	b.n	8005eb2 <UART_SetConfig+0xd52>
 8005ea4:	4b8c      	ldr	r3, [pc, #560]	; (80060d8 <UART_SetConfig+0xf78>)
 8005ea6:	e004      	b.n	8005eb2 <UART_SetConfig+0xd52>
 8005ea8:	4b8c      	ldr	r3, [pc, #560]	; (80060dc <UART_SetConfig+0xf7c>)
 8005eaa:	e002      	b.n	8005eb2 <UART_SetConfig+0xd52>
 8005eac:	4b8c      	ldr	r3, [pc, #560]	; (80060e0 <UART_SetConfig+0xf80>)
 8005eae:	e000      	b.n	8005eb2 <UART_SetConfig+0xd52>
 8005eb0:	4b81      	ldr	r3, [pc, #516]	; (80060b8 <UART_SetConfig+0xf58>)
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	6852      	ldr	r2, [r2, #4]
 8005eb6:	0852      	lsrs	r2, r2, #1
 8005eb8:	441a      	add	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ec6:	e0be      	b.n	8006046 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ec8:	f7fd fc42 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d044      	beq.n	8005f60 <UART_SetConfig+0xe00>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d03e      	beq.n	8005f5c <UART_SetConfig+0xdfc>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d038      	beq.n	8005f58 <UART_SetConfig+0xdf8>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	2b03      	cmp	r3, #3
 8005eec:	d032      	beq.n	8005f54 <UART_SetConfig+0xdf4>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	2b04      	cmp	r3, #4
 8005ef4:	d02c      	beq.n	8005f50 <UART_SetConfig+0xdf0>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	2b05      	cmp	r3, #5
 8005efc:	d026      	beq.n	8005f4c <UART_SetConfig+0xdec>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	2b06      	cmp	r3, #6
 8005f04:	d020      	beq.n	8005f48 <UART_SetConfig+0xde8>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	2b07      	cmp	r3, #7
 8005f0c:	d01a      	beq.n	8005f44 <UART_SetConfig+0xde4>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	d014      	beq.n	8005f40 <UART_SetConfig+0xde0>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	2b09      	cmp	r3, #9
 8005f1c:	d00e      	beq.n	8005f3c <UART_SetConfig+0xddc>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	2b0a      	cmp	r3, #10
 8005f24:	d008      	beq.n	8005f38 <UART_SetConfig+0xdd8>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2a:	2b0b      	cmp	r3, #11
 8005f2c:	d102      	bne.n	8005f34 <UART_SetConfig+0xdd4>
 8005f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f32:	e016      	b.n	8005f62 <UART_SetConfig+0xe02>
 8005f34:	2301      	movs	r3, #1
 8005f36:	e014      	b.n	8005f62 <UART_SetConfig+0xe02>
 8005f38:	2380      	movs	r3, #128	; 0x80
 8005f3a:	e012      	b.n	8005f62 <UART_SetConfig+0xe02>
 8005f3c:	2340      	movs	r3, #64	; 0x40
 8005f3e:	e010      	b.n	8005f62 <UART_SetConfig+0xe02>
 8005f40:	2320      	movs	r3, #32
 8005f42:	e00e      	b.n	8005f62 <UART_SetConfig+0xe02>
 8005f44:	2310      	movs	r3, #16
 8005f46:	e00c      	b.n	8005f62 <UART_SetConfig+0xe02>
 8005f48:	230c      	movs	r3, #12
 8005f4a:	e00a      	b.n	8005f62 <UART_SetConfig+0xe02>
 8005f4c:	230a      	movs	r3, #10
 8005f4e:	e008      	b.n	8005f62 <UART_SetConfig+0xe02>
 8005f50:	2308      	movs	r3, #8
 8005f52:	e006      	b.n	8005f62 <UART_SetConfig+0xe02>
 8005f54:	2306      	movs	r3, #6
 8005f56:	e004      	b.n	8005f62 <UART_SetConfig+0xe02>
 8005f58:	2304      	movs	r3, #4
 8005f5a:	e002      	b.n	8005f62 <UART_SetConfig+0xe02>
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	e000      	b.n	8005f62 <UART_SetConfig+0xe02>
 8005f60:	2301      	movs	r3, #1
 8005f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f66:	005a      	lsls	r2, r3, #1
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	085b      	lsrs	r3, r3, #1
 8005f6e:	441a      	add	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f7c:	e063      	b.n	8006046 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d04f      	beq.n	8006026 <UART_SetConfig+0xec6>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d048      	beq.n	8006020 <UART_SetConfig+0xec0>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d041      	beq.n	800601a <UART_SetConfig+0xeba>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	d03a      	beq.n	8006014 <UART_SetConfig+0xeb4>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	d033      	beq.n	800600e <UART_SetConfig+0xeae>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	2b05      	cmp	r3, #5
 8005fac:	d02c      	beq.n	8006008 <UART_SetConfig+0xea8>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	2b06      	cmp	r3, #6
 8005fb4:	d025      	beq.n	8006002 <UART_SetConfig+0xea2>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	2b07      	cmp	r3, #7
 8005fbc:	d01e      	beq.n	8005ffc <UART_SetConfig+0xe9c>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	2b08      	cmp	r3, #8
 8005fc4:	d017      	beq.n	8005ff6 <UART_SetConfig+0xe96>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	2b09      	cmp	r3, #9
 8005fcc:	d010      	beq.n	8005ff0 <UART_SetConfig+0xe90>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd2:	2b0a      	cmp	r3, #10
 8005fd4:	d009      	beq.n	8005fea <UART_SetConfig+0xe8a>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	2b0b      	cmp	r3, #11
 8005fdc:	d102      	bne.n	8005fe4 <UART_SetConfig+0xe84>
 8005fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fe2:	e022      	b.n	800602a <UART_SetConfig+0xeca>
 8005fe4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fe8:	e01f      	b.n	800602a <UART_SetConfig+0xeca>
 8005fea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fee:	e01c      	b.n	800602a <UART_SetConfig+0xeca>
 8005ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ff4:	e019      	b.n	800602a <UART_SetConfig+0xeca>
 8005ff6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ffa:	e016      	b.n	800602a <UART_SetConfig+0xeca>
 8005ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006000:	e013      	b.n	800602a <UART_SetConfig+0xeca>
 8006002:	f241 5354 	movw	r3, #5460	; 0x1554
 8006006:	e010      	b.n	800602a <UART_SetConfig+0xeca>
 8006008:	f641 1398 	movw	r3, #6552	; 0x1998
 800600c:	e00d      	b.n	800602a <UART_SetConfig+0xeca>
 800600e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006012:	e00a      	b.n	800602a <UART_SetConfig+0xeca>
 8006014:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8006018:	e007      	b.n	800602a <UART_SetConfig+0xeca>
 800601a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800601e:	e004      	b.n	800602a <UART_SetConfig+0xeca>
 8006020:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006024:	e001      	b.n	800602a <UART_SetConfig+0xeca>
 8006026:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	6852      	ldr	r2, [r2, #4]
 800602e:	0852      	lsrs	r2, r2, #1
 8006030:	441a      	add	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	fbb2 f3f3 	udiv	r3, r2, r3
 800603a:	b29b      	uxth	r3, r3
 800603c:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800603e:	e002      	b.n	8006046 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	74fb      	strb	r3, [r7, #19]
        break;
 8006044:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2b0f      	cmp	r3, #15
 800604a:	d916      	bls.n	800607a <UART_SetConfig+0xf1a>
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006052:	d212      	bcs.n	800607a <UART_SetConfig+0xf1a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	b29b      	uxth	r3, r3
 8006058:	f023 030f 	bic.w	r3, r3, #15
 800605c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	085b      	lsrs	r3, r3, #1
 8006062:	b29b      	uxth	r3, r3
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	b29a      	uxth	r2, r3
 800606a:	897b      	ldrh	r3, [r7, #10]
 800606c:	4313      	orrs	r3, r2
 800606e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	897a      	ldrh	r2, [r7, #10]
 8006076:	60da      	str	r2, [r3, #12]
 8006078:	e208      	b.n	800648c <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	74fb      	strb	r3, [r7, #19]
 800607e:	e205      	b.n	800648c <UART_SetConfig+0x132c>
    }
  }
  else
  {
    switch (clocksource)
 8006080:	7efb      	ldrb	r3, [r7, #27]
 8006082:	2b08      	cmp	r3, #8
 8006084:	f200 81f1 	bhi.w	800646a <UART_SetConfig+0x130a>
 8006088:	a201      	add	r2, pc, #4	; (adr r2, 8006090 <UART_SetConfig+0xf30>)
 800608a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608e:	bf00      	nop
 8006090:	080060e5 	.word	0x080060e5
 8006094:	08006199 	.word	0x08006199
 8006098:	0800624d 	.word	0x0800624d
 800609c:	0800646b 	.word	0x0800646b
 80060a0:	080062f7 	.word	0x080062f7
 80060a4:	0800646b 	.word	0x0800646b
 80060a8:	0800646b 	.word	0x0800646b
 80060ac:	0800646b 	.word	0x0800646b
 80060b0:	080063ab 	.word	0x080063ab
 80060b4:	0001e848 	.word	0x0001e848
 80060b8:	01e84800 	.word	0x01e84800
 80060bc:	0003d090 	.word	0x0003d090
 80060c0:	0007a120 	.word	0x0007a120
 80060c4:	000f4240 	.word	0x000f4240
 80060c8:	001e8480 	.word	0x001e8480
 80060cc:	0028b0aa 	.word	0x0028b0aa
 80060d0:	0030d400 	.word	0x0030d400
 80060d4:	003d0900 	.word	0x003d0900
 80060d8:	00516154 	.word	0x00516154
 80060dc:	007a1200 	.word	0x007a1200
 80060e0:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060e4:	f7fd fbca 	bl	800387c <HAL_RCC_GetPCLK1Freq>
 80060e8:	4602      	mov	r2, r0
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d044      	beq.n	800617c <UART_SetConfig+0x101c>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d03e      	beq.n	8006178 <UART_SetConfig+0x1018>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d038      	beq.n	8006174 <UART_SetConfig+0x1014>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	2b03      	cmp	r3, #3
 8006108:	d032      	beq.n	8006170 <UART_SetConfig+0x1010>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	2b04      	cmp	r3, #4
 8006110:	d02c      	beq.n	800616c <UART_SetConfig+0x100c>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	2b05      	cmp	r3, #5
 8006118:	d026      	beq.n	8006168 <UART_SetConfig+0x1008>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	2b06      	cmp	r3, #6
 8006120:	d020      	beq.n	8006164 <UART_SetConfig+0x1004>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	2b07      	cmp	r3, #7
 8006128:	d01a      	beq.n	8006160 <UART_SetConfig+0x1000>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612e:	2b08      	cmp	r3, #8
 8006130:	d014      	beq.n	800615c <UART_SetConfig+0xffc>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	2b09      	cmp	r3, #9
 8006138:	d00e      	beq.n	8006158 <UART_SetConfig+0xff8>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	2b0a      	cmp	r3, #10
 8006140:	d008      	beq.n	8006154 <UART_SetConfig+0xff4>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	2b0b      	cmp	r3, #11
 8006148:	d102      	bne.n	8006150 <UART_SetConfig+0xff0>
 800614a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800614e:	e016      	b.n	800617e <UART_SetConfig+0x101e>
 8006150:	2301      	movs	r3, #1
 8006152:	e014      	b.n	800617e <UART_SetConfig+0x101e>
 8006154:	2380      	movs	r3, #128	; 0x80
 8006156:	e012      	b.n	800617e <UART_SetConfig+0x101e>
 8006158:	2340      	movs	r3, #64	; 0x40
 800615a:	e010      	b.n	800617e <UART_SetConfig+0x101e>
 800615c:	2320      	movs	r3, #32
 800615e:	e00e      	b.n	800617e <UART_SetConfig+0x101e>
 8006160:	2310      	movs	r3, #16
 8006162:	e00c      	b.n	800617e <UART_SetConfig+0x101e>
 8006164:	230c      	movs	r3, #12
 8006166:	e00a      	b.n	800617e <UART_SetConfig+0x101e>
 8006168:	230a      	movs	r3, #10
 800616a:	e008      	b.n	800617e <UART_SetConfig+0x101e>
 800616c:	2308      	movs	r3, #8
 800616e:	e006      	b.n	800617e <UART_SetConfig+0x101e>
 8006170:	2306      	movs	r3, #6
 8006172:	e004      	b.n	800617e <UART_SetConfig+0x101e>
 8006174:	2304      	movs	r3, #4
 8006176:	e002      	b.n	800617e <UART_SetConfig+0x101e>
 8006178:	2302      	movs	r3, #2
 800617a:	e000      	b.n	800617e <UART_SetConfig+0x101e>
 800617c:	2301      	movs	r3, #1
 800617e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	085b      	lsrs	r3, r3, #1
 8006188:	441a      	add	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006192:	b29b      	uxth	r3, r3
 8006194:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8006196:	e16b      	b.n	8006470 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006198:	f7fd fb86 	bl	80038a8 <HAL_RCC_GetPCLK2Freq>
 800619c:	4602      	mov	r2, r0
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d044      	beq.n	8006230 <UART_SetConfig+0x10d0>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d03e      	beq.n	800622c <UART_SetConfig+0x10cc>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d038      	beq.n	8006228 <UART_SetConfig+0x10c8>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d032      	beq.n	8006224 <UART_SetConfig+0x10c4>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	2b04      	cmp	r3, #4
 80061c4:	d02c      	beq.n	8006220 <UART_SetConfig+0x10c0>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	2b05      	cmp	r3, #5
 80061cc:	d026      	beq.n	800621c <UART_SetConfig+0x10bc>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	2b06      	cmp	r3, #6
 80061d4:	d020      	beq.n	8006218 <UART_SetConfig+0x10b8>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061da:	2b07      	cmp	r3, #7
 80061dc:	d01a      	beq.n	8006214 <UART_SetConfig+0x10b4>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	2b08      	cmp	r3, #8
 80061e4:	d014      	beq.n	8006210 <UART_SetConfig+0x10b0>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	2b09      	cmp	r3, #9
 80061ec:	d00e      	beq.n	800620c <UART_SetConfig+0x10ac>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	2b0a      	cmp	r3, #10
 80061f4:	d008      	beq.n	8006208 <UART_SetConfig+0x10a8>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fa:	2b0b      	cmp	r3, #11
 80061fc:	d102      	bne.n	8006204 <UART_SetConfig+0x10a4>
 80061fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006202:	e016      	b.n	8006232 <UART_SetConfig+0x10d2>
 8006204:	2301      	movs	r3, #1
 8006206:	e014      	b.n	8006232 <UART_SetConfig+0x10d2>
 8006208:	2380      	movs	r3, #128	; 0x80
 800620a:	e012      	b.n	8006232 <UART_SetConfig+0x10d2>
 800620c:	2340      	movs	r3, #64	; 0x40
 800620e:	e010      	b.n	8006232 <UART_SetConfig+0x10d2>
 8006210:	2320      	movs	r3, #32
 8006212:	e00e      	b.n	8006232 <UART_SetConfig+0x10d2>
 8006214:	2310      	movs	r3, #16
 8006216:	e00c      	b.n	8006232 <UART_SetConfig+0x10d2>
 8006218:	230c      	movs	r3, #12
 800621a:	e00a      	b.n	8006232 <UART_SetConfig+0x10d2>
 800621c:	230a      	movs	r3, #10
 800621e:	e008      	b.n	8006232 <UART_SetConfig+0x10d2>
 8006220:	2308      	movs	r3, #8
 8006222:	e006      	b.n	8006232 <UART_SetConfig+0x10d2>
 8006224:	2306      	movs	r3, #6
 8006226:	e004      	b.n	8006232 <UART_SetConfig+0x10d2>
 8006228:	2304      	movs	r3, #4
 800622a:	e002      	b.n	8006232 <UART_SetConfig+0x10d2>
 800622c:	2302      	movs	r3, #2
 800622e:	e000      	b.n	8006232 <UART_SetConfig+0x10d2>
 8006230:	2301      	movs	r3, #1
 8006232:	fbb2 f2f3 	udiv	r2, r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	085b      	lsrs	r3, r3, #1
 800623c:	441a      	add	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	fbb2 f3f3 	udiv	r3, r2, r3
 8006246:	b29b      	uxth	r3, r3
 8006248:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800624a:	e111      	b.n	8006470 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	2b00      	cmp	r3, #0
 8006252:	d044      	beq.n	80062de <UART_SetConfig+0x117e>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	2b01      	cmp	r3, #1
 800625a:	d03e      	beq.n	80062da <UART_SetConfig+0x117a>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	2b02      	cmp	r3, #2
 8006262:	d038      	beq.n	80062d6 <UART_SetConfig+0x1176>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006268:	2b03      	cmp	r3, #3
 800626a:	d032      	beq.n	80062d2 <UART_SetConfig+0x1172>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006270:	2b04      	cmp	r3, #4
 8006272:	d02c      	beq.n	80062ce <UART_SetConfig+0x116e>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006278:	2b05      	cmp	r3, #5
 800627a:	d026      	beq.n	80062ca <UART_SetConfig+0x116a>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	2b06      	cmp	r3, #6
 8006282:	d020      	beq.n	80062c6 <UART_SetConfig+0x1166>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006288:	2b07      	cmp	r3, #7
 800628a:	d01a      	beq.n	80062c2 <UART_SetConfig+0x1162>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	2b08      	cmp	r3, #8
 8006292:	d014      	beq.n	80062be <UART_SetConfig+0x115e>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	2b09      	cmp	r3, #9
 800629a:	d00e      	beq.n	80062ba <UART_SetConfig+0x115a>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a0:	2b0a      	cmp	r3, #10
 80062a2:	d008      	beq.n	80062b6 <UART_SetConfig+0x1156>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a8:	2b0b      	cmp	r3, #11
 80062aa:	d102      	bne.n	80062b2 <UART_SetConfig+0x1152>
 80062ac:	f24f 4324 	movw	r3, #62500	; 0xf424
 80062b0:	e016      	b.n	80062e0 <UART_SetConfig+0x1180>
 80062b2:	4b80      	ldr	r3, [pc, #512]	; (80064b4 <UART_SetConfig+0x1354>)
 80062b4:	e014      	b.n	80062e0 <UART_SetConfig+0x1180>
 80062b6:	4b80      	ldr	r3, [pc, #512]	; (80064b8 <UART_SetConfig+0x1358>)
 80062b8:	e012      	b.n	80062e0 <UART_SetConfig+0x1180>
 80062ba:	4b80      	ldr	r3, [pc, #512]	; (80064bc <UART_SetConfig+0x135c>)
 80062bc:	e010      	b.n	80062e0 <UART_SetConfig+0x1180>
 80062be:	4b80      	ldr	r3, [pc, #512]	; (80064c0 <UART_SetConfig+0x1360>)
 80062c0:	e00e      	b.n	80062e0 <UART_SetConfig+0x1180>
 80062c2:	4b80      	ldr	r3, [pc, #512]	; (80064c4 <UART_SetConfig+0x1364>)
 80062c4:	e00c      	b.n	80062e0 <UART_SetConfig+0x1180>
 80062c6:	4b80      	ldr	r3, [pc, #512]	; (80064c8 <UART_SetConfig+0x1368>)
 80062c8:	e00a      	b.n	80062e0 <UART_SetConfig+0x1180>
 80062ca:	4b80      	ldr	r3, [pc, #512]	; (80064cc <UART_SetConfig+0x136c>)
 80062cc:	e008      	b.n	80062e0 <UART_SetConfig+0x1180>
 80062ce:	4b80      	ldr	r3, [pc, #512]	; (80064d0 <UART_SetConfig+0x1370>)
 80062d0:	e006      	b.n	80062e0 <UART_SetConfig+0x1180>
 80062d2:	4b80      	ldr	r3, [pc, #512]	; (80064d4 <UART_SetConfig+0x1374>)
 80062d4:	e004      	b.n	80062e0 <UART_SetConfig+0x1180>
 80062d6:	4b80      	ldr	r3, [pc, #512]	; (80064d8 <UART_SetConfig+0x1378>)
 80062d8:	e002      	b.n	80062e0 <UART_SetConfig+0x1180>
 80062da:	4b80      	ldr	r3, [pc, #512]	; (80064dc <UART_SetConfig+0x137c>)
 80062dc:	e000      	b.n	80062e0 <UART_SetConfig+0x1180>
 80062de:	4b75      	ldr	r3, [pc, #468]	; (80064b4 <UART_SetConfig+0x1354>)
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	6852      	ldr	r2, [r2, #4]
 80062e4:	0852      	lsrs	r2, r2, #1
 80062e6:	441a      	add	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80062f4:	e0bc      	b.n	8006470 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062f6:	f7fd fa2b 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 80062fa:	4602      	mov	r2, r0
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	2b00      	cmp	r3, #0
 8006302:	d044      	beq.n	800638e <UART_SetConfig+0x122e>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	2b01      	cmp	r3, #1
 800630a:	d03e      	beq.n	800638a <UART_SetConfig+0x122a>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	2b02      	cmp	r3, #2
 8006312:	d038      	beq.n	8006386 <UART_SetConfig+0x1226>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006318:	2b03      	cmp	r3, #3
 800631a:	d032      	beq.n	8006382 <UART_SetConfig+0x1222>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	2b04      	cmp	r3, #4
 8006322:	d02c      	beq.n	800637e <UART_SetConfig+0x121e>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	2b05      	cmp	r3, #5
 800632a:	d026      	beq.n	800637a <UART_SetConfig+0x121a>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	2b06      	cmp	r3, #6
 8006332:	d020      	beq.n	8006376 <UART_SetConfig+0x1216>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006338:	2b07      	cmp	r3, #7
 800633a:	d01a      	beq.n	8006372 <UART_SetConfig+0x1212>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	2b08      	cmp	r3, #8
 8006342:	d014      	beq.n	800636e <UART_SetConfig+0x120e>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	2b09      	cmp	r3, #9
 800634a:	d00e      	beq.n	800636a <UART_SetConfig+0x120a>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006350:	2b0a      	cmp	r3, #10
 8006352:	d008      	beq.n	8006366 <UART_SetConfig+0x1206>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	2b0b      	cmp	r3, #11
 800635a:	d102      	bne.n	8006362 <UART_SetConfig+0x1202>
 800635c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006360:	e016      	b.n	8006390 <UART_SetConfig+0x1230>
 8006362:	2301      	movs	r3, #1
 8006364:	e014      	b.n	8006390 <UART_SetConfig+0x1230>
 8006366:	2380      	movs	r3, #128	; 0x80
 8006368:	e012      	b.n	8006390 <UART_SetConfig+0x1230>
 800636a:	2340      	movs	r3, #64	; 0x40
 800636c:	e010      	b.n	8006390 <UART_SetConfig+0x1230>
 800636e:	2320      	movs	r3, #32
 8006370:	e00e      	b.n	8006390 <UART_SetConfig+0x1230>
 8006372:	2310      	movs	r3, #16
 8006374:	e00c      	b.n	8006390 <UART_SetConfig+0x1230>
 8006376:	230c      	movs	r3, #12
 8006378:	e00a      	b.n	8006390 <UART_SetConfig+0x1230>
 800637a:	230a      	movs	r3, #10
 800637c:	e008      	b.n	8006390 <UART_SetConfig+0x1230>
 800637e:	2308      	movs	r3, #8
 8006380:	e006      	b.n	8006390 <UART_SetConfig+0x1230>
 8006382:	2306      	movs	r3, #6
 8006384:	e004      	b.n	8006390 <UART_SetConfig+0x1230>
 8006386:	2304      	movs	r3, #4
 8006388:	e002      	b.n	8006390 <UART_SetConfig+0x1230>
 800638a:	2302      	movs	r3, #2
 800638c:	e000      	b.n	8006390 <UART_SetConfig+0x1230>
 800638e:	2301      	movs	r3, #1
 8006390:	fbb2 f2f3 	udiv	r2, r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	085b      	lsrs	r3, r3, #1
 800639a:	441a      	add	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80063a8:	e062      	b.n	8006470 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d04e      	beq.n	8006450 <UART_SetConfig+0x12f0>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d047      	beq.n	800644a <UART_SetConfig+0x12ea>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d040      	beq.n	8006444 <UART_SetConfig+0x12e4>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c6:	2b03      	cmp	r3, #3
 80063c8:	d039      	beq.n	800643e <UART_SetConfig+0x12de>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ce:	2b04      	cmp	r3, #4
 80063d0:	d032      	beq.n	8006438 <UART_SetConfig+0x12d8>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	2b05      	cmp	r3, #5
 80063d8:	d02b      	beq.n	8006432 <UART_SetConfig+0x12d2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	2b06      	cmp	r3, #6
 80063e0:	d024      	beq.n	800642c <UART_SetConfig+0x12cc>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	2b07      	cmp	r3, #7
 80063e8:	d01d      	beq.n	8006426 <UART_SetConfig+0x12c6>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d016      	beq.n	8006420 <UART_SetConfig+0x12c0>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f6:	2b09      	cmp	r3, #9
 80063f8:	d00f      	beq.n	800641a <UART_SetConfig+0x12ba>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fe:	2b0a      	cmp	r3, #10
 8006400:	d008      	beq.n	8006414 <UART_SetConfig+0x12b4>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006406:	2b0b      	cmp	r3, #11
 8006408:	d101      	bne.n	800640e <UART_SetConfig+0x12ae>
 800640a:	2380      	movs	r3, #128	; 0x80
 800640c:	e022      	b.n	8006454 <UART_SetConfig+0x12f4>
 800640e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006412:	e01f      	b.n	8006454 <UART_SetConfig+0x12f4>
 8006414:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006418:	e01c      	b.n	8006454 <UART_SetConfig+0x12f4>
 800641a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800641e:	e019      	b.n	8006454 <UART_SetConfig+0x12f4>
 8006420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006424:	e016      	b.n	8006454 <UART_SetConfig+0x12f4>
 8006426:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800642a:	e013      	b.n	8006454 <UART_SetConfig+0x12f4>
 800642c:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006430:	e010      	b.n	8006454 <UART_SetConfig+0x12f4>
 8006432:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006436:	e00d      	b.n	8006454 <UART_SetConfig+0x12f4>
 8006438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800643c:	e00a      	b.n	8006454 <UART_SetConfig+0x12f4>
 800643e:	f241 5355 	movw	r3, #5461	; 0x1555
 8006442:	e007      	b.n	8006454 <UART_SetConfig+0x12f4>
 8006444:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006448:	e004      	b.n	8006454 <UART_SetConfig+0x12f4>
 800644a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800644e:	e001      	b.n	8006454 <UART_SetConfig+0x12f4>
 8006450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6852      	ldr	r2, [r2, #4]
 8006458:	0852      	lsrs	r2, r2, #1
 800645a:	441a      	add	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	fbb2 f3f3 	udiv	r3, r2, r3
 8006464:	b29b      	uxth	r3, r3
 8006466:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8006468:	e002      	b.n	8006470 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	74fb      	strb	r3, [r7, #19]
        break;
 800646e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	2b0f      	cmp	r3, #15
 8006474:	d908      	bls.n	8006488 <UART_SetConfig+0x1328>
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800647c:	d204      	bcs.n	8006488 <UART_SetConfig+0x1328>
    {
      huart->Instance->BRR = usartdiv;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	60da      	str	r2, [r3, #12]
 8006486:	e001      	b.n	800648c <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	74fb      	strb	r3, [r7, #19]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80064a8:	7cfb      	ldrb	r3, [r7, #19]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3720      	adds	r7, #32
 80064ae:	46bd      	mov	sp, r7
 80064b0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80064b4:	00f42400 	.word	0x00f42400
 80064b8:	0001e848 	.word	0x0001e848
 80064bc:	0003d090 	.word	0x0003d090
 80064c0:	0007a120 	.word	0x0007a120
 80064c4:	000f4240 	.word	0x000f4240
 80064c8:	00145855 	.word	0x00145855
 80064cc:	00186a00 	.word	0x00186a00
 80064d0:	001e8480 	.word	0x001e8480
 80064d4:	0028b0aa 	.word	0x0028b0aa
 80064d8:	003d0900 	.word	0x003d0900
 80064dc:	007a1200 	.word	0x007a1200

080064e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ec:	f003 0301 	and.w	r3, r3, #1
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00a      	beq.n	800650a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00a      	beq.n	800654e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006552:	f003 0308 	and.w	r3, r3, #8
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006574:	f003 0310 	and.w	r3, r3, #16
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00a      	beq.n	8006592 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006596:	f003 0320 	and.w	r3, r3, #32
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00a      	beq.n	80065b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	430a      	orrs	r2, r1
 80065b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d01a      	beq.n	80065f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065de:	d10a      	bne.n	80065f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	605a      	str	r2, [r3, #4]
  }
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af02      	add	r7, sp, #8
 800662a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006634:	f7fb fc1c 	bl	8001e70 <HAL_GetTick>
 8006638:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0308 	and.w	r3, r3, #8
 8006644:	2b08      	cmp	r3, #8
 8006646:	d10e      	bne.n	8006666 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006648:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f82c 	bl	80066b4 <UART_WaitOnFlagUntilTimeout>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e022      	b.n	80066ac <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0304 	and.w	r3, r3, #4
 8006670:	2b04      	cmp	r3, #4
 8006672:	d10e      	bne.n	8006692 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006674:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f816 	bl	80066b4 <UART_WaitOnFlagUntilTimeout>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e00c      	b.n	80066ac <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2220      	movs	r2, #32
 8006696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2220      	movs	r2, #32
 800669e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	603b      	str	r3, [r7, #0]
 80066c0:	4613      	mov	r3, r2
 80066c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066c4:	e02c      	b.n	8006720 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066cc:	d028      	beq.n	8006720 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ce:	f7fb fbcf 	bl	8001e70 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d302      	bcc.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d11d      	bne.n	8006720 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066f2:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689a      	ldr	r2, [r3, #8]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 0201 	bic.w	r2, r2, #1
 8006702:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2220      	movs	r2, #32
 8006708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2220      	movs	r2, #32
 8006710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e00f      	b.n	8006740 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	69da      	ldr	r2, [r3, #28]
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	4013      	ands	r3, r2
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	429a      	cmp	r2, r3
 800672e:	bf0c      	ite	eq
 8006730:	2301      	moveq	r3, #1
 8006732:	2300      	movne	r3, #0
 8006734:	b2db      	uxtb	r3, r3
 8006736:	461a      	mov	r2, r3
 8006738:	79fb      	ldrb	r3, [r7, #7]
 800673a:	429a      	cmp	r2, r3
 800673c:	d0c3      	beq.n	80066c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006758:	2b01      	cmp	r3, #1
 800675a:	d101      	bne.n	8006760 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800675c:	2302      	movs	r3, #2
 800675e:	e02d      	b.n	80067bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2224      	movs	r2, #36	; 0x24
 800676c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0201 	bic.w	r2, r2, #1
 8006786:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	430a      	orrs	r2, r1
 800679a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f84f 	bl	8006840 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d101      	bne.n	80067dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067d8:	2302      	movs	r3, #2
 80067da:	e02d      	b.n	8006838 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2224      	movs	r2, #36	; 0x24
 80067e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0201 	bic.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f811 	bl	8006840 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2220      	movs	r2, #32
 800682a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006840:	b480      	push	{r7}
 8006842:	b089      	sub	sp, #36	; 0x24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006848:	4a2f      	ldr	r2, [pc, #188]	; (8006908 <UARTEx_SetNbDataToProcess+0xc8>)
 800684a:	f107 0314 	add.w	r3, r7, #20
 800684e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006852:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006856:	4a2d      	ldr	r2, [pc, #180]	; (800690c <UARTEx_SetNbDataToProcess+0xcc>)
 8006858:	f107 030c 	add.w	r3, r7, #12
 800685c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006860:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006868:	2b00      	cmp	r3, #0
 800686a:	d108      	bne.n	800687e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800687c:	e03d      	b.n	80068fa <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800687e:	2308      	movs	r3, #8
 8006880:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006882:	2308      	movs	r3, #8
 8006884:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	0e5b      	lsrs	r3, r3, #25
 800688e:	b2db      	uxtb	r3, r3
 8006890:	f003 0307 	and.w	r3, r3, #7
 8006894:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	0f5b      	lsrs	r3, r3, #29
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	f003 0307 	and.w	r3, r3, #7
 80068a4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80068a6:	7fbb      	ldrb	r3, [r7, #30]
 80068a8:	7f3a      	ldrb	r2, [r7, #28]
 80068aa:	f107 0120 	add.w	r1, r7, #32
 80068ae:	440a      	add	r2, r1
 80068b0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80068b4:	fb02 f303 	mul.w	r3, r2, r3
 80068b8:	7f3a      	ldrb	r2, [r7, #28]
 80068ba:	f107 0120 	add.w	r1, r7, #32
 80068be:	440a      	add	r2, r1
 80068c0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80068c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80068d0:	7ffb      	ldrb	r3, [r7, #31]
 80068d2:	7f7a      	ldrb	r2, [r7, #29]
 80068d4:	f107 0120 	add.w	r1, r7, #32
 80068d8:	440a      	add	r2, r1
 80068da:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80068de:	fb02 f303 	mul.w	r3, r2, r3
 80068e2:	7f7a      	ldrb	r2, [r7, #29]
 80068e4:	f107 0120 	add.w	r1, r7, #32
 80068e8:	440a      	add	r2, r1
 80068ea:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80068ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80068fa:	bf00      	nop
 80068fc:	3724      	adds	r7, #36	; 0x24
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	08006e88 	.word	0x08006e88
 800690c:	08006e90 	.word	0x08006e90

08006910 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006910:	b084      	sub	sp, #16
 8006912:	b580      	push	{r7, lr}
 8006914:	b084      	sub	sp, #16
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	f107 001c 	add.w	r0, r7, #28
 800691e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006924:	2b01      	cmp	r3, #1
 8006926:	d122      	bne.n	800696e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800693c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006952:	2b01      	cmp	r3, #1
 8006954:	d105      	bne.n	8006962 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fa1e 	bl	8006da4 <USB_CoreReset>
 8006968:	4603      	mov	r3, r0
 800696a:	73fb      	strb	r3, [r7, #15]
 800696c:	e01a      	b.n	80069a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fa12 	bl	8006da4 <USB_CoreReset>
 8006980:	4603      	mov	r3, r0
 8006982:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006986:	2b00      	cmp	r3, #0
 8006988:	d106      	bne.n	8006998 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	639a      	str	r2, [r3, #56]	; 0x38
 8006996:	e005      	b.n	80069a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069b0:	b004      	add	sp, #16
 80069b2:	4770      	bx	lr

080069b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f023 0201 	bic.w	r2, r3, #1
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b082      	sub	sp, #8
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	460b      	mov	r3, r1
 80069e0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80069ee:	78fb      	ldrb	r3, [r7, #3]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d106      	bne.n	8006a02 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	60da      	str	r2, [r3, #12]
 8006a00:	e00b      	b.n	8006a1a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a02:	78fb      	ldrb	r3, [r7, #3]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d106      	bne.n	8006a16 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	60da      	str	r2, [r3, #12]
 8006a14:	e001      	b.n	8006a1a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e003      	b.n	8006a22 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006a1a:	2032      	movs	r0, #50	; 0x32
 8006a1c:	f7fb fa34 	bl	8001e88 <HAL_Delay>

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b086      	sub	sp, #24
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006a3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a46:	2300      	movs	r3, #0
 8006a48:	613b      	str	r3, [r7, #16]
 8006a4a:	e009      	b.n	8006a60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	3340      	adds	r3, #64	; 0x40
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	2200      	movs	r2, #0
 8006a58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	613b      	str	r3, [r7, #16]
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	2b0e      	cmp	r3, #14
 8006a64:	d9f2      	bls.n	8006a4c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d112      	bne.n	8006a92 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a70:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	e005      	b.n	8006a9e <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a96:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab8:	461a      	mov	r2, r3
 8006aba:	680b      	ldr	r3, [r1, #0]
 8006abc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006abe:	2103      	movs	r1, #3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f93d 	bl	8006d40 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ac6:	2110      	movs	r1, #16
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f8f1 	bl	8006cb0 <USB_FlushTxFifo>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d001      	beq.n	8006ad8 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f90f 	bl	8006cfc <USB_FlushRxFifo>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aee:	461a      	mov	r2, r3
 8006af0:	2300      	movs	r3, #0
 8006af2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006afa:	461a      	mov	r2, r3
 8006afc:	2300      	movs	r3, #0
 8006afe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b06:	461a      	mov	r2, r3
 8006b08:	2300      	movs	r3, #0
 8006b0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	613b      	str	r3, [r7, #16]
 8006b10:	e043      	b.n	8006b9a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b28:	d118      	bne.n	8006b5c <USB_DevInit+0x130>
    {
      if (i == 0U)
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10a      	bne.n	8006b46 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	015a      	lsls	r2, r3, #5
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4413      	add	r3, r2
 8006b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b42:	6013      	str	r3, [r2, #0]
 8006b44:	e013      	b.n	8006b6e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b52:	461a      	mov	r2, r3
 8006b54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b58:	6013      	str	r3, [r2, #0]
 8006b5a:	e008      	b.n	8006b6e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	015a      	lsls	r2, r3, #5
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4413      	add	r3, r2
 8006b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b68:	461a      	mov	r2, r3
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	015a      	lsls	r2, r3, #5
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	4413      	add	r3, r2
 8006b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	015a      	lsls	r2, r3, #5
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	3301      	adds	r3, #1
 8006b98:	613b      	str	r3, [r7, #16]
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d3b7      	bcc.n	8006b12 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	613b      	str	r3, [r7, #16]
 8006ba6:	e043      	b.n	8006c30 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bbe:	d118      	bne.n	8006bf2 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10a      	bne.n	8006bdc <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006bd8:	6013      	str	r3, [r2, #0]
 8006bda:	e013      	b.n	8006c04 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be8:	461a      	mov	r2, r3
 8006bea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006bee:	6013      	str	r3, [r2, #0]
 8006bf0:	e008      	b.n	8006c04 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	015a      	lsls	r2, r3, #5
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bfe:	461a      	mov	r2, r3
 8006c00:	2300      	movs	r3, #0
 8006c02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c10:	461a      	mov	r2, r3
 8006c12:	2300      	movs	r3, #0
 8006c14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	015a      	lsls	r2, r3, #5
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c22:	461a      	mov	r2, r3
 8006c24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	613b      	str	r3, [r7, #16]
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d3b7      	bcc.n	8006ba8 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006c58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	f043 0210 	orr.w	r2, r3, #16
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	699a      	ldr	r2, [r3, #24]
 8006c6a:	4b10      	ldr	r3, [pc, #64]	; (8006cac <USB_DevInit+0x280>)
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d005      	beq.n	8006c84 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	f043 0208 	orr.w	r2, r3, #8
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d107      	bne.n	8006c9a <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c92:	f043 0304 	orr.w	r3, r3, #4
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3718      	adds	r7, #24
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ca6:	b004      	add	sp, #16
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	803c3800 	.word	0x803c3800

08006cb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	019b      	lsls	r3, r3, #6
 8006cc2:	f043 0220 	orr.w	r2, r3, #32
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4a09      	ldr	r2, [pc, #36]	; (8006cf8 <USB_FlushTxFifo+0x48>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d901      	bls.n	8006cdc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e006      	b.n	8006cea <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	f003 0320 	and.w	r3, r3, #32
 8006ce4:	2b20      	cmp	r3, #32
 8006ce6:	d0f0      	beq.n	8006cca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	00030d40 	.word	0x00030d40

08006cfc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006d04:	2300      	movs	r3, #0
 8006d06:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2210      	movs	r2, #16
 8006d0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3301      	adds	r3, #1
 8006d12:	60fb      	str	r3, [r7, #12]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	4a09      	ldr	r2, [pc, #36]	; (8006d3c <USB_FlushRxFifo+0x40>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d901      	bls.n	8006d20 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e006      	b.n	8006d2e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	f003 0310 	and.w	r3, r3, #16
 8006d28:	2b10      	cmp	r3, #16
 8006d2a:	d0f0      	beq.n	8006d0e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	00030d40 	.word	0x00030d40

08006d40 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	78fb      	ldrb	r3, [r7, #3]
 8006d5a:	68f9      	ldr	r1, [r7, #12]
 8006d5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d60:	4313      	orrs	r3, r2
 8006d62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b084      	sub	sp, #16
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d8c:	f043 0302 	orr.w	r3, r3, #2
 8006d90:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006d92:	2003      	movs	r0, #3
 8006d94:	f7fb f878 	bl	8001e88 <HAL_Delay>

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
	...

08006da4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	3301      	adds	r3, #1
 8006db4:	60fb      	str	r3, [r7, #12]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	4a13      	ldr	r2, [pc, #76]	; (8006e08 <USB_CoreReset+0x64>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d901      	bls.n	8006dc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e01b      	b.n	8006dfa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	daf2      	bge.n	8006db0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	f043 0201 	orr.w	r2, r3, #1
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	4a09      	ldr	r2, [pc, #36]	; (8006e08 <USB_CoreReset+0x64>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d901      	bls.n	8006dec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e006      	b.n	8006dfa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	f003 0301 	and.w	r3, r3, #1
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d0f0      	beq.n	8006dda <USB_CoreReset+0x36>

  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	00030d40 	.word	0x00030d40

08006e0c <__libc_init_array>:
 8006e0c:	b570      	push	{r4, r5, r6, lr}
 8006e0e:	4e0d      	ldr	r6, [pc, #52]	; (8006e44 <__libc_init_array+0x38>)
 8006e10:	4c0d      	ldr	r4, [pc, #52]	; (8006e48 <__libc_init_array+0x3c>)
 8006e12:	1ba4      	subs	r4, r4, r6
 8006e14:	10a4      	asrs	r4, r4, #2
 8006e16:	2500      	movs	r5, #0
 8006e18:	42a5      	cmp	r5, r4
 8006e1a:	d109      	bne.n	8006e30 <__libc_init_array+0x24>
 8006e1c:	4e0b      	ldr	r6, [pc, #44]	; (8006e4c <__libc_init_array+0x40>)
 8006e1e:	4c0c      	ldr	r4, [pc, #48]	; (8006e50 <__libc_init_array+0x44>)
 8006e20:	f000 f820 	bl	8006e64 <_init>
 8006e24:	1ba4      	subs	r4, r4, r6
 8006e26:	10a4      	asrs	r4, r4, #2
 8006e28:	2500      	movs	r5, #0
 8006e2a:	42a5      	cmp	r5, r4
 8006e2c:	d105      	bne.n	8006e3a <__libc_init_array+0x2e>
 8006e2e:	bd70      	pop	{r4, r5, r6, pc}
 8006e30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e34:	4798      	blx	r3
 8006e36:	3501      	adds	r5, #1
 8006e38:	e7ee      	b.n	8006e18 <__libc_init_array+0xc>
 8006e3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e3e:	4798      	blx	r3
 8006e40:	3501      	adds	r5, #1
 8006e42:	e7f2      	b.n	8006e2a <__libc_init_array+0x1e>
 8006e44:	08081738 	.word	0x08081738
 8006e48:	08081738 	.word	0x08081738
 8006e4c:	08081738 	.word	0x08081738
 8006e50:	0808173c 	.word	0x0808173c

08006e54 <memset>:
 8006e54:	4402      	add	r2, r0
 8006e56:	4603      	mov	r3, r0
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d100      	bne.n	8006e5e <memset+0xa>
 8006e5c:	4770      	bx	lr
 8006e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e62:	e7f9      	b.n	8006e58 <memset+0x4>

08006e64 <_init>:
 8006e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e66:	bf00      	nop
 8006e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e6a:	bc08      	pop	{r3}
 8006e6c:	469e      	mov	lr, r3
 8006e6e:	4770      	bx	lr

08006e70 <_fini>:
 8006e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e72:	bf00      	nop
 8006e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e76:	bc08      	pop	{r3}
 8006e78:	469e      	mov	lr, r3
 8006e7a:	4770      	bx	lr
