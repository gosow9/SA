
ULPWUR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078f4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00078f24  08007ab4  08007ab4  00017ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080809d8  080809d8  000a0070  2**0
                  CONTENTS
  4 .ARM          00000008  080809d8  080809d8  000909d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080809e0  080809e0  000a0070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080809e0  080809e0  000909e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080809e4  080809e4  000909e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080809e8  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000790  20000070  08080a58  000a0070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000800  08080a58  000a0800  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000a0070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000175c1  00000000  00000000  000a00a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000324c  00000000  00000000  000b7661  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012a8  00000000  00000000  000ba8b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010e8  00000000  00000000  000bbb58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002cc5b  00000000  00000000  000bcc40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012b52  00000000  00000000  000e989b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010477b  00000000  00000000  000fc3ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00200b68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000525c  00000000  00000000  00200be4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007a9c 	.word	0x08007a9c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	08007a9c 	.word	0x08007a9c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <LCDWaitForReady>:

//-----------------------------------------------------------
//Host controller function 1---Wait for host data Bus Ready
//-----------------------------------------------------------
void LCDWaitForReady()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0

	//while(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET )

	uint8_t ulData = HAL_GPIO_ReadPin(EPD_HRDY_GPIO_Port, EPD_HRDY_Pin);
 80005a6:	2120      	movs	r1, #32
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ac:	f001 ff4c 	bl	8002448 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	71fb      	strb	r3, [r7, #7]
	while(ulData == 0)
 80005b4:	e006      	b.n	80005c4 <LCDWaitForReady+0x24>
	{
		ulData = HAL_GPIO_ReadPin(EPD_HRDY_GPIO_Port, EPD_HRDY_Pin);
 80005b6:	2120      	movs	r1, #32
 80005b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005bc:	f001 ff44 	bl	8002448 <HAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	71fb      	strb	r3, [r7, #7]
	while(ulData == 0)
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f5      	beq.n	80005b6 <LCDWaitForReady+0x16>
	}
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <LCDWriteCmdCode>:

//-----------------------------------------------------------
//Host controller function 2---Write command code to host data Bus
//-----------------------------------------------------------
void LCDWriteCmdCode(uint16_t usCmdCode)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	80fb      	strh	r3, [r7, #6]
	//uint16_t wPreamble = 0x6000;


	//uint8_t wPreamble[2] = {0x00, 0x60};
	//uint8_t wDat[2] = {usCmdCode, usCmdCode>>8};
	uint8_t dat[4]={0x00, 0x60, usCmdCode, usCmdCode>>8};
 80005de:	2300      	movs	r3, #0
 80005e0:	733b      	strb	r3, [r7, #12]
 80005e2:	2360      	movs	r3, #96	; 0x60
 80005e4:	737b      	strb	r3, [r7, #13]
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	73bb      	strb	r3, [r7, #14]
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	73fb      	strb	r3, [r7, #15]
	LCDWaitForReady();
 80005f6:	f7ff ffd3 	bl	80005a0 <LCDWaitForReady>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2101      	movs	r1, #1
 80005fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000602:	f001 ff39 	bl	8002478 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, dat, 2, HAL_MAX_DELAY);
 8000606:	f107 010c 	add.w	r1, r7, #12
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	2202      	movs	r2, #2
 8000610:	4806      	ldr	r0, [pc, #24]	; (800062c <LCDWriteCmdCode+0x58>)
 8000612:	f003 fdc5 	bl	80041a0 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
	//LCDWaitForReady();
	//HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000616:	2201      	movs	r2, #1
 8000618:	2101      	movs	r1, #1
 800061a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061e:	f001 ff2b 	bl	8002478 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &CmdMsb, 1, HAL_MAX_DELAY);
	HAL_SPI_Transmit(&hspi1, &CmdLsb, 1, HAL_MAX_DELAY);

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
*/
}
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	200000c8 	.word	0x200000c8

08000630 <LCDWriteData>:

//-----------------------------------------------------------
//Host controller function 3---Write Data to host data Bus
//-----------------------------------------------------------
void LCDWriteData(uint16_t usData)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	80fb      	strh	r3, [r7, #6]

	uint8_t dat[4]={ 0x00, 0x00, (uint8_t)usData,(uint8_t)( usData>>8)};
 800063a:	2300      	movs	r3, #0
 800063c:	733b      	strb	r3, [r7, #12]
 800063e:	2300      	movs	r3, #0
 8000640:	737b      	strb	r3, [r7, #13]
 8000642:	88fb      	ldrh	r3, [r7, #6]
 8000644:	b2db      	uxtb	r3, r3
 8000646:	73bb      	strb	r3, [r7, #14]
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	0a1b      	lsrs	r3, r3, #8
 800064c:	b29b      	uxth	r3, r3
 800064e:	b2db      	uxtb	r3, r3
 8000650:	73fb      	strb	r3, [r7, #15]
	//uint8_t wPreamble[2] = {0x00, 0x00};
	//uint8_t wDat[2] = { (uint8_t)usData,(uint8_t)( usData>>8)};
	LCDWaitForReady();
 8000652:	f7ff ffa5 	bl	80005a0 <LCDWaitForReady>

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2101      	movs	r1, #1
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f001 ff0b 	bl	8002478 <HAL_GPIO_WritePin>
	//HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
	HAL_SPI_Transmit(&hspi1, dat, 2, HAL_MAX_DELAY);
 8000662:	f107 010c 	add.w	r1, r7, #12
 8000666:	f04f 33ff 	mov.w	r3, #4294967295
 800066a:	2202      	movs	r2, #2
 800066c:	4806      	ldr	r0, [pc, #24]	; (8000688 <LCDWriteData+0x58>)
 800066e:	f003 fd97 	bl	80041a0 <HAL_SPI_Transmit>
	//LCDWaitForReady();
	//HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000672:	2201      	movs	r2, #1
 8000674:	2101      	movs	r1, #1
 8000676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067a:	f001 fefd 	bl	8002478 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &DatLsb, 1, HAL_MAX_DELAY);

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	200000c8 	.word	0x200000c8

0800068c <LCDWriteNData>:

void LCDWriteNData(uint16_t* pwBuf, uint32_t ulSizeWordCnt)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
	//uint32_t i;


	uint8_t wPreamble[2] = {0x00, 0x00};
 8000696:	2300      	movs	r3, #0
 8000698:	723b      	strb	r3, [r7, #8]
 800069a:	2300      	movs	r3, #0
 800069c:	727b      	strb	r3, [r7, #9]
	//uint8_t wDat[2];
	LCDWaitForReady();
 800069e:	f7ff ff7f 	bl	80005a0 <LCDWaitForReady>
	uint8_t* Buf = (uint8_t*)pwBuf;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2101      	movs	r1, #1
 80006aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ae:	f001 fee3 	bl	8002478 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 80006b2:	f107 0108 	add.w	r1, r7, #8
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ba:	2201      	movs	r2, #1
 80006bc:	480a      	ldr	r0, [pc, #40]	; (80006e8 <LCDWriteNData+0x5c>)
 80006be:	f003 fd6f 	bl	80041a0 <HAL_SPI_Transmit>
	LCDWaitForReady();
 80006c2:	f7ff ff6d 	bl	80005a0 <LCDWaitForReady>
	HAL_SPI_Transmit_DMA(&hspi1, Buf, ulSizeWordCnt);
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	461a      	mov	r2, r3
 80006cc:	68f9      	ldr	r1, [r7, #12]
 80006ce:	4806      	ldr	r0, [pc, #24]	; (80006e8 <LCDWriteNData+0x5c>)
 80006d0:	f004 f8e0 	bl	8004894 <HAL_SPI_Transmit_DMA>
//		wDat[0]=pwBuf[i];
//		wDat[1]=pwBuf[i]>>8;
//		HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
//		}

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2101      	movs	r1, #1
 80006d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006dc:	f001 fecc 	bl	8002478 <HAL_GPIO_WritePin>
	}

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000c8 	.word	0x200000c8

080006ec <LCDReadData>:

//-----------------------------------------------------------
//Host controller function 4---Read Data from host data Bus
//-----------------------------------------------------------
uint16_t LCDReadData()
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af02      	add	r7, sp, #8

	uint8_t wRLsb[2];
	uint16_t wRData;
	uint8_t wdummy[2] = {0};
 80006f2:	2300      	movs	r3, #0
 80006f4:	813b      	strh	r3, [r7, #8]
	uint8_t rdummy[2] = {0};
 80006f6:	2300      	movs	r3, #0
 80006f8:	80bb      	strh	r3, [r7, #4]
	uint8_t wPreamble[2] = {0x00, 0x10};
 80006fa:	2300      	movs	r3, #0
 80006fc:	703b      	strb	r3, [r7, #0]
 80006fe:	2310      	movs	r3, #16
 8000700:	707b      	strb	r3, [r7, #1]

	LCDWaitForReady();
 8000702:	f7ff ff4d 	bl	80005a0 <LCDWaitForReady>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2101      	movs	r1, #1
 800070a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070e:	f001 feb3 	bl	8002478 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 8000712:	4639      	mov	r1, r7
 8000714:	f04f 33ff 	mov.w	r3, #4294967295
 8000718:	2201      	movs	r2, #1
 800071a:	4818      	ldr	r0, [pc, #96]	; (800077c <LCDReadData+0x90>)
 800071c:	f003 fd40 	bl	80041a0 <HAL_SPI_Transmit>
	LCDWaitForReady();
 8000720:	f7ff ff3e 	bl	80005a0 <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, rdummy, 1,HAL_MAX_DELAY);
 8000724:	1d3a      	adds	r2, r7, #4
 8000726:	f107 0108 	add.w	r1, r7, #8
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2301      	movs	r3, #1
 8000732:	4812      	ldr	r0, [pc, #72]	; (800077c <LCDReadData+0x90>)
 8000734:	f003 fe9a 	bl	800446c <HAL_SPI_TransmitReceive>

	LCDWaitForReady();
 8000738:	f7ff ff32 	bl	80005a0 <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, wRLsb, 1,HAL_MAX_DELAY);
 800073c:	f107 020c 	add.w	r2, r7, #12
 8000740:	f107 0108 	add.w	r1, r7, #8
 8000744:	f04f 33ff 	mov.w	r3, #4294967295
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	480b      	ldr	r0, [pc, #44]	; (800077c <LCDReadData+0x90>)
 800074e:	f003 fe8d 	bl	800446c <HAL_SPI_TransmitReceive>

	wRData = wRLsb[1]<<8;
 8000752:	7b7b      	ldrb	r3, [r7, #13]
 8000754:	b29b      	uxth	r3, r3
 8000756:	021b      	lsls	r3, r3, #8
 8000758:	81fb      	strh	r3, [r7, #14]
	wRData |= wRLsb[0];
 800075a:	7b3b      	ldrb	r3, [r7, #12]
 800075c:	b29a      	uxth	r2, r3
 800075e:	89fb      	ldrh	r3, [r7, #14]
 8000760:	4313      	orrs	r3, r2
 8000762:	81fb      	strh	r3, [r7, #14]
	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000764:	2201      	movs	r2, #1
 8000766:	2101      	movs	r1, #1
 8000768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076c:	f001 fe84 	bl	8002478 <HAL_GPIO_WritePin>

	return wRData;
 8000770:	89fb      	ldrh	r3, [r7, #14]
	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);

	return wRData;
	*/
}
 8000772:	4618      	mov	r0, r3
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200000c8 	.word	0x200000c8

08000780 <LCDReadNData>:

//-----------------------------------------------------------
//  Read Burst N words Data
//-----------------------------------------------------------
void LCDReadNData(uint16_t* pwBuf, uint32_t ulSizeWordCnt)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af02      	add	r7, sp, #8
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]

	uint32_t i;

	uint8_t wRLsb[2];
	//uint16_t wRData;
	uint8_t wdummy[2] = {0};
 800078a:	2300      	movs	r3, #0
 800078c:	82bb      	strh	r3, [r7, #20]
	uint8_t rdummy[2] = {0};
 800078e:	2300      	movs	r3, #0
 8000790:	823b      	strh	r3, [r7, #16]
	uint8_t wPreamble[2] = {0x00, 0x10};
 8000792:	2300      	movs	r3, #0
 8000794:	733b      	strb	r3, [r7, #12]
 8000796:	2310      	movs	r3, #16
 8000798:	737b      	strb	r3, [r7, #13]
	LCDWaitForReady();
 800079a:	f7ff ff01 	bl	80005a0 <LCDWaitForReady>

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2101      	movs	r1, #1
 80007a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a6:	f001 fe67 	bl	8002478 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 80007aa:	f107 010c 	add.w	r1, r7, #12
 80007ae:	f04f 33ff 	mov.w	r3, #4294967295
 80007b2:	2201      	movs	r2, #1
 80007b4:	4823      	ldr	r0, [pc, #140]	; (8000844 <LCDReadNData+0xc4>)
 80007b6:	f003 fcf3 	bl	80041a0 <HAL_SPI_Transmit>

	LCDWaitForReady();
 80007ba:	f7ff fef1 	bl	80005a0 <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, rdummy, 1,HAL_MAX_DELAY);
 80007be:	f107 0210 	add.w	r2, r7, #16
 80007c2:	f107 0114 	add.w	r1, r7, #20
 80007c6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2301      	movs	r3, #1
 80007ce:	481d      	ldr	r0, [pc, #116]	; (8000844 <LCDReadNData+0xc4>)
 80007d0:	f003 fe4c 	bl	800446c <HAL_SPI_TransmitReceive>

	LCDWaitForReady();
 80007d4:	f7ff fee4 	bl	80005a0 <LCDWaitForReady>

		for(i=0;i<ulSizeWordCnt;i++)
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
 80007dc:	e024      	b.n	8000828 <LCDReadNData+0xa8>
		{
			HAL_SPI_TransmitReceive(&hspi1, wdummy, wRLsb, 1,HAL_MAX_DELAY);
 80007de:	f107 0218 	add.w	r2, r7, #24
 80007e2:	f107 0114 	add.w	r1, r7, #20
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	2301      	movs	r3, #1
 80007ee:	4815      	ldr	r0, [pc, #84]	; (8000844 <LCDReadNData+0xc4>)
 80007f0:	f003 fe3c 	bl	800446c <HAL_SPI_TransmitReceive>
			pwBuf[i] = wRLsb[1]<<8;
 80007f4:	7e7b      	ldrb	r3, [r7, #25]
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	69fb      	ldr	r3, [r7, #28]
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	6879      	ldr	r1, [r7, #4]
 80007fe:	440b      	add	r3, r1
 8000800:	0212      	lsls	r2, r2, #8
 8000802:	b292      	uxth	r2, r2
 8000804:	801a      	strh	r2, [r3, #0]
			pwBuf[i] |= wRLsb[0];
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	8819      	ldrh	r1, [r3, #0]
 8000810:	7e3b      	ldrb	r3, [r7, #24]
 8000812:	b29a      	uxth	r2, r3
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	4403      	add	r3, r0
 800081c:	430a      	orrs	r2, r1
 800081e:	b292      	uxth	r2, r2
 8000820:	801a      	strh	r2, [r3, #0]
		for(i=0;i<ulSizeWordCnt;i++)
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3301      	adds	r3, #1
 8000826:	61fb      	str	r3, [r7, #28]
 8000828:	69fa      	ldr	r2, [r7, #28]
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	429a      	cmp	r2, r3
 800082e:	d3d6      	bcc.n	80007de <LCDReadNData+0x5e>
		}

		HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2101      	movs	r1, #1
 8000834:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000838:	f001 fe1e 	bl	8002478 <HAL_GPIO_WritePin>
	}

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 800083c:	bf00      	nop
 800083e:	3720      	adds	r7, #32
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200000c8 	.word	0x200000c8

08000848 <LCDSendCmdArg>:

//-----------------------------------------------------------
//Host controller function 5---Write command to host data Bus with aruments
//-----------------------------------------------------------
void LCDSendCmdArg(uint16_t usCmdCode,uint16_t* pArg, uint16_t usNumArg)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	80fb      	strh	r3, [r7, #6]
 8000854:	4613      	mov	r3, r2
 8000856:	80bb      	strh	r3, [r7, #4]
     uint16_t i;
     //Send Cmd code
     LCDWriteCmdCode(usCmdCode);
 8000858:	88fb      	ldrh	r3, [r7, #6]
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff feba 	bl	80005d4 <LCDWriteCmdCode>
     //Send Data
     for(i=0;i<usNumArg;i++)
 8000860:	2300      	movs	r3, #0
 8000862:	81fb      	strh	r3, [r7, #14]
 8000864:	e00a      	b.n	800087c <LCDSendCmdArg+0x34>
     {
         LCDWriteData(pArg[i]);
 8000866:	89fb      	ldrh	r3, [r7, #14]
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	683a      	ldr	r2, [r7, #0]
 800086c:	4413      	add	r3, r2
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fedd 	bl	8000630 <LCDWriteData>
     for(i=0;i<usNumArg;i++)
 8000876:	89fb      	ldrh	r3, [r7, #14]
 8000878:	3301      	adds	r3, #1
 800087a:	81fb      	strh	r3, [r7, #14]
 800087c:	89fa      	ldrh	r2, [r7, #14]
 800087e:	88bb      	ldrh	r3, [r7, #4]
 8000880:	429a      	cmp	r2, r3
 8000882:	d3f0      	bcc.n	8000866 <LCDSendCmdArg+0x1e>
     }
}
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <IT8951ReadReg>:

//-----------------------------------------------------------
//Host Cmd 4---REG_RD
//-----------------------------------------------------------
uint16_t IT8951ReadReg(uint16_t usRegAddr)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	80fb      	strh	r3, [r7, #6]
	uint16_t usData;

	//Send Cmd and Register Address
	LCDWriteCmdCode(IT8951_TCON_REG_RD);
 8000896:	2010      	movs	r0, #16
 8000898:	f7ff fe9c 	bl	80005d4 <LCDWriteCmdCode>
	LCDWriteData(usRegAddr);
 800089c:	88fb      	ldrh	r3, [r7, #6]
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fec6 	bl	8000630 <LCDWriteData>
	//Read data from Host Data bus
	usData = LCDReadData();
 80008a4:	f7ff ff22 	bl	80006ec <LCDReadData>
 80008a8:	4603      	mov	r3, r0
 80008aa:	81fb      	strh	r3, [r7, #14]
	return usData;
 80008ac:	89fb      	ldrh	r3, [r7, #14]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <IT8951WriteReg>:
//-----------------------------------------------------------
//Host Cmd 5---REG_WR
//-----------------------------------------------------------
void IT8951WriteReg(uint16_t usRegAddr,uint16_t usValue)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4603      	mov	r3, r0
 80008be:	460a      	mov	r2, r1
 80008c0:	80fb      	strh	r3, [r7, #6]
 80008c2:	4613      	mov	r3, r2
 80008c4:	80bb      	strh	r3, [r7, #4]
	//Send Cmd , Register Address and Write Value
	LCDWriteCmdCode(IT8951_TCON_REG_WR);
 80008c6:	2011      	movs	r0, #17
 80008c8:	f7ff fe84 	bl	80005d4 <LCDWriteCmdCode>
	LCDWriteData(usRegAddr);
 80008cc:	88fb      	ldrh	r3, [r7, #6]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff feae 	bl	8000630 <LCDWriteData>
	LCDWriteData(usValue);
 80008d4:	88bb      	ldrh	r3, [r7, #4]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff feaa 	bl	8000630 <LCDWriteData>
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <IT8951LoadImgAreaStart>:
}
//-----------------------------------------------------------
//Host Cmd 11---LD_IMG_AREA
//-----------------------------------------------------------
void IT8951LoadImgAreaStart(IT8951LdImgInfo* pstLdImgInfo ,IT8951AreaImgInfo* pstAreaImgInfo)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
    uint16_t usArg[5];
    //Setting Argument for Load image start
    usArg[0] = (pstLdImgInfo->usEndianType << 8 )
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	021b      	lsls	r3, r3, #8
    |(pstLdImgInfo->usPixelFormat << 4)
 80008f4:	b21a      	sxth	r2, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	885b      	ldrh	r3, [r3, #2]
 80008fa:	011b      	lsls	r3, r3, #4
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	4313      	orrs	r3, r2
 8000900:	b21a      	sxth	r2, r3
    |(pstLdImgInfo->usRotate);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	889b      	ldrh	r3, [r3, #4]
 8000906:	b21b      	sxth	r3, r3
 8000908:	4313      	orrs	r3, r2
 800090a:	b21b      	sxth	r3, r3
 800090c:	b29b      	uxth	r3, r3
    usArg[0] = (pstLdImgInfo->usEndianType << 8 )
 800090e:	81bb      	strh	r3, [r7, #12]
    usArg[1] = pstAreaImgInfo->usX;
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	81fb      	strh	r3, [r7, #14]
    usArg[2] = pstAreaImgInfo->usY;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	885b      	ldrh	r3, [r3, #2]
 800091a:	823b      	strh	r3, [r7, #16]
    usArg[3] = pstAreaImgInfo->usWidth;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	889b      	ldrh	r3, [r3, #4]
 8000920:	827b      	strh	r3, [r7, #18]
    usArg[4] = pstAreaImgInfo->usHeight;
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	88db      	ldrh	r3, [r3, #6]
 8000926:	82bb      	strh	r3, [r7, #20]
    //Send Cmd and Args
    LCDSendCmdArg(IT8951_TCON_LD_IMG_AREA , usArg , 5);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	2205      	movs	r2, #5
 800092e:	4619      	mov	r1, r3
 8000930:	2021      	movs	r0, #33	; 0x21
 8000932:	f7ff ff89 	bl	8000848 <LCDSendCmdArg>
}
 8000936:	bf00      	nop
 8000938:	3718      	adds	r7, #24
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <IT8951LoadImgEnd>:
//-----------------------------------------------------------
//Host Cmd 12---LD_IMG_END
//-----------------------------------------------------------
void IT8951LoadImgEnd(void)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	af00      	add	r7, sp, #0
    LCDWriteCmdCode(IT8951_TCON_LD_IMG_END);
 8000942:	2022      	movs	r0, #34	; 0x22
 8000944:	f7ff fe46 	bl	80005d4 <LCDWriteCmdCode>
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <GetIT8951SystemInfo>:

void GetIT8951SystemInfo(void* pBuf)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	uint16_t* pusWord = (uint16_t*)pBuf;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	60fb      	str	r3, [r7, #12]
	IT8951DevInfo* pstDevInfo;

	//Send I80 CMD
	LCDWriteCmdCode(USDEF_I80_CMD_GET_DEV_INFO);
 8000958:	f240 3002 	movw	r0, #770	; 0x302
 800095c:	f7ff fe3a 	bl	80005d4 <LCDWriteCmdCode>

	//Burst Read Request for SPI interface only
	LCDReadNData(pusWord, sizeof(IT8951DevInfo)/2);//Polling HRDY for each words(2-bytes) if possible
 8000960:	2114      	movs	r1, #20
 8000962:	68f8      	ldr	r0, [r7, #12]
 8000964:	f7ff ff0c 	bl	8000780 <LCDReadNData>

	//Show Device information of IT8951
	pstDevInfo = (IT8951DevInfo*)pBuf;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	60bb      	str	r3, [r7, #8]
	printf("Panel(W,H) = (%d,%d)\r\n",
	pstDevInfo->usPanelW, pstDevInfo->usPanelH );
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	881b      	ldrh	r3, [r3, #0]
	printf("Panel(W,H) = (%d,%d)\r\n",
 8000970:	4619      	mov	r1, r3
	pstDevInfo->usPanelW, pstDevInfo->usPanelH );
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	885b      	ldrh	r3, [r3, #2]
	printf("Panel(W,H) = (%d,%d)\r\n",
 8000976:	461a      	mov	r2, r3
 8000978:	480e      	ldr	r0, [pc, #56]	; (80009b4 <GetIT8951SystemInfo+0x68>)
 800097a:	f006 f947 	bl	8006c0c <iprintf>
	printf("Image Buffer Address = %X\r\n",
	pstDevInfo->usImgBufAddrL | (pstDevInfo->usImgBufAddrH << 16));
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	889b      	ldrh	r3, [r3, #4]
 8000982:	461a      	mov	r2, r3
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	88db      	ldrh	r3, [r3, #6]
 8000988:	041b      	lsls	r3, r3, #16
	printf("Image Buffer Address = %X\r\n",
 800098a:	4313      	orrs	r3, r2
 800098c:	4619      	mov	r1, r3
 800098e:	480a      	ldr	r0, [pc, #40]	; (80009b8 <GetIT8951SystemInfo+0x6c>)
 8000990:	f006 f93c 	bl	8006c0c <iprintf>
	//Show Firmware and LUT Version
	printf("FW Version = %s\r\n", (uint8_t*)pstDevInfo->usFWVersion);
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	3308      	adds	r3, #8
 8000998:	4619      	mov	r1, r3
 800099a:	4808      	ldr	r0, [pc, #32]	; (80009bc <GetIT8951SystemInfo+0x70>)
 800099c:	f006 f936 	bl	8006c0c <iprintf>
	printf("LUT Version = %s\r\n", (uint8_t*)pstDevInfo->usLUTVersion);
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	3318      	adds	r3, #24
 80009a4:	4619      	mov	r1, r3
 80009a6:	4806      	ldr	r0, [pc, #24]	; (80009c0 <GetIT8951SystemInfo+0x74>)
 80009a8:	f006 f930 	bl	8006c0c <iprintf>
}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	08007ab4 	.word	0x08007ab4
 80009b8:	08007acc 	.word	0x08007acc
 80009bc:	08007ae8 	.word	0x08007ae8
 80009c0:	08007afc 	.word	0x08007afc

080009c4 <IT8951SetImgBufBaseAddr>:

//-----------------------------------------------------------
//Initial function 2---Set Image buffer base address
//-----------------------------------------------------------
void IT8951SetImgBufBaseAddr(uint32_t ulImgBufAddr)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	uint16_t usWordH = (uint16_t)((ulImgBufAddr >> 16) & 0x0000FFFF);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	0c1b      	lsrs	r3, r3, #16
 80009d0:	81fb      	strh	r3, [r7, #14]
	uint16_t usWordL = (uint16_t)( ulImgBufAddr & 0x0000FFFF);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	81bb      	strh	r3, [r7, #12]
	//Write LISAR Reg
	IT8951WriteReg(LISAR + 2 ,usWordH);
 80009d6:	89fb      	ldrh	r3, [r7, #14]
 80009d8:	4619      	mov	r1, r3
 80009da:	f240 200a 	movw	r0, #522	; 0x20a
 80009de:	f7ff ff6a 	bl	80008b6 <IT8951WriteReg>
	IT8951WriteReg(LISAR ,usWordL);
 80009e2:	89bb      	ldrh	r3, [r7, #12]
 80009e4:	4619      	mov	r1, r3
 80009e6:	f44f 7002 	mov.w	r0, #520	; 0x208
 80009ea:	f7ff ff64 	bl	80008b6 <IT8951WriteReg>
}
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <IT8951WaitForDisplayReady>:
//-----------------------------------------------------------
//Display function 1---Wait for LUT Engine Finish
//                     Polling Display Engine Ready by LUTNo
//-----------------------------------------------------------
void IT8951WaitForDisplayReady()
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	af00      	add	r7, sp, #0
	//Check IT8951 Register LUTAFSR => NonZero Busy, 0 - Free
	while(IT8951ReadReg(LUTAFSR));
 80009fa:	bf00      	nop
 80009fc:	f241 2024 	movw	r0, #4644	; 0x1224
 8000a00:	f7ff ff44 	bl	800088c <IT8951ReadReg>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1f8      	bne.n	80009fc <IT8951WaitForDisplayReady+0x6>
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <IT8951HostAreaPackedPixelWrite>:

//-----------------------------------------------------------
//Display function 2---Load Image Area process
//-----------------------------------------------------------
void IT8951HostAreaPackedPixelWrite(IT8951LdImgInfo* pstLdImgInfo,IT8951AreaImgInfo* pstAreaImgInfo)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b084      	sub	sp, #16
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
 8000a16:	6039      	str	r1, [r7, #0]
	//uint32_t i,j;
	//Source buffer address of Host
	uint16_t* pusFrameBuf = (uint16_t*)pstLdImgInfo->ulStartFBAddr;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	60fb      	str	r3, [r7, #12]

	//Set Image buffer(IT8951) Base address
	IT8951SetImgBufBaseAddr(pstLdImgInfo->ulImgBufBaseAddr);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff ffce 	bl	80009c4 <IT8951SetImgBufBaseAddr>
	//Send Load Image start Cmd
	IT8951LoadImgAreaStart(pstLdImgInfo , pstAreaImgInfo);
 8000a28:	6839      	ldr	r1, [r7, #0]
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f7ff ff5a 	bl	80008e4 <IT8951LoadImgAreaStart>
	//Host Write Data
	LCDWriteNData(pusFrameBuf, (pstAreaImgInfo->usHeight*pstAreaImgInfo->usWidth/2));
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	88db      	ldrh	r3, [r3, #6]
 8000a34:	461a      	mov	r2, r3
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	889b      	ldrh	r3, [r3, #4]
 8000a3a:	fb03 f302 	mul.w	r3, r3, r2
 8000a3e:	0fda      	lsrs	r2, r3, #31
 8000a40:	4413      	add	r3, r2
 8000a42:	105b      	asrs	r3, r3, #1
 8000a44:	4619      	mov	r1, r3
 8000a46:	68f8      	ldr	r0, [r7, #12]
 8000a48:	f7ff fe20 	bl	800068c <LCDWriteNData>
					LCDWriteData(*pusFrameBuf);
					pusFrameBuf++;
			}
	}*/
	//Send Load Img End Command
	IT8951LoadImgEnd();
 8000a4c:	f7ff ff77 	bl	800093e <IT8951LoadImgEnd>
}
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <IT8951DisplayArea>:

//-----------------------------------------------------------
//Display functions 3---Application for Display panel Area
//-----------------------------------------------------------
void IT8951DisplayArea(uint16_t usX, uint16_t usY, uint16_t usW, uint16_t usH, uint16_t usDpyMode)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4604      	mov	r4, r0
 8000a60:	4608      	mov	r0, r1
 8000a62:	4611      	mov	r1, r2
 8000a64:	461a      	mov	r2, r3
 8000a66:	4623      	mov	r3, r4
 8000a68:	80fb      	strh	r3, [r7, #6]
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80bb      	strh	r3, [r7, #4]
 8000a6e:	460b      	mov	r3, r1
 8000a70:	807b      	strh	r3, [r7, #2]
 8000a72:	4613      	mov	r3, r2
 8000a74:	803b      	strh	r3, [r7, #0]
	//Send I80 Display Command (User defined command of IT8951)
	LCDWriteCmdCode(USDEF_I80_CMD_DPY_AREA); //0x0034
 8000a76:	2034      	movs	r0, #52	; 0x34
 8000a78:	f7ff fdac 	bl	80005d4 <LCDWriteCmdCode>
	//Write arguments
	LCDWriteData(usX);
 8000a7c:	88fb      	ldrh	r3, [r7, #6]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fdd6 	bl	8000630 <LCDWriteData>
	LCDWriteData(usY);
 8000a84:	88bb      	ldrh	r3, [r7, #4]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fdd2 	bl	8000630 <LCDWriteData>
	LCDWriteData(usW);
 8000a8c:	887b      	ldrh	r3, [r7, #2]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fdce 	bl	8000630 <LCDWriteData>
	LCDWriteData(usH);
 8000a94:	883b      	ldrh	r3, [r7, #0]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fdca 	bl	8000630 <LCDWriteData>
	LCDWriteData(usDpyMode);
 8000a9c:	8b3b      	ldrh	r3, [r7, #24]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fdc6 	bl	8000630 <LCDWriteData>
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd90      	pop	{r4, r7, pc}

08000aac <IT8951_Init>:

//-----------------------------------------------------------
//Test function 1---Software Initial
//-----------------------------------------------------------
uint8_t IT8951_Init()
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	//bcm2835_gpio_fsel(CS, BCM2835_GPIO_FSEL_OUTP);
	//bcm2835_gpio_fsel(HRDY, BCM2835_GPIO_FSEL_INPT);
	//bcm2835_gpio_fsel(RESET, BCM2835_GPIO_FSEL_OUTP);

	//bcm2835_gpio_write(CS, HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab8:	f001 fcde 	bl	8002478 <HAL_GPIO_WritePin>

	printf("****** IT8951 ******\n");
 8000abc:	4812      	ldr	r0, [pc, #72]	; (8000b08 <IT8951_Init+0x5c>)
 8000abe:	f006 f919 	bl	8006cf4 <puts>

	//bcm2835_gpio_write(RESET, LOW);
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2110      	movs	r1, #16
 8000ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aca:	f001 fcd5 	bl	8002478 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000ace:	2064      	movs	r0, #100	; 0x64
 8000ad0:	f000 ff82 	bl	80019d8 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2110      	movs	r1, #16
 8000ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000adc:	f001 fccc 	bl	8002478 <HAL_GPIO_WritePin>
	//bcm2835_gpio_write(RESET, HIGH);

	//Get Device Info
	GetIT8951SystemInfo(&gstI80DevInfo);
 8000ae0:	480a      	ldr	r0, [pc, #40]	; (8000b0c <IT8951_Init+0x60>)
 8000ae2:	f7ff ff33 	bl	800094c <GetIT8951SystemInfo>
//	{
//		perror("malloc error!\n");
//		return 1;
//	}

 	gulImgBufAddr = gstI80DevInfo.usImgBufAddrL | (gstI80DevInfo.usImgBufAddrH << 16);
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <IT8951_Init+0x60>)
 8000ae8:	889b      	ldrh	r3, [r3, #4]
 8000aea:	461a      	mov	r2, r3
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <IT8951_Init+0x60>)
 8000aee:	88db      	ldrh	r3, [r3, #6]
 8000af0:	041b      	lsls	r3, r3, #16
 8000af2:	4313      	orrs	r3, r2
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <IT8951_Init+0x64>)
 8000af8:	601a      	str	r2, [r3, #0]

 	//Set to Enable I80 Packed mode
 	IT8951WriteReg(I80CPCR, 0x0001);
 8000afa:	2101      	movs	r1, #1
 8000afc:	2004      	movs	r0, #4
 8000afe:	f7ff feda 	bl	80008b6 <IT8951WriteReg>
 	//EpdDriverLoadTemplate();
	return 0;
 8000b02:	2300      	movs	r3, #0
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	08007b10 	.word	0x08007b10
 8000b0c:	2000009c 	.word	0x2000009c
 8000b10:	200000c4 	.word	0x200000c4

08000b14 <EpdDriverLoadTemplate>:



extern const unsigned char Kalender[];
void EpdDriverLoadTemplate()
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af02      	add	r7, sp, #8
	IT8951LdImgInfo stLdImgInfo;
	IT8951AreaImgInfo stAreaImgInfo;
	IT8951WaitForDisplayReady();
 8000b1a:	f7ff ff6c 	bl	80009f6 <IT8951WaitForDisplayReady>

	//Setting Load image information
	stLdImgInfo.ulStartFBAddr    = (uint32_t)Kalender;
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <EpdDriverLoadTemplate+0x60>)
 8000b20:	613b      	str	r3, [r7, #16]
	stLdImgInfo.usEndianType     = IT8951_LDIMG_L_ENDIAN;
 8000b22:	2300      	movs	r3, #0
 8000b24:	813b      	strh	r3, [r7, #8]
	stLdImgInfo.usPixelFormat    = IT8951_4BPP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	817b      	strh	r3, [r7, #10]
	stLdImgInfo.usRotate         = IT8951_ROTATE_0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	81bb      	strh	r3, [r7, #12]
	stLdImgInfo.ulImgBufBaseAddr = gulImgBufAddr;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <EpdDriverLoadTemplate+0x64>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	617b      	str	r3, [r7, #20]
	//Set Load Area
	stAreaImgInfo.usX      = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	803b      	strh	r3, [r7, #0]
	stAreaImgInfo.usY      = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	807b      	strh	r3, [r7, #2]
	stAreaImgInfo.usWidth  = gstI80DevInfo.usPanelW;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <EpdDriverLoadTemplate+0x68>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	80bb      	strh	r3, [r7, #4]
 	stAreaImgInfo.usHeight = gstI80DevInfo.usPanelH;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <EpdDriverLoadTemplate+0x68>)
 8000b44:	885b      	ldrh	r3, [r3, #2]
 8000b46:	80fb      	strh	r3, [r7, #6]

	//Load Image from Host to IT8951 Image Buffer
	IT8951HostAreaPackedPixelWrite(&stLdImgInfo, &stAreaImgInfo);//Display function 2
 8000b48:	463a      	mov	r2, r7
 8000b4a:	f107 0308 	add.w	r3, r7, #8
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff5c 	bl	8000a0e <IT8951HostAreaPackedPixelWrite>
	//Display Area ?V (x,y,w,h) with mode 2 for fast gray clear mode - depends on current waveform
	IT8951DisplayArea(stAreaImgInfo.usX ,stAreaImgInfo.usY, gstI80DevInfo.usPanelW, gstI80DevInfo.usPanelH, 2);
 8000b56:	8838      	ldrh	r0, [r7, #0]
 8000b58:	8879      	ldrh	r1, [r7, #2]
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <EpdDriverLoadTemplate+0x68>)
 8000b5c:	881a      	ldrh	r2, [r3, #0]
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <EpdDriverLoadTemplate+0x68>)
 8000b60:	885c      	ldrh	r4, [r3, #2]
 8000b62:	2302      	movs	r3, #2
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	4623      	mov	r3, r4
 8000b68:	f7ff ff76 	bl	8000a58 <IT8951DisplayArea>
	//IT8951Sleep();
}
 8000b6c:	bf00      	nop
 8000b6e:	371c      	adds	r7, #28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd90      	pop	{r4, r7, pc}
 8000b74:	08007b60 	.word	0x08007b60
 8000b78:	200000c4 	.word	0x200000c4
 8000b7c:	2000009c 	.word	0x2000009c

08000b80 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b86:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <MX_DMA_Init+0x70>)
 8000b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b8a:	4a19      	ldr	r2, [pc, #100]	; (8000bf0 <MX_DMA_Init+0x70>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6493      	str	r3, [r2, #72]	; 0x48
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <MX_DMA_Init+0x70>)
 8000b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b9e:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_DMA_Init+0x70>)
 8000ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ba2:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <MX_DMA_Init+0x70>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6493      	str	r3, [r2, #72]	; 0x48
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_DMA_Init+0x70>)
 8000bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	200b      	movs	r0, #11
 8000bbc:	f001 f809 	bl	8001bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bc0:	200b      	movs	r0, #11
 8000bc2:	f001 f822 	bl	8001c0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	200c      	movs	r0, #12
 8000bcc:	f001 f801 	bl	8001bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000bd0:	200c      	movs	r0, #12
 8000bd2:	f001 f81a 	bl	8001c0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	200d      	movs	r0, #13
 8000bdc:	f000 fff9 	bl	8001bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000be0:	200d      	movs	r0, #13
 8000be2:	f001 f812 	bl	8001c0a <HAL_NVIC_EnableIRQ>

}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08e      	sub	sp, #56	; 0x38
 8000bf8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c0a:	4b98      	ldr	r3, [pc, #608]	; (8000e6c <MX_GPIO_Init+0x278>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	4a97      	ldr	r2, [pc, #604]	; (8000e6c <MX_GPIO_Init+0x278>)
 8000c10:	f043 0310 	orr.w	r3, r3, #16
 8000c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c16:	4b95      	ldr	r3, [pc, #596]	; (8000e6c <MX_GPIO_Init+0x278>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	f003 0310 	and.w	r3, r3, #16
 8000c1e:	623b      	str	r3, [r7, #32]
 8000c20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c22:	4b92      	ldr	r3, [pc, #584]	; (8000e6c <MX_GPIO_Init+0x278>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	4a91      	ldr	r2, [pc, #580]	; (8000e6c <MX_GPIO_Init+0x278>)
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2e:	4b8f      	ldr	r3, [pc, #572]	; (8000e6c <MX_GPIO_Init+0x278>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	61fb      	str	r3, [r7, #28]
 8000c38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c3a:	4b8c      	ldr	r3, [pc, #560]	; (8000e6c <MX_GPIO_Init+0x278>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	4a8b      	ldr	r2, [pc, #556]	; (8000e6c <MX_GPIO_Init+0x278>)
 8000c40:	f043 0320 	orr.w	r3, r3, #32
 8000c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c46:	4b89      	ldr	r3, [pc, #548]	; (8000e6c <MX_GPIO_Init+0x278>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	f003 0320 	and.w	r3, r3, #32
 8000c4e:	61bb      	str	r3, [r7, #24]
 8000c50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c52:	4b86      	ldr	r3, [pc, #536]	; (8000e6c <MX_GPIO_Init+0x278>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	4a85      	ldr	r2, [pc, #532]	; (8000e6c <MX_GPIO_Init+0x278>)
 8000c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5e:	4b83      	ldr	r3, [pc, #524]	; (8000e6c <MX_GPIO_Init+0x278>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b80      	ldr	r3, [pc, #512]	; (8000e6c <MX_GPIO_Init+0x278>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	4a7f      	ldr	r2, [pc, #508]	; (8000e6c <MX_GPIO_Init+0x278>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c76:	4b7d      	ldr	r3, [pc, #500]	; (8000e6c <MX_GPIO_Init+0x278>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	4b7a      	ldr	r3, [pc, #488]	; (8000e6c <MX_GPIO_Init+0x278>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	4a79      	ldr	r2, [pc, #484]	; (8000e6c <MX_GPIO_Init+0x278>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8e:	4b77      	ldr	r3, [pc, #476]	; (8000e6c <MX_GPIO_Init+0x278>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c9a:	4b74      	ldr	r3, [pc, #464]	; (8000e6c <MX_GPIO_Init+0x278>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	4a73      	ldr	r2, [pc, #460]	; (8000e6c <MX_GPIO_Init+0x278>)
 8000ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca6:	4b71      	ldr	r3, [pc, #452]	; (8000e6c <MX_GPIO_Init+0x278>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb2:	4b6e      	ldr	r3, [pc, #440]	; (8000e6c <MX_GPIO_Init+0x278>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	4a6d      	ldr	r2, [pc, #436]	; (8000e6c <MX_GPIO_Init+0x278>)
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbe:	4b6b      	ldr	r3, [pc, #428]	; (8000e6c <MX_GPIO_Init+0x278>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000cca:	f001 fe19 	bl	8002900 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EPD_CS_Pin|EPD_RST_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2111      	movs	r1, #17
 8000cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd6:	f001 fbcf 	bl	8002478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000ce0:	4863      	ldr	r0, [pc, #396]	; (8000e70 <MX_GPIO_Init+0x27c>)
 8000ce2:	f001 fbc9 	bl	8002478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2120      	movs	r1, #32
 8000cea:	4862      	ldr	r0, [pc, #392]	; (8000e74 <MX_GPIO_Init+0x280>)
 8000cec:	f001 fbc4 	bl	8002478 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE8 PE9 
                           PE10 PE11 PE12 PE13 
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8000cf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	4619      	mov	r1, r3
 8000d04:	485c      	ldr	r0, [pc, #368]	; (8000e78 <MX_GPIO_Init+0x284>)
 8000d06:	f001 fa0d 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d10:	4b5a      	ldr	r3, [pc, #360]	; (8000e7c <MX_GPIO_Init+0x288>)
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4858      	ldr	r0, [pc, #352]	; (8000e80 <MX_GPIO_Init+0x28c>)
 8000d20:	f001 fa00 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 
                           PF4 PF5 PF6 PF7 
                           PF8 PF9 PF10 PF11 
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000d24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d36:	4619      	mov	r1, r3
 8000d38:	4852      	ldr	r0, [pc, #328]	; (8000e84 <MX_GPIO_Init+0x290>)
 8000d3a:	f001 f9f3 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC5 PC6 PC7 
                           PC8 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000d3e:	f241 33ff 	movw	r3, #5119	; 0x13ff
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d44:	2303      	movs	r3, #3
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	484b      	ldr	r0, [pc, #300]	; (8000e80 <MX_GPIO_Init+0x28c>)
 8000d54:	f001 f9e6 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_RST_Pin;
 8000d58:	2311      	movs	r3, #17
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d72:	f001 f9d7 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8000d76:	f248 030c 	movw	r3, #32780	; 0x800c
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8e:	f001 f9c9 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_HRDY_Pin;
 8000d92:	2320      	movs	r3, #32
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EPD_HRDY_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da8:	f001 f9bc 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB15 
                           PB4 PB5 PB6 PB8 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8000dac:	f64b 7377 	movw	r3, #49015	; 0xbf77
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db2:	2303      	movs	r3, #3
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	482b      	ldr	r0, [pc, #172]	; (8000e70 <MX_GPIO_Init+0x27c>)
 8000dc2:	f001 f9af 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 
                           PG4 PG9 PG10 PG11 
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000dc6:	f64f 631f 	movw	r3, #65055	; 0xfe1f
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4826      	ldr	r0, [pc, #152]	; (8000e74 <MX_GPIO_Init+0x280>)
 8000ddc:	f001 f9a2 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000de0:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df6:	4619      	mov	r1, r3
 8000df8:	481d      	ldr	r0, [pc, #116]	; (8000e70 <MX_GPIO_Init+0x27c>)
 8000dfa:	f001 f993 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13 
                           PD14 PD15 PD0 PD1 
                           PD2 PD3 PD4 PD5 
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8000dfe:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e04:	2303      	movs	r3, #3
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e10:	4619      	mov	r1, r3
 8000e12:	481d      	ldr	r0, [pc, #116]	; (8000e88 <MX_GPIO_Init+0x294>)
 8000e14:	f001 f986 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e18:	2320      	movs	r3, #32
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4811      	ldr	r0, [pc, #68]	; (8000e74 <MX_GPIO_Init+0x280>)
 8000e30:	f001 f978 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e34:	2340      	movs	r3, #64	; 0x40
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e44:	4619      	mov	r1, r3
 8000e46:	480b      	ldr	r0, [pc, #44]	; (8000e74 <MX_GPIO_Init+0x280>)
 8000e48:	f001 f96c 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e50:	2303      	movs	r3, #3
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480b      	ldr	r0, [pc, #44]	; (8000e8c <MX_GPIO_Init+0x298>)
 8000e60:	f001 f960 	bl	8002124 <HAL_GPIO_Init>

}
 8000e64:	bf00      	nop
 8000e66:	3738      	adds	r7, #56	; 0x38
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	48000400 	.word	0x48000400
 8000e74:	48001800 	.word	0x48001800
 8000e78:	48001000 	.word	0x48001000
 8000e7c:	10110000 	.word	0x10110000
 8000e80:	48000800 	.word	0x48000800
 8000e84:	48001400 	.word	0x48001400
 8000e88:	48000c00 	.word	0x48000c00
 8000e8c:	48001c00 	.word	0x48001c00

08000e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e94:	f000 fd2f 	bl	80018f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e98:	f000 f818 	bl	8000ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e9c:	f7ff feaa 	bl	8000bf4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000ea0:	f000 faa2 	bl	80013e8 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000ea4:	f000 fb16 	bl	80014d4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ea8:	f000 fc66 	bl	8001778 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000eac:	f000 f8ac 	bl	8001008 <MX_SPI1_Init>
  MX_DMA_Init();
 8000eb0:	f7ff fe66 	bl	8000b80 <MX_DMA_Init>
  MX_UART4_Init();
 8000eb4:	f000 fade 	bl	8001474 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  IT8951_Init();
 8000eb8:	f7ff fdf8 	bl	8000aac <IT8951_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  EpdDriverLoadTemplate();
 8000ebc:	f7ff fe2a 	bl	8000b14 <EpdDriverLoadTemplate>
	  HAL_Delay(3000);
 8000ec0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ec4:	f000 fd88 	bl	80019d8 <HAL_Delay>
	  EpdDriverLoadTemplate();
 8000ec8:	e7f8      	b.n	8000ebc <main+0x2c>
	...

08000ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b0bc      	sub	sp, #240	; 0xf0
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ed6:	2244      	movs	r2, #68	; 0x44
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f005 fe8e 	bl	8006bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2294      	movs	r2, #148	; 0x94
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f005 fe80 	bl	8006bfc <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000efc:	2000      	movs	r0, #0
 8000efe:	f001 fc4b 	bl	8002798 <HAL_PWREx_ControlVoltageScaling>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <SystemClock_Config+0x40>
  {
    Error_Handler();
 8000f08:	f000 f876 	bl	8000ff8 <Error_Handler>
  }
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000f0c:	f001 fc14 	bl	8002738 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f10:	4b38      	ldr	r3, [pc, #224]	; (8000ff4 <SystemClock_Config+0x128>)
 8000f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f16:	4a37      	ldr	r2, [pc, #220]	; (8000ff4 <SystemClock_Config+0x128>)
 8000f18:	f023 0318 	bic.w	r3, r3, #24
 8000f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000f20:	2316      	movs	r3, #22
 8000f22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f26:	2301      	movs	r3, #1
 8000f28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f34:	2340      	movs	r3, #64	; 0x40
 8000f36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000f46:	23b0      	movs	r3, #176	; 0xb0
 8000f48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f52:	2302      	movs	r3, #2
 8000f54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 28;
 8000f5e:	231c      	movs	r3, #28
 8000f60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 fcd0 	bl	8002920 <HAL_RCC_OscConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000f86:	f000 f837 	bl	8000ff8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8a:	230f      	movs	r3, #15
 8000f8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f90:	2303      	movs	r3, #3
 8000f92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fa8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000fac:	2105      	movs	r1, #5
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f002 f8a4 	bl	80030fc <HAL_RCC_ClockConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000fba:	f000 f81d 	bl	8000ff8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
 8000fbe:	f242 032c 	movw	r3, #8236	; 0x202c
 8000fc2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8000fd0:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8000fd4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f002 fb3f 	bl	800365c <HAL_RCCEx_PeriphCLKConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000fe4:	f000 f808 	bl	8000ff8 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000fe8:	f002 fe60 	bl	8003cac <HAL_RCCEx_EnableMSIPLLMode>
}
 8000fec:	bf00      	nop
 8000fee:	37f0      	adds	r7, #240	; 0xf0
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800100c:	4b1b      	ldr	r3, [pc, #108]	; (800107c <MX_SPI1_Init+0x74>)
 800100e:	4a1c      	ldr	r2, [pc, #112]	; (8001080 <MX_SPI1_Init+0x78>)
 8001010:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <MX_SPI1_Init+0x74>)
 8001014:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001018:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <MX_SPI1_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <MX_SPI1_Init+0x74>)
 8001022:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001026:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <MX_SPI1_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <MX_SPI1_Init+0x74>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_SPI1_Init+0x74>)
 8001036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800103a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <MX_SPI1_Init+0x74>)
 800103e:	2220      	movs	r2, #32
 8001040:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_SPI1_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <MX_SPI1_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <MX_SPI1_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_SPI1_Init+0x74>)
 8001056:	2207      	movs	r2, #7
 8001058:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <MX_SPI1_Init+0x74>)
 800105c:	2200      	movs	r2, #0
 800105e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_SPI1_Init+0x74>)
 8001062:	2208      	movs	r2, #8
 8001064:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_SPI1_Init+0x74>)
 8001068:	f003 f810 	bl	800408c <HAL_SPI_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001072:	f7ff ffc1 	bl	8000ff8 <Error_Handler>
  }

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200000c8 	.word	0x200000c8
 8001080:	40013000 	.word	0x40013000

08001084 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a2d      	ldr	r2, [pc, #180]	; (8001158 <HAL_SPI_MspInit+0xd4>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d154      	bne.n	8001150 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010a6:	4b2d      	ldr	r3, [pc, #180]	; (800115c <HAL_SPI_MspInit+0xd8>)
 80010a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010aa:	4a2c      	ldr	r2, [pc, #176]	; (800115c <HAL_SPI_MspInit+0xd8>)
 80010ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010b0:	6613      	str	r3, [r2, #96]	; 0x60
 80010b2:	4b2a      	ldr	r3, [pc, #168]	; (800115c <HAL_SPI_MspInit+0xd8>)
 80010b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b27      	ldr	r3, [pc, #156]	; (800115c <HAL_SPI_MspInit+0xd8>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	4a26      	ldr	r2, [pc, #152]	; (800115c <HAL_SPI_MspInit+0xd8>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ca:	4b24      	ldr	r3, [pc, #144]	; (800115c <HAL_SPI_MspInit+0xd8>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80010d6:	23c2      	movs	r3, #194	; 0xc2
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010e6:	2305      	movs	r3, #5
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f4:	f001 f816 	bl	8002124 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80010f8:	4b19      	ldr	r3, [pc, #100]	; (8001160 <HAL_SPI_MspInit+0xdc>)
 80010fa:	4a1a      	ldr	r2, [pc, #104]	; (8001164 <HAL_SPI_MspInit+0xe0>)
 80010fc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <HAL_SPI_MspInit+0xdc>)
 8001100:	220b      	movs	r2, #11
 8001102:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001104:	4b16      	ldr	r3, [pc, #88]	; (8001160 <HAL_SPI_MspInit+0xdc>)
 8001106:	2210      	movs	r2, #16
 8001108:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_SPI_MspInit+0xdc>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001110:	4b13      	ldr	r3, [pc, #76]	; (8001160 <HAL_SPI_MspInit+0xdc>)
 8001112:	2280      	movs	r2, #128	; 0x80
 8001114:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001116:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_SPI_MspInit+0xdc>)
 8001118:	f44f 7280 	mov.w	r2, #256	; 0x100
 800111c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <HAL_SPI_MspInit+0xdc>)
 8001120:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001124:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_SPI_MspInit+0xdc>)
 8001128:	2200      	movs	r2, #0
 800112a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <HAL_SPI_MspInit+0xdc>)
 800112e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001132:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001134:	480a      	ldr	r0, [pc, #40]	; (8001160 <HAL_SPI_MspInit+0xdc>)
 8001136:	f000 fd83 	bl	8001c40 <HAL_DMA_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8001140:	f7ff ff5a 	bl	8000ff8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a06      	ldr	r2, [pc, #24]	; (8001160 <HAL_SPI_MspInit+0xdc>)
 8001148:	655a      	str	r2, [r3, #84]	; 0x54
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <HAL_SPI_MspInit+0xdc>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001150:	bf00      	nop
 8001152:	3728      	adds	r7, #40	; 0x28
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40013000 	.word	0x40013000
 800115c:	40021000 	.word	0x40021000
 8001160:	2000012c 	.word	0x2000012c
 8001164:	40020030 	.word	0x40020030

08001168 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_MspInit+0x44>)
 8001170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001172:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <HAL_MspInit+0x44>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6613      	str	r3, [r2, #96]	; 0x60
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <HAL_MspInit+0x44>)
 800117c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_MspInit+0x44>)
 8001188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118a:	4a08      	ldr	r2, [pc, #32]	; (80011ac <HAL_MspInit+0x44>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001190:	6593      	str	r3, [r2, #88]	; 0x58
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_MspInit+0x44>)
 8001194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000

080011b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <HardFault_Handler+0x4>

080011c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <MemManage_Handler+0x4>

080011ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <BusFault_Handler+0x4>

080011d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <UsageFault_Handler+0x4>

080011d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001204:	f000 fbca 	bl	800199c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <DMA1_Channel1_IRQHandler+0x10>)
 8001212:	f000 fe38 	bl	8001e86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000018c 	.word	0x2000018c

08001220 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <DMA1_Channel2_IRQHandler+0x10>)
 8001226:	f000 fe2e 	bl	8001e86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000390 	.word	0x20000390

08001234 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <DMA1_Channel3_IRQHandler+0x10>)
 800123a:	f000 fe24 	bl	8001e86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000012c 	.word	0x2000012c

08001248 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	e00a      	b.n	8001270 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800125a:	f3af 8000 	nop.w
 800125e:	4601      	mov	r1, r0
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	60ba      	str	r2, [r7, #8]
 8001266:	b2ca      	uxtb	r2, r1
 8001268:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3301      	adds	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	429a      	cmp	r2, r3
 8001276:	dbf0      	blt.n	800125a <_read+0x12>
	}

return len;
 8001278:	687b      	ldr	r3, [r7, #4]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	60f8      	str	r0, [r7, #12]
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	e009      	b.n	80012a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	60ba      	str	r2, [r7, #8]
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3301      	adds	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dbf1      	blt.n	8001294 <_write+0x12>
	}
	return len;
 80012b0:	687b      	ldr	r3, [r7, #4]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_close>:

int _close(int file)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
	return -1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012e2:	605a      	str	r2, [r3, #4]
	return 0;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <_isatty>:

int _isatty(int file)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
	return 1;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
	return 0;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <_sbrk+0x50>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <_sbrk+0x16>
		heap_end = &end;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <_sbrk+0x50>)
 8001336:	4a10      	ldr	r2, [pc, #64]	; (8001378 <_sbrk+0x54>)
 8001338:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <_sbrk+0x50>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <_sbrk+0x50>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	466a      	mov	r2, sp
 800134a:	4293      	cmp	r3, r2
 800134c:	d907      	bls.n	800135e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800134e:	f005 fc2b 	bl	8006ba8 <__errno>
 8001352:	4602      	mov	r2, r0
 8001354:	230c      	movs	r3, #12
 8001356:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001358:	f04f 33ff 	mov.w	r3, #4294967295
 800135c:	e006      	b.n	800136c <_sbrk+0x48>
	}

	heap_end += incr;
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <_sbrk+0x50>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	4a03      	ldr	r2, [pc, #12]	; (8001374 <_sbrk+0x50>)
 8001368:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800136a:	68fb      	ldr	r3, [r7, #12]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	2000008c 	.word	0x2000008c
 8001378:	20000800 	.word	0x20000800

0800137c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <SystemInit+0x64>)
 8001382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001386:	4a16      	ldr	r2, [pc, #88]	; (80013e0 <SystemInit+0x64>)
 8001388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800138c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <SystemInit+0x68>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a13      	ldr	r2, [pc, #76]	; (80013e4 <SystemInit+0x68>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <SystemInit+0x68>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <SystemInit+0x68>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a0f      	ldr	r2, [pc, #60]	; (80013e4 <SystemInit+0x68>)
 80013a8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80013ac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80013b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <SystemInit+0x68>)
 80013b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013b8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <SystemInit+0x68>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a09      	ldr	r2, [pc, #36]	; (80013e4 <SystemInit+0x68>)
 80013c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80013c6:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <SystemInit+0x68>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <SystemInit+0x64>)
 80013ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013d2:	609a      	str	r2, [r3, #8]
#endif
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000ed00 	.word	0xe000ed00
 80013e4:	40021000 	.word	0x40021000

080013e8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_uart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 80013ec:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <MX_LPUART1_UART_Init+0x80>)
 80013ee:	4a1f      	ldr	r2, [pc, #124]	; (800146c <MX_LPUART1_UART_Init+0x84>)
 80013f0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <MX_LPUART1_UART_Init+0x80>)
 80013f4:	4a1e      	ldr	r2, [pc, #120]	; (8001470 <MX_LPUART1_UART_Init+0x88>)
 80013f6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80013f8:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <MX_LPUART1_UART_Init+0x80>)
 80013fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013fe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <MX_LPUART1_UART_Init+0x80>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <MX_LPUART1_UART_Init+0x80>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <MX_LPUART1_UART_Init+0x80>)
 800140e:	220c      	movs	r2, #12
 8001410:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <MX_LPUART1_UART_Init+0x80>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <MX_LPUART1_UART_Init+0x80>)
 800141a:	2200      	movs	r2, #0
 800141c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800141e:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_LPUART1_UART_Init+0x80>)
 8001420:	2200      	movs	r2, #0
 8001422:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001424:	4b10      	ldr	r3, [pc, #64]	; (8001468 <MX_LPUART1_UART_Init+0x80>)
 8001426:	2200      	movs	r2, #0
 8001428:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_LPUART1_UART_Init+0x80>)
 800142c:	2200      	movs	r2, #0
 800142e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001430:	480d      	ldr	r0, [pc, #52]	; (8001468 <MX_LPUART1_UART_Init+0x80>)
 8001432:	f003 fcd7 	bl	8004de4 <HAL_UART_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800143c:	f7ff fddc 	bl	8000ff8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001440:	2100      	movs	r1, #0
 8001442:	4809      	ldr	r0, [pc, #36]	; (8001468 <MX_LPUART1_UART_Init+0x80>)
 8001444:	f005 f84d 	bl	80064e2 <HAL_UARTEx_SetTxFifoThreshold>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800144e:	f7ff fdd3 	bl	8000ff8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001452:	2100      	movs	r1, #0
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <MX_LPUART1_UART_Init+0x80>)
 8001456:	f005 f882 	bl	800655e <HAL_UARTEx_SetRxFifoThreshold>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001460:	f7ff fdca 	bl	8000ff8 <Error_Handler>
  }

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000278 	.word	0x20000278
 800146c:	40008000 	.word	0x40008000
 8001470:	00033324 	.word	0x00033324

08001474 <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <MX_UART4_Init+0x58>)
 800147a:	4a15      	ldr	r2, [pc, #84]	; (80014d0 <MX_UART4_Init+0x5c>)
 800147c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <MX_UART4_Init+0x58>)
 8001480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001484:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_UART4_Init+0x58>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <MX_UART4_Init+0x58>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_UART4_Init+0x58>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_UART4_Init+0x58>)
 800149a:	220c      	movs	r2, #12
 800149c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <MX_UART4_Init+0x58>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_UART4_Init+0x58>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <MX_UART4_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_UART4_Init+0x58>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_UART4_Init+0x58>)
 80014b8:	f003 fc94 	bl	8004de4 <HAL_UART_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80014c2:	f7ff fd99 	bl	8000ff8 <Error_Handler>
  }

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000304 	.word	0x20000304
 80014d0:	40004c00 	.word	0x40004c00

080014d4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80014d8:	4b22      	ldr	r3, [pc, #136]	; (8001564 <MX_USART3_UART_Init+0x90>)
 80014da:	4a23      	ldr	r2, [pc, #140]	; (8001568 <MX_USART3_UART_Init+0x94>)
 80014dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014de:	4b21      	ldr	r3, [pc, #132]	; (8001564 <MX_USART3_UART_Init+0x90>)
 80014e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014e6:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <MX_USART3_UART_Init+0x90>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014ec:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <MX_USART3_UART_Init+0x90>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <MX_USART3_UART_Init+0x90>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <MX_USART3_UART_Init+0x90>)
 80014fa:	220c      	movs	r2, #12
 80014fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <MX_USART3_UART_Init+0x90>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <MX_USART3_UART_Init+0x90>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800150a:	4b16      	ldr	r3, [pc, #88]	; (8001564 <MX_USART3_UART_Init+0x90>)
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <MX_USART3_UART_Init+0x90>)
 8001512:	2200      	movs	r2, #0
 8001514:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <MX_USART3_UART_Init+0x90>)
 8001518:	2200      	movs	r2, #0
 800151a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800151c:	4811      	ldr	r0, [pc, #68]	; (8001564 <MX_USART3_UART_Init+0x90>)
 800151e:	f003 fc61 	bl	8004de4 <HAL_UART_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001528:	f7ff fd66 	bl	8000ff8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800152c:	2100      	movs	r1, #0
 800152e:	480d      	ldr	r0, [pc, #52]	; (8001564 <MX_USART3_UART_Init+0x90>)
 8001530:	f004 ffd7 	bl	80064e2 <HAL_UARTEx_SetTxFifoThreshold>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800153a:	f7ff fd5d 	bl	8000ff8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800153e:	2100      	movs	r1, #0
 8001540:	4808      	ldr	r0, [pc, #32]	; (8001564 <MX_USART3_UART_Init+0x90>)
 8001542:	f005 f80c 	bl	800655e <HAL_UARTEx_SetRxFifoThreshold>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800154c:	f7ff fd54 	bl	8000ff8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001550:	4804      	ldr	r0, [pc, #16]	; (8001564 <MX_USART3_UART_Init+0x90>)
 8001552:	f004 ff8d 	bl	8006470 <HAL_UARTEx_DisableFifoMode>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800155c:	f7ff fd4c 	bl	8000ff8 <Error_Handler>
  }

}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200001ec 	.word	0x200001ec
 8001568:	40004800 	.word	0x40004800

0800156c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08e      	sub	sp, #56	; 0x38
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a70      	ldr	r2, [pc, #448]	; (800174c <HAL_UART_MspInit+0x1e0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d12b      	bne.n	80015e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800158e:	4b70      	ldr	r3, [pc, #448]	; (8001750 <HAL_UART_MspInit+0x1e4>)
 8001590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001592:	4a6f      	ldr	r2, [pc, #444]	; (8001750 <HAL_UART_MspInit+0x1e4>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	65d3      	str	r3, [r2, #92]	; 0x5c
 800159a:	4b6d      	ldr	r3, [pc, #436]	; (8001750 <HAL_UART_MspInit+0x1e4>)
 800159c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	623b      	str	r3, [r7, #32]
 80015a4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015a6:	4b6a      	ldr	r3, [pc, #424]	; (8001750 <HAL_UART_MspInit+0x1e4>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	4a69      	ldr	r2, [pc, #420]	; (8001750 <HAL_UART_MspInit+0x1e4>)
 80015ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b2:	4b67      	ldr	r3, [pc, #412]	; (8001750 <HAL_UART_MspInit+0x1e4>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ba:	61fb      	str	r3, [r7, #28]
 80015bc:	69fb      	ldr	r3, [r7, #28]
    HAL_PWREx_EnableVddIO2();
 80015be:	f001 f99f 	bl	8002900 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80015c2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d0:	2303      	movs	r3, #3
 80015d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80015d4:	2308      	movs	r3, #8
 80015d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015dc:	4619      	mov	r1, r3
 80015de:	485d      	ldr	r0, [pc, #372]	; (8001754 <HAL_UART_MspInit+0x1e8>)
 80015e0:	f000 fda0 	bl	8002124 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015e4:	e0ae      	b.n	8001744 <HAL_UART_MspInit+0x1d8>
  else if(uartHandle->Instance==UART4)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a5b      	ldr	r2, [pc, #364]	; (8001758 <HAL_UART_MspInit+0x1ec>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d17b      	bne.n	80016e8 <HAL_UART_MspInit+0x17c>
    __HAL_RCC_UART4_CLK_ENABLE();
 80015f0:	4b57      	ldr	r3, [pc, #348]	; (8001750 <HAL_UART_MspInit+0x1e4>)
 80015f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f4:	4a56      	ldr	r2, [pc, #344]	; (8001750 <HAL_UART_MspInit+0x1e4>)
 80015f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015fa:	6593      	str	r3, [r2, #88]	; 0x58
 80015fc:	4b54      	ldr	r3, [pc, #336]	; (8001750 <HAL_UART_MspInit+0x1e4>)
 80015fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001600:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001604:	61bb      	str	r3, [r7, #24]
 8001606:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001608:	4b51      	ldr	r3, [pc, #324]	; (8001750 <HAL_UART_MspInit+0x1e4>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160c:	4a50      	ldr	r2, [pc, #320]	; (8001750 <HAL_UART_MspInit+0x1e4>)
 800160e:	f043 0304 	orr.w	r3, r3, #4
 8001612:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001614:	4b4e      	ldr	r3, [pc, #312]	; (8001750 <HAL_UART_MspInit+0x1e4>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001620:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800162a:	2301      	movs	r3, #1
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001632:	2308      	movs	r3, #8
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163a:	4619      	mov	r1, r3
 800163c:	4847      	ldr	r0, [pc, #284]	; (800175c <HAL_UART_MspInit+0x1f0>)
 800163e:	f000 fd71 	bl	8002124 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Channel1;
 8001642:	4b47      	ldr	r3, [pc, #284]	; (8001760 <HAL_UART_MspInit+0x1f4>)
 8001644:	4a47      	ldr	r2, [pc, #284]	; (8001764 <HAL_UART_MspInit+0x1f8>)
 8001646:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001648:	4b45      	ldr	r3, [pc, #276]	; (8001760 <HAL_UART_MspInit+0x1f4>)
 800164a:	221e      	movs	r2, #30
 800164c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800164e:	4b44      	ldr	r3, [pc, #272]	; (8001760 <HAL_UART_MspInit+0x1f4>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001654:	4b42      	ldr	r3, [pc, #264]	; (8001760 <HAL_UART_MspInit+0x1f4>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800165a:	4b41      	ldr	r3, [pc, #260]	; (8001760 <HAL_UART_MspInit+0x1f4>)
 800165c:	2280      	movs	r2, #128	; 0x80
 800165e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001660:	4b3f      	ldr	r3, [pc, #252]	; (8001760 <HAL_UART_MspInit+0x1f4>)
 8001662:	2200      	movs	r2, #0
 8001664:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001666:	4b3e      	ldr	r3, [pc, #248]	; (8001760 <HAL_UART_MspInit+0x1f4>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800166c:	4b3c      	ldr	r3, [pc, #240]	; (8001760 <HAL_UART_MspInit+0x1f4>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001672:	4b3b      	ldr	r3, [pc, #236]	; (8001760 <HAL_UART_MspInit+0x1f4>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001678:	4839      	ldr	r0, [pc, #228]	; (8001760 <HAL_UART_MspInit+0x1f4>)
 800167a:	f000 fae1 	bl	8001c40 <HAL_DMA_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_UART_MspInit+0x11c>
      Error_Handler();
 8001684:	f7ff fcb8 	bl	8000ff8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a35      	ldr	r2, [pc, #212]	; (8001760 <HAL_UART_MspInit+0x1f4>)
 800168c:	679a      	str	r2, [r3, #120]	; 0x78
 800168e:	4a34      	ldr	r2, [pc, #208]	; (8001760 <HAL_UART_MspInit+0x1f4>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_uart4_tx.Instance = DMA1_Channel2;
 8001694:	4b34      	ldr	r3, [pc, #208]	; (8001768 <HAL_UART_MspInit+0x1fc>)
 8001696:	4a35      	ldr	r2, [pc, #212]	; (800176c <HAL_UART_MspInit+0x200>)
 8001698:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 800169a:	4b33      	ldr	r3, [pc, #204]	; (8001768 <HAL_UART_MspInit+0x1fc>)
 800169c:	221f      	movs	r2, #31
 800169e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016a0:	4b31      	ldr	r3, [pc, #196]	; (8001768 <HAL_UART_MspInit+0x1fc>)
 80016a2:	2210      	movs	r2, #16
 80016a4:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a6:	4b30      	ldr	r3, [pc, #192]	; (8001768 <HAL_UART_MspInit+0x1fc>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016ac:	4b2e      	ldr	r3, [pc, #184]	; (8001768 <HAL_UART_MspInit+0x1fc>)
 80016ae:	2280      	movs	r2, #128	; 0x80
 80016b0:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016b2:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <HAL_UART_MspInit+0x1fc>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016b8:	4b2b      	ldr	r3, [pc, #172]	; (8001768 <HAL_UART_MspInit+0x1fc>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80016be:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <HAL_UART_MspInit+0x1fc>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016c4:	4b28      	ldr	r3, [pc, #160]	; (8001768 <HAL_UART_MspInit+0x1fc>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80016ca:	4827      	ldr	r0, [pc, #156]	; (8001768 <HAL_UART_MspInit+0x1fc>)
 80016cc:	f000 fab8 	bl	8001c40 <HAL_DMA_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_UART_MspInit+0x16e>
      Error_Handler();
 80016d6:	f7ff fc8f 	bl	8000ff8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a22      	ldr	r2, [pc, #136]	; (8001768 <HAL_UART_MspInit+0x1fc>)
 80016de:	675a      	str	r2, [r3, #116]	; 0x74
 80016e0:	4a21      	ldr	r2, [pc, #132]	; (8001768 <HAL_UART_MspInit+0x1fc>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80016e6:	e02d      	b.n	8001744 <HAL_UART_MspInit+0x1d8>
  else if(uartHandle->Instance==USART3)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a20      	ldr	r2, [pc, #128]	; (8001770 <HAL_UART_MspInit+0x204>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d128      	bne.n	8001744 <HAL_UART_MspInit+0x1d8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_UART_MspInit+0x1e4>)
 80016f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f6:	4a16      	ldr	r2, [pc, #88]	; (8001750 <HAL_UART_MspInit+0x1e4>)
 80016f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016fc:	6593      	str	r3, [r2, #88]	; 0x58
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <HAL_UART_MspInit+0x1e4>)
 8001700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <HAL_UART_MspInit+0x1e4>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	4a10      	ldr	r2, [pc, #64]	; (8001750 <HAL_UART_MspInit+0x1e4>)
 8001710:	f043 0308 	orr.w	r3, r3, #8
 8001714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HAL_UART_MspInit+0x1e4>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001722:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001734:	2307      	movs	r3, #7
 8001736:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173c:	4619      	mov	r1, r3
 800173e:	480d      	ldr	r0, [pc, #52]	; (8001774 <HAL_UART_MspInit+0x208>)
 8001740:	f000 fcf0 	bl	8002124 <HAL_GPIO_Init>
}
 8001744:	bf00      	nop
 8001746:	3738      	adds	r7, #56	; 0x38
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40008000 	.word	0x40008000
 8001750:	40021000 	.word	0x40021000
 8001754:	48001800 	.word	0x48001800
 8001758:	40004c00 	.word	0x40004c00
 800175c:	48000800 	.word	0x48000800
 8001760:	2000018c 	.word	0x2000018c
 8001764:	40020008 	.word	0x40020008
 8001768:	20000390 	.word	0x20000390
 800176c:	4002001c 	.word	0x4002001c
 8001770:	40004800 	.word	0x40004800
 8001774:	48000c00 	.word	0x48000c00

08001778 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800177e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001782:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001784:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001786:	2206      	movs	r2, #6
 8001788:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800178c:	2202      	movs	r2, #2
 800178e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001790:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001792:	2201      	movs	r2, #1
 8001794:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800179e:	2200      	movs	r2, #0
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80017b6:	f000 fe77 	bl	80024a8 <HAL_PCD_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 80017c0:	f7ff fc1a 	bl	8000ff8 <Error_Handler>
  }

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200003f0 	.word	0x200003f0

080017cc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017ec:	d154      	bne.n	8001898 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	4b2c      	ldr	r3, [pc, #176]	; (80018a0 <HAL_PCD_MspInit+0xd4>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	4a2b      	ldr	r2, [pc, #172]	; (80018a0 <HAL_PCD_MspInit+0xd4>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017fa:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <HAL_PCD_MspInit+0xd4>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001806:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800180a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180c:	2302      	movs	r3, #2
 800180e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001818:	230a      	movs	r3, #10
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001826:	f000 fc7d 	bl	8002124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800182a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800182e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001830:	2300      	movs	r3, #0
 8001832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4619      	mov	r1, r3
 800183e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001842:	f000 fc6f 	bl	8002124 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001846:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <HAL_PCD_MspInit+0xd4>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	4a15      	ldr	r2, [pc, #84]	; (80018a0 <HAL_PCD_MspInit+0xd4>)
 800184c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001852:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <HAL_PCD_MspInit+0xd4>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <HAL_PCD_MspInit+0xd4>)
 8001860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d114      	bne.n	8001894 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <HAL_PCD_MspInit+0xd4>)
 800186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186e:	4a0c      	ldr	r2, [pc, #48]	; (80018a0 <HAL_PCD_MspInit+0xd4>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001874:	6593      	str	r3, [r2, #88]	; 0x58
 8001876:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <HAL_PCD_MspInit+0xd4>)
 8001878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001882:	f001 f82d 	bl	80028e0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_PCD_MspInit+0xd4>)
 8001888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188a:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <HAL_PCD_MspInit+0xd4>)
 800188c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001890:	6593      	str	r3, [r2, #88]	; 0x58
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001892:	e001      	b.n	8001898 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001894:	f001 f824 	bl	80028e0 <HAL_PWREx_EnableVddUSB>
}
 8001898:	bf00      	nop
 800189a:	3728      	adds	r7, #40	; 0x28
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40021000 	.word	0x40021000

080018a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018dc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80018a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80018aa:	e003      	b.n	80018b4 <LoopCopyDataInit>

080018ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80018ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018b2:	3104      	adds	r1, #4

080018b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018b4:	480b      	ldr	r0, [pc, #44]	; (80018e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80018b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018bc:	d3f6      	bcc.n	80018ac <CopyDataInit>
	ldr	r2, =_sbss
 80018be:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80018c0:	e002      	b.n	80018c8 <LoopFillZerobss>

080018c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018c4:	f842 3b04 	str.w	r3, [r2], #4

080018c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <LoopForever+0x16>)
	cmp	r2, r3
 80018ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018cc:	d3f9      	bcc.n	80018c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018ce:	f7ff fd55 	bl	800137c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018d2:	f005 f96f 	bl	8006bb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018d6:	f7ff fadb 	bl	8000e90 <main>

080018da <LoopForever>:

LoopForever:
    b LoopForever
 80018da:	e7fe      	b.n	80018da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018dc:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80018e0:	080809e8 	.word	0x080809e8
	ldr	r0, =_sdata
 80018e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80018e8:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80018ec:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80018f0:	20000800 	.word	0x20000800

080018f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018f4:	e7fe      	b.n	80018f4 <ADC1_IRQHandler>

080018f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001900:	2003      	movs	r0, #3
 8001902:	f000 f95b 	bl	8001bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001906:	2000      	movs	r0, #0
 8001908:	f000 f80e 	bl	8001928 <HAL_InitTick>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	71fb      	strb	r3, [r7, #7]
 8001916:	e001      	b.n	800191c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001918:	f7ff fc26 	bl	8001168 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800191c:	79fb      	ldrb	r3, [r7, #7]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001934:	4b16      	ldr	r3, [pc, #88]	; (8001990 <HAL_InitTick+0x68>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d022      	beq.n	8001982 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800193c:	4b15      	ldr	r3, [pc, #84]	; (8001994 <HAL_InitTick+0x6c>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b13      	ldr	r3, [pc, #76]	; (8001990 <HAL_InitTick+0x68>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001948:	fbb1 f3f3 	udiv	r3, r1, r3
 800194c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001950:	4618      	mov	r0, r3
 8001952:	f000 f968 	bl	8001c26 <HAL_SYSTICK_Config>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10f      	bne.n	800197c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b0f      	cmp	r3, #15
 8001960:	d809      	bhi.n	8001976 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001962:	2200      	movs	r2, #0
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	f04f 30ff 	mov.w	r0, #4294967295
 800196a:	f000 f932 	bl	8001bd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800196e:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <HAL_InitTick+0x70>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	e007      	b.n	8001986 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	73fb      	strb	r3, [r7, #15]
 800197a:	e004      	b.n	8001986 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	73fb      	strb	r3, [r7, #15]
 8001980:	e001      	b.n	8001986 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001986:	7bfb      	ldrb	r3, [r7, #15]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000008 	.word	0x20000008
 8001994:	20000000 	.word	0x20000000
 8001998:	20000004 	.word	0x20000004

0800199c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_IncTick+0x1c>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_IncTick+0x20>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4413      	add	r3, r2
 80019aa:	4a03      	ldr	r2, [pc, #12]	; (80019b8 <HAL_IncTick+0x1c>)
 80019ac:	6013      	str	r3, [r2, #0]
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	200007f8 	.word	0x200007f8
 80019bc:	20000008 	.word	0x20000008

080019c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return uwTick;
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <HAL_GetTick+0x14>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	200007f8 	.word	0x200007f8

080019d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e0:	f7ff ffee 	bl	80019c0 <HAL_GetTick>
 80019e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f0:	d004      	beq.n	80019fc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_Delay+0x40>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	4413      	add	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019fc:	bf00      	nop
 80019fe:	f7ff ffdf 	bl	80019c0 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d8f7      	bhi.n	80019fe <HAL_Delay+0x26>
  {
  }
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000008 	.word	0x20000008

08001a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <__NVIC_SetPriorityGrouping+0x44>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4e:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <__NVIC_SetPriorityGrouping+0x44>)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	60d3      	str	r3, [r2, #12]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <__NVIC_GetPriorityGrouping+0x18>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	f003 0307 	and.w	r3, r3, #7
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	db0b      	blt.n	8001aaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	f003 021f 	and.w	r2, r3, #31
 8001a98:	4907      	ldr	r1, [pc, #28]	; (8001ab8 <__NVIC_EnableIRQ+0x38>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	095b      	lsrs	r3, r3, #5
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000e100 	.word	0xe000e100

08001abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	6039      	str	r1, [r7, #0]
 8001ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	db0a      	blt.n	8001ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	490c      	ldr	r1, [pc, #48]	; (8001b08 <__NVIC_SetPriority+0x4c>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	0112      	lsls	r2, r2, #4
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	440b      	add	r3, r1
 8001ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae4:	e00a      	b.n	8001afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4908      	ldr	r1, [pc, #32]	; (8001b0c <__NVIC_SetPriority+0x50>)
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	3b04      	subs	r3, #4
 8001af4:	0112      	lsls	r2, r2, #4
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	440b      	add	r3, r1
 8001afa:	761a      	strb	r2, [r3, #24]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000e100 	.word	0xe000e100
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	; 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f1c3 0307 	rsb	r3, r3, #7
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	bf28      	it	cs
 8001b2e:	2304      	movcs	r3, #4
 8001b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3304      	adds	r3, #4
 8001b36:	2b06      	cmp	r3, #6
 8001b38:	d902      	bls.n	8001b40 <NVIC_EncodePriority+0x30>
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3b03      	subs	r3, #3
 8001b3e:	e000      	b.n	8001b42 <NVIC_EncodePriority+0x32>
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	f04f 32ff 	mov.w	r2, #4294967295
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	401a      	ands	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b58:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	43d9      	mvns	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	4313      	orrs	r3, r2
         );
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3724      	adds	r7, #36	; 0x24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b88:	d301      	bcc.n	8001b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00f      	b.n	8001bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <SysTick_Config+0x40>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b96:	210f      	movs	r1, #15
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f7ff ff8e 	bl	8001abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba6:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba8:	2207      	movs	r2, #7
 8001baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	e000e010 	.word	0xe000e010

08001bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ff29 	bl	8001a1c <__NVIC_SetPriorityGrouping>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001be4:	f7ff ff3e 	bl	8001a64 <__NVIC_GetPriorityGrouping>
 8001be8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	6978      	ldr	r0, [r7, #20]
 8001bf0:	f7ff ff8e 	bl	8001b10 <NVIC_EncodePriority>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff5d 	bl	8001abc <__NVIC_SetPriority>
}
 8001c02:	bf00      	nop
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff31 	bl	8001a80 <__NVIC_EnableIRQ>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff ffa2 	bl	8001b78 <SysTick_Config>
 8001c34:	4603      	mov	r3, r0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e08d      	b.n	8001d6e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b47      	ldr	r3, [pc, #284]	; (8001d78 <HAL_DMA_Init+0x138>)
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d80f      	bhi.n	8001c7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	4b45      	ldr	r3, [pc, #276]	; (8001d7c <HAL_DMA_Init+0x13c>)
 8001c66:	4413      	add	r3, r2
 8001c68:	4a45      	ldr	r2, [pc, #276]	; (8001d80 <HAL_DMA_Init+0x140>)
 8001c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6e:	091b      	lsrs	r3, r3, #4
 8001c70:	009a      	lsls	r2, r3, #2
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a42      	ldr	r2, [pc, #264]	; (8001d84 <HAL_DMA_Init+0x144>)
 8001c7a:	641a      	str	r2, [r3, #64]	; 0x40
 8001c7c:	e00e      	b.n	8001c9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	4b40      	ldr	r3, [pc, #256]	; (8001d88 <HAL_DMA_Init+0x148>)
 8001c86:	4413      	add	r3, r2
 8001c88:	4a3d      	ldr	r2, [pc, #244]	; (8001d80 <HAL_DMA_Init+0x140>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	091b      	lsrs	r3, r3, #4
 8001c90:	009a      	lsls	r2, r3, #2
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a3c      	ldr	r2, [pc, #240]	; (8001d8c <HAL_DMA_Init+0x14c>)
 8001c9a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f9b6 	bl	8002060 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cfc:	d102      	bne.n	8001d04 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d18:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d010      	beq.n	8001d44 <HAL_DMA_Init+0x104>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d80c      	bhi.n	8001d44 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f9d6 	bl	80020dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	e008      	b.n	8001d56 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40020407 	.word	0x40020407
 8001d7c:	bffdfff8 	.word	0xbffdfff8
 8001d80:	cccccccd 	.word	0xcccccccd
 8001d84:	40020000 	.word	0x40020000
 8001d88:	bffdfbf8 	.word	0xbffdfbf8
 8001d8c:	40020400 	.word	0x40020400

08001d90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
 8001d9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_DMA_Start_IT+0x20>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e066      	b.n	8001e7e <HAL_DMA_Start_IT+0xee>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d155      	bne.n	8001e70 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0201 	bic.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	68b9      	ldr	r1, [r7, #8]
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 f8fb 	bl	8001fe4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d008      	beq.n	8001e08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f042 020e 	orr.w	r2, r2, #14
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	e00f      	b.n	8001e28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0204 	bic.w	r2, r2, #4
 8001e16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 020a 	orr.w	r2, r2, #10
 8001e26:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d007      	beq.n	8001e46 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e44:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e5c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 0201 	orr.w	r2, r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	e005      	b.n	8001e7c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f003 031c 	and.w	r3, r3, #28
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d026      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x7a>
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d021      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0320 	and.w	r3, r3, #32
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d107      	bne.n	8001eda <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0204 	bic.w	r2, r2, #4
 8001ed8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	f003 021c 	and.w	r2, r3, #28
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	2104      	movs	r1, #4
 8001ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8001eec:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d071      	beq.n	8001fda <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001efe:	e06c      	b.n	8001fda <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	f003 031c 	and.w	r3, r3, #28
 8001f08:	2202      	movs	r2, #2
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d02e      	beq.n	8001f72 <HAL_DMA_IRQHandler+0xec>
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d029      	beq.n	8001f72 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0320 	and.w	r3, r3, #32
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10b      	bne.n	8001f44 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 020a 	bic.w	r2, r2, #10
 8001f3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f48:	f003 021c 	and.w	r2, r3, #28
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	2102      	movs	r1, #2
 8001f52:	fa01 f202 	lsl.w	r2, r1, r2
 8001f56:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d038      	beq.n	8001fda <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f70:	e033      	b.n	8001fda <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	f003 031c 	and.w	r3, r3, #28
 8001f7a:	2208      	movs	r2, #8
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d02a      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x156>
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d025      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 020e 	bic.w	r2, r2, #14
 8001f9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa4:	f003 021c 	and.w	r2, r3, #28
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	2101      	movs	r1, #1
 8001fae:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d004      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001fda:	bf00      	nop
 8001fdc:	bf00      	nop
}
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ffa:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	2b00      	cmp	r3, #0
 8002002:	d004      	beq.n	800200e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800200c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	f003 021c 	and.w	r2, r3, #28
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	2101      	movs	r1, #1
 800201c:	fa01 f202 	lsl.w	r2, r1, r2
 8002020:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b10      	cmp	r3, #16
 8002030:	d108      	bne.n	8002044 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002042:	e007      	b.n	8002054 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	60da      	str	r2, [r3, #12]
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	4b17      	ldr	r3, [pc, #92]	; (80020cc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002070:	429a      	cmp	r2, r3
 8002072:	d80a      	bhi.n	800208a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002080:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6493      	str	r3, [r2, #72]	; 0x48
 8002088:	e007      	b.n	800209a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	009a      	lsls	r2, r3, #2
 8002092:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002094:	4413      	add	r3, r2
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	3b08      	subs	r3, #8
 80020a2:	4a0c      	ldr	r2, [pc, #48]	; (80020d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80020a4:	fba2 2303 	umull	r2, r3, r2, r3
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80020b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1CU);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f003 031c 	and.w	r3, r3, #28
 80020b8:	2201      	movs	r2, #1
 80020ba:	409a      	lsls	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	40020407 	.word	0x40020407
 80020d0:	4002081c 	.word	0x4002081c
 80020d4:	cccccccd 	.word	0xcccccccd
 80020d8:	40020880 	.word	0x40020880

080020dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4b0b      	ldr	r3, [pc, #44]	; (800211c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	461a      	mov	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a08      	ldr	r2, [pc, #32]	; (8002120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80020fe:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	3b01      	subs	r3, #1
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	2201      	movs	r2, #1
 800210a:	409a      	lsls	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	1000823f 	.word	0x1000823f
 8002120:	40020940 	.word	0x40020940

08002124 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002132:	e166      	b.n	8002402 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	2101      	movs	r1, #1
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	4013      	ands	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8158 	beq.w	80023fc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b02      	cmp	r3, #2
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x38>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b12      	cmp	r3, #18
 800215a:	d123      	bne.n	80021a4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	08da      	lsrs	r2, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3208      	adds	r2, #8
 8002164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	220f      	movs	r2, #15
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	08da      	lsrs	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3208      	adds	r2, #8
 800219e:	6939      	ldr	r1, [r7, #16]
 80021a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0203 	and.w	r2, r3, #3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d00b      	beq.n	80021f8 <HAL_GPIO_Init+0xd4>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d007      	beq.n	80021f8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021ec:	2b11      	cmp	r3, #17
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b12      	cmp	r3, #18
 80021f6:	d130      	bne.n	800225a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	2203      	movs	r2, #3
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800222e:	2201      	movs	r2, #1
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	091b      	lsrs	r3, r3, #4
 8002244:	f003 0201 	and.w	r2, r3, #1
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	2203      	movs	r2, #3
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4013      	ands	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80b2 	beq.w	80023fc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002298:	4b61      	ldr	r3, [pc, #388]	; (8002420 <HAL_GPIO_Init+0x2fc>)
 800229a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229c:	4a60      	ldr	r2, [pc, #384]	; (8002420 <HAL_GPIO_Init+0x2fc>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6613      	str	r3, [r2, #96]	; 0x60
 80022a4:	4b5e      	ldr	r3, [pc, #376]	; (8002420 <HAL_GPIO_Init+0x2fc>)
 80022a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022b0:	4a5c      	ldr	r2, [pc, #368]	; (8002424 <HAL_GPIO_Init+0x300>)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	089b      	lsrs	r3, r3, #2
 80022b6:	3302      	adds	r3, #2
 80022b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	220f      	movs	r2, #15
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022da:	d02b      	beq.n	8002334 <HAL_GPIO_Init+0x210>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a52      	ldr	r2, [pc, #328]	; (8002428 <HAL_GPIO_Init+0x304>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d025      	beq.n	8002330 <HAL_GPIO_Init+0x20c>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a51      	ldr	r2, [pc, #324]	; (800242c <HAL_GPIO_Init+0x308>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d01f      	beq.n	800232c <HAL_GPIO_Init+0x208>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a50      	ldr	r2, [pc, #320]	; (8002430 <HAL_GPIO_Init+0x30c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d019      	beq.n	8002328 <HAL_GPIO_Init+0x204>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a4f      	ldr	r2, [pc, #316]	; (8002434 <HAL_GPIO_Init+0x310>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d013      	beq.n	8002324 <HAL_GPIO_Init+0x200>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a4e      	ldr	r2, [pc, #312]	; (8002438 <HAL_GPIO_Init+0x314>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d00d      	beq.n	8002320 <HAL_GPIO_Init+0x1fc>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a4d      	ldr	r2, [pc, #308]	; (800243c <HAL_GPIO_Init+0x318>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d007      	beq.n	800231c <HAL_GPIO_Init+0x1f8>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a4c      	ldr	r2, [pc, #304]	; (8002440 <HAL_GPIO_Init+0x31c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d101      	bne.n	8002318 <HAL_GPIO_Init+0x1f4>
 8002314:	2307      	movs	r3, #7
 8002316:	e00e      	b.n	8002336 <HAL_GPIO_Init+0x212>
 8002318:	2308      	movs	r3, #8
 800231a:	e00c      	b.n	8002336 <HAL_GPIO_Init+0x212>
 800231c:	2306      	movs	r3, #6
 800231e:	e00a      	b.n	8002336 <HAL_GPIO_Init+0x212>
 8002320:	2305      	movs	r3, #5
 8002322:	e008      	b.n	8002336 <HAL_GPIO_Init+0x212>
 8002324:	2304      	movs	r3, #4
 8002326:	e006      	b.n	8002336 <HAL_GPIO_Init+0x212>
 8002328:	2303      	movs	r3, #3
 800232a:	e004      	b.n	8002336 <HAL_GPIO_Init+0x212>
 800232c:	2302      	movs	r3, #2
 800232e:	e002      	b.n	8002336 <HAL_GPIO_Init+0x212>
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <HAL_GPIO_Init+0x212>
 8002334:	2300      	movs	r3, #0
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	f002 0203 	and.w	r2, r2, #3
 800233c:	0092      	lsls	r2, r2, #2
 800233e:	4093      	lsls	r3, r2
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002346:	4937      	ldr	r1, [pc, #220]	; (8002424 <HAL_GPIO_Init+0x300>)
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	089b      	lsrs	r3, r3, #2
 800234c:	3302      	adds	r3, #2
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002354:	4b3b      	ldr	r3, [pc, #236]	; (8002444 <HAL_GPIO_Init+0x320>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	43db      	mvns	r3, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4013      	ands	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002378:	4a32      	ldr	r2, [pc, #200]	; (8002444 <HAL_GPIO_Init+0x320>)
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800237e:	4b31      	ldr	r3, [pc, #196]	; (8002444 <HAL_GPIO_Init+0x320>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	43db      	mvns	r3, r3
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4013      	ands	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023a2:	4a28      	ldr	r2, [pc, #160]	; (8002444 <HAL_GPIO_Init+0x320>)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023a8:	4b26      	ldr	r3, [pc, #152]	; (8002444 <HAL_GPIO_Init+0x320>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023cc:	4a1d      	ldr	r2, [pc, #116]	; (8002444 <HAL_GPIO_Init+0x320>)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023d2:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <HAL_GPIO_Init+0x320>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	43db      	mvns	r3, r3
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4013      	ands	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023f6:	4a13      	ldr	r2, [pc, #76]	; (8002444 <HAL_GPIO_Init+0x320>)
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	3301      	adds	r3, #1
 8002400:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	f47f ae91 	bne.w	8002134 <HAL_GPIO_Init+0x10>
  }
}
 8002412:	bf00      	nop
 8002414:	371c      	adds	r7, #28
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	40010000 	.word	0x40010000
 8002428:	48000400 	.word	0x48000400
 800242c:	48000800 	.word	0x48000800
 8002430:	48000c00 	.word	0x48000c00
 8002434:	48001000 	.word	0x48001000
 8002438:	48001400 	.word	0x48001400
 800243c:	48001800 	.word	0x48001800
 8002440:	48001c00 	.word	0x48001c00
 8002444:	40010400 	.word	0x40010400

08002448 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	887b      	ldrh	r3, [r7, #2]
 800245a:	4013      	ands	r3, r2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
 8002464:	e001      	b.n	800246a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800246a:	7bfb      	ldrb	r3, [r7, #15]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	807b      	strh	r3, [r7, #2]
 8002484:	4613      	mov	r3, r2
 8002486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002488:	787b      	ldrb	r3, [r7, #1]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800248e:	887a      	ldrh	r2, [r7, #2]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002494:	e002      	b.n	800249c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002496:	887a      	ldrh	r2, [r7, #2]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024aa:	b08f      	sub	sp, #60	; 0x3c
 80024ac:	af0a      	add	r7, sp, #40	; 0x28
 80024ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e116      	b.n	80026e8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d106      	bne.n	80024da <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff f979 	bl	80017cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2203      	movs	r2, #3
 80024de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d102      	bne.n	80024f4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f004 f929 	bl	8006750 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	687e      	ldr	r6, [r7, #4]
 8002506:	466d      	mov	r5, sp
 8002508:	f106 0410 	add.w	r4, r6, #16
 800250c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800250e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002514:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002518:	e885 0003 	stmia.w	r5, {r0, r1}
 800251c:	1d33      	adds	r3, r6, #4
 800251e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002520:	6838      	ldr	r0, [r7, #0]
 8002522:	f004 f8c3 	bl	80066ac <USB_CoreInit>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0d7      	b.n	80026e8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2100      	movs	r1, #0
 800253e:	4618      	mov	r0, r3
 8002540:	f004 f917 	bl	8006772 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002544:	2300      	movs	r3, #0
 8002546:	73fb      	strb	r3, [r7, #15]
 8002548:	e04a      	b.n	80025e0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800254a:	7bfa      	ldrb	r2, [r7, #15]
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	1a9b      	subs	r3, r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	333d      	adds	r3, #61	; 0x3d
 800255a:	2201      	movs	r2, #1
 800255c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800255e:	7bfa      	ldrb	r2, [r7, #15]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	1a9b      	subs	r3, r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	333c      	adds	r3, #60	; 0x3c
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002572:	7bfa      	ldrb	r2, [r7, #15]
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	b298      	uxth	r0, r3
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	3342      	adds	r3, #66	; 0x42
 8002586:	4602      	mov	r2, r0
 8002588:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	1a9b      	subs	r3, r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	333f      	adds	r3, #63	; 0x3f
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800259e:	7bfa      	ldrb	r2, [r7, #15]
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	1a9b      	subs	r3, r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	3344      	adds	r3, #68	; 0x44
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025b2:	7bfa      	ldrb	r2, [r7, #15]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	3348      	adds	r3, #72	; 0x48
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	3350      	adds	r3, #80	; 0x50
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	3301      	adds	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d3af      	bcc.n	800254a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ea:	2300      	movs	r3, #0
 80025ec:	73fb      	strb	r3, [r7, #15]
 80025ee:	e044      	b.n	800267a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025f0:	7bfa      	ldrb	r2, [r7, #15]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002606:	7bfa      	ldrb	r2, [r7, #15]
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	4613      	mov	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	1a9b      	subs	r3, r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	440b      	add	r3, r1
 8002614:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800261c:	7bfa      	ldrb	r2, [r7, #15]
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	1a9b      	subs	r3, r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800262e:	2200      	movs	r2, #0
 8002630:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002632:	7bfa      	ldrb	r2, [r7, #15]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002648:	7bfa      	ldrb	r2, [r7, #15]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	1a9b      	subs	r3, r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800265e:	7bfa      	ldrb	r2, [r7, #15]
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	1a9b      	subs	r3, r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	440b      	add	r3, r1
 800266c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	3301      	adds	r3, #1
 8002678:	73fb      	strb	r3, [r7, #15]
 800267a:	7bfa      	ldrb	r2, [r7, #15]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	429a      	cmp	r2, r3
 8002682:	d3b5      	bcc.n	80025f0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	603b      	str	r3, [r7, #0]
 800268a:	687e      	ldr	r6, [r7, #4]
 800268c:	466d      	mov	r5, sp
 800268e:	f106 0410 	add.w	r4, r6, #16
 8002692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800269a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800269e:	e885 0003 	stmia.w	r5, {r0, r1}
 80026a2:	1d33      	adds	r3, r6, #4
 80026a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026a6:	6838      	ldr	r0, [r7, #0]
 80026a8:	f004 f88e 	bl	80067c8 <USB_DevInit>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d005      	beq.n	80026be <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2202      	movs	r2, #2
 80026b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e014      	b.n	80026e8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d102      	bne.n	80026dc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f80a 	bl	80026f0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f004 fa14 	bl	8006b0e <USB_DevDisconnect>

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002722:	f043 0303 	orr.w	r3, r3, #3
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a04      	ldr	r2, [pc, #16]	; (8002754 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002746:	6013      	str	r3, [r2, #0]
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40007000 	.word	0x40007000

08002758 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800275c:	4b0d      	ldr	r3, [pc, #52]	; (8002794 <HAL_PWREx_GetVoltageRange+0x3c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002768:	d102      	bne.n	8002770 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800276a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800276e:	e00b      	b.n	8002788 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800277e:	d102      	bne.n	8002786 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002784:	e000      	b.n	8002788 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002786:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002788:	4618      	mov	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40007000 	.word	0x40007000

08002798 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d141      	bne.n	800282a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027a6:	4b4b      	ldr	r3, [pc, #300]	; (80028d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b2:	d131      	bne.n	8002818 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027b4:	4b47      	ldr	r3, [pc, #284]	; (80028d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027ba:	4a46      	ldr	r2, [pc, #280]	; (80028d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027c4:	4b43      	ldr	r3, [pc, #268]	; (80028d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027cc:	4a41      	ldr	r2, [pc, #260]	; (80028d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80027d4:	4b40      	ldr	r3, [pc, #256]	; (80028d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2232      	movs	r2, #50	; 0x32
 80027da:	fb02 f303 	mul.w	r3, r2, r3
 80027de:	4a3f      	ldr	r2, [pc, #252]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	0c9b      	lsrs	r3, r3, #18
 80027e6:	3301      	adds	r3, #1
 80027e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027ea:	e002      	b.n	80027f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027f2:	4b38      	ldr	r3, [pc, #224]	; (80028d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fe:	d102      	bne.n	8002806 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f2      	bne.n	80027ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002806:	4b33      	ldr	r3, [pc, #204]	; (80028d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002812:	d158      	bne.n	80028c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e057      	b.n	80028c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002818:	4b2e      	ldr	r3, [pc, #184]	; (80028d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800281a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800281e:	4a2d      	ldr	r2, [pc, #180]	; (80028d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002824:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002828:	e04d      	b.n	80028c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002830:	d141      	bne.n	80028b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002832:	4b28      	ldr	r3, [pc, #160]	; (80028d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800283a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800283e:	d131      	bne.n	80028a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002840:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002846:	4a23      	ldr	r2, [pc, #140]	; (80028d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002850:	4b20      	ldr	r3, [pc, #128]	; (80028d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002858:	4a1e      	ldr	r2, [pc, #120]	; (80028d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800285a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800285e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002860:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2232      	movs	r2, #50	; 0x32
 8002866:	fb02 f303 	mul.w	r3, r2, r3
 800286a:	4a1c      	ldr	r2, [pc, #112]	; (80028dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	0c9b      	lsrs	r3, r3, #18
 8002872:	3301      	adds	r3, #1
 8002874:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002876:	e002      	b.n	800287e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	3b01      	subs	r3, #1
 800287c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800288a:	d102      	bne.n	8002892 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f2      	bne.n	8002878 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002892:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800289e:	d112      	bne.n	80028c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e011      	b.n	80028c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028aa:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80028b4:	e007      	b.n	80028c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028be:	4a05      	ldr	r2, [pc, #20]	; (80028d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028c4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	40007000 	.word	0x40007000
 80028d8:	20000000 	.word	0x20000000
 80028dc:	431bde83 	.word	0x431bde83

080028e0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	4a04      	ldr	r2, [pc, #16]	; (80028fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80028ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ee:	6053      	str	r3, [r2, #4]
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40007000 	.word	0x40007000

08002900 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002904:	4b05      	ldr	r3, [pc, #20]	; (800291c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4a04      	ldr	r2, [pc, #16]	; (800291c <HAL_PWREx_EnableVddIO2+0x1c>)
 800290a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800290e:	6053      	str	r3, [r2, #4]
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40007000 	.word	0x40007000

08002920 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e3db      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002932:	4ba4      	ldr	r3, [pc, #656]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
 800293a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800293c:	4ba1      	ldr	r3, [pc, #644]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 80e1 	beq.w	8002b16 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d007      	beq.n	800296a <HAL_RCC_OscConfig+0x4a>
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	2b0c      	cmp	r3, #12
 800295e:	f040 8088 	bne.w	8002a72 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2b01      	cmp	r3, #1
 8002966:	f040 8084 	bne.w	8002a72 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800296a:	4b96      	ldr	r3, [pc, #600]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d005      	beq.n	8002982 <HAL_RCC_OscConfig+0x62>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e3b3      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1a      	ldr	r2, [r3, #32]
 8002986:	4b8f      	ldr	r3, [pc, #572]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d004      	beq.n	800299c <HAL_RCC_OscConfig+0x7c>
 8002992:	4b8c      	ldr	r3, [pc, #560]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800299a:	e005      	b.n	80029a8 <HAL_RCC_OscConfig+0x88>
 800299c:	4b89      	ldr	r3, [pc, #548]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 800299e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a2:	091b      	lsrs	r3, r3, #4
 80029a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d223      	bcs.n	80029f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 fd91 	bl	80034d8 <RCC_SetFlashLatencyFromMSIRange>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e394      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029c0:	4b80      	ldr	r3, [pc, #512]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a7f      	ldr	r2, [pc, #508]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 80029c6:	f043 0308 	orr.w	r3, r3, #8
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	4b7d      	ldr	r3, [pc, #500]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	497a      	ldr	r1, [pc, #488]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029de:	4b79      	ldr	r3, [pc, #484]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	021b      	lsls	r3, r3, #8
 80029ec:	4975      	ldr	r1, [pc, #468]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	604b      	str	r3, [r1, #4]
 80029f2:	e022      	b.n	8002a3a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029f4:	4b73      	ldr	r3, [pc, #460]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a72      	ldr	r2, [pc, #456]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 80029fa:	f043 0308 	orr.w	r3, r3, #8
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b70      	ldr	r3, [pc, #448]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	496d      	ldr	r1, [pc, #436]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a12:	4b6c      	ldr	r3, [pc, #432]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	4968      	ldr	r1, [pc, #416]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 fd54 	bl	80034d8 <RCC_SetFlashLatencyFromMSIRange>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e357      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a3a:	f000 fc8b 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8002a3e:	4601      	mov	r1, r0
 8002a40:	4b60      	ldr	r3, [pc, #384]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	4a5f      	ldr	r2, [pc, #380]	; (8002bc8 <HAL_RCC_OscConfig+0x2a8>)
 8002a4c:	5cd3      	ldrb	r3, [r2, r3]
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	fa21 f303 	lsr.w	r3, r1, r3
 8002a56:	4a5d      	ldr	r2, [pc, #372]	; (8002bcc <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a5a:	4b5d      	ldr	r3, [pc, #372]	; (8002bd0 <HAL_RCC_OscConfig+0x2b0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe ff62 	bl	8001928 <HAL_InitTick>
 8002a64:	4603      	mov	r3, r0
 8002a66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d052      	beq.n	8002b14 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	e33b      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d032      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a7a:	4b52      	ldr	r3, [pc, #328]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a51      	ldr	r2, [pc, #324]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a86:	f7fe ff9b 	bl	80019c0 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a8e:	f7fe ff97 	bl	80019c0 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e324      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002aa0:	4b48      	ldr	r3, [pc, #288]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aac:	4b45      	ldr	r3, [pc, #276]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a44      	ldr	r2, [pc, #272]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002ab2:	f043 0308 	orr.w	r3, r3, #8
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	4b42      	ldr	r3, [pc, #264]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	493f      	ldr	r1, [pc, #252]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aca:	4b3e      	ldr	r3, [pc, #248]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	021b      	lsls	r3, r3, #8
 8002ad8:	493a      	ldr	r1, [pc, #232]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	604b      	str	r3, [r1, #4]
 8002ade:	e01a      	b.n	8002b16 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ae0:	4b38      	ldr	r3, [pc, #224]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a37      	ldr	r2, [pc, #220]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002ae6:	f023 0301 	bic.w	r3, r3, #1
 8002aea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002aec:	f7fe ff68 	bl	80019c0 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002af4:	f7fe ff64 	bl	80019c0 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e2f1      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b06:	4b2f      	ldr	r3, [pc, #188]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x1d4>
 8002b12:	e000      	b.n	8002b16 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d074      	beq.n	8002c0c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d005      	beq.n	8002b34 <HAL_RCC_OscConfig+0x214>
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	2b0c      	cmp	r3, #12
 8002b2c:	d10e      	bne.n	8002b4c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d10b      	bne.n	8002b4c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b34:	4b23      	ldr	r3, [pc, #140]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d064      	beq.n	8002c0a <HAL_RCC_OscConfig+0x2ea>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d160      	bne.n	8002c0a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e2ce      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b54:	d106      	bne.n	8002b64 <HAL_RCC_OscConfig+0x244>
 8002b56:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a1a      	ldr	r2, [pc, #104]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	e01d      	b.n	8002ba0 <HAL_RCC_OscConfig+0x280>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b6c:	d10c      	bne.n	8002b88 <HAL_RCC_OscConfig+0x268>
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a14      	ldr	r2, [pc, #80]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a11      	ldr	r2, [pc, #68]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	e00b      	b.n	8002ba0 <HAL_RCC_OscConfig+0x280>
 8002b88:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a0d      	ldr	r2, [pc, #52]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <HAL_RCC_OscConfig+0x2a4>)
 8002b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d01c      	beq.n	8002be2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe ff0a 	bl	80019c0 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bae:	e011      	b.n	8002bd4 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb0:	f7fe ff06 	bl	80019c0 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b64      	cmp	r3, #100	; 0x64
 8002bbc:	d90a      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e293      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	080808f8 	.word	0x080808f8
 8002bcc:	20000000 	.word	0x20000000
 8002bd0:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bd4:	4bae      	ldr	r3, [pc, #696]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0e7      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x290>
 8002be0:	e014      	b.n	8002c0c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7fe feed 	bl	80019c0 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bea:	f7fe fee9 	bl	80019c0 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b64      	cmp	r3, #100	; 0x64
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e276      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bfc:	4ba4      	ldr	r3, [pc, #656]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1f0      	bne.n	8002bea <HAL_RCC_OscConfig+0x2ca>
 8002c08:	e000      	b.n	8002c0c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d060      	beq.n	8002cda <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d005      	beq.n	8002c2a <HAL_RCC_OscConfig+0x30a>
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	2b0c      	cmp	r3, #12
 8002c22:	d119      	bne.n	8002c58 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d116      	bne.n	8002c58 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c2a:	4b99      	ldr	r3, [pc, #612]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d005      	beq.n	8002c42 <HAL_RCC_OscConfig+0x322>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e253      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c42:	4b93      	ldr	r3, [pc, #588]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	061b      	lsls	r3, r3, #24
 8002c50:	498f      	ldr	r1, [pc, #572]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c56:	e040      	b.n	8002cda <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d023      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c60:	4b8b      	ldr	r3, [pc, #556]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a8a      	ldr	r2, [pc, #552]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6c:	f7fe fea8 	bl	80019c0 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c74:	f7fe fea4 	bl	80019c0 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e231      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c86:	4b82      	ldr	r3, [pc, #520]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c92:	4b7f      	ldr	r3, [pc, #508]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	061b      	lsls	r3, r3, #24
 8002ca0:	497b      	ldr	r1, [pc, #492]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	604b      	str	r3, [r1, #4]
 8002ca6:	e018      	b.n	8002cda <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ca8:	4b79      	ldr	r3, [pc, #484]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a78      	ldr	r2, [pc, #480]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002cae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fe84 	bl	80019c0 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cbc:	f7fe fe80 	bl	80019c0 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e20d      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cce:	4b70      	ldr	r3, [pc, #448]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d03c      	beq.n	8002d60 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d01c      	beq.n	8002d28 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cee:	4b68      	ldr	r3, [pc, #416]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf4:	4a66      	ldr	r2, [pc, #408]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfe:	f7fe fe5f 	bl	80019c0 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d06:	f7fe fe5b 	bl	80019c0 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e1e8      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d18:	4b5d      	ldr	r3, [pc, #372]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0ef      	beq.n	8002d06 <HAL_RCC_OscConfig+0x3e6>
 8002d26:	e01b      	b.n	8002d60 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d28:	4b59      	ldr	r3, [pc, #356]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d2e:	4a58      	ldr	r2, [pc, #352]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d38:	f7fe fe42 	bl	80019c0 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d40:	f7fe fe3e 	bl	80019c0 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e1cb      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d52:	4b4f      	ldr	r3, [pc, #316]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1ef      	bne.n	8002d40 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 80a5 	beq.w	8002eb8 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d72:	4b47      	ldr	r3, [pc, #284]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10d      	bne.n	8002d9a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d7e:	4b44      	ldr	r3, [pc, #272]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d82:	4a43      	ldr	r2, [pc, #268]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d88:	6593      	str	r3, [r2, #88]	; 0x58
 8002d8a:	4b41      	ldr	r3, [pc, #260]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d96:	2301      	movs	r3, #1
 8002d98:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d9a:	4b3e      	ldr	r3, [pc, #248]	; (8002e94 <HAL_RCC_OscConfig+0x574>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d118      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002da6:	4b3b      	ldr	r3, [pc, #236]	; (8002e94 <HAL_RCC_OscConfig+0x574>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a3a      	ldr	r2, [pc, #232]	; (8002e94 <HAL_RCC_OscConfig+0x574>)
 8002dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db2:	f7fe fe05 	bl	80019c0 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dba:	f7fe fe01 	bl	80019c0 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e18e      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dcc:	4b31      	ldr	r3, [pc, #196]	; (8002e94 <HAL_RCC_OscConfig+0x574>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d108      	bne.n	8002df2 <HAL_RCC_OscConfig+0x4d2>
 8002de0:	4b2b      	ldr	r3, [pc, #172]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de6:	4a2a      	ldr	r2, [pc, #168]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002df0:	e024      	b.n	8002e3c <HAL_RCC_OscConfig+0x51c>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b05      	cmp	r3, #5
 8002df8:	d110      	bne.n	8002e1c <HAL_RCC_OscConfig+0x4fc>
 8002dfa:	4b25      	ldr	r3, [pc, #148]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e00:	4a23      	ldr	r2, [pc, #140]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002e02:	f043 0304 	orr.w	r3, r3, #4
 8002e06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e0a:	4b21      	ldr	r3, [pc, #132]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e10:	4a1f      	ldr	r2, [pc, #124]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e1a:	e00f      	b.n	8002e3c <HAL_RCC_OscConfig+0x51c>
 8002e1c:	4b1c      	ldr	r3, [pc, #112]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e22:	4a1b      	ldr	r2, [pc, #108]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002e24:	f023 0301 	bic.w	r3, r3, #1
 8002e28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e2c:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e32:	4a17      	ldr	r2, [pc, #92]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002e34:	f023 0304 	bic.w	r3, r3, #4
 8002e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d016      	beq.n	8002e72 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e44:	f7fe fdbc 	bl	80019c0 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e4a:	e00a      	b.n	8002e62 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4c:	f7fe fdb8 	bl	80019c0 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e143      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e62:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <HAL_RCC_OscConfig+0x570>)
 8002e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0ed      	beq.n	8002e4c <HAL_RCC_OscConfig+0x52c>
 8002e70:	e019      	b.n	8002ea6 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e72:	f7fe fda5 	bl	80019c0 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e78:	e00e      	b.n	8002e98 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7a:	f7fe fda1 	bl	80019c0 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d905      	bls.n	8002e98 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e12c      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e98:	4b96      	ldr	r3, [pc, #600]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1e9      	bne.n	8002e7a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ea6:	7ffb      	ldrb	r3, [r7, #31]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d105      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eac:	4b91      	ldr	r3, [pc, #580]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8002eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb0:	4a90      	ldr	r2, [pc, #576]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8002eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0320 	and.w	r3, r3, #32
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d03c      	beq.n	8002f3e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01c      	beq.n	8002f06 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ecc:	4b89      	ldr	r3, [pc, #548]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8002ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ed2:	4a88      	ldr	r2, [pc, #544]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002edc:	f7fe fd70 	bl	80019c0 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ee4:	f7fe fd6c 	bl	80019c0 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e0f9      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ef6:	4b7f      	ldr	r3, [pc, #508]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8002ef8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0ef      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x5c4>
 8002f04:	e01b      	b.n	8002f3e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f06:	4b7b      	ldr	r3, [pc, #492]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8002f08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f0c:	4a79      	ldr	r2, [pc, #484]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f16:	f7fe fd53 	bl	80019c0 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f1e:	f7fe fd4f 	bl	80019c0 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e0dc      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f30:	4b70      	ldr	r3, [pc, #448]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8002f32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1ef      	bne.n	8002f1e <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 80d0 	beq.w	80030e8 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	2b0c      	cmp	r3, #12
 8002f4c:	f000 808d 	beq.w	800306a <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d15a      	bne.n	800300e <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f58:	4b66      	ldr	r3, [pc, #408]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a65      	ldr	r2, [pc, #404]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8002f5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7fe fd2c 	bl	80019c0 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6c:	f7fe fd28 	bl	80019c0 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e0b5      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f7e:	4b5d      	ldr	r3, [pc, #372]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f8a:	4b5a      	ldr	r3, [pc, #360]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	4b5a      	ldr	r3, [pc, #360]	; (80030f8 <HAL_RCC_OscConfig+0x7d8>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f9a:	3a01      	subs	r2, #1
 8002f9c:	0112      	lsls	r2, r2, #4
 8002f9e:	4311      	orrs	r1, r2
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fa4:	0212      	lsls	r2, r2, #8
 8002fa6:	4311      	orrs	r1, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fac:	0852      	lsrs	r2, r2, #1
 8002fae:	3a01      	subs	r2, #1
 8002fb0:	0552      	lsls	r2, r2, #21
 8002fb2:	4311      	orrs	r1, r2
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fb8:	0852      	lsrs	r2, r2, #1
 8002fba:	3a01      	subs	r2, #1
 8002fbc:	0652      	lsls	r2, r2, #25
 8002fbe:	4311      	orrs	r1, r2
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fc4:	06d2      	lsls	r2, r2, #27
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	494a      	ldr	r1, [pc, #296]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fce:	4b49      	ldr	r3, [pc, #292]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a48      	ldr	r2, [pc, #288]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8002fd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fd8:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fda:	4b46      	ldr	r3, [pc, #280]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	4a45      	ldr	r2, [pc, #276]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8002fe0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fe4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe6:	f7fe fceb 	bl	80019c0 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fee:	f7fe fce7 	bl	80019c0 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e074      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003000:	4b3c      	ldr	r3, [pc, #240]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x6ce>
 800300c:	e06c      	b.n	80030e8 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300e:	4b39      	ldr	r3, [pc, #228]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a38      	ldr	r2, [pc, #224]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8003014:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003018:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800301a:	4b36      	ldr	r3, [pc, #216]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d105      	bne.n	8003032 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003026:	4b33      	ldr	r3, [pc, #204]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	4a32      	ldr	r2, [pc, #200]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 800302c:	f023 0303 	bic.w	r3, r3, #3
 8003030:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003032:	4b30      	ldr	r3, [pc, #192]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	4a2f      	ldr	r2, [pc, #188]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8003038:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800303c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003040:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003042:	f7fe fcbd 	bl	80019c0 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304a:	f7fe fcb9 	bl	80019c0 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e046      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800305c:	4b25      	ldr	r3, [pc, #148]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1f0      	bne.n	800304a <HAL_RCC_OscConfig+0x72a>
 8003068:	e03e      	b.n	80030e8 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e039      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003076:	4b1f      	ldr	r3, [pc, #124]	; (80030f4 <HAL_RCC_OscConfig+0x7d4>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f003 0203 	and.w	r2, r3, #3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003086:	429a      	cmp	r2, r3
 8003088:	d12c      	bne.n	80030e4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	3b01      	subs	r3, #1
 8003096:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003098:	429a      	cmp	r2, r3
 800309a:	d123      	bne.n	80030e4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a6:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d11b      	bne.n	80030e4 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b6:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d113      	bne.n	80030e4 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c6:	085b      	lsrs	r3, r3, #1
 80030c8:	3b01      	subs	r3, #1
 80030ca:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d109      	bne.n	80030e4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	085b      	lsrs	r3, r3, #1
 80030dc:	3b01      	subs	r3, #1
 80030de:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3720      	adds	r7, #32
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000
 80030f8:	019d800c 	.word	0x019d800c

080030fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e10f      	b.n	8003334 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003114:	4b89      	ldr	r3, [pc, #548]	; (800333c <HAL_RCC_ClockConfig+0x240>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d910      	bls.n	8003144 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003122:	4b86      	ldr	r3, [pc, #536]	; (800333c <HAL_RCC_ClockConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f023 020f 	bic.w	r2, r3, #15
 800312a:	4984      	ldr	r1, [pc, #528]	; (800333c <HAL_RCC_ClockConfig+0x240>)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	4313      	orrs	r3, r2
 8003130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003132:	4b82      	ldr	r3, [pc, #520]	; (800333c <HAL_RCC_ClockConfig+0x240>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d001      	beq.n	8003144 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0f7      	b.n	8003334 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 8089 	beq.w	8003264 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b03      	cmp	r3, #3
 8003158:	d133      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800315a:	4b79      	ldr	r3, [pc, #484]	; (8003340 <HAL_RCC_ClockConfig+0x244>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e0e4      	b.n	8003334 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800316a:	f000 fa0f 	bl	800358c <RCC_GetSysClockFreqFromPLLSource>
 800316e:	4602      	mov	r2, r0
 8003170:	4b74      	ldr	r3, [pc, #464]	; (8003344 <HAL_RCC_ClockConfig+0x248>)
 8003172:	429a      	cmp	r2, r3
 8003174:	d955      	bls.n	8003222 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003176:	4b72      	ldr	r3, [pc, #456]	; (8003340 <HAL_RCC_ClockConfig+0x244>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10a      	bne.n	8003198 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003182:	4b6f      	ldr	r3, [pc, #444]	; (8003340 <HAL_RCC_ClockConfig+0x244>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800318a:	4a6d      	ldr	r2, [pc, #436]	; (8003340 <HAL_RCC_ClockConfig+0x244>)
 800318c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003190:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003192:	2380      	movs	r3, #128	; 0x80
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	e044      	b.n	8003222 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d03e      	beq.n	8003222 <HAL_RCC_ClockConfig+0x126>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d13a      	bne.n	8003222 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031ac:	4b64      	ldr	r3, [pc, #400]	; (8003340 <HAL_RCC_ClockConfig+0x244>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031b4:	4a62      	ldr	r2, [pc, #392]	; (8003340 <HAL_RCC_ClockConfig+0x244>)
 80031b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ba:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80031bc:	2380      	movs	r3, #128	; 0x80
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	e02f      	b.n	8003222 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d107      	bne.n	80031da <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ca:	4b5d      	ldr	r3, [pc, #372]	; (8003340 <HAL_RCC_ClockConfig+0x244>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d115      	bne.n	8003202 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e0ac      	b.n	8003334 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d107      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031e2:	4b57      	ldr	r3, [pc, #348]	; (8003340 <HAL_RCC_ClockConfig+0x244>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e0a0      	b.n	8003334 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031f2:	4b53      	ldr	r3, [pc, #332]	; (8003340 <HAL_RCC_ClockConfig+0x244>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e098      	b.n	8003334 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003202:	f000 f8a7 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8003206:	4602      	mov	r2, r0
 8003208:	4b4e      	ldr	r3, [pc, #312]	; (8003344 <HAL_RCC_ClockConfig+0x248>)
 800320a:	429a      	cmp	r2, r3
 800320c:	d909      	bls.n	8003222 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800320e:	4b4c      	ldr	r3, [pc, #304]	; (8003340 <HAL_RCC_ClockConfig+0x244>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003216:	4a4a      	ldr	r2, [pc, #296]	; (8003340 <HAL_RCC_ClockConfig+0x244>)
 8003218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800321e:	2380      	movs	r3, #128	; 0x80
 8003220:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003222:	4b47      	ldr	r3, [pc, #284]	; (8003340 <HAL_RCC_ClockConfig+0x244>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f023 0203 	bic.w	r2, r3, #3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	4944      	ldr	r1, [pc, #272]	; (8003340 <HAL_RCC_ClockConfig+0x244>)
 8003230:	4313      	orrs	r3, r2
 8003232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003234:	f7fe fbc4 	bl	80019c0 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323a:	e00a      	b.n	8003252 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800323c:	f7fe fbc0 	bl	80019c0 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f241 3288 	movw	r2, #5000	; 0x1388
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e070      	b.n	8003334 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003252:	4b3b      	ldr	r3, [pc, #236]	; (8003340 <HAL_RCC_ClockConfig+0x244>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 020c 	and.w	r2, r3, #12
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	429a      	cmp	r2, r3
 8003262:	d1eb      	bne.n	800323c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d009      	beq.n	8003284 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003270:	4b33      	ldr	r3, [pc, #204]	; (8003340 <HAL_RCC_ClockConfig+0x244>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4930      	ldr	r1, [pc, #192]	; (8003340 <HAL_RCC_ClockConfig+0x244>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
 8003282:	e008      	b.n	8003296 <HAL_RCC_ClockConfig+0x19a>
  }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2b80      	cmp	r3, #128	; 0x80
 8003288:	d105      	bne.n	8003296 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800328a:	4b2d      	ldr	r3, [pc, #180]	; (8003340 <HAL_RCC_ClockConfig+0x244>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	4a2c      	ldr	r2, [pc, #176]	; (8003340 <HAL_RCC_ClockConfig+0x244>)
 8003290:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003294:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003296:	4b29      	ldr	r3, [pc, #164]	; (800333c <HAL_RCC_ClockConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d210      	bcs.n	80032c6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a4:	4b25      	ldr	r3, [pc, #148]	; (800333c <HAL_RCC_ClockConfig+0x240>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f023 020f 	bic.w	r2, r3, #15
 80032ac:	4923      	ldr	r1, [pc, #140]	; (800333c <HAL_RCC_ClockConfig+0x240>)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b4:	4b21      	ldr	r3, [pc, #132]	; (800333c <HAL_RCC_ClockConfig+0x240>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d001      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e036      	b.n	8003334 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d008      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d2:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <HAL_RCC_ClockConfig+0x244>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	4918      	ldr	r1, [pc, #96]	; (8003340 <HAL_RCC_ClockConfig+0x244>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d009      	beq.n	8003304 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032f0:	4b13      	ldr	r3, [pc, #76]	; (8003340 <HAL_RCC_ClockConfig+0x244>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	4910      	ldr	r1, [pc, #64]	; (8003340 <HAL_RCC_ClockConfig+0x244>)
 8003300:	4313      	orrs	r3, r2
 8003302:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003304:	f000 f826 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8003308:	4601      	mov	r1, r0
 800330a:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <HAL_RCC_ClockConfig+0x244>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	091b      	lsrs	r3, r3, #4
 8003310:	f003 030f 	and.w	r3, r3, #15
 8003314:	4a0c      	ldr	r2, [pc, #48]	; (8003348 <HAL_RCC_ClockConfig+0x24c>)
 8003316:	5cd3      	ldrb	r3, [r2, r3]
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	fa21 f303 	lsr.w	r3, r1, r3
 8003320:	4a0a      	ldr	r2, [pc, #40]	; (800334c <HAL_RCC_ClockConfig+0x250>)
 8003322:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003324:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <HAL_RCC_ClockConfig+0x254>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7fe fafd 	bl	8001928 <HAL_InitTick>
 800332e:	4603      	mov	r3, r0
 8003330:	73fb      	strb	r3, [r7, #15]

  return status;
 8003332:	7bfb      	ldrb	r3, [r7, #15]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40022000 	.word	0x40022000
 8003340:	40021000 	.word	0x40021000
 8003344:	04c4b400 	.word	0x04c4b400
 8003348:	080808f8 	.word	0x080808f8
 800334c:	20000000 	.word	0x20000000
 8003350:	20000004 	.word	0x20000004

08003354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003354:	b480      	push	{r7}
 8003356:	b089      	sub	sp, #36	; 0x24
 8003358:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
 800335e:	2300      	movs	r3, #0
 8003360:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003362:	4b3d      	ldr	r3, [pc, #244]	; (8003458 <HAL_RCC_GetSysClockFreq+0x104>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 030c 	and.w	r3, r3, #12
 800336a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800336c:	4b3a      	ldr	r3, [pc, #232]	; (8003458 <HAL_RCC_GetSysClockFreq+0x104>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0x34>
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	2b0c      	cmp	r3, #12
 8003380:	d121      	bne.n	80033c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d11e      	bne.n	80033c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003388:	4b33      	ldr	r3, [pc, #204]	; (8003458 <HAL_RCC_GetSysClockFreq+0x104>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d107      	bne.n	80033a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003394:	4b30      	ldr	r3, [pc, #192]	; (8003458 <HAL_RCC_GetSysClockFreq+0x104>)
 8003396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800339a:	0a1b      	lsrs	r3, r3, #8
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	e005      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033a4:	4b2c      	ldr	r3, [pc, #176]	; (8003458 <HAL_RCC_GetSysClockFreq+0x104>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033b0:	4a2a      	ldr	r2, [pc, #168]	; (800345c <HAL_RCC_GetSysClockFreq+0x108>)
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10d      	bne.n	80033dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033c4:	e00a      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d102      	bne.n	80033d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033cc:	4b24      	ldr	r3, [pc, #144]	; (8003460 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033ce:	61bb      	str	r3, [r7, #24]
 80033d0:	e004      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d101      	bne.n	80033dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033d8:	4b22      	ldr	r3, [pc, #136]	; (8003464 <HAL_RCC_GetSysClockFreq+0x110>)
 80033da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	2b0c      	cmp	r3, #12
 80033e0:	d133      	bne.n	800344a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033e2:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <HAL_RCC_GetSysClockFreq+0x104>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d002      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0xa4>
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d003      	beq.n	80033fe <HAL_RCC_GetSysClockFreq+0xaa>
 80033f6:	e005      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033f8:	4b19      	ldr	r3, [pc, #100]	; (8003460 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033fa:	617b      	str	r3, [r7, #20]
      break;
 80033fc:	e005      	b.n	800340a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033fe:	4b19      	ldr	r3, [pc, #100]	; (8003464 <HAL_RCC_GetSysClockFreq+0x110>)
 8003400:	617b      	str	r3, [r7, #20]
      break;
 8003402:	e002      	b.n	800340a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	617b      	str	r3, [r7, #20]
      break;
 8003408:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800340a:	4b13      	ldr	r3, [pc, #76]	; (8003458 <HAL_RCC_GetSysClockFreq+0x104>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	091b      	lsrs	r3, r3, #4
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	3301      	adds	r3, #1
 8003416:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003418:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <HAL_RCC_GetSysClockFreq+0x104>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	0a1b      	lsrs	r3, r3, #8
 800341e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	fb02 f203 	mul.w	r2, r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	fbb2 f3f3 	udiv	r3, r2, r3
 800342e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003430:	4b09      	ldr	r3, [pc, #36]	; (8003458 <HAL_RCC_GetSysClockFreq+0x104>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	0e5b      	lsrs	r3, r3, #25
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	3301      	adds	r3, #1
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	fbb2 f3f3 	udiv	r3, r2, r3
 8003448:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800344a:	69bb      	ldr	r3, [r7, #24]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3724      	adds	r7, #36	; 0x24
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	40021000 	.word	0x40021000
 800345c:	08080910 	.word	0x08080910
 8003460:	00f42400 	.word	0x00f42400
 8003464:	007a1200 	.word	0x007a1200

08003468 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800346c:	4b03      	ldr	r3, [pc, #12]	; (800347c <HAL_RCC_GetHCLKFreq+0x14>)
 800346e:	681b      	ldr	r3, [r3, #0]
}
 8003470:	4618      	mov	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20000000 	.word	0x20000000

08003480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003484:	f7ff fff0 	bl	8003468 <HAL_RCC_GetHCLKFreq>
 8003488:	4601      	mov	r1, r0
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	0a1b      	lsrs	r3, r3, #8
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	4a04      	ldr	r2, [pc, #16]	; (80034a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003496:	5cd3      	ldrb	r3, [r2, r3]
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40021000 	.word	0x40021000
 80034a8:	08080908 	.word	0x08080908

080034ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034b0:	f7ff ffda 	bl	8003468 <HAL_RCC_GetHCLKFreq>
 80034b4:	4601      	mov	r1, r0
 80034b6:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	0adb      	lsrs	r3, r3, #11
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	4a04      	ldr	r2, [pc, #16]	; (80034d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034c2:	5cd3      	ldrb	r3, [r2, r3]
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40021000 	.word	0x40021000
 80034d4:	08080908 	.word	0x08080908

080034d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034e0:	2300      	movs	r3, #0
 80034e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034e4:	4b27      	ldr	r3, [pc, #156]	; (8003584 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80034e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034f0:	f7ff f932 	bl	8002758 <HAL_PWREx_GetVoltageRange>
 80034f4:	6178      	str	r0, [r7, #20]
 80034f6:	e014      	b.n	8003522 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034f8:	4b22      	ldr	r3, [pc, #136]	; (8003584 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80034fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fc:	4a21      	ldr	r2, [pc, #132]	; (8003584 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80034fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003502:	6593      	str	r3, [r2, #88]	; 0x58
 8003504:	4b1f      	ldr	r3, [pc, #124]	; (8003584 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003510:	f7ff f922 	bl	8002758 <HAL_PWREx_GetVoltageRange>
 8003514:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003516:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351a:	4a1a      	ldr	r2, [pc, #104]	; (8003584 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800351c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003520:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003528:	d10b      	bne.n	8003542 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b80      	cmp	r3, #128	; 0x80
 800352e:	d913      	bls.n	8003558 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2ba0      	cmp	r3, #160	; 0xa0
 8003534:	d902      	bls.n	800353c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003536:	2302      	movs	r3, #2
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	e00d      	b.n	8003558 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800353c:	2301      	movs	r3, #1
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	e00a      	b.n	8003558 <RCC_SetFlashLatencyFromMSIRange+0x80>
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b7f      	cmp	r3, #127	; 0x7f
 8003546:	d902      	bls.n	800354e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003548:	2302      	movs	r3, #2
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	e004      	b.n	8003558 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b70      	cmp	r3, #112	; 0x70
 8003552:	d101      	bne.n	8003558 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003554:	2301      	movs	r3, #1
 8003556:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f023 020f 	bic.w	r2, r3, #15
 8003560:	4909      	ldr	r1, [pc, #36]	; (8003588 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003568:	4b07      	ldr	r3, [pc, #28]	; (8003588 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	429a      	cmp	r2, r3
 8003574:	d001      	beq.n	800357a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40021000 	.word	0x40021000
 8003588:	40022000 	.word	0x40022000

0800358c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800358c:	b480      	push	{r7}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003596:	4b2d      	ldr	r3, [pc, #180]	; (800364c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d118      	bne.n	80035d4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035a2:	4b2a      	ldr	r3, [pc, #168]	; (800364c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d107      	bne.n	80035be <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035ae:	4b27      	ldr	r3, [pc, #156]	; (800364c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80035b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b4:	0a1b      	lsrs	r3, r3, #8
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	e005      	b.n	80035ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035be:	4b23      	ldr	r3, [pc, #140]	; (800364c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	091b      	lsrs	r3, r3, #4
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035ca:	4a21      	ldr	r2, [pc, #132]	; (8003650 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035d4:	4b1d      	ldr	r3, [pc, #116]	; (800364c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f003 0303 	and.w	r3, r3, #3
 80035dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d002      	beq.n	80035ea <RCC_GetSysClockFreqFromPLLSource+0x5e>
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d003      	beq.n	80035f0 <RCC_GetSysClockFreqFromPLLSource+0x64>
 80035e8:	e005      	b.n	80035f6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80035ea:	4b1a      	ldr	r3, [pc, #104]	; (8003654 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80035ec:	613b      	str	r3, [r7, #16]
    break;
 80035ee:	e005      	b.n	80035fc <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80035f0:	4b19      	ldr	r3, [pc, #100]	; (8003658 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80035f2:	613b      	str	r3, [r7, #16]
    break;
 80035f4:	e002      	b.n	80035fc <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	613b      	str	r3, [r7, #16]
    break;
 80035fa:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035fc:	4b13      	ldr	r3, [pc, #76]	; (800364c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	3301      	adds	r3, #1
 8003608:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800360a:	4b10      	ldr	r3, [pc, #64]	; (800364c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	0a1b      	lsrs	r3, r3, #8
 8003610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	fb02 f203 	mul.w	r2, r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003620:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	0e5b      	lsrs	r3, r3, #25
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	3301      	adds	r3, #1
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	fbb2 f3f3 	udiv	r3, r2, r3
 800363a:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800363c:	683b      	ldr	r3, [r7, #0]
}
 800363e:	4618      	mov	r0, r3
 8003640:	371c      	adds	r7, #28
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40021000 	.word	0x40021000
 8003650:	08080910 	.word	0x08080910
 8003654:	00f42400 	.word	0x00f42400
 8003658:	007a1200 	.word	0x007a1200

0800365c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003664:	2300      	movs	r3, #0
 8003666:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003668:	2300      	movs	r3, #0
 800366a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003674:	2b00      	cmp	r3, #0
 8003676:	d03d      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800367c:	2b40      	cmp	r3, #64	; 0x40
 800367e:	d00b      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003680:	2b40      	cmp	r3, #64	; 0x40
 8003682:	d804      	bhi.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00e      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003688:	2b20      	cmp	r3, #32
 800368a:	d015      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800368c:	e01d      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800368e:	2b60      	cmp	r3, #96	; 0x60
 8003690:	d01e      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003692:	2b80      	cmp	r3, #128	; 0x80
 8003694:	d01c      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003696:	e018      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003698:	4b86      	ldr	r3, [pc, #536]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4a85      	ldr	r2, [pc, #532]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800369e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036a4:	e015      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3304      	adds	r3, #4
 80036aa:	2100      	movs	r1, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fb0d 	bl	8003ccc <RCCEx_PLLSAI1_Config>
 80036b2:	4603      	mov	r3, r0
 80036b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036b6:	e00c      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3320      	adds	r3, #32
 80036bc:	2100      	movs	r1, #0
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fbf4 	bl	8003eac <RCCEx_PLLSAI2_Config>
 80036c4:	4603      	mov	r3, r0
 80036c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036c8:	e003      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	74fb      	strb	r3, [r7, #19]
      break;
 80036ce:	e000      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 80036d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036d2:	7cfb      	ldrb	r3, [r7, #19]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10b      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036d8:	4b76      	ldr	r3, [pc, #472]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036de:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e6:	4973      	ldr	r1, [pc, #460]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80036ee:	e001      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f0:	7cfb      	ldrb	r3, [r7, #19]
 80036f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d042      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003708:	d00f      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xce>
 800370a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800370e:	d805      	bhi.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003710:	2b00      	cmp	r3, #0
 8003712:	d011      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003718:	d017      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xee>
 800371a:	e01f      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x100>
 800371c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003720:	d01f      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003726:	d01c      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003728:	e018      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800372a:	4b62      	ldr	r3, [pc, #392]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	4a61      	ldr	r2, [pc, #388]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003734:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003736:	e015      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3304      	adds	r3, #4
 800373c:	2100      	movs	r1, #0
 800373e:	4618      	mov	r0, r3
 8003740:	f000 fac4 	bl	8003ccc <RCCEx_PLLSAI1_Config>
 8003744:	4603      	mov	r3, r0
 8003746:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003748:	e00c      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3320      	adds	r3, #32
 800374e:	2100      	movs	r1, #0
 8003750:	4618      	mov	r0, r3
 8003752:	f000 fbab 	bl	8003eac <RCCEx_PLLSAI2_Config>
 8003756:	4603      	mov	r3, r0
 8003758:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800375a:	e003      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	74fb      	strb	r3, [r7, #19]
      break;
 8003760:	e000      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003762:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003764:	7cfb      	ldrb	r3, [r7, #19]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10b      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800376a:	4b52      	ldr	r3, [pc, #328]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800376c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003770:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003778:	494e      	ldr	r1, [pc, #312]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003780:	e001      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003782:	7cfb      	ldrb	r3, [r7, #19]
 8003784:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 809f 	beq.w	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003794:	2300      	movs	r3, #0
 8003796:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003798:	4b46      	ldr	r3, [pc, #280]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800379a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80037a8:	2300      	movs	r3, #0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00d      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ae:	4b41      	ldr	r3, [pc, #260]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b2:	4a40      	ldr	r2, [pc, #256]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b8:	6593      	str	r3, [r2, #88]	; 0x58
 80037ba:	4b3e      	ldr	r3, [pc, #248]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c2:	60bb      	str	r3, [r7, #8]
 80037c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037c6:	2301      	movs	r3, #1
 80037c8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ca:	4b3b      	ldr	r3, [pc, #236]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a3a      	ldr	r2, [pc, #232]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80037d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037d6:	f7fe f8f3 	bl	80019c0 <HAL_GetTick>
 80037da:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037dc:	e009      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037de:	f7fe f8ef 	bl	80019c0 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d902      	bls.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	74fb      	strb	r3, [r7, #19]
        break;
 80037f0:	e005      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037f2:	4b31      	ldr	r3, [pc, #196]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0ef      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 80037fe:	7cfb      	ldrb	r3, [r7, #19]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d15b      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003804:	4b2b      	ldr	r3, [pc, #172]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d01f      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	429a      	cmp	r2, r3
 8003820:	d019      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003822:	4b24      	ldr	r3, [pc, #144]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800382c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800382e:	4b21      	ldr	r3, [pc, #132]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003834:	4a1f      	ldr	r2, [pc, #124]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800383e:	4b1d      	ldr	r3, [pc, #116]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003844:	4a1b      	ldr	r2, [pc, #108]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800384e:	4a19      	ldr	r2, [pc, #100]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d016      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7fe f8ae 	bl	80019c0 <HAL_GetTick>
 8003864:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003866:	e00b      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003868:	f7fe f8aa 	bl	80019c0 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f241 3288 	movw	r2, #5000	; 0x1388
 8003876:	4293      	cmp	r3, r2
 8003878:	d902      	bls.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	74fb      	strb	r3, [r7, #19]
            break;
 800387e:	e006      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003880:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0ec      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800388e:	7cfb      	ldrb	r3, [r7, #19]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10c      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003894:	4b07      	ldr	r3, [pc, #28]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a4:	4903      	ldr	r1, [pc, #12]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80038ac:	e008      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038ae:	7cfb      	ldrb	r3, [r7, #19]
 80038b0:	74bb      	strb	r3, [r7, #18]
 80038b2:	e005      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80038b4:	40021000 	.word	0x40021000
 80038b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038bc:	7cfb      	ldrb	r3, [r7, #19]
 80038be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038c0:	7c7b      	ldrb	r3, [r7, #17]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d105      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c6:	4ba0      	ldr	r3, [pc, #640]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ca:	4a9f      	ldr	r2, [pc, #636]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038de:	4b9a      	ldr	r3, [pc, #616]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e4:	f023 0203 	bic.w	r2, r3, #3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ec:	4996      	ldr	r1, [pc, #600]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003900:	4b91      	ldr	r3, [pc, #580]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003906:	f023 020c 	bic.w	r2, r3, #12
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	498e      	ldr	r1, [pc, #568]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003922:	4b89      	ldr	r3, [pc, #548]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003928:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003930:	4985      	ldr	r1, [pc, #532]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0308 	and.w	r3, r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003944:	4b80      	ldr	r3, [pc, #512]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003952:	497d      	ldr	r1, [pc, #500]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003966:	4b78      	ldr	r3, [pc, #480]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003974:	4974      	ldr	r1, [pc, #464]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003988:	4b6f      	ldr	r3, [pc, #444]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003996:	496c      	ldr	r1, [pc, #432]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039aa:	4b67      	ldr	r3, [pc, #412]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039b8:	4963      	ldr	r1, [pc, #396]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039cc:	4b5e      	ldr	r3, [pc, #376]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039da:	495b      	ldr	r1, [pc, #364]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ee:	4b56      	ldr	r3, [pc, #344]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fc:	4952      	ldr	r1, [pc, #328]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00a      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a10:	4b4d      	ldr	r3, [pc, #308]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	494a      	ldr	r1, [pc, #296]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a32:	4b45      	ldr	r3, [pc, #276]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a40:	4941      	ldr	r1, [pc, #260]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a54:	4b3c      	ldr	r3, [pc, #240]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a5a:	f023 0203 	bic.w	r2, r3, #3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a62:	4939      	ldr	r1, [pc, #228]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d028      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a76:	4b34      	ldr	r3, [pc, #208]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a84:	4930      	ldr	r1, [pc, #192]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a94:	d106      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a96:	4b2c      	ldr	r3, [pc, #176]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	4a2b      	ldr	r2, [pc, #172]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aa0:	60d3      	str	r3, [r2, #12]
 8003aa2:	e011      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aac:	d10c      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 f909 	bl	8003ccc <RCCEx_PLLSAI1_Config>
 8003aba:	4603      	mov	r3, r0
 8003abc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003abe:	7cfb      	ldrb	r3, [r7, #19]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003ac4:	7cfb      	ldrb	r3, [r7, #19]
 8003ac6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d04d      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ad8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003adc:	d108      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003ade:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ae4:	4a18      	ldr	r2, [pc, #96]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003aee:	e012      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003af0:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003af6:	4a14      	ldr	r2, [pc, #80]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003afc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003b00:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b0e:	490e      	ldr	r1, [pc, #56]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b1e:	d106      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b20:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	4a08      	ldr	r2, [pc, #32]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b2a:	60d3      	str	r3, [r2, #12]
 8003b2c:	e020      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b36:	d109      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b38:	4b03      	ldr	r3, [pc, #12]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4a02      	ldr	r2, [pc, #8]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b42:	60d3      	str	r3, [r2, #12]
 8003b44:	e014      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b46:	bf00      	nop
 8003b48:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 f8b5 	bl	8003ccc <RCCEx_PLLSAI1_Config>
 8003b62:	4603      	mov	r3, r0
 8003b64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b66:	7cfb      	ldrb	r3, [r7, #19]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003b6c:	7cfb      	ldrb	r3, [r7, #19]
 8003b6e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d028      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b7c:	4b4a      	ldr	r3, [pc, #296]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b8a:	4947      	ldr	r1, [pc, #284]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b9a:	d106      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b9c:	4b42      	ldr	r3, [pc, #264]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4a41      	ldr	r2, [pc, #260]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ba6:	60d3      	str	r3, [r2, #12]
 8003ba8:	e011      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bb2:	d10c      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	2101      	movs	r1, #1
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 f886 	bl	8003ccc <RCCEx_PLLSAI1_Config>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bc4:	7cfb      	ldrb	r3, [r7, #19]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003bca:	7cfb      	ldrb	r3, [r7, #19]
 8003bcc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d01e      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bda:	4b33      	ldr	r3, [pc, #204]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bea:	492f      	ldr	r1, [pc, #188]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bfc:	d10c      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3304      	adds	r3, #4
 8003c02:	2102      	movs	r1, #2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 f861 	bl	8003ccc <RCCEx_PLLSAI1_Config>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c0e:	7cfb      	ldrb	r3, [r7, #19]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003c14:	7cfb      	ldrb	r3, [r7, #19]
 8003c16:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00b      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c24:	4b20      	ldr	r3, [pc, #128]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c2a:	f023 0204 	bic.w	r2, r3, #4
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c34:	491c      	ldr	r1, [pc, #112]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00b      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003c48:	4b17      	ldr	r3, [pc, #92]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c4e:	f023 0218 	bic.w	r2, r3, #24
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c58:	4913      	ldr	r1, [pc, #76]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d017      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003c6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c7c:	490a      	ldr	r1, [pc, #40]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c8e:	d105      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c90:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4a04      	ldr	r2, [pc, #16]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c9a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40021000 	.word	0x40021000

08003cac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a04      	ldr	r2, [pc, #16]	; (8003cc8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003cb6:	f043 0304 	orr.w	r3, r3, #4
 8003cba:	6013      	str	r3, [r2, #0]
}
 8003cbc:	bf00      	nop
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40021000 	.word	0x40021000

08003ccc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cda:	4b70      	ldr	r3, [pc, #448]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00e      	beq.n	8003d04 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ce6:	4b6d      	ldr	r3, [pc, #436]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f003 0203 	and.w	r2, r3, #3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d103      	bne.n	8003cfe <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
       ||
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d13f      	bne.n	8003d7e <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	73fb      	strb	r3, [r7, #15]
 8003d02:	e03c      	b.n	8003d7e <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d00c      	beq.n	8003d26 <RCCEx_PLLSAI1_Config+0x5a>
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d013      	beq.n	8003d38 <RCCEx_PLLSAI1_Config+0x6c>
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d120      	bne.n	8003d56 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d14:	4b61      	ldr	r3, [pc, #388]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d11d      	bne.n	8003d5c <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d24:	e01a      	b.n	8003d5c <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d26:	4b5d      	ldr	r3, [pc, #372]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d116      	bne.n	8003d60 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d36:	e013      	b.n	8003d60 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d38:	4b58      	ldr	r3, [pc, #352]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10f      	bne.n	8003d64 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d44:	4b55      	ldr	r3, [pc, #340]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d109      	bne.n	8003d64 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d54:	e006      	b.n	8003d64 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
      break;
 8003d5a:	e004      	b.n	8003d66 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003d5c:	bf00      	nop
 8003d5e:	e002      	b.n	8003d66 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003d60:	bf00      	nop
 8003d62:	e000      	b.n	8003d66 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003d64:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d108      	bne.n	8003d7e <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003d6c:	4b4b      	ldr	r3, [pc, #300]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f023 0203 	bic.w	r2, r3, #3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4948      	ldr	r1, [pc, #288]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f040 8086 	bne.w	8003e92 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d86:	4b45      	ldr	r3, [pc, #276]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a44      	ldr	r2, [pc, #272]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d92:	f7fd fe15 	bl	80019c0 <HAL_GetTick>
 8003d96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d98:	e009      	b.n	8003dae <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d9a:	f7fd fe11 	bl	80019c0 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d902      	bls.n	8003dae <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	73fb      	strb	r3, [r7, #15]
        break;
 8003dac:	e005      	b.n	8003dba <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003dae:	4b3b      	ldr	r3, [pc, #236]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1ef      	bne.n	8003d9a <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d168      	bne.n	8003e92 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d113      	bne.n	8003dee <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dc6:	4b35      	ldr	r3, [pc, #212]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	4b35      	ldr	r3, [pc, #212]	; (8003ea0 <RCCEx_PLLSAI1_Config+0x1d4>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6892      	ldr	r2, [r2, #8]
 8003dd2:	0211      	lsls	r1, r2, #8
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	68d2      	ldr	r2, [r2, #12]
 8003dd8:	06d2      	lsls	r2, r2, #27
 8003dda:	4311      	orrs	r1, r2
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6852      	ldr	r2, [r2, #4]
 8003de0:	3a01      	subs	r2, #1
 8003de2:	0112      	lsls	r2, r2, #4
 8003de4:	430a      	orrs	r2, r1
 8003de6:	492d      	ldr	r1, [pc, #180]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	610b      	str	r3, [r1, #16]
 8003dec:	e02d      	b.n	8003e4a <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d115      	bne.n	8003e20 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003df4:	4b29      	ldr	r3, [pc, #164]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	4b2a      	ldr	r3, [pc, #168]	; (8003ea4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6892      	ldr	r2, [r2, #8]
 8003e00:	0211      	lsls	r1, r2, #8
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6912      	ldr	r2, [r2, #16]
 8003e06:	0852      	lsrs	r2, r2, #1
 8003e08:	3a01      	subs	r2, #1
 8003e0a:	0552      	lsls	r2, r2, #21
 8003e0c:	4311      	orrs	r1, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6852      	ldr	r2, [r2, #4]
 8003e12:	3a01      	subs	r2, #1
 8003e14:	0112      	lsls	r2, r2, #4
 8003e16:	430a      	orrs	r2, r1
 8003e18:	4920      	ldr	r1, [pc, #128]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	610b      	str	r3, [r1, #16]
 8003e1e:	e014      	b.n	8003e4a <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e20:	4b1e      	ldr	r3, [pc, #120]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6892      	ldr	r2, [r2, #8]
 8003e2c:	0211      	lsls	r1, r2, #8
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6952      	ldr	r2, [r2, #20]
 8003e32:	0852      	lsrs	r2, r2, #1
 8003e34:	3a01      	subs	r2, #1
 8003e36:	0652      	lsls	r2, r2, #25
 8003e38:	4311      	orrs	r1, r2
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6852      	ldr	r2, [r2, #4]
 8003e3e:	3a01      	subs	r2, #1
 8003e40:	0112      	lsls	r2, r2, #4
 8003e42:	430a      	orrs	r2, r1
 8003e44:	4915      	ldr	r1, [pc, #84]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e4a:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a13      	ldr	r2, [pc, #76]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003e50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e54:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e56:	f7fd fdb3 	bl	80019c0 <HAL_GetTick>
 8003e5a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e5c:	e009      	b.n	8003e72 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e5e:	f7fd fdaf 	bl	80019c0 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d902      	bls.n	8003e72 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	73fb      	strb	r3, [r7, #15]
          break;
 8003e70:	e005      	b.n	8003e7e <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e72:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0ef      	beq.n	8003e5e <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d106      	bne.n	8003e92 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e84:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	4903      	ldr	r1, [pc, #12]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	07ff800f 	.word	0x07ff800f
 8003ea4:	ff9f800f 	.word	0xff9f800f
 8003ea8:	f9ff800f 	.word	0xf9ff800f

08003eac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003eba:	4b70      	ldr	r3, [pc, #448]	; (800407c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00e      	beq.n	8003ee4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ec6:	4b6d      	ldr	r3, [pc, #436]	; (800407c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f003 0203 	and.w	r2, r3, #3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d103      	bne.n	8003ede <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
       ||
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d13f      	bne.n	8003f5e <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	73fb      	strb	r3, [r7, #15]
 8003ee2:	e03c      	b.n	8003f5e <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d00c      	beq.n	8003f06 <RCCEx_PLLSAI2_Config+0x5a>
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	d013      	beq.n	8003f18 <RCCEx_PLLSAI2_Config+0x6c>
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d120      	bne.n	8003f36 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ef4:	4b61      	ldr	r3, [pc, #388]	; (800407c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d11d      	bne.n	8003f3c <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f04:	e01a      	b.n	8003f3c <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f06:	4b5d      	ldr	r3, [pc, #372]	; (800407c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d116      	bne.n	8003f40 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f16:	e013      	b.n	8003f40 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f18:	4b58      	ldr	r3, [pc, #352]	; (800407c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10f      	bne.n	8003f44 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f24:	4b55      	ldr	r3, [pc, #340]	; (800407c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d109      	bne.n	8003f44 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f34:	e006      	b.n	8003f44 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	73fb      	strb	r3, [r7, #15]
      break;
 8003f3a:	e004      	b.n	8003f46 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003f3c:	bf00      	nop
 8003f3e:	e002      	b.n	8003f46 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003f40:	bf00      	nop
 8003f42:	e000      	b.n	8003f46 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003f44:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d108      	bne.n	8003f5e <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003f4c:	4b4b      	ldr	r3, [pc, #300]	; (800407c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f023 0203 	bic.w	r2, r3, #3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4948      	ldr	r1, [pc, #288]	; (800407c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f040 8086 	bne.w	8004072 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f66:	4b45      	ldr	r3, [pc, #276]	; (800407c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a44      	ldr	r2, [pc, #272]	; (800407c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f72:	f7fd fd25 	bl	80019c0 <HAL_GetTick>
 8003f76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f78:	e009      	b.n	8003f8e <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f7a:	f7fd fd21 	bl	80019c0 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d902      	bls.n	8003f8e <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	73fb      	strb	r3, [r7, #15]
        break;
 8003f8c:	e005      	b.n	8003f9a <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f8e:	4b3b      	ldr	r3, [pc, #236]	; (800407c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1ef      	bne.n	8003f7a <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003f9a:	7bfb      	ldrb	r3, [r7, #15]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d168      	bne.n	8004072 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d113      	bne.n	8003fce <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fa6:	4b35      	ldr	r3, [pc, #212]	; (800407c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003fa8:	695a      	ldr	r2, [r3, #20]
 8003faa:	4b35      	ldr	r3, [pc, #212]	; (8004080 <RCCEx_PLLSAI2_Config+0x1d4>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6892      	ldr	r2, [r2, #8]
 8003fb2:	0211      	lsls	r1, r2, #8
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	68d2      	ldr	r2, [r2, #12]
 8003fb8:	06d2      	lsls	r2, r2, #27
 8003fba:	4311      	orrs	r1, r2
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6852      	ldr	r2, [r2, #4]
 8003fc0:	3a01      	subs	r2, #1
 8003fc2:	0112      	lsls	r2, r2, #4
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	492d      	ldr	r1, [pc, #180]	; (800407c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	614b      	str	r3, [r1, #20]
 8003fcc:	e02d      	b.n	800402a <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d115      	bne.n	8004000 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fd4:	4b29      	ldr	r3, [pc, #164]	; (800407c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003fd6:	695a      	ldr	r2, [r3, #20]
 8003fd8:	4b2a      	ldr	r3, [pc, #168]	; (8004084 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6892      	ldr	r2, [r2, #8]
 8003fe0:	0211      	lsls	r1, r2, #8
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6912      	ldr	r2, [r2, #16]
 8003fe6:	0852      	lsrs	r2, r2, #1
 8003fe8:	3a01      	subs	r2, #1
 8003fea:	0552      	lsls	r2, r2, #21
 8003fec:	4311      	orrs	r1, r2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6852      	ldr	r2, [r2, #4]
 8003ff2:	3a01      	subs	r2, #1
 8003ff4:	0112      	lsls	r2, r2, #4
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	4920      	ldr	r1, [pc, #128]	; (800407c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	614b      	str	r3, [r1, #20]
 8003ffe:	e014      	b.n	800402a <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004000:	4b1e      	ldr	r3, [pc, #120]	; (800407c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004002:	695a      	ldr	r2, [r3, #20]
 8004004:	4b20      	ldr	r3, [pc, #128]	; (8004088 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004006:	4013      	ands	r3, r2
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6892      	ldr	r2, [r2, #8]
 800400c:	0211      	lsls	r1, r2, #8
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6952      	ldr	r2, [r2, #20]
 8004012:	0852      	lsrs	r2, r2, #1
 8004014:	3a01      	subs	r2, #1
 8004016:	0652      	lsls	r2, r2, #25
 8004018:	4311      	orrs	r1, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6852      	ldr	r2, [r2, #4]
 800401e:	3a01      	subs	r2, #1
 8004020:	0112      	lsls	r2, r2, #4
 8004022:	430a      	orrs	r2, r1
 8004024:	4915      	ldr	r1, [pc, #84]	; (800407c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004026:	4313      	orrs	r3, r2
 8004028:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800402a:	4b14      	ldr	r3, [pc, #80]	; (800407c <RCCEx_PLLSAI2_Config+0x1d0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a13      	ldr	r2, [pc, #76]	; (800407c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004034:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004036:	f7fd fcc3 	bl	80019c0 <HAL_GetTick>
 800403a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800403c:	e009      	b.n	8004052 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800403e:	f7fd fcbf 	bl	80019c0 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d902      	bls.n	8004052 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	73fb      	strb	r3, [r7, #15]
          break;
 8004050:	e005      	b.n	800405e <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004052:	4b0a      	ldr	r3, [pc, #40]	; (800407c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0ef      	beq.n	800403e <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800405e:	7bfb      	ldrb	r3, [r7, #15]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d106      	bne.n	8004072 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004064:	4b05      	ldr	r3, [pc, #20]	; (800407c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004066:	695a      	ldr	r2, [r3, #20]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	4903      	ldr	r1, [pc, #12]	; (800407c <RCCEx_PLLSAI2_Config+0x1d0>)
 800406e:	4313      	orrs	r3, r2
 8004070:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004072:	7bfb      	ldrb	r3, [r7, #15]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40021000 	.word	0x40021000
 8004080:	07ff800f 	.word	0x07ff800f
 8004084:	ff9f800f 	.word	0xff9f800f
 8004088:	f9ff800f 	.word	0xf9ff800f

0800408c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e07c      	b.n	8004198 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d106      	bne.n	80040be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7fc ffe3 	bl	8001084 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2202      	movs	r2, #2
 80040c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040d4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040de:	d902      	bls.n	80040e6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80040e0:	2300      	movs	r3, #0
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	e002      	b.n	80040ec <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80040e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040ea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80040f4:	d007      	beq.n	8004106 <HAL_SPI_Init+0x7a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040fe:	d002      	beq.n	8004106 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10b      	bne.n	8004126 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004116:	d903      	bls.n	8004120 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
 800411e:	e002      	b.n	8004126 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	ea42 0103 	orr.w	r1, r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	0c1b      	lsrs	r3, r3, #16
 8004166:	f003 0204 	and.w	r2, r3, #4
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	ea42 0103 	orr.w	r1, r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	430a      	orrs	r2, r1
 8004186:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b088      	sub	sp, #32
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	603b      	str	r3, [r7, #0]
 80041ac:	4613      	mov	r3, r2
 80041ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d101      	bne.n	80041c2 <HAL_SPI_Transmit+0x22>
 80041be:	2302      	movs	r3, #2
 80041c0:	e150      	b.n	8004464 <HAL_SPI_Transmit+0x2c4>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041ca:	f7fd fbf9 	bl	80019c0 <HAL_GetTick>
 80041ce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80041d0:	88fb      	ldrh	r3, [r7, #6]
 80041d2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d002      	beq.n	80041e6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80041e0:	2302      	movs	r3, #2
 80041e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041e4:	e135      	b.n	8004452 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <HAL_SPI_Transmit+0x52>
 80041ec:	88fb      	ldrh	r3, [r7, #6]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041f6:	e12c      	b.n	8004452 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2203      	movs	r2, #3
 80041fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	88fa      	ldrh	r2, [r7, #6]
 8004210:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	88fa      	ldrh	r2, [r7, #6]
 8004216:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004242:	d107      	bne.n	8004254 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004252:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425e:	2b40      	cmp	r3, #64	; 0x40
 8004260:	d007      	beq.n	8004272 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004270:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800427a:	d94b      	bls.n	8004314 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_SPI_Transmit+0xea>
 8004284:	8afb      	ldrh	r3, [r7, #22]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d13e      	bne.n	8004308 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428e:	881a      	ldrh	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429a:	1c9a      	adds	r2, r3, #2
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042ae:	e02b      	b.n	8004308 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d112      	bne.n	80042e4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	881a      	ldrh	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ce:	1c9a      	adds	r2, r3, #2
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042d8:	b29b      	uxth	r3, r3
 80042da:	3b01      	subs	r3, #1
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042e2:	e011      	b.n	8004308 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042e4:	f7fd fb6c 	bl	80019c0 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d803      	bhi.n	80042fc <HAL_SPI_Transmit+0x15c>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fa:	d102      	bne.n	8004302 <HAL_SPI_Transmit+0x162>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d102      	bne.n	8004308 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004306:	e0a4      	b.n	8004452 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1ce      	bne.n	80042b0 <HAL_SPI_Transmit+0x110>
 8004312:	e07c      	b.n	800440e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d002      	beq.n	8004322 <HAL_SPI_Transmit+0x182>
 800431c:	8afb      	ldrh	r3, [r7, #22]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d170      	bne.n	8004404 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b01      	cmp	r3, #1
 800432a:	d912      	bls.n	8004352 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	881a      	ldrh	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	1c9a      	adds	r2, r3, #2
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004346:	b29b      	uxth	r3, r3
 8004348:	3b02      	subs	r3, #2
 800434a:	b29a      	uxth	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004350:	e058      	b.n	8004404 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	330c      	adds	r3, #12
 800435c:	7812      	ldrb	r2, [r2, #0]
 800435e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004378:	e044      	b.n	8004404 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b02      	cmp	r3, #2
 8004386:	d12b      	bne.n	80043e0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b01      	cmp	r3, #1
 8004390:	d912      	bls.n	80043b8 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004396:	881a      	ldrh	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	1c9a      	adds	r2, r3, #2
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b02      	subs	r3, #2
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043b6:	e025      	b.n	8004404 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	330c      	adds	r3, #12
 80043c2:	7812      	ldrb	r2, [r2, #0]
 80043c4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043de:	e011      	b.n	8004404 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043e0:	f7fd faee 	bl	80019c0 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d803      	bhi.n	80043f8 <HAL_SPI_Transmit+0x258>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f6:	d102      	bne.n	80043fe <HAL_SPI_Transmit+0x25e>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d102      	bne.n	8004404 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004402:	e026      	b.n	8004452 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1b5      	bne.n	800437a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	6839      	ldr	r1, [r7, #0]
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 fca0 	bl	8004d58 <SPI_EndRxTxTransaction>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2220      	movs	r2, #32
 8004422:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10a      	bne.n	8004442 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800442c:	2300      	movs	r3, #0
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	613b      	str	r3, [r7, #16]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	77fb      	strb	r3, [r7, #31]
 800444e:	e000      	b.n	8004452 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8004450:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004462:	7ffb      	ldrb	r3, [r7, #31]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3720      	adds	r7, #32
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b08a      	sub	sp, #40	; 0x28
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800447a:	2301      	movs	r3, #1
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800448a:	2b01      	cmp	r3, #1
 800448c:	d101      	bne.n	8004492 <HAL_SPI_TransmitReceive+0x26>
 800448e:	2302      	movs	r3, #2
 8004490:	e1fb      	b.n	800488a <HAL_SPI_TransmitReceive+0x41e>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800449a:	f7fd fa91 	bl	80019c0 <HAL_GetTick>
 800449e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044a6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80044ae:	887b      	ldrh	r3, [r7, #2]
 80044b0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80044b2:	887b      	ldrh	r3, [r7, #2]
 80044b4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044b6:	7efb      	ldrb	r3, [r7, #27]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d00e      	beq.n	80044da <HAL_SPI_TransmitReceive+0x6e>
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044c2:	d106      	bne.n	80044d2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d102      	bne.n	80044d2 <HAL_SPI_TransmitReceive+0x66>
 80044cc:	7efb      	ldrb	r3, [r7, #27]
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d003      	beq.n	80044da <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80044d2:	2302      	movs	r3, #2
 80044d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80044d8:	e1cd      	b.n	8004876 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_SPI_TransmitReceive+0x80>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_SPI_TransmitReceive+0x80>
 80044e6:	887b      	ldrh	r3, [r7, #2]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d103      	bne.n	80044f4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80044f2:	e1c0      	b.n	8004876 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d003      	beq.n	8004508 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2205      	movs	r2, #5
 8004504:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	887a      	ldrh	r2, [r7, #2]
 8004518:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	887a      	ldrh	r2, [r7, #2]
 8004520:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	887a      	ldrh	r2, [r7, #2]
 800452e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	887a      	ldrh	r2, [r7, #2]
 8004534:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800454a:	d802      	bhi.n	8004552 <HAL_SPI_TransmitReceive+0xe6>
 800454c:	8a3b      	ldrh	r3, [r7, #16]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d908      	bls.n	8004564 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004560:	605a      	str	r2, [r3, #4]
 8004562:	e007      	b.n	8004574 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004572:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457e:	2b40      	cmp	r3, #64	; 0x40
 8004580:	d007      	beq.n	8004592 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004590:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800459a:	d97c      	bls.n	8004696 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <HAL_SPI_TransmitReceive+0x13e>
 80045a4:	8a7b      	ldrh	r3, [r7, #18]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d169      	bne.n	800467e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	881a      	ldrh	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	1c9a      	adds	r2, r3, #2
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045ce:	e056      	b.n	800467e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d11b      	bne.n	8004616 <HAL_SPI_TransmitReceive+0x1aa>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d016      	beq.n	8004616 <HAL_SPI_TransmitReceive+0x1aa>
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d113      	bne.n	8004616 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	881a      	ldrh	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fe:	1c9a      	adds	r2, r3, #2
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b01      	cmp	r3, #1
 8004622:	d11c      	bne.n	800465e <HAL_SPI_TransmitReceive+0x1f2>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800462a:	b29b      	uxth	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d016      	beq.n	800465e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	b292      	uxth	r2, r2
 800463c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	1c9a      	adds	r2, r3, #2
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800465a:	2301      	movs	r3, #1
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800465e:	f7fd f9af 	bl	80019c0 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800466a:	429a      	cmp	r2, r3
 800466c:	d807      	bhi.n	800467e <HAL_SPI_TransmitReceive+0x212>
 800466e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004674:	d003      	beq.n	800467e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800467c:	e0fb      	b.n	8004876 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004682:	b29b      	uxth	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1a3      	bne.n	80045d0 <HAL_SPI_TransmitReceive+0x164>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800468e:	b29b      	uxth	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d19d      	bne.n	80045d0 <HAL_SPI_TransmitReceive+0x164>
 8004694:	e0df      	b.n	8004856 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_SPI_TransmitReceive+0x23a>
 800469e:	8a7b      	ldrh	r3, [r7, #18]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	f040 80cb 	bne.w	800483c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d912      	bls.n	80046d6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b4:	881a      	ldrh	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c0:	1c9a      	adds	r2, r3, #2
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b02      	subs	r3, #2
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046d4:	e0b2      	b.n	800483c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	330c      	adds	r3, #12
 80046e0:	7812      	ldrb	r2, [r2, #0]
 80046e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046fc:	e09e      	b.n	800483c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b02      	cmp	r3, #2
 800470a:	d134      	bne.n	8004776 <HAL_SPI_TransmitReceive+0x30a>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004710:	b29b      	uxth	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d02f      	beq.n	8004776 <HAL_SPI_TransmitReceive+0x30a>
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	2b01      	cmp	r3, #1
 800471a:	d12c      	bne.n	8004776 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b01      	cmp	r3, #1
 8004724:	d912      	bls.n	800474c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	881a      	ldrh	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	1c9a      	adds	r2, r3, #2
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004740:	b29b      	uxth	r3, r3
 8004742:	3b02      	subs	r3, #2
 8004744:	b29a      	uxth	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	87da      	strh	r2, [r3, #62]	; 0x3e
 800474a:	e012      	b.n	8004772 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	330c      	adds	r3, #12
 8004756:	7812      	ldrb	r2, [r2, #0]
 8004758:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b01      	cmp	r3, #1
 8004782:	d148      	bne.n	8004816 <HAL_SPI_TransmitReceive+0x3aa>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800478a:	b29b      	uxth	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d042      	beq.n	8004816 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004796:	b29b      	uxth	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	d923      	bls.n	80047e4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	b292      	uxth	r2, r2
 80047a8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	1c9a      	adds	r2, r3, #2
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b02      	subs	r3, #2
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d81f      	bhi.n	8004812 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047e0:	605a      	str	r2, [r3, #4]
 80047e2:	e016      	b.n	8004812 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f103 020c 	add.w	r2, r3, #12
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f0:	7812      	ldrb	r2, [r2, #0]
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b01      	subs	r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004812:	2301      	movs	r3, #1
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004816:	f7fd f8d3 	bl	80019c0 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004822:	429a      	cmp	r2, r3
 8004824:	d803      	bhi.n	800482e <HAL_SPI_TransmitReceive+0x3c2>
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482c:	d102      	bne.n	8004834 <HAL_SPI_TransmitReceive+0x3c8>
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	2b00      	cmp	r3, #0
 8004832:	d103      	bne.n	800483c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800483a:	e01c      	b.n	8004876 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	f47f af5b 	bne.w	80046fe <HAL_SPI_TransmitReceive+0x292>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	f47f af54 	bne.w	80046fe <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004856:	69fa      	ldr	r2, [r7, #28]
 8004858:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 fa7c 	bl	8004d58 <SPI_EndRxTxTransaction>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d006      	beq.n	8004874 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2220      	movs	r2, #32
 8004870:	661a      	str	r2, [r3, #96]	; 0x60
 8004872:	e000      	b.n	8004876 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004874:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004886:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800488a:	4618      	mov	r0, r3
 800488c:	3728      	adds	r7, #40	; 0x28
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	4613      	mov	r3, r2
 80048a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_SPI_Transmit_DMA+0x20>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e0d0      	b.n	8004a56 <HAL_SPI_Transmit_DMA+0x1c2>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d002      	beq.n	80048ce <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80048c8:	2302      	movs	r3, #2
 80048ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048cc:	e0be      	b.n	8004a4c <HAL_SPI_Transmit_DMA+0x1b8>
  }

  if ((pData == NULL) || (Size == 0U))
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <HAL_SPI_Transmit_DMA+0x46>
 80048d4:	88fb      	ldrh	r3, [r7, #6]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d102      	bne.n	80048e0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048de:	e0b5      	b.n	8004a4c <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2203      	movs	r2, #3
 80048e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	88fa      	ldrh	r2, [r7, #6]
 80048f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	88fa      	ldrh	r2, [r7, #6]
 80048fe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800492a:	d107      	bne.n	800493c <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800493a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004940:	4a47      	ldr	r2, [pc, #284]	; (8004a60 <HAL_SPI_Transmit_DMA+0x1cc>)
 8004942:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004948:	4a46      	ldr	r2, [pc, #280]	; (8004a64 <HAL_SPI_Transmit_DMA+0x1d0>)
 800494a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004950:	4a45      	ldr	r2, [pc, #276]	; (8004a68 <HAL_SPI_Transmit_DMA+0x1d4>)
 8004952:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004958:	2200      	movs	r2, #0
 800495a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800496a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004974:	d82d      	bhi.n	80049d2 <HAL_SPI_Transmit_DMA+0x13e>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004980:	d127      	bne.n	80049d2 <HAL_SPI_Transmit_DMA+0x13e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004986:	b29b      	uxth	r3, r3
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10f      	bne.n	80049b0 <HAL_SPI_Transmit_DMA+0x11c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800499e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	085b      	lsrs	r3, r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049ae:	e010      	b.n	80049d2 <HAL_SPI_Transmit_DMA+0x13e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049be:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	085b      	lsrs	r3, r3, #1
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	3301      	adds	r3, #1
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049da:	4619      	mov	r1, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	330c      	adds	r3, #12
 80049e2:	461a      	mov	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	f7fd f9d1 	bl	8001d90 <HAL_DMA_Start_IT>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00c      	beq.n	8004a0e <HAL_SPI_Transmit_DMA+0x17a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f8:	f043 0210 	orr.w	r2, r3, #16
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004a0c:	e01e      	b.n	8004a4c <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a18:	2b40      	cmp	r3, #64	; 0x40
 8004a1a:	d007      	beq.n	8004a2c <HAL_SPI_Transmit_DMA+0x198>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a2a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0220 	orr.w	r2, r2, #32
 8004a3a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0202 	orr.w	r2, r2, #2
 8004a4a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3718      	adds	r7, #24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	08004b4f 	.word	0x08004b4f
 8004a64:	08004aa9 	.word	0x08004aa9
 8004a68:	08004b6b 	.word	0x08004b6b

08004a6c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ab6:	f7fc ff83 	bl	80019c0 <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b20      	cmp	r3, #32
 8004ac8:	d03b      	beq.n	8004b42 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0220 	bic.w	r2, r2, #32
 8004ad8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0202 	bic.w	r2, r2, #2
 8004ae8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	2164      	movs	r1, #100	; 0x64
 8004aee:	6978      	ldr	r0, [r7, #20]
 8004af0:	f000 f932 	bl	8004d58 <SPI_EndRxTxTransaction>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d005      	beq.n	8004b06 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004afe:	f043 0220 	orr.w	r2, r3, #32
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10a      	bne.n	8004b24 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	2200      	movs	r2, #0
 8004b28:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004b3a:	6978      	ldr	r0, [r7, #20]
 8004b3c:	f7ff ffaa 	bl	8004a94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004b40:	e002      	b.n	8004b48 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004b42:	6978      	ldr	r0, [r7, #20]
 8004b44:	f7ff ff92 	bl	8004a6c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b084      	sub	sp, #16
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f7ff ff8f 	bl	8004a80 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0203 	bic.w	r2, r2, #3
 8004b86:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b8c:	f043 0210 	orr.w	r2, r3, #16
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f7ff ff79 	bl	8004a94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ba2:	bf00      	nop
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b084      	sub	sp, #16
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	60f8      	str	r0, [r7, #12]
 8004bb2:	60b9      	str	r1, [r7, #8]
 8004bb4:	603b      	str	r3, [r7, #0]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bba:	e04c      	b.n	8004c56 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc2:	d048      	beq.n	8004c56 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004bc4:	f7fc fefc 	bl	80019c0 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d902      	bls.n	8004bda <SPI_WaitFlagStateUntilTimeout+0x30>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d13d      	bne.n	8004c56 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004be8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bf2:	d111      	bne.n	8004c18 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bfc:	d004      	beq.n	8004c08 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c06:	d107      	bne.n	8004c18 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c20:	d10f      	bne.n	8004c42 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e00f      	b.n	8004c76 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	bf0c      	ite	eq
 8004c66:	2301      	moveq	r3, #1
 8004c68:	2300      	movne	r3, #0
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	79fb      	ldrb	r3, [r7, #7]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d1a3      	bne.n	8004bbc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b084      	sub	sp, #16
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	60f8      	str	r0, [r7, #12]
 8004c86:	60b9      	str	r1, [r7, #8]
 8004c88:	607a      	str	r2, [r7, #4]
 8004c8a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c8c:	e057      	b.n	8004d3e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c94:	d106      	bne.n	8004ca4 <SPI_WaitFifoStateUntilTimeout+0x26>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d103      	bne.n	8004ca4 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	330c      	adds	r3, #12
 8004ca2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004caa:	d048      	beq.n	8004d3e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004cac:	f7fc fe88 	bl	80019c0 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d902      	bls.n	8004cc2 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d13d      	bne.n	8004d3e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cda:	d111      	bne.n	8004d00 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce4:	d004      	beq.n	8004cf0 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cee:	d107      	bne.n	8004d00 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d08:	d10f      	bne.n	8004d2a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e008      	b.n	8004d50 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	4013      	ands	r3, r2
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d19f      	bne.n	8004c8e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f7ff ff84 	bl	8004c7e <SPI_WaitFifoStateUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d007      	beq.n	8004d8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d80:	f043 0220 	orr.w	r2, r3, #32
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e027      	b.n	8004ddc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2200      	movs	r2, #0
 8004d94:	2180      	movs	r1, #128	; 0x80
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f7ff ff07 	bl	8004baa <SPI_WaitFlagStateUntilTimeout>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d007      	beq.n	8004db2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da6:	f043 0220 	orr.w	r2, r3, #32
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e014      	b.n	8004ddc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f7ff ff5d 	bl	8004c7e <SPI_WaitFifoStateUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d007      	beq.n	8004dda <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dce:	f043 0220 	orr.w	r2, r3, #32
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e000      	b.n	8004ddc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e042      	b.n	8004e7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d106      	bne.n	8004e0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7fc fbaf 	bl	800156c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2224      	movs	r2, #36	; 0x24
 8004e12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0201 	bic.w	r2, r2, #1
 8004e24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f82e 	bl	8004e88 <UART_SetConfig>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d101      	bne.n	8004e36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e022      	b.n	8004e7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f001 f9e2 	bl	8006208 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0201 	orr.w	r2, r2, #1
 8004e72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f001 fa69 	bl	800634c <UART_CheckIdleState>
 8004e7a:	4603      	mov	r3, r0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	0000      	movs	r0, r0
	...

08004e88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e88:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004e8c:	b088      	sub	sp, #32
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	431a      	orrs	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eba:	69fa      	ldr	r2, [r7, #28]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	4bac      	ldr	r3, [pc, #688]	; (8005178 <UART_SetConfig+0x2f0>)
 8004ec8:	4013      	ands	r3, r2
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6812      	ldr	r2, [r2, #0]
 8004ece:	69f9      	ldr	r1, [r7, #28]
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4aa1      	ldr	r2, [pc, #644]	; (800517c <UART_SetConfig+0x2f4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d004      	beq.n	8004f04 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004f0e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6812      	ldr	r2, [r2, #0]
 8004f16:	69f9      	ldr	r1, [r7, #28]
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	f023 010f 	bic.w	r1, r3, #15
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a92      	ldr	r2, [pc, #584]	; (8005180 <UART_SetConfig+0x2f8>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d121      	bne.n	8004f80 <UART_SetConfig+0xf8>
 8004f3c:	4b91      	ldr	r3, [pc, #580]	; (8005184 <UART_SetConfig+0x2fc>)
 8004f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	d816      	bhi.n	8004f78 <UART_SetConfig+0xf0>
 8004f4a:	a201      	add	r2, pc, #4	; (adr r2, 8004f50 <UART_SetConfig+0xc8>)
 8004f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f50:	08004f61 	.word	0x08004f61
 8004f54:	08004f6d 	.word	0x08004f6d
 8004f58:	08004f67 	.word	0x08004f67
 8004f5c:	08004f73 	.word	0x08004f73
 8004f60:	2301      	movs	r3, #1
 8004f62:	76fb      	strb	r3, [r7, #27]
 8004f64:	e0e8      	b.n	8005138 <UART_SetConfig+0x2b0>
 8004f66:	2302      	movs	r3, #2
 8004f68:	76fb      	strb	r3, [r7, #27]
 8004f6a:	e0e5      	b.n	8005138 <UART_SetConfig+0x2b0>
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	76fb      	strb	r3, [r7, #27]
 8004f70:	e0e2      	b.n	8005138 <UART_SetConfig+0x2b0>
 8004f72:	2308      	movs	r3, #8
 8004f74:	76fb      	strb	r3, [r7, #27]
 8004f76:	e0df      	b.n	8005138 <UART_SetConfig+0x2b0>
 8004f78:	2310      	movs	r3, #16
 8004f7a:	76fb      	strb	r3, [r7, #27]
 8004f7c:	bf00      	nop
 8004f7e:	e0db      	b.n	8005138 <UART_SetConfig+0x2b0>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a80      	ldr	r2, [pc, #512]	; (8005188 <UART_SetConfig+0x300>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d134      	bne.n	8004ff4 <UART_SetConfig+0x16c>
 8004f8a:	4b7e      	ldr	r3, [pc, #504]	; (8005184 <UART_SetConfig+0x2fc>)
 8004f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f90:	f003 030c 	and.w	r3, r3, #12
 8004f94:	2b0c      	cmp	r3, #12
 8004f96:	d829      	bhi.n	8004fec <UART_SetConfig+0x164>
 8004f98:	a201      	add	r2, pc, #4	; (adr r2, 8004fa0 <UART_SetConfig+0x118>)
 8004f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9e:	bf00      	nop
 8004fa0:	08004fd5 	.word	0x08004fd5
 8004fa4:	08004fed 	.word	0x08004fed
 8004fa8:	08004fed 	.word	0x08004fed
 8004fac:	08004fed 	.word	0x08004fed
 8004fb0:	08004fe1 	.word	0x08004fe1
 8004fb4:	08004fed 	.word	0x08004fed
 8004fb8:	08004fed 	.word	0x08004fed
 8004fbc:	08004fed 	.word	0x08004fed
 8004fc0:	08004fdb 	.word	0x08004fdb
 8004fc4:	08004fed 	.word	0x08004fed
 8004fc8:	08004fed 	.word	0x08004fed
 8004fcc:	08004fed 	.word	0x08004fed
 8004fd0:	08004fe7 	.word	0x08004fe7
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	76fb      	strb	r3, [r7, #27]
 8004fd8:	e0ae      	b.n	8005138 <UART_SetConfig+0x2b0>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	76fb      	strb	r3, [r7, #27]
 8004fde:	e0ab      	b.n	8005138 <UART_SetConfig+0x2b0>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	76fb      	strb	r3, [r7, #27]
 8004fe4:	e0a8      	b.n	8005138 <UART_SetConfig+0x2b0>
 8004fe6:	2308      	movs	r3, #8
 8004fe8:	76fb      	strb	r3, [r7, #27]
 8004fea:	e0a5      	b.n	8005138 <UART_SetConfig+0x2b0>
 8004fec:	2310      	movs	r3, #16
 8004fee:	76fb      	strb	r3, [r7, #27]
 8004ff0:	bf00      	nop
 8004ff2:	e0a1      	b.n	8005138 <UART_SetConfig+0x2b0>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a64      	ldr	r2, [pc, #400]	; (800518c <UART_SetConfig+0x304>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d120      	bne.n	8005040 <UART_SetConfig+0x1b8>
 8004ffe:	4b61      	ldr	r3, [pc, #388]	; (8005184 <UART_SetConfig+0x2fc>)
 8005000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005004:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005008:	2b10      	cmp	r3, #16
 800500a:	d00f      	beq.n	800502c <UART_SetConfig+0x1a4>
 800500c:	2b10      	cmp	r3, #16
 800500e:	d802      	bhi.n	8005016 <UART_SetConfig+0x18e>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d005      	beq.n	8005020 <UART_SetConfig+0x198>
 8005014:	e010      	b.n	8005038 <UART_SetConfig+0x1b0>
 8005016:	2b20      	cmp	r3, #32
 8005018:	d005      	beq.n	8005026 <UART_SetConfig+0x19e>
 800501a:	2b30      	cmp	r3, #48	; 0x30
 800501c:	d009      	beq.n	8005032 <UART_SetConfig+0x1aa>
 800501e:	e00b      	b.n	8005038 <UART_SetConfig+0x1b0>
 8005020:	2300      	movs	r3, #0
 8005022:	76fb      	strb	r3, [r7, #27]
 8005024:	e088      	b.n	8005138 <UART_SetConfig+0x2b0>
 8005026:	2302      	movs	r3, #2
 8005028:	76fb      	strb	r3, [r7, #27]
 800502a:	e085      	b.n	8005138 <UART_SetConfig+0x2b0>
 800502c:	2304      	movs	r3, #4
 800502e:	76fb      	strb	r3, [r7, #27]
 8005030:	e082      	b.n	8005138 <UART_SetConfig+0x2b0>
 8005032:	2308      	movs	r3, #8
 8005034:	76fb      	strb	r3, [r7, #27]
 8005036:	e07f      	b.n	8005138 <UART_SetConfig+0x2b0>
 8005038:	2310      	movs	r3, #16
 800503a:	76fb      	strb	r3, [r7, #27]
 800503c:	bf00      	nop
 800503e:	e07b      	b.n	8005138 <UART_SetConfig+0x2b0>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a52      	ldr	r2, [pc, #328]	; (8005190 <UART_SetConfig+0x308>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d120      	bne.n	800508c <UART_SetConfig+0x204>
 800504a:	4b4e      	ldr	r3, [pc, #312]	; (8005184 <UART_SetConfig+0x2fc>)
 800504c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005050:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005054:	2b40      	cmp	r3, #64	; 0x40
 8005056:	d00f      	beq.n	8005078 <UART_SetConfig+0x1f0>
 8005058:	2b40      	cmp	r3, #64	; 0x40
 800505a:	d802      	bhi.n	8005062 <UART_SetConfig+0x1da>
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <UART_SetConfig+0x1e4>
 8005060:	e010      	b.n	8005084 <UART_SetConfig+0x1fc>
 8005062:	2b80      	cmp	r3, #128	; 0x80
 8005064:	d005      	beq.n	8005072 <UART_SetConfig+0x1ea>
 8005066:	2bc0      	cmp	r3, #192	; 0xc0
 8005068:	d009      	beq.n	800507e <UART_SetConfig+0x1f6>
 800506a:	e00b      	b.n	8005084 <UART_SetConfig+0x1fc>
 800506c:	2300      	movs	r3, #0
 800506e:	76fb      	strb	r3, [r7, #27]
 8005070:	e062      	b.n	8005138 <UART_SetConfig+0x2b0>
 8005072:	2302      	movs	r3, #2
 8005074:	76fb      	strb	r3, [r7, #27]
 8005076:	e05f      	b.n	8005138 <UART_SetConfig+0x2b0>
 8005078:	2304      	movs	r3, #4
 800507a:	76fb      	strb	r3, [r7, #27]
 800507c:	e05c      	b.n	8005138 <UART_SetConfig+0x2b0>
 800507e:	2308      	movs	r3, #8
 8005080:	76fb      	strb	r3, [r7, #27]
 8005082:	e059      	b.n	8005138 <UART_SetConfig+0x2b0>
 8005084:	2310      	movs	r3, #16
 8005086:	76fb      	strb	r3, [r7, #27]
 8005088:	bf00      	nop
 800508a:	e055      	b.n	8005138 <UART_SetConfig+0x2b0>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a40      	ldr	r2, [pc, #256]	; (8005194 <UART_SetConfig+0x30c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d124      	bne.n	80050e0 <UART_SetConfig+0x258>
 8005096:	4b3b      	ldr	r3, [pc, #236]	; (8005184 <UART_SetConfig+0x2fc>)
 8005098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a4:	d012      	beq.n	80050cc <UART_SetConfig+0x244>
 80050a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050aa:	d802      	bhi.n	80050b2 <UART_SetConfig+0x22a>
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d007      	beq.n	80050c0 <UART_SetConfig+0x238>
 80050b0:	e012      	b.n	80050d8 <UART_SetConfig+0x250>
 80050b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050b6:	d006      	beq.n	80050c6 <UART_SetConfig+0x23e>
 80050b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050bc:	d009      	beq.n	80050d2 <UART_SetConfig+0x24a>
 80050be:	e00b      	b.n	80050d8 <UART_SetConfig+0x250>
 80050c0:	2300      	movs	r3, #0
 80050c2:	76fb      	strb	r3, [r7, #27]
 80050c4:	e038      	b.n	8005138 <UART_SetConfig+0x2b0>
 80050c6:	2302      	movs	r3, #2
 80050c8:	76fb      	strb	r3, [r7, #27]
 80050ca:	e035      	b.n	8005138 <UART_SetConfig+0x2b0>
 80050cc:	2304      	movs	r3, #4
 80050ce:	76fb      	strb	r3, [r7, #27]
 80050d0:	e032      	b.n	8005138 <UART_SetConfig+0x2b0>
 80050d2:	2308      	movs	r3, #8
 80050d4:	76fb      	strb	r3, [r7, #27]
 80050d6:	e02f      	b.n	8005138 <UART_SetConfig+0x2b0>
 80050d8:	2310      	movs	r3, #16
 80050da:	76fb      	strb	r3, [r7, #27]
 80050dc:	bf00      	nop
 80050de:	e02b      	b.n	8005138 <UART_SetConfig+0x2b0>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a25      	ldr	r2, [pc, #148]	; (800517c <UART_SetConfig+0x2f4>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d124      	bne.n	8005134 <UART_SetConfig+0x2ac>
 80050ea:	4b26      	ldr	r3, [pc, #152]	; (8005184 <UART_SetConfig+0x2fc>)
 80050ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f8:	d012      	beq.n	8005120 <UART_SetConfig+0x298>
 80050fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050fe:	d802      	bhi.n	8005106 <UART_SetConfig+0x27e>
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <UART_SetConfig+0x28c>
 8005104:	e012      	b.n	800512c <UART_SetConfig+0x2a4>
 8005106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800510a:	d006      	beq.n	800511a <UART_SetConfig+0x292>
 800510c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005110:	d009      	beq.n	8005126 <UART_SetConfig+0x29e>
 8005112:	e00b      	b.n	800512c <UART_SetConfig+0x2a4>
 8005114:	2300      	movs	r3, #0
 8005116:	76fb      	strb	r3, [r7, #27]
 8005118:	e00e      	b.n	8005138 <UART_SetConfig+0x2b0>
 800511a:	2302      	movs	r3, #2
 800511c:	76fb      	strb	r3, [r7, #27]
 800511e:	e00b      	b.n	8005138 <UART_SetConfig+0x2b0>
 8005120:	2304      	movs	r3, #4
 8005122:	76fb      	strb	r3, [r7, #27]
 8005124:	e008      	b.n	8005138 <UART_SetConfig+0x2b0>
 8005126:	2308      	movs	r3, #8
 8005128:	76fb      	strb	r3, [r7, #27]
 800512a:	e005      	b.n	8005138 <UART_SetConfig+0x2b0>
 800512c:	2310      	movs	r3, #16
 800512e:	76fb      	strb	r3, [r7, #27]
 8005130:	bf00      	nop
 8005132:	e001      	b.n	8005138 <UART_SetConfig+0x2b0>
 8005134:	2310      	movs	r3, #16
 8005136:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a0f      	ldr	r2, [pc, #60]	; (800517c <UART_SetConfig+0x2f4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	f040 842d 	bne.w	800599e <UART_SetConfig+0xb16>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005144:	7efb      	ldrb	r3, [r7, #27]
 8005146:	2b08      	cmp	r3, #8
 8005148:	f200 816b 	bhi.w	8005422 <UART_SetConfig+0x59a>
 800514c:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <UART_SetConfig+0x2cc>)
 800514e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005152:	bf00      	nop
 8005154:	08005199 	.word	0x08005199
 8005158:	08005423 	.word	0x08005423
 800515c:	0800523b 	.word	0x0800523b
 8005160:	08005423 	.word	0x08005423
 8005164:	080052d3 	.word	0x080052d3
 8005168:	08005423 	.word	0x08005423
 800516c:	08005423 	.word	0x08005423
 8005170:	08005423 	.word	0x08005423
 8005174:	08005375 	.word	0x08005375
 8005178:	cfff69f3 	.word	0xcfff69f3
 800517c:	40008000 	.word	0x40008000
 8005180:	40013800 	.word	0x40013800
 8005184:	40021000 	.word	0x40021000
 8005188:	40004400 	.word	0x40004400
 800518c:	40004800 	.word	0x40004800
 8005190:	40004c00 	.word	0x40004c00
 8005194:	40005000 	.word	0x40005000
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005198:	f7fe f972 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 800519c:	4602      	mov	r2, r0
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d044      	beq.n	8005230 <UART_SetConfig+0x3a8>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d03e      	beq.n	800522c <UART_SetConfig+0x3a4>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d038      	beq.n	8005228 <UART_SetConfig+0x3a0>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	2b03      	cmp	r3, #3
 80051bc:	d032      	beq.n	8005224 <UART_SetConfig+0x39c>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d02c      	beq.n	8005220 <UART_SetConfig+0x398>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	2b05      	cmp	r3, #5
 80051cc:	d026      	beq.n	800521c <UART_SetConfig+0x394>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	2b06      	cmp	r3, #6
 80051d4:	d020      	beq.n	8005218 <UART_SetConfig+0x390>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	2b07      	cmp	r3, #7
 80051dc:	d01a      	beq.n	8005214 <UART_SetConfig+0x38c>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	2b08      	cmp	r3, #8
 80051e4:	d014      	beq.n	8005210 <UART_SetConfig+0x388>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	2b09      	cmp	r3, #9
 80051ec:	d00e      	beq.n	800520c <UART_SetConfig+0x384>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	2b0a      	cmp	r3, #10
 80051f4:	d008      	beq.n	8005208 <UART_SetConfig+0x380>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	2b0b      	cmp	r3, #11
 80051fc:	d102      	bne.n	8005204 <UART_SetConfig+0x37c>
 80051fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005202:	e016      	b.n	8005232 <UART_SetConfig+0x3aa>
 8005204:	2301      	movs	r3, #1
 8005206:	e014      	b.n	8005232 <UART_SetConfig+0x3aa>
 8005208:	2380      	movs	r3, #128	; 0x80
 800520a:	e012      	b.n	8005232 <UART_SetConfig+0x3aa>
 800520c:	2340      	movs	r3, #64	; 0x40
 800520e:	e010      	b.n	8005232 <UART_SetConfig+0x3aa>
 8005210:	2320      	movs	r3, #32
 8005212:	e00e      	b.n	8005232 <UART_SetConfig+0x3aa>
 8005214:	2310      	movs	r3, #16
 8005216:	e00c      	b.n	8005232 <UART_SetConfig+0x3aa>
 8005218:	230c      	movs	r3, #12
 800521a:	e00a      	b.n	8005232 <UART_SetConfig+0x3aa>
 800521c:	230a      	movs	r3, #10
 800521e:	e008      	b.n	8005232 <UART_SetConfig+0x3aa>
 8005220:	2308      	movs	r3, #8
 8005222:	e006      	b.n	8005232 <UART_SetConfig+0x3aa>
 8005224:	2306      	movs	r3, #6
 8005226:	e004      	b.n	8005232 <UART_SetConfig+0x3aa>
 8005228:	2304      	movs	r3, #4
 800522a:	e002      	b.n	8005232 <UART_SetConfig+0x3aa>
 800522c:	2302      	movs	r3, #2
 800522e:	e000      	b.n	8005232 <UART_SetConfig+0x3aa>
 8005230:	2301      	movs	r3, #1
 8005232:	fbb2 f3f3 	udiv	r3, r2, r3
 8005236:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8005238:	e0f6      	b.n	8005428 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	2b00      	cmp	r3, #0
 8005240:	d044      	beq.n	80052cc <UART_SetConfig+0x444>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	2b01      	cmp	r3, #1
 8005248:	d03e      	beq.n	80052c8 <UART_SetConfig+0x440>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	2b02      	cmp	r3, #2
 8005250:	d038      	beq.n	80052c4 <UART_SetConfig+0x43c>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	2b03      	cmp	r3, #3
 8005258:	d032      	beq.n	80052c0 <UART_SetConfig+0x438>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	2b04      	cmp	r3, #4
 8005260:	d02c      	beq.n	80052bc <UART_SetConfig+0x434>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	2b05      	cmp	r3, #5
 8005268:	d026      	beq.n	80052b8 <UART_SetConfig+0x430>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	2b06      	cmp	r3, #6
 8005270:	d020      	beq.n	80052b4 <UART_SetConfig+0x42c>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	2b07      	cmp	r3, #7
 8005278:	d01a      	beq.n	80052b0 <UART_SetConfig+0x428>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	2b08      	cmp	r3, #8
 8005280:	d014      	beq.n	80052ac <UART_SetConfig+0x424>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	2b09      	cmp	r3, #9
 8005288:	d00e      	beq.n	80052a8 <UART_SetConfig+0x420>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	2b0a      	cmp	r3, #10
 8005290:	d008      	beq.n	80052a4 <UART_SetConfig+0x41c>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	2b0b      	cmp	r3, #11
 8005298:	d102      	bne.n	80052a0 <UART_SetConfig+0x418>
 800529a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800529e:	e016      	b.n	80052ce <UART_SetConfig+0x446>
 80052a0:	4ba1      	ldr	r3, [pc, #644]	; (8005528 <UART_SetConfig+0x6a0>)
 80052a2:	e014      	b.n	80052ce <UART_SetConfig+0x446>
 80052a4:	4ba1      	ldr	r3, [pc, #644]	; (800552c <UART_SetConfig+0x6a4>)
 80052a6:	e012      	b.n	80052ce <UART_SetConfig+0x446>
 80052a8:	4ba1      	ldr	r3, [pc, #644]	; (8005530 <UART_SetConfig+0x6a8>)
 80052aa:	e010      	b.n	80052ce <UART_SetConfig+0x446>
 80052ac:	4ba1      	ldr	r3, [pc, #644]	; (8005534 <UART_SetConfig+0x6ac>)
 80052ae:	e00e      	b.n	80052ce <UART_SetConfig+0x446>
 80052b0:	4ba1      	ldr	r3, [pc, #644]	; (8005538 <UART_SetConfig+0x6b0>)
 80052b2:	e00c      	b.n	80052ce <UART_SetConfig+0x446>
 80052b4:	4ba1      	ldr	r3, [pc, #644]	; (800553c <UART_SetConfig+0x6b4>)
 80052b6:	e00a      	b.n	80052ce <UART_SetConfig+0x446>
 80052b8:	4ba1      	ldr	r3, [pc, #644]	; (8005540 <UART_SetConfig+0x6b8>)
 80052ba:	e008      	b.n	80052ce <UART_SetConfig+0x446>
 80052bc:	4ba1      	ldr	r3, [pc, #644]	; (8005544 <UART_SetConfig+0x6bc>)
 80052be:	e006      	b.n	80052ce <UART_SetConfig+0x446>
 80052c0:	4ba1      	ldr	r3, [pc, #644]	; (8005548 <UART_SetConfig+0x6c0>)
 80052c2:	e004      	b.n	80052ce <UART_SetConfig+0x446>
 80052c4:	4ba1      	ldr	r3, [pc, #644]	; (800554c <UART_SetConfig+0x6c4>)
 80052c6:	e002      	b.n	80052ce <UART_SetConfig+0x446>
 80052c8:	4ba1      	ldr	r3, [pc, #644]	; (8005550 <UART_SetConfig+0x6c8>)
 80052ca:	e000      	b.n	80052ce <UART_SetConfig+0x446>
 80052cc:	4b96      	ldr	r3, [pc, #600]	; (8005528 <UART_SetConfig+0x6a0>)
 80052ce:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 80052d0:	e0aa      	b.n	8005428 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80052d2:	f7fe f83f 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 80052d6:	4602      	mov	r2, r0
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d044      	beq.n	800536a <UART_SetConfig+0x4e2>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d03e      	beq.n	8005366 <UART_SetConfig+0x4de>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d038      	beq.n	8005362 <UART_SetConfig+0x4da>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	2b03      	cmp	r3, #3
 80052f6:	d032      	beq.n	800535e <UART_SetConfig+0x4d6>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	2b04      	cmp	r3, #4
 80052fe:	d02c      	beq.n	800535a <UART_SetConfig+0x4d2>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	2b05      	cmp	r3, #5
 8005306:	d026      	beq.n	8005356 <UART_SetConfig+0x4ce>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	2b06      	cmp	r3, #6
 800530e:	d020      	beq.n	8005352 <UART_SetConfig+0x4ca>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	2b07      	cmp	r3, #7
 8005316:	d01a      	beq.n	800534e <UART_SetConfig+0x4c6>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	2b08      	cmp	r3, #8
 800531e:	d014      	beq.n	800534a <UART_SetConfig+0x4c2>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	2b09      	cmp	r3, #9
 8005326:	d00e      	beq.n	8005346 <UART_SetConfig+0x4be>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	2b0a      	cmp	r3, #10
 800532e:	d008      	beq.n	8005342 <UART_SetConfig+0x4ba>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	2b0b      	cmp	r3, #11
 8005336:	d102      	bne.n	800533e <UART_SetConfig+0x4b6>
 8005338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800533c:	e016      	b.n	800536c <UART_SetConfig+0x4e4>
 800533e:	2301      	movs	r3, #1
 8005340:	e014      	b.n	800536c <UART_SetConfig+0x4e4>
 8005342:	2380      	movs	r3, #128	; 0x80
 8005344:	e012      	b.n	800536c <UART_SetConfig+0x4e4>
 8005346:	2340      	movs	r3, #64	; 0x40
 8005348:	e010      	b.n	800536c <UART_SetConfig+0x4e4>
 800534a:	2320      	movs	r3, #32
 800534c:	e00e      	b.n	800536c <UART_SetConfig+0x4e4>
 800534e:	2310      	movs	r3, #16
 8005350:	e00c      	b.n	800536c <UART_SetConfig+0x4e4>
 8005352:	230c      	movs	r3, #12
 8005354:	e00a      	b.n	800536c <UART_SetConfig+0x4e4>
 8005356:	230a      	movs	r3, #10
 8005358:	e008      	b.n	800536c <UART_SetConfig+0x4e4>
 800535a:	2308      	movs	r3, #8
 800535c:	e006      	b.n	800536c <UART_SetConfig+0x4e4>
 800535e:	2306      	movs	r3, #6
 8005360:	e004      	b.n	800536c <UART_SetConfig+0x4e4>
 8005362:	2304      	movs	r3, #4
 8005364:	e002      	b.n	800536c <UART_SetConfig+0x4e4>
 8005366:	2302      	movs	r3, #2
 8005368:	e000      	b.n	800536c <UART_SetConfig+0x4e4>
 800536a:	2301      	movs	r3, #1
 800536c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005370:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8005372:	e059      	b.n	8005428 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	2b00      	cmp	r3, #0
 800537a:	d04e      	beq.n	800541a <UART_SetConfig+0x592>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	2b01      	cmp	r3, #1
 8005382:	d047      	beq.n	8005414 <UART_SetConfig+0x58c>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	2b02      	cmp	r3, #2
 800538a:	d040      	beq.n	800540e <UART_SetConfig+0x586>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	2b03      	cmp	r3, #3
 8005392:	d039      	beq.n	8005408 <UART_SetConfig+0x580>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	2b04      	cmp	r3, #4
 800539a:	d032      	beq.n	8005402 <UART_SetConfig+0x57a>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	2b05      	cmp	r3, #5
 80053a2:	d02b      	beq.n	80053fc <UART_SetConfig+0x574>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	2b06      	cmp	r3, #6
 80053aa:	d024      	beq.n	80053f6 <UART_SetConfig+0x56e>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	2b07      	cmp	r3, #7
 80053b2:	d01d      	beq.n	80053f0 <UART_SetConfig+0x568>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d016      	beq.n	80053ea <UART_SetConfig+0x562>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c0:	2b09      	cmp	r3, #9
 80053c2:	d00f      	beq.n	80053e4 <UART_SetConfig+0x55c>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	2b0a      	cmp	r3, #10
 80053ca:	d008      	beq.n	80053de <UART_SetConfig+0x556>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	2b0b      	cmp	r3, #11
 80053d2:	d101      	bne.n	80053d8 <UART_SetConfig+0x550>
 80053d4:	2380      	movs	r3, #128	; 0x80
 80053d6:	e022      	b.n	800541e <UART_SetConfig+0x596>
 80053d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053dc:	e01f      	b.n	800541e <UART_SetConfig+0x596>
 80053de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053e2:	e01c      	b.n	800541e <UART_SetConfig+0x596>
 80053e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053e8:	e019      	b.n	800541e <UART_SetConfig+0x596>
 80053ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053ee:	e016      	b.n	800541e <UART_SetConfig+0x596>
 80053f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053f4:	e013      	b.n	800541e <UART_SetConfig+0x596>
 80053f6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80053fa:	e010      	b.n	800541e <UART_SetConfig+0x596>
 80053fc:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005400:	e00d      	b.n	800541e <UART_SetConfig+0x596>
 8005402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005406:	e00a      	b.n	800541e <UART_SetConfig+0x596>
 8005408:	f241 5355 	movw	r3, #5461	; 0x1555
 800540c:	e007      	b.n	800541e <UART_SetConfig+0x596>
 800540e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005412:	e004      	b.n	800541e <UART_SetConfig+0x596>
 8005414:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005418:	e001      	b.n	800541e <UART_SetConfig+0x596>
 800541a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800541e:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8005420:	e002      	b.n	8005428 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	74fb      	strb	r3, [r7, #19]
        break;
 8005426:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 86c2 	beq.w	80061b4 <UART_SetConfig+0x132c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	4613      	mov	r3, r2
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	4413      	add	r3, r2
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	429a      	cmp	r2, r3
 800543e:	d305      	bcc.n	800544c <UART_SetConfig+0x5c4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	429a      	cmp	r2, r3
 800544a:	d903      	bls.n	8005454 <UART_SetConfig+0x5cc>
      {
        ret = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	74fb      	strb	r3, [r7, #19]
 8005450:	f000 beb0 	b.w	80061b4 <UART_SetConfig+0x132c>
      }
      else
      {
        switch (clocksource)
 8005454:	7efb      	ldrb	r3, [r7, #27]
 8005456:	2b08      	cmp	r3, #8
 8005458:	f200 828c 	bhi.w	8005974 <UART_SetConfig+0xaec>
 800545c:	a201      	add	r2, pc, #4	; (adr r2, 8005464 <UART_SetConfig+0x5dc>)
 800545e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005462:	bf00      	nop
 8005464:	08005489 	.word	0x08005489
 8005468:	08005975 	.word	0x08005975
 800546c:	080055f3 	.word	0x080055f3
 8005470:	08005975 	.word	0x08005975
 8005474:	080056e9 	.word	0x080056e9
 8005478:	08005975 	.word	0x08005975
 800547c:	08005975 	.word	0x08005975
 8005480:	08005975 	.word	0x08005975
 8005484:	08005825 	.word	0x08005825
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005488:	f7fd fffa 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 800548c:	4603      	mov	r3, r0
 800548e:	4618      	mov	r0, r3
 8005490:	f04f 0100 	mov.w	r1, #0
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	2b00      	cmp	r3, #0
 800549a:	d07e      	beq.n	800559a <UART_SetConfig+0x712>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d075      	beq.n	8005590 <UART_SetConfig+0x708>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d06c      	beq.n	8005586 <UART_SetConfig+0x6fe>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	2b03      	cmp	r3, #3
 80054b2:	d063      	beq.n	800557c <UART_SetConfig+0x6f4>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d05a      	beq.n	8005572 <UART_SetConfig+0x6ea>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	2b05      	cmp	r3, #5
 80054c2:	d051      	beq.n	8005568 <UART_SetConfig+0x6e0>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	2b06      	cmp	r3, #6
 80054ca:	d048      	beq.n	800555e <UART_SetConfig+0x6d6>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	2b07      	cmp	r3, #7
 80054d2:	d03f      	beq.n	8005554 <UART_SetConfig+0x6cc>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d01f      	beq.n	800551c <UART_SetConfig+0x694>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	2b09      	cmp	r3, #9
 80054e2:	d016      	beq.n	8005512 <UART_SetConfig+0x68a>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	2b0a      	cmp	r3, #10
 80054ea:	d00d      	beq.n	8005508 <UART_SetConfig+0x680>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	2b0b      	cmp	r3, #11
 80054f2:	d104      	bne.n	80054fe <UART_SetConfig+0x676>
 80054f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054f8:	f04f 0400 	mov.w	r4, #0
 80054fc:	e051      	b.n	80055a2 <UART_SetConfig+0x71a>
 80054fe:	f04f 0301 	mov.w	r3, #1
 8005502:	f04f 0400 	mov.w	r4, #0
 8005506:	e04c      	b.n	80055a2 <UART_SetConfig+0x71a>
 8005508:	f04f 0380 	mov.w	r3, #128	; 0x80
 800550c:	f04f 0400 	mov.w	r4, #0
 8005510:	e047      	b.n	80055a2 <UART_SetConfig+0x71a>
 8005512:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005516:	f04f 0400 	mov.w	r4, #0
 800551a:	e042      	b.n	80055a2 <UART_SetConfig+0x71a>
 800551c:	f04f 0320 	mov.w	r3, #32
 8005520:	f04f 0400 	mov.w	r4, #0
 8005524:	e03d      	b.n	80055a2 <UART_SetConfig+0x71a>
 8005526:	bf00      	nop
 8005528:	00f42400 	.word	0x00f42400
 800552c:	0001e848 	.word	0x0001e848
 8005530:	0003d090 	.word	0x0003d090
 8005534:	0007a120 	.word	0x0007a120
 8005538:	000f4240 	.word	0x000f4240
 800553c:	00145855 	.word	0x00145855
 8005540:	00186a00 	.word	0x00186a00
 8005544:	001e8480 	.word	0x001e8480
 8005548:	0028b0aa 	.word	0x0028b0aa
 800554c:	003d0900 	.word	0x003d0900
 8005550:	007a1200 	.word	0x007a1200
 8005554:	f04f 0310 	mov.w	r3, #16
 8005558:	f04f 0400 	mov.w	r4, #0
 800555c:	e021      	b.n	80055a2 <UART_SetConfig+0x71a>
 800555e:	f04f 030c 	mov.w	r3, #12
 8005562:	f04f 0400 	mov.w	r4, #0
 8005566:	e01c      	b.n	80055a2 <UART_SetConfig+0x71a>
 8005568:	f04f 030a 	mov.w	r3, #10
 800556c:	f04f 0400 	mov.w	r4, #0
 8005570:	e017      	b.n	80055a2 <UART_SetConfig+0x71a>
 8005572:	f04f 0308 	mov.w	r3, #8
 8005576:	f04f 0400 	mov.w	r4, #0
 800557a:	e012      	b.n	80055a2 <UART_SetConfig+0x71a>
 800557c:	f04f 0306 	mov.w	r3, #6
 8005580:	f04f 0400 	mov.w	r4, #0
 8005584:	e00d      	b.n	80055a2 <UART_SetConfig+0x71a>
 8005586:	f04f 0304 	mov.w	r3, #4
 800558a:	f04f 0400 	mov.w	r4, #0
 800558e:	e008      	b.n	80055a2 <UART_SetConfig+0x71a>
 8005590:	f04f 0302 	mov.w	r3, #2
 8005594:	f04f 0400 	mov.w	r4, #0
 8005598:	e003      	b.n	80055a2 <UART_SetConfig+0x71a>
 800559a:	f04f 0301 	mov.w	r3, #1
 800559e:	f04f 0400 	mov.w	r4, #0
 80055a2:	461a      	mov	r2, r3
 80055a4:	4623      	mov	r3, r4
 80055a6:	f7fa fe7b 	bl	80002a0 <__aeabi_uldivmod>
 80055aa:	4603      	mov	r3, r0
 80055ac:	460c      	mov	r4, r1
 80055ae:	4619      	mov	r1, r3
 80055b0:	4622      	mov	r2, r4
 80055b2:	f04f 0300 	mov.w	r3, #0
 80055b6:	f04f 0400 	mov.w	r4, #0
 80055ba:	0214      	lsls	r4, r2, #8
 80055bc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80055c0:	020b      	lsls	r3, r1, #8
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6852      	ldr	r2, [r2, #4]
 80055c6:	0852      	lsrs	r2, r2, #1
 80055c8:	4611      	mov	r1, r2
 80055ca:	f04f 0200 	mov.w	r2, #0
 80055ce:	eb13 0b01 	adds.w	fp, r3, r1
 80055d2:	eb44 0c02 	adc.w	ip, r4, r2
 80055d6:	4658      	mov	r0, fp
 80055d8:	4661      	mov	r1, ip
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f04f 0400 	mov.w	r4, #0
 80055e2:	461a      	mov	r2, r3
 80055e4:	4623      	mov	r3, r4
 80055e6:	f7fa fe5b 	bl	80002a0 <__aeabi_uldivmod>
 80055ea:	4603      	mov	r3, r0
 80055ec:	460c      	mov	r4, r1
 80055ee:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 80055f0:	e1c3      	b.n	800597a <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d05b      	beq.n	80056b2 <UART_SetConfig+0x82a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d053      	beq.n	80056aa <UART_SetConfig+0x822>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	2b02      	cmp	r3, #2
 8005608:	d04b      	beq.n	80056a2 <UART_SetConfig+0x81a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	2b03      	cmp	r3, #3
 8005610:	d043      	beq.n	800569a <UART_SetConfig+0x812>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	2b04      	cmp	r3, #4
 8005618:	d03b      	beq.n	8005692 <UART_SetConfig+0x80a>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	2b05      	cmp	r3, #5
 8005620:	d033      	beq.n	800568a <UART_SetConfig+0x802>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	2b06      	cmp	r3, #6
 8005628:	d02b      	beq.n	8005682 <UART_SetConfig+0x7fa>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	2b07      	cmp	r3, #7
 8005630:	d023      	beq.n	800567a <UART_SetConfig+0x7f2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	2b08      	cmp	r3, #8
 8005638:	d01b      	beq.n	8005672 <UART_SetConfig+0x7ea>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	2b09      	cmp	r3, #9
 8005640:	d013      	beq.n	800566a <UART_SetConfig+0x7e2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	2b0a      	cmp	r3, #10
 8005648:	d00b      	beq.n	8005662 <UART_SetConfig+0x7da>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	2b0b      	cmp	r3, #11
 8005650:	d103      	bne.n	800565a <UART_SetConfig+0x7d2>
 8005652:	4bad      	ldr	r3, [pc, #692]	; (8005908 <UART_SetConfig+0xa80>)
 8005654:	f04f 0400 	mov.w	r4, #0
 8005658:	e02e      	b.n	80056b8 <UART_SetConfig+0x830>
 800565a:	4bac      	ldr	r3, [pc, #688]	; (800590c <UART_SetConfig+0xa84>)
 800565c:	f04f 0400 	mov.w	r4, #0
 8005660:	e02a      	b.n	80056b8 <UART_SetConfig+0x830>
 8005662:	4bab      	ldr	r3, [pc, #684]	; (8005910 <UART_SetConfig+0xa88>)
 8005664:	f04f 0400 	mov.w	r4, #0
 8005668:	e026      	b.n	80056b8 <UART_SetConfig+0x830>
 800566a:	4baa      	ldr	r3, [pc, #680]	; (8005914 <UART_SetConfig+0xa8c>)
 800566c:	f04f 0400 	mov.w	r4, #0
 8005670:	e022      	b.n	80056b8 <UART_SetConfig+0x830>
 8005672:	4ba9      	ldr	r3, [pc, #676]	; (8005918 <UART_SetConfig+0xa90>)
 8005674:	f04f 0400 	mov.w	r4, #0
 8005678:	e01e      	b.n	80056b8 <UART_SetConfig+0x830>
 800567a:	4ba8      	ldr	r3, [pc, #672]	; (800591c <UART_SetConfig+0xa94>)
 800567c:	f04f 0400 	mov.w	r4, #0
 8005680:	e01a      	b.n	80056b8 <UART_SetConfig+0x830>
 8005682:	a49d      	add	r4, pc, #628	; (adr r4, 80058f8 <UART_SetConfig+0xa70>)
 8005684:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005688:	e016      	b.n	80056b8 <UART_SetConfig+0x830>
 800568a:	4ba5      	ldr	r3, [pc, #660]	; (8005920 <UART_SetConfig+0xa98>)
 800568c:	f04f 0400 	mov.w	r4, #0
 8005690:	e012      	b.n	80056b8 <UART_SetConfig+0x830>
 8005692:	4ba4      	ldr	r3, [pc, #656]	; (8005924 <UART_SetConfig+0xa9c>)
 8005694:	f04f 0400 	mov.w	r4, #0
 8005698:	e00e      	b.n	80056b8 <UART_SetConfig+0x830>
 800569a:	a499      	add	r4, pc, #612	; (adr r4, 8005900 <UART_SetConfig+0xa78>)
 800569c:	e9d4 3400 	ldrd	r3, r4, [r4]
 80056a0:	e00a      	b.n	80056b8 <UART_SetConfig+0x830>
 80056a2:	4ba1      	ldr	r3, [pc, #644]	; (8005928 <UART_SetConfig+0xaa0>)
 80056a4:	f04f 0400 	mov.w	r4, #0
 80056a8:	e006      	b.n	80056b8 <UART_SetConfig+0x830>
 80056aa:	4ba0      	ldr	r3, [pc, #640]	; (800592c <UART_SetConfig+0xaa4>)
 80056ac:	f04f 0400 	mov.w	r4, #0
 80056b0:	e002      	b.n	80056b8 <UART_SetConfig+0x830>
 80056b2:	4b96      	ldr	r3, [pc, #600]	; (800590c <UART_SetConfig+0xa84>)
 80056b4:	f04f 0400 	mov.w	r4, #0
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6852      	ldr	r2, [r2, #4]
 80056bc:	0852      	lsrs	r2, r2, #1
 80056be:	4611      	mov	r1, r2
 80056c0:	f04f 0200 	mov.w	r2, #0
 80056c4:	eb13 0b01 	adds.w	fp, r3, r1
 80056c8:	eb44 0c02 	adc.w	ip, r4, r2
 80056cc:	4658      	mov	r0, fp
 80056ce:	4661      	mov	r1, ip
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f04f 0400 	mov.w	r4, #0
 80056d8:	461a      	mov	r2, r3
 80056da:	4623      	mov	r3, r4
 80056dc:	f7fa fde0 	bl	80002a0 <__aeabi_uldivmod>
 80056e0:	4603      	mov	r3, r0
 80056e2:	460c      	mov	r4, r1
 80056e4:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 80056e6:	e148      	b.n	800597a <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056e8:	f7fd fe34 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 80056ec:	4603      	mov	r3, r0
 80056ee:	4618      	mov	r0, r3
 80056f0:	f04f 0100 	mov.w	r1, #0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d067      	beq.n	80057cc <UART_SetConfig+0x944>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	2b01      	cmp	r3, #1
 8005702:	d05e      	beq.n	80057c2 <UART_SetConfig+0x93a>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	2b02      	cmp	r3, #2
 800570a:	d055      	beq.n	80057b8 <UART_SetConfig+0x930>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	2b03      	cmp	r3, #3
 8005712:	d04c      	beq.n	80057ae <UART_SetConfig+0x926>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	2b04      	cmp	r3, #4
 800571a:	d043      	beq.n	80057a4 <UART_SetConfig+0x91c>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	2b05      	cmp	r3, #5
 8005722:	d03a      	beq.n	800579a <UART_SetConfig+0x912>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	2b06      	cmp	r3, #6
 800572a:	d031      	beq.n	8005790 <UART_SetConfig+0x908>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	2b07      	cmp	r3, #7
 8005732:	d028      	beq.n	8005786 <UART_SetConfig+0x8fe>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	2b08      	cmp	r3, #8
 800573a:	d01f      	beq.n	800577c <UART_SetConfig+0x8f4>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	2b09      	cmp	r3, #9
 8005742:	d016      	beq.n	8005772 <UART_SetConfig+0x8ea>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	2b0a      	cmp	r3, #10
 800574a:	d00d      	beq.n	8005768 <UART_SetConfig+0x8e0>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	2b0b      	cmp	r3, #11
 8005752:	d104      	bne.n	800575e <UART_SetConfig+0x8d6>
 8005754:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005758:	f04f 0400 	mov.w	r4, #0
 800575c:	e03a      	b.n	80057d4 <UART_SetConfig+0x94c>
 800575e:	f04f 0301 	mov.w	r3, #1
 8005762:	f04f 0400 	mov.w	r4, #0
 8005766:	e035      	b.n	80057d4 <UART_SetConfig+0x94c>
 8005768:	f04f 0380 	mov.w	r3, #128	; 0x80
 800576c:	f04f 0400 	mov.w	r4, #0
 8005770:	e030      	b.n	80057d4 <UART_SetConfig+0x94c>
 8005772:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005776:	f04f 0400 	mov.w	r4, #0
 800577a:	e02b      	b.n	80057d4 <UART_SetConfig+0x94c>
 800577c:	f04f 0320 	mov.w	r3, #32
 8005780:	f04f 0400 	mov.w	r4, #0
 8005784:	e026      	b.n	80057d4 <UART_SetConfig+0x94c>
 8005786:	f04f 0310 	mov.w	r3, #16
 800578a:	f04f 0400 	mov.w	r4, #0
 800578e:	e021      	b.n	80057d4 <UART_SetConfig+0x94c>
 8005790:	f04f 030c 	mov.w	r3, #12
 8005794:	f04f 0400 	mov.w	r4, #0
 8005798:	e01c      	b.n	80057d4 <UART_SetConfig+0x94c>
 800579a:	f04f 030a 	mov.w	r3, #10
 800579e:	f04f 0400 	mov.w	r4, #0
 80057a2:	e017      	b.n	80057d4 <UART_SetConfig+0x94c>
 80057a4:	f04f 0308 	mov.w	r3, #8
 80057a8:	f04f 0400 	mov.w	r4, #0
 80057ac:	e012      	b.n	80057d4 <UART_SetConfig+0x94c>
 80057ae:	f04f 0306 	mov.w	r3, #6
 80057b2:	f04f 0400 	mov.w	r4, #0
 80057b6:	e00d      	b.n	80057d4 <UART_SetConfig+0x94c>
 80057b8:	f04f 0304 	mov.w	r3, #4
 80057bc:	f04f 0400 	mov.w	r4, #0
 80057c0:	e008      	b.n	80057d4 <UART_SetConfig+0x94c>
 80057c2:	f04f 0302 	mov.w	r3, #2
 80057c6:	f04f 0400 	mov.w	r4, #0
 80057ca:	e003      	b.n	80057d4 <UART_SetConfig+0x94c>
 80057cc:	f04f 0301 	mov.w	r3, #1
 80057d0:	f04f 0400 	mov.w	r4, #0
 80057d4:	461a      	mov	r2, r3
 80057d6:	4623      	mov	r3, r4
 80057d8:	f7fa fd62 	bl	80002a0 <__aeabi_uldivmod>
 80057dc:	4603      	mov	r3, r0
 80057de:	460c      	mov	r4, r1
 80057e0:	4619      	mov	r1, r3
 80057e2:	4622      	mov	r2, r4
 80057e4:	f04f 0300 	mov.w	r3, #0
 80057e8:	f04f 0400 	mov.w	r4, #0
 80057ec:	0214      	lsls	r4, r2, #8
 80057ee:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80057f2:	020b      	lsls	r3, r1, #8
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6852      	ldr	r2, [r2, #4]
 80057f8:	0852      	lsrs	r2, r2, #1
 80057fa:	4611      	mov	r1, r2
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	eb13 0b01 	adds.w	fp, r3, r1
 8005804:	eb44 0c02 	adc.w	ip, r4, r2
 8005808:	4658      	mov	r0, fp
 800580a:	4661      	mov	r1, ip
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f04f 0400 	mov.w	r4, #0
 8005814:	461a      	mov	r2, r3
 8005816:	4623      	mov	r3, r4
 8005818:	f7fa fd42 	bl	80002a0 <__aeabi_uldivmod>
 800581c:	4603      	mov	r3, r0
 800581e:	460c      	mov	r4, r1
 8005820:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8005822:	e0aa      	b.n	800597a <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 8087 	beq.w	800593c <UART_SetConfig+0xab4>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	2b01      	cmp	r3, #1
 8005834:	d05b      	beq.n	80058ee <UART_SetConfig+0xa66>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	2b02      	cmp	r3, #2
 800583c:	d052      	beq.n	80058e4 <UART_SetConfig+0xa5c>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	2b03      	cmp	r3, #3
 8005844:	d04a      	beq.n	80058dc <UART_SetConfig+0xa54>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	2b04      	cmp	r3, #4
 800584c:	d041      	beq.n	80058d2 <UART_SetConfig+0xa4a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	2b05      	cmp	r3, #5
 8005854:	d039      	beq.n	80058ca <UART_SetConfig+0xa42>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	2b06      	cmp	r3, #6
 800585c:	d031      	beq.n	80058c2 <UART_SetConfig+0xa3a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	2b07      	cmp	r3, #7
 8005864:	d028      	beq.n	80058b8 <UART_SetConfig+0xa30>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	2b08      	cmp	r3, #8
 800586c:	d01f      	beq.n	80058ae <UART_SetConfig+0xa26>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	2b09      	cmp	r3, #9
 8005874:	d016      	beq.n	80058a4 <UART_SetConfig+0xa1c>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	2b0a      	cmp	r3, #10
 800587c:	d00d      	beq.n	800589a <UART_SetConfig+0xa12>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	2b0b      	cmp	r3, #11
 8005884:	d104      	bne.n	8005890 <UART_SetConfig+0xa08>
 8005886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800588a:	f04f 0400 	mov.w	r4, #0
 800588e:	e059      	b.n	8005944 <UART_SetConfig+0xabc>
 8005890:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005894:	f04f 0400 	mov.w	r4, #0
 8005898:	e054      	b.n	8005944 <UART_SetConfig+0xabc>
 800589a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800589e:	f04f 0400 	mov.w	r4, #0
 80058a2:	e04f      	b.n	8005944 <UART_SetConfig+0xabc>
 80058a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058a8:	f04f 0400 	mov.w	r4, #0
 80058ac:	e04a      	b.n	8005944 <UART_SetConfig+0xabc>
 80058ae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80058b2:	f04f 0400 	mov.w	r4, #0
 80058b6:	e045      	b.n	8005944 <UART_SetConfig+0xabc>
 80058b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80058bc:	f04f 0400 	mov.w	r4, #0
 80058c0:	e040      	b.n	8005944 <UART_SetConfig+0xabc>
 80058c2:	4b1b      	ldr	r3, [pc, #108]	; (8005930 <UART_SetConfig+0xaa8>)
 80058c4:	f04f 0400 	mov.w	r4, #0
 80058c8:	e03c      	b.n	8005944 <UART_SetConfig+0xabc>
 80058ca:	4b1a      	ldr	r3, [pc, #104]	; (8005934 <UART_SetConfig+0xaac>)
 80058cc:	f04f 0400 	mov.w	r4, #0
 80058d0:	e038      	b.n	8005944 <UART_SetConfig+0xabc>
 80058d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80058d6:	f04f 0400 	mov.w	r4, #0
 80058da:	e033      	b.n	8005944 <UART_SetConfig+0xabc>
 80058dc:	4b16      	ldr	r3, [pc, #88]	; (8005938 <UART_SetConfig+0xab0>)
 80058de:	f04f 0400 	mov.w	r4, #0
 80058e2:	e02f      	b.n	8005944 <UART_SetConfig+0xabc>
 80058e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80058e8:	f04f 0400 	mov.w	r4, #0
 80058ec:	e02a      	b.n	8005944 <UART_SetConfig+0xabc>
 80058ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80058f2:	f04f 0400 	mov.w	r4, #0
 80058f6:	e025      	b.n	8005944 <UART_SetConfig+0xabc>
 80058f8:	14585500 	.word	0x14585500
 80058fc:	00000000 	.word	0x00000000
 8005900:	28b0aa00 	.word	0x28b0aa00
 8005904:	00000000 	.word	0x00000000
 8005908:	00f42400 	.word	0x00f42400
 800590c:	f4240000 	.word	0xf4240000
 8005910:	01e84800 	.word	0x01e84800
 8005914:	03d09000 	.word	0x03d09000
 8005918:	07a12000 	.word	0x07a12000
 800591c:	0f424000 	.word	0x0f424000
 8005920:	186a0000 	.word	0x186a0000
 8005924:	1e848000 	.word	0x1e848000
 8005928:	3d090000 	.word	0x3d090000
 800592c:	7a120000 	.word	0x7a120000
 8005930:	000aaa00 	.word	0x000aaa00
 8005934:	000ccc00 	.word	0x000ccc00
 8005938:	00155500 	.word	0x00155500
 800593c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005940:	f04f 0400 	mov.w	r4, #0
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6852      	ldr	r2, [r2, #4]
 8005948:	0852      	lsrs	r2, r2, #1
 800594a:	4611      	mov	r1, r2
 800594c:	f04f 0200 	mov.w	r2, #0
 8005950:	eb13 0b01 	adds.w	fp, r3, r1
 8005954:	eb44 0c02 	adc.w	ip, r4, r2
 8005958:	4658      	mov	r0, fp
 800595a:	4661      	mov	r1, ip
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f04f 0400 	mov.w	r4, #0
 8005964:	461a      	mov	r2, r3
 8005966:	4623      	mov	r3, r4
 8005968:	f7fa fc9a 	bl	80002a0 <__aeabi_uldivmod>
 800596c:	4603      	mov	r3, r0
 800596e:	460c      	mov	r4, r1
 8005970:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8005972:	e002      	b.n	800597a <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	74fb      	strb	r3, [r7, #19]
            break;
 8005978:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005980:	d309      	bcc.n	8005996 <UART_SetConfig+0xb0e>
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005988:	d205      	bcs.n	8005996 <UART_SetConfig+0xb0e>
        {
          huart->Instance->BRR = usartdiv;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	60da      	str	r2, [r3, #12]
 8005992:	f000 bc0f 	b.w	80061b4 <UART_SetConfig+0x132c>
        }
        else
        {
          ret = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	74fb      	strb	r3, [r7, #19]
 800599a:	f000 bc0b 	b.w	80061b4 <UART_SetConfig+0x132c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059a6:	f040 81ff 	bne.w	8005da8 <UART_SetConfig+0xf20>
  {
    switch (clocksource)
 80059aa:	7efb      	ldrb	r3, [r7, #27]
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	f200 81db 	bhi.w	8005d68 <UART_SetConfig+0xee0>
 80059b2:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <UART_SetConfig+0xb30>)
 80059b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b8:	080059dd 	.word	0x080059dd
 80059bc:	08005a93 	.word	0x08005a93
 80059c0:	08005b49 	.word	0x08005b49
 80059c4:	08005d69 	.word	0x08005d69
 80059c8:	08005bf1 	.word	0x08005bf1
 80059cc:	08005d69 	.word	0x08005d69
 80059d0:	08005d69 	.word	0x08005d69
 80059d4:	08005d69 	.word	0x08005d69
 80059d8:	08005ca7 	.word	0x08005ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059dc:	f7fd fd50 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 80059e0:	4602      	mov	r2, r0
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d044      	beq.n	8005a74 <UART_SetConfig+0xbec>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d03e      	beq.n	8005a70 <UART_SetConfig+0xbe8>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d038      	beq.n	8005a6c <UART_SetConfig+0xbe4>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	2b03      	cmp	r3, #3
 8005a00:	d032      	beq.n	8005a68 <UART_SetConfig+0xbe0>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d02c      	beq.n	8005a64 <UART_SetConfig+0xbdc>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0e:	2b05      	cmp	r3, #5
 8005a10:	d026      	beq.n	8005a60 <UART_SetConfig+0xbd8>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	2b06      	cmp	r3, #6
 8005a18:	d020      	beq.n	8005a5c <UART_SetConfig+0xbd4>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1e:	2b07      	cmp	r3, #7
 8005a20:	d01a      	beq.n	8005a58 <UART_SetConfig+0xbd0>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	2b08      	cmp	r3, #8
 8005a28:	d014      	beq.n	8005a54 <UART_SetConfig+0xbcc>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	2b09      	cmp	r3, #9
 8005a30:	d00e      	beq.n	8005a50 <UART_SetConfig+0xbc8>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	2b0a      	cmp	r3, #10
 8005a38:	d008      	beq.n	8005a4c <UART_SetConfig+0xbc4>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	2b0b      	cmp	r3, #11
 8005a40:	d102      	bne.n	8005a48 <UART_SetConfig+0xbc0>
 8005a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a46:	e016      	b.n	8005a76 <UART_SetConfig+0xbee>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e014      	b.n	8005a76 <UART_SetConfig+0xbee>
 8005a4c:	2380      	movs	r3, #128	; 0x80
 8005a4e:	e012      	b.n	8005a76 <UART_SetConfig+0xbee>
 8005a50:	2340      	movs	r3, #64	; 0x40
 8005a52:	e010      	b.n	8005a76 <UART_SetConfig+0xbee>
 8005a54:	2320      	movs	r3, #32
 8005a56:	e00e      	b.n	8005a76 <UART_SetConfig+0xbee>
 8005a58:	2310      	movs	r3, #16
 8005a5a:	e00c      	b.n	8005a76 <UART_SetConfig+0xbee>
 8005a5c:	230c      	movs	r3, #12
 8005a5e:	e00a      	b.n	8005a76 <UART_SetConfig+0xbee>
 8005a60:	230a      	movs	r3, #10
 8005a62:	e008      	b.n	8005a76 <UART_SetConfig+0xbee>
 8005a64:	2308      	movs	r3, #8
 8005a66:	e006      	b.n	8005a76 <UART_SetConfig+0xbee>
 8005a68:	2306      	movs	r3, #6
 8005a6a:	e004      	b.n	8005a76 <UART_SetConfig+0xbee>
 8005a6c:	2304      	movs	r3, #4
 8005a6e:	e002      	b.n	8005a76 <UART_SetConfig+0xbee>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e000      	b.n	8005a76 <UART_SetConfig+0xbee>
 8005a74:	2301      	movs	r3, #1
 8005a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7a:	005a      	lsls	r2, r3, #1
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	085b      	lsrs	r3, r3, #1
 8005a82:	441a      	add	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a90:	e16d      	b.n	8005d6e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a92:	f7fd fd0b 	bl	80034ac <HAL_RCC_GetPCLK2Freq>
 8005a96:	4602      	mov	r2, r0
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d044      	beq.n	8005b2a <UART_SetConfig+0xca2>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d03e      	beq.n	8005b26 <UART_SetConfig+0xc9e>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d038      	beq.n	8005b22 <UART_SetConfig+0xc9a>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	2b03      	cmp	r3, #3
 8005ab6:	d032      	beq.n	8005b1e <UART_SetConfig+0xc96>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	2b04      	cmp	r3, #4
 8005abe:	d02c      	beq.n	8005b1a <UART_SetConfig+0xc92>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	2b05      	cmp	r3, #5
 8005ac6:	d026      	beq.n	8005b16 <UART_SetConfig+0xc8e>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	2b06      	cmp	r3, #6
 8005ace:	d020      	beq.n	8005b12 <UART_SetConfig+0xc8a>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad4:	2b07      	cmp	r3, #7
 8005ad6:	d01a      	beq.n	8005b0e <UART_SetConfig+0xc86>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d014      	beq.n	8005b0a <UART_SetConfig+0xc82>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	2b09      	cmp	r3, #9
 8005ae6:	d00e      	beq.n	8005b06 <UART_SetConfig+0xc7e>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	2b0a      	cmp	r3, #10
 8005aee:	d008      	beq.n	8005b02 <UART_SetConfig+0xc7a>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	2b0b      	cmp	r3, #11
 8005af6:	d102      	bne.n	8005afe <UART_SetConfig+0xc76>
 8005af8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005afc:	e016      	b.n	8005b2c <UART_SetConfig+0xca4>
 8005afe:	2301      	movs	r3, #1
 8005b00:	e014      	b.n	8005b2c <UART_SetConfig+0xca4>
 8005b02:	2380      	movs	r3, #128	; 0x80
 8005b04:	e012      	b.n	8005b2c <UART_SetConfig+0xca4>
 8005b06:	2340      	movs	r3, #64	; 0x40
 8005b08:	e010      	b.n	8005b2c <UART_SetConfig+0xca4>
 8005b0a:	2320      	movs	r3, #32
 8005b0c:	e00e      	b.n	8005b2c <UART_SetConfig+0xca4>
 8005b0e:	2310      	movs	r3, #16
 8005b10:	e00c      	b.n	8005b2c <UART_SetConfig+0xca4>
 8005b12:	230c      	movs	r3, #12
 8005b14:	e00a      	b.n	8005b2c <UART_SetConfig+0xca4>
 8005b16:	230a      	movs	r3, #10
 8005b18:	e008      	b.n	8005b2c <UART_SetConfig+0xca4>
 8005b1a:	2308      	movs	r3, #8
 8005b1c:	e006      	b.n	8005b2c <UART_SetConfig+0xca4>
 8005b1e:	2306      	movs	r3, #6
 8005b20:	e004      	b.n	8005b2c <UART_SetConfig+0xca4>
 8005b22:	2304      	movs	r3, #4
 8005b24:	e002      	b.n	8005b2c <UART_SetConfig+0xca4>
 8005b26:	2302      	movs	r3, #2
 8005b28:	e000      	b.n	8005b2c <UART_SetConfig+0xca4>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b30:	005a      	lsls	r2, r3, #1
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	085b      	lsrs	r3, r3, #1
 8005b38:	441a      	add	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b46:	e112      	b.n	8005d6e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d043      	beq.n	8005bd8 <UART_SetConfig+0xd50>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d03d      	beq.n	8005bd4 <UART_SetConfig+0xd4c>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d037      	beq.n	8005bd0 <UART_SetConfig+0xd48>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d031      	beq.n	8005bcc <UART_SetConfig+0xd44>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	2b04      	cmp	r3, #4
 8005b6e:	d02b      	beq.n	8005bc8 <UART_SetConfig+0xd40>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	2b05      	cmp	r3, #5
 8005b76:	d025      	beq.n	8005bc4 <UART_SetConfig+0xd3c>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	2b06      	cmp	r3, #6
 8005b7e:	d01f      	beq.n	8005bc0 <UART_SetConfig+0xd38>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	2b07      	cmp	r3, #7
 8005b86:	d019      	beq.n	8005bbc <UART_SetConfig+0xd34>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d013      	beq.n	8005bb8 <UART_SetConfig+0xd30>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	2b09      	cmp	r3, #9
 8005b96:	d00d      	beq.n	8005bb4 <UART_SetConfig+0xd2c>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	2b0a      	cmp	r3, #10
 8005b9e:	d007      	beq.n	8005bb0 <UART_SetConfig+0xd28>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	2b0b      	cmp	r3, #11
 8005ba6:	d101      	bne.n	8005bac <UART_SetConfig+0xd24>
 8005ba8:	4b8c      	ldr	r3, [pc, #560]	; (8005ddc <UART_SetConfig+0xf54>)
 8005baa:	e016      	b.n	8005bda <UART_SetConfig+0xd52>
 8005bac:	4b8c      	ldr	r3, [pc, #560]	; (8005de0 <UART_SetConfig+0xf58>)
 8005bae:	e014      	b.n	8005bda <UART_SetConfig+0xd52>
 8005bb0:	4b8c      	ldr	r3, [pc, #560]	; (8005de4 <UART_SetConfig+0xf5c>)
 8005bb2:	e012      	b.n	8005bda <UART_SetConfig+0xd52>
 8005bb4:	4b8c      	ldr	r3, [pc, #560]	; (8005de8 <UART_SetConfig+0xf60>)
 8005bb6:	e010      	b.n	8005bda <UART_SetConfig+0xd52>
 8005bb8:	4b8c      	ldr	r3, [pc, #560]	; (8005dec <UART_SetConfig+0xf64>)
 8005bba:	e00e      	b.n	8005bda <UART_SetConfig+0xd52>
 8005bbc:	4b8c      	ldr	r3, [pc, #560]	; (8005df0 <UART_SetConfig+0xf68>)
 8005bbe:	e00c      	b.n	8005bda <UART_SetConfig+0xd52>
 8005bc0:	4b8c      	ldr	r3, [pc, #560]	; (8005df4 <UART_SetConfig+0xf6c>)
 8005bc2:	e00a      	b.n	8005bda <UART_SetConfig+0xd52>
 8005bc4:	4b8c      	ldr	r3, [pc, #560]	; (8005df8 <UART_SetConfig+0xf70>)
 8005bc6:	e008      	b.n	8005bda <UART_SetConfig+0xd52>
 8005bc8:	4b8c      	ldr	r3, [pc, #560]	; (8005dfc <UART_SetConfig+0xf74>)
 8005bca:	e006      	b.n	8005bda <UART_SetConfig+0xd52>
 8005bcc:	4b8c      	ldr	r3, [pc, #560]	; (8005e00 <UART_SetConfig+0xf78>)
 8005bce:	e004      	b.n	8005bda <UART_SetConfig+0xd52>
 8005bd0:	4b8c      	ldr	r3, [pc, #560]	; (8005e04 <UART_SetConfig+0xf7c>)
 8005bd2:	e002      	b.n	8005bda <UART_SetConfig+0xd52>
 8005bd4:	4b8c      	ldr	r3, [pc, #560]	; (8005e08 <UART_SetConfig+0xf80>)
 8005bd6:	e000      	b.n	8005bda <UART_SetConfig+0xd52>
 8005bd8:	4b81      	ldr	r3, [pc, #516]	; (8005de0 <UART_SetConfig+0xf58>)
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	6852      	ldr	r2, [r2, #4]
 8005bde:	0852      	lsrs	r2, r2, #1
 8005be0:	441a      	add	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005bee:	e0be      	b.n	8005d6e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bf0:	f7fd fbb0 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d044      	beq.n	8005c88 <UART_SetConfig+0xe00>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d03e      	beq.n	8005c84 <UART_SetConfig+0xdfc>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d038      	beq.n	8005c80 <UART_SetConfig+0xdf8>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	d032      	beq.n	8005c7c <UART_SetConfig+0xdf4>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d02c      	beq.n	8005c78 <UART_SetConfig+0xdf0>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	2b05      	cmp	r3, #5
 8005c24:	d026      	beq.n	8005c74 <UART_SetConfig+0xdec>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	2b06      	cmp	r3, #6
 8005c2c:	d020      	beq.n	8005c70 <UART_SetConfig+0xde8>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c32:	2b07      	cmp	r3, #7
 8005c34:	d01a      	beq.n	8005c6c <UART_SetConfig+0xde4>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	2b08      	cmp	r3, #8
 8005c3c:	d014      	beq.n	8005c68 <UART_SetConfig+0xde0>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	2b09      	cmp	r3, #9
 8005c44:	d00e      	beq.n	8005c64 <UART_SetConfig+0xddc>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	2b0a      	cmp	r3, #10
 8005c4c:	d008      	beq.n	8005c60 <UART_SetConfig+0xdd8>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	2b0b      	cmp	r3, #11
 8005c54:	d102      	bne.n	8005c5c <UART_SetConfig+0xdd4>
 8005c56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c5a:	e016      	b.n	8005c8a <UART_SetConfig+0xe02>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e014      	b.n	8005c8a <UART_SetConfig+0xe02>
 8005c60:	2380      	movs	r3, #128	; 0x80
 8005c62:	e012      	b.n	8005c8a <UART_SetConfig+0xe02>
 8005c64:	2340      	movs	r3, #64	; 0x40
 8005c66:	e010      	b.n	8005c8a <UART_SetConfig+0xe02>
 8005c68:	2320      	movs	r3, #32
 8005c6a:	e00e      	b.n	8005c8a <UART_SetConfig+0xe02>
 8005c6c:	2310      	movs	r3, #16
 8005c6e:	e00c      	b.n	8005c8a <UART_SetConfig+0xe02>
 8005c70:	230c      	movs	r3, #12
 8005c72:	e00a      	b.n	8005c8a <UART_SetConfig+0xe02>
 8005c74:	230a      	movs	r3, #10
 8005c76:	e008      	b.n	8005c8a <UART_SetConfig+0xe02>
 8005c78:	2308      	movs	r3, #8
 8005c7a:	e006      	b.n	8005c8a <UART_SetConfig+0xe02>
 8005c7c:	2306      	movs	r3, #6
 8005c7e:	e004      	b.n	8005c8a <UART_SetConfig+0xe02>
 8005c80:	2304      	movs	r3, #4
 8005c82:	e002      	b.n	8005c8a <UART_SetConfig+0xe02>
 8005c84:	2302      	movs	r3, #2
 8005c86:	e000      	b.n	8005c8a <UART_SetConfig+0xe02>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8e:	005a      	lsls	r2, r3, #1
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	085b      	lsrs	r3, r3, #1
 8005c96:	441a      	add	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ca4:	e063      	b.n	8005d6e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d04f      	beq.n	8005d4e <UART_SetConfig+0xec6>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d048      	beq.n	8005d48 <UART_SetConfig+0xec0>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d041      	beq.n	8005d42 <UART_SetConfig+0xeba>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	d03a      	beq.n	8005d3c <UART_SetConfig+0xeb4>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	d033      	beq.n	8005d36 <UART_SetConfig+0xeae>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	2b05      	cmp	r3, #5
 8005cd4:	d02c      	beq.n	8005d30 <UART_SetConfig+0xea8>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	2b06      	cmp	r3, #6
 8005cdc:	d025      	beq.n	8005d2a <UART_SetConfig+0xea2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	2b07      	cmp	r3, #7
 8005ce4:	d01e      	beq.n	8005d24 <UART_SetConfig+0xe9c>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	2b08      	cmp	r3, #8
 8005cec:	d017      	beq.n	8005d1e <UART_SetConfig+0xe96>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	2b09      	cmp	r3, #9
 8005cf4:	d010      	beq.n	8005d18 <UART_SetConfig+0xe90>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	2b0a      	cmp	r3, #10
 8005cfc:	d009      	beq.n	8005d12 <UART_SetConfig+0xe8a>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	2b0b      	cmp	r3, #11
 8005d04:	d102      	bne.n	8005d0c <UART_SetConfig+0xe84>
 8005d06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d0a:	e022      	b.n	8005d52 <UART_SetConfig+0xeca>
 8005d0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d10:	e01f      	b.n	8005d52 <UART_SetConfig+0xeca>
 8005d12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d16:	e01c      	b.n	8005d52 <UART_SetConfig+0xeca>
 8005d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d1c:	e019      	b.n	8005d52 <UART_SetConfig+0xeca>
 8005d1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d22:	e016      	b.n	8005d52 <UART_SetConfig+0xeca>
 8005d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d28:	e013      	b.n	8005d52 <UART_SetConfig+0xeca>
 8005d2a:	f241 5354 	movw	r3, #5460	; 0x1554
 8005d2e:	e010      	b.n	8005d52 <UART_SetConfig+0xeca>
 8005d30:	f641 1398 	movw	r3, #6552	; 0x1998
 8005d34:	e00d      	b.n	8005d52 <UART_SetConfig+0xeca>
 8005d36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d3a:	e00a      	b.n	8005d52 <UART_SetConfig+0xeca>
 8005d3c:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005d40:	e007      	b.n	8005d52 <UART_SetConfig+0xeca>
 8005d42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d46:	e004      	b.n	8005d52 <UART_SetConfig+0xeca>
 8005d48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d4c:	e001      	b.n	8005d52 <UART_SetConfig+0xeca>
 8005d4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	6852      	ldr	r2, [r2, #4]
 8005d56:	0852      	lsrs	r2, r2, #1
 8005d58:	441a      	add	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005d66:	e002      	b.n	8005d6e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	74fb      	strb	r3, [r7, #19]
        break;
 8005d6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2b0f      	cmp	r3, #15
 8005d72:	d916      	bls.n	8005da2 <UART_SetConfig+0xf1a>
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d7a:	d212      	bcs.n	8005da2 <UART_SetConfig+0xf1a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	f023 030f 	bic.w	r3, r3, #15
 8005d84:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	085b      	lsrs	r3, r3, #1
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	897b      	ldrh	r3, [r7, #10]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	897a      	ldrh	r2, [r7, #10]
 8005d9e:	60da      	str	r2, [r3, #12]
 8005da0:	e208      	b.n	80061b4 <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	74fb      	strb	r3, [r7, #19]
 8005da6:	e205      	b.n	80061b4 <UART_SetConfig+0x132c>
    }
  }
  else
  {
    switch (clocksource)
 8005da8:	7efb      	ldrb	r3, [r7, #27]
 8005daa:	2b08      	cmp	r3, #8
 8005dac:	f200 81f1 	bhi.w	8006192 <UART_SetConfig+0x130a>
 8005db0:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <UART_SetConfig+0xf30>)
 8005db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db6:	bf00      	nop
 8005db8:	08005e0d 	.word	0x08005e0d
 8005dbc:	08005ec1 	.word	0x08005ec1
 8005dc0:	08005f75 	.word	0x08005f75
 8005dc4:	08006193 	.word	0x08006193
 8005dc8:	0800601f 	.word	0x0800601f
 8005dcc:	08006193 	.word	0x08006193
 8005dd0:	08006193 	.word	0x08006193
 8005dd4:	08006193 	.word	0x08006193
 8005dd8:	080060d3 	.word	0x080060d3
 8005ddc:	0001e848 	.word	0x0001e848
 8005de0:	01e84800 	.word	0x01e84800
 8005de4:	0003d090 	.word	0x0003d090
 8005de8:	0007a120 	.word	0x0007a120
 8005dec:	000f4240 	.word	0x000f4240
 8005df0:	001e8480 	.word	0x001e8480
 8005df4:	0028b0aa 	.word	0x0028b0aa
 8005df8:	0030d400 	.word	0x0030d400
 8005dfc:	003d0900 	.word	0x003d0900
 8005e00:	00516154 	.word	0x00516154
 8005e04:	007a1200 	.word	0x007a1200
 8005e08:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e0c:	f7fd fb38 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 8005e10:	4602      	mov	r2, r0
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d044      	beq.n	8005ea4 <UART_SetConfig+0x101c>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d03e      	beq.n	8005ea0 <UART_SetConfig+0x1018>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d038      	beq.n	8005e9c <UART_SetConfig+0x1014>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	2b03      	cmp	r3, #3
 8005e30:	d032      	beq.n	8005e98 <UART_SetConfig+0x1010>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	d02c      	beq.n	8005e94 <UART_SetConfig+0x100c>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3e:	2b05      	cmp	r3, #5
 8005e40:	d026      	beq.n	8005e90 <UART_SetConfig+0x1008>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	2b06      	cmp	r3, #6
 8005e48:	d020      	beq.n	8005e8c <UART_SetConfig+0x1004>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4e:	2b07      	cmp	r3, #7
 8005e50:	d01a      	beq.n	8005e88 <UART_SetConfig+0x1000>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	2b08      	cmp	r3, #8
 8005e58:	d014      	beq.n	8005e84 <UART_SetConfig+0xffc>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5e:	2b09      	cmp	r3, #9
 8005e60:	d00e      	beq.n	8005e80 <UART_SetConfig+0xff8>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	2b0a      	cmp	r3, #10
 8005e68:	d008      	beq.n	8005e7c <UART_SetConfig+0xff4>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6e:	2b0b      	cmp	r3, #11
 8005e70:	d102      	bne.n	8005e78 <UART_SetConfig+0xff0>
 8005e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e76:	e016      	b.n	8005ea6 <UART_SetConfig+0x101e>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e014      	b.n	8005ea6 <UART_SetConfig+0x101e>
 8005e7c:	2380      	movs	r3, #128	; 0x80
 8005e7e:	e012      	b.n	8005ea6 <UART_SetConfig+0x101e>
 8005e80:	2340      	movs	r3, #64	; 0x40
 8005e82:	e010      	b.n	8005ea6 <UART_SetConfig+0x101e>
 8005e84:	2320      	movs	r3, #32
 8005e86:	e00e      	b.n	8005ea6 <UART_SetConfig+0x101e>
 8005e88:	2310      	movs	r3, #16
 8005e8a:	e00c      	b.n	8005ea6 <UART_SetConfig+0x101e>
 8005e8c:	230c      	movs	r3, #12
 8005e8e:	e00a      	b.n	8005ea6 <UART_SetConfig+0x101e>
 8005e90:	230a      	movs	r3, #10
 8005e92:	e008      	b.n	8005ea6 <UART_SetConfig+0x101e>
 8005e94:	2308      	movs	r3, #8
 8005e96:	e006      	b.n	8005ea6 <UART_SetConfig+0x101e>
 8005e98:	2306      	movs	r3, #6
 8005e9a:	e004      	b.n	8005ea6 <UART_SetConfig+0x101e>
 8005e9c:	2304      	movs	r3, #4
 8005e9e:	e002      	b.n	8005ea6 <UART_SetConfig+0x101e>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e000      	b.n	8005ea6 <UART_SetConfig+0x101e>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	fbb2 f2f3 	udiv	r2, r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	085b      	lsrs	r3, r3, #1
 8005eb0:	441a      	add	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ebe:	e16b      	b.n	8006198 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ec0:	f7fd faf4 	bl	80034ac <HAL_RCC_GetPCLK2Freq>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d044      	beq.n	8005f58 <UART_SetConfig+0x10d0>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d03e      	beq.n	8005f54 <UART_SetConfig+0x10cc>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d038      	beq.n	8005f50 <UART_SetConfig+0x10c8>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	2b03      	cmp	r3, #3
 8005ee4:	d032      	beq.n	8005f4c <UART_SetConfig+0x10c4>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d02c      	beq.n	8005f48 <UART_SetConfig+0x10c0>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	2b05      	cmp	r3, #5
 8005ef4:	d026      	beq.n	8005f44 <UART_SetConfig+0x10bc>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	2b06      	cmp	r3, #6
 8005efc:	d020      	beq.n	8005f40 <UART_SetConfig+0x10b8>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	2b07      	cmp	r3, #7
 8005f04:	d01a      	beq.n	8005f3c <UART_SetConfig+0x10b4>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	2b08      	cmp	r3, #8
 8005f0c:	d014      	beq.n	8005f38 <UART_SetConfig+0x10b0>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	2b09      	cmp	r3, #9
 8005f14:	d00e      	beq.n	8005f34 <UART_SetConfig+0x10ac>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	2b0a      	cmp	r3, #10
 8005f1c:	d008      	beq.n	8005f30 <UART_SetConfig+0x10a8>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	2b0b      	cmp	r3, #11
 8005f24:	d102      	bne.n	8005f2c <UART_SetConfig+0x10a4>
 8005f26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f2a:	e016      	b.n	8005f5a <UART_SetConfig+0x10d2>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e014      	b.n	8005f5a <UART_SetConfig+0x10d2>
 8005f30:	2380      	movs	r3, #128	; 0x80
 8005f32:	e012      	b.n	8005f5a <UART_SetConfig+0x10d2>
 8005f34:	2340      	movs	r3, #64	; 0x40
 8005f36:	e010      	b.n	8005f5a <UART_SetConfig+0x10d2>
 8005f38:	2320      	movs	r3, #32
 8005f3a:	e00e      	b.n	8005f5a <UART_SetConfig+0x10d2>
 8005f3c:	2310      	movs	r3, #16
 8005f3e:	e00c      	b.n	8005f5a <UART_SetConfig+0x10d2>
 8005f40:	230c      	movs	r3, #12
 8005f42:	e00a      	b.n	8005f5a <UART_SetConfig+0x10d2>
 8005f44:	230a      	movs	r3, #10
 8005f46:	e008      	b.n	8005f5a <UART_SetConfig+0x10d2>
 8005f48:	2308      	movs	r3, #8
 8005f4a:	e006      	b.n	8005f5a <UART_SetConfig+0x10d2>
 8005f4c:	2306      	movs	r3, #6
 8005f4e:	e004      	b.n	8005f5a <UART_SetConfig+0x10d2>
 8005f50:	2304      	movs	r3, #4
 8005f52:	e002      	b.n	8005f5a <UART_SetConfig+0x10d2>
 8005f54:	2302      	movs	r3, #2
 8005f56:	e000      	b.n	8005f5a <UART_SetConfig+0x10d2>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	085b      	lsrs	r3, r3, #1
 8005f64:	441a      	add	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f72:	e111      	b.n	8006198 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d044      	beq.n	8006006 <UART_SetConfig+0x117e>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d03e      	beq.n	8006002 <UART_SetConfig+0x117a>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d038      	beq.n	8005ffe <UART_SetConfig+0x1176>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d032      	beq.n	8005ffa <UART_SetConfig+0x1172>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	2b04      	cmp	r3, #4
 8005f9a:	d02c      	beq.n	8005ff6 <UART_SetConfig+0x116e>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	2b05      	cmp	r3, #5
 8005fa2:	d026      	beq.n	8005ff2 <UART_SetConfig+0x116a>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	2b06      	cmp	r3, #6
 8005faa:	d020      	beq.n	8005fee <UART_SetConfig+0x1166>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	2b07      	cmp	r3, #7
 8005fb2:	d01a      	beq.n	8005fea <UART_SetConfig+0x1162>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb8:	2b08      	cmp	r3, #8
 8005fba:	d014      	beq.n	8005fe6 <UART_SetConfig+0x115e>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	2b09      	cmp	r3, #9
 8005fc2:	d00e      	beq.n	8005fe2 <UART_SetConfig+0x115a>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	2b0a      	cmp	r3, #10
 8005fca:	d008      	beq.n	8005fde <UART_SetConfig+0x1156>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	2b0b      	cmp	r3, #11
 8005fd2:	d102      	bne.n	8005fda <UART_SetConfig+0x1152>
 8005fd4:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005fd8:	e016      	b.n	8006008 <UART_SetConfig+0x1180>
 8005fda:	4b80      	ldr	r3, [pc, #512]	; (80061dc <UART_SetConfig+0x1354>)
 8005fdc:	e014      	b.n	8006008 <UART_SetConfig+0x1180>
 8005fde:	4b80      	ldr	r3, [pc, #512]	; (80061e0 <UART_SetConfig+0x1358>)
 8005fe0:	e012      	b.n	8006008 <UART_SetConfig+0x1180>
 8005fe2:	4b80      	ldr	r3, [pc, #512]	; (80061e4 <UART_SetConfig+0x135c>)
 8005fe4:	e010      	b.n	8006008 <UART_SetConfig+0x1180>
 8005fe6:	4b80      	ldr	r3, [pc, #512]	; (80061e8 <UART_SetConfig+0x1360>)
 8005fe8:	e00e      	b.n	8006008 <UART_SetConfig+0x1180>
 8005fea:	4b80      	ldr	r3, [pc, #512]	; (80061ec <UART_SetConfig+0x1364>)
 8005fec:	e00c      	b.n	8006008 <UART_SetConfig+0x1180>
 8005fee:	4b80      	ldr	r3, [pc, #512]	; (80061f0 <UART_SetConfig+0x1368>)
 8005ff0:	e00a      	b.n	8006008 <UART_SetConfig+0x1180>
 8005ff2:	4b80      	ldr	r3, [pc, #512]	; (80061f4 <UART_SetConfig+0x136c>)
 8005ff4:	e008      	b.n	8006008 <UART_SetConfig+0x1180>
 8005ff6:	4b80      	ldr	r3, [pc, #512]	; (80061f8 <UART_SetConfig+0x1370>)
 8005ff8:	e006      	b.n	8006008 <UART_SetConfig+0x1180>
 8005ffa:	4b80      	ldr	r3, [pc, #512]	; (80061fc <UART_SetConfig+0x1374>)
 8005ffc:	e004      	b.n	8006008 <UART_SetConfig+0x1180>
 8005ffe:	4b80      	ldr	r3, [pc, #512]	; (8006200 <UART_SetConfig+0x1378>)
 8006000:	e002      	b.n	8006008 <UART_SetConfig+0x1180>
 8006002:	4b80      	ldr	r3, [pc, #512]	; (8006204 <UART_SetConfig+0x137c>)
 8006004:	e000      	b.n	8006008 <UART_SetConfig+0x1180>
 8006006:	4b75      	ldr	r3, [pc, #468]	; (80061dc <UART_SetConfig+0x1354>)
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6852      	ldr	r2, [r2, #4]
 800600c:	0852      	lsrs	r2, r2, #1
 800600e:	441a      	add	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	fbb2 f3f3 	udiv	r3, r2, r3
 8006018:	b29b      	uxth	r3, r3
 800601a:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800601c:	e0bc      	b.n	8006198 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800601e:	f7fd f999 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8006022:	4602      	mov	r2, r0
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	2b00      	cmp	r3, #0
 800602a:	d044      	beq.n	80060b6 <UART_SetConfig+0x122e>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	2b01      	cmp	r3, #1
 8006032:	d03e      	beq.n	80060b2 <UART_SetConfig+0x122a>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	2b02      	cmp	r3, #2
 800603a:	d038      	beq.n	80060ae <UART_SetConfig+0x1226>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	2b03      	cmp	r3, #3
 8006042:	d032      	beq.n	80060aa <UART_SetConfig+0x1222>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	2b04      	cmp	r3, #4
 800604a:	d02c      	beq.n	80060a6 <UART_SetConfig+0x121e>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	2b05      	cmp	r3, #5
 8006052:	d026      	beq.n	80060a2 <UART_SetConfig+0x121a>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	2b06      	cmp	r3, #6
 800605a:	d020      	beq.n	800609e <UART_SetConfig+0x1216>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006060:	2b07      	cmp	r3, #7
 8006062:	d01a      	beq.n	800609a <UART_SetConfig+0x1212>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	2b08      	cmp	r3, #8
 800606a:	d014      	beq.n	8006096 <UART_SetConfig+0x120e>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	2b09      	cmp	r3, #9
 8006072:	d00e      	beq.n	8006092 <UART_SetConfig+0x120a>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006078:	2b0a      	cmp	r3, #10
 800607a:	d008      	beq.n	800608e <UART_SetConfig+0x1206>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	2b0b      	cmp	r3, #11
 8006082:	d102      	bne.n	800608a <UART_SetConfig+0x1202>
 8006084:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006088:	e016      	b.n	80060b8 <UART_SetConfig+0x1230>
 800608a:	2301      	movs	r3, #1
 800608c:	e014      	b.n	80060b8 <UART_SetConfig+0x1230>
 800608e:	2380      	movs	r3, #128	; 0x80
 8006090:	e012      	b.n	80060b8 <UART_SetConfig+0x1230>
 8006092:	2340      	movs	r3, #64	; 0x40
 8006094:	e010      	b.n	80060b8 <UART_SetConfig+0x1230>
 8006096:	2320      	movs	r3, #32
 8006098:	e00e      	b.n	80060b8 <UART_SetConfig+0x1230>
 800609a:	2310      	movs	r3, #16
 800609c:	e00c      	b.n	80060b8 <UART_SetConfig+0x1230>
 800609e:	230c      	movs	r3, #12
 80060a0:	e00a      	b.n	80060b8 <UART_SetConfig+0x1230>
 80060a2:	230a      	movs	r3, #10
 80060a4:	e008      	b.n	80060b8 <UART_SetConfig+0x1230>
 80060a6:	2308      	movs	r3, #8
 80060a8:	e006      	b.n	80060b8 <UART_SetConfig+0x1230>
 80060aa:	2306      	movs	r3, #6
 80060ac:	e004      	b.n	80060b8 <UART_SetConfig+0x1230>
 80060ae:	2304      	movs	r3, #4
 80060b0:	e002      	b.n	80060b8 <UART_SetConfig+0x1230>
 80060b2:	2302      	movs	r3, #2
 80060b4:	e000      	b.n	80060b8 <UART_SetConfig+0x1230>
 80060b6:	2301      	movs	r3, #1
 80060b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	085b      	lsrs	r3, r3, #1
 80060c2:	441a      	add	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80060d0:	e062      	b.n	8006198 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d04e      	beq.n	8006178 <UART_SetConfig+0x12f0>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d047      	beq.n	8006172 <UART_SetConfig+0x12ea>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d040      	beq.n	800616c <UART_SetConfig+0x12e4>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	2b03      	cmp	r3, #3
 80060f0:	d039      	beq.n	8006166 <UART_SetConfig+0x12de>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	d032      	beq.n	8006160 <UART_SetConfig+0x12d8>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	2b05      	cmp	r3, #5
 8006100:	d02b      	beq.n	800615a <UART_SetConfig+0x12d2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	2b06      	cmp	r3, #6
 8006108:	d024      	beq.n	8006154 <UART_SetConfig+0x12cc>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	2b07      	cmp	r3, #7
 8006110:	d01d      	beq.n	800614e <UART_SetConfig+0x12c6>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	2b08      	cmp	r3, #8
 8006118:	d016      	beq.n	8006148 <UART_SetConfig+0x12c0>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	2b09      	cmp	r3, #9
 8006120:	d00f      	beq.n	8006142 <UART_SetConfig+0x12ba>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	2b0a      	cmp	r3, #10
 8006128:	d008      	beq.n	800613c <UART_SetConfig+0x12b4>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612e:	2b0b      	cmp	r3, #11
 8006130:	d101      	bne.n	8006136 <UART_SetConfig+0x12ae>
 8006132:	2380      	movs	r3, #128	; 0x80
 8006134:	e022      	b.n	800617c <UART_SetConfig+0x12f4>
 8006136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800613a:	e01f      	b.n	800617c <UART_SetConfig+0x12f4>
 800613c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006140:	e01c      	b.n	800617c <UART_SetConfig+0x12f4>
 8006142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006146:	e019      	b.n	800617c <UART_SetConfig+0x12f4>
 8006148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800614c:	e016      	b.n	800617c <UART_SetConfig+0x12f4>
 800614e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006152:	e013      	b.n	800617c <UART_SetConfig+0x12f4>
 8006154:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006158:	e010      	b.n	800617c <UART_SetConfig+0x12f4>
 800615a:	f640 43cc 	movw	r3, #3276	; 0xccc
 800615e:	e00d      	b.n	800617c <UART_SetConfig+0x12f4>
 8006160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006164:	e00a      	b.n	800617c <UART_SetConfig+0x12f4>
 8006166:	f241 5355 	movw	r3, #5461	; 0x1555
 800616a:	e007      	b.n	800617c <UART_SetConfig+0x12f4>
 800616c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006170:	e004      	b.n	800617c <UART_SetConfig+0x12f4>
 8006172:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006176:	e001      	b.n	800617c <UART_SetConfig+0x12f4>
 8006178:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	6852      	ldr	r2, [r2, #4]
 8006180:	0852      	lsrs	r2, r2, #1
 8006182:	441a      	add	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	fbb2 f3f3 	udiv	r3, r2, r3
 800618c:	b29b      	uxth	r3, r3
 800618e:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8006190:	e002      	b.n	8006198 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	74fb      	strb	r3, [r7, #19]
        break;
 8006196:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	2b0f      	cmp	r3, #15
 800619c:	d908      	bls.n	80061b0 <UART_SetConfig+0x1328>
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061a4:	d204      	bcs.n	80061b0 <UART_SetConfig+0x1328>
    {
      huart->Instance->BRR = usartdiv;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	60da      	str	r2, [r3, #12]
 80061ae:	e001      	b.n	80061b4 <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	74fb      	strb	r3, [r7, #19]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80061d0:	7cfb      	ldrb	r3, [r7, #19]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3720      	adds	r7, #32
 80061d6:	46bd      	mov	sp, r7
 80061d8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80061dc:	00f42400 	.word	0x00f42400
 80061e0:	0001e848 	.word	0x0001e848
 80061e4:	0003d090 	.word	0x0003d090
 80061e8:	0007a120 	.word	0x0007a120
 80061ec:	000f4240 	.word	0x000f4240
 80061f0:	00145855 	.word	0x00145855
 80061f4:	00186a00 	.word	0x00186a00
 80061f8:	001e8480 	.word	0x001e8480
 80061fc:	0028b0aa 	.word	0x0028b0aa
 8006200:	003d0900 	.word	0x003d0900
 8006204:	007a1200 	.word	0x007a1200

08006208 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00a      	beq.n	8006232 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006258:	f003 0304 	and.w	r3, r3, #4
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627a:	f003 0308 	and.w	r3, r3, #8
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00a      	beq.n	80062ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	430a      	orrs	r2, r1
 80062da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d01a      	beq.n	800631e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006306:	d10a      	bne.n	800631e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00a      	beq.n	8006340 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	605a      	str	r2, [r3, #4]
  }
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af02      	add	r7, sp, #8
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800635c:	f7fb fb30 	bl	80019c0 <HAL_GetTick>
 8006360:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0308 	and.w	r3, r3, #8
 800636c:	2b08      	cmp	r3, #8
 800636e:	d10e      	bne.n	800638e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006370:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f82c 	bl	80063dc <UART_WaitOnFlagUntilTimeout>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e022      	b.n	80063d4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b04      	cmp	r3, #4
 800639a:	d10e      	bne.n	80063ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800639c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f816 	bl	80063dc <UART_WaitOnFlagUntilTimeout>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e00c      	b.n	80063d4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2220      	movs	r2, #32
 80063be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	603b      	str	r3, [r7, #0]
 80063e8:	4613      	mov	r3, r2
 80063ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ec:	e02c      	b.n	8006448 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f4:	d028      	beq.n	8006448 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063f6:	f7fb fae3 	bl	80019c0 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	429a      	cmp	r2, r3
 8006404:	d302      	bcc.n	800640c <UART_WaitOnFlagUntilTimeout+0x30>
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d11d      	bne.n	8006448 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800641a:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 0201 	bic.w	r2, r2, #1
 800642a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2220      	movs	r2, #32
 8006430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2220      	movs	r2, #32
 8006438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e00f      	b.n	8006468 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	69da      	ldr	r2, [r3, #28]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	4013      	ands	r3, r2
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	429a      	cmp	r2, r3
 8006456:	bf0c      	ite	eq
 8006458:	2301      	moveq	r3, #1
 800645a:	2300      	movne	r3, #0
 800645c:	b2db      	uxtb	r3, r3
 800645e:	461a      	mov	r2, r3
 8006460:	79fb      	ldrb	r3, [r7, #7]
 8006462:	429a      	cmp	r2, r3
 8006464:	d0c3      	beq.n	80063ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800647e:	2b01      	cmp	r3, #1
 8006480:	d101      	bne.n	8006486 <HAL_UARTEx_DisableFifoMode+0x16>
 8006482:	2302      	movs	r3, #2
 8006484:	e027      	b.n	80064d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2224      	movs	r2, #36	; 0x24
 8006492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0201 	bic.w	r2, r2, #1
 80064ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80064b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b084      	sub	sp, #16
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d101      	bne.n	80064fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064f6:	2302      	movs	r3, #2
 80064f8:	e02d      	b.n	8006556 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2224      	movs	r2, #36	; 0x24
 8006506:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0201 	bic.w	r2, r2, #1
 8006520:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	430a      	orrs	r2, r1
 8006534:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f850 	bl	80065dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2220      	movs	r2, #32
 8006548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800656e:	2b01      	cmp	r3, #1
 8006570:	d101      	bne.n	8006576 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006572:	2302      	movs	r3, #2
 8006574:	e02d      	b.n	80065d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2224      	movs	r2, #36	; 0x24
 8006582:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0201 	bic.w	r2, r2, #1
 800659c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f812 	bl	80065dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2220      	movs	r2, #32
 80065c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
	...

080065dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065dc:	b480      	push	{r7}
 80065de:	b089      	sub	sp, #36	; 0x24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80065e4:	4a2f      	ldr	r2, [pc, #188]	; (80066a4 <UARTEx_SetNbDataToProcess+0xc8>)
 80065e6:	f107 0314 	add.w	r3, r7, #20
 80065ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80065ee:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80065f2:	4a2d      	ldr	r2, [pc, #180]	; (80066a8 <UARTEx_SetNbDataToProcess+0xcc>)
 80065f4:	f107 030c 	add.w	r3, r7, #12
 80065f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80065fc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006604:	2b00      	cmp	r3, #0
 8006606:	d108      	bne.n	800661a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006618:	e03d      	b.n	8006696 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800661a:	2308      	movs	r3, #8
 800661c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800661e:	2308      	movs	r3, #8
 8006620:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	0e5b      	lsrs	r3, r3, #25
 800662a:	b2db      	uxtb	r3, r3
 800662c:	f003 0307 	and.w	r3, r3, #7
 8006630:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	0f5b      	lsrs	r3, r3, #29
 800663a:	b2db      	uxtb	r3, r3
 800663c:	f003 0307 	and.w	r3, r3, #7
 8006640:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006642:	7fbb      	ldrb	r3, [r7, #30]
 8006644:	7f3a      	ldrb	r2, [r7, #28]
 8006646:	f107 0120 	add.w	r1, r7, #32
 800664a:	440a      	add	r2, r1
 800664c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006650:	fb02 f303 	mul.w	r3, r2, r3
 8006654:	7f3a      	ldrb	r2, [r7, #28]
 8006656:	f107 0120 	add.w	r1, r7, #32
 800665a:	440a      	add	r2, r1
 800665c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006660:	fb93 f3f2 	sdiv	r3, r3, r2
 8006664:	b29a      	uxth	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800666c:	7ffb      	ldrb	r3, [r7, #31]
 800666e:	7f7a      	ldrb	r2, [r7, #29]
 8006670:	f107 0120 	add.w	r1, r7, #32
 8006674:	440a      	add	r2, r1
 8006676:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800667a:	fb02 f303 	mul.w	r3, r2, r3
 800667e:	7f7a      	ldrb	r2, [r7, #29]
 8006680:	f107 0120 	add.w	r1, r7, #32
 8006684:	440a      	add	r2, r1
 8006686:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800668a:	fb93 f3f2 	sdiv	r3, r3, r2
 800668e:	b29a      	uxth	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006696:	bf00      	nop
 8006698:	3724      	adds	r7, #36	; 0x24
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	08007b50 	.word	0x08007b50
 80066a8:	08007b58 	.word	0x08007b58

080066ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066ac:	b084      	sub	sp, #16
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b084      	sub	sp, #16
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	f107 001c 	add.w	r0, r7, #28
 80066ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d122      	bne.n	800670a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80066d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80066ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d105      	bne.n	80066fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fa1e 	bl	8006b40 <USB_CoreReset>
 8006704:	4603      	mov	r3, r0
 8006706:	73fb      	strb	r3, [r7, #15]
 8006708:	e01a      	b.n	8006740 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fa12 	bl	8006b40 <USB_CoreReset>
 800671c:	4603      	mov	r3, r0
 800671e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006722:	2b00      	cmp	r3, #0
 8006724:	d106      	bne.n	8006734 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	639a      	str	r2, [r3, #56]	; 0x38
 8006732:	e005      	b.n	8006740 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006738:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8006740:	7bfb      	ldrb	r3, [r7, #15]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800674c:	b004      	add	sp, #16
 800674e:	4770      	bx	lr

08006750 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f023 0201 	bic.w	r2, r3, #1
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b082      	sub	sp, #8
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	460b      	mov	r3, r1
 800677c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800678a:	78fb      	ldrb	r3, [r7, #3]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d106      	bne.n	800679e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	60da      	str	r2, [r3, #12]
 800679c:	e00b      	b.n	80067b6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800679e:	78fb      	ldrb	r3, [r7, #3]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d106      	bne.n	80067b2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	60da      	str	r2, [r3, #12]
 80067b0:	e001      	b.n	80067b6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e003      	b.n	80067be <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80067b6:	2032      	movs	r0, #50	; 0x32
 80067b8:	f7fb f90e 	bl	80019d8 <HAL_Delay>

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
	...

080067c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067c8:	b084      	sub	sp, #16
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b086      	sub	sp, #24
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80067d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80067da:	2300      	movs	r3, #0
 80067dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80067e2:	2300      	movs	r3, #0
 80067e4:	613b      	str	r3, [r7, #16]
 80067e6:	e009      	b.n	80067fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	3340      	adds	r3, #64	; 0x40
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	2200      	movs	r2, #0
 80067f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	3301      	adds	r3, #1
 80067fa:	613b      	str	r3, [r7, #16]
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	2b0e      	cmp	r3, #14
 8006800:	d9f2      	bls.n	80067e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006804:	2b00      	cmp	r3, #0
 8006806:	d112      	bne.n	800682e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	e005      	b.n	800683a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006832:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006840:	461a      	mov	r2, r3
 8006842:	2300      	movs	r3, #0
 8006844:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684c:	4619      	mov	r1, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006854:	461a      	mov	r2, r3
 8006856:	680b      	ldr	r3, [r1, #0]
 8006858:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800685a:	2103      	movs	r1, #3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f93d 	bl	8006adc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006862:	2110      	movs	r1, #16
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f8f1 	bl	8006a4c <USB_FlushTxFifo>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 f90f 	bl	8006a98 <USB_FlushRxFifo>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800688a:	461a      	mov	r2, r3
 800688c:	2300      	movs	r3, #0
 800688e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006896:	461a      	mov	r2, r3
 8006898:	2300      	movs	r3, #0
 800689a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a2:	461a      	mov	r2, r3
 80068a4:	2300      	movs	r3, #0
 80068a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068a8:	2300      	movs	r3, #0
 80068aa:	613b      	str	r3, [r7, #16]
 80068ac:	e043      	b.n	8006936 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068c4:	d118      	bne.n	80068f8 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10a      	bne.n	80068e2 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d8:	461a      	mov	r2, r3
 80068da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80068de:	6013      	str	r3, [r2, #0]
 80068e0:	e013      	b.n	800690a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ee:	461a      	mov	r2, r3
 80068f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	e008      	b.n	800690a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006904:	461a      	mov	r2, r3
 8006906:	2300      	movs	r3, #0
 8006908:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4413      	add	r3, r2
 8006912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006916:	461a      	mov	r2, r3
 8006918:	2300      	movs	r3, #0
 800691a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4413      	add	r3, r2
 8006924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006928:	461a      	mov	r2, r3
 800692a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800692e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	3301      	adds	r3, #1
 8006934:	613b      	str	r3, [r7, #16]
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	429a      	cmp	r2, r3
 800693c:	d3b7      	bcc.n	80068ae <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800693e:	2300      	movs	r3, #0
 8006940:	613b      	str	r3, [r7, #16]
 8006942:	e043      	b.n	80069cc <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4413      	add	r3, r2
 800694c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006956:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800695a:	d118      	bne.n	800698e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10a      	bne.n	8006978 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	4413      	add	r3, r2
 800696a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696e:	461a      	mov	r2, r3
 8006970:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006974:	6013      	str	r3, [r2, #0]
 8006976:	e013      	b.n	80069a0 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006984:	461a      	mov	r2, r3
 8006986:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800698a:	6013      	str	r3, [r2, #0]
 800698c:	e008      	b.n	80069a0 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	4413      	add	r3, r2
 8006996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800699a:	461a      	mov	r2, r3
 800699c:	2300      	movs	r3, #0
 800699e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ac:	461a      	mov	r2, r3
 80069ae:	2300      	movs	r3, #0
 80069b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069be:	461a      	mov	r2, r3
 80069c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	3301      	adds	r3, #1
 80069ca:	613b      	str	r3, [r7, #16]
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d3b7      	bcc.n	8006944 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80069f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	f043 0210 	orr.w	r2, r3, #16
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	699a      	ldr	r2, [r3, #24]
 8006a06:	4b10      	ldr	r3, [pc, #64]	; (8006a48 <USB_DevInit+0x280>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d005      	beq.n	8006a20 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	f043 0208 	orr.w	r2, r3, #8
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d107      	bne.n	8006a36 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a2e:	f043 0304 	orr.w	r3, r3, #4
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3718      	adds	r7, #24
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a42:	b004      	add	sp, #16
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	803c3800 	.word	0x803c3800

08006a4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	019b      	lsls	r3, r3, #6
 8006a5e:	f043 0220 	orr.w	r2, r3, #32
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4a09      	ldr	r2, [pc, #36]	; (8006a94 <USB_FlushTxFifo+0x48>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d901      	bls.n	8006a78 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e006      	b.n	8006a86 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	f003 0320 	and.w	r3, r3, #32
 8006a80:	2b20      	cmp	r3, #32
 8006a82:	d0f0      	beq.n	8006a66 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	00030d40 	.word	0x00030d40

08006a98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2210      	movs	r2, #16
 8006aa8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	3301      	adds	r3, #1
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4a09      	ldr	r2, [pc, #36]	; (8006ad8 <USB_FlushRxFifo+0x40>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d901      	bls.n	8006abc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e006      	b.n	8006aca <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	f003 0310 	and.w	r3, r3, #16
 8006ac4:	2b10      	cmp	r3, #16
 8006ac6:	d0f0      	beq.n	8006aaa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	00030d40 	.word	0x00030d40

08006adc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	78fb      	ldrb	r3, [r7, #3]
 8006af6:	68f9      	ldr	r1, [r7, #12]
 8006af8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006afc:	4313      	orrs	r3, r2
 8006afe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b084      	sub	sp, #16
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b28:	f043 0302 	orr.w	r3, r3, #2
 8006b2c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006b2e:	2003      	movs	r0, #3
 8006b30:	f7fa ff52 	bl	80019d8 <HAL_Delay>

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
	...

08006b40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	60fb      	str	r3, [r7, #12]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4a13      	ldr	r2, [pc, #76]	; (8006ba4 <USB_CoreReset+0x64>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d901      	bls.n	8006b5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e01b      	b.n	8006b96 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	daf2      	bge.n	8006b4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b66:	2300      	movs	r3, #0
 8006b68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	f043 0201 	orr.w	r2, r3, #1
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	60fb      	str	r3, [r7, #12]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	4a09      	ldr	r2, [pc, #36]	; (8006ba4 <USB_CoreReset+0x64>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d901      	bls.n	8006b88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e006      	b.n	8006b96 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d0f0      	beq.n	8006b76 <USB_CoreReset+0x36>

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	00030d40 	.word	0x00030d40

08006ba8 <__errno>:
 8006ba8:	4b01      	ldr	r3, [pc, #4]	; (8006bb0 <__errno+0x8>)
 8006baa:	6818      	ldr	r0, [r3, #0]
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	2000000c 	.word	0x2000000c

08006bb4 <__libc_init_array>:
 8006bb4:	b570      	push	{r4, r5, r6, lr}
 8006bb6:	4e0d      	ldr	r6, [pc, #52]	; (8006bec <__libc_init_array+0x38>)
 8006bb8:	4c0d      	ldr	r4, [pc, #52]	; (8006bf0 <__libc_init_array+0x3c>)
 8006bba:	1ba4      	subs	r4, r4, r6
 8006bbc:	10a4      	asrs	r4, r4, #2
 8006bbe:	2500      	movs	r5, #0
 8006bc0:	42a5      	cmp	r5, r4
 8006bc2:	d109      	bne.n	8006bd8 <__libc_init_array+0x24>
 8006bc4:	4e0b      	ldr	r6, [pc, #44]	; (8006bf4 <__libc_init_array+0x40>)
 8006bc6:	4c0c      	ldr	r4, [pc, #48]	; (8006bf8 <__libc_init_array+0x44>)
 8006bc8:	f000 ff68 	bl	8007a9c <_init>
 8006bcc:	1ba4      	subs	r4, r4, r6
 8006bce:	10a4      	asrs	r4, r4, #2
 8006bd0:	2500      	movs	r5, #0
 8006bd2:	42a5      	cmp	r5, r4
 8006bd4:	d105      	bne.n	8006be2 <__libc_init_array+0x2e>
 8006bd6:	bd70      	pop	{r4, r5, r6, pc}
 8006bd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bdc:	4798      	blx	r3
 8006bde:	3501      	adds	r5, #1
 8006be0:	e7ee      	b.n	8006bc0 <__libc_init_array+0xc>
 8006be2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006be6:	4798      	blx	r3
 8006be8:	3501      	adds	r5, #1
 8006bea:	e7f2      	b.n	8006bd2 <__libc_init_array+0x1e>
 8006bec:	080809e0 	.word	0x080809e0
 8006bf0:	080809e0 	.word	0x080809e0
 8006bf4:	080809e0 	.word	0x080809e0
 8006bf8:	080809e4 	.word	0x080809e4

08006bfc <memset>:
 8006bfc:	4402      	add	r2, r0
 8006bfe:	4603      	mov	r3, r0
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d100      	bne.n	8006c06 <memset+0xa>
 8006c04:	4770      	bx	lr
 8006c06:	f803 1b01 	strb.w	r1, [r3], #1
 8006c0a:	e7f9      	b.n	8006c00 <memset+0x4>

08006c0c <iprintf>:
 8006c0c:	b40f      	push	{r0, r1, r2, r3}
 8006c0e:	4b0a      	ldr	r3, [pc, #40]	; (8006c38 <iprintf+0x2c>)
 8006c10:	b513      	push	{r0, r1, r4, lr}
 8006c12:	681c      	ldr	r4, [r3, #0]
 8006c14:	b124      	cbz	r4, 8006c20 <iprintf+0x14>
 8006c16:	69a3      	ldr	r3, [r4, #24]
 8006c18:	b913      	cbnz	r3, 8006c20 <iprintf+0x14>
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f000 fa22 	bl	8007064 <__sinit>
 8006c20:	ab05      	add	r3, sp, #20
 8006c22:	9a04      	ldr	r2, [sp, #16]
 8006c24:	68a1      	ldr	r1, [r4, #8]
 8006c26:	9301      	str	r3, [sp, #4]
 8006c28:	4620      	mov	r0, r4
 8006c2a:	f000 fbdb 	bl	80073e4 <_vfiprintf_r>
 8006c2e:	b002      	add	sp, #8
 8006c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c34:	b004      	add	sp, #16
 8006c36:	4770      	bx	lr
 8006c38:	2000000c 	.word	0x2000000c

08006c3c <_puts_r>:
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	460e      	mov	r6, r1
 8006c40:	4605      	mov	r5, r0
 8006c42:	b118      	cbz	r0, 8006c4c <_puts_r+0x10>
 8006c44:	6983      	ldr	r3, [r0, #24]
 8006c46:	b90b      	cbnz	r3, 8006c4c <_puts_r+0x10>
 8006c48:	f000 fa0c 	bl	8007064 <__sinit>
 8006c4c:	69ab      	ldr	r3, [r5, #24]
 8006c4e:	68ac      	ldr	r4, [r5, #8]
 8006c50:	b913      	cbnz	r3, 8006c58 <_puts_r+0x1c>
 8006c52:	4628      	mov	r0, r5
 8006c54:	f000 fa06 	bl	8007064 <__sinit>
 8006c58:	4b23      	ldr	r3, [pc, #140]	; (8006ce8 <_puts_r+0xac>)
 8006c5a:	429c      	cmp	r4, r3
 8006c5c:	d117      	bne.n	8006c8e <_puts_r+0x52>
 8006c5e:	686c      	ldr	r4, [r5, #4]
 8006c60:	89a3      	ldrh	r3, [r4, #12]
 8006c62:	071b      	lsls	r3, r3, #28
 8006c64:	d51d      	bpl.n	8006ca2 <_puts_r+0x66>
 8006c66:	6923      	ldr	r3, [r4, #16]
 8006c68:	b1db      	cbz	r3, 8006ca2 <_puts_r+0x66>
 8006c6a:	3e01      	subs	r6, #1
 8006c6c:	68a3      	ldr	r3, [r4, #8]
 8006c6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c72:	3b01      	subs	r3, #1
 8006c74:	60a3      	str	r3, [r4, #8]
 8006c76:	b9e9      	cbnz	r1, 8006cb4 <_puts_r+0x78>
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	da2e      	bge.n	8006cda <_puts_r+0x9e>
 8006c7c:	4622      	mov	r2, r4
 8006c7e:	210a      	movs	r1, #10
 8006c80:	4628      	mov	r0, r5
 8006c82:	f000 f83f 	bl	8006d04 <__swbuf_r>
 8006c86:	3001      	adds	r0, #1
 8006c88:	d011      	beq.n	8006cae <_puts_r+0x72>
 8006c8a:	200a      	movs	r0, #10
 8006c8c:	e011      	b.n	8006cb2 <_puts_r+0x76>
 8006c8e:	4b17      	ldr	r3, [pc, #92]	; (8006cec <_puts_r+0xb0>)
 8006c90:	429c      	cmp	r4, r3
 8006c92:	d101      	bne.n	8006c98 <_puts_r+0x5c>
 8006c94:	68ac      	ldr	r4, [r5, #8]
 8006c96:	e7e3      	b.n	8006c60 <_puts_r+0x24>
 8006c98:	4b15      	ldr	r3, [pc, #84]	; (8006cf0 <_puts_r+0xb4>)
 8006c9a:	429c      	cmp	r4, r3
 8006c9c:	bf08      	it	eq
 8006c9e:	68ec      	ldreq	r4, [r5, #12]
 8006ca0:	e7de      	b.n	8006c60 <_puts_r+0x24>
 8006ca2:	4621      	mov	r1, r4
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	f000 f87f 	bl	8006da8 <__swsetup_r>
 8006caa:	2800      	cmp	r0, #0
 8006cac:	d0dd      	beq.n	8006c6a <_puts_r+0x2e>
 8006cae:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb2:	bd70      	pop	{r4, r5, r6, pc}
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	da04      	bge.n	8006cc2 <_puts_r+0x86>
 8006cb8:	69a2      	ldr	r2, [r4, #24]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	dc06      	bgt.n	8006ccc <_puts_r+0x90>
 8006cbe:	290a      	cmp	r1, #10
 8006cc0:	d004      	beq.n	8006ccc <_puts_r+0x90>
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	1c5a      	adds	r2, r3, #1
 8006cc6:	6022      	str	r2, [r4, #0]
 8006cc8:	7019      	strb	r1, [r3, #0]
 8006cca:	e7cf      	b.n	8006c6c <_puts_r+0x30>
 8006ccc:	4622      	mov	r2, r4
 8006cce:	4628      	mov	r0, r5
 8006cd0:	f000 f818 	bl	8006d04 <__swbuf_r>
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	d1c9      	bne.n	8006c6c <_puts_r+0x30>
 8006cd8:	e7e9      	b.n	8006cae <_puts_r+0x72>
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	200a      	movs	r0, #10
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	6022      	str	r2, [r4, #0]
 8006ce2:	7018      	strb	r0, [r3, #0]
 8006ce4:	e7e5      	b.n	8006cb2 <_puts_r+0x76>
 8006ce6:	bf00      	nop
 8006ce8:	08080964 	.word	0x08080964
 8006cec:	08080984 	.word	0x08080984
 8006cf0:	08080944 	.word	0x08080944

08006cf4 <puts>:
 8006cf4:	4b02      	ldr	r3, [pc, #8]	; (8006d00 <puts+0xc>)
 8006cf6:	4601      	mov	r1, r0
 8006cf8:	6818      	ldr	r0, [r3, #0]
 8006cfa:	f7ff bf9f 	b.w	8006c3c <_puts_r>
 8006cfe:	bf00      	nop
 8006d00:	2000000c 	.word	0x2000000c

08006d04 <__swbuf_r>:
 8006d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d06:	460e      	mov	r6, r1
 8006d08:	4614      	mov	r4, r2
 8006d0a:	4605      	mov	r5, r0
 8006d0c:	b118      	cbz	r0, 8006d16 <__swbuf_r+0x12>
 8006d0e:	6983      	ldr	r3, [r0, #24]
 8006d10:	b90b      	cbnz	r3, 8006d16 <__swbuf_r+0x12>
 8006d12:	f000 f9a7 	bl	8007064 <__sinit>
 8006d16:	4b21      	ldr	r3, [pc, #132]	; (8006d9c <__swbuf_r+0x98>)
 8006d18:	429c      	cmp	r4, r3
 8006d1a:	d12a      	bne.n	8006d72 <__swbuf_r+0x6e>
 8006d1c:	686c      	ldr	r4, [r5, #4]
 8006d1e:	69a3      	ldr	r3, [r4, #24]
 8006d20:	60a3      	str	r3, [r4, #8]
 8006d22:	89a3      	ldrh	r3, [r4, #12]
 8006d24:	071a      	lsls	r2, r3, #28
 8006d26:	d52e      	bpl.n	8006d86 <__swbuf_r+0x82>
 8006d28:	6923      	ldr	r3, [r4, #16]
 8006d2a:	b363      	cbz	r3, 8006d86 <__swbuf_r+0x82>
 8006d2c:	6923      	ldr	r3, [r4, #16]
 8006d2e:	6820      	ldr	r0, [r4, #0]
 8006d30:	1ac0      	subs	r0, r0, r3
 8006d32:	6963      	ldr	r3, [r4, #20]
 8006d34:	b2f6      	uxtb	r6, r6
 8006d36:	4283      	cmp	r3, r0
 8006d38:	4637      	mov	r7, r6
 8006d3a:	dc04      	bgt.n	8006d46 <__swbuf_r+0x42>
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f000 f926 	bl	8006f90 <_fflush_r>
 8006d44:	bb28      	cbnz	r0, 8006d92 <__swbuf_r+0x8e>
 8006d46:	68a3      	ldr	r3, [r4, #8]
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	60a3      	str	r3, [r4, #8]
 8006d4c:	6823      	ldr	r3, [r4, #0]
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	6022      	str	r2, [r4, #0]
 8006d52:	701e      	strb	r6, [r3, #0]
 8006d54:	6963      	ldr	r3, [r4, #20]
 8006d56:	3001      	adds	r0, #1
 8006d58:	4283      	cmp	r3, r0
 8006d5a:	d004      	beq.n	8006d66 <__swbuf_r+0x62>
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	07db      	lsls	r3, r3, #31
 8006d60:	d519      	bpl.n	8006d96 <__swbuf_r+0x92>
 8006d62:	2e0a      	cmp	r6, #10
 8006d64:	d117      	bne.n	8006d96 <__swbuf_r+0x92>
 8006d66:	4621      	mov	r1, r4
 8006d68:	4628      	mov	r0, r5
 8006d6a:	f000 f911 	bl	8006f90 <_fflush_r>
 8006d6e:	b190      	cbz	r0, 8006d96 <__swbuf_r+0x92>
 8006d70:	e00f      	b.n	8006d92 <__swbuf_r+0x8e>
 8006d72:	4b0b      	ldr	r3, [pc, #44]	; (8006da0 <__swbuf_r+0x9c>)
 8006d74:	429c      	cmp	r4, r3
 8006d76:	d101      	bne.n	8006d7c <__swbuf_r+0x78>
 8006d78:	68ac      	ldr	r4, [r5, #8]
 8006d7a:	e7d0      	b.n	8006d1e <__swbuf_r+0x1a>
 8006d7c:	4b09      	ldr	r3, [pc, #36]	; (8006da4 <__swbuf_r+0xa0>)
 8006d7e:	429c      	cmp	r4, r3
 8006d80:	bf08      	it	eq
 8006d82:	68ec      	ldreq	r4, [r5, #12]
 8006d84:	e7cb      	b.n	8006d1e <__swbuf_r+0x1a>
 8006d86:	4621      	mov	r1, r4
 8006d88:	4628      	mov	r0, r5
 8006d8a:	f000 f80d 	bl	8006da8 <__swsetup_r>
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	d0cc      	beq.n	8006d2c <__swbuf_r+0x28>
 8006d92:	f04f 37ff 	mov.w	r7, #4294967295
 8006d96:	4638      	mov	r0, r7
 8006d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	08080964 	.word	0x08080964
 8006da0:	08080984 	.word	0x08080984
 8006da4:	08080944 	.word	0x08080944

08006da8 <__swsetup_r>:
 8006da8:	4b32      	ldr	r3, [pc, #200]	; (8006e74 <__swsetup_r+0xcc>)
 8006daa:	b570      	push	{r4, r5, r6, lr}
 8006dac:	681d      	ldr	r5, [r3, #0]
 8006dae:	4606      	mov	r6, r0
 8006db0:	460c      	mov	r4, r1
 8006db2:	b125      	cbz	r5, 8006dbe <__swsetup_r+0x16>
 8006db4:	69ab      	ldr	r3, [r5, #24]
 8006db6:	b913      	cbnz	r3, 8006dbe <__swsetup_r+0x16>
 8006db8:	4628      	mov	r0, r5
 8006dba:	f000 f953 	bl	8007064 <__sinit>
 8006dbe:	4b2e      	ldr	r3, [pc, #184]	; (8006e78 <__swsetup_r+0xd0>)
 8006dc0:	429c      	cmp	r4, r3
 8006dc2:	d10f      	bne.n	8006de4 <__swsetup_r+0x3c>
 8006dc4:	686c      	ldr	r4, [r5, #4]
 8006dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	0715      	lsls	r5, r2, #28
 8006dce:	d42c      	bmi.n	8006e2a <__swsetup_r+0x82>
 8006dd0:	06d0      	lsls	r0, r2, #27
 8006dd2:	d411      	bmi.n	8006df8 <__swsetup_r+0x50>
 8006dd4:	2209      	movs	r2, #9
 8006dd6:	6032      	str	r2, [r6, #0]
 8006dd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ddc:	81a3      	strh	r3, [r4, #12]
 8006dde:	f04f 30ff 	mov.w	r0, #4294967295
 8006de2:	e03e      	b.n	8006e62 <__swsetup_r+0xba>
 8006de4:	4b25      	ldr	r3, [pc, #148]	; (8006e7c <__swsetup_r+0xd4>)
 8006de6:	429c      	cmp	r4, r3
 8006de8:	d101      	bne.n	8006dee <__swsetup_r+0x46>
 8006dea:	68ac      	ldr	r4, [r5, #8]
 8006dec:	e7eb      	b.n	8006dc6 <__swsetup_r+0x1e>
 8006dee:	4b24      	ldr	r3, [pc, #144]	; (8006e80 <__swsetup_r+0xd8>)
 8006df0:	429c      	cmp	r4, r3
 8006df2:	bf08      	it	eq
 8006df4:	68ec      	ldreq	r4, [r5, #12]
 8006df6:	e7e6      	b.n	8006dc6 <__swsetup_r+0x1e>
 8006df8:	0751      	lsls	r1, r2, #29
 8006dfa:	d512      	bpl.n	8006e22 <__swsetup_r+0x7a>
 8006dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dfe:	b141      	cbz	r1, 8006e12 <__swsetup_r+0x6a>
 8006e00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e04:	4299      	cmp	r1, r3
 8006e06:	d002      	beq.n	8006e0e <__swsetup_r+0x66>
 8006e08:	4630      	mov	r0, r6
 8006e0a:	f000 fa19 	bl	8007240 <_free_r>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	6363      	str	r3, [r4, #52]	; 0x34
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e18:	81a3      	strh	r3, [r4, #12]
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	6063      	str	r3, [r4, #4]
 8006e1e:	6923      	ldr	r3, [r4, #16]
 8006e20:	6023      	str	r3, [r4, #0]
 8006e22:	89a3      	ldrh	r3, [r4, #12]
 8006e24:	f043 0308 	orr.w	r3, r3, #8
 8006e28:	81a3      	strh	r3, [r4, #12]
 8006e2a:	6923      	ldr	r3, [r4, #16]
 8006e2c:	b94b      	cbnz	r3, 8006e42 <__swsetup_r+0x9a>
 8006e2e:	89a3      	ldrh	r3, [r4, #12]
 8006e30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e38:	d003      	beq.n	8006e42 <__swsetup_r+0x9a>
 8006e3a:	4621      	mov	r1, r4
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	f000 f9bf 	bl	80071c0 <__smakebuf_r>
 8006e42:	89a2      	ldrh	r2, [r4, #12]
 8006e44:	f012 0301 	ands.w	r3, r2, #1
 8006e48:	d00c      	beq.n	8006e64 <__swsetup_r+0xbc>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	60a3      	str	r3, [r4, #8]
 8006e4e:	6963      	ldr	r3, [r4, #20]
 8006e50:	425b      	negs	r3, r3
 8006e52:	61a3      	str	r3, [r4, #24]
 8006e54:	6923      	ldr	r3, [r4, #16]
 8006e56:	b953      	cbnz	r3, 8006e6e <__swsetup_r+0xc6>
 8006e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e5c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006e60:	d1ba      	bne.n	8006dd8 <__swsetup_r+0x30>
 8006e62:	bd70      	pop	{r4, r5, r6, pc}
 8006e64:	0792      	lsls	r2, r2, #30
 8006e66:	bf58      	it	pl
 8006e68:	6963      	ldrpl	r3, [r4, #20]
 8006e6a:	60a3      	str	r3, [r4, #8]
 8006e6c:	e7f2      	b.n	8006e54 <__swsetup_r+0xac>
 8006e6e:	2000      	movs	r0, #0
 8006e70:	e7f7      	b.n	8006e62 <__swsetup_r+0xba>
 8006e72:	bf00      	nop
 8006e74:	2000000c 	.word	0x2000000c
 8006e78:	08080964 	.word	0x08080964
 8006e7c:	08080984 	.word	0x08080984
 8006e80:	08080944 	.word	0x08080944

08006e84 <__sflush_r>:
 8006e84:	898a      	ldrh	r2, [r1, #12]
 8006e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e8a:	4605      	mov	r5, r0
 8006e8c:	0710      	lsls	r0, r2, #28
 8006e8e:	460c      	mov	r4, r1
 8006e90:	d458      	bmi.n	8006f44 <__sflush_r+0xc0>
 8006e92:	684b      	ldr	r3, [r1, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	dc05      	bgt.n	8006ea4 <__sflush_r+0x20>
 8006e98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	dc02      	bgt.n	8006ea4 <__sflush_r+0x20>
 8006e9e:	2000      	movs	r0, #0
 8006ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ea4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ea6:	2e00      	cmp	r6, #0
 8006ea8:	d0f9      	beq.n	8006e9e <__sflush_r+0x1a>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006eb0:	682f      	ldr	r7, [r5, #0]
 8006eb2:	6a21      	ldr	r1, [r4, #32]
 8006eb4:	602b      	str	r3, [r5, #0]
 8006eb6:	d032      	beq.n	8006f1e <__sflush_r+0x9a>
 8006eb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006eba:	89a3      	ldrh	r3, [r4, #12]
 8006ebc:	075a      	lsls	r2, r3, #29
 8006ebe:	d505      	bpl.n	8006ecc <__sflush_r+0x48>
 8006ec0:	6863      	ldr	r3, [r4, #4]
 8006ec2:	1ac0      	subs	r0, r0, r3
 8006ec4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ec6:	b10b      	cbz	r3, 8006ecc <__sflush_r+0x48>
 8006ec8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006eca:	1ac0      	subs	r0, r0, r3
 8006ecc:	2300      	movs	r3, #0
 8006ece:	4602      	mov	r2, r0
 8006ed0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ed2:	6a21      	ldr	r1, [r4, #32]
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	47b0      	blx	r6
 8006ed8:	1c43      	adds	r3, r0, #1
 8006eda:	89a3      	ldrh	r3, [r4, #12]
 8006edc:	d106      	bne.n	8006eec <__sflush_r+0x68>
 8006ede:	6829      	ldr	r1, [r5, #0]
 8006ee0:	291d      	cmp	r1, #29
 8006ee2:	d848      	bhi.n	8006f76 <__sflush_r+0xf2>
 8006ee4:	4a29      	ldr	r2, [pc, #164]	; (8006f8c <__sflush_r+0x108>)
 8006ee6:	40ca      	lsrs	r2, r1
 8006ee8:	07d6      	lsls	r6, r2, #31
 8006eea:	d544      	bpl.n	8006f76 <__sflush_r+0xf2>
 8006eec:	2200      	movs	r2, #0
 8006eee:	6062      	str	r2, [r4, #4]
 8006ef0:	04d9      	lsls	r1, r3, #19
 8006ef2:	6922      	ldr	r2, [r4, #16]
 8006ef4:	6022      	str	r2, [r4, #0]
 8006ef6:	d504      	bpl.n	8006f02 <__sflush_r+0x7e>
 8006ef8:	1c42      	adds	r2, r0, #1
 8006efa:	d101      	bne.n	8006f00 <__sflush_r+0x7c>
 8006efc:	682b      	ldr	r3, [r5, #0]
 8006efe:	b903      	cbnz	r3, 8006f02 <__sflush_r+0x7e>
 8006f00:	6560      	str	r0, [r4, #84]	; 0x54
 8006f02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f04:	602f      	str	r7, [r5, #0]
 8006f06:	2900      	cmp	r1, #0
 8006f08:	d0c9      	beq.n	8006e9e <__sflush_r+0x1a>
 8006f0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f0e:	4299      	cmp	r1, r3
 8006f10:	d002      	beq.n	8006f18 <__sflush_r+0x94>
 8006f12:	4628      	mov	r0, r5
 8006f14:	f000 f994 	bl	8007240 <_free_r>
 8006f18:	2000      	movs	r0, #0
 8006f1a:	6360      	str	r0, [r4, #52]	; 0x34
 8006f1c:	e7c0      	b.n	8006ea0 <__sflush_r+0x1c>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	4628      	mov	r0, r5
 8006f22:	47b0      	blx	r6
 8006f24:	1c41      	adds	r1, r0, #1
 8006f26:	d1c8      	bne.n	8006eba <__sflush_r+0x36>
 8006f28:	682b      	ldr	r3, [r5, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d0c5      	beq.n	8006eba <__sflush_r+0x36>
 8006f2e:	2b1d      	cmp	r3, #29
 8006f30:	d001      	beq.n	8006f36 <__sflush_r+0xb2>
 8006f32:	2b16      	cmp	r3, #22
 8006f34:	d101      	bne.n	8006f3a <__sflush_r+0xb6>
 8006f36:	602f      	str	r7, [r5, #0]
 8006f38:	e7b1      	b.n	8006e9e <__sflush_r+0x1a>
 8006f3a:	89a3      	ldrh	r3, [r4, #12]
 8006f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f40:	81a3      	strh	r3, [r4, #12]
 8006f42:	e7ad      	b.n	8006ea0 <__sflush_r+0x1c>
 8006f44:	690f      	ldr	r7, [r1, #16]
 8006f46:	2f00      	cmp	r7, #0
 8006f48:	d0a9      	beq.n	8006e9e <__sflush_r+0x1a>
 8006f4a:	0793      	lsls	r3, r2, #30
 8006f4c:	680e      	ldr	r6, [r1, #0]
 8006f4e:	bf08      	it	eq
 8006f50:	694b      	ldreq	r3, [r1, #20]
 8006f52:	600f      	str	r7, [r1, #0]
 8006f54:	bf18      	it	ne
 8006f56:	2300      	movne	r3, #0
 8006f58:	eba6 0807 	sub.w	r8, r6, r7
 8006f5c:	608b      	str	r3, [r1, #8]
 8006f5e:	f1b8 0f00 	cmp.w	r8, #0
 8006f62:	dd9c      	ble.n	8006e9e <__sflush_r+0x1a>
 8006f64:	4643      	mov	r3, r8
 8006f66:	463a      	mov	r2, r7
 8006f68:	6a21      	ldr	r1, [r4, #32]
 8006f6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	47b0      	blx	r6
 8006f70:	2800      	cmp	r0, #0
 8006f72:	dc06      	bgt.n	8006f82 <__sflush_r+0xfe>
 8006f74:	89a3      	ldrh	r3, [r4, #12]
 8006f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f7a:	81a3      	strh	r3, [r4, #12]
 8006f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f80:	e78e      	b.n	8006ea0 <__sflush_r+0x1c>
 8006f82:	4407      	add	r7, r0
 8006f84:	eba8 0800 	sub.w	r8, r8, r0
 8006f88:	e7e9      	b.n	8006f5e <__sflush_r+0xda>
 8006f8a:	bf00      	nop
 8006f8c:	20400001 	.word	0x20400001

08006f90 <_fflush_r>:
 8006f90:	b538      	push	{r3, r4, r5, lr}
 8006f92:	690b      	ldr	r3, [r1, #16]
 8006f94:	4605      	mov	r5, r0
 8006f96:	460c      	mov	r4, r1
 8006f98:	b1db      	cbz	r3, 8006fd2 <_fflush_r+0x42>
 8006f9a:	b118      	cbz	r0, 8006fa4 <_fflush_r+0x14>
 8006f9c:	6983      	ldr	r3, [r0, #24]
 8006f9e:	b90b      	cbnz	r3, 8006fa4 <_fflush_r+0x14>
 8006fa0:	f000 f860 	bl	8007064 <__sinit>
 8006fa4:	4b0c      	ldr	r3, [pc, #48]	; (8006fd8 <_fflush_r+0x48>)
 8006fa6:	429c      	cmp	r4, r3
 8006fa8:	d109      	bne.n	8006fbe <_fflush_r+0x2e>
 8006faa:	686c      	ldr	r4, [r5, #4]
 8006fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fb0:	b17b      	cbz	r3, 8006fd2 <_fflush_r+0x42>
 8006fb2:	4621      	mov	r1, r4
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fba:	f7ff bf63 	b.w	8006e84 <__sflush_r>
 8006fbe:	4b07      	ldr	r3, [pc, #28]	; (8006fdc <_fflush_r+0x4c>)
 8006fc0:	429c      	cmp	r4, r3
 8006fc2:	d101      	bne.n	8006fc8 <_fflush_r+0x38>
 8006fc4:	68ac      	ldr	r4, [r5, #8]
 8006fc6:	e7f1      	b.n	8006fac <_fflush_r+0x1c>
 8006fc8:	4b05      	ldr	r3, [pc, #20]	; (8006fe0 <_fflush_r+0x50>)
 8006fca:	429c      	cmp	r4, r3
 8006fcc:	bf08      	it	eq
 8006fce:	68ec      	ldreq	r4, [r5, #12]
 8006fd0:	e7ec      	b.n	8006fac <_fflush_r+0x1c>
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	bd38      	pop	{r3, r4, r5, pc}
 8006fd6:	bf00      	nop
 8006fd8:	08080964 	.word	0x08080964
 8006fdc:	08080984 	.word	0x08080984
 8006fe0:	08080944 	.word	0x08080944

08006fe4 <std>:
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	b510      	push	{r4, lr}
 8006fe8:	4604      	mov	r4, r0
 8006fea:	e9c0 3300 	strd	r3, r3, [r0]
 8006fee:	6083      	str	r3, [r0, #8]
 8006ff0:	8181      	strh	r1, [r0, #12]
 8006ff2:	6643      	str	r3, [r0, #100]	; 0x64
 8006ff4:	81c2      	strh	r2, [r0, #14]
 8006ff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ffa:	6183      	str	r3, [r0, #24]
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	2208      	movs	r2, #8
 8007000:	305c      	adds	r0, #92	; 0x5c
 8007002:	f7ff fdfb 	bl	8006bfc <memset>
 8007006:	4b05      	ldr	r3, [pc, #20]	; (800701c <std+0x38>)
 8007008:	6263      	str	r3, [r4, #36]	; 0x24
 800700a:	4b05      	ldr	r3, [pc, #20]	; (8007020 <std+0x3c>)
 800700c:	62a3      	str	r3, [r4, #40]	; 0x28
 800700e:	4b05      	ldr	r3, [pc, #20]	; (8007024 <std+0x40>)
 8007010:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007012:	4b05      	ldr	r3, [pc, #20]	; (8007028 <std+0x44>)
 8007014:	6224      	str	r4, [r4, #32]
 8007016:	6323      	str	r3, [r4, #48]	; 0x30
 8007018:	bd10      	pop	{r4, pc}
 800701a:	bf00      	nop
 800701c:	08007941 	.word	0x08007941
 8007020:	08007963 	.word	0x08007963
 8007024:	0800799b 	.word	0x0800799b
 8007028:	080079bf 	.word	0x080079bf

0800702c <_cleanup_r>:
 800702c:	4901      	ldr	r1, [pc, #4]	; (8007034 <_cleanup_r+0x8>)
 800702e:	f000 b885 	b.w	800713c <_fwalk_reent>
 8007032:	bf00      	nop
 8007034:	08006f91 	.word	0x08006f91

08007038 <__sfmoreglue>:
 8007038:	b570      	push	{r4, r5, r6, lr}
 800703a:	1e4a      	subs	r2, r1, #1
 800703c:	2568      	movs	r5, #104	; 0x68
 800703e:	4355      	muls	r5, r2
 8007040:	460e      	mov	r6, r1
 8007042:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007046:	f000 f949 	bl	80072dc <_malloc_r>
 800704a:	4604      	mov	r4, r0
 800704c:	b140      	cbz	r0, 8007060 <__sfmoreglue+0x28>
 800704e:	2100      	movs	r1, #0
 8007050:	e9c0 1600 	strd	r1, r6, [r0]
 8007054:	300c      	adds	r0, #12
 8007056:	60a0      	str	r0, [r4, #8]
 8007058:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800705c:	f7ff fdce 	bl	8006bfc <memset>
 8007060:	4620      	mov	r0, r4
 8007062:	bd70      	pop	{r4, r5, r6, pc}

08007064 <__sinit>:
 8007064:	6983      	ldr	r3, [r0, #24]
 8007066:	b510      	push	{r4, lr}
 8007068:	4604      	mov	r4, r0
 800706a:	bb33      	cbnz	r3, 80070ba <__sinit+0x56>
 800706c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007070:	6503      	str	r3, [r0, #80]	; 0x50
 8007072:	4b12      	ldr	r3, [pc, #72]	; (80070bc <__sinit+0x58>)
 8007074:	4a12      	ldr	r2, [pc, #72]	; (80070c0 <__sinit+0x5c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6282      	str	r2, [r0, #40]	; 0x28
 800707a:	4298      	cmp	r0, r3
 800707c:	bf04      	itt	eq
 800707e:	2301      	moveq	r3, #1
 8007080:	6183      	streq	r3, [r0, #24]
 8007082:	f000 f81f 	bl	80070c4 <__sfp>
 8007086:	6060      	str	r0, [r4, #4]
 8007088:	4620      	mov	r0, r4
 800708a:	f000 f81b 	bl	80070c4 <__sfp>
 800708e:	60a0      	str	r0, [r4, #8]
 8007090:	4620      	mov	r0, r4
 8007092:	f000 f817 	bl	80070c4 <__sfp>
 8007096:	2200      	movs	r2, #0
 8007098:	60e0      	str	r0, [r4, #12]
 800709a:	2104      	movs	r1, #4
 800709c:	6860      	ldr	r0, [r4, #4]
 800709e:	f7ff ffa1 	bl	8006fe4 <std>
 80070a2:	2201      	movs	r2, #1
 80070a4:	2109      	movs	r1, #9
 80070a6:	68a0      	ldr	r0, [r4, #8]
 80070a8:	f7ff ff9c 	bl	8006fe4 <std>
 80070ac:	2202      	movs	r2, #2
 80070ae:	2112      	movs	r1, #18
 80070b0:	68e0      	ldr	r0, [r4, #12]
 80070b2:	f7ff ff97 	bl	8006fe4 <std>
 80070b6:	2301      	movs	r3, #1
 80070b8:	61a3      	str	r3, [r4, #24]
 80070ba:	bd10      	pop	{r4, pc}
 80070bc:	08080940 	.word	0x08080940
 80070c0:	0800702d 	.word	0x0800702d

080070c4 <__sfp>:
 80070c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c6:	4b1b      	ldr	r3, [pc, #108]	; (8007134 <__sfp+0x70>)
 80070c8:	681e      	ldr	r6, [r3, #0]
 80070ca:	69b3      	ldr	r3, [r6, #24]
 80070cc:	4607      	mov	r7, r0
 80070ce:	b913      	cbnz	r3, 80070d6 <__sfp+0x12>
 80070d0:	4630      	mov	r0, r6
 80070d2:	f7ff ffc7 	bl	8007064 <__sinit>
 80070d6:	3648      	adds	r6, #72	; 0x48
 80070d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070dc:	3b01      	subs	r3, #1
 80070de:	d503      	bpl.n	80070e8 <__sfp+0x24>
 80070e0:	6833      	ldr	r3, [r6, #0]
 80070e2:	b133      	cbz	r3, 80070f2 <__sfp+0x2e>
 80070e4:	6836      	ldr	r6, [r6, #0]
 80070e6:	e7f7      	b.n	80070d8 <__sfp+0x14>
 80070e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070ec:	b16d      	cbz	r5, 800710a <__sfp+0x46>
 80070ee:	3468      	adds	r4, #104	; 0x68
 80070f0:	e7f4      	b.n	80070dc <__sfp+0x18>
 80070f2:	2104      	movs	r1, #4
 80070f4:	4638      	mov	r0, r7
 80070f6:	f7ff ff9f 	bl	8007038 <__sfmoreglue>
 80070fa:	6030      	str	r0, [r6, #0]
 80070fc:	2800      	cmp	r0, #0
 80070fe:	d1f1      	bne.n	80070e4 <__sfp+0x20>
 8007100:	230c      	movs	r3, #12
 8007102:	603b      	str	r3, [r7, #0]
 8007104:	4604      	mov	r4, r0
 8007106:	4620      	mov	r0, r4
 8007108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800710a:	4b0b      	ldr	r3, [pc, #44]	; (8007138 <__sfp+0x74>)
 800710c:	6665      	str	r5, [r4, #100]	; 0x64
 800710e:	e9c4 5500 	strd	r5, r5, [r4]
 8007112:	60a5      	str	r5, [r4, #8]
 8007114:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007118:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800711c:	2208      	movs	r2, #8
 800711e:	4629      	mov	r1, r5
 8007120:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007124:	f7ff fd6a 	bl	8006bfc <memset>
 8007128:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800712c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007130:	e7e9      	b.n	8007106 <__sfp+0x42>
 8007132:	bf00      	nop
 8007134:	08080940 	.word	0x08080940
 8007138:	ffff0001 	.word	0xffff0001

0800713c <_fwalk_reent>:
 800713c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007140:	4680      	mov	r8, r0
 8007142:	4689      	mov	r9, r1
 8007144:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007148:	2600      	movs	r6, #0
 800714a:	b914      	cbnz	r4, 8007152 <_fwalk_reent+0x16>
 800714c:	4630      	mov	r0, r6
 800714e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007152:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007156:	3f01      	subs	r7, #1
 8007158:	d501      	bpl.n	800715e <_fwalk_reent+0x22>
 800715a:	6824      	ldr	r4, [r4, #0]
 800715c:	e7f5      	b.n	800714a <_fwalk_reent+0xe>
 800715e:	89ab      	ldrh	r3, [r5, #12]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d907      	bls.n	8007174 <_fwalk_reent+0x38>
 8007164:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007168:	3301      	adds	r3, #1
 800716a:	d003      	beq.n	8007174 <_fwalk_reent+0x38>
 800716c:	4629      	mov	r1, r5
 800716e:	4640      	mov	r0, r8
 8007170:	47c8      	blx	r9
 8007172:	4306      	orrs	r6, r0
 8007174:	3568      	adds	r5, #104	; 0x68
 8007176:	e7ee      	b.n	8007156 <_fwalk_reent+0x1a>

08007178 <__swhatbuf_r>:
 8007178:	b570      	push	{r4, r5, r6, lr}
 800717a:	460e      	mov	r6, r1
 800717c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007180:	2900      	cmp	r1, #0
 8007182:	b096      	sub	sp, #88	; 0x58
 8007184:	4614      	mov	r4, r2
 8007186:	461d      	mov	r5, r3
 8007188:	da07      	bge.n	800719a <__swhatbuf_r+0x22>
 800718a:	2300      	movs	r3, #0
 800718c:	602b      	str	r3, [r5, #0]
 800718e:	89b3      	ldrh	r3, [r6, #12]
 8007190:	061a      	lsls	r2, r3, #24
 8007192:	d410      	bmi.n	80071b6 <__swhatbuf_r+0x3e>
 8007194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007198:	e00e      	b.n	80071b8 <__swhatbuf_r+0x40>
 800719a:	466a      	mov	r2, sp
 800719c:	f000 fc36 	bl	8007a0c <_fstat_r>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	dbf2      	blt.n	800718a <__swhatbuf_r+0x12>
 80071a4:	9a01      	ldr	r2, [sp, #4]
 80071a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80071aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80071ae:	425a      	negs	r2, r3
 80071b0:	415a      	adcs	r2, r3
 80071b2:	602a      	str	r2, [r5, #0]
 80071b4:	e7ee      	b.n	8007194 <__swhatbuf_r+0x1c>
 80071b6:	2340      	movs	r3, #64	; 0x40
 80071b8:	2000      	movs	r0, #0
 80071ba:	6023      	str	r3, [r4, #0]
 80071bc:	b016      	add	sp, #88	; 0x58
 80071be:	bd70      	pop	{r4, r5, r6, pc}

080071c0 <__smakebuf_r>:
 80071c0:	898b      	ldrh	r3, [r1, #12]
 80071c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071c4:	079d      	lsls	r5, r3, #30
 80071c6:	4606      	mov	r6, r0
 80071c8:	460c      	mov	r4, r1
 80071ca:	d507      	bpl.n	80071dc <__smakebuf_r+0x1c>
 80071cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071d0:	6023      	str	r3, [r4, #0]
 80071d2:	6123      	str	r3, [r4, #16]
 80071d4:	2301      	movs	r3, #1
 80071d6:	6163      	str	r3, [r4, #20]
 80071d8:	b002      	add	sp, #8
 80071da:	bd70      	pop	{r4, r5, r6, pc}
 80071dc:	ab01      	add	r3, sp, #4
 80071de:	466a      	mov	r2, sp
 80071e0:	f7ff ffca 	bl	8007178 <__swhatbuf_r>
 80071e4:	9900      	ldr	r1, [sp, #0]
 80071e6:	4605      	mov	r5, r0
 80071e8:	4630      	mov	r0, r6
 80071ea:	f000 f877 	bl	80072dc <_malloc_r>
 80071ee:	b948      	cbnz	r0, 8007204 <__smakebuf_r+0x44>
 80071f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071f4:	059a      	lsls	r2, r3, #22
 80071f6:	d4ef      	bmi.n	80071d8 <__smakebuf_r+0x18>
 80071f8:	f023 0303 	bic.w	r3, r3, #3
 80071fc:	f043 0302 	orr.w	r3, r3, #2
 8007200:	81a3      	strh	r3, [r4, #12]
 8007202:	e7e3      	b.n	80071cc <__smakebuf_r+0xc>
 8007204:	4b0d      	ldr	r3, [pc, #52]	; (800723c <__smakebuf_r+0x7c>)
 8007206:	62b3      	str	r3, [r6, #40]	; 0x28
 8007208:	89a3      	ldrh	r3, [r4, #12]
 800720a:	6020      	str	r0, [r4, #0]
 800720c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007210:	81a3      	strh	r3, [r4, #12]
 8007212:	9b00      	ldr	r3, [sp, #0]
 8007214:	6163      	str	r3, [r4, #20]
 8007216:	9b01      	ldr	r3, [sp, #4]
 8007218:	6120      	str	r0, [r4, #16]
 800721a:	b15b      	cbz	r3, 8007234 <__smakebuf_r+0x74>
 800721c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007220:	4630      	mov	r0, r6
 8007222:	f000 fc05 	bl	8007a30 <_isatty_r>
 8007226:	b128      	cbz	r0, 8007234 <__smakebuf_r+0x74>
 8007228:	89a3      	ldrh	r3, [r4, #12]
 800722a:	f023 0303 	bic.w	r3, r3, #3
 800722e:	f043 0301 	orr.w	r3, r3, #1
 8007232:	81a3      	strh	r3, [r4, #12]
 8007234:	89a3      	ldrh	r3, [r4, #12]
 8007236:	431d      	orrs	r5, r3
 8007238:	81a5      	strh	r5, [r4, #12]
 800723a:	e7cd      	b.n	80071d8 <__smakebuf_r+0x18>
 800723c:	0800702d 	.word	0x0800702d

08007240 <_free_r>:
 8007240:	b538      	push	{r3, r4, r5, lr}
 8007242:	4605      	mov	r5, r0
 8007244:	2900      	cmp	r1, #0
 8007246:	d045      	beq.n	80072d4 <_free_r+0x94>
 8007248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800724c:	1f0c      	subs	r4, r1, #4
 800724e:	2b00      	cmp	r3, #0
 8007250:	bfb8      	it	lt
 8007252:	18e4      	addlt	r4, r4, r3
 8007254:	f000 fc0e 	bl	8007a74 <__malloc_lock>
 8007258:	4a1f      	ldr	r2, [pc, #124]	; (80072d8 <_free_r+0x98>)
 800725a:	6813      	ldr	r3, [r2, #0]
 800725c:	4610      	mov	r0, r2
 800725e:	b933      	cbnz	r3, 800726e <_free_r+0x2e>
 8007260:	6063      	str	r3, [r4, #4]
 8007262:	6014      	str	r4, [r2, #0]
 8007264:	4628      	mov	r0, r5
 8007266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800726a:	f000 bc04 	b.w	8007a76 <__malloc_unlock>
 800726e:	42a3      	cmp	r3, r4
 8007270:	d90c      	bls.n	800728c <_free_r+0x4c>
 8007272:	6821      	ldr	r1, [r4, #0]
 8007274:	1862      	adds	r2, r4, r1
 8007276:	4293      	cmp	r3, r2
 8007278:	bf04      	itt	eq
 800727a:	681a      	ldreq	r2, [r3, #0]
 800727c:	685b      	ldreq	r3, [r3, #4]
 800727e:	6063      	str	r3, [r4, #4]
 8007280:	bf04      	itt	eq
 8007282:	1852      	addeq	r2, r2, r1
 8007284:	6022      	streq	r2, [r4, #0]
 8007286:	6004      	str	r4, [r0, #0]
 8007288:	e7ec      	b.n	8007264 <_free_r+0x24>
 800728a:	4613      	mov	r3, r2
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	b10a      	cbz	r2, 8007294 <_free_r+0x54>
 8007290:	42a2      	cmp	r2, r4
 8007292:	d9fa      	bls.n	800728a <_free_r+0x4a>
 8007294:	6819      	ldr	r1, [r3, #0]
 8007296:	1858      	adds	r0, r3, r1
 8007298:	42a0      	cmp	r0, r4
 800729a:	d10b      	bne.n	80072b4 <_free_r+0x74>
 800729c:	6820      	ldr	r0, [r4, #0]
 800729e:	4401      	add	r1, r0
 80072a0:	1858      	adds	r0, r3, r1
 80072a2:	4282      	cmp	r2, r0
 80072a4:	6019      	str	r1, [r3, #0]
 80072a6:	d1dd      	bne.n	8007264 <_free_r+0x24>
 80072a8:	6810      	ldr	r0, [r2, #0]
 80072aa:	6852      	ldr	r2, [r2, #4]
 80072ac:	605a      	str	r2, [r3, #4]
 80072ae:	4401      	add	r1, r0
 80072b0:	6019      	str	r1, [r3, #0]
 80072b2:	e7d7      	b.n	8007264 <_free_r+0x24>
 80072b4:	d902      	bls.n	80072bc <_free_r+0x7c>
 80072b6:	230c      	movs	r3, #12
 80072b8:	602b      	str	r3, [r5, #0]
 80072ba:	e7d3      	b.n	8007264 <_free_r+0x24>
 80072bc:	6820      	ldr	r0, [r4, #0]
 80072be:	1821      	adds	r1, r4, r0
 80072c0:	428a      	cmp	r2, r1
 80072c2:	bf04      	itt	eq
 80072c4:	6811      	ldreq	r1, [r2, #0]
 80072c6:	6852      	ldreq	r2, [r2, #4]
 80072c8:	6062      	str	r2, [r4, #4]
 80072ca:	bf04      	itt	eq
 80072cc:	1809      	addeq	r1, r1, r0
 80072ce:	6021      	streq	r1, [r4, #0]
 80072d0:	605c      	str	r4, [r3, #4]
 80072d2:	e7c7      	b.n	8007264 <_free_r+0x24>
 80072d4:	bd38      	pop	{r3, r4, r5, pc}
 80072d6:	bf00      	nop
 80072d8:	20000090 	.word	0x20000090

080072dc <_malloc_r>:
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	1ccd      	adds	r5, r1, #3
 80072e0:	f025 0503 	bic.w	r5, r5, #3
 80072e4:	3508      	adds	r5, #8
 80072e6:	2d0c      	cmp	r5, #12
 80072e8:	bf38      	it	cc
 80072ea:	250c      	movcc	r5, #12
 80072ec:	2d00      	cmp	r5, #0
 80072ee:	4606      	mov	r6, r0
 80072f0:	db01      	blt.n	80072f6 <_malloc_r+0x1a>
 80072f2:	42a9      	cmp	r1, r5
 80072f4:	d903      	bls.n	80072fe <_malloc_r+0x22>
 80072f6:	230c      	movs	r3, #12
 80072f8:	6033      	str	r3, [r6, #0]
 80072fa:	2000      	movs	r0, #0
 80072fc:	bd70      	pop	{r4, r5, r6, pc}
 80072fe:	f000 fbb9 	bl	8007a74 <__malloc_lock>
 8007302:	4a21      	ldr	r2, [pc, #132]	; (8007388 <_malloc_r+0xac>)
 8007304:	6814      	ldr	r4, [r2, #0]
 8007306:	4621      	mov	r1, r4
 8007308:	b991      	cbnz	r1, 8007330 <_malloc_r+0x54>
 800730a:	4c20      	ldr	r4, [pc, #128]	; (800738c <_malloc_r+0xb0>)
 800730c:	6823      	ldr	r3, [r4, #0]
 800730e:	b91b      	cbnz	r3, 8007318 <_malloc_r+0x3c>
 8007310:	4630      	mov	r0, r6
 8007312:	f000 fb05 	bl	8007920 <_sbrk_r>
 8007316:	6020      	str	r0, [r4, #0]
 8007318:	4629      	mov	r1, r5
 800731a:	4630      	mov	r0, r6
 800731c:	f000 fb00 	bl	8007920 <_sbrk_r>
 8007320:	1c43      	adds	r3, r0, #1
 8007322:	d124      	bne.n	800736e <_malloc_r+0x92>
 8007324:	230c      	movs	r3, #12
 8007326:	6033      	str	r3, [r6, #0]
 8007328:	4630      	mov	r0, r6
 800732a:	f000 fba4 	bl	8007a76 <__malloc_unlock>
 800732e:	e7e4      	b.n	80072fa <_malloc_r+0x1e>
 8007330:	680b      	ldr	r3, [r1, #0]
 8007332:	1b5b      	subs	r3, r3, r5
 8007334:	d418      	bmi.n	8007368 <_malloc_r+0x8c>
 8007336:	2b0b      	cmp	r3, #11
 8007338:	d90f      	bls.n	800735a <_malloc_r+0x7e>
 800733a:	600b      	str	r3, [r1, #0]
 800733c:	50cd      	str	r5, [r1, r3]
 800733e:	18cc      	adds	r4, r1, r3
 8007340:	4630      	mov	r0, r6
 8007342:	f000 fb98 	bl	8007a76 <__malloc_unlock>
 8007346:	f104 000b 	add.w	r0, r4, #11
 800734a:	1d23      	adds	r3, r4, #4
 800734c:	f020 0007 	bic.w	r0, r0, #7
 8007350:	1ac3      	subs	r3, r0, r3
 8007352:	d0d3      	beq.n	80072fc <_malloc_r+0x20>
 8007354:	425a      	negs	r2, r3
 8007356:	50e2      	str	r2, [r4, r3]
 8007358:	e7d0      	b.n	80072fc <_malloc_r+0x20>
 800735a:	428c      	cmp	r4, r1
 800735c:	684b      	ldr	r3, [r1, #4]
 800735e:	bf16      	itet	ne
 8007360:	6063      	strne	r3, [r4, #4]
 8007362:	6013      	streq	r3, [r2, #0]
 8007364:	460c      	movne	r4, r1
 8007366:	e7eb      	b.n	8007340 <_malloc_r+0x64>
 8007368:	460c      	mov	r4, r1
 800736a:	6849      	ldr	r1, [r1, #4]
 800736c:	e7cc      	b.n	8007308 <_malloc_r+0x2c>
 800736e:	1cc4      	adds	r4, r0, #3
 8007370:	f024 0403 	bic.w	r4, r4, #3
 8007374:	42a0      	cmp	r0, r4
 8007376:	d005      	beq.n	8007384 <_malloc_r+0xa8>
 8007378:	1a21      	subs	r1, r4, r0
 800737a:	4630      	mov	r0, r6
 800737c:	f000 fad0 	bl	8007920 <_sbrk_r>
 8007380:	3001      	adds	r0, #1
 8007382:	d0cf      	beq.n	8007324 <_malloc_r+0x48>
 8007384:	6025      	str	r5, [r4, #0]
 8007386:	e7db      	b.n	8007340 <_malloc_r+0x64>
 8007388:	20000090 	.word	0x20000090
 800738c:	20000094 	.word	0x20000094

08007390 <__sfputc_r>:
 8007390:	6893      	ldr	r3, [r2, #8]
 8007392:	3b01      	subs	r3, #1
 8007394:	2b00      	cmp	r3, #0
 8007396:	b410      	push	{r4}
 8007398:	6093      	str	r3, [r2, #8]
 800739a:	da08      	bge.n	80073ae <__sfputc_r+0x1e>
 800739c:	6994      	ldr	r4, [r2, #24]
 800739e:	42a3      	cmp	r3, r4
 80073a0:	db01      	blt.n	80073a6 <__sfputc_r+0x16>
 80073a2:	290a      	cmp	r1, #10
 80073a4:	d103      	bne.n	80073ae <__sfputc_r+0x1e>
 80073a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073aa:	f7ff bcab 	b.w	8006d04 <__swbuf_r>
 80073ae:	6813      	ldr	r3, [r2, #0]
 80073b0:	1c58      	adds	r0, r3, #1
 80073b2:	6010      	str	r0, [r2, #0]
 80073b4:	7019      	strb	r1, [r3, #0]
 80073b6:	4608      	mov	r0, r1
 80073b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073bc:	4770      	bx	lr

080073be <__sfputs_r>:
 80073be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c0:	4606      	mov	r6, r0
 80073c2:	460f      	mov	r7, r1
 80073c4:	4614      	mov	r4, r2
 80073c6:	18d5      	adds	r5, r2, r3
 80073c8:	42ac      	cmp	r4, r5
 80073ca:	d101      	bne.n	80073d0 <__sfputs_r+0x12>
 80073cc:	2000      	movs	r0, #0
 80073ce:	e007      	b.n	80073e0 <__sfputs_r+0x22>
 80073d0:	463a      	mov	r2, r7
 80073d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073d6:	4630      	mov	r0, r6
 80073d8:	f7ff ffda 	bl	8007390 <__sfputc_r>
 80073dc:	1c43      	adds	r3, r0, #1
 80073de:	d1f3      	bne.n	80073c8 <__sfputs_r+0xa>
 80073e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073e4 <_vfiprintf_r>:
 80073e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e8:	460c      	mov	r4, r1
 80073ea:	b09d      	sub	sp, #116	; 0x74
 80073ec:	4617      	mov	r7, r2
 80073ee:	461d      	mov	r5, r3
 80073f0:	4606      	mov	r6, r0
 80073f2:	b118      	cbz	r0, 80073fc <_vfiprintf_r+0x18>
 80073f4:	6983      	ldr	r3, [r0, #24]
 80073f6:	b90b      	cbnz	r3, 80073fc <_vfiprintf_r+0x18>
 80073f8:	f7ff fe34 	bl	8007064 <__sinit>
 80073fc:	4b7c      	ldr	r3, [pc, #496]	; (80075f0 <_vfiprintf_r+0x20c>)
 80073fe:	429c      	cmp	r4, r3
 8007400:	d158      	bne.n	80074b4 <_vfiprintf_r+0xd0>
 8007402:	6874      	ldr	r4, [r6, #4]
 8007404:	89a3      	ldrh	r3, [r4, #12]
 8007406:	0718      	lsls	r0, r3, #28
 8007408:	d55e      	bpl.n	80074c8 <_vfiprintf_r+0xe4>
 800740a:	6923      	ldr	r3, [r4, #16]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d05b      	beq.n	80074c8 <_vfiprintf_r+0xe4>
 8007410:	2300      	movs	r3, #0
 8007412:	9309      	str	r3, [sp, #36]	; 0x24
 8007414:	2320      	movs	r3, #32
 8007416:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800741a:	2330      	movs	r3, #48	; 0x30
 800741c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007420:	9503      	str	r5, [sp, #12]
 8007422:	f04f 0b01 	mov.w	fp, #1
 8007426:	46b8      	mov	r8, r7
 8007428:	4645      	mov	r5, r8
 800742a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800742e:	b10b      	cbz	r3, 8007434 <_vfiprintf_r+0x50>
 8007430:	2b25      	cmp	r3, #37	; 0x25
 8007432:	d154      	bne.n	80074de <_vfiprintf_r+0xfa>
 8007434:	ebb8 0a07 	subs.w	sl, r8, r7
 8007438:	d00b      	beq.n	8007452 <_vfiprintf_r+0x6e>
 800743a:	4653      	mov	r3, sl
 800743c:	463a      	mov	r2, r7
 800743e:	4621      	mov	r1, r4
 8007440:	4630      	mov	r0, r6
 8007442:	f7ff ffbc 	bl	80073be <__sfputs_r>
 8007446:	3001      	adds	r0, #1
 8007448:	f000 80c2 	beq.w	80075d0 <_vfiprintf_r+0x1ec>
 800744c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800744e:	4453      	add	r3, sl
 8007450:	9309      	str	r3, [sp, #36]	; 0x24
 8007452:	f898 3000 	ldrb.w	r3, [r8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 80ba 	beq.w	80075d0 <_vfiprintf_r+0x1ec>
 800745c:	2300      	movs	r3, #0
 800745e:	f04f 32ff 	mov.w	r2, #4294967295
 8007462:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007466:	9304      	str	r3, [sp, #16]
 8007468:	9307      	str	r3, [sp, #28]
 800746a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800746e:	931a      	str	r3, [sp, #104]	; 0x68
 8007470:	46a8      	mov	r8, r5
 8007472:	2205      	movs	r2, #5
 8007474:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007478:	485e      	ldr	r0, [pc, #376]	; (80075f4 <_vfiprintf_r+0x210>)
 800747a:	f7f8 fec1 	bl	8000200 <memchr>
 800747e:	9b04      	ldr	r3, [sp, #16]
 8007480:	bb78      	cbnz	r0, 80074e2 <_vfiprintf_r+0xfe>
 8007482:	06d9      	lsls	r1, r3, #27
 8007484:	bf44      	itt	mi
 8007486:	2220      	movmi	r2, #32
 8007488:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800748c:	071a      	lsls	r2, r3, #28
 800748e:	bf44      	itt	mi
 8007490:	222b      	movmi	r2, #43	; 0x2b
 8007492:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007496:	782a      	ldrb	r2, [r5, #0]
 8007498:	2a2a      	cmp	r2, #42	; 0x2a
 800749a:	d02a      	beq.n	80074f2 <_vfiprintf_r+0x10e>
 800749c:	9a07      	ldr	r2, [sp, #28]
 800749e:	46a8      	mov	r8, r5
 80074a0:	2000      	movs	r0, #0
 80074a2:	250a      	movs	r5, #10
 80074a4:	4641      	mov	r1, r8
 80074a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074aa:	3b30      	subs	r3, #48	; 0x30
 80074ac:	2b09      	cmp	r3, #9
 80074ae:	d969      	bls.n	8007584 <_vfiprintf_r+0x1a0>
 80074b0:	b360      	cbz	r0, 800750c <_vfiprintf_r+0x128>
 80074b2:	e024      	b.n	80074fe <_vfiprintf_r+0x11a>
 80074b4:	4b50      	ldr	r3, [pc, #320]	; (80075f8 <_vfiprintf_r+0x214>)
 80074b6:	429c      	cmp	r4, r3
 80074b8:	d101      	bne.n	80074be <_vfiprintf_r+0xda>
 80074ba:	68b4      	ldr	r4, [r6, #8]
 80074bc:	e7a2      	b.n	8007404 <_vfiprintf_r+0x20>
 80074be:	4b4f      	ldr	r3, [pc, #316]	; (80075fc <_vfiprintf_r+0x218>)
 80074c0:	429c      	cmp	r4, r3
 80074c2:	bf08      	it	eq
 80074c4:	68f4      	ldreq	r4, [r6, #12]
 80074c6:	e79d      	b.n	8007404 <_vfiprintf_r+0x20>
 80074c8:	4621      	mov	r1, r4
 80074ca:	4630      	mov	r0, r6
 80074cc:	f7ff fc6c 	bl	8006da8 <__swsetup_r>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d09d      	beq.n	8007410 <_vfiprintf_r+0x2c>
 80074d4:	f04f 30ff 	mov.w	r0, #4294967295
 80074d8:	b01d      	add	sp, #116	; 0x74
 80074da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074de:	46a8      	mov	r8, r5
 80074e0:	e7a2      	b.n	8007428 <_vfiprintf_r+0x44>
 80074e2:	4a44      	ldr	r2, [pc, #272]	; (80075f4 <_vfiprintf_r+0x210>)
 80074e4:	1a80      	subs	r0, r0, r2
 80074e6:	fa0b f000 	lsl.w	r0, fp, r0
 80074ea:	4318      	orrs	r0, r3
 80074ec:	9004      	str	r0, [sp, #16]
 80074ee:	4645      	mov	r5, r8
 80074f0:	e7be      	b.n	8007470 <_vfiprintf_r+0x8c>
 80074f2:	9a03      	ldr	r2, [sp, #12]
 80074f4:	1d11      	adds	r1, r2, #4
 80074f6:	6812      	ldr	r2, [r2, #0]
 80074f8:	9103      	str	r1, [sp, #12]
 80074fa:	2a00      	cmp	r2, #0
 80074fc:	db01      	blt.n	8007502 <_vfiprintf_r+0x11e>
 80074fe:	9207      	str	r2, [sp, #28]
 8007500:	e004      	b.n	800750c <_vfiprintf_r+0x128>
 8007502:	4252      	negs	r2, r2
 8007504:	f043 0302 	orr.w	r3, r3, #2
 8007508:	9207      	str	r2, [sp, #28]
 800750a:	9304      	str	r3, [sp, #16]
 800750c:	f898 3000 	ldrb.w	r3, [r8]
 8007510:	2b2e      	cmp	r3, #46	; 0x2e
 8007512:	d10e      	bne.n	8007532 <_vfiprintf_r+0x14e>
 8007514:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007518:	2b2a      	cmp	r3, #42	; 0x2a
 800751a:	d138      	bne.n	800758e <_vfiprintf_r+0x1aa>
 800751c:	9b03      	ldr	r3, [sp, #12]
 800751e:	1d1a      	adds	r2, r3, #4
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	9203      	str	r2, [sp, #12]
 8007524:	2b00      	cmp	r3, #0
 8007526:	bfb8      	it	lt
 8007528:	f04f 33ff 	movlt.w	r3, #4294967295
 800752c:	f108 0802 	add.w	r8, r8, #2
 8007530:	9305      	str	r3, [sp, #20]
 8007532:	4d33      	ldr	r5, [pc, #204]	; (8007600 <_vfiprintf_r+0x21c>)
 8007534:	f898 1000 	ldrb.w	r1, [r8]
 8007538:	2203      	movs	r2, #3
 800753a:	4628      	mov	r0, r5
 800753c:	f7f8 fe60 	bl	8000200 <memchr>
 8007540:	b140      	cbz	r0, 8007554 <_vfiprintf_r+0x170>
 8007542:	2340      	movs	r3, #64	; 0x40
 8007544:	1b40      	subs	r0, r0, r5
 8007546:	fa03 f000 	lsl.w	r0, r3, r0
 800754a:	9b04      	ldr	r3, [sp, #16]
 800754c:	4303      	orrs	r3, r0
 800754e:	f108 0801 	add.w	r8, r8, #1
 8007552:	9304      	str	r3, [sp, #16]
 8007554:	f898 1000 	ldrb.w	r1, [r8]
 8007558:	482a      	ldr	r0, [pc, #168]	; (8007604 <_vfiprintf_r+0x220>)
 800755a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800755e:	2206      	movs	r2, #6
 8007560:	f108 0701 	add.w	r7, r8, #1
 8007564:	f7f8 fe4c 	bl	8000200 <memchr>
 8007568:	2800      	cmp	r0, #0
 800756a:	d037      	beq.n	80075dc <_vfiprintf_r+0x1f8>
 800756c:	4b26      	ldr	r3, [pc, #152]	; (8007608 <_vfiprintf_r+0x224>)
 800756e:	bb1b      	cbnz	r3, 80075b8 <_vfiprintf_r+0x1d4>
 8007570:	9b03      	ldr	r3, [sp, #12]
 8007572:	3307      	adds	r3, #7
 8007574:	f023 0307 	bic.w	r3, r3, #7
 8007578:	3308      	adds	r3, #8
 800757a:	9303      	str	r3, [sp, #12]
 800757c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800757e:	444b      	add	r3, r9
 8007580:	9309      	str	r3, [sp, #36]	; 0x24
 8007582:	e750      	b.n	8007426 <_vfiprintf_r+0x42>
 8007584:	fb05 3202 	mla	r2, r5, r2, r3
 8007588:	2001      	movs	r0, #1
 800758a:	4688      	mov	r8, r1
 800758c:	e78a      	b.n	80074a4 <_vfiprintf_r+0xc0>
 800758e:	2300      	movs	r3, #0
 8007590:	f108 0801 	add.w	r8, r8, #1
 8007594:	9305      	str	r3, [sp, #20]
 8007596:	4619      	mov	r1, r3
 8007598:	250a      	movs	r5, #10
 800759a:	4640      	mov	r0, r8
 800759c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075a0:	3a30      	subs	r2, #48	; 0x30
 80075a2:	2a09      	cmp	r2, #9
 80075a4:	d903      	bls.n	80075ae <_vfiprintf_r+0x1ca>
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d0c3      	beq.n	8007532 <_vfiprintf_r+0x14e>
 80075aa:	9105      	str	r1, [sp, #20]
 80075ac:	e7c1      	b.n	8007532 <_vfiprintf_r+0x14e>
 80075ae:	fb05 2101 	mla	r1, r5, r1, r2
 80075b2:	2301      	movs	r3, #1
 80075b4:	4680      	mov	r8, r0
 80075b6:	e7f0      	b.n	800759a <_vfiprintf_r+0x1b6>
 80075b8:	ab03      	add	r3, sp, #12
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	4622      	mov	r2, r4
 80075be:	4b13      	ldr	r3, [pc, #76]	; (800760c <_vfiprintf_r+0x228>)
 80075c0:	a904      	add	r1, sp, #16
 80075c2:	4630      	mov	r0, r6
 80075c4:	f3af 8000 	nop.w
 80075c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80075cc:	4681      	mov	r9, r0
 80075ce:	d1d5      	bne.n	800757c <_vfiprintf_r+0x198>
 80075d0:	89a3      	ldrh	r3, [r4, #12]
 80075d2:	065b      	lsls	r3, r3, #25
 80075d4:	f53f af7e 	bmi.w	80074d4 <_vfiprintf_r+0xf0>
 80075d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075da:	e77d      	b.n	80074d8 <_vfiprintf_r+0xf4>
 80075dc:	ab03      	add	r3, sp, #12
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	4622      	mov	r2, r4
 80075e2:	4b0a      	ldr	r3, [pc, #40]	; (800760c <_vfiprintf_r+0x228>)
 80075e4:	a904      	add	r1, sp, #16
 80075e6:	4630      	mov	r0, r6
 80075e8:	f000 f888 	bl	80076fc <_printf_i>
 80075ec:	e7ec      	b.n	80075c8 <_vfiprintf_r+0x1e4>
 80075ee:	bf00      	nop
 80075f0:	08080964 	.word	0x08080964
 80075f4:	080809a4 	.word	0x080809a4
 80075f8:	08080984 	.word	0x08080984
 80075fc:	08080944 	.word	0x08080944
 8007600:	080809aa 	.word	0x080809aa
 8007604:	080809ae 	.word	0x080809ae
 8007608:	00000000 	.word	0x00000000
 800760c:	080073bf 	.word	0x080073bf

08007610 <_printf_common>:
 8007610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007614:	4691      	mov	r9, r2
 8007616:	461f      	mov	r7, r3
 8007618:	688a      	ldr	r2, [r1, #8]
 800761a:	690b      	ldr	r3, [r1, #16]
 800761c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007620:	4293      	cmp	r3, r2
 8007622:	bfb8      	it	lt
 8007624:	4613      	movlt	r3, r2
 8007626:	f8c9 3000 	str.w	r3, [r9]
 800762a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800762e:	4606      	mov	r6, r0
 8007630:	460c      	mov	r4, r1
 8007632:	b112      	cbz	r2, 800763a <_printf_common+0x2a>
 8007634:	3301      	adds	r3, #1
 8007636:	f8c9 3000 	str.w	r3, [r9]
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	0699      	lsls	r1, r3, #26
 800763e:	bf42      	ittt	mi
 8007640:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007644:	3302      	addmi	r3, #2
 8007646:	f8c9 3000 	strmi.w	r3, [r9]
 800764a:	6825      	ldr	r5, [r4, #0]
 800764c:	f015 0506 	ands.w	r5, r5, #6
 8007650:	d107      	bne.n	8007662 <_printf_common+0x52>
 8007652:	f104 0a19 	add.w	sl, r4, #25
 8007656:	68e3      	ldr	r3, [r4, #12]
 8007658:	f8d9 2000 	ldr.w	r2, [r9]
 800765c:	1a9b      	subs	r3, r3, r2
 800765e:	42ab      	cmp	r3, r5
 8007660:	dc28      	bgt.n	80076b4 <_printf_common+0xa4>
 8007662:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007666:	6822      	ldr	r2, [r4, #0]
 8007668:	3300      	adds	r3, #0
 800766a:	bf18      	it	ne
 800766c:	2301      	movne	r3, #1
 800766e:	0692      	lsls	r2, r2, #26
 8007670:	d42d      	bmi.n	80076ce <_printf_common+0xbe>
 8007672:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007676:	4639      	mov	r1, r7
 8007678:	4630      	mov	r0, r6
 800767a:	47c0      	blx	r8
 800767c:	3001      	adds	r0, #1
 800767e:	d020      	beq.n	80076c2 <_printf_common+0xb2>
 8007680:	6823      	ldr	r3, [r4, #0]
 8007682:	68e5      	ldr	r5, [r4, #12]
 8007684:	f8d9 2000 	ldr.w	r2, [r9]
 8007688:	f003 0306 	and.w	r3, r3, #6
 800768c:	2b04      	cmp	r3, #4
 800768e:	bf08      	it	eq
 8007690:	1aad      	subeq	r5, r5, r2
 8007692:	68a3      	ldr	r3, [r4, #8]
 8007694:	6922      	ldr	r2, [r4, #16]
 8007696:	bf0c      	ite	eq
 8007698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800769c:	2500      	movne	r5, #0
 800769e:	4293      	cmp	r3, r2
 80076a0:	bfc4      	itt	gt
 80076a2:	1a9b      	subgt	r3, r3, r2
 80076a4:	18ed      	addgt	r5, r5, r3
 80076a6:	f04f 0900 	mov.w	r9, #0
 80076aa:	341a      	adds	r4, #26
 80076ac:	454d      	cmp	r5, r9
 80076ae:	d11a      	bne.n	80076e6 <_printf_common+0xd6>
 80076b0:	2000      	movs	r0, #0
 80076b2:	e008      	b.n	80076c6 <_printf_common+0xb6>
 80076b4:	2301      	movs	r3, #1
 80076b6:	4652      	mov	r2, sl
 80076b8:	4639      	mov	r1, r7
 80076ba:	4630      	mov	r0, r6
 80076bc:	47c0      	blx	r8
 80076be:	3001      	adds	r0, #1
 80076c0:	d103      	bne.n	80076ca <_printf_common+0xba>
 80076c2:	f04f 30ff 	mov.w	r0, #4294967295
 80076c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ca:	3501      	adds	r5, #1
 80076cc:	e7c3      	b.n	8007656 <_printf_common+0x46>
 80076ce:	18e1      	adds	r1, r4, r3
 80076d0:	1c5a      	adds	r2, r3, #1
 80076d2:	2030      	movs	r0, #48	; 0x30
 80076d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076d8:	4422      	add	r2, r4
 80076da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076e2:	3302      	adds	r3, #2
 80076e4:	e7c5      	b.n	8007672 <_printf_common+0x62>
 80076e6:	2301      	movs	r3, #1
 80076e8:	4622      	mov	r2, r4
 80076ea:	4639      	mov	r1, r7
 80076ec:	4630      	mov	r0, r6
 80076ee:	47c0      	blx	r8
 80076f0:	3001      	adds	r0, #1
 80076f2:	d0e6      	beq.n	80076c2 <_printf_common+0xb2>
 80076f4:	f109 0901 	add.w	r9, r9, #1
 80076f8:	e7d8      	b.n	80076ac <_printf_common+0x9c>
	...

080076fc <_printf_i>:
 80076fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007700:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007704:	460c      	mov	r4, r1
 8007706:	7e09      	ldrb	r1, [r1, #24]
 8007708:	b085      	sub	sp, #20
 800770a:	296e      	cmp	r1, #110	; 0x6e
 800770c:	4617      	mov	r7, r2
 800770e:	4606      	mov	r6, r0
 8007710:	4698      	mov	r8, r3
 8007712:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007714:	f000 80b3 	beq.w	800787e <_printf_i+0x182>
 8007718:	d822      	bhi.n	8007760 <_printf_i+0x64>
 800771a:	2963      	cmp	r1, #99	; 0x63
 800771c:	d036      	beq.n	800778c <_printf_i+0x90>
 800771e:	d80a      	bhi.n	8007736 <_printf_i+0x3a>
 8007720:	2900      	cmp	r1, #0
 8007722:	f000 80b9 	beq.w	8007898 <_printf_i+0x19c>
 8007726:	2958      	cmp	r1, #88	; 0x58
 8007728:	f000 8083 	beq.w	8007832 <_printf_i+0x136>
 800772c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007730:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007734:	e032      	b.n	800779c <_printf_i+0xa0>
 8007736:	2964      	cmp	r1, #100	; 0x64
 8007738:	d001      	beq.n	800773e <_printf_i+0x42>
 800773a:	2969      	cmp	r1, #105	; 0x69
 800773c:	d1f6      	bne.n	800772c <_printf_i+0x30>
 800773e:	6820      	ldr	r0, [r4, #0]
 8007740:	6813      	ldr	r3, [r2, #0]
 8007742:	0605      	lsls	r5, r0, #24
 8007744:	f103 0104 	add.w	r1, r3, #4
 8007748:	d52a      	bpl.n	80077a0 <_printf_i+0xa4>
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6011      	str	r1, [r2, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	da03      	bge.n	800775a <_printf_i+0x5e>
 8007752:	222d      	movs	r2, #45	; 0x2d
 8007754:	425b      	negs	r3, r3
 8007756:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800775a:	486f      	ldr	r0, [pc, #444]	; (8007918 <_printf_i+0x21c>)
 800775c:	220a      	movs	r2, #10
 800775e:	e039      	b.n	80077d4 <_printf_i+0xd8>
 8007760:	2973      	cmp	r1, #115	; 0x73
 8007762:	f000 809d 	beq.w	80078a0 <_printf_i+0x1a4>
 8007766:	d808      	bhi.n	800777a <_printf_i+0x7e>
 8007768:	296f      	cmp	r1, #111	; 0x6f
 800776a:	d020      	beq.n	80077ae <_printf_i+0xb2>
 800776c:	2970      	cmp	r1, #112	; 0x70
 800776e:	d1dd      	bne.n	800772c <_printf_i+0x30>
 8007770:	6823      	ldr	r3, [r4, #0]
 8007772:	f043 0320 	orr.w	r3, r3, #32
 8007776:	6023      	str	r3, [r4, #0]
 8007778:	e003      	b.n	8007782 <_printf_i+0x86>
 800777a:	2975      	cmp	r1, #117	; 0x75
 800777c:	d017      	beq.n	80077ae <_printf_i+0xb2>
 800777e:	2978      	cmp	r1, #120	; 0x78
 8007780:	d1d4      	bne.n	800772c <_printf_i+0x30>
 8007782:	2378      	movs	r3, #120	; 0x78
 8007784:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007788:	4864      	ldr	r0, [pc, #400]	; (800791c <_printf_i+0x220>)
 800778a:	e055      	b.n	8007838 <_printf_i+0x13c>
 800778c:	6813      	ldr	r3, [r2, #0]
 800778e:	1d19      	adds	r1, r3, #4
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6011      	str	r1, [r2, #0]
 8007794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800779c:	2301      	movs	r3, #1
 800779e:	e08c      	b.n	80078ba <_printf_i+0x1be>
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6011      	str	r1, [r2, #0]
 80077a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077a8:	bf18      	it	ne
 80077aa:	b21b      	sxthne	r3, r3
 80077ac:	e7cf      	b.n	800774e <_printf_i+0x52>
 80077ae:	6813      	ldr	r3, [r2, #0]
 80077b0:	6825      	ldr	r5, [r4, #0]
 80077b2:	1d18      	adds	r0, r3, #4
 80077b4:	6010      	str	r0, [r2, #0]
 80077b6:	0628      	lsls	r0, r5, #24
 80077b8:	d501      	bpl.n	80077be <_printf_i+0xc2>
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	e002      	b.n	80077c4 <_printf_i+0xc8>
 80077be:	0668      	lsls	r0, r5, #25
 80077c0:	d5fb      	bpl.n	80077ba <_printf_i+0xbe>
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	4854      	ldr	r0, [pc, #336]	; (8007918 <_printf_i+0x21c>)
 80077c6:	296f      	cmp	r1, #111	; 0x6f
 80077c8:	bf14      	ite	ne
 80077ca:	220a      	movne	r2, #10
 80077cc:	2208      	moveq	r2, #8
 80077ce:	2100      	movs	r1, #0
 80077d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077d4:	6865      	ldr	r5, [r4, #4]
 80077d6:	60a5      	str	r5, [r4, #8]
 80077d8:	2d00      	cmp	r5, #0
 80077da:	f2c0 8095 	blt.w	8007908 <_printf_i+0x20c>
 80077de:	6821      	ldr	r1, [r4, #0]
 80077e0:	f021 0104 	bic.w	r1, r1, #4
 80077e4:	6021      	str	r1, [r4, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d13d      	bne.n	8007866 <_printf_i+0x16a>
 80077ea:	2d00      	cmp	r5, #0
 80077ec:	f040 808e 	bne.w	800790c <_printf_i+0x210>
 80077f0:	4665      	mov	r5, ip
 80077f2:	2a08      	cmp	r2, #8
 80077f4:	d10b      	bne.n	800780e <_printf_i+0x112>
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	07db      	lsls	r3, r3, #31
 80077fa:	d508      	bpl.n	800780e <_printf_i+0x112>
 80077fc:	6923      	ldr	r3, [r4, #16]
 80077fe:	6862      	ldr	r2, [r4, #4]
 8007800:	429a      	cmp	r2, r3
 8007802:	bfde      	ittt	le
 8007804:	2330      	movle	r3, #48	; 0x30
 8007806:	f805 3c01 	strble.w	r3, [r5, #-1]
 800780a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800780e:	ebac 0305 	sub.w	r3, ip, r5
 8007812:	6123      	str	r3, [r4, #16]
 8007814:	f8cd 8000 	str.w	r8, [sp]
 8007818:	463b      	mov	r3, r7
 800781a:	aa03      	add	r2, sp, #12
 800781c:	4621      	mov	r1, r4
 800781e:	4630      	mov	r0, r6
 8007820:	f7ff fef6 	bl	8007610 <_printf_common>
 8007824:	3001      	adds	r0, #1
 8007826:	d14d      	bne.n	80078c4 <_printf_i+0x1c8>
 8007828:	f04f 30ff 	mov.w	r0, #4294967295
 800782c:	b005      	add	sp, #20
 800782e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007832:	4839      	ldr	r0, [pc, #228]	; (8007918 <_printf_i+0x21c>)
 8007834:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007838:	6813      	ldr	r3, [r2, #0]
 800783a:	6821      	ldr	r1, [r4, #0]
 800783c:	1d1d      	adds	r5, r3, #4
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6015      	str	r5, [r2, #0]
 8007842:	060a      	lsls	r2, r1, #24
 8007844:	d50b      	bpl.n	800785e <_printf_i+0x162>
 8007846:	07ca      	lsls	r2, r1, #31
 8007848:	bf44      	itt	mi
 800784a:	f041 0120 	orrmi.w	r1, r1, #32
 800784e:	6021      	strmi	r1, [r4, #0]
 8007850:	b91b      	cbnz	r3, 800785a <_printf_i+0x15e>
 8007852:	6822      	ldr	r2, [r4, #0]
 8007854:	f022 0220 	bic.w	r2, r2, #32
 8007858:	6022      	str	r2, [r4, #0]
 800785a:	2210      	movs	r2, #16
 800785c:	e7b7      	b.n	80077ce <_printf_i+0xd2>
 800785e:	064d      	lsls	r5, r1, #25
 8007860:	bf48      	it	mi
 8007862:	b29b      	uxthmi	r3, r3
 8007864:	e7ef      	b.n	8007846 <_printf_i+0x14a>
 8007866:	4665      	mov	r5, ip
 8007868:	fbb3 f1f2 	udiv	r1, r3, r2
 800786c:	fb02 3311 	mls	r3, r2, r1, r3
 8007870:	5cc3      	ldrb	r3, [r0, r3]
 8007872:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007876:	460b      	mov	r3, r1
 8007878:	2900      	cmp	r1, #0
 800787a:	d1f5      	bne.n	8007868 <_printf_i+0x16c>
 800787c:	e7b9      	b.n	80077f2 <_printf_i+0xf6>
 800787e:	6813      	ldr	r3, [r2, #0]
 8007880:	6825      	ldr	r5, [r4, #0]
 8007882:	6961      	ldr	r1, [r4, #20]
 8007884:	1d18      	adds	r0, r3, #4
 8007886:	6010      	str	r0, [r2, #0]
 8007888:	0628      	lsls	r0, r5, #24
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	d501      	bpl.n	8007892 <_printf_i+0x196>
 800788e:	6019      	str	r1, [r3, #0]
 8007890:	e002      	b.n	8007898 <_printf_i+0x19c>
 8007892:	066a      	lsls	r2, r5, #25
 8007894:	d5fb      	bpl.n	800788e <_printf_i+0x192>
 8007896:	8019      	strh	r1, [r3, #0]
 8007898:	2300      	movs	r3, #0
 800789a:	6123      	str	r3, [r4, #16]
 800789c:	4665      	mov	r5, ip
 800789e:	e7b9      	b.n	8007814 <_printf_i+0x118>
 80078a0:	6813      	ldr	r3, [r2, #0]
 80078a2:	1d19      	adds	r1, r3, #4
 80078a4:	6011      	str	r1, [r2, #0]
 80078a6:	681d      	ldr	r5, [r3, #0]
 80078a8:	6862      	ldr	r2, [r4, #4]
 80078aa:	2100      	movs	r1, #0
 80078ac:	4628      	mov	r0, r5
 80078ae:	f7f8 fca7 	bl	8000200 <memchr>
 80078b2:	b108      	cbz	r0, 80078b8 <_printf_i+0x1bc>
 80078b4:	1b40      	subs	r0, r0, r5
 80078b6:	6060      	str	r0, [r4, #4]
 80078b8:	6863      	ldr	r3, [r4, #4]
 80078ba:	6123      	str	r3, [r4, #16]
 80078bc:	2300      	movs	r3, #0
 80078be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078c2:	e7a7      	b.n	8007814 <_printf_i+0x118>
 80078c4:	6923      	ldr	r3, [r4, #16]
 80078c6:	462a      	mov	r2, r5
 80078c8:	4639      	mov	r1, r7
 80078ca:	4630      	mov	r0, r6
 80078cc:	47c0      	blx	r8
 80078ce:	3001      	adds	r0, #1
 80078d0:	d0aa      	beq.n	8007828 <_printf_i+0x12c>
 80078d2:	6823      	ldr	r3, [r4, #0]
 80078d4:	079b      	lsls	r3, r3, #30
 80078d6:	d413      	bmi.n	8007900 <_printf_i+0x204>
 80078d8:	68e0      	ldr	r0, [r4, #12]
 80078da:	9b03      	ldr	r3, [sp, #12]
 80078dc:	4298      	cmp	r0, r3
 80078de:	bfb8      	it	lt
 80078e0:	4618      	movlt	r0, r3
 80078e2:	e7a3      	b.n	800782c <_printf_i+0x130>
 80078e4:	2301      	movs	r3, #1
 80078e6:	464a      	mov	r2, r9
 80078e8:	4639      	mov	r1, r7
 80078ea:	4630      	mov	r0, r6
 80078ec:	47c0      	blx	r8
 80078ee:	3001      	adds	r0, #1
 80078f0:	d09a      	beq.n	8007828 <_printf_i+0x12c>
 80078f2:	3501      	adds	r5, #1
 80078f4:	68e3      	ldr	r3, [r4, #12]
 80078f6:	9a03      	ldr	r2, [sp, #12]
 80078f8:	1a9b      	subs	r3, r3, r2
 80078fa:	42ab      	cmp	r3, r5
 80078fc:	dcf2      	bgt.n	80078e4 <_printf_i+0x1e8>
 80078fe:	e7eb      	b.n	80078d8 <_printf_i+0x1dc>
 8007900:	2500      	movs	r5, #0
 8007902:	f104 0919 	add.w	r9, r4, #25
 8007906:	e7f5      	b.n	80078f4 <_printf_i+0x1f8>
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1ac      	bne.n	8007866 <_printf_i+0x16a>
 800790c:	7803      	ldrb	r3, [r0, #0]
 800790e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007912:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007916:	e76c      	b.n	80077f2 <_printf_i+0xf6>
 8007918:	080809b5 	.word	0x080809b5
 800791c:	080809c6 	.word	0x080809c6

08007920 <_sbrk_r>:
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	4c06      	ldr	r4, [pc, #24]	; (800793c <_sbrk_r+0x1c>)
 8007924:	2300      	movs	r3, #0
 8007926:	4605      	mov	r5, r0
 8007928:	4608      	mov	r0, r1
 800792a:	6023      	str	r3, [r4, #0]
 800792c:	f7f9 fcfa 	bl	8001324 <_sbrk>
 8007930:	1c43      	adds	r3, r0, #1
 8007932:	d102      	bne.n	800793a <_sbrk_r+0x1a>
 8007934:	6823      	ldr	r3, [r4, #0]
 8007936:	b103      	cbz	r3, 800793a <_sbrk_r+0x1a>
 8007938:	602b      	str	r3, [r5, #0]
 800793a:	bd38      	pop	{r3, r4, r5, pc}
 800793c:	200007fc 	.word	0x200007fc

08007940 <__sread>:
 8007940:	b510      	push	{r4, lr}
 8007942:	460c      	mov	r4, r1
 8007944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007948:	f000 f896 	bl	8007a78 <_read_r>
 800794c:	2800      	cmp	r0, #0
 800794e:	bfab      	itete	ge
 8007950:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007952:	89a3      	ldrhlt	r3, [r4, #12]
 8007954:	181b      	addge	r3, r3, r0
 8007956:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800795a:	bfac      	ite	ge
 800795c:	6563      	strge	r3, [r4, #84]	; 0x54
 800795e:	81a3      	strhlt	r3, [r4, #12]
 8007960:	bd10      	pop	{r4, pc}

08007962 <__swrite>:
 8007962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007966:	461f      	mov	r7, r3
 8007968:	898b      	ldrh	r3, [r1, #12]
 800796a:	05db      	lsls	r3, r3, #23
 800796c:	4605      	mov	r5, r0
 800796e:	460c      	mov	r4, r1
 8007970:	4616      	mov	r6, r2
 8007972:	d505      	bpl.n	8007980 <__swrite+0x1e>
 8007974:	2302      	movs	r3, #2
 8007976:	2200      	movs	r2, #0
 8007978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800797c:	f000 f868 	bl	8007a50 <_lseek_r>
 8007980:	89a3      	ldrh	r3, [r4, #12]
 8007982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800798a:	81a3      	strh	r3, [r4, #12]
 800798c:	4632      	mov	r2, r6
 800798e:	463b      	mov	r3, r7
 8007990:	4628      	mov	r0, r5
 8007992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007996:	f000 b817 	b.w	80079c8 <_write_r>

0800799a <__sseek>:
 800799a:	b510      	push	{r4, lr}
 800799c:	460c      	mov	r4, r1
 800799e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a2:	f000 f855 	bl	8007a50 <_lseek_r>
 80079a6:	1c43      	adds	r3, r0, #1
 80079a8:	89a3      	ldrh	r3, [r4, #12]
 80079aa:	bf15      	itete	ne
 80079ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80079ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079b6:	81a3      	strheq	r3, [r4, #12]
 80079b8:	bf18      	it	ne
 80079ba:	81a3      	strhne	r3, [r4, #12]
 80079bc:	bd10      	pop	{r4, pc}

080079be <__sclose>:
 80079be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079c2:	f000 b813 	b.w	80079ec <_close_r>
	...

080079c8 <_write_r>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	4c07      	ldr	r4, [pc, #28]	; (80079e8 <_write_r+0x20>)
 80079cc:	4605      	mov	r5, r0
 80079ce:	4608      	mov	r0, r1
 80079d0:	4611      	mov	r1, r2
 80079d2:	2200      	movs	r2, #0
 80079d4:	6022      	str	r2, [r4, #0]
 80079d6:	461a      	mov	r2, r3
 80079d8:	f7f9 fc53 	bl	8001282 <_write>
 80079dc:	1c43      	adds	r3, r0, #1
 80079de:	d102      	bne.n	80079e6 <_write_r+0x1e>
 80079e0:	6823      	ldr	r3, [r4, #0]
 80079e2:	b103      	cbz	r3, 80079e6 <_write_r+0x1e>
 80079e4:	602b      	str	r3, [r5, #0]
 80079e6:	bd38      	pop	{r3, r4, r5, pc}
 80079e8:	200007fc 	.word	0x200007fc

080079ec <_close_r>:
 80079ec:	b538      	push	{r3, r4, r5, lr}
 80079ee:	4c06      	ldr	r4, [pc, #24]	; (8007a08 <_close_r+0x1c>)
 80079f0:	2300      	movs	r3, #0
 80079f2:	4605      	mov	r5, r0
 80079f4:	4608      	mov	r0, r1
 80079f6:	6023      	str	r3, [r4, #0]
 80079f8:	f7f9 fc5f 	bl	80012ba <_close>
 80079fc:	1c43      	adds	r3, r0, #1
 80079fe:	d102      	bne.n	8007a06 <_close_r+0x1a>
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	b103      	cbz	r3, 8007a06 <_close_r+0x1a>
 8007a04:	602b      	str	r3, [r5, #0]
 8007a06:	bd38      	pop	{r3, r4, r5, pc}
 8007a08:	200007fc 	.word	0x200007fc

08007a0c <_fstat_r>:
 8007a0c:	b538      	push	{r3, r4, r5, lr}
 8007a0e:	4c07      	ldr	r4, [pc, #28]	; (8007a2c <_fstat_r+0x20>)
 8007a10:	2300      	movs	r3, #0
 8007a12:	4605      	mov	r5, r0
 8007a14:	4608      	mov	r0, r1
 8007a16:	4611      	mov	r1, r2
 8007a18:	6023      	str	r3, [r4, #0]
 8007a1a:	f7f9 fc5a 	bl	80012d2 <_fstat>
 8007a1e:	1c43      	adds	r3, r0, #1
 8007a20:	d102      	bne.n	8007a28 <_fstat_r+0x1c>
 8007a22:	6823      	ldr	r3, [r4, #0]
 8007a24:	b103      	cbz	r3, 8007a28 <_fstat_r+0x1c>
 8007a26:	602b      	str	r3, [r5, #0]
 8007a28:	bd38      	pop	{r3, r4, r5, pc}
 8007a2a:	bf00      	nop
 8007a2c:	200007fc 	.word	0x200007fc

08007a30 <_isatty_r>:
 8007a30:	b538      	push	{r3, r4, r5, lr}
 8007a32:	4c06      	ldr	r4, [pc, #24]	; (8007a4c <_isatty_r+0x1c>)
 8007a34:	2300      	movs	r3, #0
 8007a36:	4605      	mov	r5, r0
 8007a38:	4608      	mov	r0, r1
 8007a3a:	6023      	str	r3, [r4, #0]
 8007a3c:	f7f9 fc59 	bl	80012f2 <_isatty>
 8007a40:	1c43      	adds	r3, r0, #1
 8007a42:	d102      	bne.n	8007a4a <_isatty_r+0x1a>
 8007a44:	6823      	ldr	r3, [r4, #0]
 8007a46:	b103      	cbz	r3, 8007a4a <_isatty_r+0x1a>
 8007a48:	602b      	str	r3, [r5, #0]
 8007a4a:	bd38      	pop	{r3, r4, r5, pc}
 8007a4c:	200007fc 	.word	0x200007fc

08007a50 <_lseek_r>:
 8007a50:	b538      	push	{r3, r4, r5, lr}
 8007a52:	4c07      	ldr	r4, [pc, #28]	; (8007a70 <_lseek_r+0x20>)
 8007a54:	4605      	mov	r5, r0
 8007a56:	4608      	mov	r0, r1
 8007a58:	4611      	mov	r1, r2
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	6022      	str	r2, [r4, #0]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	f7f9 fc52 	bl	8001308 <_lseek>
 8007a64:	1c43      	adds	r3, r0, #1
 8007a66:	d102      	bne.n	8007a6e <_lseek_r+0x1e>
 8007a68:	6823      	ldr	r3, [r4, #0]
 8007a6a:	b103      	cbz	r3, 8007a6e <_lseek_r+0x1e>
 8007a6c:	602b      	str	r3, [r5, #0]
 8007a6e:	bd38      	pop	{r3, r4, r5, pc}
 8007a70:	200007fc 	.word	0x200007fc

08007a74 <__malloc_lock>:
 8007a74:	4770      	bx	lr

08007a76 <__malloc_unlock>:
 8007a76:	4770      	bx	lr

08007a78 <_read_r>:
 8007a78:	b538      	push	{r3, r4, r5, lr}
 8007a7a:	4c07      	ldr	r4, [pc, #28]	; (8007a98 <_read_r+0x20>)
 8007a7c:	4605      	mov	r5, r0
 8007a7e:	4608      	mov	r0, r1
 8007a80:	4611      	mov	r1, r2
 8007a82:	2200      	movs	r2, #0
 8007a84:	6022      	str	r2, [r4, #0]
 8007a86:	461a      	mov	r2, r3
 8007a88:	f7f9 fbde 	bl	8001248 <_read>
 8007a8c:	1c43      	adds	r3, r0, #1
 8007a8e:	d102      	bne.n	8007a96 <_read_r+0x1e>
 8007a90:	6823      	ldr	r3, [r4, #0]
 8007a92:	b103      	cbz	r3, 8007a96 <_read_r+0x1e>
 8007a94:	602b      	str	r3, [r5, #0]
 8007a96:	bd38      	pop	{r3, r4, r5, pc}
 8007a98:	200007fc 	.word	0x200007fc

08007a9c <_init>:
 8007a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9e:	bf00      	nop
 8007aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aa2:	bc08      	pop	{r3}
 8007aa4:	469e      	mov	lr, r3
 8007aa6:	4770      	bx	lr

08007aa8 <_fini>:
 8007aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aaa:	bf00      	nop
 8007aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aae:	bc08      	pop	{r3}
 8007ab0:	469e      	mov	lr, r3
 8007ab2:	4770      	bx	lr
