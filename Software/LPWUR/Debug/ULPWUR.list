
ULPWUR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006544  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00078df0  08006704  08006704  00016704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807f4f4  0807f4f4  0009000c  2**0
                  CONTENTS
  4 .ARM          00000008  0807f4f4  0807f4f4  0008f4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807f4fc  0807f4fc  0009000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807f4fc  0807f4fc  0008f4fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0807f500  0807f500  0008f500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0807f504  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f8  2000000c  0807f510  0009000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000704  0807f510  00090704  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0009000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001632f  00000000  00000000  0009003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e48  00000000  00000000  000a636b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011e0  00000000  00000000  000a91b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001040  00000000  00000000  000aa398  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c004  00000000  00000000  000ab3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011e81  00000000  00000000  000d73dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010365d  00000000  00000000  000e925d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ec8ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004858  00000000  00000000  001ec938  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080066ec 	.word	0x080066ec

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	080066ec 	.word	0x080066ec

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b972 	b.w	80004fc <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	4688      	mov	r8, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14b      	bne.n	80002d6 <__udivmoddi4+0xa6>
 800023e:	428a      	cmp	r2, r1
 8000240:	4615      	mov	r5, r2
 8000242:	d967      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0720 	rsb	r7, r2, #32
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	fa20 f707 	lsr.w	r7, r0, r7
 8000256:	4095      	lsls	r5, r2
 8000258:	ea47 0803 	orr.w	r8, r7, r3
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbb8 f7fe 	udiv	r7, r8, lr
 8000268:	fa1f fc85 	uxth.w	ip, r5
 800026c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000270:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000274:	fb07 f10c 	mul.w	r1, r7, ip
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18eb      	adds	r3, r5, r3
 800027e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000282:	f080 811b 	bcs.w	80004bc <__udivmoddi4+0x28c>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8118 	bls.w	80004bc <__udivmoddi4+0x28c>
 800028c:	3f02      	subs	r7, #2
 800028e:	442b      	add	r3, r5
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0fe 	udiv	r0, r3, lr
 8000298:	fb0e 3310 	mls	r3, lr, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a4:	45a4      	cmp	ip, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	192c      	adds	r4, r5, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x290>
 80002b2:	45a4      	cmp	ip, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x290>
 80002b8:	3802      	subs	r0, #2
 80002ba:	442c      	add	r4, r5
 80002bc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c0:	eba4 040c 	sub.w	r4, r4, ip
 80002c4:	2700      	movs	r7, #0
 80002c6:	b11e      	cbz	r6, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c6 4300 	strd	r4, r3, [r6]
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xbe>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80eb 	beq.w	80004b6 <__udivmoddi4+0x286>
 80002e0:	2700      	movs	r7, #0
 80002e2:	e9c6 0100 	strd	r0, r1, [r6]
 80002e6:	4638      	mov	r0, r7
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f783 	clz	r7, r3
 80002f2:	2f00      	cmp	r7, #0
 80002f4:	d147      	bne.n	8000386 <__udivmoddi4+0x156>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd0>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80fa 	bhi.w	80004f4 <__udivmoddi4+0x2c4>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	4698      	mov	r8, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800030e:	e9c6 4800 	strd	r4, r8, [r6]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xe8>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 808f 	bne.w	8000440 <__udivmoddi4+0x210>
 8000322:	1b49      	subs	r1, r1, r5
 8000324:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000328:	fa1f f885 	uxth.w	r8, r5
 800032c:	2701      	movs	r7, #1
 800032e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fb0e 111c 	mls	r1, lr, ip, r1
 8000338:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800033c:	fb08 f10c 	mul.w	r1, r8, ip
 8000340:	4299      	cmp	r1, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x124>
 8000344:	18eb      	adds	r3, r5, r3
 8000346:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4299      	cmp	r1, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 8000352:	4684      	mov	ip, r0
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb1 f0fe 	udiv	r0, r1, lr
 800035c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000360:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000364:	fb08 f800 	mul.w	r8, r8, r0
 8000368:	45a0      	cmp	r8, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x14c>
 800036c:	192c      	adds	r4, r5, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x14a>
 8000374:	45a0      	cmp	r8, r4
 8000376:	f200 80b6 	bhi.w	80004e6 <__udivmoddi4+0x2b6>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 0408 	sub.w	r4, r4, r8
 8000380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000384:	e79f      	b.n	80002c6 <__udivmoddi4+0x96>
 8000386:	f1c7 0c20 	rsb	ip, r7, #32
 800038a:	40bb      	lsls	r3, r7
 800038c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000390:	ea4e 0e03 	orr.w	lr, lr, r3
 8000394:	fa01 f407 	lsl.w	r4, r1, r7
 8000398:	fa20 f50c 	lsr.w	r5, r0, ip
 800039c:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a4:	4325      	orrs	r5, r4
 80003a6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003aa:	0c2c      	lsrs	r4, r5, #16
 80003ac:	fb08 3319 	mls	r3, r8, r9, r3
 80003b0:	fa1f fa8e 	uxth.w	sl, lr
 80003b4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b8:	fb09 f40a 	mul.w	r4, r9, sl
 80003bc:	429c      	cmp	r4, r3
 80003be:	fa02 f207 	lsl.w	r2, r2, r7
 80003c2:	fa00 f107 	lsl.w	r1, r0, r7
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1e 0303 	adds.w	r3, lr, r3
 80003cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d0:	f080 8087 	bcs.w	80004e2 <__udivmoddi4+0x2b2>
 80003d4:	429c      	cmp	r4, r3
 80003d6:	f240 8084 	bls.w	80004e2 <__udivmoddi4+0x2b2>
 80003da:	f1a9 0902 	sub.w	r9, r9, #2
 80003de:	4473      	add	r3, lr
 80003e0:	1b1b      	subs	r3, r3, r4
 80003e2:	b2ad      	uxth	r5, r5
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1e 0404 	adds.w	r4, lr, r4
 80003fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000400:	d26b      	bcs.n	80004da <__udivmoddi4+0x2aa>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d969      	bls.n	80004da <__udivmoddi4+0x2aa>
 8000406:	3802      	subs	r0, #2
 8000408:	4474      	add	r4, lr
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c2      	mov	sl, r8
 800041a:	464b      	mov	r3, r9
 800041c:	d354      	bcc.n	80004c8 <__udivmoddi4+0x298>
 800041e:	d051      	beq.n	80004c4 <__udivmoddi4+0x294>
 8000420:	2e00      	cmp	r6, #0
 8000422:	d069      	beq.n	80004f8 <__udivmoddi4+0x2c8>
 8000424:	ebb1 050a 	subs.w	r5, r1, sl
 8000428:	eb64 0403 	sbc.w	r4, r4, r3
 800042c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000430:	40fd      	lsrs	r5, r7
 8000432:	40fc      	lsrs	r4, r7
 8000434:	ea4c 0505 	orr.w	r5, ip, r5
 8000438:	e9c6 5400 	strd	r5, r4, [r6]
 800043c:	2700      	movs	r7, #0
 800043e:	e747      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000440:	f1c2 0320 	rsb	r3, r2, #32
 8000444:	fa20 f703 	lsr.w	r7, r0, r3
 8000448:	4095      	lsls	r5, r2
 800044a:	fa01 f002 	lsl.w	r0, r1, r2
 800044e:	fa21 f303 	lsr.w	r3, r1, r3
 8000452:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000456:	4338      	orrs	r0, r7
 8000458:	0c01      	lsrs	r1, r0, #16
 800045a:	fbb3 f7fe 	udiv	r7, r3, lr
 800045e:	fa1f f885 	uxth.w	r8, r5
 8000462:	fb0e 3317 	mls	r3, lr, r7, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb07 f308 	mul.w	r3, r7, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	fa04 f402 	lsl.w	r4, r4, r2
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x256>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f107 3cff 	add.w	ip, r7, #4294967295
 800047c:	d22f      	bcs.n	80004de <__udivmoddi4+0x2ae>
 800047e:	428b      	cmp	r3, r1
 8000480:	d92d      	bls.n	80004de <__udivmoddi4+0x2ae>
 8000482:	3f02      	subs	r7, #2
 8000484:	4429      	add	r1, r5
 8000486:	1acb      	subs	r3, r1, r3
 8000488:	b281      	uxth	r1, r0
 800048a:	fbb3 f0fe 	udiv	r0, r3, lr
 800048e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000496:	fb00 f308 	mul.w	r3, r0, r8
 800049a:	428b      	cmp	r3, r1
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x27e>
 800049e:	1869      	adds	r1, r5, r1
 80004a0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a4:	d217      	bcs.n	80004d6 <__udivmoddi4+0x2a6>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d915      	bls.n	80004d6 <__udivmoddi4+0x2a6>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4429      	add	r1, r5
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b4:	e73b      	b.n	800032e <__udivmoddi4+0xfe>
 80004b6:	4637      	mov	r7, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e709      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004bc:	4607      	mov	r7, r0
 80004be:	e6e7      	b.n	8000290 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c4:	4541      	cmp	r1, r8
 80004c6:	d2ab      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004c8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004cc:	eb69 020e 	sbc.w	r2, r9, lr
 80004d0:	3801      	subs	r0, #1
 80004d2:	4613      	mov	r3, r2
 80004d4:	e7a4      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d6:	4660      	mov	r0, ip
 80004d8:	e7e9      	b.n	80004ae <__udivmoddi4+0x27e>
 80004da:	4618      	mov	r0, r3
 80004dc:	e795      	b.n	800040a <__udivmoddi4+0x1da>
 80004de:	4667      	mov	r7, ip
 80004e0:	e7d1      	b.n	8000486 <__udivmoddi4+0x256>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e77c      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	442c      	add	r4, r5
 80004ea:	e747      	b.n	800037c <__udivmoddi4+0x14c>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	442b      	add	r3, r5
 80004f2:	e72f      	b.n	8000354 <__udivmoddi4+0x124>
 80004f4:	4638      	mov	r0, r7
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xda>
 80004f8:	4637      	mov	r7, r6
 80004fa:	e6e9      	b.n	80002d0 <__udivmoddi4+0xa0>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <LCDWaitForReady>:

//-----------------------------------------------------------
//Host controller function 1---Wait for host data Bus Ready
//-----------------------------------------------------------
void LCDWaitForReady()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0

	//while(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET )

	uint8_t ulData = HAL_GPIO_ReadPin(EPD_HRDY_GPIO_Port, EPD_HRDY_Pin);
 8000506:	2120      	movs	r1, #32
 8000508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050c:	f001 fdde 	bl	80020cc <HAL_GPIO_ReadPin>
 8000510:	4603      	mov	r3, r0
 8000512:	71fb      	strb	r3, [r7, #7]
	while(ulData == 0)
 8000514:	e006      	b.n	8000524 <LCDWaitForReady+0x24>
	{
		ulData = HAL_GPIO_ReadPin(EPD_HRDY_GPIO_Port, EPD_HRDY_Pin);
 8000516:	2120      	movs	r1, #32
 8000518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800051c:	f001 fdd6 	bl	80020cc <HAL_GPIO_ReadPin>
 8000520:	4603      	mov	r3, r0
 8000522:	71fb      	strb	r3, [r7, #7]
	while(ulData == 0)
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f5      	beq.n	8000516 <LCDWaitForReady+0x16>
	}
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <LCDWriteCmdCode>:

//-----------------------------------------------------------
//Host controller function 2---Write command code to host data Bus
//-----------------------------------------------------------
void LCDWriteCmdCode(uint16_t usCmdCode)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	80fb      	strh	r3, [r7, #6]
	//uint16_t wPreamble = 0x6000;


	//uint8_t wPreamble[2] = {0x00, 0x60};
	//uint8_t wDat[2] = {usCmdCode, usCmdCode>>8};
	uint8_t dat[4]={0x00, 0x60, usCmdCode, usCmdCode>>8};
 800053e:	2300      	movs	r3, #0
 8000540:	733b      	strb	r3, [r7, #12]
 8000542:	2360      	movs	r3, #96	; 0x60
 8000544:	737b      	strb	r3, [r7, #13]
 8000546:	88fb      	ldrh	r3, [r7, #6]
 8000548:	b2db      	uxtb	r3, r3
 800054a:	73bb      	strb	r3, [r7, #14]
 800054c:	88fb      	ldrh	r3, [r7, #6]
 800054e:	0a1b      	lsrs	r3, r3, #8
 8000550:	b29b      	uxth	r3, r3
 8000552:	b2db      	uxtb	r3, r3
 8000554:	73fb      	strb	r3, [r7, #15]
	LCDWaitForReady();
 8000556:	f7ff ffd3 	bl	8000500 <LCDWaitForReady>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	2101      	movs	r1, #1
 800055e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000562:	f001 fdcb 	bl	80020fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, dat, 2, HAL_MAX_DELAY);
 8000566:	f107 010c 	add.w	r1, r7, #12
 800056a:	f04f 33ff 	mov.w	r3, #4294967295
 800056e:	2202      	movs	r2, #2
 8000570:	4806      	ldr	r0, [pc, #24]	; (800058c <LCDWriteCmdCode+0x58>)
 8000572:	f003 fc57 	bl	8003e24 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
	//LCDWaitForReady();
	//HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000576:	2201      	movs	r2, #1
 8000578:	2101      	movs	r1, #1
 800057a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057e:	f001 fdbd 	bl	80020fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &CmdMsb, 1, HAL_MAX_DELAY);
	HAL_SPI_Transmit(&hspi1, &CmdLsb, 1, HAL_MAX_DELAY);

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
*/
}
 8000582:	bf00      	nop
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000058 	.word	0x20000058

08000590 <LCDWriteData>:

//-----------------------------------------------------------
//Host controller function 3---Write Data to host data Bus
//-----------------------------------------------------------
void LCDWriteData(uint16_t usData)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	80fb      	strh	r3, [r7, #6]

	uint8_t dat[4]={ 0x00, 0x00, (uint8_t)usData,(uint8_t)( usData>>8)};
 800059a:	2300      	movs	r3, #0
 800059c:	733b      	strb	r3, [r7, #12]
 800059e:	2300      	movs	r3, #0
 80005a0:	737b      	strb	r3, [r7, #13]
 80005a2:	88fb      	ldrh	r3, [r7, #6]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	73bb      	strb	r3, [r7, #14]
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	0a1b      	lsrs	r3, r3, #8
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	73fb      	strb	r3, [r7, #15]
	//uint8_t wPreamble[2] = {0x00, 0x00};
	//uint8_t wDat[2] = { (uint8_t)usData,(uint8_t)( usData>>8)};
	LCDWaitForReady();
 80005b2:	f7ff ffa5 	bl	8000500 <LCDWaitForReady>

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2101      	movs	r1, #1
 80005ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005be:	f001 fd9d 	bl	80020fc <HAL_GPIO_WritePin>
	//HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
	HAL_SPI_Transmit(&hspi1, dat, 2, HAL_MAX_DELAY);
 80005c2:	f107 010c 	add.w	r1, r7, #12
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	2202      	movs	r2, #2
 80005cc:	4806      	ldr	r0, [pc, #24]	; (80005e8 <LCDWriteData+0x58>)
 80005ce:	f003 fc29 	bl	8003e24 <HAL_SPI_Transmit>
	//LCDWaitForReady();
	//HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2101      	movs	r1, #1
 80005d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005da:	f001 fd8f 	bl	80020fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &DatLsb, 1, HAL_MAX_DELAY);

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000058 	.word	0x20000058

080005ec <LCDWriteNData>:

void LCDWriteNData(uint16_t* pwBuf, uint32_t ulSizeWordCnt)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
	//uint32_t i;

	//uint8_t dma = 1;
	uint8_t wPreamble[2] = {0x00, 0x00};
 80005f6:	2300      	movs	r3, #0
 80005f8:	723b      	strb	r3, [r7, #8]
 80005fa:	2300      	movs	r3, #0
 80005fc:	727b      	strb	r3, [r7, #9]
	//uint8_t wDat[2];
	LCDWaitForReady();
 80005fe:	f7ff ff7f 	bl	8000500 <LCDWaitForReady>
	uint8_t* Buf = (uint8_t*)pwBuf;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2101      	movs	r1, #1
 800060a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060e:	f001 fd75 	bl	80020fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 8000612:	f107 0108 	add.w	r1, r7, #8
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	2201      	movs	r2, #1
 800061c:	480a      	ldr	r0, [pc, #40]	; (8000648 <LCDWriteNData+0x5c>)
 800061e:	f003 fc01 	bl	8003e24 <HAL_SPI_Transmit>
	LCDWaitForReady();
 8000622:	f7ff ff6d 	bl	8000500 <LCDWaitForReady>
	//HAL_SPI_Transmit_DMA(&hspi1, Buf, ulSizeWordCnt);
	HAL_SPI_Transmit(&hspi1, Buf, ulSizeWordCnt, HAL_MAX_DELAY);
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	683a      	ldr	r2, [r7, #0]
 800062c:	68f9      	ldr	r1, [r7, #12]
 800062e:	4806      	ldr	r0, [pc, #24]	; (8000648 <LCDWriteNData+0x5c>)
 8000630:	f003 fbf8 	bl	8003e24 <HAL_SPI_Transmit>
//		wDat[1]=pwBuf[i]>>8;
//		HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
//		}
//	while(dma == 1)
//	{}
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000634:	2201      	movs	r2, #1
 8000636:	2101      	movs	r1, #1
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f001 fd5e 	bl	80020fc <HAL_GPIO_WritePin>
	}

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000058 	.word	0x20000058

0800064c <LCDReadData>:

//-----------------------------------------------------------
//Host controller function 4---Read Data from host data Bus
//-----------------------------------------------------------
uint16_t LCDReadData()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af02      	add	r7, sp, #8

	uint8_t wRLsb[2];
	uint16_t wRData;
	uint8_t wdummy[2] = {0};
 8000652:	2300      	movs	r3, #0
 8000654:	813b      	strh	r3, [r7, #8]
	uint8_t rdummy[2] = {0};
 8000656:	2300      	movs	r3, #0
 8000658:	80bb      	strh	r3, [r7, #4]
	uint8_t wPreamble[2] = {0x00, 0x10};
 800065a:	2300      	movs	r3, #0
 800065c:	703b      	strb	r3, [r7, #0]
 800065e:	2310      	movs	r3, #16
 8000660:	707b      	strb	r3, [r7, #1]

	LCDWaitForReady();
 8000662:	f7ff ff4d 	bl	8000500 <LCDWaitForReady>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2101      	movs	r1, #1
 800066a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066e:	f001 fd45 	bl	80020fc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 8000672:	4639      	mov	r1, r7
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	2201      	movs	r2, #1
 800067a:	4818      	ldr	r0, [pc, #96]	; (80006dc <LCDReadData+0x90>)
 800067c:	f003 fbd2 	bl	8003e24 <HAL_SPI_Transmit>
	LCDWaitForReady();
 8000680:	f7ff ff3e 	bl	8000500 <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, rdummy, 1,HAL_MAX_DELAY);
 8000684:	1d3a      	adds	r2, r7, #4
 8000686:	f107 0108 	add.w	r1, r7, #8
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	2301      	movs	r3, #1
 8000692:	4812      	ldr	r0, [pc, #72]	; (80006dc <LCDReadData+0x90>)
 8000694:	f003 fd1b 	bl	80040ce <HAL_SPI_TransmitReceive>

	LCDWaitForReady();
 8000698:	f7ff ff32 	bl	8000500 <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, wRLsb, 1,HAL_MAX_DELAY);
 800069c:	f107 020c 	add.w	r2, r7, #12
 80006a0:	f107 0108 	add.w	r1, r7, #8
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	2301      	movs	r3, #1
 80006ac:	480b      	ldr	r0, [pc, #44]	; (80006dc <LCDReadData+0x90>)
 80006ae:	f003 fd0e 	bl	80040ce <HAL_SPI_TransmitReceive>

	wRData = wRLsb[1]<<8;
 80006b2:	7b7b      	ldrb	r3, [r7, #13]
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	021b      	lsls	r3, r3, #8
 80006b8:	81fb      	strh	r3, [r7, #14]
	wRData |= wRLsb[0];
 80006ba:	7b3b      	ldrb	r3, [r7, #12]
 80006bc:	b29a      	uxth	r2, r3
 80006be:	89fb      	ldrh	r3, [r7, #14]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	81fb      	strh	r3, [r7, #14]
	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2101      	movs	r1, #1
 80006c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006cc:	f001 fd16 	bl	80020fc <HAL_GPIO_WritePin>

	return wRData;
 80006d0:	89fb      	ldrh	r3, [r7, #14]
	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);

	return wRData;
	*/
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000058 	.word	0x20000058

080006e0 <LCDReadNData>:

//-----------------------------------------------------------
//  Read Burst N words Data
//-----------------------------------------------------------
void LCDReadNData(uint16_t* pwBuf, uint32_t ulSizeWordCnt)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af02      	add	r7, sp, #8
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]

	uint32_t i;

	uint8_t wRLsb[2];
	//uint16_t wRData;
	uint8_t wdummy[2] = {0};
 80006ea:	2300      	movs	r3, #0
 80006ec:	82bb      	strh	r3, [r7, #20]
	uint8_t rdummy[2] = {0};
 80006ee:	2300      	movs	r3, #0
 80006f0:	823b      	strh	r3, [r7, #16]
	uint8_t wPreamble[2] = {0x00, 0x10};
 80006f2:	2300      	movs	r3, #0
 80006f4:	733b      	strb	r3, [r7, #12]
 80006f6:	2310      	movs	r3, #16
 80006f8:	737b      	strb	r3, [r7, #13]
	LCDWaitForReady();
 80006fa:	f7ff ff01 	bl	8000500 <LCDWaitForReady>

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2101      	movs	r1, #1
 8000702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000706:	f001 fcf9 	bl	80020fc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 800070a:	f107 010c 	add.w	r1, r7, #12
 800070e:	f04f 33ff 	mov.w	r3, #4294967295
 8000712:	2201      	movs	r2, #1
 8000714:	4823      	ldr	r0, [pc, #140]	; (80007a4 <LCDReadNData+0xc4>)
 8000716:	f003 fb85 	bl	8003e24 <HAL_SPI_Transmit>

	LCDWaitForReady();
 800071a:	f7ff fef1 	bl	8000500 <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, rdummy, 1,HAL_MAX_DELAY);
 800071e:	f107 0210 	add.w	r2, r7, #16
 8000722:	f107 0114 	add.w	r1, r7, #20
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2301      	movs	r3, #1
 800072e:	481d      	ldr	r0, [pc, #116]	; (80007a4 <LCDReadNData+0xc4>)
 8000730:	f003 fccd 	bl	80040ce <HAL_SPI_TransmitReceive>

	LCDWaitForReady();
 8000734:	f7ff fee4 	bl	8000500 <LCDWaitForReady>

		for(i=0;i<ulSizeWordCnt;i++)
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
 800073c:	e024      	b.n	8000788 <LCDReadNData+0xa8>
		{
			HAL_SPI_TransmitReceive(&hspi1, wdummy, wRLsb, 1,HAL_MAX_DELAY);
 800073e:	f107 0218 	add.w	r2, r7, #24
 8000742:	f107 0114 	add.w	r1, r7, #20
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
 800074a:	9300      	str	r3, [sp, #0]
 800074c:	2301      	movs	r3, #1
 800074e:	4815      	ldr	r0, [pc, #84]	; (80007a4 <LCDReadNData+0xc4>)
 8000750:	f003 fcbd 	bl	80040ce <HAL_SPI_TransmitReceive>
			pwBuf[i] = wRLsb[1]<<8;
 8000754:	7e7b      	ldrb	r3, [r7, #25]
 8000756:	b29a      	uxth	r2, r3
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	6879      	ldr	r1, [r7, #4]
 800075e:	440b      	add	r3, r1
 8000760:	0212      	lsls	r2, r2, #8
 8000762:	b292      	uxth	r2, r2
 8000764:	801a      	strh	r2, [r3, #0]
			pwBuf[i] |= wRLsb[0];
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	4413      	add	r3, r2
 800076e:	8819      	ldrh	r1, [r3, #0]
 8000770:	7e3b      	ldrb	r3, [r7, #24]
 8000772:	b29a      	uxth	r2, r3
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	4403      	add	r3, r0
 800077c:	430a      	orrs	r2, r1
 800077e:	b292      	uxth	r2, r2
 8000780:	801a      	strh	r2, [r3, #0]
		for(i=0;i<ulSizeWordCnt;i++)
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3301      	adds	r3, #1
 8000786:	61fb      	str	r3, [r7, #28]
 8000788:	69fa      	ldr	r2, [r7, #28]
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	429a      	cmp	r2, r3
 800078e:	d3d6      	bcc.n	800073e <LCDReadNData+0x5e>
		}

		HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000790:	2201      	movs	r2, #1
 8000792:	2101      	movs	r1, #1
 8000794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000798:	f001 fcb0 	bl	80020fc <HAL_GPIO_WritePin>
	}

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000058 	.word	0x20000058

080007a8 <LCDSendCmdArg>:

//-----------------------------------------------------------
//Host controller function 5---Write command to host data Bus with aruments
//-----------------------------------------------------------
void LCDSendCmdArg(uint16_t usCmdCode,uint16_t* pArg, uint16_t usNumArg)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	6039      	str	r1, [r7, #0]
 80007b2:	80fb      	strh	r3, [r7, #6]
 80007b4:	4613      	mov	r3, r2
 80007b6:	80bb      	strh	r3, [r7, #4]
     uint16_t i;
     //Send Cmd code
     LCDWriteCmdCode(usCmdCode);
 80007b8:	88fb      	ldrh	r3, [r7, #6]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff feba 	bl	8000534 <LCDWriteCmdCode>
     //Send Data
     for(i=0;i<usNumArg;i++)
 80007c0:	2300      	movs	r3, #0
 80007c2:	81fb      	strh	r3, [r7, #14]
 80007c4:	e00a      	b.n	80007dc <LCDSendCmdArg+0x34>
     {
         LCDWriteData(pArg[i]);
 80007c6:	89fb      	ldrh	r3, [r7, #14]
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	683a      	ldr	r2, [r7, #0]
 80007cc:	4413      	add	r3, r2
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff fedd 	bl	8000590 <LCDWriteData>
     for(i=0;i<usNumArg;i++)
 80007d6:	89fb      	ldrh	r3, [r7, #14]
 80007d8:	3301      	adds	r3, #1
 80007da:	81fb      	strh	r3, [r7, #14]
 80007dc:	89fa      	ldrh	r2, [r7, #14]
 80007de:	88bb      	ldrh	r3, [r7, #4]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d3f0      	bcc.n	80007c6 <LCDSendCmdArg+0x1e>
     }
}
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <IT8951ReadReg>:

//-----------------------------------------------------------
//Host Cmd 4---REG_RD
//-----------------------------------------------------------
uint16_t IT8951ReadReg(uint16_t usRegAddr)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	80fb      	strh	r3, [r7, #6]
	uint16_t usData;

	//Send Cmd and Register Address
	LCDWriteCmdCode(IT8951_TCON_REG_RD);
 80007f6:	2010      	movs	r0, #16
 80007f8:	f7ff fe9c 	bl	8000534 <LCDWriteCmdCode>
	LCDWriteData(usRegAddr);
 80007fc:	88fb      	ldrh	r3, [r7, #6]
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fec6 	bl	8000590 <LCDWriteData>
	//Read data from Host Data bus
	usData = LCDReadData();
 8000804:	f7ff ff22 	bl	800064c <LCDReadData>
 8000808:	4603      	mov	r3, r0
 800080a:	81fb      	strh	r3, [r7, #14]
	return usData;
 800080c:	89fb      	ldrh	r3, [r7, #14]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <IT8951WriteReg>:
//-----------------------------------------------------------
//Host Cmd 5---REG_WR
//-----------------------------------------------------------
void IT8951WriteReg(uint16_t usRegAddr,uint16_t usValue)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	4603      	mov	r3, r0
 800081e:	460a      	mov	r2, r1
 8000820:	80fb      	strh	r3, [r7, #6]
 8000822:	4613      	mov	r3, r2
 8000824:	80bb      	strh	r3, [r7, #4]
	//Send Cmd , Register Address and Write Value
	LCDWriteCmdCode(IT8951_TCON_REG_WR);
 8000826:	2011      	movs	r0, #17
 8000828:	f7ff fe84 	bl	8000534 <LCDWriteCmdCode>
	LCDWriteData(usRegAddr);
 800082c:	88fb      	ldrh	r3, [r7, #6]
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff feae 	bl	8000590 <LCDWriteData>
	LCDWriteData(usValue);
 8000834:	88bb      	ldrh	r3, [r7, #4]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff feaa 	bl	8000590 <LCDWriteData>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <IT8951LoadImgAreaStart>:
}
//-----------------------------------------------------------
//Host Cmd 11---LD_IMG_AREA
//-----------------------------------------------------------
void IT8951LoadImgAreaStart(IT8951LdImgInfo* pstLdImgInfo ,IT8951AreaImgInfo* pstAreaImgInfo)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
    uint16_t usArg[5];
    //Setting Argument for Load image start
    usArg[0] = (pstLdImgInfo->usEndianType << 8 )
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	021b      	lsls	r3, r3, #8
    |(pstLdImgInfo->usPixelFormat << 4)
 8000854:	b21a      	sxth	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	885b      	ldrh	r3, [r3, #2]
 800085a:	011b      	lsls	r3, r3, #4
 800085c:	b21b      	sxth	r3, r3
 800085e:	4313      	orrs	r3, r2
 8000860:	b21a      	sxth	r2, r3
    |(pstLdImgInfo->usRotate);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	889b      	ldrh	r3, [r3, #4]
 8000866:	b21b      	sxth	r3, r3
 8000868:	4313      	orrs	r3, r2
 800086a:	b21b      	sxth	r3, r3
 800086c:	b29b      	uxth	r3, r3
    usArg[0] = (pstLdImgInfo->usEndianType << 8 )
 800086e:	81bb      	strh	r3, [r7, #12]
    usArg[1] = pstAreaImgInfo->usX;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	81fb      	strh	r3, [r7, #14]
    usArg[2] = pstAreaImgInfo->usY;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	885b      	ldrh	r3, [r3, #2]
 800087a:	823b      	strh	r3, [r7, #16]
    usArg[3] = pstAreaImgInfo->usWidth;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	889b      	ldrh	r3, [r3, #4]
 8000880:	827b      	strh	r3, [r7, #18]
    usArg[4] = pstAreaImgInfo->usHeight;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	88db      	ldrh	r3, [r3, #6]
 8000886:	82bb      	strh	r3, [r7, #20]
    //Send Cmd and Args
    LCDSendCmdArg(IT8951_TCON_LD_IMG_AREA , usArg , 5);
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	2205      	movs	r2, #5
 800088e:	4619      	mov	r1, r3
 8000890:	2021      	movs	r0, #33	; 0x21
 8000892:	f7ff ff89 	bl	80007a8 <LCDSendCmdArg>
}
 8000896:	bf00      	nop
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <IT8951LoadImgEnd>:
//-----------------------------------------------------------
//Host Cmd 12---LD_IMG_END
//-----------------------------------------------------------
void IT8951LoadImgEnd(void)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	af00      	add	r7, sp, #0
    LCDWriteCmdCode(IT8951_TCON_LD_IMG_END);
 80008a2:	2022      	movs	r0, #34	; 0x22
 80008a4:	f7ff fe46 	bl	8000534 <LCDWriteCmdCode>
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}

080008ac <GetIT8951SystemInfo>:

void GetIT8951SystemInfo(void* pBuf)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	uint16_t* pusWord = (uint16_t*)pBuf;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	60fb      	str	r3, [r7, #12]
	//IT8951DevInfo* pstDevInfo;

	//Send I80 CMD
	LCDWriteCmdCode(USDEF_I80_CMD_GET_DEV_INFO);
 80008b8:	f240 3002 	movw	r0, #770	; 0x302
 80008bc:	f7ff fe3a 	bl	8000534 <LCDWriteCmdCode>

	//Burst Read Request for SPI interface only
	LCDReadNData(pusWord, sizeof(IT8951DevInfo)/2);//Polling HRDY for each words(2-bytes) if possible
 80008c0:	2114      	movs	r1, #20
 80008c2:	68f8      	ldr	r0, [r7, #12]
 80008c4:	f7ff ff0c 	bl	80006e0 <LCDReadNData>
//	printf("Image Buffer Address = %X\r\n",
//	pstDevInfo->usImgBufAddrL | (pstDevInfo->usImgBufAddrH << 16));
	//Show Firmware and LUT Version
//	printf("FW Version = %s\r\n", (uint8_t*)pstDevInfo->usFWVersion);
//	printf("LUT Version = %s\r\n", (uint8_t*)pstDevInfo->usLUTVersion);
}
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <IT8951SetImgBufBaseAddr>:

//-----------------------------------------------------------
//Initial function 2---Set Image buffer base address
//-----------------------------------------------------------
void IT8951SetImgBufBaseAddr(uint32_t ulImgBufAddr)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	uint16_t usWordH = (uint16_t)((ulImgBufAddr >> 16) & 0x0000FFFF);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	0c1b      	lsrs	r3, r3, #16
 80008dc:	81fb      	strh	r3, [r7, #14]
	uint16_t usWordL = (uint16_t)( ulImgBufAddr & 0x0000FFFF);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	81bb      	strh	r3, [r7, #12]
	//Write LISAR Reg
	IT8951WriteReg(LISAR + 2 ,usWordH);
 80008e2:	89fb      	ldrh	r3, [r7, #14]
 80008e4:	4619      	mov	r1, r3
 80008e6:	f240 200a 	movw	r0, #522	; 0x20a
 80008ea:	f7ff ff94 	bl	8000816 <IT8951WriteReg>
	IT8951WriteReg(LISAR ,usWordL);
 80008ee:	89bb      	ldrh	r3, [r7, #12]
 80008f0:	4619      	mov	r1, r3
 80008f2:	f44f 7002 	mov.w	r0, #520	; 0x208
 80008f6:	f7ff ff8e 	bl	8000816 <IT8951WriteReg>
}
 80008fa:	bf00      	nop
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <IT8951WaitForDisplayReady>:
//-----------------------------------------------------------
//Display function 1---Wait for LUT Engine Finish
//                     Polling Display Engine Ready by LUTNo
//-----------------------------------------------------------
void IT8951WaitForDisplayReady()
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
	//Check IT8951 Register LUTAFSR => NonZero Busy, 0 - Free
	while(IT8951ReadReg(LUTAFSR));
 8000906:	bf00      	nop
 8000908:	f241 2024 	movw	r0, #4644	; 0x1224
 800090c:	f7ff ff6e 	bl	80007ec <IT8951ReadReg>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d1f8      	bne.n	8000908 <IT8951WaitForDisplayReady+0x6>
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}

0800091a <IT8951HostAreaPackedPixelWrite>:

//-----------------------------------------------------------
//Display function 2---Load Image Area process
//-----------------------------------------------------------
void IT8951HostAreaPackedPixelWrite(IT8951LdImgInfo* pstLdImgInfo,IT8951AreaImgInfo* pstAreaImgInfo)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b084      	sub	sp, #16
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
 8000922:	6039      	str	r1, [r7, #0]
	//uint32_t i,j;
	//Source buffer address of Host
	uint16_t* pusFrameBuf = (uint16_t*)pstLdImgInfo->ulStartFBAddr;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	60fb      	str	r3, [r7, #12]

	//Set Image buffer(IT8951) Base address
	IT8951SetImgBufBaseAddr(pstLdImgInfo->ulImgBufBaseAddr);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ffce 	bl	80008d0 <IT8951SetImgBufBaseAddr>
	//Send Load Image start Cmd
	IT8951LoadImgAreaStart(pstLdImgInfo , pstAreaImgInfo);
 8000934:	6839      	ldr	r1, [r7, #0]
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f7ff ff84 	bl	8000844 <IT8951LoadImgAreaStart>
	//Host Write Data
	//LCDWriteNData(pusFrameBuf, (pstAreaImgInfo->usHeight*pstAreaImgInfo->usWidth/2));
	LCDWriteNData(pusFrameBuf, (pstAreaImgInfo->usHeight*pstAreaImgInfo->usWidth/4));
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	88db      	ldrh	r3, [r3, #6]
 8000940:	461a      	mov	r2, r3
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	889b      	ldrh	r3, [r3, #4]
 8000946:	fb03 f302 	mul.w	r3, r3, r2
 800094a:	2b00      	cmp	r3, #0
 800094c:	da00      	bge.n	8000950 <IT8951HostAreaPackedPixelWrite+0x36>
 800094e:	3303      	adds	r3, #3
 8000950:	109b      	asrs	r3, r3, #2
 8000952:	4619      	mov	r1, r3
 8000954:	68f8      	ldr	r0, [r7, #12]
 8000956:	f7ff fe49 	bl	80005ec <LCDWriteNData>
					LCDWriteData(*pusFrameBuf);
					pusFrameBuf++;
			}
	}*/
	//Send Load Img End Command
	IT8951LoadImgEnd();
 800095a:	f7ff ffa0 	bl	800089e <IT8951LoadImgEnd>
}
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <IT8951DisplayArea>:

//-----------------------------------------------------------
//Display functions 3---Application for Display panel Area
//-----------------------------------------------------------
void IT8951DisplayArea(uint16_t usX, uint16_t usY, uint16_t usW, uint16_t usH, uint16_t usDpyMode)
{
 8000966:	b590      	push	{r4, r7, lr}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	4604      	mov	r4, r0
 800096e:	4608      	mov	r0, r1
 8000970:	4611      	mov	r1, r2
 8000972:	461a      	mov	r2, r3
 8000974:	4623      	mov	r3, r4
 8000976:	80fb      	strh	r3, [r7, #6]
 8000978:	4603      	mov	r3, r0
 800097a:	80bb      	strh	r3, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	807b      	strh	r3, [r7, #2]
 8000980:	4613      	mov	r3, r2
 8000982:	803b      	strh	r3, [r7, #0]
	//Send I80 Display Command (User defined command of IT8951)
	LCDWriteCmdCode(USDEF_I80_CMD_DPY_AREA); //0x0034
 8000984:	2034      	movs	r0, #52	; 0x34
 8000986:	f7ff fdd5 	bl	8000534 <LCDWriteCmdCode>
	//Write arguments
	LCDWriteData(usX);
 800098a:	88fb      	ldrh	r3, [r7, #6]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fdff 	bl	8000590 <LCDWriteData>
	LCDWriteData(usY);
 8000992:	88bb      	ldrh	r3, [r7, #4]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fdfb 	bl	8000590 <LCDWriteData>
	LCDWriteData(usW);
 800099a:	887b      	ldrh	r3, [r7, #2]
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fdf7 	bl	8000590 <LCDWriteData>
	LCDWriteData(usH);
 80009a2:	883b      	ldrh	r3, [r7, #0]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fdf3 	bl	8000590 <LCDWriteData>
	LCDWriteData(usDpyMode);
 80009aa:	8b3b      	ldrh	r3, [r7, #24]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fdef 	bl	8000590 <LCDWriteData>
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd90      	pop	{r4, r7, pc}
	...

080009bc <IT8951_Init>:

//-----------------------------------------------------------
//Test function 1---Software Initial
//-----------------------------------------------------------
uint8_t IT8951_Init()
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	//bcm2835_gpio_fsel(CS, BCM2835_GPIO_FSEL_OUTP);
	//bcm2835_gpio_fsel(HRDY, BCM2835_GPIO_FSEL_INPT);
	//bcm2835_gpio_fsel(RESET, BCM2835_GPIO_FSEL_OUTP);

	//bcm2835_gpio_write(CS, HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2101      	movs	r1, #1
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c8:	f001 fb98 	bl	80020fc <HAL_GPIO_WritePin>

	//printf("****** IT8951 ******\n");

	//bcm2835_gpio_write(RESET, LOW);
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2110      	movs	r1, #16
 80009d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d4:	f001 fb92 	bl	80020fc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009d8:	2001      	movs	r0, #1
 80009da:	f000 fe99 	bl	8001710 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	2110      	movs	r1, #16
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f001 fb89 	bl	80020fc <HAL_GPIO_WritePin>
	//bcm2835_gpio_write(RESET, HIGH);

	//Get Device Info
	GetIT8951SystemInfo(&gstI80DevInfo);
 80009ea:	480a      	ldr	r0, [pc, #40]	; (8000a14 <IT8951_Init+0x58>)
 80009ec:	f7ff ff5e 	bl	80008ac <GetIT8951SystemInfo>
//	{
//		perror("malloc error!\n");
//		return 1;
//	}

 	gulImgBufAddr = gstI80DevInfo.usImgBufAddrL | (gstI80DevInfo.usImgBufAddrH << 16);
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <IT8951_Init+0x58>)
 80009f2:	889b      	ldrh	r3, [r3, #4]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <IT8951_Init+0x58>)
 80009f8:	88db      	ldrh	r3, [r3, #6]
 80009fa:	041b      	lsls	r3, r3, #16
 80009fc:	4313      	orrs	r3, r2
 80009fe:	461a      	mov	r2, r3
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <IT8951_Init+0x5c>)
 8000a02:	601a      	str	r2, [r3, #0]

 	//Set to Enable I80 Packed mode
 	IT8951WriteReg(I80CPCR, 0x0001);
 8000a04:	2101      	movs	r1, #1
 8000a06:	2004      	movs	r0, #4
 8000a08:	f7ff ff05 	bl	8000816 <IT8951WriteReg>
 	//EpdDriverLoadTemplate();
	return 0;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000002c 	.word	0x2000002c
 8000a18:	20000054 	.word	0x20000054

08000a1c <EpdDriverLoadTemplate>:



extern const unsigned char Kalender[];
void EpdDriverLoadTemplate()
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b089      	sub	sp, #36	; 0x24
 8000a20:	af02      	add	r7, sp, #8
	IT8951LdImgInfo stLdImgInfo;
	IT8951AreaImgInfo stAreaImgInfo;
	IT8951WaitForDisplayReady();
 8000a22:	f7ff ff6e 	bl	8000902 <IT8951WaitForDisplayReady>

	//Setting Load image information
	stLdImgInfo.ulStartFBAddr    = (uint32_t)Kalender;
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <EpdDriverLoadTemplate+0x6c>)
 8000a28:	613b      	str	r3, [r7, #16]
	stLdImgInfo.usEndianType     = IT8951_LDIMG_L_ENDIAN;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	813b      	strh	r3, [r7, #8]
	stLdImgInfo.usPixelFormat    = IT8951_4BPP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	817b      	strh	r3, [r7, #10]
	stLdImgInfo.usRotate         = IT8951_ROTATE_0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	81bb      	strh	r3, [r7, #12]
	stLdImgInfo.ulImgBufBaseAddr = gulImgBufAddr;
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <EpdDriverLoadTemplate+0x70>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	617b      	str	r3, [r7, #20]
	//Set Load Area
	stAreaImgInfo.usX      = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	803b      	strh	r3, [r7, #0]
	stAreaImgInfo.usY      = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	807b      	strh	r3, [r7, #2]
	stAreaImgInfo.usWidth  = gstI80DevInfo.usPanelW;
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <EpdDriverLoadTemplate+0x74>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	80bb      	strh	r3, [r7, #4]
 	stAreaImgInfo.usHeight = gstI80DevInfo.usPanelH;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <EpdDriverLoadTemplate+0x74>)
 8000a4c:	885b      	ldrh	r3, [r3, #2]
 8000a4e:	80fb      	strh	r3, [r7, #6]

	//Load Image from Host to IT8951 Image Buffer
	IT8951HostAreaPackedPixelWrite(&stLdImgInfo, &stAreaImgInfo);//Display function 2
 8000a50:	463a      	mov	r2, r7
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	4611      	mov	r1, r2
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff ff5e 	bl	800091a <IT8951HostAreaPackedPixelWrite>
	//Display Area ?V (x,y,w,h) with mode 2 for fast gray clear mode - depends on current waveform
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a64:	480b      	ldr	r0, [pc, #44]	; (8000a94 <EpdDriverLoadTemplate+0x78>)
 8000a66:	f001 fb49 	bl	80020fc <HAL_GPIO_WritePin>
	IT8951DisplayArea(stAreaImgInfo.usX ,stAreaImgInfo.usY, gstI80DevInfo.usPanelW, gstI80DevInfo.usPanelH, 2);
 8000a6a:	8838      	ldrh	r0, [r7, #0]
 8000a6c:	8879      	ldrh	r1, [r7, #2]
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <EpdDriverLoadTemplate+0x74>)
 8000a70:	881a      	ldrh	r2, [r3, #0]
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <EpdDriverLoadTemplate+0x74>)
 8000a74:	885c      	ldrh	r4, [r3, #2]
 8000a76:	2302      	movs	r3, #2
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	4623      	mov	r3, r4
 8000a7c:	f7ff ff73 	bl	8000966 <IT8951DisplayArea>
	//IT8951Sleep();
}
 8000a80:	bf00      	nop
 8000a82:	371c      	adds	r7, #28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd90      	pop	{r4, r7, pc}
 8000a88:	08006714 	.word	0x08006714
 8000a8c:	20000054 	.word	0x20000054
 8000a90:	2000002c 	.word	0x2000002c
 8000a94:	48000400 	.word	0x48000400

08000a98 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_DMA_Init+0x70>)
 8000aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aa2:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <MX_DMA_Init+0x70>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	6493      	str	r3, [r2, #72]	; 0x48
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_DMA_Init+0x70>)
 8000aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_DMA_Init+0x70>)
 8000ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aba:	4a13      	ldr	r2, [pc, #76]	; (8000b08 <MX_DMA_Init+0x70>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6493      	str	r3, [r2, #72]	; 0x48
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_DMA_Init+0x70>)
 8000ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	200b      	movs	r0, #11
 8000ad4:	f000 ff19 	bl	800190a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ad8:	200b      	movs	r0, #11
 8000ada:	f000 ff32 	bl	8001942 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	200c      	movs	r0, #12
 8000ae4:	f000 ff11 	bl	800190a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ae8:	200c      	movs	r0, #12
 8000aea:	f000 ff2a 	bl	8001942 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	200d      	movs	r0, #13
 8000af4:	f000 ff09 	bl	800190a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000af8:	200d      	movs	r0, #13
 8000afa:	f000 ff22 	bl	8001942 <HAL_NVIC_EnableIRQ>

}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40021000 	.word	0x40021000

08000b0c <MX_GPIO_Init>:
        * the Code Generation settings)
     PD8   ------> USART3_TX
     PD9   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	; 0x38
 8000b10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b22:	4ba1      	ldr	r3, [pc, #644]	; (8000da8 <MX_GPIO_Init+0x29c>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	4aa0      	ldr	r2, [pc, #640]	; (8000da8 <MX_GPIO_Init+0x29c>)
 8000b28:	f043 0310 	orr.w	r3, r3, #16
 8000b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2e:	4b9e      	ldr	r3, [pc, #632]	; (8000da8 <MX_GPIO_Init+0x29c>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	f003 0310 	and.w	r3, r3, #16
 8000b36:	623b      	str	r3, [r7, #32]
 8000b38:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3a:	4b9b      	ldr	r3, [pc, #620]	; (8000da8 <MX_GPIO_Init+0x29c>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	4a9a      	ldr	r2, [pc, #616]	; (8000da8 <MX_GPIO_Init+0x29c>)
 8000b40:	f043 0304 	orr.w	r3, r3, #4
 8000b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b46:	4b98      	ldr	r3, [pc, #608]	; (8000da8 <MX_GPIO_Init+0x29c>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	f003 0304 	and.w	r3, r3, #4
 8000b4e:	61fb      	str	r3, [r7, #28]
 8000b50:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b52:	4b95      	ldr	r3, [pc, #596]	; (8000da8 <MX_GPIO_Init+0x29c>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	4a94      	ldr	r2, [pc, #592]	; (8000da8 <MX_GPIO_Init+0x29c>)
 8000b58:	f043 0320 	orr.w	r3, r3, #32
 8000b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5e:	4b92      	ldr	r3, [pc, #584]	; (8000da8 <MX_GPIO_Init+0x29c>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	f003 0320 	and.w	r3, r3, #32
 8000b66:	61bb      	str	r3, [r7, #24]
 8000b68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6a:	4b8f      	ldr	r3, [pc, #572]	; (8000da8 <MX_GPIO_Init+0x29c>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	4a8e      	ldr	r2, [pc, #568]	; (8000da8 <MX_GPIO_Init+0x29c>)
 8000b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b76:	4b8c      	ldr	r3, [pc, #560]	; (8000da8 <MX_GPIO_Init+0x29c>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	4b89      	ldr	r3, [pc, #548]	; (8000da8 <MX_GPIO_Init+0x29c>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	4a88      	ldr	r2, [pc, #544]	; (8000da8 <MX_GPIO_Init+0x29c>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8e:	4b86      	ldr	r3, [pc, #536]	; (8000da8 <MX_GPIO_Init+0x29c>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b83      	ldr	r3, [pc, #524]	; (8000da8 <MX_GPIO_Init+0x29c>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	4a82      	ldr	r2, [pc, #520]	; (8000da8 <MX_GPIO_Init+0x29c>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba6:	4b80      	ldr	r3, [pc, #512]	; (8000da8 <MX_GPIO_Init+0x29c>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb2:	4b7d      	ldr	r3, [pc, #500]	; (8000da8 <MX_GPIO_Init+0x29c>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	4a7c      	ldr	r2, [pc, #496]	; (8000da8 <MX_GPIO_Init+0x29c>)
 8000bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bbe:	4b7a      	ldr	r3, [pc, #488]	; (8000da8 <MX_GPIO_Init+0x29c>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bca:	4b77      	ldr	r3, [pc, #476]	; (8000da8 <MX_GPIO_Init+0x29c>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	4a76      	ldr	r2, [pc, #472]	; (8000da8 <MX_GPIO_Init+0x29c>)
 8000bd0:	f043 0308 	orr.w	r3, r3, #8
 8000bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd6:	4b74      	ldr	r3, [pc, #464]	; (8000da8 <MX_GPIO_Init+0x29c>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	f003 0308 	and.w	r3, r3, #8
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000be2:	f001 fccf 	bl	8002584 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EPD_CS_Pin|EPD_RST_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2111      	movs	r1, #17
 8000bea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bee:	f001 fa85 	bl	80020fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000bf8:	486c      	ldr	r0, [pc, #432]	; (8000dac <MX_GPIO_Init+0x2a0>)
 8000bfa:	f001 fa7f 	bl	80020fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2120      	movs	r1, #32
 8000c02:	486b      	ldr	r0, [pc, #428]	; (8000db0 <MX_GPIO_Init+0x2a4>)
 8000c04:	f001 fa7a 	bl	80020fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE8 PE9 
                           PE10 PE11 PE12 PE13 
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8000c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4865      	ldr	r0, [pc, #404]	; (8000db4 <MX_GPIO_Init+0x2a8>)
 8000c1e:	f001 f8c3 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c28:	4b63      	ldr	r3, [pc, #396]	; (8000db8 <MX_GPIO_Init+0x2ac>)
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	4619      	mov	r1, r3
 8000c36:	4861      	ldr	r0, [pc, #388]	; (8000dbc <MX_GPIO_Init+0x2b0>)
 8000c38:	f001 f8b6 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 
                           PF4 PF5 PF6 PF7 
                           PF8 PF9 PF10 PF11 
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000c3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c42:	2303      	movs	r3, #3
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	485b      	ldr	r0, [pc, #364]	; (8000dc0 <MX_GPIO_Init+0x2b4>)
 8000c52:	f001 f8a9 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC5 PC6 PC7 
                           PC8 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000c56:	f241 33ff 	movw	r3, #5119	; 0x13ff
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4854      	ldr	r0, [pc, #336]	; (8000dbc <MX_GPIO_Init+0x2b0>)
 8000c6c:	f001 f89c 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_RST_Pin;
 8000c70:	2311      	movs	r3, #17
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c84:	4619      	mov	r1, r3
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8a:	f001 f88d 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8000c8e:	f248 030c 	movw	r3, #32780	; 0x800c
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c94:	2303      	movs	r3, #3
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca6:	f001 f87f 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_HRDY_Pin;
 8000caa:	2320      	movs	r3, #32
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EPD_HRDY_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc0:	f001 f872 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB15 
                           PB4 PB5 PB6 PB8 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8000cc4:	f64b 7377 	movw	r3, #49015	; 0xbf77
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4834      	ldr	r0, [pc, #208]	; (8000dac <MX_GPIO_Init+0x2a0>)
 8000cda:	f001 f865 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 
                           PG4 PG9 PG10 PG11 
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000cde:	f64f 631f 	movw	r3, #65055	; 0xfe1f
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	482f      	ldr	r0, [pc, #188]	; (8000db0 <MX_GPIO_Init+0x2a4>)
 8000cf4:	f001 f858 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000cf8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4826      	ldr	r0, [pc, #152]	; (8000dac <MX_GPIO_Init+0x2a0>)
 8000d12:	f001 f849 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d28:	2307      	movs	r3, #7
 8000d2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	4824      	ldr	r0, [pc, #144]	; (8000dc4 <MX_GPIO_Init+0x2b8>)
 8000d34:	f001 f838 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13 
                           PD14 PD15 PD0 PD1 
                           PD2 PD3 PD4 PD5 
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8000d38:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	481d      	ldr	r0, [pc, #116]	; (8000dc4 <MX_GPIO_Init+0x2b8>)
 8000d4e:	f001 f82b 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d52:	2320      	movs	r3, #32
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	4811      	ldr	r0, [pc, #68]	; (8000db0 <MX_GPIO_Init+0x2a4>)
 8000d6a:	f001 f81d 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d6e:	2340      	movs	r3, #64	; 0x40
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480b      	ldr	r0, [pc, #44]	; (8000db0 <MX_GPIO_Init+0x2a4>)
 8000d82:	f001 f811 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d86:	2308      	movs	r3, #8
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d96:	4619      	mov	r1, r3
 8000d98:	480b      	ldr	r0, [pc, #44]	; (8000dc8 <MX_GPIO_Init+0x2bc>)
 8000d9a:	f001 f805 	bl	8001da8 <HAL_GPIO_Init>

}
 8000d9e:	bf00      	nop
 8000da0:	3738      	adds	r7, #56	; 0x38
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40021000 	.word	0x40021000
 8000dac:	48000400 	.word	0x48000400
 8000db0:	48001800 	.word	0x48001800
 8000db4:	48001000 	.word	0x48001000
 8000db8:	10110000 	.word	0x10110000
 8000dbc:	48000800 	.word	0x48000800
 8000dc0:	48001400 	.word	0x48001400
 8000dc4:	48000c00 	.word	0x48000c00
 8000dc8:	48001c00 	.word	0x48001c00

08000dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd0:	f000 fc2d 	bl	800162e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd4:	f000 f81e 	bl	8000e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd8:	f7ff fe98 	bl	8000b0c <MX_GPIO_Init>


  MX_LPUART1_UART_Init();
 8000ddc:	f000 fa1e 	bl	800121c <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000de0:	f000 fb66 	bl	80014b0 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000de4:	f000 f8b2 	bl	8000f4c <MX_SPI1_Init>
  MX_DMA_Init();
 8000de8:	f7ff fe56 	bl	8000a98 <MX_DMA_Init>
  MX_UART4_Init();
 8000dec:	f000 fa5c 	bl	80012a8 <MX_UART4_Init>
  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000df6:	4806      	ldr	r0, [pc, #24]	; (8000e10 <main+0x44>)
 8000df8:	f001 f980 	bl	80020fc <HAL_GPIO_WritePin>
  /* USER CODE BEGIN 2 */
  IT8951_Init();
 8000dfc:	f7ff fdde 	bl	80009bc <IT8951_Init>
  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	2180      	movs	r1, #128	; 0x80
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <main+0x44>)
 8000e06:	f001 f979 	bl	80020fc <HAL_GPIO_WritePin>
  /* USER CODE END 2 */
  EpdDriverLoadTemplate();
 8000e0a:	f7ff fe07 	bl	8000a1c <EpdDriverLoadTemplate>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <main+0x42>
 8000e10:	48000400 	.word	0x48000400

08000e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b0bc      	sub	sp, #240	; 0xf0
 8000e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e1e:	2244      	movs	r2, #68	; 0x44
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f005 fc5a 	bl	80066dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e28:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2294      	movs	r2, #148	; 0x94
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f005 fc4c 	bl	80066dc <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000e44:	2000      	movs	r0, #0
 8000e46:	f001 fae9 	bl	800241c <HAL_PWREx_ControlVoltageScaling>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8000e50:	f000 f874 	bl	8000f3c <Error_Handler>
  }
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000e54:	f001 fab2 	bl	80023bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e58:	4b37      	ldr	r3, [pc, #220]	; (8000f38 <SystemClock_Config+0x124>)
 8000e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e5e:	4a36      	ldr	r2, [pc, #216]	; (8000f38 <SystemClock_Config+0x124>)
 8000e60:	f023 0318 	bic.w	r3, r3, #24
 8000e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000e68:	2316      	movs	r3, #22
 8000e6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e7c:	2340      	movs	r3, #64	; 0x40
 8000e7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e82:	2301      	movs	r3, #1
 8000e84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000e8e:	23b0      	movs	r3, #176	; 0xb0
 8000e90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e94:	2302      	movs	r3, #2
 8000e96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 28;
 8000ea6:	231c      	movs	r3, #28
 8000ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eac:	2302      	movs	r3, #2
 8000eae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ebe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f001 fb6e 	bl	80025a4 <HAL_RCC_OscConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000ece:	f000 f835 	bl	8000f3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed2:	230f      	movs	r3, #15
 8000ed4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ef0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ef4:	2105      	movs	r1, #5
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f001 ff42 	bl	8002d80 <HAL_RCC_ClockConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000f02:	f000 f81b 	bl	8000f3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_LPUART1
 8000f06:	f242 0328 	movw	r3, #8232	; 0x2028
 8000f0a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8000f14:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8000f18:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f002 f9df 	bl	80032e0 <HAL_RCCEx_PeriphCLKConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000f28:	f000 f808 	bl	8000f3c <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000f2c:	f002 fd00 	bl	8003930 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000f30:	bf00      	nop
 8000f32:	37f0      	adds	r7, #240	; 0xf0
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40021000 	.word	0x40021000

08000f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000f50:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000f52:	4a1c      	ldr	r2, [pc, #112]	; (8000fc4 <MX_SPI1_Init+0x78>)
 8000f54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000f58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000f66:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000f6a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f7e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000f82:	2208      	movs	r2, #8
 8000f84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000f9a:	2207      	movs	r2, #7
 8000f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000fa6:	2208      	movs	r2, #8
 8000fa8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000fac:	f002 feb0 	bl	8003d10 <HAL_SPI_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fb6:	f7ff ffc1 	bl	8000f3c <Error_Handler>
  }

}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000058 	.word	0x20000058
 8000fc4:	40013000 	.word	0x40013000

08000fc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a31      	ldr	r2, [pc, #196]	; (80010ac <HAL_SPI_MspInit+0xe4>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d15c      	bne.n	80010a4 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fea:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <HAL_SPI_MspInit+0xe8>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fee:	4a30      	ldr	r2, [pc, #192]	; (80010b0 <HAL_SPI_MspInit+0xe8>)
 8000ff0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ff4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ff6:	4b2e      	ldr	r3, [pc, #184]	; (80010b0 <HAL_SPI_MspInit+0xe8>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	4b2b      	ldr	r3, [pc, #172]	; (80010b0 <HAL_SPI_MspInit+0xe8>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4a2a      	ldr	r2, [pc, #168]	; (80010b0 <HAL_SPI_MspInit+0xe8>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4b28      	ldr	r3, [pc, #160]	; (80010b0 <HAL_SPI_MspInit+0xe8>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800101a:	23c2      	movs	r3, #194	; 0xc2
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800102a:	2305      	movs	r3, #5
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001038:	f000 feb6 	bl	8001da8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800103c:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <HAL_SPI_MspInit+0xec>)
 800103e:	4a1e      	ldr	r2, [pc, #120]	; (80010b8 <HAL_SPI_MspInit+0xf0>)
 8001040:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <HAL_SPI_MspInit+0xec>)
 8001044:	220b      	movs	r2, #11
 8001046:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001048:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <HAL_SPI_MspInit+0xec>)
 800104a:	2210      	movs	r2, #16
 800104c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <HAL_SPI_MspInit+0xec>)
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <HAL_SPI_MspInit+0xec>)
 8001056:	2280      	movs	r2, #128	; 0x80
 8001058:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <HAL_SPI_MspInit+0xec>)
 800105c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001060:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_SPI_MspInit+0xec>)
 8001064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001068:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_SPI_MspInit+0xec>)
 800106c:	2200      	movs	r2, #0
 800106e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_SPI_MspInit+0xec>)
 8001072:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001076:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001078:	480e      	ldr	r0, [pc, #56]	; (80010b4 <HAL_SPI_MspInit+0xec>)
 800107a:	f000 fc7d 	bl	8001978 <HAL_DMA_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8001084:	f7ff ff5a 	bl	8000f3c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <HAL_SPI_MspInit+0xec>)
 800108c:	659a      	str	r2, [r3, #88]	; 0x58
 800108e:	4a09      	ldr	r2, [pc, #36]	; (80010b4 <HAL_SPI_MspInit+0xec>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	2100      	movs	r1, #0
 8001098:	2023      	movs	r0, #35	; 0x23
 800109a:	f000 fc36 	bl	800190a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800109e:	2023      	movs	r0, #35	; 0x23
 80010a0:	f000 fc4f 	bl	8001942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010a4:	bf00      	nop
 80010a6:	3728      	adds	r7, #40	; 0x28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40013000 	.word	0x40013000
 80010b0:	40021000 	.word	0x40021000
 80010b4:	200000c0 	.word	0x200000c0
 80010b8:	40020030 	.word	0x40020030

080010bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <HAL_MspInit+0x44>)
 80010c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c6:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <HAL_MspInit+0x44>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6613      	str	r3, [r2, #96]	; 0x60
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_MspInit+0x44>)
 80010d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_MspInit+0x44>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <HAL_MspInit+0x44>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e4:	6593      	str	r3, [r2, #88]	; 0x58
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_MspInit+0x44>)
 80010e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000

08001104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <MemManage_Handler+0x4>

0800111e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <BusFault_Handler+0x4>

08001124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <UsageFault_Handler+0x4>

0800112a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001158:	f000 fabc 	bl	80016d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <DMA1_Channel1_IRQHandler+0x10>)
 8001166:	f000 fd0e 	bl	8001b86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000120 	.word	0x20000120

08001174 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <DMA1_Channel2_IRQHandler+0x10>)
 800117a:	f000 fd04 	bl	8001b86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000298 	.word	0x20000298

08001188 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <DMA1_Channel3_IRQHandler+0x10>)
 800118e:	f000 fcfa 	bl	8001b86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200000c0 	.word	0x200000c0

0800119c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <SPI1_IRQHandler+0x10>)
 80011a2:	f003 f995 	bl	80044d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000058 	.word	0x20000058

080011b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <SystemInit+0x64>)
 80011b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ba:	4a16      	ldr	r2, [pc, #88]	; (8001214 <SystemInit+0x64>)
 80011bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <SystemInit+0x68>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a13      	ldr	r2, [pc, #76]	; (8001218 <SystemInit+0x68>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <SystemInit+0x68>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <SystemInit+0x68>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <SystemInit+0x68>)
 80011dc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80011e0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80011e4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <SystemInit+0x68>)
 80011e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <SystemInit+0x68>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a09      	ldr	r2, [pc, #36]	; (8001218 <SystemInit+0x68>)
 80011f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <SystemInit+0x68>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <SystemInit+0x64>)
 8001202:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001206:	609a      	str	r2, [r3, #8]
#endif
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00
 8001218:	40021000 	.word	0x40021000

0800121c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_uart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 8001220:	4b1e      	ldr	r3, [pc, #120]	; (800129c <MX_LPUART1_UART_Init+0x80>)
 8001222:	4a1f      	ldr	r2, [pc, #124]	; (80012a0 <MX_LPUART1_UART_Init+0x84>)
 8001224:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001226:	4b1d      	ldr	r3, [pc, #116]	; (800129c <MX_LPUART1_UART_Init+0x80>)
 8001228:	4a1e      	ldr	r2, [pc, #120]	; (80012a4 <MX_LPUART1_UART_Init+0x88>)
 800122a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800122c:	4b1b      	ldr	r3, [pc, #108]	; (800129c <MX_LPUART1_UART_Init+0x80>)
 800122e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001232:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b19      	ldr	r3, [pc, #100]	; (800129c <MX_LPUART1_UART_Init+0x80>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <MX_LPUART1_UART_Init+0x80>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <MX_LPUART1_UART_Init+0x80>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <MX_LPUART1_UART_Init+0x80>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <MX_LPUART1_UART_Init+0x80>)
 800124e:	2200      	movs	r2, #0
 8001250:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <MX_LPUART1_UART_Init+0x80>)
 8001254:	2200      	movs	r2, #0
 8001256:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <MX_LPUART1_UART_Init+0x80>)
 800125a:	2200      	movs	r2, #0
 800125c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_LPUART1_UART_Init+0x80>)
 8001260:	2200      	movs	r2, #0
 8001262:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001264:	480d      	ldr	r0, [pc, #52]	; (800129c <MX_LPUART1_UART_Init+0x80>)
 8001266:	f003 fb6f 	bl	8004948 <HAL_UART_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001270:	f7ff fe64 	bl	8000f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001274:	2100      	movs	r1, #0
 8001276:	4809      	ldr	r0, [pc, #36]	; (800129c <MX_LPUART1_UART_Init+0x80>)
 8001278:	f004 feaa 	bl	8005fd0 <HAL_UARTEx_SetTxFifoThreshold>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001282:	f7ff fe5b 	bl	8000f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001286:	2100      	movs	r1, #0
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <MX_LPUART1_UART_Init+0x80>)
 800128a:	f004 fedf 	bl	800604c <HAL_UARTEx_SetRxFifoThreshold>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001294:	f7ff fe52 	bl	8000f3c <Error_Handler>
  }

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000180 	.word	0x20000180
 80012a0:	40008000 	.word	0x40008000
 80012a4:	00033324 	.word	0x00033324

080012a8 <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <MX_UART4_Init+0x58>)
 80012ae:	4a15      	ldr	r2, [pc, #84]	; (8001304 <MX_UART4_Init+0x5c>)
 80012b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <MX_UART4_Init+0x58>)
 80012b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_UART4_Init+0x58>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MX_UART4_Init+0x58>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_UART4_Init+0x58>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_UART4_Init+0x58>)
 80012ce:	220c      	movs	r2, #12
 80012d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <MX_UART4_Init+0x58>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_UART4_Init+0x58>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <MX_UART4_Init+0x58>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_UART4_Init+0x58>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_UART4_Init+0x58>)
 80012ec:	f003 fb2c 	bl	8004948 <HAL_UART_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80012f6:	f7ff fe21 	bl	8000f3c <Error_Handler>
  }

}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000020c 	.word	0x2000020c
 8001304:	40004c00 	.word	0x40004c00

08001308 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	; 0x30
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a59      	ldr	r2, [pc, #356]	; (800148c <HAL_UART_MspInit+0x184>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d12b      	bne.n	8001382 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800132a:	4b59      	ldr	r3, [pc, #356]	; (8001490 <HAL_UART_MspInit+0x188>)
 800132c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132e:	4a58      	ldr	r2, [pc, #352]	; (8001490 <HAL_UART_MspInit+0x188>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001336:	4b56      	ldr	r3, [pc, #344]	; (8001490 <HAL_UART_MspInit+0x188>)
 8001338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
 8001340:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001342:	4b53      	ldr	r3, [pc, #332]	; (8001490 <HAL_UART_MspInit+0x188>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a52      	ldr	r2, [pc, #328]	; (8001490 <HAL_UART_MspInit+0x188>)
 8001348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134e:	4b50      	ldr	r3, [pc, #320]	; (8001490 <HAL_UART_MspInit+0x188>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 800135a:	f001 f913 	bl	8002584 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800135e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001370:	2308      	movs	r3, #8
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4619      	mov	r1, r3
 800137a:	4846      	ldr	r0, [pc, #280]	; (8001494 <HAL_UART_MspInit+0x18c>)
 800137c:	f000 fd14 	bl	8001da8 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001380:	e07f      	b.n	8001482 <HAL_UART_MspInit+0x17a>
  else if(uartHandle->Instance==UART4)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a44      	ldr	r2, [pc, #272]	; (8001498 <HAL_UART_MspInit+0x190>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d17a      	bne.n	8001482 <HAL_UART_MspInit+0x17a>
    __HAL_RCC_UART4_CLK_ENABLE();
 800138c:	4b40      	ldr	r3, [pc, #256]	; (8001490 <HAL_UART_MspInit+0x188>)
 800138e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001390:	4a3f      	ldr	r2, [pc, #252]	; (8001490 <HAL_UART_MspInit+0x188>)
 8001392:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001396:	6593      	str	r3, [r2, #88]	; 0x58
 8001398:	4b3d      	ldr	r3, [pc, #244]	; (8001490 <HAL_UART_MspInit+0x188>)
 800139a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a4:	4b3a      	ldr	r3, [pc, #232]	; (8001490 <HAL_UART_MspInit+0x188>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a8:	4a39      	ldr	r2, [pc, #228]	; (8001490 <HAL_UART_MspInit+0x188>)
 80013aa:	f043 0304 	orr.w	r3, r3, #4
 80013ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b0:	4b37      	ldr	r3, [pc, #220]	; (8001490 <HAL_UART_MspInit+0x188>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ca:	2303      	movs	r3, #3
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013ce:	2308      	movs	r3, #8
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4619      	mov	r1, r3
 80013d8:	4830      	ldr	r0, [pc, #192]	; (800149c <HAL_UART_MspInit+0x194>)
 80013da:	f000 fce5 	bl	8001da8 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Channel1;
 80013de:	4b30      	ldr	r3, [pc, #192]	; (80014a0 <HAL_UART_MspInit+0x198>)
 80013e0:	4a30      	ldr	r2, [pc, #192]	; (80014a4 <HAL_UART_MspInit+0x19c>)
 80013e2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80013e4:	4b2e      	ldr	r3, [pc, #184]	; (80014a0 <HAL_UART_MspInit+0x198>)
 80013e6:	221e      	movs	r2, #30
 80013e8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ea:	4b2d      	ldr	r3, [pc, #180]	; (80014a0 <HAL_UART_MspInit+0x198>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f0:	4b2b      	ldr	r3, [pc, #172]	; (80014a0 <HAL_UART_MspInit+0x198>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013f6:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <HAL_UART_MspInit+0x198>)
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013fc:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <HAL_UART_MspInit+0x198>)
 80013fe:	2200      	movs	r2, #0
 8001400:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001402:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <HAL_UART_MspInit+0x198>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001408:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <HAL_UART_MspInit+0x198>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800140e:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <HAL_UART_MspInit+0x198>)
 8001410:	2200      	movs	r2, #0
 8001412:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001414:	4822      	ldr	r0, [pc, #136]	; (80014a0 <HAL_UART_MspInit+0x198>)
 8001416:	f000 faaf 	bl	8001978 <HAL_DMA_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HAL_UART_MspInit+0x11c>
      Error_Handler();
 8001420:	f7ff fd8c 	bl	8000f3c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a1e      	ldr	r2, [pc, #120]	; (80014a0 <HAL_UART_MspInit+0x198>)
 8001428:	679a      	str	r2, [r3, #120]	; 0x78
 800142a:	4a1d      	ldr	r2, [pc, #116]	; (80014a0 <HAL_UART_MspInit+0x198>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_uart4_tx.Instance = DMA1_Channel2;
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <HAL_UART_MspInit+0x1a0>)
 8001432:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <HAL_UART_MspInit+0x1a4>)
 8001434:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001436:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <HAL_UART_MspInit+0x1a0>)
 8001438:	221f      	movs	r2, #31
 800143a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <HAL_UART_MspInit+0x1a0>)
 800143e:	2210      	movs	r2, #16
 8001440:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001442:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <HAL_UART_MspInit+0x1a0>)
 8001444:	2200      	movs	r2, #0
 8001446:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <HAL_UART_MspInit+0x1a0>)
 800144a:	2280      	movs	r2, #128	; 0x80
 800144c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <HAL_UART_MspInit+0x1a0>)
 8001450:	2200      	movs	r2, #0
 8001452:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <HAL_UART_MspInit+0x1a0>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <HAL_UART_MspInit+0x1a0>)
 800145c:	2200      	movs	r2, #0
 800145e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_UART_MspInit+0x1a0>)
 8001462:	2200      	movs	r2, #0
 8001464:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001466:	4810      	ldr	r0, [pc, #64]	; (80014a8 <HAL_UART_MspInit+0x1a0>)
 8001468:	f000 fa86 	bl	8001978 <HAL_DMA_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8001472:	f7ff fd63 	bl	8000f3c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <HAL_UART_MspInit+0x1a0>)
 800147a:	675a      	str	r2, [r3, #116]	; 0x74
 800147c:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <HAL_UART_MspInit+0x1a0>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001482:	bf00      	nop
 8001484:	3730      	adds	r7, #48	; 0x30
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40008000 	.word	0x40008000
 8001490:	40021000 	.word	0x40021000
 8001494:	48001800 	.word	0x48001800
 8001498:	40004c00 	.word	0x40004c00
 800149c:	48000800 	.word	0x48000800
 80014a0:	20000120 	.word	0x20000120
 80014a4:	40020008 	.word	0x40020008
 80014a8:	20000298 	.word	0x20000298
 80014ac:	4002001c 	.word	0x4002001c

080014b0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80014b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80014bc:	4b10      	ldr	r3, [pc, #64]	; (8001500 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80014be:	2206      	movs	r2, #6
 80014c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80014c4:	2202      	movs	r2, #2
 80014c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80014c8:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014d4:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80014dc:	2201      	movs	r2, #1
 80014de:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80014ec:	4804      	ldr	r0, [pc, #16]	; (8001500 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80014ee:	f000 fe1d 	bl	800212c <HAL_PCD_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 80014f8:	f7ff fd20 	bl	8000f3c <Error_Handler>
  }

}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200002f8 	.word	0x200002f8

08001504 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001524:	d154      	bne.n	80015d0 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	4b2c      	ldr	r3, [pc, #176]	; (80015d8 <HAL_PCD_MspInit+0xd4>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	4a2b      	ldr	r2, [pc, #172]	; (80015d8 <HAL_PCD_MspInit+0xd4>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001532:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <HAL_PCD_MspInit+0xd4>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800153e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001550:	230a      	movs	r3, #10
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155e:	f000 fc23 	bl	8001da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001562:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157a:	f000 fc15 	bl	8001da8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <HAL_PCD_MspInit+0xd4>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <HAL_PCD_MspInit+0xd4>)
 8001584:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <HAL_PCD_MspInit+0xd4>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <HAL_PCD_MspInit+0xd4>)
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d114      	bne.n	80015cc <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <HAL_PCD_MspInit+0xd4>)
 80015a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a6:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <HAL_PCD_MspInit+0xd4>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ac:	6593      	str	r3, [r2, #88]	; 0x58
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_PCD_MspInit+0xd4>)
 80015b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80015ba:	f000 ffd3 	bl	8002564 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_PCD_MspInit+0xd4>)
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <HAL_PCD_MspInit+0xd4>)
 80015c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80015ca:	e001      	b.n	80015d0 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80015cc:	f000 ffca 	bl	8002564 <HAL_PWREx_EnableVddUSB>
}
 80015d0:	bf00      	nop
 80015d2:	3728      	adds	r7, #40	; 0x28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40021000 	.word	0x40021000

080015dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001614 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80015e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80015e2:	e003      	b.n	80015ec <LoopCopyDataInit>

080015e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80015e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80015e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80015ea:	3104      	adds	r1, #4

080015ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80015ec:	480b      	ldr	r0, [pc, #44]	; (800161c <LoopForever+0xa>)
	ldr	r3, =_edata
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <LoopForever+0xe>)
	adds	r2, r0, r1
 80015f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80015f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80015f4:	d3f6      	bcc.n	80015e4 <CopyDataInit>
	ldr	r2, =_sbss
 80015f6:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <LoopForever+0x12>)
	b	LoopFillZerobss
 80015f8:	e002      	b.n	8001600 <LoopFillZerobss>

080015fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80015fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80015fc:	f842 3b04 	str.w	r3, [r2], #4

08001600 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <LoopForever+0x16>)
	cmp	r2, r3
 8001602:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001604:	d3f9      	bcc.n	80015fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001606:	f7ff fdd3 	bl	80011b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800160a:	f005 f843 	bl	8006694 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800160e:	f7ff fbdd 	bl	8000dcc <main>

08001612 <LoopForever>:

LoopForever:
    b LoopForever
 8001612:	e7fe      	b.n	8001612 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001614:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001618:	0807f504 	.word	0x0807f504
	ldr	r0, =_sdata
 800161c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001620:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001624:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001628:	20000704 	.word	0x20000704

0800162c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC1_IRQHandler>

0800162e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001638:	2003      	movs	r0, #3
 800163a:	f000 f95b 	bl	80018f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800163e:	2000      	movs	r0, #0
 8001640:	f000 f80e 	bl	8001660 <HAL_InitTick>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d002      	beq.n	8001650 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	71fb      	strb	r3, [r7, #7]
 800164e:	e001      	b.n	8001654 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001650:	f7ff fd34 	bl	80010bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001654:	79fb      	ldrb	r3, [r7, #7]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <HAL_InitTick+0x68>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d022      	beq.n	80016ba <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001674:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_InitTick+0x6c>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <HAL_InitTick+0x68>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001680:	fbb1 f3f3 	udiv	r3, r1, r3
 8001684:	fbb2 f3f3 	udiv	r3, r2, r3
 8001688:	4618      	mov	r0, r3
 800168a:	f000 f968 	bl	800195e <HAL_SYSTICK_Config>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10f      	bne.n	80016b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b0f      	cmp	r3, #15
 8001698:	d809      	bhi.n	80016ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800169a:	2200      	movs	r2, #0
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	f04f 30ff 	mov.w	r0, #4294967295
 80016a2:	f000 f932 	bl	800190a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_InitTick+0x70>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	e007      	b.n	80016be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	73fb      	strb	r3, [r7, #15]
 80016b2:	e004      	b.n	80016be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
 80016b8:	e001      	b.n	80016be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016be:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000008 	.word	0x20000008
 80016cc:	20000000 	.word	0x20000000
 80016d0:	20000004 	.word	0x20000004

080016d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_IncTick+0x1c>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_IncTick+0x20>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4413      	add	r3, r2
 80016e2:	4a03      	ldr	r2, [pc, #12]	; (80016f0 <HAL_IncTick+0x1c>)
 80016e4:	6013      	str	r3, [r2, #0]
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	20000700 	.word	0x20000700
 80016f4:	20000008 	.word	0x20000008

080016f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <HAL_GetTick+0x14>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000700 	.word	0x20000700

08001710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff ffee 	bl	80016f8 <HAL_GetTick>
 800171c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001728:	d004      	beq.n	8001734 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_Delay+0x40>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	4413      	add	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001734:	bf00      	nop
 8001736:	f7ff ffdf 	bl	80016f8 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	429a      	cmp	r2, r3
 8001744:	d8f7      	bhi.n	8001736 <HAL_Delay+0x26>
  {
  }
}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000008 	.word	0x20000008

08001754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001770:	4013      	ands	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800177c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001786:	4a04      	ldr	r2, [pc, #16]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	60d3      	str	r3, [r2, #12]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <__NVIC_GetPriorityGrouping+0x18>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	f003 0307 	and.w	r3, r3, #7
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	db0b      	blt.n	80017e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	f003 021f 	and.w	r2, r3, #31
 80017d0:	4907      	ldr	r1, [pc, #28]	; (80017f0 <__NVIC_EnableIRQ+0x38>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	095b      	lsrs	r3, r3, #5
 80017d8:	2001      	movs	r0, #1
 80017da:	fa00 f202 	lsl.w	r2, r0, r2
 80017de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000e100 	.word	0xe000e100

080017f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	6039      	str	r1, [r7, #0]
 80017fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	2b00      	cmp	r3, #0
 8001806:	db0a      	blt.n	800181e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	490c      	ldr	r1, [pc, #48]	; (8001840 <__NVIC_SetPriority+0x4c>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	0112      	lsls	r2, r2, #4
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	440b      	add	r3, r1
 8001818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800181c:	e00a      	b.n	8001834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4908      	ldr	r1, [pc, #32]	; (8001844 <__NVIC_SetPriority+0x50>)
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	3b04      	subs	r3, #4
 800182c:	0112      	lsls	r2, r2, #4
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	440b      	add	r3, r1
 8001832:	761a      	strb	r2, [r3, #24]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000e100 	.word	0xe000e100
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f1c3 0307 	rsb	r3, r3, #7
 8001862:	2b04      	cmp	r3, #4
 8001864:	bf28      	it	cs
 8001866:	2304      	movcs	r3, #4
 8001868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3304      	adds	r3, #4
 800186e:	2b06      	cmp	r3, #6
 8001870:	d902      	bls.n	8001878 <NVIC_EncodePriority+0x30>
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3b03      	subs	r3, #3
 8001876:	e000      	b.n	800187a <NVIC_EncodePriority+0x32>
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	f04f 32ff 	mov.w	r2, #4294967295
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	401a      	ands	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001890:	f04f 31ff 	mov.w	r1, #4294967295
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	43d9      	mvns	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	4313      	orrs	r3, r2
         );
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3724      	adds	r7, #36	; 0x24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c0:	d301      	bcc.n	80018c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00f      	b.n	80018e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c6:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <SysTick_Config+0x40>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ce:	210f      	movs	r1, #15
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	f7ff ff8e 	bl	80017f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <SysTick_Config+0x40>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018de:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <SysTick_Config+0x40>)
 80018e0:	2207      	movs	r2, #7
 80018e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	e000e010 	.word	0xe000e010

080018f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ff29 	bl	8001754 <__NVIC_SetPriorityGrouping>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800191c:	f7ff ff3e 	bl	800179c <__NVIC_GetPriorityGrouping>
 8001920:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	6978      	ldr	r0, [r7, #20]
 8001928:	f7ff ff8e 	bl	8001848 <NVIC_EncodePriority>
 800192c:	4602      	mov	r2, r0
 800192e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff5d 	bl	80017f4 <__NVIC_SetPriority>
}
 800193a:	bf00      	nop
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff31 	bl	80017b8 <__NVIC_EnableIRQ>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ffa2 	bl	80018b0 <SysTick_Config>
 800196c:	4603      	mov	r3, r0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e08d      	b.n	8001aa6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <HAL_DMA_Init+0x138>)
 8001992:	429a      	cmp	r2, r3
 8001994:	d80f      	bhi.n	80019b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	4b45      	ldr	r3, [pc, #276]	; (8001ab4 <HAL_DMA_Init+0x13c>)
 800199e:	4413      	add	r3, r2
 80019a0:	4a45      	ldr	r2, [pc, #276]	; (8001ab8 <HAL_DMA_Init+0x140>)
 80019a2:	fba2 2303 	umull	r2, r3, r2, r3
 80019a6:	091b      	lsrs	r3, r3, #4
 80019a8:	009a      	lsls	r2, r3, #2
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a42      	ldr	r2, [pc, #264]	; (8001abc <HAL_DMA_Init+0x144>)
 80019b2:	641a      	str	r2, [r3, #64]	; 0x40
 80019b4:	e00e      	b.n	80019d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b40      	ldr	r3, [pc, #256]	; (8001ac0 <HAL_DMA_Init+0x148>)
 80019be:	4413      	add	r3, r2
 80019c0:	4a3d      	ldr	r2, [pc, #244]	; (8001ab8 <HAL_DMA_Init+0x140>)
 80019c2:	fba2 2303 	umull	r2, r3, r2, r3
 80019c6:	091b      	lsrs	r3, r3, #4
 80019c8:	009a      	lsls	r2, r3, #2
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a3c      	ldr	r2, [pc, #240]	; (8001ac4 <HAL_DMA_Init+0x14c>)
 80019d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80019ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80019f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f95c 	bl	8001ce4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a34:	d102      	bne.n	8001a3c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a50:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d010      	beq.n	8001a7c <HAL_DMA_Init+0x104>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d80c      	bhi.n	8001a7c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f97c 	bl	8001d60 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	e008      	b.n	8001a8e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40020407 	.word	0x40020407
 8001ab4:	bffdfff8 	.word	0xbffdfff8
 8001ab8:	cccccccd 	.word	0xcccccccd
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	bffdfbf8 	.word	0xbffdfbf8
 8001ac4:	40020400 	.word	0x40020400

08001ac8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d005      	beq.n	8001aec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	73fb      	strb	r3, [r7, #15]
 8001aea:	e047      	b.n	8001b7c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 020e 	bic.w	r2, r2, #14
 8001afa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0201 	bic.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b20:	f003 021c 	and.w	r2, r3, #28
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	2101      	movs	r1, #1
 8001b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b38:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00c      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b50:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b5a:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	4798      	blx	r3
    }
  }
  return status;
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f003 031c 	and.w	r3, r3, #28
 8001ba6:	2204      	movs	r2, #4
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d026      	beq.n	8001c00 <HAL_DMA_IRQHandler+0x7a>
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d021      	beq.n	8001c00 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0320 	and.w	r3, r3, #32
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d107      	bne.n	8001bda <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0204 	bic.w	r2, r2, #4
 8001bd8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f003 021c 	and.w	r2, r3, #28
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	2104      	movs	r1, #4
 8001be8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bec:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d071      	beq.n	8001cda <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001bfe:	e06c      	b.n	8001cda <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c04:	f003 031c 	and.w	r3, r3, #28
 8001c08:	2202      	movs	r2, #2
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d02e      	beq.n	8001c72 <HAL_DMA_IRQHandler+0xec>
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d029      	beq.n	8001c72 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0320 	and.w	r3, r3, #32
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10b      	bne.n	8001c44 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 020a 	bic.w	r2, r2, #10
 8001c3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c48:	f003 021c 	and.w	r2, r3, #28
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	2102      	movs	r1, #2
 8001c52:	fa01 f202 	lsl.w	r2, r1, r2
 8001c56:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d038      	beq.n	8001cda <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c70:	e033      	b.n	8001cda <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	f003 031c 	and.w	r3, r3, #28
 8001c7a:	2208      	movs	r2, #8
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d02a      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x156>
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d025      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 020e 	bic.w	r2, r2, #14
 8001c9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca4:	f003 021c 	and.w	r2, r3, #28
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	2101      	movs	r1, #1
 8001cae:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d004      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001cda:	bf00      	nop
 8001cdc:	bf00      	nop
}
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d80a      	bhi.n	8001d0e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d04:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6493      	str	r3, [r2, #72]	; 0x48
 8001d0c:	e007      	b.n	8001d1e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	089b      	lsrs	r3, r3, #2
 8001d14:	009a      	lsls	r2, r3, #2
 8001d16:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001d18:	4413      	add	r3, r2
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	3b08      	subs	r3, #8
 8001d26:	4a0c      	ldr	r2, [pc, #48]	; (8001d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001d28:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001d34:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1CU);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f003 031c 	and.w	r3, r3, #28
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	40020407 	.word	0x40020407
 8001d54:	4002081c 	.word	0x4002081c
 8001d58:	cccccccd 	.word	0xcccccccd
 8001d5c:	40020880 	.word	0x40020880

08001d60 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	461a      	mov	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a08      	ldr	r2, [pc, #32]	; (8001da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001d82:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	1000823f 	.word	0x1000823f
 8001da4:	40020940 	.word	0x40020940

08001da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db6:	e166      	b.n	8002086 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8158 	beq.w	8002080 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d003      	beq.n	8001de0 <HAL_GPIO_Init+0x38>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b12      	cmp	r3, #18
 8001dde:	d123      	bne.n	8001e28 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	08da      	lsrs	r2, r3, #3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3208      	adds	r2, #8
 8001de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	220f      	movs	r2, #15
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	08da      	lsrs	r2, r3, #3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3208      	adds	r2, #8
 8001e22:	6939      	ldr	r1, [r7, #16]
 8001e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	2203      	movs	r2, #3
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0203 	and.w	r2, r3, #3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d00b      	beq.n	8001e7c <HAL_GPIO_Init+0xd4>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d007      	beq.n	8001e7c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e70:	2b11      	cmp	r3, #17
 8001e72:	d003      	beq.n	8001e7c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b12      	cmp	r3, #18
 8001e7a:	d130      	bne.n	8001ede <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	2203      	movs	r2, #3
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	091b      	lsrs	r3, r3, #4
 8001ec8:	f003 0201 	and.w	r2, r3, #1
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	2203      	movs	r2, #3
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 80b2 	beq.w	8002080 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1c:	4b61      	ldr	r3, [pc, #388]	; (80020a4 <HAL_GPIO_Init+0x2fc>)
 8001f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f20:	4a60      	ldr	r2, [pc, #384]	; (80020a4 <HAL_GPIO_Init+0x2fc>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6613      	str	r3, [r2, #96]	; 0x60
 8001f28:	4b5e      	ldr	r3, [pc, #376]	; (80020a4 <HAL_GPIO_Init+0x2fc>)
 8001f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f34:	4a5c      	ldr	r2, [pc, #368]	; (80020a8 <HAL_GPIO_Init+0x300>)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f5e:	d02b      	beq.n	8001fb8 <HAL_GPIO_Init+0x210>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a52      	ldr	r2, [pc, #328]	; (80020ac <HAL_GPIO_Init+0x304>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d025      	beq.n	8001fb4 <HAL_GPIO_Init+0x20c>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a51      	ldr	r2, [pc, #324]	; (80020b0 <HAL_GPIO_Init+0x308>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d01f      	beq.n	8001fb0 <HAL_GPIO_Init+0x208>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a50      	ldr	r2, [pc, #320]	; (80020b4 <HAL_GPIO_Init+0x30c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d019      	beq.n	8001fac <HAL_GPIO_Init+0x204>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a4f      	ldr	r2, [pc, #316]	; (80020b8 <HAL_GPIO_Init+0x310>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d013      	beq.n	8001fa8 <HAL_GPIO_Init+0x200>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a4e      	ldr	r2, [pc, #312]	; (80020bc <HAL_GPIO_Init+0x314>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d00d      	beq.n	8001fa4 <HAL_GPIO_Init+0x1fc>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a4d      	ldr	r2, [pc, #308]	; (80020c0 <HAL_GPIO_Init+0x318>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d007      	beq.n	8001fa0 <HAL_GPIO_Init+0x1f8>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a4c      	ldr	r2, [pc, #304]	; (80020c4 <HAL_GPIO_Init+0x31c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d101      	bne.n	8001f9c <HAL_GPIO_Init+0x1f4>
 8001f98:	2307      	movs	r3, #7
 8001f9a:	e00e      	b.n	8001fba <HAL_GPIO_Init+0x212>
 8001f9c:	2308      	movs	r3, #8
 8001f9e:	e00c      	b.n	8001fba <HAL_GPIO_Init+0x212>
 8001fa0:	2306      	movs	r3, #6
 8001fa2:	e00a      	b.n	8001fba <HAL_GPIO_Init+0x212>
 8001fa4:	2305      	movs	r3, #5
 8001fa6:	e008      	b.n	8001fba <HAL_GPIO_Init+0x212>
 8001fa8:	2304      	movs	r3, #4
 8001faa:	e006      	b.n	8001fba <HAL_GPIO_Init+0x212>
 8001fac:	2303      	movs	r3, #3
 8001fae:	e004      	b.n	8001fba <HAL_GPIO_Init+0x212>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e002      	b.n	8001fba <HAL_GPIO_Init+0x212>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <HAL_GPIO_Init+0x212>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	f002 0203 	and.w	r2, r2, #3
 8001fc0:	0092      	lsls	r2, r2, #2
 8001fc2:	4093      	lsls	r3, r2
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fca:	4937      	ldr	r1, [pc, #220]	; (80020a8 <HAL_GPIO_Init+0x300>)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001fd8:	4b3b      	ldr	r3, [pc, #236]	; (80020c8 <HAL_GPIO_Init+0x320>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ffc:	4a32      	ldr	r2, [pc, #200]	; (80020c8 <HAL_GPIO_Init+0x320>)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002002:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <HAL_GPIO_Init+0x320>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002026:	4a28      	ldr	r2, [pc, #160]	; (80020c8 <HAL_GPIO_Init+0x320>)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800202c:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <HAL_GPIO_Init+0x320>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002050:	4a1d      	ldr	r2, [pc, #116]	; (80020c8 <HAL_GPIO_Init+0x320>)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <HAL_GPIO_Init+0x320>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	43db      	mvns	r3, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4013      	ands	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800207a:	4a13      	ldr	r2, [pc, #76]	; (80020c8 <HAL_GPIO_Init+0x320>)
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	3301      	adds	r3, #1
 8002084:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	fa22 f303 	lsr.w	r3, r2, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	f47f ae91 	bne.w	8001db8 <HAL_GPIO_Init+0x10>
  }
}
 8002096:	bf00      	nop
 8002098:	371c      	adds	r7, #28
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40010000 	.word	0x40010000
 80020ac:	48000400 	.word	0x48000400
 80020b0:	48000800 	.word	0x48000800
 80020b4:	48000c00 	.word	0x48000c00
 80020b8:	48001000 	.word	0x48001000
 80020bc:	48001400 	.word	0x48001400
 80020c0:	48001800 	.word	0x48001800
 80020c4:	48001c00 	.word	0x48001c00
 80020c8:	40010400 	.word	0x40010400

080020cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	887b      	ldrh	r3, [r7, #2]
 80020de:	4013      	ands	r3, r2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
 80020e8:	e001      	b.n	80020ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	807b      	strh	r3, [r7, #2]
 8002108:	4613      	mov	r3, r2
 800210a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800210c:	787b      	ldrb	r3, [r7, #1]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002112:	887a      	ldrh	r2, [r7, #2]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002118:	e002      	b.n	8002120 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800211a:	887a      	ldrh	r2, [r7, #2]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800212c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212e:	b08f      	sub	sp, #60	; 0x3c
 8002130:	af0a      	add	r7, sp, #40	; 0x28
 8002132:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e116      	b.n	800236c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d106      	bne.n	800215e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff f9d3 	bl	8001504 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2203      	movs	r2, #3
 8002162:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216e:	2b00      	cmp	r3, #0
 8002170:	d102      	bne.n	8002178 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f004 f85d 	bl	800623c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	687e      	ldr	r6, [r7, #4]
 800218a:	466d      	mov	r5, sp
 800218c:	f106 0410 	add.w	r4, r6, #16
 8002190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002192:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002198:	e894 0003 	ldmia.w	r4, {r0, r1}
 800219c:	e885 0003 	stmia.w	r5, {r0, r1}
 80021a0:	1d33      	adds	r3, r6, #4
 80021a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021a4:	6838      	ldr	r0, [r7, #0]
 80021a6:	f003 fff7 	bl	8006198 <USB_CoreInit>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2202      	movs	r2, #2
 80021b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0d7      	b.n	800236c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f004 f84b 	bl	800625e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c8:	2300      	movs	r3, #0
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	e04a      	b.n	8002264 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021ce:	7bfa      	ldrb	r2, [r7, #15]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	333d      	adds	r3, #61	; 0x3d
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	333c      	adds	r3, #60	; 0x3c
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	b298      	uxth	r0, r3
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	1a9b      	subs	r3, r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	3342      	adds	r3, #66	; 0x42
 800220a:	4602      	mov	r2, r0
 800220c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	1a9b      	subs	r3, r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	333f      	adds	r3, #63	; 0x3f
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002222:	7bfa      	ldrb	r2, [r7, #15]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	3344      	adds	r3, #68	; 0x44
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	1a9b      	subs	r3, r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	3348      	adds	r3, #72	; 0x48
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800224a:	7bfa      	ldrb	r2, [r7, #15]
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	1a9b      	subs	r3, r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	3350      	adds	r3, #80	; 0x50
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	3301      	adds	r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
 8002264:	7bfa      	ldrb	r2, [r7, #15]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	429a      	cmp	r2, r3
 800226c:	d3af      	bcc.n	80021ce <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800226e:	2300      	movs	r3, #0
 8002270:	73fb      	strb	r3, [r7, #15]
 8002272:	e044      	b.n	80022fe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800229c:	7bfa      	ldrb	r2, [r7, #15]
 800229e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022a0:	7bfa      	ldrb	r2, [r7, #15]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022b6:	7bfa      	ldrb	r2, [r7, #15]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022cc:	7bfa      	ldrb	r2, [r7, #15]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	1a9b      	subs	r3, r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022e2:	7bfa      	ldrb	r2, [r7, #15]
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	1a9b      	subs	r3, r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	440b      	add	r3, r1
 80022f0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	3301      	adds	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	429a      	cmp	r2, r3
 8002306:	d3b5      	bcc.n	8002274 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	603b      	str	r3, [r7, #0]
 800230e:	687e      	ldr	r6, [r7, #4]
 8002310:	466d      	mov	r5, sp
 8002312:	f106 0410 	add.w	r4, r6, #16
 8002316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800231a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800231c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800231e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002322:	e885 0003 	stmia.w	r5, {r0, r1}
 8002326:	1d33      	adds	r3, r6, #4
 8002328:	cb0e      	ldmia	r3, {r1, r2, r3}
 800232a:	6838      	ldr	r0, [r7, #0]
 800232c:	f003 ffc2 	bl	80062b4 <USB_DevInit>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d005      	beq.n	8002342 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2202      	movs	r2, #2
 800233a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e014      	b.n	800236c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	2b01      	cmp	r3, #1
 8002358:	d102      	bne.n	8002360 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f80a 	bl	8002374 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f004 f948 	bl	80065fa <USB_DevDisconnect>

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002374 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a6:	f043 0303 	orr.w	r3, r3, #3
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a04      	ldr	r2, [pc, #16]	; (80023d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ca:	6013      	str	r3, [r2, #0]
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40007000 	.word	0x40007000

080023dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023e0:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <HAL_PWREx_GetVoltageRange+0x3c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ec:	d102      	bne.n	80023f4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80023ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023f2:	e00b      	b.n	800240c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <HAL_PWREx_GetVoltageRange+0x3c>)
 80023f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002402:	d102      	bne.n	800240a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002408:	e000      	b.n	800240c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800240a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800240c:	4618      	mov	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40007000 	.word	0x40007000

0800241c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d141      	bne.n	80024ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800242a:	4b4b      	ldr	r3, [pc, #300]	; (8002558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002436:	d131      	bne.n	800249c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002438:	4b47      	ldr	r3, [pc, #284]	; (8002558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800243a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800243e:	4a46      	ldr	r2, [pc, #280]	; (8002558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002444:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002448:	4b43      	ldr	r3, [pc, #268]	; (8002558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002450:	4a41      	ldr	r2, [pc, #260]	; (8002558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002456:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002458:	4b40      	ldr	r3, [pc, #256]	; (800255c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2232      	movs	r2, #50	; 0x32
 800245e:	fb02 f303 	mul.w	r3, r2, r3
 8002462:	4a3f      	ldr	r2, [pc, #252]	; (8002560 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002464:	fba2 2303 	umull	r2, r3, r2, r3
 8002468:	0c9b      	lsrs	r3, r3, #18
 800246a:	3301      	adds	r3, #1
 800246c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800246e:	e002      	b.n	8002476 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	3b01      	subs	r3, #1
 8002474:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002476:	4b38      	ldr	r3, [pc, #224]	; (8002558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002482:	d102      	bne.n	800248a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f2      	bne.n	8002470 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800248a:	4b33      	ldr	r3, [pc, #204]	; (8002558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002496:	d158      	bne.n	800254a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e057      	b.n	800254c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800249c:	4b2e      	ldr	r3, [pc, #184]	; (8002558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800249e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024a2:	4a2d      	ldr	r2, [pc, #180]	; (8002558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80024ac:	e04d      	b.n	800254a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024b4:	d141      	bne.n	800253a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80024b6:	4b28      	ldr	r3, [pc, #160]	; (8002558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c2:	d131      	bne.n	8002528 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024c4:	4b24      	ldr	r3, [pc, #144]	; (8002558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024ca:	4a23      	ldr	r2, [pc, #140]	; (8002558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024d4:	4b20      	ldr	r3, [pc, #128]	; (8002558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024dc:	4a1e      	ldr	r2, [pc, #120]	; (8002558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80024e4:	4b1d      	ldr	r3, [pc, #116]	; (800255c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2232      	movs	r2, #50	; 0x32
 80024ea:	fb02 f303 	mul.w	r3, r2, r3
 80024ee:	4a1c      	ldr	r2, [pc, #112]	; (8002560 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80024f0:	fba2 2303 	umull	r2, r3, r2, r3
 80024f4:	0c9b      	lsrs	r3, r3, #18
 80024f6:	3301      	adds	r3, #1
 80024f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024fa:	e002      	b.n	8002502 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	3b01      	subs	r3, #1
 8002500:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800250e:	d102      	bne.n	8002516 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f2      	bne.n	80024fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002522:	d112      	bne.n	800254a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e011      	b.n	800254c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800252a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800252e:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002534:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002538:	e007      	b.n	800254a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800253a:	4b07      	ldr	r3, [pc, #28]	; (8002558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002542:	4a05      	ldr	r2, [pc, #20]	; (8002558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002544:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002548:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	40007000 	.word	0x40007000
 800255c:	20000000 	.word	0x20000000
 8002560:	431bde83 	.word	0x431bde83

08002564 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002568:	4b05      	ldr	r3, [pc, #20]	; (8002580 <HAL_PWREx_EnableVddUSB+0x1c>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4a04      	ldr	r2, [pc, #16]	; (8002580 <HAL_PWREx_EnableVddUSB+0x1c>)
 800256e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002572:	6053      	str	r3, [r2, #4]
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40007000 	.word	0x40007000

08002584 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4a04      	ldr	r2, [pc, #16]	; (80025a0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800258e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002592:	6053      	str	r3, [r2, #4]
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40007000 	.word	0x40007000

080025a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e3db      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025b6:	4ba4      	ldr	r3, [pc, #656]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025c0:	4ba1      	ldr	r3, [pc, #644]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 80e1 	beq.w	800279a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d007      	beq.n	80025ee <HAL_RCC_OscConfig+0x4a>
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	2b0c      	cmp	r3, #12
 80025e2:	f040 8088 	bne.w	80026f6 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	f040 8084 	bne.w	80026f6 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025ee:	4b96      	ldr	r3, [pc, #600]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <HAL_RCC_OscConfig+0x62>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e3b3      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1a      	ldr	r2, [r3, #32]
 800260a:	4b8f      	ldr	r3, [pc, #572]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d004      	beq.n	8002620 <HAL_RCC_OscConfig+0x7c>
 8002616:	4b8c      	ldr	r3, [pc, #560]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800261e:	e005      	b.n	800262c <HAL_RCC_OscConfig+0x88>
 8002620:	4b89      	ldr	r3, [pc, #548]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002626:	091b      	lsrs	r3, r3, #4
 8002628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800262c:	4293      	cmp	r3, r2
 800262e:	d223      	bcs.n	8002678 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4618      	mov	r0, r3
 8002636:	f000 fd91 	bl	800315c <RCC_SetFlashLatencyFromMSIRange>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e394      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002644:	4b80      	ldr	r3, [pc, #512]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a7f      	ldr	r2, [pc, #508]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 800264a:	f043 0308 	orr.w	r3, r3, #8
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	4b7d      	ldr	r3, [pc, #500]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	497a      	ldr	r1, [pc, #488]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002662:	4b79      	ldr	r3, [pc, #484]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	021b      	lsls	r3, r3, #8
 8002670:	4975      	ldr	r1, [pc, #468]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
 8002676:	e022      	b.n	80026be <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002678:	4b73      	ldr	r3, [pc, #460]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a72      	ldr	r2, [pc, #456]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 800267e:	f043 0308 	orr.w	r3, r3, #8
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	4b70      	ldr	r3, [pc, #448]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	496d      	ldr	r1, [pc, #436]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002692:	4313      	orrs	r3, r2
 8002694:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002696:	4b6c      	ldr	r3, [pc, #432]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	4968      	ldr	r1, [pc, #416]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 fd54 	bl	800315c <RCC_SetFlashLatencyFromMSIRange>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e357      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026be:	f000 fc8b 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 80026c2:	4601      	mov	r1, r0
 80026c4:	4b60      	ldr	r3, [pc, #384]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	4a5f      	ldr	r2, [pc, #380]	; (800284c <HAL_RCC_OscConfig+0x2a8>)
 80026d0:	5cd3      	ldrb	r3, [r2, r3]
 80026d2:	f003 031f 	and.w	r3, r3, #31
 80026d6:	fa21 f303 	lsr.w	r3, r1, r3
 80026da:	4a5d      	ldr	r2, [pc, #372]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80026dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026de:	4b5d      	ldr	r3, [pc, #372]	; (8002854 <HAL_RCC_OscConfig+0x2b0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe ffbc 	bl	8001660 <HAL_InitTick>
 80026e8:	4603      	mov	r3, r0
 80026ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d052      	beq.n	8002798 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	e33b      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d032      	beq.n	8002764 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026fe:	4b52      	ldr	r3, [pc, #328]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a51      	ldr	r2, [pc, #324]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800270a:	f7fe fff5 	bl	80016f8 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002712:	f7fe fff1 	bl	80016f8 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e324      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002724:	4b48      	ldr	r3, [pc, #288]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002730:	4b45      	ldr	r3, [pc, #276]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a44      	ldr	r2, [pc, #272]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002736:	f043 0308 	orr.w	r3, r3, #8
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	4b42      	ldr	r3, [pc, #264]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	493f      	ldr	r1, [pc, #252]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800274e:	4b3e      	ldr	r3, [pc, #248]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	021b      	lsls	r3, r3, #8
 800275c:	493a      	ldr	r1, [pc, #232]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 800275e:	4313      	orrs	r3, r2
 8002760:	604b      	str	r3, [r1, #4]
 8002762:	e01a      	b.n	800279a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002764:	4b38      	ldr	r3, [pc, #224]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a37      	ldr	r2, [pc, #220]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 800276a:	f023 0301 	bic.w	r3, r3, #1
 800276e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002770:	f7fe ffc2 	bl	80016f8 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002778:	f7fe ffbe 	bl	80016f8 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e2f1      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800278a:	4b2f      	ldr	r3, [pc, #188]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x1d4>
 8002796:	e000      	b.n	800279a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002798:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d074      	beq.n	8002890 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d005      	beq.n	80027b8 <HAL_RCC_OscConfig+0x214>
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	2b0c      	cmp	r3, #12
 80027b0:	d10e      	bne.n	80027d0 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d10b      	bne.n	80027d0 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b8:	4b23      	ldr	r3, [pc, #140]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d064      	beq.n	800288e <HAL_RCC_OscConfig+0x2ea>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d160      	bne.n	800288e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e2ce      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d8:	d106      	bne.n	80027e8 <HAL_RCC_OscConfig+0x244>
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1a      	ldr	r2, [pc, #104]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 80027e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	e01d      	b.n	8002824 <HAL_RCC_OscConfig+0x280>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027f0:	d10c      	bne.n	800280c <HAL_RCC_OscConfig+0x268>
 80027f2:	4b15      	ldr	r3, [pc, #84]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a14      	ldr	r2, [pc, #80]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 80027f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a11      	ldr	r2, [pc, #68]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	e00b      	b.n	8002824 <HAL_RCC_OscConfig+0x280>
 800280c:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0d      	ldr	r2, [pc, #52]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 8002812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <HAL_RCC_OscConfig+0x2a4>)
 800281e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002822:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01c      	beq.n	8002866 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7fe ff64 	bl	80016f8 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002832:	e011      	b.n	8002858 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002834:	f7fe ff60 	bl	80016f8 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b64      	cmp	r3, #100	; 0x64
 8002840:	d90a      	bls.n	8002858 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e293      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000
 800284c:	0807f4ac 	.word	0x0807f4ac
 8002850:	20000000 	.word	0x20000000
 8002854:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002858:	4bae      	ldr	r3, [pc, #696]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0e7      	beq.n	8002834 <HAL_RCC_OscConfig+0x290>
 8002864:	e014      	b.n	8002890 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002866:	f7fe ff47 	bl	80016f8 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800286e:	f7fe ff43 	bl	80016f8 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b64      	cmp	r3, #100	; 0x64
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e276      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002880:	4ba4      	ldr	r3, [pc, #656]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f0      	bne.n	800286e <HAL_RCC_OscConfig+0x2ca>
 800288c:	e000      	b.n	8002890 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d060      	beq.n	800295e <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d005      	beq.n	80028ae <HAL_RCC_OscConfig+0x30a>
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	2b0c      	cmp	r3, #12
 80028a6:	d119      	bne.n	80028dc <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d116      	bne.n	80028dc <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ae:	4b99      	ldr	r3, [pc, #612]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d005      	beq.n	80028c6 <HAL_RCC_OscConfig+0x322>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e253      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c6:	4b93      	ldr	r3, [pc, #588]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	061b      	lsls	r3, r3, #24
 80028d4:	498f      	ldr	r1, [pc, #572]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028da:	e040      	b.n	800295e <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d023      	beq.n	800292c <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028e4:	4b8b      	ldr	r3, [pc, #556]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a8a      	ldr	r2, [pc, #552]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 80028ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7fe ff02 	bl	80016f8 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f8:	f7fe fefe 	bl	80016f8 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e231      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800290a:	4b82      	ldr	r3, [pc, #520]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002916:	4b7f      	ldr	r3, [pc, #508]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	061b      	lsls	r3, r3, #24
 8002924:	497b      	ldr	r1, [pc, #492]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 8002926:	4313      	orrs	r3, r2
 8002928:	604b      	str	r3, [r1, #4]
 800292a:	e018      	b.n	800295e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800292c:	4b79      	ldr	r3, [pc, #484]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a78      	ldr	r2, [pc, #480]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 8002932:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7fe fede 	bl	80016f8 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002940:	f7fe feda 	bl	80016f8 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e20d      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002952:	4b70      	ldr	r3, [pc, #448]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b00      	cmp	r3, #0
 8002968:	d03c      	beq.n	80029e4 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d01c      	beq.n	80029ac <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002972:	4b68      	ldr	r3, [pc, #416]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 8002974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002978:	4a66      	ldr	r2, [pc, #408]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002982:	f7fe feb9 	bl	80016f8 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800298a:	f7fe feb5 	bl	80016f8 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e1e8      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800299c:	4b5d      	ldr	r3, [pc, #372]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 800299e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0ef      	beq.n	800298a <HAL_RCC_OscConfig+0x3e6>
 80029aa:	e01b      	b.n	80029e4 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ac:	4b59      	ldr	r3, [pc, #356]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 80029ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b2:	4a58      	ldr	r2, [pc, #352]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 80029b4:	f023 0301 	bic.w	r3, r3, #1
 80029b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029bc:	f7fe fe9c 	bl	80016f8 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c4:	f7fe fe98 	bl	80016f8 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e1cb      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029d6:	4b4f      	ldr	r3, [pc, #316]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 80029d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1ef      	bne.n	80029c4 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 80a5 	beq.w	8002b3c <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f2:	2300      	movs	r3, #0
 80029f4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029f6:	4b47      	ldr	r3, [pc, #284]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10d      	bne.n	8002a1e <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a02:	4b44      	ldr	r3, [pc, #272]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 8002a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a06:	4a43      	ldr	r2, [pc, #268]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 8002a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a0e:	4b41      	ldr	r3, [pc, #260]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 8002a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a1e:	4b3e      	ldr	r3, [pc, #248]	; (8002b18 <HAL_RCC_OscConfig+0x574>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d118      	bne.n	8002a5c <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a2a:	4b3b      	ldr	r3, [pc, #236]	; (8002b18 <HAL_RCC_OscConfig+0x574>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a3a      	ldr	r2, [pc, #232]	; (8002b18 <HAL_RCC_OscConfig+0x574>)
 8002a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a36:	f7fe fe5f 	bl	80016f8 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a3e:	f7fe fe5b 	bl	80016f8 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e18e      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a50:	4b31      	ldr	r3, [pc, #196]	; (8002b18 <HAL_RCC_OscConfig+0x574>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0f0      	beq.n	8002a3e <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d108      	bne.n	8002a76 <HAL_RCC_OscConfig+0x4d2>
 8002a64:	4b2b      	ldr	r3, [pc, #172]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6a:	4a2a      	ldr	r2, [pc, #168]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a74:	e024      	b.n	8002ac0 <HAL_RCC_OscConfig+0x51c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b05      	cmp	r3, #5
 8002a7c:	d110      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x4fc>
 8002a7e:	4b25      	ldr	r3, [pc, #148]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 8002a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a84:	4a23      	ldr	r2, [pc, #140]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 8002a86:	f043 0304 	orr.w	r3, r3, #4
 8002a8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a8e:	4b21      	ldr	r3, [pc, #132]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 8002a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a94:	4a1f      	ldr	r2, [pc, #124]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a9e:	e00f      	b.n	8002ac0 <HAL_RCC_OscConfig+0x51c>
 8002aa0:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa6:	4a1b      	ldr	r2, [pc, #108]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ab0:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	4a17      	ldr	r2, [pc, #92]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 8002ab8:	f023 0304 	bic.w	r3, r3, #4
 8002abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d016      	beq.n	8002af6 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac8:	f7fe fe16 	bl	80016f8 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad0:	f7fe fe12 	bl	80016f8 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e143      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <HAL_RCC_OscConfig+0x570>)
 8002ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0ed      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x52c>
 8002af4:	e019      	b.n	8002b2a <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af6:	f7fe fdff 	bl	80016f8 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002afc:	e00e      	b.n	8002b1c <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afe:	f7fe fdfb 	bl	80016f8 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d905      	bls.n	8002b1c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e12c      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
 8002b14:	40021000 	.word	0x40021000
 8002b18:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b1c:	4b96      	ldr	r3, [pc, #600]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1e9      	bne.n	8002afe <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b2a:	7ffb      	ldrb	r3, [r7, #31]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d105      	bne.n	8002b3c <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b30:	4b91      	ldr	r3, [pc, #580]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b34:	4a90      	ldr	r2, [pc, #576]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0320 	and.w	r3, r3, #32
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d03c      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01c      	beq.n	8002b8a <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b50:	4b89      	ldr	r3, [pc, #548]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002b52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b56:	4a88      	ldr	r2, [pc, #544]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b60:	f7fe fdca 	bl	80016f8 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b68:	f7fe fdc6 	bl	80016f8 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e0f9      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b7a:	4b7f      	ldr	r3, [pc, #508]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002b7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0ef      	beq.n	8002b68 <HAL_RCC_OscConfig+0x5c4>
 8002b88:	e01b      	b.n	8002bc2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b8a:	4b7b      	ldr	r3, [pc, #492]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002b8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b90:	4a79      	ldr	r2, [pc, #484]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002b92:	f023 0301 	bic.w	r3, r3, #1
 8002b96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9a:	f7fe fdad 	bl	80016f8 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ba2:	f7fe fda9 	bl	80016f8 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e0dc      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bb4:	4b70      	ldr	r3, [pc, #448]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1ef      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 80d0 	beq.w	8002d6c <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	2b0c      	cmp	r3, #12
 8002bd0:	f000 808d 	beq.w	8002cee <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d15a      	bne.n	8002c92 <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bdc:	4b66      	ldr	r3, [pc, #408]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a65      	ldr	r2, [pc, #404]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002be2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be8:	f7fe fd86 	bl	80016f8 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf0:	f7fe fd82 	bl	80016f8 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e0b5      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c02:	4b5d      	ldr	r3, [pc, #372]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f0      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c0e:	4b5a      	ldr	r3, [pc, #360]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	4b5a      	ldr	r3, [pc, #360]	; (8002d7c <HAL_RCC_OscConfig+0x7d8>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c1e:	3a01      	subs	r2, #1
 8002c20:	0112      	lsls	r2, r2, #4
 8002c22:	4311      	orrs	r1, r2
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c28:	0212      	lsls	r2, r2, #8
 8002c2a:	4311      	orrs	r1, r2
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c30:	0852      	lsrs	r2, r2, #1
 8002c32:	3a01      	subs	r2, #1
 8002c34:	0552      	lsls	r2, r2, #21
 8002c36:	4311      	orrs	r1, r2
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c3c:	0852      	lsrs	r2, r2, #1
 8002c3e:	3a01      	subs	r2, #1
 8002c40:	0652      	lsls	r2, r2, #25
 8002c42:	4311      	orrs	r1, r2
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c48:	06d2      	lsls	r2, r2, #27
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	494a      	ldr	r1, [pc, #296]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c52:	4b49      	ldr	r3, [pc, #292]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a48      	ldr	r2, [pc, #288]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002c58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c5c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c5e:	4b46      	ldr	r3, [pc, #280]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	4a45      	ldr	r2, [pc, #276]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002c64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c68:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6a:	f7fe fd45 	bl	80016f8 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c72:	f7fe fd41 	bl	80016f8 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e074      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c84:	4b3c      	ldr	r3, [pc, #240]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x6ce>
 8002c90:	e06c      	b.n	8002d6c <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c92:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a38      	ldr	r2, [pc, #224]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002c98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c9c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002c9e:	4b36      	ldr	r3, [pc, #216]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d105      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002caa:	4b33      	ldr	r3, [pc, #204]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	4a32      	ldr	r2, [pc, #200]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002cb0:	f023 0303 	bic.w	r3, r3, #3
 8002cb4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cb6:	4b30      	ldr	r3, [pc, #192]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	4a2f      	ldr	r2, [pc, #188]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002cbc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc6:	f7fe fd17 	bl	80016f8 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cce:	f7fe fd13 	bl	80016f8 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e046      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ce0:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f0      	bne.n	8002cce <HAL_RCC_OscConfig+0x72a>
 8002cec:	e03e      	b.n	8002d6c <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e039      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002cfa:	4b1f      	ldr	r3, [pc, #124]	; (8002d78 <HAL_RCC_OscConfig+0x7d4>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f003 0203 	and.w	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d12c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d123      	bne.n	8002d68 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2a:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d11b      	bne.n	8002d68 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3a:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d113      	bne.n	8002d68 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d109      	bne.n	8002d68 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	085b      	lsrs	r3, r3, #1
 8002d60:	3b01      	subs	r3, #1
 8002d62:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3720      	adds	r7, #32
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	019d800c 	.word	0x019d800c

08002d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e10f      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d98:	4b89      	ldr	r3, [pc, #548]	; (8002fc0 <HAL_RCC_ClockConfig+0x240>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d910      	bls.n	8002dc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da6:	4b86      	ldr	r3, [pc, #536]	; (8002fc0 <HAL_RCC_ClockConfig+0x240>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 020f 	bic.w	r2, r3, #15
 8002dae:	4984      	ldr	r1, [pc, #528]	; (8002fc0 <HAL_RCC_ClockConfig+0x240>)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db6:	4b82      	ldr	r3, [pc, #520]	; (8002fc0 <HAL_RCC_ClockConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d001      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0f7      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 8089 	beq.w	8002ee8 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d133      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dde:	4b79      	ldr	r3, [pc, #484]	; (8002fc4 <HAL_RCC_ClockConfig+0x244>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e0e4      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002dee:	f000 fa0f 	bl	8003210 <RCC_GetSysClockFreqFromPLLSource>
 8002df2:	4602      	mov	r2, r0
 8002df4:	4b74      	ldr	r3, [pc, #464]	; (8002fc8 <HAL_RCC_ClockConfig+0x248>)
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d955      	bls.n	8002ea6 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002dfa:	4b72      	ldr	r3, [pc, #456]	; (8002fc4 <HAL_RCC_ClockConfig+0x244>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10a      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e06:	4b6f      	ldr	r3, [pc, #444]	; (8002fc4 <HAL_RCC_ClockConfig+0x244>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e0e:	4a6d      	ldr	r2, [pc, #436]	; (8002fc4 <HAL_RCC_ClockConfig+0x244>)
 8002e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	e044      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d03e      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x126>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d13a      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e30:	4b64      	ldr	r3, [pc, #400]	; (8002fc4 <HAL_RCC_ClockConfig+0x244>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e38:	4a62      	ldr	r2, [pc, #392]	; (8002fc4 <HAL_RCC_ClockConfig+0x244>)
 8002e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e3e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	e02f      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d107      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e4e:	4b5d      	ldr	r3, [pc, #372]	; (8002fc4 <HAL_RCC_ClockConfig+0x244>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d115      	bne.n	8002e86 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e0ac      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d107      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e66:	4b57      	ldr	r3, [pc, #348]	; (8002fc4 <HAL_RCC_ClockConfig+0x244>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e0a0      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e76:	4b53      	ldr	r3, [pc, #332]	; (8002fc4 <HAL_RCC_ClockConfig+0x244>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e098      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002e86:	f000 f8a7 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	4b4e      	ldr	r3, [pc, #312]	; (8002fc8 <HAL_RCC_ClockConfig+0x248>)
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d909      	bls.n	8002ea6 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e92:	4b4c      	ldr	r3, [pc, #304]	; (8002fc4 <HAL_RCC_ClockConfig+0x244>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e9a:	4a4a      	ldr	r2, [pc, #296]	; (8002fc4 <HAL_RCC_ClockConfig+0x244>)
 8002e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002ea2:	2380      	movs	r3, #128	; 0x80
 8002ea4:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ea6:	4b47      	ldr	r3, [pc, #284]	; (8002fc4 <HAL_RCC_ClockConfig+0x244>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f023 0203 	bic.w	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4944      	ldr	r1, [pc, #272]	; (8002fc4 <HAL_RCC_ClockConfig+0x244>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb8:	f7fe fc1e 	bl	80016f8 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebe:	e00a      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec0:	f7fe fc1a 	bl	80016f8 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e070      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed6:	4b3b      	ldr	r3, [pc, #236]	; (8002fc4 <HAL_RCC_ClockConfig+0x244>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 020c 	and.w	r2, r3, #12
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d1eb      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d009      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef4:	4b33      	ldr	r3, [pc, #204]	; (8002fc4 <HAL_RCC_ClockConfig+0x244>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	4930      	ldr	r1, [pc, #192]	; (8002fc4 <HAL_RCC_ClockConfig+0x244>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	608b      	str	r3, [r1, #8]
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_ClockConfig+0x19a>
  }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2b80      	cmp	r3, #128	; 0x80
 8002f0c:	d105      	bne.n	8002f1a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f0e:	4b2d      	ldr	r3, [pc, #180]	; (8002fc4 <HAL_RCC_ClockConfig+0x244>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	4a2c      	ldr	r2, [pc, #176]	; (8002fc4 <HAL_RCC_ClockConfig+0x244>)
 8002f14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f18:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f1a:	4b29      	ldr	r3, [pc, #164]	; (8002fc0 <HAL_RCC_ClockConfig+0x240>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d210      	bcs.n	8002f4a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f28:	4b25      	ldr	r3, [pc, #148]	; (8002fc0 <HAL_RCC_ClockConfig+0x240>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f023 020f 	bic.w	r2, r3, #15
 8002f30:	4923      	ldr	r1, [pc, #140]	; (8002fc0 <HAL_RCC_ClockConfig+0x240>)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f38:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <HAL_RCC_ClockConfig+0x240>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 030f 	and.w	r3, r3, #15
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d001      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e036      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f56:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <HAL_RCC_ClockConfig+0x244>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	4918      	ldr	r1, [pc, #96]	; (8002fc4 <HAL_RCC_ClockConfig+0x244>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d009      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f74:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <HAL_RCC_ClockConfig+0x244>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4910      	ldr	r1, [pc, #64]	; (8002fc4 <HAL_RCC_ClockConfig+0x244>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f88:	f000 f826 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8002f8c:	4601      	mov	r1, r0
 8002f8e:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <HAL_RCC_ClockConfig+0x244>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	091b      	lsrs	r3, r3, #4
 8002f94:	f003 030f 	and.w	r3, r3, #15
 8002f98:	4a0c      	ldr	r2, [pc, #48]	; (8002fcc <HAL_RCC_ClockConfig+0x24c>)
 8002f9a:	5cd3      	ldrb	r3, [r2, r3]
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	fa21 f303 	lsr.w	r3, r1, r3
 8002fa4:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <HAL_RCC_ClockConfig+0x250>)
 8002fa6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <HAL_RCC_ClockConfig+0x254>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fe fb57 	bl	8001660 <HAL_InitTick>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	73fb      	strb	r3, [r7, #15]

  return status;
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40022000 	.word	0x40022000
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	04c4b400 	.word	0x04c4b400
 8002fcc:	0807f4ac 	.word	0x0807f4ac
 8002fd0:	20000000 	.word	0x20000000
 8002fd4:	20000004 	.word	0x20000004

08002fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	; 0x24
 8002fdc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fe6:	4b3d      	ldr	r3, [pc, #244]	; (80030dc <HAL_RCC_GetSysClockFreq+0x104>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ff0:	4b3a      	ldr	r3, [pc, #232]	; (80030dc <HAL_RCC_GetSysClockFreq+0x104>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <HAL_RCC_GetSysClockFreq+0x34>
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2b0c      	cmp	r3, #12
 8003004:	d121      	bne.n	800304a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d11e      	bne.n	800304a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800300c:	4b33      	ldr	r3, [pc, #204]	; (80030dc <HAL_RCC_GetSysClockFreq+0x104>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d107      	bne.n	8003028 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003018:	4b30      	ldr	r3, [pc, #192]	; (80030dc <HAL_RCC_GetSysClockFreq+0x104>)
 800301a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800301e:	0a1b      	lsrs	r3, r3, #8
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	61fb      	str	r3, [r7, #28]
 8003026:	e005      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003028:	4b2c      	ldr	r3, [pc, #176]	; (80030dc <HAL_RCC_GetSysClockFreq+0x104>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003034:	4a2a      	ldr	r2, [pc, #168]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800303c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10d      	bne.n	8003060 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003048:	e00a      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b04      	cmp	r3, #4
 800304e:	d102      	bne.n	8003056 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003050:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003052:	61bb      	str	r3, [r7, #24]
 8003054:	e004      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	2b08      	cmp	r3, #8
 800305a:	d101      	bne.n	8003060 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800305c:	4b22      	ldr	r3, [pc, #136]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x110>)
 800305e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	2b0c      	cmp	r3, #12
 8003064:	d133      	bne.n	80030ce <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003066:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <HAL_RCC_GetSysClockFreq+0x104>)
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d002      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0xa4>
 8003076:	2b03      	cmp	r3, #3
 8003078:	d003      	beq.n	8003082 <HAL_RCC_GetSysClockFreq+0xaa>
 800307a:	e005      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800307c:	4b19      	ldr	r3, [pc, #100]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800307e:	617b      	str	r3, [r7, #20]
      break;
 8003080:	e005      	b.n	800308e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003082:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003084:	617b      	str	r3, [r7, #20]
      break;
 8003086:	e002      	b.n	800308e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	617b      	str	r3, [r7, #20]
      break;
 800308c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800308e:	4b13      	ldr	r3, [pc, #76]	; (80030dc <HAL_RCC_GetSysClockFreq+0x104>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	091b      	lsrs	r3, r3, #4
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	3301      	adds	r3, #1
 800309a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800309c:	4b0f      	ldr	r3, [pc, #60]	; (80030dc <HAL_RCC_GetSysClockFreq+0x104>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	0a1b      	lsrs	r3, r3, #8
 80030a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	fb02 f203 	mul.w	r2, r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030b4:	4b09      	ldr	r3, [pc, #36]	; (80030dc <HAL_RCC_GetSysClockFreq+0x104>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	0e5b      	lsrs	r3, r3, #25
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	3301      	adds	r3, #1
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030cc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030ce:	69bb      	ldr	r3, [r7, #24]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3724      	adds	r7, #36	; 0x24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	40021000 	.word	0x40021000
 80030e0:	0807f4c4 	.word	0x0807f4c4
 80030e4:	00f42400 	.word	0x00f42400
 80030e8:	007a1200 	.word	0x007a1200

080030ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f0:	4b03      	ldr	r3, [pc, #12]	; (8003100 <HAL_RCC_GetHCLKFreq+0x14>)
 80030f2:	681b      	ldr	r3, [r3, #0]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	20000000 	.word	0x20000000

08003104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003108:	f7ff fff0 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 800310c:	4601      	mov	r1, r0
 800310e:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	4a04      	ldr	r2, [pc, #16]	; (800312c <HAL_RCC_GetPCLK1Freq+0x28>)
 800311a:	5cd3      	ldrb	r3, [r2, r3]
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003124:	4618      	mov	r0, r3
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40021000 	.word	0x40021000
 800312c:	0807f4bc 	.word	0x0807f4bc

08003130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003134:	f7ff ffda 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 8003138:	4601      	mov	r1, r0
 800313a:	4b06      	ldr	r3, [pc, #24]	; (8003154 <HAL_RCC_GetPCLK2Freq+0x24>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	0adb      	lsrs	r3, r3, #11
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	4a04      	ldr	r2, [pc, #16]	; (8003158 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003146:	5cd3      	ldrb	r3, [r2, r3]
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003150:	4618      	mov	r0, r3
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40021000 	.word	0x40021000
 8003158:	0807f4bc 	.word	0x0807f4bc

0800315c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003164:	2300      	movs	r3, #0
 8003166:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003168:	4b27      	ldr	r3, [pc, #156]	; (8003208 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800316a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003174:	f7ff f932 	bl	80023dc <HAL_PWREx_GetVoltageRange>
 8003178:	6178      	str	r0, [r7, #20]
 800317a:	e014      	b.n	80031a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800317c:	4b22      	ldr	r3, [pc, #136]	; (8003208 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800317e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003180:	4a21      	ldr	r2, [pc, #132]	; (8003208 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003186:	6593      	str	r3, [r2, #88]	; 0x58
 8003188:	4b1f      	ldr	r3, [pc, #124]	; (8003208 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800318a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003194:	f7ff f922 	bl	80023dc <HAL_PWREx_GetVoltageRange>
 8003198:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800319a:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800319c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319e:	4a1a      	ldr	r2, [pc, #104]	; (8003208 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ac:	d10b      	bne.n	80031c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b80      	cmp	r3, #128	; 0x80
 80031b2:	d913      	bls.n	80031dc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2ba0      	cmp	r3, #160	; 0xa0
 80031b8:	d902      	bls.n	80031c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031ba:	2302      	movs	r3, #2
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	e00d      	b.n	80031dc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031c0:	2301      	movs	r3, #1
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	e00a      	b.n	80031dc <RCC_SetFlashLatencyFromMSIRange+0x80>
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b7f      	cmp	r3, #127	; 0x7f
 80031ca:	d902      	bls.n	80031d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80031cc:	2302      	movs	r3, #2
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	e004      	b.n	80031dc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b70      	cmp	r3, #112	; 0x70
 80031d6:	d101      	bne.n	80031dc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031d8:	2301      	movs	r3, #1
 80031da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f023 020f 	bic.w	r2, r3, #15
 80031e4:	4909      	ldr	r1, [pc, #36]	; (800320c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031ec:	4b07      	ldr	r3, [pc, #28]	; (800320c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d001      	beq.n	80031fe <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40021000 	.word	0x40021000
 800320c:	40022000 	.word	0x40022000

08003210 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800321a:	4b2d      	ldr	r3, [pc, #180]	; (80032d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	2b01      	cmp	r3, #1
 8003224:	d118      	bne.n	8003258 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003226:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d107      	bne.n	8003242 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003232:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003238:	0a1b      	lsrs	r3, r3, #8
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	e005      	b.n	800324e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003242:	4b23      	ldr	r3, [pc, #140]	; (80032d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	091b      	lsrs	r3, r3, #4
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800324e:	4a21      	ldr	r2, [pc, #132]	; (80032d4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003256:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003258:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d002      	beq.n	800326e <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003268:	2b03      	cmp	r3, #3
 800326a:	d003      	beq.n	8003274 <RCC_GetSysClockFreqFromPLLSource+0x64>
 800326c:	e005      	b.n	800327a <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800326e:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003270:	613b      	str	r3, [r7, #16]
    break;
 8003272:	e005      	b.n	8003280 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003274:	4b19      	ldr	r3, [pc, #100]	; (80032dc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003276:	613b      	str	r3, [r7, #16]
    break;
 8003278:	e002      	b.n	8003280 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	613b      	str	r3, [r7, #16]
    break;
 800327e:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003280:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	3301      	adds	r3, #1
 800328c:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800328e:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	0a1b      	lsrs	r3, r3, #8
 8003294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	fb02 f203 	mul.w	r2, r2, r3
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a4:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032a6:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	0e5b      	lsrs	r3, r3, #25
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	3301      	adds	r3, #1
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80032be:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80032c0:	683b      	ldr	r3, [r7, #0]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	371c      	adds	r7, #28
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40021000 	.word	0x40021000
 80032d4:	0807f4c4 	.word	0x0807f4c4
 80032d8:	00f42400 	.word	0x00f42400
 80032dc:	007a1200 	.word	0x007a1200

080032e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032e8:	2300      	movs	r3, #0
 80032ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032ec:	2300      	movs	r3, #0
 80032ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d03d      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003300:	2b40      	cmp	r3, #64	; 0x40
 8003302:	d00b      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003304:	2b40      	cmp	r3, #64	; 0x40
 8003306:	d804      	bhi.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00e      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 800330c:	2b20      	cmp	r3, #32
 800330e:	d015      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003310:	e01d      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003312:	2b60      	cmp	r3, #96	; 0x60
 8003314:	d01e      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003316:	2b80      	cmp	r3, #128	; 0x80
 8003318:	d01c      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800331a:	e018      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800331c:	4b86      	ldr	r3, [pc, #536]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4a85      	ldr	r2, [pc, #532]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003326:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003328:	e015      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3304      	adds	r3, #4
 800332e:	2100      	movs	r1, #0
 8003330:	4618      	mov	r0, r3
 8003332:	f000 fb0d 	bl	8003950 <RCCEx_PLLSAI1_Config>
 8003336:	4603      	mov	r3, r0
 8003338:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800333a:	e00c      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3320      	adds	r3, #32
 8003340:	2100      	movs	r1, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fbf4 	bl	8003b30 <RCCEx_PLLSAI2_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800334c:	e003      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	74fb      	strb	r3, [r7, #19]
      break;
 8003352:	e000      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003356:	7cfb      	ldrb	r3, [r7, #19]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10b      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800335c:	4b76      	ldr	r3, [pc, #472]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800335e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003362:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800336a:	4973      	ldr	r1, [pc, #460]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800336c:	4313      	orrs	r3, r2
 800336e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003372:	e001      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003374:	7cfb      	ldrb	r3, [r7, #19]
 8003376:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d042      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800338c:	d00f      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xce>
 800338e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003392:	d805      	bhi.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003394:	2b00      	cmp	r3, #0
 8003396:	d011      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800339c:	d017      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xee>
 800339e:	e01f      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80033a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033a4:	d01f      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033aa:	d01c      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033ac:	e018      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033ae:	4b62      	ldr	r3, [pc, #392]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	4a61      	ldr	r2, [pc, #388]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033ba:	e015      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3304      	adds	r3, #4
 80033c0:	2100      	movs	r1, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fac4 	bl	8003950 <RCCEx_PLLSAI1_Config>
 80033c8:	4603      	mov	r3, r0
 80033ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033cc:	e00c      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3320      	adds	r3, #32
 80033d2:	2100      	movs	r1, #0
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 fbab 	bl	8003b30 <RCCEx_PLLSAI2_Config>
 80033da:	4603      	mov	r3, r0
 80033dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033de:	e003      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	74fb      	strb	r3, [r7, #19]
      break;
 80033e4:	e000      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80033e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033e8:	7cfb      	ldrb	r3, [r7, #19]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10b      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033ee:	4b52      	ldr	r3, [pc, #328]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fc:	494e      	ldr	r1, [pc, #312]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003404:	e001      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003406:	7cfb      	ldrb	r3, [r7, #19]
 8003408:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 809f 	beq.w	8003556 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003418:	2300      	movs	r3, #0
 800341a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800341c:	4b46      	ldr	r3, [pc, #280]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800341e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800342c:	2300      	movs	r3, #0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00d      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003432:	4b41      	ldr	r3, [pc, #260]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003436:	4a40      	ldr	r2, [pc, #256]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800343c:	6593      	str	r3, [r2, #88]	; 0x58
 800343e:	4b3e      	ldr	r3, [pc, #248]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800344a:	2301      	movs	r3, #1
 800344c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800344e:	4b3b      	ldr	r3, [pc, #236]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a3a      	ldr	r2, [pc, #232]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003458:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800345a:	f7fe f94d 	bl	80016f8 <HAL_GetTick>
 800345e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003460:	e009      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003462:	f7fe f949 	bl	80016f8 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d902      	bls.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	74fb      	strb	r3, [r7, #19]
        break;
 8003474:	e005      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003476:	4b31      	ldr	r3, [pc, #196]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0ef      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003482:	7cfb      	ldrb	r3, [r7, #19]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d15b      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003488:	4b2b      	ldr	r3, [pc, #172]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003492:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d01f      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d019      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034a6:	4b24      	ldr	r3, [pc, #144]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034b2:	4b21      	ldr	r3, [pc, #132]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b8:	4a1f      	ldr	r2, [pc, #124]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034c2:	4b1d      	ldr	r3, [pc, #116]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c8:	4a1b      	ldr	r2, [pc, #108]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034d2:	4a19      	ldr	r2, [pc, #100]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d016      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fe f908 	bl	80016f8 <HAL_GetTick>
 80034e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ea:	e00b      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ec:	f7fe f904 	bl	80016f8 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d902      	bls.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	74fb      	strb	r3, [r7, #19]
            break;
 8003502:	e006      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003504:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0ec      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8003512:	7cfb      	ldrb	r3, [r7, #19]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10c      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003518:	4b07      	ldr	r3, [pc, #28]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003528:	4903      	ldr	r1, [pc, #12]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003530:	e008      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003532:	7cfb      	ldrb	r3, [r7, #19]
 8003534:	74bb      	strb	r3, [r7, #18]
 8003536:	e005      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003538:	40021000 	.word	0x40021000
 800353c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003540:	7cfb      	ldrb	r3, [r7, #19]
 8003542:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003544:	7c7b      	ldrb	r3, [r7, #17]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d105      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354a:	4ba0      	ldr	r3, [pc, #640]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354e:	4a9f      	ldr	r2, [pc, #636]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003554:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003562:	4b9a      	ldr	r3, [pc, #616]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003568:	f023 0203 	bic.w	r2, r3, #3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003570:	4996      	ldr	r1, [pc, #600]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003584:	4b91      	ldr	r3, [pc, #580]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358a:	f023 020c 	bic.w	r2, r3, #12
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	498e      	ldr	r1, [pc, #568]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035a6:	4b89      	ldr	r3, [pc, #548]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b4:	4985      	ldr	r1, [pc, #532]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035c8:	4b80      	ldr	r3, [pc, #512]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d6:	497d      	ldr	r1, [pc, #500]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035ea:	4b78      	ldr	r3, [pc, #480]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f8:	4974      	ldr	r1, [pc, #464]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800360c:	4b6f      	ldr	r3, [pc, #444]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003612:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800361a:	496c      	ldr	r1, [pc, #432]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800362e:	4b67      	ldr	r3, [pc, #412]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003634:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800363c:	4963      	ldr	r1, [pc, #396]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003650:	4b5e      	ldr	r3, [pc, #376]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800365e:	495b      	ldr	r1, [pc, #364]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003672:	4b56      	ldr	r3, [pc, #344]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003678:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003680:	4952      	ldr	r1, [pc, #328]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003694:	4b4d      	ldr	r3, [pc, #308]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a2:	494a      	ldr	r1, [pc, #296]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036b6:	4b45      	ldr	r3, [pc, #276]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c4:	4941      	ldr	r1, [pc, #260]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036d8:	4b3c      	ldr	r3, [pc, #240]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036de:	f023 0203 	bic.w	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e6:	4939      	ldr	r1, [pc, #228]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d028      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036fa:	4b34      	ldr	r3, [pc, #208]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003700:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003708:	4930      	ldr	r1, [pc, #192]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003714:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003718:	d106      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800371a:	4b2c      	ldr	r3, [pc, #176]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	4a2b      	ldr	r2, [pc, #172]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003720:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003724:	60d3      	str	r3, [r2, #12]
 8003726:	e011      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800372c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003730:	d10c      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3304      	adds	r3, #4
 8003736:	2101      	movs	r1, #1
 8003738:	4618      	mov	r0, r3
 800373a:	f000 f909 	bl	8003950 <RCCEx_PLLSAI1_Config>
 800373e:	4603      	mov	r3, r0
 8003740:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003742:	7cfb      	ldrb	r3, [r7, #19]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003748:	7cfb      	ldrb	r3, [r7, #19]
 800374a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d04d      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800375c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003760:	d108      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003762:	4b1a      	ldr	r3, [pc, #104]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003764:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003768:	4a18      	ldr	r2, [pc, #96]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800376e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003772:	e012      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003774:	4b15      	ldr	r3, [pc, #84]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003776:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800377a:	4a14      	ldr	r2, [pc, #80]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003780:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003784:	4b11      	ldr	r3, [pc, #68]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003792:	490e      	ldr	r1, [pc, #56]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800379e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037a2:	d106      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037a4:	4b09      	ldr	r3, [pc, #36]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	4a08      	ldr	r2, [pc, #32]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037ae:	60d3      	str	r3, [r2, #12]
 80037b0:	e020      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037ba:	d109      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	4a02      	ldr	r2, [pc, #8]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c6:	60d3      	str	r3, [r2, #12]
 80037c8:	e014      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037d8:	d10c      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3304      	adds	r3, #4
 80037de:	2101      	movs	r1, #1
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 f8b5 	bl	8003950 <RCCEx_PLLSAI1_Config>
 80037e6:	4603      	mov	r3, r0
 80037e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037ea:	7cfb      	ldrb	r3, [r7, #19]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80037f0:	7cfb      	ldrb	r3, [r7, #19]
 80037f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d028      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003800:	4b4a      	ldr	r3, [pc, #296]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003806:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800380e:	4947      	ldr	r1, [pc, #284]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800381a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800381e:	d106      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003820:	4b42      	ldr	r3, [pc, #264]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	4a41      	ldr	r2, [pc, #260]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003826:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800382a:	60d3      	str	r3, [r2, #12]
 800382c:	e011      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003832:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003836:	d10c      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3304      	adds	r3, #4
 800383c:	2101      	movs	r1, #1
 800383e:	4618      	mov	r0, r3
 8003840:	f000 f886 	bl	8003950 <RCCEx_PLLSAI1_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003848:	7cfb      	ldrb	r3, [r7, #19]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 800384e:	7cfb      	ldrb	r3, [r7, #19]
 8003850:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d01e      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800385e:	4b33      	ldr	r3, [pc, #204]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003864:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800386e:	492f      	ldr	r1, [pc, #188]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800387c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003880:	d10c      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3304      	adds	r3, #4
 8003886:	2102      	movs	r1, #2
 8003888:	4618      	mov	r0, r3
 800388a:	f000 f861 	bl	8003950 <RCCEx_PLLSAI1_Config>
 800388e:	4603      	mov	r3, r0
 8003890:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003892:	7cfb      	ldrb	r3, [r7, #19]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003898:	7cfb      	ldrb	r3, [r7, #19]
 800389a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00b      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038a8:	4b20      	ldr	r3, [pc, #128]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038ae:	f023 0204 	bic.w	r2, r3, #4
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038b8:	491c      	ldr	r1, [pc, #112]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00b      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80038cc:	4b17      	ldr	r3, [pc, #92]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038d2:	f023 0218 	bic.w	r2, r3, #24
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038dc:	4913      	ldr	r1, [pc, #76]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d017      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80038f0:	4b0e      	ldr	r3, [pc, #56]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003900:	490a      	ldr	r1, [pc, #40]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800390e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003912:	d105      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	4a04      	ldr	r2, [pc, #16]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800391a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800391e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003920:	7cbb      	ldrb	r3, [r7, #18]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40021000 	.word	0x40021000

08003930 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003934:	4b05      	ldr	r3, [pc, #20]	; (800394c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a04      	ldr	r2, [pc, #16]	; (800394c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800393a:	f043 0304 	orr.w	r3, r3, #4
 800393e:	6013      	str	r3, [r2, #0]
}
 8003940:	bf00      	nop
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40021000 	.word	0x40021000

08003950 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800395e:	4b70      	ldr	r3, [pc, #448]	; (8003b20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00e      	beq.n	8003988 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800396a:	4b6d      	ldr	r3, [pc, #436]	; (8003b20 <RCCEx_PLLSAI1_Config+0x1d0>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f003 0203 	and.w	r2, r3, #3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d103      	bne.n	8003982 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
       ||
 800397e:	2b00      	cmp	r3, #0
 8003980:	d13f      	bne.n	8003a02 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
 8003986:	e03c      	b.n	8003a02 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b02      	cmp	r3, #2
 800398e:	d00c      	beq.n	80039aa <RCCEx_PLLSAI1_Config+0x5a>
 8003990:	2b03      	cmp	r3, #3
 8003992:	d013      	beq.n	80039bc <RCCEx_PLLSAI1_Config+0x6c>
 8003994:	2b01      	cmp	r3, #1
 8003996:	d120      	bne.n	80039da <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003998:	4b61      	ldr	r3, [pc, #388]	; (8003b20 <RCCEx_PLLSAI1_Config+0x1d0>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d11d      	bne.n	80039e0 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a8:	e01a      	b.n	80039e0 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039aa:	4b5d      	ldr	r3, [pc, #372]	; (8003b20 <RCCEx_PLLSAI1_Config+0x1d0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d116      	bne.n	80039e4 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ba:	e013      	b.n	80039e4 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039bc:	4b58      	ldr	r3, [pc, #352]	; (8003b20 <RCCEx_PLLSAI1_Config+0x1d0>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10f      	bne.n	80039e8 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039c8:	4b55      	ldr	r3, [pc, #340]	; (8003b20 <RCCEx_PLLSAI1_Config+0x1d0>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d109      	bne.n	80039e8 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039d8:	e006      	b.n	80039e8 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	73fb      	strb	r3, [r7, #15]
      break;
 80039de:	e004      	b.n	80039ea <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80039e0:	bf00      	nop
 80039e2:	e002      	b.n	80039ea <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80039e4:	bf00      	nop
 80039e6:	e000      	b.n	80039ea <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80039e8:	bf00      	nop
    }

    if(status == HAL_OK)
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d108      	bne.n	8003a02 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80039f0:	4b4b      	ldr	r3, [pc, #300]	; (8003b20 <RCCEx_PLLSAI1_Config+0x1d0>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f023 0203 	bic.w	r2, r3, #3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4948      	ldr	r1, [pc, #288]	; (8003b20 <RCCEx_PLLSAI1_Config+0x1d0>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f040 8086 	bne.w	8003b16 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a0a:	4b45      	ldr	r3, [pc, #276]	; (8003b20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a44      	ldr	r2, [pc, #272]	; (8003b20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a16:	f7fd fe6f 	bl	80016f8 <HAL_GetTick>
 8003a1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a1c:	e009      	b.n	8003a32 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a1e:	f7fd fe6b 	bl	80016f8 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d902      	bls.n	8003a32 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	73fb      	strb	r3, [r7, #15]
        break;
 8003a30:	e005      	b.n	8003a3e <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a32:	4b3b      	ldr	r3, [pc, #236]	; (8003b20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1ef      	bne.n	8003a1e <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d168      	bne.n	8003b16 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d113      	bne.n	8003a72 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a4a:	4b35      	ldr	r3, [pc, #212]	; (8003b20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a4c:	691a      	ldr	r2, [r3, #16]
 8003a4e:	4b35      	ldr	r3, [pc, #212]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1d4>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6892      	ldr	r2, [r2, #8]
 8003a56:	0211      	lsls	r1, r2, #8
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	68d2      	ldr	r2, [r2, #12]
 8003a5c:	06d2      	lsls	r2, r2, #27
 8003a5e:	4311      	orrs	r1, r2
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6852      	ldr	r2, [r2, #4]
 8003a64:	3a01      	subs	r2, #1
 8003a66:	0112      	lsls	r2, r2, #4
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	492d      	ldr	r1, [pc, #180]	; (8003b20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	610b      	str	r3, [r1, #16]
 8003a70:	e02d      	b.n	8003ace <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d115      	bne.n	8003aa4 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a78:	4b29      	ldr	r3, [pc, #164]	; (8003b20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	4b2a      	ldr	r3, [pc, #168]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6892      	ldr	r2, [r2, #8]
 8003a84:	0211      	lsls	r1, r2, #8
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6912      	ldr	r2, [r2, #16]
 8003a8a:	0852      	lsrs	r2, r2, #1
 8003a8c:	3a01      	subs	r2, #1
 8003a8e:	0552      	lsls	r2, r2, #21
 8003a90:	4311      	orrs	r1, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6852      	ldr	r2, [r2, #4]
 8003a96:	3a01      	subs	r2, #1
 8003a98:	0112      	lsls	r2, r2, #4
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	4920      	ldr	r1, [pc, #128]	; (8003b20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	610b      	str	r3, [r1, #16]
 8003aa2:	e014      	b.n	8003ace <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003aa4:	4b1e      	ldr	r3, [pc, #120]	; (8003b20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	4b20      	ldr	r3, [pc, #128]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6892      	ldr	r2, [r2, #8]
 8003ab0:	0211      	lsls	r1, r2, #8
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6952      	ldr	r2, [r2, #20]
 8003ab6:	0852      	lsrs	r2, r2, #1
 8003ab8:	3a01      	subs	r2, #1
 8003aba:	0652      	lsls	r2, r2, #25
 8003abc:	4311      	orrs	r1, r2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6852      	ldr	r2, [r2, #4]
 8003ac2:	3a01      	subs	r2, #1
 8003ac4:	0112      	lsls	r2, r2, #4
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	4915      	ldr	r1, [pc, #84]	; (8003b20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ace:	4b14      	ldr	r3, [pc, #80]	; (8003b20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a13      	ldr	r2, [pc, #76]	; (8003b20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ad4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ad8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ada:	f7fd fe0d 	bl	80016f8 <HAL_GetTick>
 8003ade:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ae0:	e009      	b.n	8003af6 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ae2:	f7fd fe09 	bl	80016f8 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d902      	bls.n	8003af6 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	73fb      	strb	r3, [r7, #15]
          break;
 8003af4:	e005      	b.n	8003b02 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003af6:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0ef      	beq.n	8003ae2 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d106      	bne.n	8003b16 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b08:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	4903      	ldr	r1, [pc, #12]	; (8003b20 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021000 	.word	0x40021000
 8003b24:	07ff800f 	.word	0x07ff800f
 8003b28:	ff9f800f 	.word	0xff9f800f
 8003b2c:	f9ff800f 	.word	0xf9ff800f

08003b30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b3e:	4b70      	ldr	r3, [pc, #448]	; (8003d00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00e      	beq.n	8003b68 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b4a:	4b6d      	ldr	r3, [pc, #436]	; (8003d00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f003 0203 	and.w	r2, r3, #3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d103      	bne.n	8003b62 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
       ||
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d13f      	bne.n	8003be2 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	73fb      	strb	r3, [r7, #15]
 8003b66:	e03c      	b.n	8003be2 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d00c      	beq.n	8003b8a <RCCEx_PLLSAI2_Config+0x5a>
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d013      	beq.n	8003b9c <RCCEx_PLLSAI2_Config+0x6c>
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d120      	bne.n	8003bba <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b78:	4b61      	ldr	r3, [pc, #388]	; (8003d00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d11d      	bne.n	8003bc0 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b88:	e01a      	b.n	8003bc0 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b8a:	4b5d      	ldr	r3, [pc, #372]	; (8003d00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d116      	bne.n	8003bc4 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b9a:	e013      	b.n	8003bc4 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b9c:	4b58      	ldr	r3, [pc, #352]	; (8003d00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10f      	bne.n	8003bc8 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ba8:	4b55      	ldr	r3, [pc, #340]	; (8003d00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d109      	bne.n	8003bc8 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bb8:	e006      	b.n	8003bc8 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	73fb      	strb	r3, [r7, #15]
      break;
 8003bbe:	e004      	b.n	8003bca <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003bc0:	bf00      	nop
 8003bc2:	e002      	b.n	8003bca <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003bc4:	bf00      	nop
 8003bc6:	e000      	b.n	8003bca <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003bc8:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d108      	bne.n	8003be2 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003bd0:	4b4b      	ldr	r3, [pc, #300]	; (8003d00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f023 0203 	bic.w	r2, r3, #3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4948      	ldr	r1, [pc, #288]	; (8003d00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f040 8086 	bne.w	8003cf6 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003bea:	4b45      	ldr	r3, [pc, #276]	; (8003d00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a44      	ldr	r2, [pc, #272]	; (8003d00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf6:	f7fd fd7f 	bl	80016f8 <HAL_GetTick>
 8003bfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bfc:	e009      	b.n	8003c12 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bfe:	f7fd fd7b 	bl	80016f8 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d902      	bls.n	8003c12 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	73fb      	strb	r3, [r7, #15]
        break;
 8003c10:	e005      	b.n	8003c1e <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c12:	4b3b      	ldr	r3, [pc, #236]	; (8003d00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1ef      	bne.n	8003bfe <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d168      	bne.n	8003cf6 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d113      	bne.n	8003c52 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c2a:	4b35      	ldr	r3, [pc, #212]	; (8003d00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c2c:	695a      	ldr	r2, [r3, #20]
 8003c2e:	4b35      	ldr	r3, [pc, #212]	; (8003d04 <RCCEx_PLLSAI2_Config+0x1d4>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6892      	ldr	r2, [r2, #8]
 8003c36:	0211      	lsls	r1, r2, #8
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	68d2      	ldr	r2, [r2, #12]
 8003c3c:	06d2      	lsls	r2, r2, #27
 8003c3e:	4311      	orrs	r1, r2
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6852      	ldr	r2, [r2, #4]
 8003c44:	3a01      	subs	r2, #1
 8003c46:	0112      	lsls	r2, r2, #4
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	492d      	ldr	r1, [pc, #180]	; (8003d00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	614b      	str	r3, [r1, #20]
 8003c50:	e02d      	b.n	8003cae <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d115      	bne.n	8003c84 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c58:	4b29      	ldr	r3, [pc, #164]	; (8003d00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c5a:	695a      	ldr	r2, [r3, #20]
 8003c5c:	4b2a      	ldr	r3, [pc, #168]	; (8003d08 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6892      	ldr	r2, [r2, #8]
 8003c64:	0211      	lsls	r1, r2, #8
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6912      	ldr	r2, [r2, #16]
 8003c6a:	0852      	lsrs	r2, r2, #1
 8003c6c:	3a01      	subs	r2, #1
 8003c6e:	0552      	lsls	r2, r2, #21
 8003c70:	4311      	orrs	r1, r2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6852      	ldr	r2, [r2, #4]
 8003c76:	3a01      	subs	r2, #1
 8003c78:	0112      	lsls	r2, r2, #4
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	4920      	ldr	r1, [pc, #128]	; (8003d00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	614b      	str	r3, [r1, #20]
 8003c82:	e014      	b.n	8003cae <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c84:	4b1e      	ldr	r3, [pc, #120]	; (8003d00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c86:	695a      	ldr	r2, [r3, #20]
 8003c88:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <RCCEx_PLLSAI2_Config+0x1dc>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6892      	ldr	r2, [r2, #8]
 8003c90:	0211      	lsls	r1, r2, #8
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6952      	ldr	r2, [r2, #20]
 8003c96:	0852      	lsrs	r2, r2, #1
 8003c98:	3a01      	subs	r2, #1
 8003c9a:	0652      	lsls	r2, r2, #25
 8003c9c:	4311      	orrs	r1, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6852      	ldr	r2, [r2, #4]
 8003ca2:	3a01      	subs	r2, #1
 8003ca4:	0112      	lsls	r2, r2, #4
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	4915      	ldr	r1, [pc, #84]	; (8003d00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003cae:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a13      	ldr	r2, [pc, #76]	; (8003d00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cba:	f7fd fd1d 	bl	80016f8 <HAL_GetTick>
 8003cbe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cc0:	e009      	b.n	8003cd6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cc2:	f7fd fd19 	bl	80016f8 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d902      	bls.n	8003cd6 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	73fb      	strb	r3, [r7, #15]
          break;
 8003cd4:	e005      	b.n	8003ce2 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cd6:	4b0a      	ldr	r3, [pc, #40]	; (8003d00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0ef      	beq.n	8003cc2 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d106      	bne.n	8003cf6 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ce8:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003cea:	695a      	ldr	r2, [r3, #20]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	4903      	ldr	r1, [pc, #12]	; (8003d00 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40021000 	.word	0x40021000
 8003d04:	07ff800f 	.word	0x07ff800f
 8003d08:	ff9f800f 	.word	0xff9f800f
 8003d0c:	f9ff800f 	.word	0xf9ff800f

08003d10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e07c      	b.n	8003e1c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d106      	bne.n	8003d42 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7fd f943 	bl	8000fc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2202      	movs	r2, #2
 8003d46:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d58:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d62:	d902      	bls.n	8003d6a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	e002      	b.n	8003d70 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d6e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003d78:	d007      	beq.n	8003d8a <HAL_SPI_Init+0x7a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d82:	d002      	beq.n	8003d8a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10b      	bne.n	8003daa <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d9a:	d903      	bls.n	8003da4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	631a      	str	r2, [r3, #48]	; 0x30
 8003da2:	e002      	b.n	8003daa <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	431a      	orrs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	ea42 0103 	orr.w	r1, r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	0c1b      	lsrs	r3, r3, #16
 8003dea:	f003 0204 	and.w	r2, r3, #4
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	ea42 0103 	orr.w	r1, r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->State     = HAL_SPI_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint32_t Size, uint32_t Timeout)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b088      	sub	sp, #32
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
 8003e30:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_SPI_Transmit+0x20>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e140      	b.n	80040c6 <HAL_SPI_Transmit+0x2a2>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e4c:	f7fd fc54 	bl	80016f8 <HAL_GetTick>
 8003e50:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	617b      	str	r3, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d002      	beq.n	8003e68 <HAL_SPI_Transmit+0x44>
  {
    errorcode = HAL_BUSY;
 8003e62:	2302      	movs	r3, #2
 8003e64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e66:	e125      	b.n	80040b4 <HAL_SPI_Transmit+0x290>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_SPI_Transmit+0x50>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d102      	bne.n	8003e7a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e78:	e11c      	b.n	80040b4 <HAL_SPI_Transmit+0x290>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2203      	movs	r2, #3
 8003e7e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxXferSize  = 0U;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  hspi->RxXferCount = 0U;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  hspi->TxISR       = NULL;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->RxISR       = NULL;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec4:	d107      	bne.n	8003ed6 <HAL_SPI_Transmit+0xb2>
  {
    SPI_1LINE_TX(hspi);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ed4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee0:	2b40      	cmp	r3, #64	; 0x40
 8003ee2:	d007      	beq.n	8003ef4 <HAL_SPI_Transmit+0xd0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ef2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003efc:	d946      	bls.n	8003f8c <HAL_SPI_Transmit+0x168>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <HAL_SPI_Transmit+0xe8>
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d13a      	bne.n	8003f82 <HAL_SPI_Transmit+0x15e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f10:	881a      	ldrh	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	1c9a      	adds	r2, r3, #2
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	1e5a      	subs	r2, r3, #1
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f2c:	e029      	b.n	8003f82 <HAL_SPI_Transmit+0x15e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d110      	bne.n	8003f5e <HAL_SPI_Transmit+0x13a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f40:	881a      	ldrh	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	1c9a      	adds	r2, r3, #2
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	1e5a      	subs	r2, r3, #1
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	641a      	str	r2, [r3, #64]	; 0x40
 8003f5c:	e011      	b.n	8003f82 <HAL_SPI_Transmit+0x15e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f5e:	f7fd fbcb 	bl	80016f8 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d803      	bhi.n	8003f76 <HAL_SPI_Transmit+0x152>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f74:	d102      	bne.n	8003f7c <HAL_SPI_Transmit+0x158>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d102      	bne.n	8003f82 <HAL_SPI_Transmit+0x15e>
        {
          errorcode = HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f80:	e098      	b.n	80040b4 <HAL_SPI_Transmit+0x290>
    while (hspi->TxXferCount > 0U)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1d1      	bne.n	8003f2e <HAL_SPI_Transmit+0x10a>
 8003f8a:	e071      	b.n	8004070 <HAL_SPI_Transmit+0x24c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <HAL_SPI_Transmit+0x176>
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d166      	bne.n	8004068 <HAL_SPI_Transmit+0x244>
    {
      if (hspi->TxXferCount > 1U)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d910      	bls.n	8003fc4 <HAL_SPI_Transmit+0x1a0>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	881a      	ldrh	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	1c9a      	adds	r2, r3, #2
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	1e9a      	subs	r2, r3, #2
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	641a      	str	r2, [r3, #64]	; 0x40
 8003fc2:	e051      	b.n	8004068 <HAL_SPI_Transmit+0x244>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	330c      	adds	r3, #12
 8003fce:	7812      	ldrb	r2, [r2, #0]
 8003fd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	1e5a      	subs	r2, r3, #1
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    while (hspi->TxXferCount > 0U)
 8003fe6:	e03f      	b.n	8004068 <HAL_SPI_Transmit+0x244>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d126      	bne.n	8004044 <HAL_SPI_Transmit+0x220>
      {
        if (hspi->TxXferCount > 1U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d910      	bls.n	8004020 <HAL_SPI_Transmit+0x1fc>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004002:	881a      	ldrh	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400e:	1c9a      	adds	r2, r3, #2
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	1e9a      	subs	r2, r3, #2
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	641a      	str	r2, [r3, #64]	; 0x40
 800401e:	e023      	b.n	8004068 <HAL_SPI_Transmit+0x244>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	330c      	adds	r3, #12
 800402a:	7812      	ldrb	r2, [r2, #0]
 800402c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	1e5a      	subs	r2, r3, #1
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	641a      	str	r2, [r3, #64]	; 0x40
 8004042:	e011      	b.n	8004068 <HAL_SPI_Transmit+0x244>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004044:	f7fd fb58 	bl	80016f8 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d803      	bhi.n	800405c <HAL_SPI_Transmit+0x238>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405a:	d102      	bne.n	8004062 <HAL_SPI_Transmit+0x23e>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d102      	bne.n	8004068 <HAL_SPI_Transmit+0x244>
        {
          errorcode = HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004066:	e025      	b.n	80040b4 <HAL_SPI_Transmit+0x290>
    while (hspi->TxXferCount > 0U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1bb      	bne.n	8003fe8 <HAL_SPI_Transmit+0x1c4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	6839      	ldr	r1, [r7, #0]
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 fc21 	bl	80048bc <SPI_EndRxTxTransaction>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <HAL_SPI_Transmit+0x262>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2220      	movs	r2, #32
 8004084:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10a      	bne.n	80040a4 <HAL_SPI_Transmit+0x280>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800408e:	2300      	movs	r3, #0
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <HAL_SPI_Transmit+0x28e>
  {
    errorcode = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	77fb      	strb	r3, [r7, #31]
 80040b0:	e000      	b.n	80040b4 <HAL_SPI_Transmit+0x290>
  }

error:
 80040b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return errorcode;
 80040c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3720      	adds	r7, #32
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b08a      	sub	sp, #40	; 0x28
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	607a      	str	r2, [r7, #4]
 80040da:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040dc:	2301      	movs	r3, #1
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d101      	bne.n	80040f4 <HAL_SPI_TransmitReceive+0x26>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e1e9      	b.n	80044c8 <HAL_SPI_TransmitReceive+0x3fa>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040fc:	f7fd fafc 	bl	80016f8 <HAL_GetTick>
 8004100:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004108:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004110:	887b      	ldrh	r3, [r7, #2]
 8004112:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004114:	887b      	ldrh	r3, [r7, #2]
 8004116:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004118:	7efb      	ldrb	r3, [r7, #27]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d00e      	beq.n	800413c <HAL_SPI_TransmitReceive+0x6e>
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004124:	d106      	bne.n	8004134 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d102      	bne.n	8004134 <HAL_SPI_TransmitReceive+0x66>
 800412e:	7efb      	ldrb	r3, [r7, #27]
 8004130:	2b04      	cmp	r3, #4
 8004132:	d003      	beq.n	800413c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004134:	2302      	movs	r3, #2
 8004136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800413a:	e1bb      	b.n	80044b4 <HAL_SPI_TransmitReceive+0x3e6>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d005      	beq.n	800414e <HAL_SPI_TransmitReceive+0x80>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <HAL_SPI_TransmitReceive+0x80>
 8004148:	887b      	ldrh	r3, [r7, #2]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d103      	bne.n	8004156 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004154:	e1ae      	b.n	80044b4 <HAL_SPI_TransmitReceive+0x3e6>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b04      	cmp	r3, #4
 8004160:	d003      	beq.n	800416a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2205      	movs	r2, #5
 8004166:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	887a      	ldrh	r2, [r7, #2]
 800417a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  hspi->RxXferSize  = Size;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	887a      	ldrh	r2, [r7, #2]
 8004182:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800418c:	887a      	ldrh	r2, [r7, #2]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxXferSize  = Size;
 8004192:	887a      	ldrh	r2, [r7, #2]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	63da      	str	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxISR       = NULL;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	655a      	str	r2, [r3, #84]	; 0x54
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041ac:	d802      	bhi.n	80041b4 <HAL_SPI_TransmitReceive+0xe6>
 80041ae:	8a3b      	ldrh	r3, [r7, #16]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d908      	bls.n	80041c6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041c2:	605a      	str	r2, [r3, #4]
 80041c4:	e007      	b.n	80041d6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041d4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e0:	2b40      	cmp	r3, #64	; 0x40
 80041e2:	d007      	beq.n	80041f4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041fc:	d976      	bls.n	80042ec <HAL_SPI_TransmitReceive+0x21e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <HAL_SPI_TransmitReceive+0x13e>
 8004206:	8a7b      	ldrh	r3, [r7, #18]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d164      	bne.n	80042d6 <HAL_SPI_TransmitReceive+0x208>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004210:	881a      	ldrh	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	1c9a      	adds	r2, r3, #2
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	1e5a      	subs	r2, r3, #1
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800422c:	e053      	b.n	80042d6 <HAL_SPI_TransmitReceive+0x208>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b02      	cmp	r3, #2
 800423a:	d118      	bne.n	800426e <HAL_SPI_TransmitReceive+0x1a0>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	2b00      	cmp	r3, #0
 8004242:	d014      	beq.n	800426e <HAL_SPI_TransmitReceive+0x1a0>
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	2b01      	cmp	r3, #1
 8004248:	d111      	bne.n	800426e <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424e:	881a      	ldrh	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425a:	1c9a      	adds	r2, r3, #2
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	1e5a      	subs	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	641a      	str	r2, [r3, #64]	; 0x40
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b01      	cmp	r3, #1
 800427a:	d11c      	bne.n	80042b6 <HAL_SPI_TransmitReceive+0x1e8>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d016      	beq.n	80042b6 <HAL_SPI_TransmitReceive+0x1e8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004292:	b292      	uxth	r2, r2
 8004294:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	1c9a      	adds	r2, r3, #2
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	645a      	str	r2, [r3, #68]	; 0x44
        hspi->RxXferCount--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042b2:	2301      	movs	r3, #1
 80042b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042b6:	f7fd fa1f 	bl	80016f8 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d807      	bhi.n	80042d6 <HAL_SPI_TransmitReceive+0x208>
 80042c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042cc:	d003      	beq.n	80042d6 <HAL_SPI_TransmitReceive+0x208>
      {
        errorcode = HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80042d4:	e0ee      	b.n	80044b4 <HAL_SPI_TransmitReceive+0x3e6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1a7      	bne.n	800422e <HAL_SPI_TransmitReceive+0x160>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1a1      	bne.n	800422e <HAL_SPI_TransmitReceive+0x160>
 80042ea:	e0d3      	b.n	8004494 <HAL_SPI_TransmitReceive+0x3c6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_SPI_TransmitReceive+0x22e>
 80042f4:	8a7b      	ldrh	r3, [r7, #18]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	f040 80c0 	bne.w	800447c <HAL_SPI_TransmitReceive+0x3ae>
    {
      if (hspi->TxXferCount > 1U)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	2b01      	cmp	r3, #1
 8004302:	d910      	bls.n	8004326 <HAL_SPI_TransmitReceive+0x258>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	881a      	ldrh	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004314:	1c9a      	adds	r2, r3, #2
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	1e9a      	subs	r2, r3, #2
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	641a      	str	r2, [r3, #64]	; 0x40
 8004324:	e0aa      	b.n	800447c <HAL_SPI_TransmitReceive+0x3ae>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	330c      	adds	r3, #12
 8004330:	7812      	ldrb	r2, [r2, #0]
 8004332:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	1e5a      	subs	r2, r3, #1
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004348:	e098      	b.n	800447c <HAL_SPI_TransmitReceive+0x3ae>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b02      	cmp	r3, #2
 8004356:	d12e      	bne.n	80043b6 <HAL_SPI_TransmitReceive+0x2e8>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	2b00      	cmp	r3, #0
 800435e:	d02a      	beq.n	80043b6 <HAL_SPI_TransmitReceive+0x2e8>
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	2b01      	cmp	r3, #1
 8004364:	d127      	bne.n	80043b6 <HAL_SPI_TransmitReceive+0x2e8>
      {
        if (hspi->TxXferCount > 1U)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	2b01      	cmp	r3, #1
 800436c:	d910      	bls.n	8004390 <HAL_SPI_TransmitReceive+0x2c2>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	881a      	ldrh	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	1c9a      	adds	r2, r3, #2
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	1e9a      	subs	r2, r3, #2
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
 800438e:	e010      	b.n	80043b2 <HAL_SPI_TransmitReceive+0x2e4>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	330c      	adds	r3, #12
 800439a:	7812      	ldrb	r2, [r2, #0]
 800439c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	1e5a      	subs	r2, r3, #1
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d148      	bne.n	8004456 <HAL_SPI_TransmitReceive+0x388>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d042      	beq.n	8004456 <HAL_SPI_TransmitReceive+0x388>
      {
        if (hspi->RxXferCount > 1U)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d923      	bls.n	8004424 <HAL_SPI_TransmitReceive+0x356>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	b292      	uxth	r2, r2
 80043e8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ee:	1c9a      	adds	r2, r3, #2
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	645a      	str	r2, [r3, #68]	; 0x44
          hspi->RxXferCount -= 2U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b02      	subs	r3, #2
 80043fe:	b29a      	uxth	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (hspi->RxXferCount <= 1U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b01      	cmp	r3, #1
 8004410:	d81f      	bhi.n	8004452 <HAL_SPI_TransmitReceive+0x384>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004420:	605a      	str	r2, [r3, #4]
 8004422:	e016      	b.n	8004452 <HAL_SPI_TransmitReceive+0x384>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f103 020c 	add.w	r2, r3, #12
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004430:	7812      	ldrb	r2, [r2, #0]
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	645a      	str	r2, [r3, #68]	; 0x44
          hspi->RxXferCount--;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004452:	2301      	movs	r3, #1
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004456:	f7fd f94f 	bl	80016f8 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004462:	429a      	cmp	r2, r3
 8004464:	d803      	bhi.n	800446e <HAL_SPI_TransmitReceive+0x3a0>
 8004466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446c:	d102      	bne.n	8004474 <HAL_SPI_TransmitReceive+0x3a6>
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	2b00      	cmp	r3, #0
 8004472:	d103      	bne.n	800447c <HAL_SPI_TransmitReceive+0x3ae>
      {
        errorcode = HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800447a:	e01b      	b.n	80044b4 <HAL_SPI_TransmitReceive+0x3e6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	2b00      	cmp	r3, #0
 8004482:	f47f af62 	bne.w	800434a <HAL_SPI_TransmitReceive+0x27c>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	f47f af5b 	bne.w	800434a <HAL_SPI_TransmitReceive+0x27c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004494:	69fa      	ldr	r2, [r7, #28]
 8004496:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 fa0f 	bl	80048bc <SPI_EndRxTxTransaction>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d006      	beq.n	80044b2 <HAL_SPI_TransmitReceive+0x3e4>
  {
    errorcode = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	665a      	str	r2, [r3, #100]	; 0x64
 80044b0:	e000      	b.n	80044b4 <HAL_SPI_TransmitReceive+0x3e6>
  }

error :
 80044b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_UNLOCK(hspi);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return errorcode;
 80044c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3728      	adds	r7, #40	; 0x28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b088      	sub	sp, #32
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	099b      	lsrs	r3, r3, #6
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10f      	bne.n	8004514 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00a      	beq.n	8004514 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	099b      	lsrs	r3, r3, #6
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d004      	beq.n	8004514 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	4798      	blx	r3
    return;
 8004512:	e0d8      	b.n	80046c6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	085b      	lsrs	r3, r3, #1
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00a      	beq.n	8004536 <HAL_SPI_IRQHandler+0x66>
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	09db      	lsrs	r3, r3, #7
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d004      	beq.n	8004536 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	4798      	blx	r3
    return;
 8004534:	e0c7      	b.n	80046c6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	095b      	lsrs	r3, r3, #5
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10c      	bne.n	800455c <HAL_SPI_IRQHandler+0x8c>
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	099b      	lsrs	r3, r3, #6
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <HAL_SPI_IRQHandler+0x8c>
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	0a1b      	lsrs	r3, r3, #8
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 80b5 	beq.w	80046c6 <HAL_SPI_IRQHandler+0x1f6>
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	095b      	lsrs	r3, r3, #5
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 80ae 	beq.w	80046c6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	099b      	lsrs	r3, r3, #6
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d023      	beq.n	80045be <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b03      	cmp	r3, #3
 8004580:	d011      	beq.n	80045a6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004586:	f043 0204 	orr.w	r2, r3, #4
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	665a      	str	r2, [r3, #100]	; 0x64
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	617b      	str	r3, [r7, #20]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	e00b      	b.n	80045be <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045a6:	2300      	movs	r3, #0
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	613b      	str	r3, [r7, #16]
 80045ba:	693b      	ldr	r3, [r7, #16]
        return;
 80045bc:	e083      	b.n	80046c6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	095b      	lsrs	r3, r3, #5
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d014      	beq.n	80045f4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045ce:	f043 0201 	orr.w	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	665a      	str	r2, [r3, #100]	; 0x64
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	0a1b      	lsrs	r3, r3, #8
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00c      	beq.n	800461a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004604:	f043 0208 	orr.w	r2, r3, #8
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	665a      	str	r2, [r3, #100]	; 0x64
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800460c:	2300      	movs	r3, #0
 800460e:	60bb      	str	r3, [r7, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	60bb      	str	r3, [r7, #8]
 8004618:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800461e:	2b00      	cmp	r3, #0
 8004620:	d050      	beq.n	80046c4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004630:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d104      	bne.n	800464e <HAL_SPI_IRQHandler+0x17e>
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d034      	beq.n	80046b8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0203 	bic.w	r2, r2, #3
 800465c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004662:	2b00      	cmp	r3, #0
 8004664:	d011      	beq.n	800468a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466a:	4a18      	ldr	r2, [pc, #96]	; (80046cc <HAL_SPI_IRQHandler+0x1fc>)
 800466c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004672:	4618      	mov	r0, r3
 8004674:	f7fd fa28 	bl	8001ac8 <HAL_DMA_Abort_IT>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d005      	beq.n	800468a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004682:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	665a      	str	r2, [r3, #100]	; 0x64
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468e:	2b00      	cmp	r3, #0
 8004690:	d016      	beq.n	80046c0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004696:	4a0d      	ldr	r2, [pc, #52]	; (80046cc <HAL_SPI_IRQHandler+0x1fc>)
 8004698:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fd fa12 	bl	8001ac8 <HAL_DMA_Abort_IT>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	665a      	str	r2, [r3, #100]	; 0x64
        if (hspi->hdmatx != NULL)
 80046b6:	e003      	b.n	80046c0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f809 	bl	80046d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80046be:	e000      	b.n	80046c2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80046c0:	bf00      	nop
    return;
 80046c2:	bf00      	nop
 80046c4:	bf00      	nop
  }
}
 80046c6:	3720      	adds	r7, #32
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	080046e5 	.word	0x080046e5

080046d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  hspi->TxXferCount = 0U;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f7ff ffe5 	bl	80046d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004706:	bf00      	nop
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b084      	sub	sp, #16
 8004712:	af00      	add	r7, sp, #0
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	603b      	str	r3, [r7, #0]
 800471a:	4613      	mov	r3, r2
 800471c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800471e:	e04c      	b.n	80047ba <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004726:	d048      	beq.n	80047ba <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004728:	f7fc ffe6 	bl	80016f8 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d902      	bls.n	800473e <SPI_WaitFlagStateUntilTimeout+0x30>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d13d      	bne.n	80047ba <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800474c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004756:	d111      	bne.n	800477c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004760:	d004      	beq.n	800476c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476a:	d107      	bne.n	800477c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800477a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004784:	d10f      	bne.n	80047a6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e00f      	b.n	80047da <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	4013      	ands	r3, r2
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	bf0c      	ite	eq
 80047ca:	2301      	moveq	r3, #1
 80047cc:	2300      	movne	r3, #0
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	79fb      	ldrb	r3, [r7, #7]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d1a3      	bne.n	8004720 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b084      	sub	sp, #16
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	607a      	str	r2, [r7, #4]
 80047ee:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80047f0:	e057      	b.n	80048a2 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047f8:	d106      	bne.n	8004808 <SPI_WaitFifoStateUntilTimeout+0x26>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d103      	bne.n	8004808 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	330c      	adds	r3, #12
 8004806:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480e:	d048      	beq.n	80048a2 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004810:	f7fc ff72 	bl	80016f8 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d902      	bls.n	8004826 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d13d      	bne.n	80048a2 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004834:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800483e:	d111      	bne.n	8004864 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004848:	d004      	beq.n	8004854 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004852:	d107      	bne.n	8004864 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004862:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800486c:	d10f      	bne.n	800488e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800488c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e008      	b.n	80048b4 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4013      	ands	r3, r2
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d19f      	bne.n	80047f2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f7ff ff84 	bl	80047e2 <SPI_WaitFifoStateUntilTimeout>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d007      	beq.n	80048f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048e4:	f043 0220 	orr.w	r2, r3, #32
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	665a      	str	r2, [r3, #100]	; 0x64
    return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e027      	b.n	8004940 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2200      	movs	r2, #0
 80048f8:	2180      	movs	r1, #128	; 0x80
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f7ff ff07 	bl	800470e <SPI_WaitFlagStateUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d007      	beq.n	8004916 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800490a:	f043 0220 	orr.w	r2, r3, #32
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	665a      	str	r2, [r3, #100]	; 0x64
    return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e014      	b.n	8004940 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2200      	movs	r2, #0
 800491e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f7ff ff5d 	bl	80047e2 <SPI_WaitFifoStateUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d007      	beq.n	800493e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004932:	f043 0220 	orr.w	r2, r3, #32
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	665a      	str	r2, [r3, #100]	; 0x64
    return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e000      	b.n	8004940 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e042      	b.n	80049e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004960:	2b00      	cmp	r3, #0
 8004962:	d106      	bne.n	8004972 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7fc fccb 	bl	8001308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2224      	movs	r2, #36	; 0x24
 8004976:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0201 	bic.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f82c 	bl	80049e8 <UART_SetConfig>
 8004990:	4603      	mov	r3, r0
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e022      	b.n	80049e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d002      	beq.n	80049a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f001 f9e0 	bl	8005d68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0201 	orr.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f001 fa67 	bl	8005eac <UART_CheckIdleState>
 80049de:	4603      	mov	r3, r0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049e8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80049ec:	b088      	sub	sp, #32
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689a      	ldr	r2, [r3, #8]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a1a:	69fa      	ldr	r2, [r7, #28]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4bac      	ldr	r3, [pc, #688]	; (8004cd8 <UART_SetConfig+0x2f0>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6812      	ldr	r2, [r2, #0]
 8004a2e:	69f9      	ldr	r1, [r7, #28]
 8004a30:	430b      	orrs	r3, r1
 8004a32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4aa1      	ldr	r2, [pc, #644]	; (8004cdc <UART_SetConfig+0x2f4>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d004      	beq.n	8004a64 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	69fa      	ldr	r2, [r7, #28]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004a6e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6812      	ldr	r2, [r2, #0]
 8004a76:	69f9      	ldr	r1, [r7, #28]
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a82:	f023 010f 	bic.w	r1, r3, #15
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a92      	ldr	r2, [pc, #584]	; (8004ce0 <UART_SetConfig+0x2f8>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d121      	bne.n	8004ae0 <UART_SetConfig+0xf8>
 8004a9c:	4b91      	ldr	r3, [pc, #580]	; (8004ce4 <UART_SetConfig+0x2fc>)
 8004a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d816      	bhi.n	8004ad8 <UART_SetConfig+0xf0>
 8004aaa:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <UART_SetConfig+0xc8>)
 8004aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab0:	08004ac1 	.word	0x08004ac1
 8004ab4:	08004acd 	.word	0x08004acd
 8004ab8:	08004ac7 	.word	0x08004ac7
 8004abc:	08004ad3 	.word	0x08004ad3
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	76fb      	strb	r3, [r7, #27]
 8004ac4:	e0e8      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	76fb      	strb	r3, [r7, #27]
 8004aca:	e0e5      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004acc:	2304      	movs	r3, #4
 8004ace:	76fb      	strb	r3, [r7, #27]
 8004ad0:	e0e2      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004ad2:	2308      	movs	r3, #8
 8004ad4:	76fb      	strb	r3, [r7, #27]
 8004ad6:	e0df      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004ad8:	2310      	movs	r3, #16
 8004ada:	76fb      	strb	r3, [r7, #27]
 8004adc:	bf00      	nop
 8004ade:	e0db      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a80      	ldr	r2, [pc, #512]	; (8004ce8 <UART_SetConfig+0x300>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d134      	bne.n	8004b54 <UART_SetConfig+0x16c>
 8004aea:	4b7e      	ldr	r3, [pc, #504]	; (8004ce4 <UART_SetConfig+0x2fc>)
 8004aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af0:	f003 030c 	and.w	r3, r3, #12
 8004af4:	2b0c      	cmp	r3, #12
 8004af6:	d829      	bhi.n	8004b4c <UART_SetConfig+0x164>
 8004af8:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <UART_SetConfig+0x118>)
 8004afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afe:	bf00      	nop
 8004b00:	08004b35 	.word	0x08004b35
 8004b04:	08004b4d 	.word	0x08004b4d
 8004b08:	08004b4d 	.word	0x08004b4d
 8004b0c:	08004b4d 	.word	0x08004b4d
 8004b10:	08004b41 	.word	0x08004b41
 8004b14:	08004b4d 	.word	0x08004b4d
 8004b18:	08004b4d 	.word	0x08004b4d
 8004b1c:	08004b4d 	.word	0x08004b4d
 8004b20:	08004b3b 	.word	0x08004b3b
 8004b24:	08004b4d 	.word	0x08004b4d
 8004b28:	08004b4d 	.word	0x08004b4d
 8004b2c:	08004b4d 	.word	0x08004b4d
 8004b30:	08004b47 	.word	0x08004b47
 8004b34:	2300      	movs	r3, #0
 8004b36:	76fb      	strb	r3, [r7, #27]
 8004b38:	e0ae      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	76fb      	strb	r3, [r7, #27]
 8004b3e:	e0ab      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004b40:	2304      	movs	r3, #4
 8004b42:	76fb      	strb	r3, [r7, #27]
 8004b44:	e0a8      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004b46:	2308      	movs	r3, #8
 8004b48:	76fb      	strb	r3, [r7, #27]
 8004b4a:	e0a5      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004b4c:	2310      	movs	r3, #16
 8004b4e:	76fb      	strb	r3, [r7, #27]
 8004b50:	bf00      	nop
 8004b52:	e0a1      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a64      	ldr	r2, [pc, #400]	; (8004cec <UART_SetConfig+0x304>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d120      	bne.n	8004ba0 <UART_SetConfig+0x1b8>
 8004b5e:	4b61      	ldr	r3, [pc, #388]	; (8004ce4 <UART_SetConfig+0x2fc>)
 8004b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b68:	2b10      	cmp	r3, #16
 8004b6a:	d00f      	beq.n	8004b8c <UART_SetConfig+0x1a4>
 8004b6c:	2b10      	cmp	r3, #16
 8004b6e:	d802      	bhi.n	8004b76 <UART_SetConfig+0x18e>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <UART_SetConfig+0x198>
 8004b74:	e010      	b.n	8004b98 <UART_SetConfig+0x1b0>
 8004b76:	2b20      	cmp	r3, #32
 8004b78:	d005      	beq.n	8004b86 <UART_SetConfig+0x19e>
 8004b7a:	2b30      	cmp	r3, #48	; 0x30
 8004b7c:	d009      	beq.n	8004b92 <UART_SetConfig+0x1aa>
 8004b7e:	e00b      	b.n	8004b98 <UART_SetConfig+0x1b0>
 8004b80:	2300      	movs	r3, #0
 8004b82:	76fb      	strb	r3, [r7, #27]
 8004b84:	e088      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004b86:	2302      	movs	r3, #2
 8004b88:	76fb      	strb	r3, [r7, #27]
 8004b8a:	e085      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004b8c:	2304      	movs	r3, #4
 8004b8e:	76fb      	strb	r3, [r7, #27]
 8004b90:	e082      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004b92:	2308      	movs	r3, #8
 8004b94:	76fb      	strb	r3, [r7, #27]
 8004b96:	e07f      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004b98:	2310      	movs	r3, #16
 8004b9a:	76fb      	strb	r3, [r7, #27]
 8004b9c:	bf00      	nop
 8004b9e:	e07b      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a52      	ldr	r2, [pc, #328]	; (8004cf0 <UART_SetConfig+0x308>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d120      	bne.n	8004bec <UART_SetConfig+0x204>
 8004baa:	4b4e      	ldr	r3, [pc, #312]	; (8004ce4 <UART_SetConfig+0x2fc>)
 8004bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bb4:	2b40      	cmp	r3, #64	; 0x40
 8004bb6:	d00f      	beq.n	8004bd8 <UART_SetConfig+0x1f0>
 8004bb8:	2b40      	cmp	r3, #64	; 0x40
 8004bba:	d802      	bhi.n	8004bc2 <UART_SetConfig+0x1da>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d005      	beq.n	8004bcc <UART_SetConfig+0x1e4>
 8004bc0:	e010      	b.n	8004be4 <UART_SetConfig+0x1fc>
 8004bc2:	2b80      	cmp	r3, #128	; 0x80
 8004bc4:	d005      	beq.n	8004bd2 <UART_SetConfig+0x1ea>
 8004bc6:	2bc0      	cmp	r3, #192	; 0xc0
 8004bc8:	d009      	beq.n	8004bde <UART_SetConfig+0x1f6>
 8004bca:	e00b      	b.n	8004be4 <UART_SetConfig+0x1fc>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	76fb      	strb	r3, [r7, #27]
 8004bd0:	e062      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	76fb      	strb	r3, [r7, #27]
 8004bd6:	e05f      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004bd8:	2304      	movs	r3, #4
 8004bda:	76fb      	strb	r3, [r7, #27]
 8004bdc:	e05c      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004bde:	2308      	movs	r3, #8
 8004be0:	76fb      	strb	r3, [r7, #27]
 8004be2:	e059      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004be4:	2310      	movs	r3, #16
 8004be6:	76fb      	strb	r3, [r7, #27]
 8004be8:	bf00      	nop
 8004bea:	e055      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a40      	ldr	r2, [pc, #256]	; (8004cf4 <UART_SetConfig+0x30c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d124      	bne.n	8004c40 <UART_SetConfig+0x258>
 8004bf6:	4b3b      	ldr	r3, [pc, #236]	; (8004ce4 <UART_SetConfig+0x2fc>)
 8004bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c04:	d012      	beq.n	8004c2c <UART_SetConfig+0x244>
 8004c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c0a:	d802      	bhi.n	8004c12 <UART_SetConfig+0x22a>
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d007      	beq.n	8004c20 <UART_SetConfig+0x238>
 8004c10:	e012      	b.n	8004c38 <UART_SetConfig+0x250>
 8004c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c16:	d006      	beq.n	8004c26 <UART_SetConfig+0x23e>
 8004c18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c1c:	d009      	beq.n	8004c32 <UART_SetConfig+0x24a>
 8004c1e:	e00b      	b.n	8004c38 <UART_SetConfig+0x250>
 8004c20:	2300      	movs	r3, #0
 8004c22:	76fb      	strb	r3, [r7, #27]
 8004c24:	e038      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004c26:	2302      	movs	r3, #2
 8004c28:	76fb      	strb	r3, [r7, #27]
 8004c2a:	e035      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	76fb      	strb	r3, [r7, #27]
 8004c30:	e032      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004c32:	2308      	movs	r3, #8
 8004c34:	76fb      	strb	r3, [r7, #27]
 8004c36:	e02f      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004c38:	2310      	movs	r3, #16
 8004c3a:	76fb      	strb	r3, [r7, #27]
 8004c3c:	bf00      	nop
 8004c3e:	e02b      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a25      	ldr	r2, [pc, #148]	; (8004cdc <UART_SetConfig+0x2f4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d124      	bne.n	8004c94 <UART_SetConfig+0x2ac>
 8004c4a:	4b26      	ldr	r3, [pc, #152]	; (8004ce4 <UART_SetConfig+0x2fc>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c58:	d012      	beq.n	8004c80 <UART_SetConfig+0x298>
 8004c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c5e:	d802      	bhi.n	8004c66 <UART_SetConfig+0x27e>
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d007      	beq.n	8004c74 <UART_SetConfig+0x28c>
 8004c64:	e012      	b.n	8004c8c <UART_SetConfig+0x2a4>
 8004c66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c6a:	d006      	beq.n	8004c7a <UART_SetConfig+0x292>
 8004c6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c70:	d009      	beq.n	8004c86 <UART_SetConfig+0x29e>
 8004c72:	e00b      	b.n	8004c8c <UART_SetConfig+0x2a4>
 8004c74:	2300      	movs	r3, #0
 8004c76:	76fb      	strb	r3, [r7, #27]
 8004c78:	e00e      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	76fb      	strb	r3, [r7, #27]
 8004c7e:	e00b      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004c80:	2304      	movs	r3, #4
 8004c82:	76fb      	strb	r3, [r7, #27]
 8004c84:	e008      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004c86:	2308      	movs	r3, #8
 8004c88:	76fb      	strb	r3, [r7, #27]
 8004c8a:	e005      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	76fb      	strb	r3, [r7, #27]
 8004c90:	bf00      	nop
 8004c92:	e001      	b.n	8004c98 <UART_SetConfig+0x2b0>
 8004c94:	2310      	movs	r3, #16
 8004c96:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a0f      	ldr	r2, [pc, #60]	; (8004cdc <UART_SetConfig+0x2f4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	f040 842d 	bne.w	80054fe <UART_SetConfig+0xb16>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ca4:	7efb      	ldrb	r3, [r7, #27]
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	f200 816b 	bhi.w	8004f82 <UART_SetConfig+0x59a>
 8004cac:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <UART_SetConfig+0x2cc>)
 8004cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb2:	bf00      	nop
 8004cb4:	08004cf9 	.word	0x08004cf9
 8004cb8:	08004f83 	.word	0x08004f83
 8004cbc:	08004d9b 	.word	0x08004d9b
 8004cc0:	08004f83 	.word	0x08004f83
 8004cc4:	08004e33 	.word	0x08004e33
 8004cc8:	08004f83 	.word	0x08004f83
 8004ccc:	08004f83 	.word	0x08004f83
 8004cd0:	08004f83 	.word	0x08004f83
 8004cd4:	08004ed5 	.word	0x08004ed5
 8004cd8:	cfff69f3 	.word	0xcfff69f3
 8004cdc:	40008000 	.word	0x40008000
 8004ce0:	40013800 	.word	0x40013800
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	40004400 	.word	0x40004400
 8004cec:	40004800 	.word	0x40004800
 8004cf0:	40004c00 	.word	0x40004c00
 8004cf4:	40005000 	.word	0x40005000
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004cf8:	f7fe fa04 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d044      	beq.n	8004d90 <UART_SetConfig+0x3a8>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d03e      	beq.n	8004d8c <UART_SetConfig+0x3a4>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d038      	beq.n	8004d88 <UART_SetConfig+0x3a0>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d032      	beq.n	8004d84 <UART_SetConfig+0x39c>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d02c      	beq.n	8004d80 <UART_SetConfig+0x398>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	2b05      	cmp	r3, #5
 8004d2c:	d026      	beq.n	8004d7c <UART_SetConfig+0x394>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	2b06      	cmp	r3, #6
 8004d34:	d020      	beq.n	8004d78 <UART_SetConfig+0x390>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	2b07      	cmp	r3, #7
 8004d3c:	d01a      	beq.n	8004d74 <UART_SetConfig+0x38c>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	2b08      	cmp	r3, #8
 8004d44:	d014      	beq.n	8004d70 <UART_SetConfig+0x388>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	2b09      	cmp	r3, #9
 8004d4c:	d00e      	beq.n	8004d6c <UART_SetConfig+0x384>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	2b0a      	cmp	r3, #10
 8004d54:	d008      	beq.n	8004d68 <UART_SetConfig+0x380>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	2b0b      	cmp	r3, #11
 8004d5c:	d102      	bne.n	8004d64 <UART_SetConfig+0x37c>
 8004d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d62:	e016      	b.n	8004d92 <UART_SetConfig+0x3aa>
 8004d64:	2301      	movs	r3, #1
 8004d66:	e014      	b.n	8004d92 <UART_SetConfig+0x3aa>
 8004d68:	2380      	movs	r3, #128	; 0x80
 8004d6a:	e012      	b.n	8004d92 <UART_SetConfig+0x3aa>
 8004d6c:	2340      	movs	r3, #64	; 0x40
 8004d6e:	e010      	b.n	8004d92 <UART_SetConfig+0x3aa>
 8004d70:	2320      	movs	r3, #32
 8004d72:	e00e      	b.n	8004d92 <UART_SetConfig+0x3aa>
 8004d74:	2310      	movs	r3, #16
 8004d76:	e00c      	b.n	8004d92 <UART_SetConfig+0x3aa>
 8004d78:	230c      	movs	r3, #12
 8004d7a:	e00a      	b.n	8004d92 <UART_SetConfig+0x3aa>
 8004d7c:	230a      	movs	r3, #10
 8004d7e:	e008      	b.n	8004d92 <UART_SetConfig+0x3aa>
 8004d80:	2308      	movs	r3, #8
 8004d82:	e006      	b.n	8004d92 <UART_SetConfig+0x3aa>
 8004d84:	2306      	movs	r3, #6
 8004d86:	e004      	b.n	8004d92 <UART_SetConfig+0x3aa>
 8004d88:	2304      	movs	r3, #4
 8004d8a:	e002      	b.n	8004d92 <UART_SetConfig+0x3aa>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e000      	b.n	8004d92 <UART_SetConfig+0x3aa>
 8004d90:	2301      	movs	r3, #1
 8004d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d96:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d98:	e0f6      	b.n	8004f88 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d044      	beq.n	8004e2c <UART_SetConfig+0x444>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d03e      	beq.n	8004e28 <UART_SetConfig+0x440>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d038      	beq.n	8004e24 <UART_SetConfig+0x43c>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d032      	beq.n	8004e20 <UART_SetConfig+0x438>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d02c      	beq.n	8004e1c <UART_SetConfig+0x434>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	2b05      	cmp	r3, #5
 8004dc8:	d026      	beq.n	8004e18 <UART_SetConfig+0x430>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	2b06      	cmp	r3, #6
 8004dd0:	d020      	beq.n	8004e14 <UART_SetConfig+0x42c>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	2b07      	cmp	r3, #7
 8004dd8:	d01a      	beq.n	8004e10 <UART_SetConfig+0x428>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d014      	beq.n	8004e0c <UART_SetConfig+0x424>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	2b09      	cmp	r3, #9
 8004de8:	d00e      	beq.n	8004e08 <UART_SetConfig+0x420>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	2b0a      	cmp	r3, #10
 8004df0:	d008      	beq.n	8004e04 <UART_SetConfig+0x41c>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	2b0b      	cmp	r3, #11
 8004df8:	d102      	bne.n	8004e00 <UART_SetConfig+0x418>
 8004dfa:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004dfe:	e016      	b.n	8004e2e <UART_SetConfig+0x446>
 8004e00:	4ba1      	ldr	r3, [pc, #644]	; (8005088 <UART_SetConfig+0x6a0>)
 8004e02:	e014      	b.n	8004e2e <UART_SetConfig+0x446>
 8004e04:	4ba1      	ldr	r3, [pc, #644]	; (800508c <UART_SetConfig+0x6a4>)
 8004e06:	e012      	b.n	8004e2e <UART_SetConfig+0x446>
 8004e08:	4ba1      	ldr	r3, [pc, #644]	; (8005090 <UART_SetConfig+0x6a8>)
 8004e0a:	e010      	b.n	8004e2e <UART_SetConfig+0x446>
 8004e0c:	4ba1      	ldr	r3, [pc, #644]	; (8005094 <UART_SetConfig+0x6ac>)
 8004e0e:	e00e      	b.n	8004e2e <UART_SetConfig+0x446>
 8004e10:	4ba1      	ldr	r3, [pc, #644]	; (8005098 <UART_SetConfig+0x6b0>)
 8004e12:	e00c      	b.n	8004e2e <UART_SetConfig+0x446>
 8004e14:	4ba1      	ldr	r3, [pc, #644]	; (800509c <UART_SetConfig+0x6b4>)
 8004e16:	e00a      	b.n	8004e2e <UART_SetConfig+0x446>
 8004e18:	4ba1      	ldr	r3, [pc, #644]	; (80050a0 <UART_SetConfig+0x6b8>)
 8004e1a:	e008      	b.n	8004e2e <UART_SetConfig+0x446>
 8004e1c:	4ba1      	ldr	r3, [pc, #644]	; (80050a4 <UART_SetConfig+0x6bc>)
 8004e1e:	e006      	b.n	8004e2e <UART_SetConfig+0x446>
 8004e20:	4ba1      	ldr	r3, [pc, #644]	; (80050a8 <UART_SetConfig+0x6c0>)
 8004e22:	e004      	b.n	8004e2e <UART_SetConfig+0x446>
 8004e24:	4ba1      	ldr	r3, [pc, #644]	; (80050ac <UART_SetConfig+0x6c4>)
 8004e26:	e002      	b.n	8004e2e <UART_SetConfig+0x446>
 8004e28:	4ba1      	ldr	r3, [pc, #644]	; (80050b0 <UART_SetConfig+0x6c8>)
 8004e2a:	e000      	b.n	8004e2e <UART_SetConfig+0x446>
 8004e2c:	4b96      	ldr	r3, [pc, #600]	; (8005088 <UART_SetConfig+0x6a0>)
 8004e2e:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e30:	e0aa      	b.n	8004f88 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004e32:	f7fe f8d1 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8004e36:	4602      	mov	r2, r0
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d044      	beq.n	8004eca <UART_SetConfig+0x4e2>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d03e      	beq.n	8004ec6 <UART_SetConfig+0x4de>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d038      	beq.n	8004ec2 <UART_SetConfig+0x4da>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d032      	beq.n	8004ebe <UART_SetConfig+0x4d6>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d02c      	beq.n	8004eba <UART_SetConfig+0x4d2>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	2b05      	cmp	r3, #5
 8004e66:	d026      	beq.n	8004eb6 <UART_SetConfig+0x4ce>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	2b06      	cmp	r3, #6
 8004e6e:	d020      	beq.n	8004eb2 <UART_SetConfig+0x4ca>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	2b07      	cmp	r3, #7
 8004e76:	d01a      	beq.n	8004eae <UART_SetConfig+0x4c6>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d014      	beq.n	8004eaa <UART_SetConfig+0x4c2>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	2b09      	cmp	r3, #9
 8004e86:	d00e      	beq.n	8004ea6 <UART_SetConfig+0x4be>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	2b0a      	cmp	r3, #10
 8004e8e:	d008      	beq.n	8004ea2 <UART_SetConfig+0x4ba>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	2b0b      	cmp	r3, #11
 8004e96:	d102      	bne.n	8004e9e <UART_SetConfig+0x4b6>
 8004e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e9c:	e016      	b.n	8004ecc <UART_SetConfig+0x4e4>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e014      	b.n	8004ecc <UART_SetConfig+0x4e4>
 8004ea2:	2380      	movs	r3, #128	; 0x80
 8004ea4:	e012      	b.n	8004ecc <UART_SetConfig+0x4e4>
 8004ea6:	2340      	movs	r3, #64	; 0x40
 8004ea8:	e010      	b.n	8004ecc <UART_SetConfig+0x4e4>
 8004eaa:	2320      	movs	r3, #32
 8004eac:	e00e      	b.n	8004ecc <UART_SetConfig+0x4e4>
 8004eae:	2310      	movs	r3, #16
 8004eb0:	e00c      	b.n	8004ecc <UART_SetConfig+0x4e4>
 8004eb2:	230c      	movs	r3, #12
 8004eb4:	e00a      	b.n	8004ecc <UART_SetConfig+0x4e4>
 8004eb6:	230a      	movs	r3, #10
 8004eb8:	e008      	b.n	8004ecc <UART_SetConfig+0x4e4>
 8004eba:	2308      	movs	r3, #8
 8004ebc:	e006      	b.n	8004ecc <UART_SetConfig+0x4e4>
 8004ebe:	2306      	movs	r3, #6
 8004ec0:	e004      	b.n	8004ecc <UART_SetConfig+0x4e4>
 8004ec2:	2304      	movs	r3, #4
 8004ec4:	e002      	b.n	8004ecc <UART_SetConfig+0x4e4>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	e000      	b.n	8004ecc <UART_SetConfig+0x4e4>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed0:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ed2:	e059      	b.n	8004f88 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d04e      	beq.n	8004f7a <UART_SetConfig+0x592>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d047      	beq.n	8004f74 <UART_SetConfig+0x58c>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d040      	beq.n	8004f6e <UART_SetConfig+0x586>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d039      	beq.n	8004f68 <UART_SetConfig+0x580>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d032      	beq.n	8004f62 <UART_SetConfig+0x57a>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	2b05      	cmp	r3, #5
 8004f02:	d02b      	beq.n	8004f5c <UART_SetConfig+0x574>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	2b06      	cmp	r3, #6
 8004f0a:	d024      	beq.n	8004f56 <UART_SetConfig+0x56e>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	2b07      	cmp	r3, #7
 8004f12:	d01d      	beq.n	8004f50 <UART_SetConfig+0x568>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d016      	beq.n	8004f4a <UART_SetConfig+0x562>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	2b09      	cmp	r3, #9
 8004f22:	d00f      	beq.n	8004f44 <UART_SetConfig+0x55c>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	2b0a      	cmp	r3, #10
 8004f2a:	d008      	beq.n	8004f3e <UART_SetConfig+0x556>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	2b0b      	cmp	r3, #11
 8004f32:	d101      	bne.n	8004f38 <UART_SetConfig+0x550>
 8004f34:	2380      	movs	r3, #128	; 0x80
 8004f36:	e022      	b.n	8004f7e <UART_SetConfig+0x596>
 8004f38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f3c:	e01f      	b.n	8004f7e <UART_SetConfig+0x596>
 8004f3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f42:	e01c      	b.n	8004f7e <UART_SetConfig+0x596>
 8004f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f48:	e019      	b.n	8004f7e <UART_SetConfig+0x596>
 8004f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f4e:	e016      	b.n	8004f7e <UART_SetConfig+0x596>
 8004f50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f54:	e013      	b.n	8004f7e <UART_SetConfig+0x596>
 8004f56:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004f5a:	e010      	b.n	8004f7e <UART_SetConfig+0x596>
 8004f5c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004f60:	e00d      	b.n	8004f7e <UART_SetConfig+0x596>
 8004f62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f66:	e00a      	b.n	8004f7e <UART_SetConfig+0x596>
 8004f68:	f241 5355 	movw	r3, #5461	; 0x1555
 8004f6c:	e007      	b.n	8004f7e <UART_SetConfig+0x596>
 8004f6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f72:	e004      	b.n	8004f7e <UART_SetConfig+0x596>
 8004f74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f78:	e001      	b.n	8004f7e <UART_SetConfig+0x596>
 8004f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f7e:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f80:	e002      	b.n	8004f88 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	74fb      	strb	r3, [r7, #19]
        break;
 8004f86:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 86c2 	beq.w	8005d14 <UART_SetConfig+0x132c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	4613      	mov	r3, r2
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	4413      	add	r3, r2
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d305      	bcc.n	8004fac <UART_SetConfig+0x5c4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d903      	bls.n	8004fb4 <UART_SetConfig+0x5cc>
      {
        ret = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	74fb      	strb	r3, [r7, #19]
 8004fb0:	f000 beb0 	b.w	8005d14 <UART_SetConfig+0x132c>
      }
      else
      {
        switch (clocksource)
 8004fb4:	7efb      	ldrb	r3, [r7, #27]
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	f200 828c 	bhi.w	80054d4 <UART_SetConfig+0xaec>
 8004fbc:	a201      	add	r2, pc, #4	; (adr r2, 8004fc4 <UART_SetConfig+0x5dc>)
 8004fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc2:	bf00      	nop
 8004fc4:	08004fe9 	.word	0x08004fe9
 8004fc8:	080054d5 	.word	0x080054d5
 8004fcc:	08005153 	.word	0x08005153
 8004fd0:	080054d5 	.word	0x080054d5
 8004fd4:	08005249 	.word	0x08005249
 8004fd8:	080054d5 	.word	0x080054d5
 8004fdc:	080054d5 	.word	0x080054d5
 8004fe0:	080054d5 	.word	0x080054d5
 8004fe4:	08005385 	.word	0x08005385
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fe8:	f7fe f88c 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8004fec:	4603      	mov	r3, r0
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f04f 0100 	mov.w	r1, #0
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d07e      	beq.n	80050fa <UART_SetConfig+0x712>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	2b01      	cmp	r3, #1
 8005002:	d075      	beq.n	80050f0 <UART_SetConfig+0x708>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	2b02      	cmp	r3, #2
 800500a:	d06c      	beq.n	80050e6 <UART_SetConfig+0x6fe>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	2b03      	cmp	r3, #3
 8005012:	d063      	beq.n	80050dc <UART_SetConfig+0x6f4>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	2b04      	cmp	r3, #4
 800501a:	d05a      	beq.n	80050d2 <UART_SetConfig+0x6ea>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	2b05      	cmp	r3, #5
 8005022:	d051      	beq.n	80050c8 <UART_SetConfig+0x6e0>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	2b06      	cmp	r3, #6
 800502a:	d048      	beq.n	80050be <UART_SetConfig+0x6d6>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	2b07      	cmp	r3, #7
 8005032:	d03f      	beq.n	80050b4 <UART_SetConfig+0x6cc>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	2b08      	cmp	r3, #8
 800503a:	d01f      	beq.n	800507c <UART_SetConfig+0x694>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	2b09      	cmp	r3, #9
 8005042:	d016      	beq.n	8005072 <UART_SetConfig+0x68a>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	2b0a      	cmp	r3, #10
 800504a:	d00d      	beq.n	8005068 <UART_SetConfig+0x680>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	2b0b      	cmp	r3, #11
 8005052:	d104      	bne.n	800505e <UART_SetConfig+0x676>
 8005054:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005058:	f04f 0400 	mov.w	r4, #0
 800505c:	e051      	b.n	8005102 <UART_SetConfig+0x71a>
 800505e:	f04f 0301 	mov.w	r3, #1
 8005062:	f04f 0400 	mov.w	r4, #0
 8005066:	e04c      	b.n	8005102 <UART_SetConfig+0x71a>
 8005068:	f04f 0380 	mov.w	r3, #128	; 0x80
 800506c:	f04f 0400 	mov.w	r4, #0
 8005070:	e047      	b.n	8005102 <UART_SetConfig+0x71a>
 8005072:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005076:	f04f 0400 	mov.w	r4, #0
 800507a:	e042      	b.n	8005102 <UART_SetConfig+0x71a>
 800507c:	f04f 0320 	mov.w	r3, #32
 8005080:	f04f 0400 	mov.w	r4, #0
 8005084:	e03d      	b.n	8005102 <UART_SetConfig+0x71a>
 8005086:	bf00      	nop
 8005088:	00f42400 	.word	0x00f42400
 800508c:	0001e848 	.word	0x0001e848
 8005090:	0003d090 	.word	0x0003d090
 8005094:	0007a120 	.word	0x0007a120
 8005098:	000f4240 	.word	0x000f4240
 800509c:	00145855 	.word	0x00145855
 80050a0:	00186a00 	.word	0x00186a00
 80050a4:	001e8480 	.word	0x001e8480
 80050a8:	0028b0aa 	.word	0x0028b0aa
 80050ac:	003d0900 	.word	0x003d0900
 80050b0:	007a1200 	.word	0x007a1200
 80050b4:	f04f 0310 	mov.w	r3, #16
 80050b8:	f04f 0400 	mov.w	r4, #0
 80050bc:	e021      	b.n	8005102 <UART_SetConfig+0x71a>
 80050be:	f04f 030c 	mov.w	r3, #12
 80050c2:	f04f 0400 	mov.w	r4, #0
 80050c6:	e01c      	b.n	8005102 <UART_SetConfig+0x71a>
 80050c8:	f04f 030a 	mov.w	r3, #10
 80050cc:	f04f 0400 	mov.w	r4, #0
 80050d0:	e017      	b.n	8005102 <UART_SetConfig+0x71a>
 80050d2:	f04f 0308 	mov.w	r3, #8
 80050d6:	f04f 0400 	mov.w	r4, #0
 80050da:	e012      	b.n	8005102 <UART_SetConfig+0x71a>
 80050dc:	f04f 0306 	mov.w	r3, #6
 80050e0:	f04f 0400 	mov.w	r4, #0
 80050e4:	e00d      	b.n	8005102 <UART_SetConfig+0x71a>
 80050e6:	f04f 0304 	mov.w	r3, #4
 80050ea:	f04f 0400 	mov.w	r4, #0
 80050ee:	e008      	b.n	8005102 <UART_SetConfig+0x71a>
 80050f0:	f04f 0302 	mov.w	r3, #2
 80050f4:	f04f 0400 	mov.w	r4, #0
 80050f8:	e003      	b.n	8005102 <UART_SetConfig+0x71a>
 80050fa:	f04f 0301 	mov.w	r3, #1
 80050fe:	f04f 0400 	mov.w	r4, #0
 8005102:	461a      	mov	r2, r3
 8005104:	4623      	mov	r3, r4
 8005106:	f7fb f87b 	bl	8000200 <__aeabi_uldivmod>
 800510a:	4603      	mov	r3, r0
 800510c:	460c      	mov	r4, r1
 800510e:	4619      	mov	r1, r3
 8005110:	4622      	mov	r2, r4
 8005112:	f04f 0300 	mov.w	r3, #0
 8005116:	f04f 0400 	mov.w	r4, #0
 800511a:	0214      	lsls	r4, r2, #8
 800511c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005120:	020b      	lsls	r3, r1, #8
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6852      	ldr	r2, [r2, #4]
 8005126:	0852      	lsrs	r2, r2, #1
 8005128:	4611      	mov	r1, r2
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	eb13 0b01 	adds.w	fp, r3, r1
 8005132:	eb44 0c02 	adc.w	ip, r4, r2
 8005136:	4658      	mov	r0, fp
 8005138:	4661      	mov	r1, ip
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f04f 0400 	mov.w	r4, #0
 8005142:	461a      	mov	r2, r3
 8005144:	4623      	mov	r3, r4
 8005146:	f7fb f85b 	bl	8000200 <__aeabi_uldivmod>
 800514a:	4603      	mov	r3, r0
 800514c:	460c      	mov	r4, r1
 800514e:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8005150:	e1c3      	b.n	80054da <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	2b00      	cmp	r3, #0
 8005158:	d05b      	beq.n	8005212 <UART_SetConfig+0x82a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	2b01      	cmp	r3, #1
 8005160:	d053      	beq.n	800520a <UART_SetConfig+0x822>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	2b02      	cmp	r3, #2
 8005168:	d04b      	beq.n	8005202 <UART_SetConfig+0x81a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	2b03      	cmp	r3, #3
 8005170:	d043      	beq.n	80051fa <UART_SetConfig+0x812>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	2b04      	cmp	r3, #4
 8005178:	d03b      	beq.n	80051f2 <UART_SetConfig+0x80a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	2b05      	cmp	r3, #5
 8005180:	d033      	beq.n	80051ea <UART_SetConfig+0x802>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	2b06      	cmp	r3, #6
 8005188:	d02b      	beq.n	80051e2 <UART_SetConfig+0x7fa>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	2b07      	cmp	r3, #7
 8005190:	d023      	beq.n	80051da <UART_SetConfig+0x7f2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	2b08      	cmp	r3, #8
 8005198:	d01b      	beq.n	80051d2 <UART_SetConfig+0x7ea>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	2b09      	cmp	r3, #9
 80051a0:	d013      	beq.n	80051ca <UART_SetConfig+0x7e2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	2b0a      	cmp	r3, #10
 80051a8:	d00b      	beq.n	80051c2 <UART_SetConfig+0x7da>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	2b0b      	cmp	r3, #11
 80051b0:	d103      	bne.n	80051ba <UART_SetConfig+0x7d2>
 80051b2:	4bad      	ldr	r3, [pc, #692]	; (8005468 <UART_SetConfig+0xa80>)
 80051b4:	f04f 0400 	mov.w	r4, #0
 80051b8:	e02e      	b.n	8005218 <UART_SetConfig+0x830>
 80051ba:	4bac      	ldr	r3, [pc, #688]	; (800546c <UART_SetConfig+0xa84>)
 80051bc:	f04f 0400 	mov.w	r4, #0
 80051c0:	e02a      	b.n	8005218 <UART_SetConfig+0x830>
 80051c2:	4bab      	ldr	r3, [pc, #684]	; (8005470 <UART_SetConfig+0xa88>)
 80051c4:	f04f 0400 	mov.w	r4, #0
 80051c8:	e026      	b.n	8005218 <UART_SetConfig+0x830>
 80051ca:	4baa      	ldr	r3, [pc, #680]	; (8005474 <UART_SetConfig+0xa8c>)
 80051cc:	f04f 0400 	mov.w	r4, #0
 80051d0:	e022      	b.n	8005218 <UART_SetConfig+0x830>
 80051d2:	4ba9      	ldr	r3, [pc, #676]	; (8005478 <UART_SetConfig+0xa90>)
 80051d4:	f04f 0400 	mov.w	r4, #0
 80051d8:	e01e      	b.n	8005218 <UART_SetConfig+0x830>
 80051da:	4ba8      	ldr	r3, [pc, #672]	; (800547c <UART_SetConfig+0xa94>)
 80051dc:	f04f 0400 	mov.w	r4, #0
 80051e0:	e01a      	b.n	8005218 <UART_SetConfig+0x830>
 80051e2:	a49d      	add	r4, pc, #628	; (adr r4, 8005458 <UART_SetConfig+0xa70>)
 80051e4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80051e8:	e016      	b.n	8005218 <UART_SetConfig+0x830>
 80051ea:	4ba5      	ldr	r3, [pc, #660]	; (8005480 <UART_SetConfig+0xa98>)
 80051ec:	f04f 0400 	mov.w	r4, #0
 80051f0:	e012      	b.n	8005218 <UART_SetConfig+0x830>
 80051f2:	4ba4      	ldr	r3, [pc, #656]	; (8005484 <UART_SetConfig+0xa9c>)
 80051f4:	f04f 0400 	mov.w	r4, #0
 80051f8:	e00e      	b.n	8005218 <UART_SetConfig+0x830>
 80051fa:	a499      	add	r4, pc, #612	; (adr r4, 8005460 <UART_SetConfig+0xa78>)
 80051fc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005200:	e00a      	b.n	8005218 <UART_SetConfig+0x830>
 8005202:	4ba1      	ldr	r3, [pc, #644]	; (8005488 <UART_SetConfig+0xaa0>)
 8005204:	f04f 0400 	mov.w	r4, #0
 8005208:	e006      	b.n	8005218 <UART_SetConfig+0x830>
 800520a:	4ba0      	ldr	r3, [pc, #640]	; (800548c <UART_SetConfig+0xaa4>)
 800520c:	f04f 0400 	mov.w	r4, #0
 8005210:	e002      	b.n	8005218 <UART_SetConfig+0x830>
 8005212:	4b96      	ldr	r3, [pc, #600]	; (800546c <UART_SetConfig+0xa84>)
 8005214:	f04f 0400 	mov.w	r4, #0
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6852      	ldr	r2, [r2, #4]
 800521c:	0852      	lsrs	r2, r2, #1
 800521e:	4611      	mov	r1, r2
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	eb13 0b01 	adds.w	fp, r3, r1
 8005228:	eb44 0c02 	adc.w	ip, r4, r2
 800522c:	4658      	mov	r0, fp
 800522e:	4661      	mov	r1, ip
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f04f 0400 	mov.w	r4, #0
 8005238:	461a      	mov	r2, r3
 800523a:	4623      	mov	r3, r4
 800523c:	f7fa ffe0 	bl	8000200 <__aeabi_uldivmod>
 8005240:	4603      	mov	r3, r0
 8005242:	460c      	mov	r4, r1
 8005244:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8005246:	e148      	b.n	80054da <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005248:	f7fd fec6 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 800524c:	4603      	mov	r3, r0
 800524e:	4618      	mov	r0, r3
 8005250:	f04f 0100 	mov.w	r1, #0
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	2b00      	cmp	r3, #0
 800525a:	d067      	beq.n	800532c <UART_SetConfig+0x944>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	2b01      	cmp	r3, #1
 8005262:	d05e      	beq.n	8005322 <UART_SetConfig+0x93a>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	2b02      	cmp	r3, #2
 800526a:	d055      	beq.n	8005318 <UART_SetConfig+0x930>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005270:	2b03      	cmp	r3, #3
 8005272:	d04c      	beq.n	800530e <UART_SetConfig+0x926>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	2b04      	cmp	r3, #4
 800527a:	d043      	beq.n	8005304 <UART_SetConfig+0x91c>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	2b05      	cmp	r3, #5
 8005282:	d03a      	beq.n	80052fa <UART_SetConfig+0x912>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	2b06      	cmp	r3, #6
 800528a:	d031      	beq.n	80052f0 <UART_SetConfig+0x908>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	2b07      	cmp	r3, #7
 8005292:	d028      	beq.n	80052e6 <UART_SetConfig+0x8fe>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	2b08      	cmp	r3, #8
 800529a:	d01f      	beq.n	80052dc <UART_SetConfig+0x8f4>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	2b09      	cmp	r3, #9
 80052a2:	d016      	beq.n	80052d2 <UART_SetConfig+0x8ea>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	2b0a      	cmp	r3, #10
 80052aa:	d00d      	beq.n	80052c8 <UART_SetConfig+0x8e0>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	2b0b      	cmp	r3, #11
 80052b2:	d104      	bne.n	80052be <UART_SetConfig+0x8d6>
 80052b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052b8:	f04f 0400 	mov.w	r4, #0
 80052bc:	e03a      	b.n	8005334 <UART_SetConfig+0x94c>
 80052be:	f04f 0301 	mov.w	r3, #1
 80052c2:	f04f 0400 	mov.w	r4, #0
 80052c6:	e035      	b.n	8005334 <UART_SetConfig+0x94c>
 80052c8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80052cc:	f04f 0400 	mov.w	r4, #0
 80052d0:	e030      	b.n	8005334 <UART_SetConfig+0x94c>
 80052d2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80052d6:	f04f 0400 	mov.w	r4, #0
 80052da:	e02b      	b.n	8005334 <UART_SetConfig+0x94c>
 80052dc:	f04f 0320 	mov.w	r3, #32
 80052e0:	f04f 0400 	mov.w	r4, #0
 80052e4:	e026      	b.n	8005334 <UART_SetConfig+0x94c>
 80052e6:	f04f 0310 	mov.w	r3, #16
 80052ea:	f04f 0400 	mov.w	r4, #0
 80052ee:	e021      	b.n	8005334 <UART_SetConfig+0x94c>
 80052f0:	f04f 030c 	mov.w	r3, #12
 80052f4:	f04f 0400 	mov.w	r4, #0
 80052f8:	e01c      	b.n	8005334 <UART_SetConfig+0x94c>
 80052fa:	f04f 030a 	mov.w	r3, #10
 80052fe:	f04f 0400 	mov.w	r4, #0
 8005302:	e017      	b.n	8005334 <UART_SetConfig+0x94c>
 8005304:	f04f 0308 	mov.w	r3, #8
 8005308:	f04f 0400 	mov.w	r4, #0
 800530c:	e012      	b.n	8005334 <UART_SetConfig+0x94c>
 800530e:	f04f 0306 	mov.w	r3, #6
 8005312:	f04f 0400 	mov.w	r4, #0
 8005316:	e00d      	b.n	8005334 <UART_SetConfig+0x94c>
 8005318:	f04f 0304 	mov.w	r3, #4
 800531c:	f04f 0400 	mov.w	r4, #0
 8005320:	e008      	b.n	8005334 <UART_SetConfig+0x94c>
 8005322:	f04f 0302 	mov.w	r3, #2
 8005326:	f04f 0400 	mov.w	r4, #0
 800532a:	e003      	b.n	8005334 <UART_SetConfig+0x94c>
 800532c:	f04f 0301 	mov.w	r3, #1
 8005330:	f04f 0400 	mov.w	r4, #0
 8005334:	461a      	mov	r2, r3
 8005336:	4623      	mov	r3, r4
 8005338:	f7fa ff62 	bl	8000200 <__aeabi_uldivmod>
 800533c:	4603      	mov	r3, r0
 800533e:	460c      	mov	r4, r1
 8005340:	4619      	mov	r1, r3
 8005342:	4622      	mov	r2, r4
 8005344:	f04f 0300 	mov.w	r3, #0
 8005348:	f04f 0400 	mov.w	r4, #0
 800534c:	0214      	lsls	r4, r2, #8
 800534e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005352:	020b      	lsls	r3, r1, #8
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6852      	ldr	r2, [r2, #4]
 8005358:	0852      	lsrs	r2, r2, #1
 800535a:	4611      	mov	r1, r2
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	eb13 0b01 	adds.w	fp, r3, r1
 8005364:	eb44 0c02 	adc.w	ip, r4, r2
 8005368:	4658      	mov	r0, fp
 800536a:	4661      	mov	r1, ip
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f04f 0400 	mov.w	r4, #0
 8005374:	461a      	mov	r2, r3
 8005376:	4623      	mov	r3, r4
 8005378:	f7fa ff42 	bl	8000200 <__aeabi_uldivmod>
 800537c:	4603      	mov	r3, r0
 800537e:	460c      	mov	r4, r1
 8005380:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8005382:	e0aa      	b.n	80054da <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 8087 	beq.w	800549c <UART_SetConfig+0xab4>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	2b01      	cmp	r3, #1
 8005394:	d05b      	beq.n	800544e <UART_SetConfig+0xa66>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	2b02      	cmp	r3, #2
 800539c:	d052      	beq.n	8005444 <UART_SetConfig+0xa5c>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	d04a      	beq.n	800543c <UART_SetConfig+0xa54>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d041      	beq.n	8005432 <UART_SetConfig+0xa4a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	2b05      	cmp	r3, #5
 80053b4:	d039      	beq.n	800542a <UART_SetConfig+0xa42>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	2b06      	cmp	r3, #6
 80053bc:	d031      	beq.n	8005422 <UART_SetConfig+0xa3a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	2b07      	cmp	r3, #7
 80053c4:	d028      	beq.n	8005418 <UART_SetConfig+0xa30>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	2b08      	cmp	r3, #8
 80053cc:	d01f      	beq.n	800540e <UART_SetConfig+0xa26>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	2b09      	cmp	r3, #9
 80053d4:	d016      	beq.n	8005404 <UART_SetConfig+0xa1c>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	2b0a      	cmp	r3, #10
 80053dc:	d00d      	beq.n	80053fa <UART_SetConfig+0xa12>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	2b0b      	cmp	r3, #11
 80053e4:	d104      	bne.n	80053f0 <UART_SetConfig+0xa08>
 80053e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ea:	f04f 0400 	mov.w	r4, #0
 80053ee:	e059      	b.n	80054a4 <UART_SetConfig+0xabc>
 80053f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80053f4:	f04f 0400 	mov.w	r4, #0
 80053f8:	e054      	b.n	80054a4 <UART_SetConfig+0xabc>
 80053fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053fe:	f04f 0400 	mov.w	r4, #0
 8005402:	e04f      	b.n	80054a4 <UART_SetConfig+0xabc>
 8005404:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005408:	f04f 0400 	mov.w	r4, #0
 800540c:	e04a      	b.n	80054a4 <UART_SetConfig+0xabc>
 800540e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005412:	f04f 0400 	mov.w	r4, #0
 8005416:	e045      	b.n	80054a4 <UART_SetConfig+0xabc>
 8005418:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800541c:	f04f 0400 	mov.w	r4, #0
 8005420:	e040      	b.n	80054a4 <UART_SetConfig+0xabc>
 8005422:	4b1b      	ldr	r3, [pc, #108]	; (8005490 <UART_SetConfig+0xaa8>)
 8005424:	f04f 0400 	mov.w	r4, #0
 8005428:	e03c      	b.n	80054a4 <UART_SetConfig+0xabc>
 800542a:	4b1a      	ldr	r3, [pc, #104]	; (8005494 <UART_SetConfig+0xaac>)
 800542c:	f04f 0400 	mov.w	r4, #0
 8005430:	e038      	b.n	80054a4 <UART_SetConfig+0xabc>
 8005432:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005436:	f04f 0400 	mov.w	r4, #0
 800543a:	e033      	b.n	80054a4 <UART_SetConfig+0xabc>
 800543c:	4b16      	ldr	r3, [pc, #88]	; (8005498 <UART_SetConfig+0xab0>)
 800543e:	f04f 0400 	mov.w	r4, #0
 8005442:	e02f      	b.n	80054a4 <UART_SetConfig+0xabc>
 8005444:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005448:	f04f 0400 	mov.w	r4, #0
 800544c:	e02a      	b.n	80054a4 <UART_SetConfig+0xabc>
 800544e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005452:	f04f 0400 	mov.w	r4, #0
 8005456:	e025      	b.n	80054a4 <UART_SetConfig+0xabc>
 8005458:	14585500 	.word	0x14585500
 800545c:	00000000 	.word	0x00000000
 8005460:	28b0aa00 	.word	0x28b0aa00
 8005464:	00000000 	.word	0x00000000
 8005468:	00f42400 	.word	0x00f42400
 800546c:	f4240000 	.word	0xf4240000
 8005470:	01e84800 	.word	0x01e84800
 8005474:	03d09000 	.word	0x03d09000
 8005478:	07a12000 	.word	0x07a12000
 800547c:	0f424000 	.word	0x0f424000
 8005480:	186a0000 	.word	0x186a0000
 8005484:	1e848000 	.word	0x1e848000
 8005488:	3d090000 	.word	0x3d090000
 800548c:	7a120000 	.word	0x7a120000
 8005490:	000aaa00 	.word	0x000aaa00
 8005494:	000ccc00 	.word	0x000ccc00
 8005498:	00155500 	.word	0x00155500
 800549c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80054a0:	f04f 0400 	mov.w	r4, #0
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6852      	ldr	r2, [r2, #4]
 80054a8:	0852      	lsrs	r2, r2, #1
 80054aa:	4611      	mov	r1, r2
 80054ac:	f04f 0200 	mov.w	r2, #0
 80054b0:	eb13 0b01 	adds.w	fp, r3, r1
 80054b4:	eb44 0c02 	adc.w	ip, r4, r2
 80054b8:	4658      	mov	r0, fp
 80054ba:	4661      	mov	r1, ip
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f04f 0400 	mov.w	r4, #0
 80054c4:	461a      	mov	r2, r3
 80054c6:	4623      	mov	r3, r4
 80054c8:	f7fa fe9a 	bl	8000200 <__aeabi_uldivmod>
 80054cc:	4603      	mov	r3, r0
 80054ce:	460c      	mov	r4, r1
 80054d0:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 80054d2:	e002      	b.n	80054da <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	74fb      	strb	r3, [r7, #19]
            break;
 80054d8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054e0:	d309      	bcc.n	80054f6 <UART_SetConfig+0xb0e>
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054e8:	d205      	bcs.n	80054f6 <UART_SetConfig+0xb0e>
        {
          huart->Instance->BRR = usartdiv;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	60da      	str	r2, [r3, #12]
 80054f2:	f000 bc0f 	b.w	8005d14 <UART_SetConfig+0x132c>
        }
        else
        {
          ret = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	74fb      	strb	r3, [r7, #19]
 80054fa:	f000 bc0b 	b.w	8005d14 <UART_SetConfig+0x132c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005506:	f040 81ff 	bne.w	8005908 <UART_SetConfig+0xf20>
  {
    switch (clocksource)
 800550a:	7efb      	ldrb	r3, [r7, #27]
 800550c:	2b08      	cmp	r3, #8
 800550e:	f200 81db 	bhi.w	80058c8 <UART_SetConfig+0xee0>
 8005512:	a201      	add	r2, pc, #4	; (adr r2, 8005518 <UART_SetConfig+0xb30>)
 8005514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005518:	0800553d 	.word	0x0800553d
 800551c:	080055f3 	.word	0x080055f3
 8005520:	080056a9 	.word	0x080056a9
 8005524:	080058c9 	.word	0x080058c9
 8005528:	08005751 	.word	0x08005751
 800552c:	080058c9 	.word	0x080058c9
 8005530:	080058c9 	.word	0x080058c9
 8005534:	080058c9 	.word	0x080058c9
 8005538:	08005807 	.word	0x08005807
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800553c:	f7fd fde2 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8005540:	4602      	mov	r2, r0
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	2b00      	cmp	r3, #0
 8005548:	d044      	beq.n	80055d4 <UART_SetConfig+0xbec>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	2b01      	cmp	r3, #1
 8005550:	d03e      	beq.n	80055d0 <UART_SetConfig+0xbe8>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	2b02      	cmp	r3, #2
 8005558:	d038      	beq.n	80055cc <UART_SetConfig+0xbe4>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	2b03      	cmp	r3, #3
 8005560:	d032      	beq.n	80055c8 <UART_SetConfig+0xbe0>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	2b04      	cmp	r3, #4
 8005568:	d02c      	beq.n	80055c4 <UART_SetConfig+0xbdc>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	2b05      	cmp	r3, #5
 8005570:	d026      	beq.n	80055c0 <UART_SetConfig+0xbd8>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	2b06      	cmp	r3, #6
 8005578:	d020      	beq.n	80055bc <UART_SetConfig+0xbd4>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	2b07      	cmp	r3, #7
 8005580:	d01a      	beq.n	80055b8 <UART_SetConfig+0xbd0>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	2b08      	cmp	r3, #8
 8005588:	d014      	beq.n	80055b4 <UART_SetConfig+0xbcc>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	2b09      	cmp	r3, #9
 8005590:	d00e      	beq.n	80055b0 <UART_SetConfig+0xbc8>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	2b0a      	cmp	r3, #10
 8005598:	d008      	beq.n	80055ac <UART_SetConfig+0xbc4>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	2b0b      	cmp	r3, #11
 80055a0:	d102      	bne.n	80055a8 <UART_SetConfig+0xbc0>
 80055a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055a6:	e016      	b.n	80055d6 <UART_SetConfig+0xbee>
 80055a8:	2301      	movs	r3, #1
 80055aa:	e014      	b.n	80055d6 <UART_SetConfig+0xbee>
 80055ac:	2380      	movs	r3, #128	; 0x80
 80055ae:	e012      	b.n	80055d6 <UART_SetConfig+0xbee>
 80055b0:	2340      	movs	r3, #64	; 0x40
 80055b2:	e010      	b.n	80055d6 <UART_SetConfig+0xbee>
 80055b4:	2320      	movs	r3, #32
 80055b6:	e00e      	b.n	80055d6 <UART_SetConfig+0xbee>
 80055b8:	2310      	movs	r3, #16
 80055ba:	e00c      	b.n	80055d6 <UART_SetConfig+0xbee>
 80055bc:	230c      	movs	r3, #12
 80055be:	e00a      	b.n	80055d6 <UART_SetConfig+0xbee>
 80055c0:	230a      	movs	r3, #10
 80055c2:	e008      	b.n	80055d6 <UART_SetConfig+0xbee>
 80055c4:	2308      	movs	r3, #8
 80055c6:	e006      	b.n	80055d6 <UART_SetConfig+0xbee>
 80055c8:	2306      	movs	r3, #6
 80055ca:	e004      	b.n	80055d6 <UART_SetConfig+0xbee>
 80055cc:	2304      	movs	r3, #4
 80055ce:	e002      	b.n	80055d6 <UART_SetConfig+0xbee>
 80055d0:	2302      	movs	r3, #2
 80055d2:	e000      	b.n	80055d6 <UART_SetConfig+0xbee>
 80055d4:	2301      	movs	r3, #1
 80055d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055da:	005a      	lsls	r2, r3, #1
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	085b      	lsrs	r3, r3, #1
 80055e2:	441a      	add	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80055f0:	e16d      	b.n	80058ce <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055f2:	f7fd fd9d 	bl	8003130 <HAL_RCC_GetPCLK2Freq>
 80055f6:	4602      	mov	r2, r0
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d044      	beq.n	800568a <UART_SetConfig+0xca2>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	2b01      	cmp	r3, #1
 8005606:	d03e      	beq.n	8005686 <UART_SetConfig+0xc9e>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	2b02      	cmp	r3, #2
 800560e:	d038      	beq.n	8005682 <UART_SetConfig+0xc9a>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	2b03      	cmp	r3, #3
 8005616:	d032      	beq.n	800567e <UART_SetConfig+0xc96>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	2b04      	cmp	r3, #4
 800561e:	d02c      	beq.n	800567a <UART_SetConfig+0xc92>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	2b05      	cmp	r3, #5
 8005626:	d026      	beq.n	8005676 <UART_SetConfig+0xc8e>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	2b06      	cmp	r3, #6
 800562e:	d020      	beq.n	8005672 <UART_SetConfig+0xc8a>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	2b07      	cmp	r3, #7
 8005636:	d01a      	beq.n	800566e <UART_SetConfig+0xc86>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	2b08      	cmp	r3, #8
 800563e:	d014      	beq.n	800566a <UART_SetConfig+0xc82>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	2b09      	cmp	r3, #9
 8005646:	d00e      	beq.n	8005666 <UART_SetConfig+0xc7e>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	2b0a      	cmp	r3, #10
 800564e:	d008      	beq.n	8005662 <UART_SetConfig+0xc7a>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	2b0b      	cmp	r3, #11
 8005656:	d102      	bne.n	800565e <UART_SetConfig+0xc76>
 8005658:	f44f 7380 	mov.w	r3, #256	; 0x100
 800565c:	e016      	b.n	800568c <UART_SetConfig+0xca4>
 800565e:	2301      	movs	r3, #1
 8005660:	e014      	b.n	800568c <UART_SetConfig+0xca4>
 8005662:	2380      	movs	r3, #128	; 0x80
 8005664:	e012      	b.n	800568c <UART_SetConfig+0xca4>
 8005666:	2340      	movs	r3, #64	; 0x40
 8005668:	e010      	b.n	800568c <UART_SetConfig+0xca4>
 800566a:	2320      	movs	r3, #32
 800566c:	e00e      	b.n	800568c <UART_SetConfig+0xca4>
 800566e:	2310      	movs	r3, #16
 8005670:	e00c      	b.n	800568c <UART_SetConfig+0xca4>
 8005672:	230c      	movs	r3, #12
 8005674:	e00a      	b.n	800568c <UART_SetConfig+0xca4>
 8005676:	230a      	movs	r3, #10
 8005678:	e008      	b.n	800568c <UART_SetConfig+0xca4>
 800567a:	2308      	movs	r3, #8
 800567c:	e006      	b.n	800568c <UART_SetConfig+0xca4>
 800567e:	2306      	movs	r3, #6
 8005680:	e004      	b.n	800568c <UART_SetConfig+0xca4>
 8005682:	2304      	movs	r3, #4
 8005684:	e002      	b.n	800568c <UART_SetConfig+0xca4>
 8005686:	2302      	movs	r3, #2
 8005688:	e000      	b.n	800568c <UART_SetConfig+0xca4>
 800568a:	2301      	movs	r3, #1
 800568c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005690:	005a      	lsls	r2, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	085b      	lsrs	r3, r3, #1
 8005698:	441a      	add	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80056a6:	e112      	b.n	80058ce <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d043      	beq.n	8005738 <UART_SetConfig+0xd50>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d03d      	beq.n	8005734 <UART_SetConfig+0xd4c>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d037      	beq.n	8005730 <UART_SetConfig+0xd48>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d031      	beq.n	800572c <UART_SetConfig+0xd44>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	d02b      	beq.n	8005728 <UART_SetConfig+0xd40>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	2b05      	cmp	r3, #5
 80056d6:	d025      	beq.n	8005724 <UART_SetConfig+0xd3c>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	2b06      	cmp	r3, #6
 80056de:	d01f      	beq.n	8005720 <UART_SetConfig+0xd38>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e4:	2b07      	cmp	r3, #7
 80056e6:	d019      	beq.n	800571c <UART_SetConfig+0xd34>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d013      	beq.n	8005718 <UART_SetConfig+0xd30>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	2b09      	cmp	r3, #9
 80056f6:	d00d      	beq.n	8005714 <UART_SetConfig+0xd2c>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	2b0a      	cmp	r3, #10
 80056fe:	d007      	beq.n	8005710 <UART_SetConfig+0xd28>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	2b0b      	cmp	r3, #11
 8005706:	d101      	bne.n	800570c <UART_SetConfig+0xd24>
 8005708:	4b8c      	ldr	r3, [pc, #560]	; (800593c <UART_SetConfig+0xf54>)
 800570a:	e016      	b.n	800573a <UART_SetConfig+0xd52>
 800570c:	4b8c      	ldr	r3, [pc, #560]	; (8005940 <UART_SetConfig+0xf58>)
 800570e:	e014      	b.n	800573a <UART_SetConfig+0xd52>
 8005710:	4b8c      	ldr	r3, [pc, #560]	; (8005944 <UART_SetConfig+0xf5c>)
 8005712:	e012      	b.n	800573a <UART_SetConfig+0xd52>
 8005714:	4b8c      	ldr	r3, [pc, #560]	; (8005948 <UART_SetConfig+0xf60>)
 8005716:	e010      	b.n	800573a <UART_SetConfig+0xd52>
 8005718:	4b8c      	ldr	r3, [pc, #560]	; (800594c <UART_SetConfig+0xf64>)
 800571a:	e00e      	b.n	800573a <UART_SetConfig+0xd52>
 800571c:	4b8c      	ldr	r3, [pc, #560]	; (8005950 <UART_SetConfig+0xf68>)
 800571e:	e00c      	b.n	800573a <UART_SetConfig+0xd52>
 8005720:	4b8c      	ldr	r3, [pc, #560]	; (8005954 <UART_SetConfig+0xf6c>)
 8005722:	e00a      	b.n	800573a <UART_SetConfig+0xd52>
 8005724:	4b8c      	ldr	r3, [pc, #560]	; (8005958 <UART_SetConfig+0xf70>)
 8005726:	e008      	b.n	800573a <UART_SetConfig+0xd52>
 8005728:	4b8c      	ldr	r3, [pc, #560]	; (800595c <UART_SetConfig+0xf74>)
 800572a:	e006      	b.n	800573a <UART_SetConfig+0xd52>
 800572c:	4b8c      	ldr	r3, [pc, #560]	; (8005960 <UART_SetConfig+0xf78>)
 800572e:	e004      	b.n	800573a <UART_SetConfig+0xd52>
 8005730:	4b8c      	ldr	r3, [pc, #560]	; (8005964 <UART_SetConfig+0xf7c>)
 8005732:	e002      	b.n	800573a <UART_SetConfig+0xd52>
 8005734:	4b8c      	ldr	r3, [pc, #560]	; (8005968 <UART_SetConfig+0xf80>)
 8005736:	e000      	b.n	800573a <UART_SetConfig+0xd52>
 8005738:	4b81      	ldr	r3, [pc, #516]	; (8005940 <UART_SetConfig+0xf58>)
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	6852      	ldr	r2, [r2, #4]
 800573e:	0852      	lsrs	r2, r2, #1
 8005740:	441a      	add	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	fbb2 f3f3 	udiv	r3, r2, r3
 800574a:	b29b      	uxth	r3, r3
 800574c:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800574e:	e0be      	b.n	80058ce <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005750:	f7fd fc42 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8005754:	4602      	mov	r2, r0
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	2b00      	cmp	r3, #0
 800575c:	d044      	beq.n	80057e8 <UART_SetConfig+0xe00>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	2b01      	cmp	r3, #1
 8005764:	d03e      	beq.n	80057e4 <UART_SetConfig+0xdfc>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	2b02      	cmp	r3, #2
 800576c:	d038      	beq.n	80057e0 <UART_SetConfig+0xdf8>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	2b03      	cmp	r3, #3
 8005774:	d032      	beq.n	80057dc <UART_SetConfig+0xdf4>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	2b04      	cmp	r3, #4
 800577c:	d02c      	beq.n	80057d8 <UART_SetConfig+0xdf0>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	2b05      	cmp	r3, #5
 8005784:	d026      	beq.n	80057d4 <UART_SetConfig+0xdec>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	2b06      	cmp	r3, #6
 800578c:	d020      	beq.n	80057d0 <UART_SetConfig+0xde8>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	2b07      	cmp	r3, #7
 8005794:	d01a      	beq.n	80057cc <UART_SetConfig+0xde4>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	2b08      	cmp	r3, #8
 800579c:	d014      	beq.n	80057c8 <UART_SetConfig+0xde0>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	2b09      	cmp	r3, #9
 80057a4:	d00e      	beq.n	80057c4 <UART_SetConfig+0xddc>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	2b0a      	cmp	r3, #10
 80057ac:	d008      	beq.n	80057c0 <UART_SetConfig+0xdd8>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	2b0b      	cmp	r3, #11
 80057b4:	d102      	bne.n	80057bc <UART_SetConfig+0xdd4>
 80057b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057ba:	e016      	b.n	80057ea <UART_SetConfig+0xe02>
 80057bc:	2301      	movs	r3, #1
 80057be:	e014      	b.n	80057ea <UART_SetConfig+0xe02>
 80057c0:	2380      	movs	r3, #128	; 0x80
 80057c2:	e012      	b.n	80057ea <UART_SetConfig+0xe02>
 80057c4:	2340      	movs	r3, #64	; 0x40
 80057c6:	e010      	b.n	80057ea <UART_SetConfig+0xe02>
 80057c8:	2320      	movs	r3, #32
 80057ca:	e00e      	b.n	80057ea <UART_SetConfig+0xe02>
 80057cc:	2310      	movs	r3, #16
 80057ce:	e00c      	b.n	80057ea <UART_SetConfig+0xe02>
 80057d0:	230c      	movs	r3, #12
 80057d2:	e00a      	b.n	80057ea <UART_SetConfig+0xe02>
 80057d4:	230a      	movs	r3, #10
 80057d6:	e008      	b.n	80057ea <UART_SetConfig+0xe02>
 80057d8:	2308      	movs	r3, #8
 80057da:	e006      	b.n	80057ea <UART_SetConfig+0xe02>
 80057dc:	2306      	movs	r3, #6
 80057de:	e004      	b.n	80057ea <UART_SetConfig+0xe02>
 80057e0:	2304      	movs	r3, #4
 80057e2:	e002      	b.n	80057ea <UART_SetConfig+0xe02>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e000      	b.n	80057ea <UART_SetConfig+0xe02>
 80057e8:	2301      	movs	r3, #1
 80057ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ee:	005a      	lsls	r2, r3, #1
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	085b      	lsrs	r3, r3, #1
 80057f6:	441a      	add	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005800:	b29b      	uxth	r3, r3
 8005802:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005804:	e063      	b.n	80058ce <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	2b00      	cmp	r3, #0
 800580c:	d04f      	beq.n	80058ae <UART_SetConfig+0xec6>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	2b01      	cmp	r3, #1
 8005814:	d048      	beq.n	80058a8 <UART_SetConfig+0xec0>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	2b02      	cmp	r3, #2
 800581c:	d041      	beq.n	80058a2 <UART_SetConfig+0xeba>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	2b03      	cmp	r3, #3
 8005824:	d03a      	beq.n	800589c <UART_SetConfig+0xeb4>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	2b04      	cmp	r3, #4
 800582c:	d033      	beq.n	8005896 <UART_SetConfig+0xeae>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	2b05      	cmp	r3, #5
 8005834:	d02c      	beq.n	8005890 <UART_SetConfig+0xea8>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	2b06      	cmp	r3, #6
 800583c:	d025      	beq.n	800588a <UART_SetConfig+0xea2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	2b07      	cmp	r3, #7
 8005844:	d01e      	beq.n	8005884 <UART_SetConfig+0xe9c>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	2b08      	cmp	r3, #8
 800584c:	d017      	beq.n	800587e <UART_SetConfig+0xe96>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	2b09      	cmp	r3, #9
 8005854:	d010      	beq.n	8005878 <UART_SetConfig+0xe90>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	2b0a      	cmp	r3, #10
 800585c:	d009      	beq.n	8005872 <UART_SetConfig+0xe8a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	2b0b      	cmp	r3, #11
 8005864:	d102      	bne.n	800586c <UART_SetConfig+0xe84>
 8005866:	f44f 7380 	mov.w	r3, #256	; 0x100
 800586a:	e022      	b.n	80058b2 <UART_SetConfig+0xeca>
 800586c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005870:	e01f      	b.n	80058b2 <UART_SetConfig+0xeca>
 8005872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005876:	e01c      	b.n	80058b2 <UART_SetConfig+0xeca>
 8005878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800587c:	e019      	b.n	80058b2 <UART_SetConfig+0xeca>
 800587e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005882:	e016      	b.n	80058b2 <UART_SetConfig+0xeca>
 8005884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005888:	e013      	b.n	80058b2 <UART_SetConfig+0xeca>
 800588a:	f241 5354 	movw	r3, #5460	; 0x1554
 800588e:	e010      	b.n	80058b2 <UART_SetConfig+0xeca>
 8005890:	f641 1398 	movw	r3, #6552	; 0x1998
 8005894:	e00d      	b.n	80058b2 <UART_SetConfig+0xeca>
 8005896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800589a:	e00a      	b.n	80058b2 <UART_SetConfig+0xeca>
 800589c:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80058a0:	e007      	b.n	80058b2 <UART_SetConfig+0xeca>
 80058a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058a6:	e004      	b.n	80058b2 <UART_SetConfig+0xeca>
 80058a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ac:	e001      	b.n	80058b2 <UART_SetConfig+0xeca>
 80058ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	6852      	ldr	r2, [r2, #4]
 80058b6:	0852      	lsrs	r2, r2, #1
 80058b8:	441a      	add	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80058c6:	e002      	b.n	80058ce <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	74fb      	strb	r3, [r7, #19]
        break;
 80058cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2b0f      	cmp	r3, #15
 80058d2:	d916      	bls.n	8005902 <UART_SetConfig+0xf1a>
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058da:	d212      	bcs.n	8005902 <UART_SetConfig+0xf1a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	f023 030f 	bic.w	r3, r3, #15
 80058e4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	085b      	lsrs	r3, r3, #1
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	897b      	ldrh	r3, [r7, #10]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	897a      	ldrh	r2, [r7, #10]
 80058fe:	60da      	str	r2, [r3, #12]
 8005900:	e208      	b.n	8005d14 <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	74fb      	strb	r3, [r7, #19]
 8005906:	e205      	b.n	8005d14 <UART_SetConfig+0x132c>
    }
  }
  else
  {
    switch (clocksource)
 8005908:	7efb      	ldrb	r3, [r7, #27]
 800590a:	2b08      	cmp	r3, #8
 800590c:	f200 81f1 	bhi.w	8005cf2 <UART_SetConfig+0x130a>
 8005910:	a201      	add	r2, pc, #4	; (adr r2, 8005918 <UART_SetConfig+0xf30>)
 8005912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005916:	bf00      	nop
 8005918:	0800596d 	.word	0x0800596d
 800591c:	08005a21 	.word	0x08005a21
 8005920:	08005ad5 	.word	0x08005ad5
 8005924:	08005cf3 	.word	0x08005cf3
 8005928:	08005b7f 	.word	0x08005b7f
 800592c:	08005cf3 	.word	0x08005cf3
 8005930:	08005cf3 	.word	0x08005cf3
 8005934:	08005cf3 	.word	0x08005cf3
 8005938:	08005c33 	.word	0x08005c33
 800593c:	0001e848 	.word	0x0001e848
 8005940:	01e84800 	.word	0x01e84800
 8005944:	0003d090 	.word	0x0003d090
 8005948:	0007a120 	.word	0x0007a120
 800594c:	000f4240 	.word	0x000f4240
 8005950:	001e8480 	.word	0x001e8480
 8005954:	0028b0aa 	.word	0x0028b0aa
 8005958:	0030d400 	.word	0x0030d400
 800595c:	003d0900 	.word	0x003d0900
 8005960:	00516154 	.word	0x00516154
 8005964:	007a1200 	.word	0x007a1200
 8005968:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800596c:	f7fd fbca 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8005970:	4602      	mov	r2, r0
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005976:	2b00      	cmp	r3, #0
 8005978:	d044      	beq.n	8005a04 <UART_SetConfig+0x101c>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	2b01      	cmp	r3, #1
 8005980:	d03e      	beq.n	8005a00 <UART_SetConfig+0x1018>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	2b02      	cmp	r3, #2
 8005988:	d038      	beq.n	80059fc <UART_SetConfig+0x1014>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	2b03      	cmp	r3, #3
 8005990:	d032      	beq.n	80059f8 <UART_SetConfig+0x1010>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	2b04      	cmp	r3, #4
 8005998:	d02c      	beq.n	80059f4 <UART_SetConfig+0x100c>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	2b05      	cmp	r3, #5
 80059a0:	d026      	beq.n	80059f0 <UART_SetConfig+0x1008>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	2b06      	cmp	r3, #6
 80059a8:	d020      	beq.n	80059ec <UART_SetConfig+0x1004>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	2b07      	cmp	r3, #7
 80059b0:	d01a      	beq.n	80059e8 <UART_SetConfig+0x1000>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	2b08      	cmp	r3, #8
 80059b8:	d014      	beq.n	80059e4 <UART_SetConfig+0xffc>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	2b09      	cmp	r3, #9
 80059c0:	d00e      	beq.n	80059e0 <UART_SetConfig+0xff8>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	2b0a      	cmp	r3, #10
 80059c8:	d008      	beq.n	80059dc <UART_SetConfig+0xff4>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	2b0b      	cmp	r3, #11
 80059d0:	d102      	bne.n	80059d8 <UART_SetConfig+0xff0>
 80059d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059d6:	e016      	b.n	8005a06 <UART_SetConfig+0x101e>
 80059d8:	2301      	movs	r3, #1
 80059da:	e014      	b.n	8005a06 <UART_SetConfig+0x101e>
 80059dc:	2380      	movs	r3, #128	; 0x80
 80059de:	e012      	b.n	8005a06 <UART_SetConfig+0x101e>
 80059e0:	2340      	movs	r3, #64	; 0x40
 80059e2:	e010      	b.n	8005a06 <UART_SetConfig+0x101e>
 80059e4:	2320      	movs	r3, #32
 80059e6:	e00e      	b.n	8005a06 <UART_SetConfig+0x101e>
 80059e8:	2310      	movs	r3, #16
 80059ea:	e00c      	b.n	8005a06 <UART_SetConfig+0x101e>
 80059ec:	230c      	movs	r3, #12
 80059ee:	e00a      	b.n	8005a06 <UART_SetConfig+0x101e>
 80059f0:	230a      	movs	r3, #10
 80059f2:	e008      	b.n	8005a06 <UART_SetConfig+0x101e>
 80059f4:	2308      	movs	r3, #8
 80059f6:	e006      	b.n	8005a06 <UART_SetConfig+0x101e>
 80059f8:	2306      	movs	r3, #6
 80059fa:	e004      	b.n	8005a06 <UART_SetConfig+0x101e>
 80059fc:	2304      	movs	r3, #4
 80059fe:	e002      	b.n	8005a06 <UART_SetConfig+0x101e>
 8005a00:	2302      	movs	r3, #2
 8005a02:	e000      	b.n	8005a06 <UART_SetConfig+0x101e>
 8005a04:	2301      	movs	r3, #1
 8005a06:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	085b      	lsrs	r3, r3, #1
 8005a10:	441a      	add	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a1e:	e16b      	b.n	8005cf8 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a20:	f7fd fb86 	bl	8003130 <HAL_RCC_GetPCLK2Freq>
 8005a24:	4602      	mov	r2, r0
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d044      	beq.n	8005ab8 <UART_SetConfig+0x10d0>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d03e      	beq.n	8005ab4 <UART_SetConfig+0x10cc>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d038      	beq.n	8005ab0 <UART_SetConfig+0x10c8>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d032      	beq.n	8005aac <UART_SetConfig+0x10c4>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	d02c      	beq.n	8005aa8 <UART_SetConfig+0x10c0>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	2b05      	cmp	r3, #5
 8005a54:	d026      	beq.n	8005aa4 <UART_SetConfig+0x10bc>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	2b06      	cmp	r3, #6
 8005a5c:	d020      	beq.n	8005aa0 <UART_SetConfig+0x10b8>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	2b07      	cmp	r3, #7
 8005a64:	d01a      	beq.n	8005a9c <UART_SetConfig+0x10b4>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	2b08      	cmp	r3, #8
 8005a6c:	d014      	beq.n	8005a98 <UART_SetConfig+0x10b0>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	2b09      	cmp	r3, #9
 8005a74:	d00e      	beq.n	8005a94 <UART_SetConfig+0x10ac>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	2b0a      	cmp	r3, #10
 8005a7c:	d008      	beq.n	8005a90 <UART_SetConfig+0x10a8>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	2b0b      	cmp	r3, #11
 8005a84:	d102      	bne.n	8005a8c <UART_SetConfig+0x10a4>
 8005a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a8a:	e016      	b.n	8005aba <UART_SetConfig+0x10d2>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e014      	b.n	8005aba <UART_SetConfig+0x10d2>
 8005a90:	2380      	movs	r3, #128	; 0x80
 8005a92:	e012      	b.n	8005aba <UART_SetConfig+0x10d2>
 8005a94:	2340      	movs	r3, #64	; 0x40
 8005a96:	e010      	b.n	8005aba <UART_SetConfig+0x10d2>
 8005a98:	2320      	movs	r3, #32
 8005a9a:	e00e      	b.n	8005aba <UART_SetConfig+0x10d2>
 8005a9c:	2310      	movs	r3, #16
 8005a9e:	e00c      	b.n	8005aba <UART_SetConfig+0x10d2>
 8005aa0:	230c      	movs	r3, #12
 8005aa2:	e00a      	b.n	8005aba <UART_SetConfig+0x10d2>
 8005aa4:	230a      	movs	r3, #10
 8005aa6:	e008      	b.n	8005aba <UART_SetConfig+0x10d2>
 8005aa8:	2308      	movs	r3, #8
 8005aaa:	e006      	b.n	8005aba <UART_SetConfig+0x10d2>
 8005aac:	2306      	movs	r3, #6
 8005aae:	e004      	b.n	8005aba <UART_SetConfig+0x10d2>
 8005ab0:	2304      	movs	r3, #4
 8005ab2:	e002      	b.n	8005aba <UART_SetConfig+0x10d2>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	e000      	b.n	8005aba <UART_SetConfig+0x10d2>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	fbb2 f2f3 	udiv	r2, r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	085b      	lsrs	r3, r3, #1
 8005ac4:	441a      	add	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ad2:	e111      	b.n	8005cf8 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d044      	beq.n	8005b66 <UART_SetConfig+0x117e>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d03e      	beq.n	8005b62 <UART_SetConfig+0x117a>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d038      	beq.n	8005b5e <UART_SetConfig+0x1176>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d032      	beq.n	8005b5a <UART_SetConfig+0x1172>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	d02c      	beq.n	8005b56 <UART_SetConfig+0x116e>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	2b05      	cmp	r3, #5
 8005b02:	d026      	beq.n	8005b52 <UART_SetConfig+0x116a>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	2b06      	cmp	r3, #6
 8005b0a:	d020      	beq.n	8005b4e <UART_SetConfig+0x1166>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	2b07      	cmp	r3, #7
 8005b12:	d01a      	beq.n	8005b4a <UART_SetConfig+0x1162>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d014      	beq.n	8005b46 <UART_SetConfig+0x115e>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	2b09      	cmp	r3, #9
 8005b22:	d00e      	beq.n	8005b42 <UART_SetConfig+0x115a>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	2b0a      	cmp	r3, #10
 8005b2a:	d008      	beq.n	8005b3e <UART_SetConfig+0x1156>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	2b0b      	cmp	r3, #11
 8005b32:	d102      	bne.n	8005b3a <UART_SetConfig+0x1152>
 8005b34:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005b38:	e016      	b.n	8005b68 <UART_SetConfig+0x1180>
 8005b3a:	4b80      	ldr	r3, [pc, #512]	; (8005d3c <UART_SetConfig+0x1354>)
 8005b3c:	e014      	b.n	8005b68 <UART_SetConfig+0x1180>
 8005b3e:	4b80      	ldr	r3, [pc, #512]	; (8005d40 <UART_SetConfig+0x1358>)
 8005b40:	e012      	b.n	8005b68 <UART_SetConfig+0x1180>
 8005b42:	4b80      	ldr	r3, [pc, #512]	; (8005d44 <UART_SetConfig+0x135c>)
 8005b44:	e010      	b.n	8005b68 <UART_SetConfig+0x1180>
 8005b46:	4b80      	ldr	r3, [pc, #512]	; (8005d48 <UART_SetConfig+0x1360>)
 8005b48:	e00e      	b.n	8005b68 <UART_SetConfig+0x1180>
 8005b4a:	4b80      	ldr	r3, [pc, #512]	; (8005d4c <UART_SetConfig+0x1364>)
 8005b4c:	e00c      	b.n	8005b68 <UART_SetConfig+0x1180>
 8005b4e:	4b80      	ldr	r3, [pc, #512]	; (8005d50 <UART_SetConfig+0x1368>)
 8005b50:	e00a      	b.n	8005b68 <UART_SetConfig+0x1180>
 8005b52:	4b80      	ldr	r3, [pc, #512]	; (8005d54 <UART_SetConfig+0x136c>)
 8005b54:	e008      	b.n	8005b68 <UART_SetConfig+0x1180>
 8005b56:	4b80      	ldr	r3, [pc, #512]	; (8005d58 <UART_SetConfig+0x1370>)
 8005b58:	e006      	b.n	8005b68 <UART_SetConfig+0x1180>
 8005b5a:	4b80      	ldr	r3, [pc, #512]	; (8005d5c <UART_SetConfig+0x1374>)
 8005b5c:	e004      	b.n	8005b68 <UART_SetConfig+0x1180>
 8005b5e:	4b80      	ldr	r3, [pc, #512]	; (8005d60 <UART_SetConfig+0x1378>)
 8005b60:	e002      	b.n	8005b68 <UART_SetConfig+0x1180>
 8005b62:	4b80      	ldr	r3, [pc, #512]	; (8005d64 <UART_SetConfig+0x137c>)
 8005b64:	e000      	b.n	8005b68 <UART_SetConfig+0x1180>
 8005b66:	4b75      	ldr	r3, [pc, #468]	; (8005d3c <UART_SetConfig+0x1354>)
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6852      	ldr	r2, [r2, #4]
 8005b6c:	0852      	lsrs	r2, r2, #1
 8005b6e:	441a      	add	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b7c:	e0bc      	b.n	8005cf8 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b7e:	f7fd fa2b 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8005b82:	4602      	mov	r2, r0
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d044      	beq.n	8005c16 <UART_SetConfig+0x122e>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d03e      	beq.n	8005c12 <UART_SetConfig+0x122a>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d038      	beq.n	8005c0e <UART_SetConfig+0x1226>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d032      	beq.n	8005c0a <UART_SetConfig+0x1222>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	d02c      	beq.n	8005c06 <UART_SetConfig+0x121e>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	2b05      	cmp	r3, #5
 8005bb2:	d026      	beq.n	8005c02 <UART_SetConfig+0x121a>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	2b06      	cmp	r3, #6
 8005bba:	d020      	beq.n	8005bfe <UART_SetConfig+0x1216>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	2b07      	cmp	r3, #7
 8005bc2:	d01a      	beq.n	8005bfa <UART_SetConfig+0x1212>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	d014      	beq.n	8005bf6 <UART_SetConfig+0x120e>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	2b09      	cmp	r3, #9
 8005bd2:	d00e      	beq.n	8005bf2 <UART_SetConfig+0x120a>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	2b0a      	cmp	r3, #10
 8005bda:	d008      	beq.n	8005bee <UART_SetConfig+0x1206>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	2b0b      	cmp	r3, #11
 8005be2:	d102      	bne.n	8005bea <UART_SetConfig+0x1202>
 8005be4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005be8:	e016      	b.n	8005c18 <UART_SetConfig+0x1230>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e014      	b.n	8005c18 <UART_SetConfig+0x1230>
 8005bee:	2380      	movs	r3, #128	; 0x80
 8005bf0:	e012      	b.n	8005c18 <UART_SetConfig+0x1230>
 8005bf2:	2340      	movs	r3, #64	; 0x40
 8005bf4:	e010      	b.n	8005c18 <UART_SetConfig+0x1230>
 8005bf6:	2320      	movs	r3, #32
 8005bf8:	e00e      	b.n	8005c18 <UART_SetConfig+0x1230>
 8005bfa:	2310      	movs	r3, #16
 8005bfc:	e00c      	b.n	8005c18 <UART_SetConfig+0x1230>
 8005bfe:	230c      	movs	r3, #12
 8005c00:	e00a      	b.n	8005c18 <UART_SetConfig+0x1230>
 8005c02:	230a      	movs	r3, #10
 8005c04:	e008      	b.n	8005c18 <UART_SetConfig+0x1230>
 8005c06:	2308      	movs	r3, #8
 8005c08:	e006      	b.n	8005c18 <UART_SetConfig+0x1230>
 8005c0a:	2306      	movs	r3, #6
 8005c0c:	e004      	b.n	8005c18 <UART_SetConfig+0x1230>
 8005c0e:	2304      	movs	r3, #4
 8005c10:	e002      	b.n	8005c18 <UART_SetConfig+0x1230>
 8005c12:	2302      	movs	r3, #2
 8005c14:	e000      	b.n	8005c18 <UART_SetConfig+0x1230>
 8005c16:	2301      	movs	r3, #1
 8005c18:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	085b      	lsrs	r3, r3, #1
 8005c22:	441a      	add	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c30:	e062      	b.n	8005cf8 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d04e      	beq.n	8005cd8 <UART_SetConfig+0x12f0>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d047      	beq.n	8005cd2 <UART_SetConfig+0x12ea>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d040      	beq.n	8005ccc <UART_SetConfig+0x12e4>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	d039      	beq.n	8005cc6 <UART_SetConfig+0x12de>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d032      	beq.n	8005cc0 <UART_SetConfig+0x12d8>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	2b05      	cmp	r3, #5
 8005c60:	d02b      	beq.n	8005cba <UART_SetConfig+0x12d2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	2b06      	cmp	r3, #6
 8005c68:	d024      	beq.n	8005cb4 <UART_SetConfig+0x12cc>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	2b07      	cmp	r3, #7
 8005c70:	d01d      	beq.n	8005cae <UART_SetConfig+0x12c6>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	2b08      	cmp	r3, #8
 8005c78:	d016      	beq.n	8005ca8 <UART_SetConfig+0x12c0>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	2b09      	cmp	r3, #9
 8005c80:	d00f      	beq.n	8005ca2 <UART_SetConfig+0x12ba>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	2b0a      	cmp	r3, #10
 8005c88:	d008      	beq.n	8005c9c <UART_SetConfig+0x12b4>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	2b0b      	cmp	r3, #11
 8005c90:	d101      	bne.n	8005c96 <UART_SetConfig+0x12ae>
 8005c92:	2380      	movs	r3, #128	; 0x80
 8005c94:	e022      	b.n	8005cdc <UART_SetConfig+0x12f4>
 8005c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c9a:	e01f      	b.n	8005cdc <UART_SetConfig+0x12f4>
 8005c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ca0:	e01c      	b.n	8005cdc <UART_SetConfig+0x12f4>
 8005ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ca6:	e019      	b.n	8005cdc <UART_SetConfig+0x12f4>
 8005ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cac:	e016      	b.n	8005cdc <UART_SetConfig+0x12f4>
 8005cae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005cb2:	e013      	b.n	8005cdc <UART_SetConfig+0x12f4>
 8005cb4:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005cb8:	e010      	b.n	8005cdc <UART_SetConfig+0x12f4>
 8005cba:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005cbe:	e00d      	b.n	8005cdc <UART_SetConfig+0x12f4>
 8005cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cc4:	e00a      	b.n	8005cdc <UART_SetConfig+0x12f4>
 8005cc6:	f241 5355 	movw	r3, #5461	; 0x1555
 8005cca:	e007      	b.n	8005cdc <UART_SetConfig+0x12f4>
 8005ccc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005cd0:	e004      	b.n	8005cdc <UART_SetConfig+0x12f4>
 8005cd2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005cd6:	e001      	b.n	8005cdc <UART_SetConfig+0x12f4>
 8005cd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	6852      	ldr	r2, [r2, #4]
 8005ce0:	0852      	lsrs	r2, r2, #1
 8005ce2:	441a      	add	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005cf0:	e002      	b.n	8005cf8 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	74fb      	strb	r3, [r7, #19]
        break;
 8005cf6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	2b0f      	cmp	r3, #15
 8005cfc:	d908      	bls.n	8005d10 <UART_SetConfig+0x1328>
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d04:	d204      	bcs.n	8005d10 <UART_SetConfig+0x1328>
    {
      huart->Instance->BRR = usartdiv;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	60da      	str	r2, [r3, #12]
 8005d0e:	e001      	b.n	8005d14 <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	74fb      	strb	r3, [r7, #19]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005d30:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3720      	adds	r7, #32
 8005d36:	46bd      	mov	sp, r7
 8005d38:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005d3c:	00f42400 	.word	0x00f42400
 8005d40:	0001e848 	.word	0x0001e848
 8005d44:	0003d090 	.word	0x0003d090
 8005d48:	0007a120 	.word	0x0007a120
 8005d4c:	000f4240 	.word	0x000f4240
 8005d50:	00145855 	.word	0x00145855
 8005d54:	00186a00 	.word	0x00186a00
 8005d58:	001e8480 	.word	0x001e8480
 8005d5c:	0028b0aa 	.word	0x0028b0aa
 8005d60:	003d0900 	.word	0x003d0900
 8005d64:	007a1200 	.word	0x007a1200

08005d68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00a      	beq.n	8005d92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00a      	beq.n	8005db4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00a      	beq.n	8005dd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dda:	f003 0308 	and.w	r3, r3, #8
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00a      	beq.n	8005df8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfc:	f003 0310 	and.w	r3, r3, #16
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00a      	beq.n	8005e1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1e:	f003 0320 	and.w	r3, r3, #32
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00a      	beq.n	8005e3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d01a      	beq.n	8005e7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e66:	d10a      	bne.n	8005e7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00a      	beq.n	8005ea0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	605a      	str	r2, [r3, #4]
  }
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af02      	add	r7, sp, #8
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005ebc:	f7fb fc1c 	bl	80016f8 <HAL_GetTick>
 8005ec0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0308 	and.w	r3, r3, #8
 8005ecc:	2b08      	cmp	r3, #8
 8005ece:	d10e      	bne.n	8005eee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ed0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f82c 	bl	8005f3c <UART_WaitOnFlagUntilTimeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e022      	b.n	8005f34 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	d10e      	bne.n	8005f1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005efc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f816 	bl	8005f3c <UART_WaitOnFlagUntilTimeout>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e00c      	b.n	8005f34 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	603b      	str	r3, [r7, #0]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f4c:	e02c      	b.n	8005fa8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f54:	d028      	beq.n	8005fa8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f56:	f7fb fbcf 	bl	80016f8 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d302      	bcc.n	8005f6c <UART_WaitOnFlagUntilTimeout+0x30>
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d11d      	bne.n	8005fa8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f7a:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0201 	bic.w	r2, r2, #1
 8005f8a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e00f      	b.n	8005fc8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	69da      	ldr	r2, [r3, #28]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	bf0c      	ite	eq
 8005fb8:	2301      	moveq	r3, #1
 8005fba:	2300      	movne	r3, #0
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	79fb      	ldrb	r3, [r7, #7]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d0c3      	beq.n	8005f4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e02d      	b.n	8006044 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2224      	movs	r2, #36	; 0x24
 8005ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0201 	bic.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f84f 	bl	80060c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2220      	movs	r2, #32
 8006036:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006060:	2302      	movs	r3, #2
 8006062:	e02d      	b.n	80060c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2224      	movs	r2, #36	; 0x24
 8006070:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 0201 	bic.w	r2, r2, #1
 800608a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	430a      	orrs	r2, r1
 800609e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f811 	bl	80060c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b089      	sub	sp, #36	; 0x24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80060d0:	4a2f      	ldr	r2, [pc, #188]	; (8006190 <UARTEx_SetNbDataToProcess+0xc8>)
 80060d2:	f107 0314 	add.w	r3, r7, #20
 80060d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80060da:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80060de:	4a2d      	ldr	r2, [pc, #180]	; (8006194 <UARTEx_SetNbDataToProcess+0xcc>)
 80060e0:	f107 030c 	add.w	r3, r7, #12
 80060e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80060e8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d108      	bne.n	8006106 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006104:	e03d      	b.n	8006182 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006106:	2308      	movs	r3, #8
 8006108:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800610a:	2308      	movs	r3, #8
 800610c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	0e5b      	lsrs	r3, r3, #25
 8006116:	b2db      	uxtb	r3, r3
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	0f5b      	lsrs	r3, r3, #29
 8006126:	b2db      	uxtb	r3, r3
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800612e:	7fbb      	ldrb	r3, [r7, #30]
 8006130:	7f3a      	ldrb	r2, [r7, #28]
 8006132:	f107 0120 	add.w	r1, r7, #32
 8006136:	440a      	add	r2, r1
 8006138:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800613c:	fb02 f303 	mul.w	r3, r2, r3
 8006140:	7f3a      	ldrb	r2, [r7, #28]
 8006142:	f107 0120 	add.w	r1, r7, #32
 8006146:	440a      	add	r2, r1
 8006148:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800614c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006150:	b29a      	uxth	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006158:	7ffb      	ldrb	r3, [r7, #31]
 800615a:	7f7a      	ldrb	r2, [r7, #29]
 800615c:	f107 0120 	add.w	r1, r7, #32
 8006160:	440a      	add	r2, r1
 8006162:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006166:	fb02 f303 	mul.w	r3, r2, r3
 800616a:	7f7a      	ldrb	r2, [r7, #29]
 800616c:	f107 0120 	add.w	r1, r7, #32
 8006170:	440a      	add	r2, r1
 8006172:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006176:	fb93 f3f2 	sdiv	r3, r3, r2
 800617a:	b29a      	uxth	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006182:	bf00      	nop
 8006184:	3724      	adds	r7, #36	; 0x24
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	08006704 	.word	0x08006704
 8006194:	0800670c 	.word	0x0800670c

08006198 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006198:	b084      	sub	sp, #16
 800619a:	b580      	push	{r7, lr}
 800619c:	b084      	sub	sp, #16
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	f107 001c 	add.w	r0, r7, #28
 80061a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d122      	bne.n	80061f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80061c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d105      	bne.n	80061ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fa1e 	bl	800662c <USB_CoreReset>
 80061f0:	4603      	mov	r3, r0
 80061f2:	73fb      	strb	r3, [r7, #15]
 80061f4:	e01a      	b.n	800622c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fa12 	bl	800662c <USB_CoreReset>
 8006208:	4603      	mov	r3, r0
 800620a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800620c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800620e:	2b00      	cmp	r3, #0
 8006210:	d106      	bne.n	8006220 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006216:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	639a      	str	r2, [r3, #56]	; 0x38
 800621e:	e005      	b.n	800622c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006224:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800622c:	7bfb      	ldrb	r3, [r7, #15]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006238:	b004      	add	sp, #16
 800623a:	4770      	bx	lr

0800623c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f023 0201 	bic.w	r2, r3, #1
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b082      	sub	sp, #8
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	460b      	mov	r3, r1
 8006268:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006276:	78fb      	ldrb	r3, [r7, #3]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d106      	bne.n	800628a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	60da      	str	r2, [r3, #12]
 8006288:	e00b      	b.n	80062a2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800628a:	78fb      	ldrb	r3, [r7, #3]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d106      	bne.n	800629e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	60da      	str	r2, [r3, #12]
 800629c:	e001      	b.n	80062a2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e003      	b.n	80062aa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80062a2:	2032      	movs	r0, #50	; 0x32
 80062a4:	f7fb fa34 	bl	8001710 <HAL_Delay>

  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
	...

080062b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062b4:	b084      	sub	sp, #16
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b086      	sub	sp, #24
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80062c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80062ce:	2300      	movs	r3, #0
 80062d0:	613b      	str	r3, [r7, #16]
 80062d2:	e009      	b.n	80062e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	3340      	adds	r3, #64	; 0x40
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	2200      	movs	r2, #0
 80062e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	3301      	adds	r3, #1
 80062e6:	613b      	str	r3, [r7, #16]
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	2b0e      	cmp	r3, #14
 80062ec:	d9f2      	bls.n	80062d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80062ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d112      	bne.n	800631a <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	e005      	b.n	8006326 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800632c:	461a      	mov	r2, r3
 800632e:	2300      	movs	r3, #0
 8006330:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006338:	4619      	mov	r1, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006340:	461a      	mov	r2, r3
 8006342:	680b      	ldr	r3, [r1, #0]
 8006344:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006346:	2103      	movs	r1, #3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f93d 	bl	80065c8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800634e:	2110      	movs	r1, #16
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f8f1 	bl	8006538 <USB_FlushTxFifo>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f90f 	bl	8006584 <USB_FlushRxFifo>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d001      	beq.n	8006370 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006376:	461a      	mov	r2, r3
 8006378:	2300      	movs	r3, #0
 800637a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006382:	461a      	mov	r2, r3
 8006384:	2300      	movs	r3, #0
 8006386:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638e:	461a      	mov	r2, r3
 8006390:	2300      	movs	r3, #0
 8006392:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006394:	2300      	movs	r3, #0
 8006396:	613b      	str	r3, [r7, #16]
 8006398:	e043      	b.n	8006422 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063b0:	d118      	bne.n	80063e4 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10a      	bne.n	80063ce <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c4:	461a      	mov	r2, r3
 80063c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063ca:	6013      	str	r3, [r2, #0]
 80063cc:	e013      	b.n	80063f6 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063da:	461a      	mov	r2, r3
 80063dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063e0:	6013      	str	r3, [r2, #0]
 80063e2:	e008      	b.n	80063f6 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f0:	461a      	mov	r2, r3
 80063f2:	2300      	movs	r3, #0
 80063f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006402:	461a      	mov	r2, r3
 8006404:	2300      	movs	r3, #0
 8006406:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006414:	461a      	mov	r2, r3
 8006416:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800641a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	3301      	adds	r3, #1
 8006420:	613b      	str	r3, [r7, #16]
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	429a      	cmp	r2, r3
 8006428:	d3b7      	bcc.n	800639a <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800642a:	2300      	movs	r3, #0
 800642c:	613b      	str	r3, [r7, #16]
 800642e:	e043      	b.n	80064b8 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006442:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006446:	d118      	bne.n	800647a <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10a      	bne.n	8006464 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	4413      	add	r3, r2
 8006456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645a:	461a      	mov	r2, r3
 800645c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006460:	6013      	str	r3, [r2, #0]
 8006462:	e013      	b.n	800648c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006470:	461a      	mov	r2, r3
 8006472:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006476:	6013      	str	r3, [r2, #0]
 8006478:	e008      	b.n	800648c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4413      	add	r3, r2
 8006482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006486:	461a      	mov	r2, r3
 8006488:	2300      	movs	r3, #0
 800648a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006498:	461a      	mov	r2, r3
 800649a:	2300      	movs	r3, #0
 800649c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064aa:	461a      	mov	r2, r3
 80064ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	3301      	adds	r3, #1
 80064b6:	613b      	str	r3, [r7, #16]
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d3b7      	bcc.n	8006430 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80064e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	f043 0210 	orr.w	r2, r3, #16
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	699a      	ldr	r2, [r3, #24]
 80064f2:	4b10      	ldr	r3, [pc, #64]	; (8006534 <USB_DevInit+0x280>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80064fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d005      	beq.n	800650c <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	f043 0208 	orr.w	r2, r3, #8
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800650c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800650e:	2b01      	cmp	r3, #1
 8006510:	d107      	bne.n	8006522 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800651a:	f043 0304 	orr.w	r3, r3, #4
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006522:	7dfb      	ldrb	r3, [r7, #23]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3718      	adds	r7, #24
 8006528:	46bd      	mov	sp, r7
 800652a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800652e:	b004      	add	sp, #16
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	803c3800 	.word	0x803c3800

08006538 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	019b      	lsls	r3, r3, #6
 800654a:	f043 0220 	orr.w	r2, r3, #32
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3301      	adds	r3, #1
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4a09      	ldr	r2, [pc, #36]	; (8006580 <USB_FlushTxFifo+0x48>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d901      	bls.n	8006564 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e006      	b.n	8006572 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	f003 0320 	and.w	r3, r3, #32
 800656c:	2b20      	cmp	r3, #32
 800656e:	d0f0      	beq.n	8006552 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	00030d40 	.word	0x00030d40

08006584 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800658c:	2300      	movs	r3, #0
 800658e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2210      	movs	r2, #16
 8006594:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	3301      	adds	r3, #1
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4a09      	ldr	r2, [pc, #36]	; (80065c4 <USB_FlushRxFifo+0x40>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d901      	bls.n	80065a8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e006      	b.n	80065b6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f003 0310 	and.w	r3, r3, #16
 80065b0:	2b10      	cmp	r3, #16
 80065b2:	d0f0      	beq.n	8006596 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	00030d40 	.word	0x00030d40

080065c8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	460b      	mov	r3, r1
 80065d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	68f9      	ldr	r1, [r7, #12]
 80065e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065e8:	4313      	orrs	r3, r2
 80065ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b084      	sub	sp, #16
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006614:	f043 0302 	orr.w	r3, r3, #2
 8006618:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800661a:	2003      	movs	r0, #3
 800661c:	f7fb f878 	bl	8001710 <HAL_Delay>

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
	...

0800662c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	3301      	adds	r3, #1
 800663c:	60fb      	str	r3, [r7, #12]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	4a13      	ldr	r2, [pc, #76]	; (8006690 <USB_CoreReset+0x64>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d901      	bls.n	800664a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e01b      	b.n	8006682 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	2b00      	cmp	r3, #0
 8006650:	daf2      	bge.n	8006638 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f043 0201 	orr.w	r2, r3, #1
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	3301      	adds	r3, #1
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4a09      	ldr	r2, [pc, #36]	; (8006690 <USB_CoreReset+0x64>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d901      	bls.n	8006674 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e006      	b.n	8006682 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b01      	cmp	r3, #1
 800667e:	d0f0      	beq.n	8006662 <USB_CoreReset+0x36>

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	00030d40 	.word	0x00030d40

08006694 <__libc_init_array>:
 8006694:	b570      	push	{r4, r5, r6, lr}
 8006696:	4e0d      	ldr	r6, [pc, #52]	; (80066cc <__libc_init_array+0x38>)
 8006698:	4c0d      	ldr	r4, [pc, #52]	; (80066d0 <__libc_init_array+0x3c>)
 800669a:	1ba4      	subs	r4, r4, r6
 800669c:	10a4      	asrs	r4, r4, #2
 800669e:	2500      	movs	r5, #0
 80066a0:	42a5      	cmp	r5, r4
 80066a2:	d109      	bne.n	80066b8 <__libc_init_array+0x24>
 80066a4:	4e0b      	ldr	r6, [pc, #44]	; (80066d4 <__libc_init_array+0x40>)
 80066a6:	4c0c      	ldr	r4, [pc, #48]	; (80066d8 <__libc_init_array+0x44>)
 80066a8:	f000 f820 	bl	80066ec <_init>
 80066ac:	1ba4      	subs	r4, r4, r6
 80066ae:	10a4      	asrs	r4, r4, #2
 80066b0:	2500      	movs	r5, #0
 80066b2:	42a5      	cmp	r5, r4
 80066b4:	d105      	bne.n	80066c2 <__libc_init_array+0x2e>
 80066b6:	bd70      	pop	{r4, r5, r6, pc}
 80066b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066bc:	4798      	blx	r3
 80066be:	3501      	adds	r5, #1
 80066c0:	e7ee      	b.n	80066a0 <__libc_init_array+0xc>
 80066c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066c6:	4798      	blx	r3
 80066c8:	3501      	adds	r5, #1
 80066ca:	e7f2      	b.n	80066b2 <__libc_init_array+0x1e>
 80066cc:	0807f4fc 	.word	0x0807f4fc
 80066d0:	0807f4fc 	.word	0x0807f4fc
 80066d4:	0807f4fc 	.word	0x0807f4fc
 80066d8:	0807f500 	.word	0x0807f500

080066dc <memset>:
 80066dc:	4402      	add	r2, r0
 80066de:	4603      	mov	r3, r0
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d100      	bne.n	80066e6 <memset+0xa>
 80066e4:	4770      	bx	lr
 80066e6:	f803 1b01 	strb.w	r1, [r3], #1
 80066ea:	e7f9      	b.n	80066e0 <memset+0x4>

080066ec <_init>:
 80066ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ee:	bf00      	nop
 80066f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f2:	bc08      	pop	{r3}
 80066f4:	469e      	mov	lr, r3
 80066f6:	4770      	bx	lr

080066f8 <_fini>:
 80066f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fa:	bf00      	nop
 80066fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fe:	bc08      	pop	{r3}
 8006700:	469e      	mov	lr, r3
 8006702:	4770      	bx	lr
