
ULPWUR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d14  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0007a8b4  08006ed4  08006ed4  00016ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08081788  08081788  000a0014  2**0
                  CONTENTS
  4 .ARM          00000008  08081788  08081788  00091788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08081790  08081790  000a0014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08081790  08081790  00091790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08081794  08081794  00091794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08081798  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000710  20000014  080817ac  000a0014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000724  080817ac  000a0724  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000a0014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001908b  00000000  00000000  000a0044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003390  00000000  00000000  000b90cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012c0  00000000  00000000  000bc460  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010e8  00000000  00000000  000bd720  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ccd1  00000000  00000000  000be808  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013632  00000000  00000000  000eb4d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00104374  00000000  00000000  000feb0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00202e7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b5c  00000000  00000000  00202efc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000014 	.word	0x20000014
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006ebc 	.word	0x08006ebc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000018 	.word	0x20000018
 80001fc:	08006ebc 	.word	0x08006ebc

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b972 	b.w	80004fc <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	4688      	mov	r8, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14b      	bne.n	80002d6 <__udivmoddi4+0xa6>
 800023e:	428a      	cmp	r2, r1
 8000240:	4615      	mov	r5, r2
 8000242:	d967      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0720 	rsb	r7, r2, #32
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	fa20 f707 	lsr.w	r7, r0, r7
 8000256:	4095      	lsls	r5, r2
 8000258:	ea47 0803 	orr.w	r8, r7, r3
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbb8 f7fe 	udiv	r7, r8, lr
 8000268:	fa1f fc85 	uxth.w	ip, r5
 800026c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000270:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000274:	fb07 f10c 	mul.w	r1, r7, ip
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18eb      	adds	r3, r5, r3
 800027e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000282:	f080 811b 	bcs.w	80004bc <__udivmoddi4+0x28c>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8118 	bls.w	80004bc <__udivmoddi4+0x28c>
 800028c:	3f02      	subs	r7, #2
 800028e:	442b      	add	r3, r5
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0fe 	udiv	r0, r3, lr
 8000298:	fb0e 3310 	mls	r3, lr, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a4:	45a4      	cmp	ip, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	192c      	adds	r4, r5, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x290>
 80002b2:	45a4      	cmp	ip, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x290>
 80002b8:	3802      	subs	r0, #2
 80002ba:	442c      	add	r4, r5
 80002bc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c0:	eba4 040c 	sub.w	r4, r4, ip
 80002c4:	2700      	movs	r7, #0
 80002c6:	b11e      	cbz	r6, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c6 4300 	strd	r4, r3, [r6]
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xbe>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80eb 	beq.w	80004b6 <__udivmoddi4+0x286>
 80002e0:	2700      	movs	r7, #0
 80002e2:	e9c6 0100 	strd	r0, r1, [r6]
 80002e6:	4638      	mov	r0, r7
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f783 	clz	r7, r3
 80002f2:	2f00      	cmp	r7, #0
 80002f4:	d147      	bne.n	8000386 <__udivmoddi4+0x156>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd0>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80fa 	bhi.w	80004f4 <__udivmoddi4+0x2c4>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	4698      	mov	r8, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800030e:	e9c6 4800 	strd	r4, r8, [r6]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xe8>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 808f 	bne.w	8000440 <__udivmoddi4+0x210>
 8000322:	1b49      	subs	r1, r1, r5
 8000324:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000328:	fa1f f885 	uxth.w	r8, r5
 800032c:	2701      	movs	r7, #1
 800032e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fb0e 111c 	mls	r1, lr, ip, r1
 8000338:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800033c:	fb08 f10c 	mul.w	r1, r8, ip
 8000340:	4299      	cmp	r1, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x124>
 8000344:	18eb      	adds	r3, r5, r3
 8000346:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4299      	cmp	r1, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 8000352:	4684      	mov	ip, r0
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb1 f0fe 	udiv	r0, r1, lr
 800035c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000360:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000364:	fb08 f800 	mul.w	r8, r8, r0
 8000368:	45a0      	cmp	r8, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x14c>
 800036c:	192c      	adds	r4, r5, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x14a>
 8000374:	45a0      	cmp	r8, r4
 8000376:	f200 80b6 	bhi.w	80004e6 <__udivmoddi4+0x2b6>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 0408 	sub.w	r4, r4, r8
 8000380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000384:	e79f      	b.n	80002c6 <__udivmoddi4+0x96>
 8000386:	f1c7 0c20 	rsb	ip, r7, #32
 800038a:	40bb      	lsls	r3, r7
 800038c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000390:	ea4e 0e03 	orr.w	lr, lr, r3
 8000394:	fa01 f407 	lsl.w	r4, r1, r7
 8000398:	fa20 f50c 	lsr.w	r5, r0, ip
 800039c:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a4:	4325      	orrs	r5, r4
 80003a6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003aa:	0c2c      	lsrs	r4, r5, #16
 80003ac:	fb08 3319 	mls	r3, r8, r9, r3
 80003b0:	fa1f fa8e 	uxth.w	sl, lr
 80003b4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b8:	fb09 f40a 	mul.w	r4, r9, sl
 80003bc:	429c      	cmp	r4, r3
 80003be:	fa02 f207 	lsl.w	r2, r2, r7
 80003c2:	fa00 f107 	lsl.w	r1, r0, r7
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1e 0303 	adds.w	r3, lr, r3
 80003cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d0:	f080 8087 	bcs.w	80004e2 <__udivmoddi4+0x2b2>
 80003d4:	429c      	cmp	r4, r3
 80003d6:	f240 8084 	bls.w	80004e2 <__udivmoddi4+0x2b2>
 80003da:	f1a9 0902 	sub.w	r9, r9, #2
 80003de:	4473      	add	r3, lr
 80003e0:	1b1b      	subs	r3, r3, r4
 80003e2:	b2ad      	uxth	r5, r5
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1e 0404 	adds.w	r4, lr, r4
 80003fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000400:	d26b      	bcs.n	80004da <__udivmoddi4+0x2aa>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d969      	bls.n	80004da <__udivmoddi4+0x2aa>
 8000406:	3802      	subs	r0, #2
 8000408:	4474      	add	r4, lr
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c2      	mov	sl, r8
 800041a:	464b      	mov	r3, r9
 800041c:	d354      	bcc.n	80004c8 <__udivmoddi4+0x298>
 800041e:	d051      	beq.n	80004c4 <__udivmoddi4+0x294>
 8000420:	2e00      	cmp	r6, #0
 8000422:	d069      	beq.n	80004f8 <__udivmoddi4+0x2c8>
 8000424:	ebb1 050a 	subs.w	r5, r1, sl
 8000428:	eb64 0403 	sbc.w	r4, r4, r3
 800042c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000430:	40fd      	lsrs	r5, r7
 8000432:	40fc      	lsrs	r4, r7
 8000434:	ea4c 0505 	orr.w	r5, ip, r5
 8000438:	e9c6 5400 	strd	r5, r4, [r6]
 800043c:	2700      	movs	r7, #0
 800043e:	e747      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000440:	f1c2 0320 	rsb	r3, r2, #32
 8000444:	fa20 f703 	lsr.w	r7, r0, r3
 8000448:	4095      	lsls	r5, r2
 800044a:	fa01 f002 	lsl.w	r0, r1, r2
 800044e:	fa21 f303 	lsr.w	r3, r1, r3
 8000452:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000456:	4338      	orrs	r0, r7
 8000458:	0c01      	lsrs	r1, r0, #16
 800045a:	fbb3 f7fe 	udiv	r7, r3, lr
 800045e:	fa1f f885 	uxth.w	r8, r5
 8000462:	fb0e 3317 	mls	r3, lr, r7, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb07 f308 	mul.w	r3, r7, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	fa04 f402 	lsl.w	r4, r4, r2
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x256>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f107 3cff 	add.w	ip, r7, #4294967295
 800047c:	d22f      	bcs.n	80004de <__udivmoddi4+0x2ae>
 800047e:	428b      	cmp	r3, r1
 8000480:	d92d      	bls.n	80004de <__udivmoddi4+0x2ae>
 8000482:	3f02      	subs	r7, #2
 8000484:	4429      	add	r1, r5
 8000486:	1acb      	subs	r3, r1, r3
 8000488:	b281      	uxth	r1, r0
 800048a:	fbb3 f0fe 	udiv	r0, r3, lr
 800048e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000496:	fb00 f308 	mul.w	r3, r0, r8
 800049a:	428b      	cmp	r3, r1
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x27e>
 800049e:	1869      	adds	r1, r5, r1
 80004a0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a4:	d217      	bcs.n	80004d6 <__udivmoddi4+0x2a6>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d915      	bls.n	80004d6 <__udivmoddi4+0x2a6>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4429      	add	r1, r5
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b4:	e73b      	b.n	800032e <__udivmoddi4+0xfe>
 80004b6:	4637      	mov	r7, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e709      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004bc:	4607      	mov	r7, r0
 80004be:	e6e7      	b.n	8000290 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c4:	4541      	cmp	r1, r8
 80004c6:	d2ab      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004c8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004cc:	eb69 020e 	sbc.w	r2, r9, lr
 80004d0:	3801      	subs	r0, #1
 80004d2:	4613      	mov	r3, r2
 80004d4:	e7a4      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d6:	4660      	mov	r0, ip
 80004d8:	e7e9      	b.n	80004ae <__udivmoddi4+0x27e>
 80004da:	4618      	mov	r0, r3
 80004dc:	e795      	b.n	800040a <__udivmoddi4+0x1da>
 80004de:	4667      	mov	r7, ip
 80004e0:	e7d1      	b.n	8000486 <__udivmoddi4+0x256>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e77c      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	442c      	add	r4, r5
 80004ea:	e747      	b.n	800037c <__udivmoddi4+0x14c>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	442b      	add	r3, r5
 80004f2:	e72f      	b.n	8000354 <__udivmoddi4+0x124>
 80004f4:	4638      	mov	r0, r7
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xda>
 80004f8:	4637      	mov	r7, r6
 80004fa:	e6e9      	b.n	80002d0 <__udivmoddi4+0xa0>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <EpdOn>:
uint32_t gulImgBufAddr; //IT8951 Image buffer address



void EpdOn(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(EPD_OFF_GPIO_Port, EPD_OFF_Pin, RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2102      	movs	r1, #2
 8000508:	4808      	ldr	r0, [pc, #32]	; (800052c <EpdOn+0x2c>)
 800050a:	f002 f9df 	bl	80028cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_ON_GPIO_Port, EPD_ON_Pin, SET);
 800050e:	2201      	movs	r2, #1
 8000510:	2101      	movs	r1, #1
 8000512:	4806      	ldr	r0, [pc, #24]	; (800052c <EpdOn+0x2c>)
 8000514:	f002 f9da 	bl	80028cc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000518:	2001      	movs	r0, #1
 800051a:	f001 fce1 	bl	8001ee0 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_ON_GPIO_Port, EPD_ON_Pin, RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2101      	movs	r1, #1
 8000522:	4802      	ldr	r0, [pc, #8]	; (800052c <EpdOn+0x2c>)
 8000524:	f002 f9d2 	bl	80028cc <HAL_GPIO_WritePin>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	48000800 	.word	0x48000800

08000530 <EpdOff>:

void EpdOff(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_ON_GPIO_Port, EPD_ON_Pin, RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	2101      	movs	r1, #1
 8000538:	4808      	ldr	r0, [pc, #32]	; (800055c <EpdOff+0x2c>)
 800053a:	f002 f9c7 	bl	80028cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_OFF_GPIO_Port, EPD_OFF_Pin, SET);
 800053e:	2201      	movs	r2, #1
 8000540:	2102      	movs	r1, #2
 8000542:	4806      	ldr	r0, [pc, #24]	; (800055c <EpdOff+0x2c>)
 8000544:	f002 f9c2 	bl	80028cc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000548:	2064      	movs	r0, #100	; 0x64
 800054a:	f001 fcc9 	bl	8001ee0 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_OFF_GPIO_Port, EPD_OFF_Pin, RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2102      	movs	r1, #2
 8000552:	4802      	ldr	r0, [pc, #8]	; (800055c <EpdOff+0x2c>)
 8000554:	f002 f9ba 	bl	80028cc <HAL_GPIO_WritePin>
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	48000800 	.word	0x48000800

08000560 <LCDWaitForReady>:

//-----------------------------------------------------------
//Host controller function 1---Wait for host data Bus Ready
//-----------------------------------------------------------
void LCDWaitForReady()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

	//while(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET )

	uint8_t ulData = HAL_GPIO_ReadPin(EPD_HRDY_GPIO_Port, EPD_HRDY_Pin);
 8000566:	2120      	movs	r1, #32
 8000568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056c:	f002 f996 	bl	800289c <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	71fb      	strb	r3, [r7, #7]
	while(ulData == 0)
 8000574:	e006      	b.n	8000584 <LCDWaitForReady+0x24>
	{
		ulData = HAL_GPIO_ReadPin(EPD_HRDY_GPIO_Port, EPD_HRDY_Pin);
 8000576:	2120      	movs	r1, #32
 8000578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057c:	f002 f98e 	bl	800289c <HAL_GPIO_ReadPin>
 8000580:	4603      	mov	r3, r0
 8000582:	71fb      	strb	r3, [r7, #7]
	while(ulData == 0)
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d0f5      	beq.n	8000576 <LCDWaitForReady+0x16>
	}
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <LCDWriteCmdCode>:

//-----------------------------------------------------------
//Host controller function 2---Write command code to host data Bus
//-----------------------------------------------------------
void LCDWriteCmdCode(uint16_t usCmdCode)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	80fb      	strh	r3, [r7, #6]
	//uint16_t wPreamble = 0x6000;


	//uint8_t wPreamble[2] = {0x00, 0x60};
	//uint8_t wDat[2] = {usCmdCode, usCmdCode>>8};
	uint8_t dat[4]={0x00, 0x60, usCmdCode, usCmdCode>>8};
 800059e:	2300      	movs	r3, #0
 80005a0:	733b      	strb	r3, [r7, #12]
 80005a2:	2360      	movs	r3, #96	; 0x60
 80005a4:	737b      	strb	r3, [r7, #13]
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	73bb      	strb	r3, [r7, #14]
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	0a1b      	lsrs	r3, r3, #8
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	73fb      	strb	r3, [r7, #15]
	LCDWaitForReady();
 80005b6:	f7ff ffd3 	bl	8000560 <LCDWaitForReady>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2101      	movs	r1, #1
 80005be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c2:	f002 f983 	bl	80028cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, dat, 2, HAL_MAX_DELAY);
 80005c6:	f107 010c 	add.w	r1, r7, #12
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	2202      	movs	r2, #2
 80005d0:	4806      	ldr	r0, [pc, #24]	; (80005ec <LCDWriteCmdCode+0x58>)
 80005d2:	f004 f80f 	bl	80045f4 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
	//LCDWaitForReady();
	//HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	2101      	movs	r1, #1
 80005da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005de:	f002 f975 	bl	80028cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &CmdMsb, 1, HAL_MAX_DELAY);
	HAL_SPI_Transmit(&hspi1, &CmdLsb, 1, HAL_MAX_DELAY);

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
*/
}
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000078 	.word	0x20000078

080005f0 <LCDWriteData>:

//-----------------------------------------------------------
//Host controller function 3---Write Data to host data Bus
//-----------------------------------------------------------
void LCDWriteData(uint16_t usData)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	80fb      	strh	r3, [r7, #6]

	uint8_t dat[4]={ 0x00, 0x00, (uint8_t)usData,(uint8_t)( usData>>8)};
 80005fa:	2300      	movs	r3, #0
 80005fc:	733b      	strb	r3, [r7, #12]
 80005fe:	2300      	movs	r3, #0
 8000600:	737b      	strb	r3, [r7, #13]
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	73bb      	strb	r3, [r7, #14]
 8000608:	88fb      	ldrh	r3, [r7, #6]
 800060a:	0a1b      	lsrs	r3, r3, #8
 800060c:	b29b      	uxth	r3, r3
 800060e:	b2db      	uxtb	r3, r3
 8000610:	73fb      	strb	r3, [r7, #15]
	//uint8_t wPreamble[2] = {0x00, 0x00};
	//uint8_t wDat[2] = { (uint8_t)usData,(uint8_t)( usData>>8)};
	LCDWaitForReady();
 8000612:	f7ff ffa5 	bl	8000560 <LCDWaitForReady>

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2101      	movs	r1, #1
 800061a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061e:	f002 f955 	bl	80028cc <HAL_GPIO_WritePin>
	//HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
	HAL_SPI_Transmit(&hspi1, dat, 2, HAL_MAX_DELAY);
 8000622:	f107 010c 	add.w	r1, r7, #12
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	2202      	movs	r2, #2
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <LCDWriteData+0x58>)
 800062e:	f003 ffe1 	bl	80045f4 <HAL_SPI_Transmit>
	//LCDWaitForReady();
	//HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2101      	movs	r1, #1
 8000636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063a:	f002 f947 	bl	80028cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &DatLsb, 1, HAL_MAX_DELAY);

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000078 	.word	0x20000078

0800064c <LCDWriteNData>:

void LCDWriteNData(uint16_t* pwBuf, uint32_t ulSizeWordCnt)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
	//uint32_t i;

	//uint8_t dma = 1;
	uint8_t wPreamble[2] = {0x00, 0x00};
 8000656:	2300      	movs	r3, #0
 8000658:	723b      	strb	r3, [r7, #8]
 800065a:	2300      	movs	r3, #0
 800065c:	727b      	strb	r3, [r7, #9]
	//uint8_t wDat[2];
	LCDWaitForReady();
 800065e:	f7ff ff7f 	bl	8000560 <LCDWaitForReady>
	uint8_t* Buf = (uint8_t*)pwBuf;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2101      	movs	r1, #1
 800066a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066e:	f002 f92d 	bl	80028cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 8000672:	f107 0108 	add.w	r1, r7, #8
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	2201      	movs	r2, #1
 800067c:	480a      	ldr	r0, [pc, #40]	; (80006a8 <LCDWriteNData+0x5c>)
 800067e:	f003 ffb9 	bl	80045f4 <HAL_SPI_Transmit>
	LCDWaitForReady();
 8000682:	f7ff ff6d 	bl	8000560 <LCDWaitForReady>
	//HAL_SPI_Transmit_DMA(&hspi1, Buf, ulSizeWordCnt);
	HAL_SPI_Transmit(&hspi1, Buf, ulSizeWordCnt, HAL_MAX_DELAY);
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
 800068a:	683a      	ldr	r2, [r7, #0]
 800068c:	68f9      	ldr	r1, [r7, #12]
 800068e:	4806      	ldr	r0, [pc, #24]	; (80006a8 <LCDWriteNData+0x5c>)
 8000690:	f003 ffb0 	bl	80045f4 <HAL_SPI_Transmit>
//		wDat[1]=pwBuf[i]>>8;
//		HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
//		}
//	while(dma == 1)
//	{}
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000694:	2201      	movs	r2, #1
 8000696:	2101      	movs	r1, #1
 8000698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069c:	f002 f916 	bl	80028cc <HAL_GPIO_WritePin>
	}

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000078 	.word	0x20000078

080006ac <LCDReadData>:

//-----------------------------------------------------------
//Host controller function 4---Read Data from host data Bus
//-----------------------------------------------------------
uint16_t LCDReadData()
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af02      	add	r7, sp, #8

	uint8_t wRLsb[2];
	uint16_t wRData;
	uint8_t wdummy[2] = {0};
 80006b2:	2300      	movs	r3, #0
 80006b4:	813b      	strh	r3, [r7, #8]
	uint8_t rdummy[2] = {0};
 80006b6:	2300      	movs	r3, #0
 80006b8:	80bb      	strh	r3, [r7, #4]
	uint8_t wPreamble[2] = {0x00, 0x10};
 80006ba:	2300      	movs	r3, #0
 80006bc:	703b      	strb	r3, [r7, #0]
 80006be:	2310      	movs	r3, #16
 80006c0:	707b      	strb	r3, [r7, #1]

	LCDWaitForReady();
 80006c2:	f7ff ff4d 	bl	8000560 <LCDWaitForReady>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2101      	movs	r1, #1
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ce:	f002 f8fd 	bl	80028cc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 80006d2:	4639      	mov	r1, r7
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295
 80006d8:	2201      	movs	r2, #1
 80006da:	4818      	ldr	r0, [pc, #96]	; (800073c <LCDReadData+0x90>)
 80006dc:	f003 ff8a 	bl	80045f4 <HAL_SPI_Transmit>
	LCDWaitForReady();
 80006e0:	f7ff ff3e 	bl	8000560 <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, rdummy, 1,HAL_MAX_DELAY);
 80006e4:	1d3a      	adds	r2, r7, #4
 80006e6:	f107 0108 	add.w	r1, r7, #8
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2301      	movs	r3, #1
 80006f2:	4812      	ldr	r0, [pc, #72]	; (800073c <LCDReadData+0x90>)
 80006f4:	f004 f8d3 	bl	800489e <HAL_SPI_TransmitReceive>

	LCDWaitForReady();
 80006f8:	f7ff ff32 	bl	8000560 <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, wRLsb, 1,HAL_MAX_DELAY);
 80006fc:	f107 020c 	add.w	r2, r7, #12
 8000700:	f107 0108 	add.w	r1, r7, #8
 8000704:	f04f 33ff 	mov.w	r3, #4294967295
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	2301      	movs	r3, #1
 800070c:	480b      	ldr	r0, [pc, #44]	; (800073c <LCDReadData+0x90>)
 800070e:	f004 f8c6 	bl	800489e <HAL_SPI_TransmitReceive>

	wRData = wRLsb[1]<<8;
 8000712:	7b7b      	ldrb	r3, [r7, #13]
 8000714:	b29b      	uxth	r3, r3
 8000716:	021b      	lsls	r3, r3, #8
 8000718:	81fb      	strh	r3, [r7, #14]
	wRData |= wRLsb[0];
 800071a:	7b3b      	ldrb	r3, [r7, #12]
 800071c:	b29a      	uxth	r2, r3
 800071e:	89fb      	ldrh	r3, [r7, #14]
 8000720:	4313      	orrs	r3, r2
 8000722:	81fb      	strh	r3, [r7, #14]
	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000724:	2201      	movs	r2, #1
 8000726:	2101      	movs	r1, #1
 8000728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072c:	f002 f8ce 	bl	80028cc <HAL_GPIO_WritePin>

	return wRData;
 8000730:	89fb      	ldrh	r3, [r7, #14]
	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);

	return wRData;
	*/
}
 8000732:	4618      	mov	r0, r3
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000078 	.word	0x20000078

08000740 <LCDReadNData>:

//-----------------------------------------------------------
//  Read Burst N words Data
//-----------------------------------------------------------
void LCDReadNData(uint16_t* pwBuf, uint32_t ulSizeWordCnt)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af02      	add	r7, sp, #8
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]

	uint32_t i;

	uint8_t wRLsb[2];
	//uint16_t wRData;
	uint8_t wdummy[2] = {0};
 800074a:	2300      	movs	r3, #0
 800074c:	82bb      	strh	r3, [r7, #20]
	uint8_t rdummy[2] = {0};
 800074e:	2300      	movs	r3, #0
 8000750:	823b      	strh	r3, [r7, #16]
	uint8_t wPreamble[2] = {0x00, 0x10};
 8000752:	2300      	movs	r3, #0
 8000754:	733b      	strb	r3, [r7, #12]
 8000756:	2310      	movs	r3, #16
 8000758:	737b      	strb	r3, [r7, #13]
	LCDWaitForReady();
 800075a:	f7ff ff01 	bl	8000560 <LCDWaitForReady>

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2101      	movs	r1, #1
 8000762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000766:	f002 f8b1 	bl	80028cc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 800076a:	f107 010c 	add.w	r1, r7, #12
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	2201      	movs	r2, #1
 8000774:	4823      	ldr	r0, [pc, #140]	; (8000804 <LCDReadNData+0xc4>)
 8000776:	f003 ff3d 	bl	80045f4 <HAL_SPI_Transmit>

	LCDWaitForReady();
 800077a:	f7ff fef1 	bl	8000560 <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, rdummy, 1,HAL_MAX_DELAY);
 800077e:	f107 0210 	add.w	r2, r7, #16
 8000782:	f107 0114 	add.w	r1, r7, #20
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	2301      	movs	r3, #1
 800078e:	481d      	ldr	r0, [pc, #116]	; (8000804 <LCDReadNData+0xc4>)
 8000790:	f004 f885 	bl	800489e <HAL_SPI_TransmitReceive>

	LCDWaitForReady();
 8000794:	f7ff fee4 	bl	8000560 <LCDWaitForReady>

		for(i=0;i<ulSizeWordCnt;i++)
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
 800079c:	e024      	b.n	80007e8 <LCDReadNData+0xa8>
		{
			HAL_SPI_TransmitReceive(&hspi1, wdummy, wRLsb, 1,HAL_MAX_DELAY);
 800079e:	f107 0218 	add.w	r2, r7, #24
 80007a2:	f107 0114 	add.w	r1, r7, #20
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2301      	movs	r3, #1
 80007ae:	4815      	ldr	r0, [pc, #84]	; (8000804 <LCDReadNData+0xc4>)
 80007b0:	f004 f875 	bl	800489e <HAL_SPI_TransmitReceive>
			pwBuf[i] = wRLsb[1]<<8;
 80007b4:	7e7b      	ldrb	r3, [r7, #25]
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	6879      	ldr	r1, [r7, #4]
 80007be:	440b      	add	r3, r1
 80007c0:	0212      	lsls	r2, r2, #8
 80007c2:	b292      	uxth	r2, r2
 80007c4:	801a      	strh	r2, [r3, #0]
			pwBuf[i] |= wRLsb[0];
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	8819      	ldrh	r1, [r3, #0]
 80007d0:	7e3b      	ldrb	r3, [r7, #24]
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	4403      	add	r3, r0
 80007dc:	430a      	orrs	r2, r1
 80007de:	b292      	uxth	r2, r2
 80007e0:	801a      	strh	r2, [r3, #0]
		for(i=0;i<ulSizeWordCnt;i++)
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	3301      	adds	r3, #1
 80007e6:	61fb      	str	r3, [r7, #28]
 80007e8:	69fa      	ldr	r2, [r7, #28]
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d3d6      	bcc.n	800079e <LCDReadNData+0x5e>
		}

		HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2101      	movs	r1, #1
 80007f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f8:	f002 f868 	bl	80028cc <HAL_GPIO_WritePin>
	}

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 80007fc:	bf00      	nop
 80007fe:	3720      	adds	r7, #32
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000078 	.word	0x20000078

08000808 <LCDSendCmdArg>:

//-----------------------------------------------------------
//Host controller function 5---Write command to host data Bus with aruments
//-----------------------------------------------------------
void LCDSendCmdArg(uint16_t usCmdCode,uint16_t* pArg, uint16_t usNumArg)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	6039      	str	r1, [r7, #0]
 8000812:	80fb      	strh	r3, [r7, #6]
 8000814:	4613      	mov	r3, r2
 8000816:	80bb      	strh	r3, [r7, #4]
     uint16_t i;
     //Send Cmd code
     LCDWriteCmdCode(usCmdCode);
 8000818:	88fb      	ldrh	r3, [r7, #6]
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff feba 	bl	8000594 <LCDWriteCmdCode>
     //Send Data
     for(i=0;i<usNumArg;i++)
 8000820:	2300      	movs	r3, #0
 8000822:	81fb      	strh	r3, [r7, #14]
 8000824:	e00a      	b.n	800083c <LCDSendCmdArg+0x34>
     {
         LCDWriteData(pArg[i]);
 8000826:	89fb      	ldrh	r3, [r7, #14]
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	683a      	ldr	r2, [r7, #0]
 800082c:	4413      	add	r3, r2
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fedd 	bl	80005f0 <LCDWriteData>
     for(i=0;i<usNumArg;i++)
 8000836:	89fb      	ldrh	r3, [r7, #14]
 8000838:	3301      	adds	r3, #1
 800083a:	81fb      	strh	r3, [r7, #14]
 800083c:	89fa      	ldrh	r2, [r7, #14]
 800083e:	88bb      	ldrh	r3, [r7, #4]
 8000840:	429a      	cmp	r2, r3
 8000842:	d3f0      	bcc.n	8000826 <LCDSendCmdArg+0x1e>
     }
}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <IT8951ReadReg>:

//-----------------------------------------------------------
//Host Cmd 4---REG_RD
//-----------------------------------------------------------
uint16_t IT8951ReadReg(uint16_t usRegAddr)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	80fb      	strh	r3, [r7, #6]
	uint16_t usData;

	//Send Cmd and Register Address
	LCDWriteCmdCode(IT8951_TCON_REG_RD);
 8000856:	2010      	movs	r0, #16
 8000858:	f7ff fe9c 	bl	8000594 <LCDWriteCmdCode>
	LCDWriteData(usRegAddr);
 800085c:	88fb      	ldrh	r3, [r7, #6]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fec6 	bl	80005f0 <LCDWriteData>
	//Read data from Host Data bus
	usData = LCDReadData();
 8000864:	f7ff ff22 	bl	80006ac <LCDReadData>
 8000868:	4603      	mov	r3, r0
 800086a:	81fb      	strh	r3, [r7, #14]
	return usData;
 800086c:	89fb      	ldrh	r3, [r7, #14]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <IT8951WriteReg>:
//-----------------------------------------------------------
//Host Cmd 5---REG_WR
//-----------------------------------------------------------
void IT8951WriteReg(uint16_t usRegAddr,uint16_t usValue)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	4603      	mov	r3, r0
 800087e:	460a      	mov	r2, r1
 8000880:	80fb      	strh	r3, [r7, #6]
 8000882:	4613      	mov	r3, r2
 8000884:	80bb      	strh	r3, [r7, #4]
	//Send Cmd , Register Address and Write Value
	LCDWriteCmdCode(IT8951_TCON_REG_WR);
 8000886:	2011      	movs	r0, #17
 8000888:	f7ff fe84 	bl	8000594 <LCDWriteCmdCode>
	LCDWriteData(usRegAddr);
 800088c:	88fb      	ldrh	r3, [r7, #6]
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff feae 	bl	80005f0 <LCDWriteData>
	LCDWriteData(usValue);
 8000894:	88bb      	ldrh	r3, [r7, #4]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff feaa 	bl	80005f0 <LCDWriteData>
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <IT8951LoadImgAreaStart>:
}
//-----------------------------------------------------------
//Host Cmd 11---LD_IMG_AREA
//-----------------------------------------------------------
void IT8951LoadImgAreaStart(IT8951LdImgInfo* pstLdImgInfo ,IT8951AreaImgInfo* pstAreaImgInfo)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
    uint16_t usArg[5];
    //Setting Argument for Load image start
    usArg[0] = (pstLdImgInfo->usEndianType << 8 )
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	021b      	lsls	r3, r3, #8
    |(pstLdImgInfo->usPixelFormat << 4)
 80008b4:	b21a      	sxth	r2, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	885b      	ldrh	r3, [r3, #2]
 80008ba:	011b      	lsls	r3, r3, #4
 80008bc:	b21b      	sxth	r3, r3
 80008be:	4313      	orrs	r3, r2
 80008c0:	b21a      	sxth	r2, r3
    |(pstLdImgInfo->usRotate);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	889b      	ldrh	r3, [r3, #4]
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	4313      	orrs	r3, r2
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	b29b      	uxth	r3, r3
    usArg[0] = (pstLdImgInfo->usEndianType << 8 )
 80008ce:	81bb      	strh	r3, [r7, #12]
    usArg[1] = pstAreaImgInfo->usX;
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	81fb      	strh	r3, [r7, #14]
    usArg[2] = pstAreaImgInfo->usY;
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	885b      	ldrh	r3, [r3, #2]
 80008da:	823b      	strh	r3, [r7, #16]
    usArg[3] = pstAreaImgInfo->usWidth;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	889b      	ldrh	r3, [r3, #4]
 80008e0:	827b      	strh	r3, [r7, #18]
    usArg[4] = pstAreaImgInfo->usHeight;
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	88db      	ldrh	r3, [r3, #6]
 80008e6:	82bb      	strh	r3, [r7, #20]
    //Send Cmd and Args
    LCDSendCmdArg(IT8951_TCON_LD_IMG_AREA , usArg , 5);
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	2205      	movs	r2, #5
 80008ee:	4619      	mov	r1, r3
 80008f0:	2021      	movs	r0, #33	; 0x21
 80008f2:	f7ff ff89 	bl	8000808 <LCDSendCmdArg>
}
 80008f6:	bf00      	nop
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <IT8951LoadImgEnd>:
//-----------------------------------------------------------
//Host Cmd 12---LD_IMG_END
//-----------------------------------------------------------
void IT8951LoadImgEnd(void)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	af00      	add	r7, sp, #0
    LCDWriteCmdCode(IT8951_TCON_LD_IMG_END);
 8000902:	2022      	movs	r0, #34	; 0x22
 8000904:	f7ff fe46 	bl	8000594 <LCDWriteCmdCode>
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <GetIT8951SystemInfo>:

void GetIT8951SystemInfo(void* pBuf)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	uint16_t* pusWord = (uint16_t*)pBuf;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	60fb      	str	r3, [r7, #12]
	//IT8951DevInfo* pstDevInfo;

	//Send I80 CMD
	LCDWriteCmdCode(USDEF_I80_CMD_GET_DEV_INFO);
 8000918:	f240 3002 	movw	r0, #770	; 0x302
 800091c:	f7ff fe3a 	bl	8000594 <LCDWriteCmdCode>

	//Burst Read Request for SPI interface only
	LCDReadNData(pusWord, sizeof(IT8951DevInfo)/2);//Polling HRDY for each words(2-bytes) if possible
 8000920:	2114      	movs	r1, #20
 8000922:	68f8      	ldr	r0, [r7, #12]
 8000924:	f7ff ff0c 	bl	8000740 <LCDReadNData>
//	printf("Image Buffer Address = %X\r\n",
//	pstDevInfo->usImgBufAddrL | (pstDevInfo->usImgBufAddrH << 16));
	//Show Firmware and LUT Version
//	printf("FW Version = %s\r\n", (uint8_t*)pstDevInfo->usFWVersion);
//	printf("LUT Version = %s\r\n", (uint8_t*)pstDevInfo->usLUTVersion);
}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <IT8951SetImgBufBaseAddr>:

//-----------------------------------------------------------
//Initial function 2---Set Image buffer base address
//-----------------------------------------------------------
void IT8951SetImgBufBaseAddr(uint32_t ulImgBufAddr)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	uint16_t usWordH = (uint16_t)((ulImgBufAddr >> 16) & 0x0000FFFF);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	0c1b      	lsrs	r3, r3, #16
 800093c:	81fb      	strh	r3, [r7, #14]
	uint16_t usWordL = (uint16_t)( ulImgBufAddr & 0x0000FFFF);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	81bb      	strh	r3, [r7, #12]
	//Write LISAR Reg
	IT8951WriteReg(LISAR + 2 ,usWordH);
 8000942:	89fb      	ldrh	r3, [r7, #14]
 8000944:	4619      	mov	r1, r3
 8000946:	f240 200a 	movw	r0, #522	; 0x20a
 800094a:	f7ff ff94 	bl	8000876 <IT8951WriteReg>
	IT8951WriteReg(LISAR ,usWordL);
 800094e:	89bb      	ldrh	r3, [r7, #12]
 8000950:	4619      	mov	r1, r3
 8000952:	f44f 7002 	mov.w	r0, #520	; 0x208
 8000956:	f7ff ff8e 	bl	8000876 <IT8951WriteReg>
}
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <IT8951WaitForDisplayReady>:
//-----------------------------------------------------------
//Display function 1---Wait for LUT Engine Finish
//                     Polling Display Engine Ready by LUTNo
//-----------------------------------------------------------
void IT8951WaitForDisplayReady()
{
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
	//Check IT8951 Register LUTAFSR => NonZero Busy, 0 - Free
	while(IT8951ReadReg(LUTAFSR));
 8000966:	bf00      	nop
 8000968:	f241 2024 	movw	r0, #4644	; 0x1224
 800096c:	f7ff ff6e 	bl	800084c <IT8951ReadReg>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1f8      	bne.n	8000968 <IT8951WaitForDisplayReady+0x6>
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}

0800097a <IT8951HostAreaPackedPixelWrite>:

//-----------------------------------------------------------
//Display function 2---Load Image Area process
//-----------------------------------------------------------
void IT8951HostAreaPackedPixelWrite(IT8951LdImgInfo* pstLdImgInfo,IT8951AreaImgInfo* pstAreaImgInfo)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b084      	sub	sp, #16
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
 8000982:	6039      	str	r1, [r7, #0]
	//uint32_t i,j;
	//Source buffer address of Host
	uint16_t* pusFrameBuf = (uint16_t*)pstLdImgInfo->ulStartFBAddr;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	60fb      	str	r3, [r7, #12]

	//Set Image buffer(IT8951) Base address
	IT8951SetImgBufBaseAddr(pstLdImgInfo->ulImgBufBaseAddr);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ffce 	bl	8000930 <IT8951SetImgBufBaseAddr>
	//Send Load Image start Cmd
	IT8951LoadImgAreaStart(pstLdImgInfo , pstAreaImgInfo);
 8000994:	6839      	ldr	r1, [r7, #0]
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff ff84 	bl	80008a4 <IT8951LoadImgAreaStart>
	//Host Write Data
	//LCDWriteNData(pusFrameBuf, (pstAreaImgInfo->usHeight*pstAreaImgInfo->usWidth/2));
	LCDWriteNData(pusFrameBuf, (pstAreaImgInfo->usHeight*pstAreaImgInfo->usWidth/4));
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	88db      	ldrh	r3, [r3, #6]
 80009a0:	461a      	mov	r2, r3
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	889b      	ldrh	r3, [r3, #4]
 80009a6:	fb03 f302 	mul.w	r3, r3, r2
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	da00      	bge.n	80009b0 <IT8951HostAreaPackedPixelWrite+0x36>
 80009ae:	3303      	adds	r3, #3
 80009b0:	109b      	asrs	r3, r3, #2
 80009b2:	4619      	mov	r1, r3
 80009b4:	68f8      	ldr	r0, [r7, #12]
 80009b6:	f7ff fe49 	bl	800064c <LCDWriteNData>
					LCDWriteData(*pusFrameBuf);
					pusFrameBuf++;
			}
	}*/
	//Send Load Img End Command
	IT8951LoadImgEnd();
 80009ba:	f7ff ffa0 	bl	80008fe <IT8951LoadImgEnd>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <IT8951DisplayArea>:

//-----------------------------------------------------------
//Display functions 3---Application for Display panel Area
//-----------------------------------------------------------
void IT8951DisplayArea(uint16_t usX, uint16_t usY, uint16_t usW, uint16_t usH, uint16_t usDpyMode)
{
 80009c6:	b590      	push	{r4, r7, lr}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4604      	mov	r4, r0
 80009ce:	4608      	mov	r0, r1
 80009d0:	4611      	mov	r1, r2
 80009d2:	461a      	mov	r2, r3
 80009d4:	4623      	mov	r3, r4
 80009d6:	80fb      	strh	r3, [r7, #6]
 80009d8:	4603      	mov	r3, r0
 80009da:	80bb      	strh	r3, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	807b      	strh	r3, [r7, #2]
 80009e0:	4613      	mov	r3, r2
 80009e2:	803b      	strh	r3, [r7, #0]
	//Send I80 Display Command (User defined command of IT8951)
	LCDWriteCmdCode(USDEF_I80_CMD_DPY_AREA); //0x0034
 80009e4:	2034      	movs	r0, #52	; 0x34
 80009e6:	f7ff fdd5 	bl	8000594 <LCDWriteCmdCode>
	//Write arguments
	LCDWriteData(usX);
 80009ea:	88fb      	ldrh	r3, [r7, #6]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fdff 	bl	80005f0 <LCDWriteData>
	LCDWriteData(usY);
 80009f2:	88bb      	ldrh	r3, [r7, #4]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fdfb 	bl	80005f0 <LCDWriteData>
	LCDWriteData(usW);
 80009fa:	887b      	ldrh	r3, [r7, #2]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fdf7 	bl	80005f0 <LCDWriteData>
	LCDWriteData(usH);
 8000a02:	883b      	ldrh	r3, [r7, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fdf3 	bl	80005f0 <LCDWriteData>
	LCDWriteData(usDpyMode);
 8000a0a:	8b3b      	ldrh	r3, [r7, #24]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fdef 	bl	80005f0 <LCDWriteData>
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd90      	pop	{r4, r7, pc}
	...

08000a1c <IT8951_Init>:

//-----------------------------------------------------------
//Test function 1---Software Initial
//-----------------------------------------------------------
uint8_t IT8951_Init()
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	//bcm2835_gpio_fsel(CS, BCM2835_GPIO_FSEL_OUTP);
	//bcm2835_gpio_fsel(HRDY, BCM2835_GPIO_FSEL_INPT);
	//bcm2835_gpio_fsel(RESET, BCM2835_GPIO_FSEL_OUTP);

	//bcm2835_gpio_write(CS, HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2101      	movs	r1, #1
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f001 ff50 	bl	80028cc <HAL_GPIO_WritePin>

	//printf("****** IT8951 ******\n");

	//bcm2835_gpio_write(RESET, LOW);
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2110      	movs	r1, #16
 8000a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a34:	f001 ff4a 	bl	80028cc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f001 fa51 	bl	8001ee0 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, SET);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2110      	movs	r1, #16
 8000a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a46:	f001 ff41 	bl	80028cc <HAL_GPIO_WritePin>
	//bcm2835_gpio_write(RESET, HIGH);

	//Get Device Info
	GetIT8951SystemInfo(&gstI80DevInfo);
 8000a4a:	480a      	ldr	r0, [pc, #40]	; (8000a74 <IT8951_Init+0x58>)
 8000a4c:	f7ff ff5e 	bl	800090c <GetIT8951SystemInfo>
//	{
//		perror("malloc error!\n");
//		return 1;
//	}

 	gulImgBufAddr = gstI80DevInfo.usImgBufAddrL | (gstI80DevInfo.usImgBufAddrH << 16);
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <IT8951_Init+0x58>)
 8000a52:	889b      	ldrh	r3, [r3, #4]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <IT8951_Init+0x58>)
 8000a58:	88db      	ldrh	r3, [r3, #6]
 8000a5a:	041b      	lsls	r3, r3, #16
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <IT8951_Init+0x5c>)
 8000a62:	601a      	str	r2, [r3, #0]

 	//Set to Enable I80 Packed mode
 	IT8951WriteReg(I80CPCR, 0x0001);
 8000a64:	2101      	movs	r1, #1
 8000a66:	2004      	movs	r0, #4
 8000a68:	f7ff ff05 	bl	8000876 <IT8951WriteReg>
 	//EpdDriverLoadTemplate();
	return 0;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000034 	.word	0x20000034
 8000a78:	2000005c 	.word	0x2000005c

08000a7c <EpdDriverLoadTemplate>:



extern const unsigned char Kalender[];
void EpdDriverLoadTemplate()
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
	IT8951LdImgInfo stLdImgInfo;
	IT8951AreaImgInfo stAreaImgInfo;
	IT8951WaitForDisplayReady();
 8000a82:	f7ff ff6e 	bl	8000962 <IT8951WaitForDisplayReady>

	//Setting Load image information
	stLdImgInfo.ulStartFBAddr    = (uint32_t)Kalender;
 8000a86:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <EpdDriverLoadTemplate+0x58>)
 8000a88:	613b      	str	r3, [r7, #16]
	stLdImgInfo.usEndianType     = IT8951_LDIMG_L_ENDIAN;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	813b      	strh	r3, [r7, #8]
	stLdImgInfo.usPixelFormat    = IT8951_4BPP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	817b      	strh	r3, [r7, #10]
	stLdImgInfo.usRotate         = IT8951_ROTATE_0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	81bb      	strh	r3, [r7, #12]
	stLdImgInfo.ulImgBufBaseAddr = gulImgBufAddr;
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <EpdDriverLoadTemplate+0x5c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	617b      	str	r3, [r7, #20]
	//Set Load Area
	stAreaImgInfo.usX      = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	803b      	strh	r3, [r7, #0]
	stAreaImgInfo.usY      = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	807b      	strh	r3, [r7, #2]
	stAreaImgInfo.usWidth  = gstI80DevInfo.usPanelW;
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <EpdDriverLoadTemplate+0x60>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	80bb      	strh	r3, [r7, #4]
 	stAreaImgInfo.usHeight = gstI80DevInfo.usPanelH;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <EpdDriverLoadTemplate+0x60>)
 8000aac:	885b      	ldrh	r3, [r3, #2]
 8000aae:	80fb      	strh	r3, [r7, #6]

	//Load Image from Host to IT8951 Image Buffer
	IT8951HostAreaPackedPixelWrite(&stLdImgInfo, &stAreaImgInfo);//Display function 2
 8000ab0:	463a      	mov	r2, r7
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ff5e 	bl	800097a <IT8951HostAreaPackedPixelWrite>
	//Display Area ?V (x,y,w,h) with mode 2 for fast gray clear mode - depends on current waveform
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac4:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <EpdDriverLoadTemplate+0x64>)
 8000ac6:	f001 ff01 	bl	80028cc <HAL_GPIO_WritePin>
	//IT8951DisplayArea(stAreaImgInfo.usX ,stAreaImgInfo.usY, gstI80DevInfo.usPanelW, gstI80DevInfo.usPanelH, 2);
	//IT8951Sleep();
}
 8000aca:	bf00      	nop
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	08006ef0 	.word	0x08006ef0
 8000ad8:	2000005c 	.word	0x2000005c
 8000adc:	20000034 	.word	0x20000034
 8000ae0:	48000400 	.word	0x48000400

08000ae4 <EpdDriverDrawBox>:


void EpdDriverDrawBox(uint8_t* buffer, uint16_t usX, uint16_t usY, uint16_t usWidth, uint16_t usHeight)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	4608      	mov	r0, r1
 8000aee:	4611      	mov	r1, r2
 8000af0:	461a      	mov	r2, r3
 8000af2:	4603      	mov	r3, r0
 8000af4:	817b      	strh	r3, [r7, #10]
 8000af6:	460b      	mov	r3, r1
 8000af8:	813b      	strh	r3, [r7, #8]
 8000afa:	4613      	mov	r3, r2
 8000afc:	80fb      	strh	r3, [r7, #6]
	IT8951LdImgInfo stLdImgInfo;
	IT8951AreaImgInfo stAreaImgInfo;
	IT8951WaitForDisplayReady();
 8000afe:	f7ff ff30 	bl	8000962 <IT8951WaitForDisplayReady>

	//Setting Load image information
	stLdImgInfo.ulStartFBAddr    = (uint32_t)buffer;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	623b      	str	r3, [r7, #32]
	stLdImgInfo.usEndianType     = IT8951_LDIMG_L_ENDIAN;
 8000b06:	2300      	movs	r3, #0
 8000b08:	833b      	strh	r3, [r7, #24]
	stLdImgInfo.usPixelFormat    = IT8951_8BPP;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	837b      	strh	r3, [r7, #26]
	stLdImgInfo.usRotate         = IT8951_ROTATE_0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	83bb      	strh	r3, [r7, #28]
	stLdImgInfo.ulImgBufBaseAddr = gulImgBufAddr;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <EpdDriverDrawBox+0x5c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
	//Set Load Area
	stAreaImgInfo.usX      = usX;
 8000b18:	897b      	ldrh	r3, [r7, #10]
 8000b1a:	823b      	strh	r3, [r7, #16]
	stAreaImgInfo.usY      = usY;
 8000b1c:	893b      	ldrh	r3, [r7, #8]
 8000b1e:	827b      	strh	r3, [r7, #18]
	stAreaImgInfo.usWidth  = usWidth;
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	82bb      	strh	r3, [r7, #20]
 	stAreaImgInfo.usHeight = usHeight;
 8000b24:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000b26:	82fb      	strh	r3, [r7, #22]

	//Load Image from Host to IT8951 Image Buffer
	IT8951HostAreaPackedPixelWrite(&stLdImgInfo, &stAreaImgInfo);//Display function 2
 8000b28:	f107 0210 	add.w	r2, r7, #16
 8000b2c:	f107 0318 	add.w	r3, r7, #24
 8000b30:	4611      	mov	r1, r2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ff21 	bl	800097a <IT8951HostAreaPackedPixelWrite>
	//Display Area ?V (x,y,w,h) with mode 2 for fast gray clear mode - depends on current waveform
	//IT8951DisplayArea(stAreaImgInfo.usX,stAreaImgInfo.usY, stAreaImgInfo.usWidth, stAreaImgInfo.usHeight, 2);
	//IT8951Sleep();
}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	2000005c 	.word	0x2000005c

08000b44 <EpdDriverShowDisp>:

void EpdDriverShowDisp()
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af02      	add	r7, sp, #8
	IT8951DisplayArea(0,0,1200,825, 2);
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	f240 3339 	movw	r3, #825	; 0x339
 8000b52:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000b56:	2100      	movs	r1, #0
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f7ff ff34 	bl	80009c6 <IT8951DisplayArea>
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <Paint_NewImage>:
//    width   :   The width of the picture
//    Height  :   The height of the picture
//    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(uint8_t *image, uint16_t Width, uint16_t Height, uint16_t Rotate, uint16_t Color)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	4611      	mov	r1, r2
 8000b70:	461a      	mov	r2, r3
 8000b72:	4603      	mov	r3, r0
 8000b74:	817b      	strh	r3, [r7, #10]
 8000b76:	460b      	mov	r3, r1
 8000b78:	813b      	strh	r3, [r7, #8]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <Paint_NewImage+0x84>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8000b84:	4a18      	ldr	r2, [pc, #96]	; (8000be8 <Paint_NewImage+0x84>)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 8000b8a:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <Paint_NewImage+0x84>)
 8000b8c:	897b      	ldrh	r3, [r7, #10]
 8000b8e:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000b90:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <Paint_NewImage+0x84>)
 8000b92:	893b      	ldrh	r3, [r7, #8]
 8000b94:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8000b96:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <Paint_NewImage+0x84>)
 8000b98:	8b3b      	ldrh	r3, [r7, #24]
 8000b9a:	8193      	strh	r3, [r2, #12]
    //Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
    Paint.WidthByte = Width;
 8000b9c:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <Paint_NewImage+0x84>)
 8000b9e:	897b      	ldrh	r3, [r7, #10]
 8000ba0:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8000ba2:	4a11      	ldr	r2, [pc, #68]	; (8000be8 <Paint_NewImage+0x84>)
 8000ba4:	893b      	ldrh	r3, [r7, #8]
 8000ba6:	8293      	strh	r3, [r2, #20]
    //printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
    //printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 8000ba8:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <Paint_NewImage+0x84>)
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <Paint_NewImage+0x84>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000bb4:	88fb      	ldrh	r3, [r7, #6]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d002      	beq.n	8000bc0 <Paint_NewImage+0x5c>
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	2bb4      	cmp	r3, #180	; 0xb4
 8000bbe:	d106      	bne.n	8000bce <Paint_NewImage+0x6a>
        Paint.Width = Width;
 8000bc0:	4a09      	ldr	r2, [pc, #36]	; (8000be8 <Paint_NewImage+0x84>)
 8000bc2:	897b      	ldrh	r3, [r7, #10]
 8000bc4:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000bc6:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <Paint_NewImage+0x84>)
 8000bc8:	893b      	ldrh	r3, [r7, #8]
 8000bca:	80d3      	strh	r3, [r2, #6]
 8000bcc:	e005      	b.n	8000bda <Paint_NewImage+0x76>
    } else {
        Paint.Width = Height;
 8000bce:	4a06      	ldr	r2, [pc, #24]	; (8000be8 <Paint_NewImage+0x84>)
 8000bd0:	893b      	ldrh	r3, [r7, #8]
 8000bd2:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8000bd4:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <Paint_NewImage+0x84>)
 8000bd6:	897b      	ldrh	r3, [r7, #10]
 8000bd8:	80d3      	strh	r3, [r2, #6]
    }
}
 8000bda:	bf00      	nop
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000060 	.word	0x20000060

08000bec <Paint_SetPixel>:
//    Xpoint  :   At point X
//    Ypoint  :   At point Y
//    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	80fb      	strh	r3, [r7, #6]
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	80bb      	strh	r3, [r7, #4]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000bfe:	4b50      	ldr	r3, [pc, #320]	; (8000d40 <Paint_SetPixel+0x154>)
 8000c00:	889b      	ldrh	r3, [r3, #4]
 8000c02:	88fa      	ldrh	r2, [r7, #6]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	f200 8091 	bhi.w	8000d2c <Paint_SetPixel+0x140>
 8000c0a:	4b4d      	ldr	r3, [pc, #308]	; (8000d40 <Paint_SetPixel+0x154>)
 8000c0c:	88db      	ldrh	r3, [r3, #6]
 8000c0e:	88ba      	ldrh	r2, [r7, #4]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	f200 808b 	bhi.w	8000d2c <Paint_SetPixel+0x140>
//        Debug("Exceeding display boundaries\r\n");
        return;
    }      
    uint16_t X, Y;

    switch(Paint.Rotate) {
 8000c16:	4b4a      	ldr	r3, [pc, #296]	; (8000d40 <Paint_SetPixel+0x154>)
 8000c18:	89db      	ldrh	r3, [r3, #14]
 8000c1a:	2b5a      	cmp	r3, #90	; 0x5a
 8000c1c:	d00f      	beq.n	8000c3e <Paint_SetPixel+0x52>
 8000c1e:	2b5a      	cmp	r3, #90	; 0x5a
 8000c20:	dc02      	bgt.n	8000c28 <Paint_SetPixel+0x3c>
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d006      	beq.n	8000c34 <Paint_SetPixel+0x48>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
		
    default:
        return;
 8000c26:	e086      	b.n	8000d36 <Paint_SetPixel+0x14a>
    switch(Paint.Rotate) {
 8000c28:	2bb4      	cmp	r3, #180	; 0xb4
 8000c2a:	d012      	beq.n	8000c52 <Paint_SetPixel+0x66>
 8000c2c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000c30:	d01e      	beq.n	8000c70 <Paint_SetPixel+0x84>
        return;
 8000c32:	e080      	b.n	8000d36 <Paint_SetPixel+0x14a>
        X = Xpoint;
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 8000c38:	88bb      	ldrh	r3, [r7, #4]
 8000c3a:	81bb      	strh	r3, [r7, #12]
        break;
 8000c3c:	e022      	b.n	8000c84 <Paint_SetPixel+0x98>
        X = Paint.WidthMemory - Ypoint - 1;
 8000c3e:	4b40      	ldr	r3, [pc, #256]	; (8000d40 <Paint_SetPixel+0x154>)
 8000c40:	891a      	ldrh	r2, [r3, #8]
 8000c42:	88bb      	ldrh	r3, [r7, #4]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8000c4c:	88fb      	ldrh	r3, [r7, #6]
 8000c4e:	81bb      	strh	r3, [r7, #12]
        break;
 8000c50:	e018      	b.n	8000c84 <Paint_SetPixel+0x98>
        X = Paint.WidthMemory - Xpoint - 1;
 8000c52:	4b3b      	ldr	r3, [pc, #236]	; (8000d40 <Paint_SetPixel+0x154>)
 8000c54:	891a      	ldrh	r2, [r3, #8]
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8000c60:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <Paint_SetPixel+0x154>)
 8000c62:	895a      	ldrh	r2, [r3, #10]
 8000c64:	88bb      	ldrh	r3, [r7, #4]
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	81bb      	strh	r3, [r7, #12]
        break;
 8000c6e:	e009      	b.n	8000c84 <Paint_SetPixel+0x98>
        X = Ypoint;
 8000c70:	88bb      	ldrh	r3, [r7, #4]
 8000c72:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8000c74:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <Paint_SetPixel+0x154>)
 8000c76:	895a      	ldrh	r2, [r3, #10]
 8000c78:	88fb      	ldrh	r3, [r7, #6]
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	81bb      	strh	r3, [r7, #12]
        break;
 8000c82:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8000c84:	4b2e      	ldr	r3, [pc, #184]	; (8000d40 <Paint_SetPixel+0x154>)
 8000c86:	8a1b      	ldrh	r3, [r3, #16]
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	d851      	bhi.n	8000d30 <Paint_SetPixel+0x144>
 8000c8c:	a201      	add	r2, pc, #4	; (adr r2, 8000c94 <Paint_SetPixel+0xa8>)
 8000c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c92:	bf00      	nop
 8000c94:	08000ce3 	.word	0x08000ce3
 8000c98:	08000ca5 	.word	0x08000ca5
 8000c9c:	08000cb5 	.word	0x08000cb5
 8000ca0:	08000cc5 	.word	0x08000cc5
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8000ca4:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <Paint_SetPixel+0x154>)
 8000ca6:	891a      	ldrh	r2, [r3, #8]
 8000ca8:	89fb      	ldrh	r3, [r7, #14]
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	81fb      	strh	r3, [r7, #14]
        break;
 8000cb2:	e017      	b.n	8000ce4 <Paint_SetPixel+0xf8>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8000cb4:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <Paint_SetPixel+0x154>)
 8000cb6:	895a      	ldrh	r2, [r3, #10]
 8000cb8:	89bb      	ldrh	r3, [r7, #12]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	81bb      	strh	r3, [r7, #12]
        break;
 8000cc2:	e00f      	b.n	8000ce4 <Paint_SetPixel+0xf8>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8000cc4:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <Paint_SetPixel+0x154>)
 8000cc6:	891a      	ldrh	r2, [r3, #8]
 8000cc8:	89fb      	ldrh	r3, [r7, #14]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8000cd2:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <Paint_SetPixel+0x154>)
 8000cd4:	895a      	ldrh	r2, [r3, #10]
 8000cd6:	89bb      	ldrh	r3, [r7, #12]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	81bb      	strh	r3, [r7, #12]
        break;
 8000ce0:	e000      	b.n	8000ce4 <Paint_SetPixel+0xf8>
        break;
 8000ce2:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <Paint_SetPixel+0x154>)
 8000ce6:	891b      	ldrh	r3, [r3, #8]
 8000ce8:	89fa      	ldrh	r2, [r7, #14]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d822      	bhi.n	8000d34 <Paint_SetPixel+0x148>
 8000cee:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <Paint_SetPixel+0x154>)
 8000cf0:	895b      	ldrh	r3, [r3, #10]
 8000cf2:	89ba      	ldrh	r2, [r7, #12]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d81d      	bhi.n	8000d34 <Paint_SetPixel+0x148>
//        Debug("Exceeding display boundaries\r\n");
        return;
    }
    
   // uint32_t Addr = X / 8 + Y * Paint.WidthByte;
    uint32_t Addr = X + Y * Paint.WidthByte;
 8000cf8:	89fa      	ldrh	r2, [r7, #14]
 8000cfa:	89bb      	ldrh	r3, [r7, #12]
 8000cfc:	4910      	ldr	r1, [pc, #64]	; (8000d40 <Paint_SetPixel+0x154>)
 8000cfe:	8a49      	ldrh	r1, [r1, #18]
 8000d00:	fb01 f303 	mul.w	r3, r1, r3
 8000d04:	4413      	add	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
   // uint8_t Rdata = Paint.Image[Addr];
    if(Color == BLACK)
 8000d08:	887b      	ldrh	r3, [r7, #2]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d106      	bne.n	8000d1c <Paint_SetPixel+0x130>
        //Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
    	Paint.Image[Addr] = BLACK;
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <Paint_SetPixel+0x154>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	4413      	add	r3, r2
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	e00c      	b.n	8000d36 <Paint_SetPixel+0x14a>
    else
        //Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
    	Paint.Image[Addr] = Color;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <Paint_SetPixel+0x154>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	4413      	add	r3, r2
 8000d24:	887a      	ldrh	r2, [r7, #2]
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	e004      	b.n	8000d36 <Paint_SetPixel+0x14a>
        return;
 8000d2c:	bf00      	nop
 8000d2e:	e002      	b.n	8000d36 <Paint_SetPixel+0x14a>
        return;
 8000d30:	bf00      	nop
 8000d32:	e000      	b.n	8000d36 <Paint_SetPixel+0x14a>
        return;
 8000d34:	bf00      	nop
}
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	20000060 	.word	0x20000060

08000d44 <Paint_Clear>:
//function:	Clear the color of the picture
//parameter:
//    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(uint8_t Color)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
    for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000d4e:	2300      	movs	r3, #0
 8000d50:	81fb      	strh	r3, [r7, #14]
 8000d52:	e01b      	b.n	8000d8c <Paint_Clear+0x48>
        for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000d54:	2300      	movs	r3, #0
 8000d56:	81bb      	strh	r3, [r7, #12]
 8000d58:	e010      	b.n	8000d7c <Paint_Clear+0x38>
            uint32_t Addr = X + Y*Paint.WidthByte;
 8000d5a:	89ba      	ldrh	r2, [r7, #12]
 8000d5c:	89fb      	ldrh	r3, [r7, #14]
 8000d5e:	4911      	ldr	r1, [pc, #68]	; (8000da4 <Paint_Clear+0x60>)
 8000d60:	8a49      	ldrh	r1, [r1, #18]
 8000d62:	fb01 f303 	mul.w	r3, r1, r3
 8000d66:	4413      	add	r3, r2
 8000d68:	60bb      	str	r3, [r7, #8]
            Paint.Image[Addr] = Color;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <Paint_Clear+0x60>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	4413      	add	r3, r2
 8000d72:	79fa      	ldrb	r2, [r7, #7]
 8000d74:	701a      	strb	r2, [r3, #0]
        for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000d76:	89bb      	ldrh	r3, [r7, #12]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	81bb      	strh	r3, [r7, #12]
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <Paint_Clear+0x60>)
 8000d7e:	8a5b      	ldrh	r3, [r3, #18]
 8000d80:	89ba      	ldrh	r2, [r7, #12]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d3e9      	bcc.n	8000d5a <Paint_Clear+0x16>
    for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000d86:	89fb      	ldrh	r3, [r7, #14]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	81fb      	strh	r3, [r7, #14]
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <Paint_Clear+0x60>)
 8000d8e:	8a9b      	ldrh	r3, [r3, #20]
 8000d90:	89fa      	ldrh	r2, [r7, #14]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d3de      	bcc.n	8000d54 <Paint_Clear+0x10>
        }
    }
}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000060 	.word	0x20000060

08000da8 <Paint_DrawChar>:
//    Color_Background : Select the background color of the English character
//    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(uint16_t Xpoint, uint16_t Ypoint, const char Acsii_Char,
                    sFONT* Font, uint8_t Color_Background, uint8_t Color_Foreground)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	4603      	mov	r3, r0
 8000db2:	81fb      	strh	r3, [r7, #14]
 8000db4:	460b      	mov	r3, r1
 8000db6:	81bb      	strh	r3, [r7, #12]
 8000db8:	4613      	mov	r3, r2
 8000dba:	72fb      	strb	r3, [r7, #11]
    uint16_t Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000dbc:	4b4f      	ldr	r3, [pc, #316]	; (8000efc <Paint_DrawChar+0x154>)
 8000dbe:	889b      	ldrh	r3, [r3, #4]
 8000dc0:	89fa      	ldrh	r2, [r7, #14]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	f200 8096 	bhi.w	8000ef4 <Paint_DrawChar+0x14c>
 8000dc8:	4b4c      	ldr	r3, [pc, #304]	; (8000efc <Paint_DrawChar+0x154>)
 8000dca:	88db      	ldrh	r3, [r3, #6]
 8000dcc:	89ba      	ldrh	r2, [r7, #12]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 8090 	bhi.w	8000ef4 <Paint_DrawChar+0x14c>
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8000dd4:	7afb      	ldrb	r3, [r7, #11]
 8000dd6:	3b20      	subs	r3, #32
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	88d2      	ldrh	r2, [r2, #6]
 8000ddc:	fb02 f303 	mul.w	r3, r2, r3
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	8892      	ldrh	r2, [r2, #4]
 8000de4:	08d2      	lsrs	r2, r2, #3
 8000de6:	b292      	uxth	r2, r2
 8000de8:	4611      	mov	r1, r2
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	8892      	ldrh	r2, [r2, #4]
 8000dee:	f002 0207 	and.w	r2, r2, #7
 8000df2:	b292      	uxth	r2, r2
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	bf14      	ite	ne
 8000df8:	2201      	movne	r2, #1
 8000dfa:	2200      	moveq	r2, #0
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440a      	add	r2, r1
 8000e00:	fb02 f303 	mul.w	r3, r2, r3
 8000e04:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000e10:	2300      	movs	r3, #0
 8000e12:	83fb      	strh	r3, [r7, #30]
 8000e14:	e068      	b.n	8000ee8 <Paint_DrawChar+0x140>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000e16:	2300      	movs	r3, #0
 8000e18:	83bb      	strh	r3, [r7, #28]
 8000e1a:	e053      	b.n	8000ec4 <Paint_DrawChar+0x11c>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8000e1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e20:	2bff      	cmp	r3, #255	; 0xff
 8000e22:	d11a      	bne.n	8000e5a <Paint_DrawChar+0xb2>
                //if (*ptr & (0x80 >> (Column % 8)))
                if (*ptr & (0x80 >> (Column % 8)))
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	8bbb      	ldrh	r3, [r7, #28]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	2280      	movs	r2, #128	; 0x80
 8000e32:	fa42 f303 	asr.w	r3, r2, r3
 8000e36:	400b      	ands	r3, r1
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d037      	beq.n	8000eac <Paint_DrawChar+0x104>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000e3c:	89fa      	ldrh	r2, [r7, #14]
 8000e3e:	8bbb      	ldrh	r3, [r7, #28]
 8000e40:	4413      	add	r3, r2
 8000e42:	b298      	uxth	r0, r3
 8000e44:	89ba      	ldrh	r2, [r7, #12]
 8000e46:	8bfb      	ldrh	r3, [r7, #30]
 8000e48:	4413      	add	r3, r2
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000e50:	b292      	uxth	r2, r2
 8000e52:	4619      	mov	r1, r3
 8000e54:	f7ff feca 	bl	8000bec <Paint_SetPixel>
 8000e58:	e028      	b.n	8000eac <Paint_DrawChar+0x104>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column%8))) {
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	8bbb      	ldrh	r3, [r7, #28]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	2280      	movs	r2, #128	; 0x80
 8000e68:	fa42 f303 	asr.w	r3, r2, r3
 8000e6c:	400b      	ands	r3, r1
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d00e      	beq.n	8000e90 <Paint_DrawChar+0xe8>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000e72:	89fa      	ldrh	r2, [r7, #14]
 8000e74:	8bbb      	ldrh	r3, [r7, #28]
 8000e76:	4413      	add	r3, r2
 8000e78:	b298      	uxth	r0, r3
 8000e7a:	89ba      	ldrh	r2, [r7, #12]
 8000e7c:	8bfb      	ldrh	r3, [r7, #30]
 8000e7e:	4413      	add	r3, r2
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000e86:	b292      	uxth	r2, r2
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f7ff feaf 	bl	8000bec <Paint_SetPixel>
 8000e8e:	e00d      	b.n	8000eac <Paint_DrawChar+0x104>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8000e90:	89fa      	ldrh	r2, [r7, #14]
 8000e92:	8bbb      	ldrh	r3, [r7, #28]
 8000e94:	4413      	add	r3, r2
 8000e96:	b298      	uxth	r0, r3
 8000e98:	89ba      	ldrh	r2, [r7, #12]
 8000e9a:	8bfb      	ldrh	r3, [r7, #30]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000ea4:	b292      	uxth	r2, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f7ff fea0 	bl	8000bec <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8000eac:	8bbb      	ldrh	r3, [r7, #28]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	2b07      	cmp	r3, #7
 8000eb6:	d102      	bne.n	8000ebe <Paint_DrawChar+0x116>
                ptr++;
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000ebe:	8bbb      	ldrh	r3, [r7, #28]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	83bb      	strh	r3, [r7, #28]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	889b      	ldrh	r3, [r3, #4]
 8000ec8:	8bba      	ldrh	r2, [r7, #28]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d3a6      	bcc.n	8000e1c <Paint_DrawChar+0x74>
        }// Write a line
        if (Font->Width % 8 != 0)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	889b      	ldrh	r3, [r3, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <Paint_DrawChar+0x13a>
            ptr++;
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000ee2:	8bfb      	ldrh	r3, [r7, #30]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	83fb      	strh	r3, [r7, #30]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	88db      	ldrh	r3, [r3, #6]
 8000eec:	8bfa      	ldrh	r2, [r7, #30]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d391      	bcc.n	8000e16 <Paint_DrawChar+0x6e>
 8000ef2:	e000      	b.n	8000ef6 <Paint_DrawChar+0x14e>
        return;
 8000ef4:	bf00      	nop
    }// Write all
}
 8000ef6:	3720      	adds	r7, #32
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000060 	.word	0x20000060

08000f00 <Paint_DrawString_EN>:
//    Color_Background : Select the background color of the English character
//    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(uint16_t Xstart, uint16_t Ystart, const char * pString,
                         sFONT* Font, uint8_t Color_Background, uint8_t Color_Foreground )
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af02      	add	r7, sp, #8
 8000f06:	60ba      	str	r2, [r7, #8]
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	81fb      	strh	r3, [r7, #14]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	81bb      	strh	r3, [r7, #12]
    uint16_t Xpoint = Xstart;
 8000f12:	89fb      	ldrh	r3, [r7, #14]
 8000f14:	82fb      	strh	r3, [r7, #22]
    uint16_t Ypoint = Ystart;
 8000f16:	89bb      	ldrh	r3, [r7, #12]
 8000f18:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8000f1a:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <Paint_DrawString_EN+0xa4>)
 8000f1c:	889b      	ldrh	r3, [r3, #4]
 8000f1e:	89fa      	ldrh	r2, [r7, #14]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d83a      	bhi.n	8000f9a <Paint_DrawString_EN+0x9a>
 8000f24:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <Paint_DrawString_EN+0xa4>)
 8000f26:	88db      	ldrh	r3, [r3, #6]
 8000f28:	89ba      	ldrh	r2, [r7, #12]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d835      	bhi.n	8000f9a <Paint_DrawString_EN+0x9a>
//        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
        return;
    }

    while (* pString != '\0') {
 8000f2e:	e02f      	b.n	8000f90 <Paint_DrawString_EN+0x90>
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8000f30:	8afb      	ldrh	r3, [r7, #22]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	8892      	ldrh	r2, [r2, #4]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a1a      	ldr	r2, [pc, #104]	; (8000fa4 <Paint_DrawString_EN+0xa4>)
 8000f3a:	8892      	ldrh	r2, [r2, #4]
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	dd06      	ble.n	8000f4e <Paint_DrawString_EN+0x4e>
            Xpoint = Xstart;
 8000f40:	89fb      	ldrh	r3, [r7, #14]
 8000f42:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	88da      	ldrh	r2, [r3, #6]
 8000f48:	8abb      	ldrh	r3, [r7, #20]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8000f4e:	8abb      	ldrh	r3, [r7, #20]
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	88d2      	ldrh	r2, [r2, #6]
 8000f54:	4413      	add	r3, r2
 8000f56:	4a13      	ldr	r2, [pc, #76]	; (8000fa4 <Paint_DrawString_EN+0xa4>)
 8000f58:	88d2      	ldrh	r2, [r2, #6]
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	dd03      	ble.n	8000f66 <Paint_DrawString_EN+0x66>
            Xpoint = Xstart;
 8000f5e:	89fb      	ldrh	r3, [r7, #14]
 8000f60:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8000f62:	89bb      	ldrh	r3, [r7, #12]
 8000f64:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	781a      	ldrb	r2, [r3, #0]
 8000f6a:	8ab9      	ldrh	r1, [r7, #20]
 8000f6c:	8af8      	ldrh	r0, [r7, #22]
 8000f6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f7ff ff14 	bl	8000da8 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	3301      	adds	r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	889a      	ldrh	r2, [r3, #4]
 8000f8a:	8afb      	ldrh	r3, [r7, #22]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1cb      	bne.n	8000f30 <Paint_DrawString_EN+0x30>
 8000f98:	e000      	b.n	8000f9c <Paint_DrawString_EN+0x9c>
        return;
 8000f9a:	bf00      	nop
    }
}
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000060 	.word	0x20000060

08000fa8 <DrawCalenderField>:
//   NULL.
// Note:
//
// ****************************************************************************************
void DrawCalenderField(uint8_t place, char* fach, char* dozent)
{
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b08c      	sub	sp, #48	; 0x30
 8000fac:	af02      	add	r7, sp, #8
 8000fae:	4603      	mov	r3, r0
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	73fb      	strb	r3, [r7, #15]
 8000fb6:	466b      	mov	r3, sp
 8000fb8:	461d      	mov	r5, r3
	CalCellInfo cal;
	cal.imBufsize= 17336;
 8000fba:	f244 33b8 	movw	r3, #17336	; 0x43b8
 8000fbe:	61fb      	str	r3, [r7, #28]
	uint8_t frameBuf[cal.imBufsize];
 8000fc0:	69f8      	ldr	r0, [r7, #28]
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc8:	4601      	mov	r1, r0
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	f04f 0400 	mov.w	r4, #0
 8000fd6:	00d4      	lsls	r4, r2, #3
 8000fd8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000fdc:	00cb      	lsls	r3, r1, #3
 8000fde:	4601      	mov	r1, r0
 8000fe0:	f04f 0200 	mov.w	r2, #0
 8000fe4:	f04f 0300 	mov.w	r3, #0
 8000fe8:	f04f 0400 	mov.w	r4, #0
 8000fec:	00d4      	lsls	r4, r2, #3
 8000fee:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000ff2:	00cb      	lsls	r3, r1, #3
 8000ff4:	1dc3      	adds	r3, r0, #7
 8000ff6:	08db      	lsrs	r3, r3, #3
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	ebad 0d03 	sub.w	sp, sp, r3
 8000ffe:	ab02      	add	r3, sp, #8
 8001000:	3300      	adds	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
	cal.place = place;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	743b      	strb	r3, [r7, #16]
	if(cal.place%5!=0)
 8001008:	7c3a      	ldrb	r2, [r7, #16]
 800100a:	4b5a      	ldr	r3, [pc, #360]	; (8001174 <DrawCalenderField+0x1cc>)
 800100c:	fba3 1302 	umull	r1, r3, r3, r2
 8001010:	0899      	lsrs	r1, r3, #2
 8001012:	460b      	mov	r3, r1
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	440b      	add	r3, r1
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d019      	beq.n	8001054 <DrawCalenderField+0xac>
		cal.posX = 202 + (cal.place%5-1) * 200;
 8001020:	7c3a      	ldrb	r2, [r7, #16]
 8001022:	4b54      	ldr	r3, [pc, #336]	; (8001174 <DrawCalenderField+0x1cc>)
 8001024:	fba3 1302 	umull	r1, r3, r3, r2
 8001028:	0899      	lsrs	r1, r3, #2
 800102a:	460b      	mov	r3, r1
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	440b      	add	r3, r1
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	3b01      	subs	r3, #1
 8001036:	b29b      	uxth	r3, r3
 8001038:	461a      	mov	r2, r3
 800103a:	0092      	lsls	r2, r2, #2
 800103c:	4413      	add	r3, r2
 800103e:	461a      	mov	r2, r3
 8001040:	0091      	lsls	r1, r2, #2
 8001042:	461a      	mov	r2, r3
 8001044:	460b      	mov	r3, r1
 8001046:	4413      	add	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	b29b      	uxth	r3, r3
 800104c:	33ca      	adds	r3, #202	; 0xca
 800104e:	b29b      	uxth	r3, r3
 8001050:	827b      	strh	r3, [r7, #18]
 8001052:	e002      	b.n	800105a <DrawCalenderField+0xb2>
	else
		cal.posX = 1002;
 8001054:	f240 33ea 	movw	r3, #1002	; 0x3ea
 8001058:	827b      	strh	r3, [r7, #18]

	if(cal.place%5!=0)
 800105a:	7c3a      	ldrb	r2, [r7, #16]
 800105c:	4b45      	ldr	r3, [pc, #276]	; (8001174 <DrawCalenderField+0x1cc>)
 800105e:	fba3 1302 	umull	r1, r3, r3, r2
 8001062:	0899      	lsrs	r1, r3, #2
 8001064:	460b      	mov	r3, r1
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	440b      	add	r3, r1
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d012      	beq.n	8001098 <DrawCalenderField+0xf0>
	cal.posY = cal.place/5 *90 +195;
 8001072:	7c3b      	ldrb	r3, [r7, #16]
 8001074:	4a3f      	ldr	r2, [pc, #252]	; (8001174 <DrawCalenderField+0x1cc>)
 8001076:	fba2 2303 	umull	r2, r3, r2, r3
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	b2db      	uxtb	r3, r3
 800107e:	b29b      	uxth	r3, r3
 8001080:	461a      	mov	r2, r3
 8001082:	0052      	lsls	r2, r2, #1
 8001084:	4413      	add	r3, r2
 8001086:	461a      	mov	r2, r3
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	b29b      	uxth	r3, r3
 8001090:	33c3      	adds	r3, #195	; 0xc3
 8001092:	b29b      	uxth	r3, r3
 8001094:	82bb      	strh	r3, [r7, #20]
 8001096:	e012      	b.n	80010be <DrawCalenderField+0x116>
	else
		cal.posY = (cal.place/5 - 1) *90 +195;
 8001098:	7c3b      	ldrb	r3, [r7, #16]
 800109a:	4a36      	ldr	r2, [pc, #216]	; (8001174 <DrawCalenderField+0x1cc>)
 800109c:	fba2 2303 	umull	r2, r3, r2, r3
 80010a0:	089b      	lsrs	r3, r3, #2
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	3b01      	subs	r3, #1
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	461a      	mov	r2, r3
 80010aa:	0052      	lsls	r2, r2, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	461a      	mov	r2, r3
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	33c3      	adds	r3, #195	; 0xc3
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	82bb      	strh	r3, [r7, #20]

	if((cal.place%5 != 0))
 80010be:	7c3a      	ldrb	r2, [r7, #16]
 80010c0:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <DrawCalenderField+0x1cc>)
 80010c2:	fba3 1302 	umull	r1, r3, r3, r2
 80010c6:	0899      	lsrs	r1, r3, #2
 80010c8:	460b      	mov	r3, r1
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d010      	beq.n	80010f8 <DrawCalenderField+0x150>
	{
		if(cal.place/5%2 != 0)
 80010d6:	7c3b      	ldrb	r3, [r7, #16]
 80010d8:	4a26      	ldr	r2, [pc, #152]	; (8001174 <DrawCalenderField+0x1cc>)
 80010da:	fba2 2303 	umull	r2, r3, r2, r3
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d002      	beq.n	80010f2 <DrawCalenderField+0x14a>
			cal.color = KALBRIGHT;
 80010ec:	23e0      	movs	r3, #224	; 0xe0
 80010ee:	747b      	strb	r3, [r7, #17]
 80010f0:	e012      	b.n	8001118 <DrawCalenderField+0x170>
		else
			cal.color = KALDARK;
 80010f2:	23dd      	movs	r3, #221	; 0xdd
 80010f4:	747b      	strb	r3, [r7, #17]
 80010f6:	e00f      	b.n	8001118 <DrawCalenderField+0x170>
	}
	else
	{
		if(cal.place/5%2 != 0)
 80010f8:	7c3b      	ldrb	r3, [r7, #16]
 80010fa:	4a1e      	ldr	r2, [pc, #120]	; (8001174 <DrawCalenderField+0x1cc>)
 80010fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	b2db      	uxtb	r3, r3
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d002      	beq.n	8001114 <DrawCalenderField+0x16c>
					cal.color = KALDARK;
 800110e:	23dd      	movs	r3, #221	; 0xdd
 8001110:	747b      	strb	r3, [r7, #17]
 8001112:	e001      	b.n	8001118 <DrawCalenderField+0x170>
				else
					cal.color = KALBRIGHT;
 8001114:	23e0      	movs	r3, #224	; 0xe0
 8001116:	747b      	strb	r3, [r7, #17]
	}

	Paint_NewImage(frameBuf, 196, 88, 0, 0xff);
 8001118:	6a38      	ldr	r0, [r7, #32]
 800111a:	23ff      	movs	r3, #255	; 0xff
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2300      	movs	r3, #0
 8001120:	2258      	movs	r2, #88	; 0x58
 8001122:	21c4      	movs	r1, #196	; 0xc4
 8001124:	f7ff fd1e 	bl	8000b64 <Paint_NewImage>
	Paint_Clear(cal.color);
 8001128:	7c7b      	ldrb	r3, [r7, #17]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fe0a 	bl	8000d44 <Paint_Clear>
	Paint_DrawString_EN(5, 20, fach, &Font24, cal.color, 0x44 );
 8001130:	7c7b      	ldrb	r3, [r7, #17]
 8001132:	2244      	movs	r2, #68	; 0x44
 8001134:	9201      	str	r2, [sp, #4]
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <DrawCalenderField+0x1d0>)
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	2114      	movs	r1, #20
 800113e:	2005      	movs	r0, #5
 8001140:	f7ff fede 	bl	8000f00 <Paint_DrawString_EN>
	Paint_DrawString_EN(5, 50, dozent, &Font24, cal.color, 0x66 );
 8001144:	7c7b      	ldrb	r3, [r7, #17]
 8001146:	2266      	movs	r2, #102	; 0x66
 8001148:	9201      	str	r2, [sp, #4]
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <DrawCalenderField+0x1d0>)
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	2132      	movs	r1, #50	; 0x32
 8001152:	2005      	movs	r0, #5
 8001154:	f7ff fed4 	bl	8000f00 <Paint_DrawString_EN>
	//EpdDriverDrawBox(frameBuf, 202, 195, 196, 88);
	EpdDriverDrawBox(frameBuf, cal.posX, cal.posY, 196, 88);
 8001158:	6a38      	ldr	r0, [r7, #32]
 800115a:	8a79      	ldrh	r1, [r7, #18]
 800115c:	8aba      	ldrh	r2, [r7, #20]
 800115e:	2358      	movs	r3, #88	; 0x58
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	23c4      	movs	r3, #196	; 0xc4
 8001164:	f7ff fcbe 	bl	8000ae4 <EpdDriverDrawBox>
 8001168:	46ad      	mov	sp, r5
}
 800116a:	bf00      	nop
 800116c:	3728      	adds	r7, #40	; 0x28
 800116e:	46bd      	mov	sp, r7
 8001170:	bdb0      	pop	{r4, r5, r7, pc}
 8001172:	bf00      	nop
 8001174:	cccccccd 	.word	0xcccccccd
 8001178:	20000000 	.word	0x20000000

0800117c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_DMA_Init+0x70>)
 8001184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001186:	4a19      	ldr	r2, [pc, #100]	; (80011ec <MX_DMA_Init+0x70>)
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	6493      	str	r3, [r2, #72]	; 0x48
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <MX_DMA_Init+0x70>)
 8001190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MX_DMA_Init+0x70>)
 800119c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800119e:	4a13      	ldr	r2, [pc, #76]	; (80011ec <MX_DMA_Init+0x70>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6493      	str	r3, [r2, #72]	; 0x48
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <MX_DMA_Init+0x70>)
 80011a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	200b      	movs	r0, #11
 80011b8:	f000 ff8f 	bl	80020da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011bc:	200b      	movs	r0, #11
 80011be:	f000 ffa8 	bl	8002112 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	200c      	movs	r0, #12
 80011c8:	f000 ff87 	bl	80020da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80011cc:	200c      	movs	r0, #12
 80011ce:	f000 ffa0 	bl	8002112 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	200d      	movs	r0, #13
 80011d8:	f000 ff7f 	bl	80020da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80011dc:	200d      	movs	r0, #13
 80011de:	f000 ff98 	bl	8002112 <HAL_NVIC_EnableIRQ>

}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000

080011f0 <MX_GPIO_Init>:
        * the Code Generation settings)
     PD8   ------> USART3_TX
     PD9   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08e      	sub	sp, #56	; 0x38
 80011f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001206:	4bb4      	ldr	r3, [pc, #720]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	4ab3      	ldr	r2, [pc, #716]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 800120c:	f043 0310 	orr.w	r3, r3, #16
 8001210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001212:	4bb1      	ldr	r3, [pc, #708]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	623b      	str	r3, [r7, #32]
 800121c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	4bae      	ldr	r3, [pc, #696]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	4aad      	ldr	r2, [pc, #692]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122a:	4bab      	ldr	r3, [pc, #684]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	61fb      	str	r3, [r7, #28]
 8001234:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001236:	4ba8      	ldr	r3, [pc, #672]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	4aa7      	ldr	r2, [pc, #668]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 800123c:	f043 0320 	orr.w	r3, r3, #32
 8001240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001242:	4ba5      	ldr	r3, [pc, #660]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	f003 0320 	and.w	r3, r3, #32
 800124a:	61bb      	str	r3, [r7, #24]
 800124c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124e:	4ba2      	ldr	r3, [pc, #648]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4aa1      	ldr	r2, [pc, #644]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125a:	4b9f      	ldr	r3, [pc, #636]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b9c      	ldr	r3, [pc, #624]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	4a9b      	ldr	r2, [pc, #620]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001272:	4b99      	ldr	r3, [pc, #612]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	4b96      	ldr	r3, [pc, #600]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a95      	ldr	r2, [pc, #596]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b93      	ldr	r3, [pc, #588]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001296:	4b90      	ldr	r3, [pc, #576]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	4a8f      	ldr	r2, [pc, #572]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 800129c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a2:	4b8d      	ldr	r3, [pc, #564]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ae:	4b8a      	ldr	r3, [pc, #552]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4a89      	ldr	r2, [pc, #548]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 80012b4:	f043 0308 	orr.w	r3, r3, #8
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4b87      	ldr	r3, [pc, #540]	; (80014d8 <MX_GPIO_Init+0x2e8>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80012c6:	f001 fd45 	bl	8002d54 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EPD_ON_Pin|Kill_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2105      	movs	r1, #5
 80012ce:	4883      	ldr	r0, [pc, #524]	; (80014dc <MX_GPIO_Init+0x2ec>)
 80012d0:	f001 fafc 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EPD_OFF_GPIO_Port, EPD_OFF_Pin, GPIO_PIN_SET);
 80012d4:	2201      	movs	r2, #1
 80012d6:	2102      	movs	r1, #2
 80012d8:	4880      	ldr	r0, [pc, #512]	; (80014dc <MX_GPIO_Init+0x2ec>)
 80012da:	f001 faf7 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EPD_CS_Pin|EPD_RST_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2111      	movs	r1, #17
 80012e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e6:	f001 faf1 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80012f0:	487b      	ldr	r0, [pc, #492]	; (80014e0 <MX_GPIO_Init+0x2f0>)
 80012f2:	f001 faeb 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2120      	movs	r1, #32
 80012fa:	487a      	ldr	r0, [pc, #488]	; (80014e4 <MX_GPIO_Init+0x2f4>)
 80012fc:	f001 fae6 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE8 PE9 
                           PE10 PE11 PE12 PE13 
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8001300:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001306:	2303      	movs	r3, #3
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800130e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001312:	4619      	mov	r1, r3
 8001314:	4874      	ldr	r0, [pc, #464]	; (80014e8 <MX_GPIO_Init+0x2f8>)
 8001316:	f001 f92f 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800131a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001320:	4b72      	ldr	r3, [pc, #456]	; (80014ec <MX_GPIO_Init+0x2fc>)
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132c:	4619      	mov	r1, r3
 800132e:	486b      	ldr	r0, [pc, #428]	; (80014dc <MX_GPIO_Init+0x2ec>)
 8001330:	f001 f922 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 
                           PF4 PF5 PF6 PF7 
                           PF8 PF9 PF10 PF11 
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001334:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133a:	2303      	movs	r3, #3
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001346:	4619      	mov	r1, r3
 8001348:	4869      	ldr	r0, [pc, #420]	; (80014f0 <MX_GPIO_Init+0x300>)
 800134a:	f001 f915 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = EPD_ON_Pin|EPD_OFF_Pin|Kill_Pin;
 800134e:	2307      	movs	r3, #7
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001362:	4619      	mov	r1, r3
 8001364:	485d      	ldr	r0, [pc, #372]	; (80014dc <MX_GPIO_Init+0x2ec>)
 8001366:	f001 f907 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC4 PC5 PC6 
                           PC7 PC8 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 800136a:	f241 33f8 	movw	r3, #5112	; 0x13f8
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001370:	2303      	movs	r3, #3
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137c:	4619      	mov	r1, r3
 800137e:	4857      	ldr	r0, [pc, #348]	; (80014dc <MX_GPIO_Init+0x2ec>)
 8001380:	f001 f8fa 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_CS_Pin;
 8001384:	2301      	movs	r3, #1
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001388:	2311      	movs	r3, #17
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800138c:	2301      	movs	r3, #1
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(EPD_CS_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001398:	4619      	mov	r1, r3
 800139a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139e:	f001 f8eb 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 80013a2:	f248 030c 	movw	r3, #32780	; 0x800c
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a8:	2303      	movs	r3, #3
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b4:	4619      	mov	r1, r3
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ba:	f001 f8dd 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_RST_Pin;
 80013be:	2310      	movs	r3, #16
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013c2:	2311      	movs	r3, #17
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ca:	2303      	movs	r3, #3
 80013cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(EPD_RST_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d2:	4619      	mov	r1, r3
 80013d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d8:	f001 f8ce 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_HRDY_Pin;
 80013dc:	2320      	movs	r3, #32
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EPD_HRDY_GPIO_Port, &GPIO_InitStruct);
 80013e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ec:	4619      	mov	r1, r3
 80013ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f2:	f001 f8c1 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB15 
                           PB4 PB5 PB6 PB8 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80013f6:	f64b 7377 	movw	r3, #49015	; 0xbf77
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013fc:	2303      	movs	r3, #3
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001408:	4619      	mov	r1, r3
 800140a:	4835      	ldr	r0, [pc, #212]	; (80014e0 <MX_GPIO_Init+0x2f0>)
 800140c:	f001 f8b4 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 
                           PG4 PG9 PG10 PG11 
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001410:	f64f 631f 	movw	r3, #65055	; 0xfe1f
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001416:	2303      	movs	r3, #3
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800141e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001422:	4619      	mov	r1, r3
 8001424:	482f      	ldr	r0, [pc, #188]	; (80014e4 <MX_GPIO_Init+0x2f4>)
 8001426:	f001 f8a7 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800142a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001430:	2301      	movs	r3, #1
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001440:	4619      	mov	r1, r3
 8001442:	4827      	ldr	r0, [pc, #156]	; (80014e0 <MX_GPIO_Init+0x2f0>)
 8001444:	f001 f898 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001448:	f44f 7340 	mov.w	r3, #768	; 0x300
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001456:	2303      	movs	r3, #3
 8001458:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800145a:	2307      	movs	r3, #7
 800145c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800145e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001462:	4619      	mov	r1, r3
 8001464:	4823      	ldr	r0, [pc, #140]	; (80014f4 <MX_GPIO_Init+0x304>)
 8001466:	f001 f887 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13 
                           PD14 PD15 PD0 PD1 
                           PD2 PD3 PD4 PD5 
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 800146a:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001470:	2303      	movs	r3, #3
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147c:	4619      	mov	r1, r3
 800147e:	481d      	ldr	r0, [pc, #116]	; (80014f4 <MX_GPIO_Init+0x304>)
 8001480:	f001 f87a 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001484:	2320      	movs	r3, #32
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001498:	4619      	mov	r1, r3
 800149a:	4812      	ldr	r0, [pc, #72]	; (80014e4 <MX_GPIO_Init+0x2f4>)
 800149c:	f001 f86c 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014a0:	2340      	movs	r3, #64	; 0x40
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b0:	4619      	mov	r1, r3
 80014b2:	480c      	ldr	r0, [pc, #48]	; (80014e4 <MX_GPIO_Init+0x2f4>)
 80014b4:	f001 f860 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014b8:	2308      	movs	r3, #8
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014bc:	2303      	movs	r3, #3
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	480b      	ldr	r0, [pc, #44]	; (80014f8 <MX_GPIO_Init+0x308>)
 80014cc:	f001 f854 	bl	8002578 <HAL_GPIO_Init>

}
 80014d0:	bf00      	nop
 80014d2:	3738      	adds	r7, #56	; 0x38
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40021000 	.word	0x40021000
 80014dc:	48000800 	.word	0x48000800
 80014e0:	48000400 	.word	0x48000400
 80014e4:	48001800 	.word	0x48001800
 80014e8:	48001000 	.word	0x48001000
 80014ec:	10110000 	.word	0x10110000
 80014f0:	48001400 	.word	0x48001400
 80014f4:	48000c00 	.word	0x48000c00
 80014f8:	48001c00 	.word	0x48001c00

080014fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	 // char tex[]={'H','A','L','L','O','\0'};
	  char  fach[]={'W','S','C','o','m'};
 8001502:	4a34      	ldr	r2, [pc, #208]	; (80015d4 <main+0xd8>)
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	e892 0003 	ldmia.w	r2, {r0, r1}
 800150a:	6018      	str	r0, [r3, #0]
 800150c:	3304      	adds	r3, #4
 800150e:	7019      	strb	r1, [r3, #0]
	  char  doz[]={'M','A','T','\0'};
 8001510:	4b31      	ldr	r3, [pc, #196]	; (80015d8 <main+0xdc>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	603b      	str	r3, [r7, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001516:	f000 fc72 	bl	8001dfe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800151a:	f000 f863 	bl	80015e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151e:	f7ff fe67 	bl	80011f0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001522:	f000 fa63 	bl	80019ec <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001526:	f000 fbab 	bl	8001c80 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 800152a:	f000 f8f7 	bl	800171c <MX_SPI1_Init>
  MX_DMA_Init();
 800152e:	f7ff fe25 	bl	800117c <MX_DMA_Init>
  MX_UART4_Init();
 8001532:	f000 faa1 	bl	8001a78 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  EpdOn();
 8001536:	f7fe ffe3 	bl	8000500 <EpdOn>
  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800153a:	2201      	movs	r2, #1
 800153c:	2180      	movs	r1, #128	; 0x80
 800153e:	4827      	ldr	r0, [pc, #156]	; (80015dc <main+0xe0>)
 8001540:	f001 f9c4 	bl	80028cc <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001544:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001548:	f000 fcca 	bl	8001ee0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	2180      	movs	r1, #128	; 0x80
 8001550:	4822      	ldr	r0, [pc, #136]	; (80015dc <main+0xe0>)
 8001552:	f001 f9bb 	bl	80028cc <HAL_GPIO_WritePin>
  IT8951_Init();
 8001556:	f7ff fa61 	bl	8000a1c <IT8951_Init>

  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800155a:	2201      	movs	r2, #1
 800155c:	2180      	movs	r1, #128	; 0x80
 800155e:	481f      	ldr	r0, [pc, #124]	; (80015dc <main+0xe0>)
 8001560:	f001 f9b4 	bl	80028cc <HAL_GPIO_WritePin>
  EpdDriverLoadTemplate();
 8001564:	f7ff fa8a 	bl	8000a7c <EpdDriverLoadTemplate>
  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	2180      	movs	r1, #128	; 0x80
 800156c:	481b      	ldr	r0, [pc, #108]	; (80015dc <main+0xe0>)
 800156e:	f001 f9ad 	bl	80028cc <HAL_GPIO_WritePin>
  for(int i = 0; i<20;i++){
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	e009      	b.n	800158c <main+0x90>
	  DrawCalenderField(i, fach, doz);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	463a      	mov	r2, r7
 800157e:	1d39      	adds	r1, r7, #4
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fd11 	bl	8000fa8 <DrawCalenderField>
  for(int i = 0; i<20;i++){
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	3301      	adds	r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b13      	cmp	r3, #19
 8001590:	ddf2      	ble.n	8001578 <main+0x7c>
  	  }
  EpdDriverShowDisp();
 8001592:	f7ff fad7 	bl	8000b44 <EpdDriverShowDisp>
  HAL_Delay(1000);
 8001596:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800159a:	f000 fca1 	bl	8001ee0 <HAL_Delay>
  EpdOff();
 800159e:	f7fe ffc7 	bl	8000530 <EpdOff>

  HAL_GPIO_WritePin(Kill_GPIO_Port, Kill_Pin, SET);
 80015a2:	2201      	movs	r2, #1
 80015a4:	2104      	movs	r1, #4
 80015a6:	480e      	ldr	r0, [pc, #56]	; (80015e0 <main+0xe4>)
 80015a8:	f001 f990 	bl	80028cc <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2180      	movs	r1, #128	; 0x80
 80015b0:	480a      	ldr	r0, [pc, #40]	; (80015dc <main+0xe0>)
 80015b2:	f001 f98b 	bl	80028cc <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80015b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015ba:	f000 fc91 	bl	8001ee0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 80015be:	2201      	movs	r2, #1
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	4806      	ldr	r0, [pc, #24]	; (80015dc <main+0xe0>)
 80015c4:	f001 f982 	bl	80028cc <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80015c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015cc:	f000 fc88 	bl	8001ee0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 80015d0:	e7ec      	b.n	80015ac <main+0xb0>
 80015d2:	bf00      	nop
 80015d4:	08006ed4 	.word	0x08006ed4
 80015d8:	08006edc 	.word	0x08006edc
 80015dc:	48000400 	.word	0x48000400
 80015e0:	48000800 	.word	0x48000800

080015e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b0bc      	sub	sp, #240	; 0xf0
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015ee:	2244      	movs	r2, #68	; 0x44
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f005 fc5a 	bl	8006eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	2294      	movs	r2, #148	; 0x94
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f005 fc4c 	bl	8006eac <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001614:	2000      	movs	r0, #0
 8001616:	f001 fae9 	bl	8002bec <HAL_PWREx_ControlVoltageScaling>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8001620:	f000 f874 	bl	800170c <Error_Handler>
  }
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001624:	f001 fab2 	bl	8002b8c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001628:	4b37      	ldr	r3, [pc, #220]	; (8001708 <SystemClock_Config+0x124>)
 800162a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162e:	4a36      	ldr	r2, [pc, #216]	; (8001708 <SystemClock_Config+0x124>)
 8001630:	f023 0318 	bic.w	r3, r3, #24
 8001634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8001638:	2316      	movs	r3, #22
 800163a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800163e:	2301      	movs	r3, #1
 8001640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001648:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800164c:	2340      	movs	r3, #64	; 0x40
 800164e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001652:	2301      	movs	r3, #1
 8001654:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800165e:	23b0      	movs	r3, #176	; 0xb0
 8001660:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001664:	2302      	movs	r3, #2
 8001666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800166a:	2302      	movs	r3, #2
 800166c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001670:	2302      	movs	r3, #2
 8001672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 28;
 8001676:	231c      	movs	r3, #28
 8001678:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800167c:	2302      	movs	r3, #2
 800167e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001682:	2302      	movs	r3, #2
 8001684:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001688:	2302      	movs	r3, #2
 800168a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001692:	4618      	mov	r0, r3
 8001694:	f001 fb6e 	bl	8002d74 <HAL_RCC_OscConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800169e:	f000 f835 	bl	800170c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a2:	230f      	movs	r3, #15
 80016a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a8:	2303      	movs	r3, #3
 80016aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016c4:	2105      	movs	r1, #5
 80016c6:	4618      	mov	r0, r3
 80016c8:	f001 ff42 	bl	8003550 <HAL_RCC_ClockConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80016d2:	f000 f81b 	bl	800170c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_LPUART1
 80016d6:	f242 0328 	movw	r3, #8232	; 0x2028
 80016da:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80016dc:	2300      	movs	r3, #0
 80016de:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80016e0:	2300      	movs	r3, #0
 80016e2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 80016e4:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 80016e8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	4618      	mov	r0, r3
 80016ee:	f002 f9df 	bl	8003ab0 <HAL_RCCEx_PeriphCLKConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <SystemClock_Config+0x118>
  {
    Error_Handler();
 80016f8:	f000 f808 	bl	800170c <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80016fc:	f002 fd00 	bl	8004100 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001700:	bf00      	nop
 8001702:	37f0      	adds	r7, #240	; 0xf0
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40021000 	.word	0x40021000

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <MX_SPI1_Init+0x74>)
 8001722:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <MX_SPI1_Init+0x78>)
 8001724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <MX_SPI1_Init+0x74>)
 8001728:	f44f 7282 	mov.w	r2, #260	; 0x104
 800172c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800172e:	4b18      	ldr	r3, [pc, #96]	; (8001790 <MX_SPI1_Init+0x74>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001734:	4b16      	ldr	r3, [pc, #88]	; (8001790 <MX_SPI1_Init+0x74>)
 8001736:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800173a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <MX_SPI1_Init+0x74>)
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <MX_SPI1_Init+0x74>)
 8001744:	2200      	movs	r2, #0
 8001746:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <MX_SPI1_Init+0x74>)
 800174a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800174e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <MX_SPI1_Init+0x74>)
 8001752:	2210      	movs	r2, #16
 8001754:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001756:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <MX_SPI1_Init+0x74>)
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <MX_SPI1_Init+0x74>)
 800175e:	2200      	movs	r2, #0
 8001760:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <MX_SPI1_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <MX_SPI1_Init+0x74>)
 800176a:	2207      	movs	r2, #7
 800176c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <MX_SPI1_Init+0x74>)
 8001770:	2200      	movs	r2, #0
 8001772:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <MX_SPI1_Init+0x74>)
 8001776:	2208      	movs	r2, #8
 8001778:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <MX_SPI1_Init+0x74>)
 800177c:	f002 feb0 	bl	80044e0 <HAL_SPI_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001786:	f7ff ffc1 	bl	800170c <Error_Handler>
  }

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000078 	.word	0x20000078
 8001794:	40013000 	.word	0x40013000

08001798 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	; 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a31      	ldr	r2, [pc, #196]	; (800187c <HAL_SPI_MspInit+0xe4>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d15c      	bne.n	8001874 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017ba:	4b31      	ldr	r3, [pc, #196]	; (8001880 <HAL_SPI_MspInit+0xe8>)
 80017bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017be:	4a30      	ldr	r2, [pc, #192]	; (8001880 <HAL_SPI_MspInit+0xe8>)
 80017c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017c4:	6613      	str	r3, [r2, #96]	; 0x60
 80017c6:	4b2e      	ldr	r3, [pc, #184]	; (8001880 <HAL_SPI_MspInit+0xe8>)
 80017c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	4b2b      	ldr	r3, [pc, #172]	; (8001880 <HAL_SPI_MspInit+0xe8>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	4a2a      	ldr	r2, [pc, #168]	; (8001880 <HAL_SPI_MspInit+0xe8>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017de:	4b28      	ldr	r3, [pc, #160]	; (8001880 <HAL_SPI_MspInit+0xe8>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80017ea:	23c2      	movs	r3, #194	; 0xc2
 80017ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017fa:	2305      	movs	r3, #5
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001808:	f000 feb6 	bl	8002578 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800180c:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <HAL_SPI_MspInit+0xec>)
 800180e:	4a1e      	ldr	r2, [pc, #120]	; (8001888 <HAL_SPI_MspInit+0xf0>)
 8001810:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001812:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <HAL_SPI_MspInit+0xec>)
 8001814:	220b      	movs	r2, #11
 8001816:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001818:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <HAL_SPI_MspInit+0xec>)
 800181a:	2210      	movs	r2, #16
 800181c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800181e:	4b19      	ldr	r3, [pc, #100]	; (8001884 <HAL_SPI_MspInit+0xec>)
 8001820:	2200      	movs	r2, #0
 8001822:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001824:	4b17      	ldr	r3, [pc, #92]	; (8001884 <HAL_SPI_MspInit+0xec>)
 8001826:	2280      	movs	r2, #128	; 0x80
 8001828:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800182a:	4b16      	ldr	r3, [pc, #88]	; (8001884 <HAL_SPI_MspInit+0xec>)
 800182c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001830:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001832:	4b14      	ldr	r3, [pc, #80]	; (8001884 <HAL_SPI_MspInit+0xec>)
 8001834:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001838:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_SPI_MspInit+0xec>)
 800183c:	2200      	movs	r2, #0
 800183e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001840:	4b10      	ldr	r3, [pc, #64]	; (8001884 <HAL_SPI_MspInit+0xec>)
 8001842:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001846:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001848:	480e      	ldr	r0, [pc, #56]	; (8001884 <HAL_SPI_MspInit+0xec>)
 800184a:	f000 fc7d 	bl	8002148 <HAL_DMA_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8001854:	f7ff ff5a 	bl	800170c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_SPI_MspInit+0xec>)
 800185c:	659a      	str	r2, [r3, #88]	; 0x58
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <HAL_SPI_MspInit+0xec>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	2100      	movs	r1, #0
 8001868:	2023      	movs	r0, #35	; 0x23
 800186a:	f000 fc36 	bl	80020da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800186e:	2023      	movs	r0, #35	; 0x23
 8001870:	f000 fc4f 	bl	8002112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001874:	bf00      	nop
 8001876:	3728      	adds	r7, #40	; 0x28
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40013000 	.word	0x40013000
 8001880:	40021000 	.word	0x40021000
 8001884:	200000e0 	.word	0x200000e0
 8001888:	40020030 	.word	0x40020030

0800188c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <HAL_MspInit+0x44>)
 8001894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001896:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <HAL_MspInit+0x44>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6613      	str	r3, [r2, #96]	; 0x60
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <HAL_MspInit+0x44>)
 80018a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <HAL_MspInit+0x44>)
 80018ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ae:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <HAL_MspInit+0x44>)
 80018b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b4:	6593      	str	r3, [r2, #88]	; 0x58
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_MspInit+0x44>)
 80018b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000

080018d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e6:	e7fe      	b.n	80018e6 <HardFault_Handler+0x4>

080018e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <MemManage_Handler+0x4>

080018ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <BusFault_Handler+0x4>

080018f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <UsageFault_Handler+0x4>

080018fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001928:	f000 fabc 	bl	8001ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}

08001930 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <DMA1_Channel1_IRQHandler+0x10>)
 8001936:	f000 fd0e 	bl	8002356 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000140 	.word	0x20000140

08001944 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <DMA1_Channel2_IRQHandler+0x10>)
 800194a:	f000 fd04 	bl	8002356 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200002b8 	.word	0x200002b8

08001958 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <DMA1_Channel3_IRQHandler+0x10>)
 800195e:	f000 fcfa 	bl	8002356 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200000e0 	.word	0x200000e0

0800196c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <SPI1_IRQHandler+0x10>)
 8001972:	f003 f995 	bl	8004ca0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000078 	.word	0x20000078

08001980 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001984:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <SystemInit+0x64>)
 8001986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800198a:	4a16      	ldr	r2, [pc, #88]	; (80019e4 <SystemInit+0x64>)
 800198c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <SystemInit+0x68>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a13      	ldr	r2, [pc, #76]	; (80019e8 <SystemInit+0x68>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <SystemInit+0x68>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <SystemInit+0x68>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a0f      	ldr	r2, [pc, #60]	; (80019e8 <SystemInit+0x68>)
 80019ac:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80019b0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80019b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80019b6:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <SystemInit+0x68>)
 80019b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019bc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <SystemInit+0x68>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <SystemInit+0x68>)
 80019c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80019ca:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <SystemInit+0x68>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <SystemInit+0x64>)
 80019d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019d6:	609a      	str	r2, [r3, #8]
#endif
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000ed00 	.word	0xe000ed00
 80019e8:	40021000 	.word	0x40021000

080019ec <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_uart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 80019f0:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <MX_LPUART1_UART_Init+0x80>)
 80019f2:	4a1f      	ldr	r2, [pc, #124]	; (8001a70 <MX_LPUART1_UART_Init+0x84>)
 80019f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <MX_LPUART1_UART_Init+0x80>)
 80019f8:	4a1e      	ldr	r2, [pc, #120]	; (8001a74 <MX_LPUART1_UART_Init+0x88>)
 80019fa:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <MX_LPUART1_UART_Init+0x80>)
 80019fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a02:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <MX_LPUART1_UART_Init+0x80>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <MX_LPUART1_UART_Init+0x80>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001a10:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <MX_LPUART1_UART_Init+0x80>)
 8001a12:	220c      	movs	r2, #12
 8001a14:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <MX_LPUART1_UART_Init+0x80>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <MX_LPUART1_UART_Init+0x80>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a22:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <MX_LPUART1_UART_Init+0x80>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a28:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <MX_LPUART1_UART_Init+0x80>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <MX_LPUART1_UART_Init+0x80>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001a34:	480d      	ldr	r0, [pc, #52]	; (8001a6c <MX_LPUART1_UART_Init+0x80>)
 8001a36:	f003 fb6f 	bl	8005118 <HAL_UART_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a40:	f7ff fe64 	bl	800170c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a44:	2100      	movs	r1, #0
 8001a46:	4809      	ldr	r0, [pc, #36]	; (8001a6c <MX_LPUART1_UART_Init+0x80>)
 8001a48:	f004 feaa 	bl	80067a0 <HAL_UARTEx_SetTxFifoThreshold>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a52:	f7ff fe5b 	bl	800170c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a56:	2100      	movs	r1, #0
 8001a58:	4804      	ldr	r0, [pc, #16]	; (8001a6c <MX_LPUART1_UART_Init+0x80>)
 8001a5a:	f004 fedf 	bl	800681c <HAL_UARTEx_SetRxFifoThreshold>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a64:	f7ff fe52 	bl	800170c <Error_Handler>
  }

}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200001a0 	.word	0x200001a0
 8001a70:	40008000 	.word	0x40008000
 8001a74:	00033324 	.word	0x00033324

08001a78 <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001a7c:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <MX_UART4_Init+0x58>)
 8001a7e:	4a15      	ldr	r2, [pc, #84]	; (8001ad4 <MX_UART4_Init+0x5c>)
 8001a80:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001a82:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <MX_UART4_Init+0x58>)
 8001a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a88:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_UART4_Init+0x58>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <MX_UART4_Init+0x58>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <MX_UART4_Init+0x58>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <MX_UART4_Init+0x58>)
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <MX_UART4_Init+0x58>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <MX_UART4_Init+0x58>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aae:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <MX_UART4_Init+0x58>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <MX_UART4_Init+0x58>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <MX_UART4_Init+0x58>)
 8001abc:	f003 fb2c 	bl	8005118 <HAL_UART_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001ac6:	f7ff fe21 	bl	800170c <Error_Handler>
  }

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2000022c 	.word	0x2000022c
 8001ad4:	40004c00 	.word	0x40004c00

08001ad8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08c      	sub	sp, #48	; 0x30
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a59      	ldr	r2, [pc, #356]	; (8001c5c <HAL_UART_MspInit+0x184>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d12b      	bne.n	8001b52 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001afa:	4b59      	ldr	r3, [pc, #356]	; (8001c60 <HAL_UART_MspInit+0x188>)
 8001afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afe:	4a58      	ldr	r2, [pc, #352]	; (8001c60 <HAL_UART_MspInit+0x188>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001b06:	4b56      	ldr	r3, [pc, #344]	; (8001c60 <HAL_UART_MspInit+0x188>)
 8001b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	61bb      	str	r3, [r7, #24]
 8001b10:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b12:	4b53      	ldr	r3, [pc, #332]	; (8001c60 <HAL_UART_MspInit+0x188>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	4a52      	ldr	r2, [pc, #328]	; (8001c60 <HAL_UART_MspInit+0x188>)
 8001b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1e:	4b50      	ldr	r3, [pc, #320]	; (8001c60 <HAL_UART_MspInit+0x188>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8001b2a:	f001 f913 	bl	8002d54 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001b2e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001b40:	2308      	movs	r3, #8
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4846      	ldr	r0, [pc, #280]	; (8001c64 <HAL_UART_MspInit+0x18c>)
 8001b4c:	f000 fd14 	bl	8002578 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001b50:	e07f      	b.n	8001c52 <HAL_UART_MspInit+0x17a>
  else if(uartHandle->Instance==UART4)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a44      	ldr	r2, [pc, #272]	; (8001c68 <HAL_UART_MspInit+0x190>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d17a      	bne.n	8001c52 <HAL_UART_MspInit+0x17a>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b5c:	4b40      	ldr	r3, [pc, #256]	; (8001c60 <HAL_UART_MspInit+0x188>)
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b60:	4a3f      	ldr	r2, [pc, #252]	; (8001c60 <HAL_UART_MspInit+0x188>)
 8001b62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b66:	6593      	str	r3, [r2, #88]	; 0x58
 8001b68:	4b3d      	ldr	r3, [pc, #244]	; (8001c60 <HAL_UART_MspInit+0x188>)
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b74:	4b3a      	ldr	r3, [pc, #232]	; (8001c60 <HAL_UART_MspInit+0x188>)
 8001b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b78:	4a39      	ldr	r2, [pc, #228]	; (8001c60 <HAL_UART_MspInit+0x188>)
 8001b7a:	f043 0304 	orr.w	r3, r3, #4
 8001b7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b80:	4b37      	ldr	r3, [pc, #220]	; (8001c60 <HAL_UART_MspInit+0x188>)
 8001b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b8c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b96:	2301      	movs	r3, #1
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b9e:	2308      	movs	r3, #8
 8001ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba2:	f107 031c 	add.w	r3, r7, #28
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4830      	ldr	r0, [pc, #192]	; (8001c6c <HAL_UART_MspInit+0x194>)
 8001baa:	f000 fce5 	bl	8002578 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Channel1;
 8001bae:	4b30      	ldr	r3, [pc, #192]	; (8001c70 <HAL_UART_MspInit+0x198>)
 8001bb0:	4a30      	ldr	r2, [pc, #192]	; (8001c74 <HAL_UART_MspInit+0x19c>)
 8001bb2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001bb4:	4b2e      	ldr	r3, [pc, #184]	; (8001c70 <HAL_UART_MspInit+0x198>)
 8001bb6:	221e      	movs	r2, #30
 8001bb8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bba:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <HAL_UART_MspInit+0x198>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc0:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <HAL_UART_MspInit+0x198>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc6:	4b2a      	ldr	r3, [pc, #168]	; (8001c70 <HAL_UART_MspInit+0x198>)
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bcc:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <HAL_UART_MspInit+0x198>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd2:	4b27      	ldr	r3, [pc, #156]	; (8001c70 <HAL_UART_MspInit+0x198>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001bd8:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <HAL_UART_MspInit+0x198>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bde:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <HAL_UART_MspInit+0x198>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001be4:	4822      	ldr	r0, [pc, #136]	; (8001c70 <HAL_UART_MspInit+0x198>)
 8001be6:	f000 faaf 	bl	8002148 <HAL_DMA_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_UART_MspInit+0x11c>
      Error_Handler();
 8001bf0:	f7ff fd8c 	bl	800170c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a1e      	ldr	r2, [pc, #120]	; (8001c70 <HAL_UART_MspInit+0x198>)
 8001bf8:	679a      	str	r2, [r3, #120]	; 0x78
 8001bfa:	4a1d      	ldr	r2, [pc, #116]	; (8001c70 <HAL_UART_MspInit+0x198>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_uart4_tx.Instance = DMA1_Channel2;
 8001c00:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <HAL_UART_MspInit+0x1a0>)
 8001c02:	4a1e      	ldr	r2, [pc, #120]	; (8001c7c <HAL_UART_MspInit+0x1a4>)
 8001c04:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001c06:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <HAL_UART_MspInit+0x1a0>)
 8001c08:	221f      	movs	r2, #31
 8001c0a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c0c:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <HAL_UART_MspInit+0x1a0>)
 8001c0e:	2210      	movs	r2, #16
 8001c10:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c12:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_UART_MspInit+0x1a0>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c18:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <HAL_UART_MspInit+0x1a0>)
 8001c1a:	2280      	movs	r2, #128	; 0x80
 8001c1c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c1e:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <HAL_UART_MspInit+0x1a0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <HAL_UART_MspInit+0x1a0>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <HAL_UART_MspInit+0x1a0>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_UART_MspInit+0x1a0>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001c36:	4810      	ldr	r0, [pc, #64]	; (8001c78 <HAL_UART_MspInit+0x1a0>)
 8001c38:	f000 fa86 	bl	8002148 <HAL_DMA_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8001c42:	f7ff fd63 	bl	800170c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a0b      	ldr	r2, [pc, #44]	; (8001c78 <HAL_UART_MspInit+0x1a0>)
 8001c4a:	675a      	str	r2, [r3, #116]	; 0x74
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <HAL_UART_MspInit+0x1a0>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001c52:	bf00      	nop
 8001c54:	3730      	adds	r7, #48	; 0x30
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40008000 	.word	0x40008000
 8001c60:	40021000 	.word	0x40021000
 8001c64:	48001800 	.word	0x48001800
 8001c68:	40004c00 	.word	0x40004c00
 8001c6c:	48000800 	.word	0x48000800
 8001c70:	20000140 	.word	0x20000140
 8001c74:	40020008 	.word	0x40020008
 8001c78:	200002b8 	.word	0x200002b8
 8001c7c:	4002001c 	.word	0x4002001c

08001c80 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001c86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001c8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001c8c:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001c8e:	2206      	movs	r2, #6
 8001c90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c92:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001c94:	2202      	movs	r2, #2
 8001c96:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001c98:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001ca4:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001cbc:	4804      	ldr	r0, [pc, #16]	; (8001cd0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001cbe:	f000 fe1d 	bl	80028fc <HAL_PCD_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8001cc8:	f7ff fd20 	bl	800170c <Error_Handler>
  }

}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000318 	.word	0x20000318

08001cd4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	; 0x28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cf4:	d154      	bne.n	8001da0 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	4b2c      	ldr	r3, [pc, #176]	; (8001da8 <HAL_PCD_MspInit+0xd4>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	4a2b      	ldr	r2, [pc, #172]	; (8001da8 <HAL_PCD_MspInit+0xd4>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d02:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <HAL_PCD_MspInit+0xd4>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001d0e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d20:	230a      	movs	r3, #10
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d2e:	f000 fc23 	bl	8002578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001d32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	4619      	mov	r1, r3
 8001d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4a:	f000 fc15 	bl	8002578 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d4e:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <HAL_PCD_MspInit+0xd4>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	4a15      	ldr	r2, [pc, #84]	; (8001da8 <HAL_PCD_MspInit+0xd4>)
 8001d54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5a:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <HAL_PCD_MspInit+0xd4>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <HAL_PCD_MspInit+0xd4>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d114      	bne.n	8001d9c <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <HAL_PCD_MspInit+0xd4>)
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	4a0c      	ldr	r2, [pc, #48]	; (8001da8 <HAL_PCD_MspInit+0xd4>)
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_PCD_MspInit+0xd4>)
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001d8a:	f000 ffd3 	bl	8002d34 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_PCD_MspInit+0xd4>)
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	4a05      	ldr	r2, [pc, #20]	; (8001da8 <HAL_PCD_MspInit+0xd4>)
 8001d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001d9a:	e001      	b.n	8001da0 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001d9c:	f000 ffca 	bl	8002d34 <HAL_PWREx_EnableVddUSB>
}
 8001da0:	bf00      	nop
 8001da2:	3728      	adds	r7, #40	; 0x28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000

08001dac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001de4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001db0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001db2:	e003      	b.n	8001dbc <LoopCopyDataInit>

08001db4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001db6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001db8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001dba:	3104      	adds	r1, #4

08001dbc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001dbc:	480b      	ldr	r0, [pc, #44]	; (8001dec <LoopForever+0xa>)
	ldr	r3, =_edata
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001dc0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001dc2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001dc4:	d3f6      	bcc.n	8001db4 <CopyDataInit>
	ldr	r2, =_sbss
 8001dc6:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001dc8:	e002      	b.n	8001dd0 <LoopFillZerobss>

08001dca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001dca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001dcc:	f842 3b04 	str.w	r3, [r2], #4

08001dd0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <LoopForever+0x16>)
	cmp	r2, r3
 8001dd2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001dd4:	d3f9      	bcc.n	8001dca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dd6:	f7ff fdd3 	bl	8001980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dda:	f005 f843 	bl	8006e64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dde:	f7ff fb8d 	bl	80014fc <main>

08001de2 <LoopForever>:

LoopForever:
    b LoopForever
 8001de2:	e7fe      	b.n	8001de2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001de4:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001de8:	08081798 	.word	0x08081798
	ldr	r0, =_sdata
 8001dec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001df0:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8001df4:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8001df8:	20000724 	.word	0x20000724

08001dfc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dfc:	e7fe      	b.n	8001dfc <ADC1_IRQHandler>

08001dfe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e08:	2003      	movs	r0, #3
 8001e0a:	f000 f95b 	bl	80020c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f000 f80e 	bl	8001e30 <HAL_InitTick>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d002      	beq.n	8001e20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	71fb      	strb	r3, [r7, #7]
 8001e1e:	e001      	b.n	8001e24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e20:	f7ff fd34 	bl	800188c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e24:	79fb      	ldrb	r3, [r7, #7]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e3c:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <HAL_InitTick+0x68>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d022      	beq.n	8001e8a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e44:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <HAL_InitTick+0x6c>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <HAL_InitTick+0x68>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e50:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 f968 	bl	800212e <HAL_SYSTICK_Config>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10f      	bne.n	8001e84 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b0f      	cmp	r3, #15
 8001e68:	d809      	bhi.n	8001e7e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e72:	f000 f932 	bl	80020da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <HAL_InitTick+0x70>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	e007      	b.n	8001e8e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	73fb      	strb	r3, [r7, #15]
 8001e82:	e004      	b.n	8001e8e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
 8001e88:	e001      	b.n	8001e8e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000010 	.word	0x20000010
 8001e9c:	20000008 	.word	0x20000008
 8001ea0:	2000000c 	.word	0x2000000c

08001ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_IncTick+0x1c>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_IncTick+0x20>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	4a03      	ldr	r2, [pc, #12]	; (8001ec0 <HAL_IncTick+0x1c>)
 8001eb4:	6013      	str	r3, [r2, #0]
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	20000720 	.word	0x20000720
 8001ec4:	20000010 	.word	0x20000010

08001ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ecc:	4b03      	ldr	r3, [pc, #12]	; (8001edc <HAL_GetTick+0x14>)
 8001ece:	681b      	ldr	r3, [r3, #0]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	20000720 	.word	0x20000720

08001ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee8:	f7ff ffee 	bl	8001ec8 <HAL_GetTick>
 8001eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef8:	d004      	beq.n	8001f04 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_Delay+0x40>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	4413      	add	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f04:	bf00      	nop
 8001f06:	f7ff ffdf 	bl	8001ec8 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d8f7      	bhi.n	8001f06 <HAL_Delay+0x26>
  {
  }
}
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000010 	.word	0x20000010

08001f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f40:	4013      	ands	r3, r2
 8001f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f56:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	60d3      	str	r3, [r2, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <__NVIC_GetPriorityGrouping+0x18>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	f003 0307 	and.w	r3, r3, #7
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	db0b      	blt.n	8001fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	f003 021f 	and.w	r2, r3, #31
 8001fa0:	4907      	ldr	r1, [pc, #28]	; (8001fc0 <__NVIC_EnableIRQ+0x38>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	2001      	movs	r0, #1
 8001faa:	fa00 f202 	lsl.w	r2, r0, r2
 8001fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000e100 	.word	0xe000e100

08001fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	6039      	str	r1, [r7, #0]
 8001fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	db0a      	blt.n	8001fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	490c      	ldr	r1, [pc, #48]	; (8002010 <__NVIC_SetPriority+0x4c>)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	0112      	lsls	r2, r2, #4
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fec:	e00a      	b.n	8002004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4908      	ldr	r1, [pc, #32]	; (8002014 <__NVIC_SetPriority+0x50>)
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	3b04      	subs	r3, #4
 8001ffc:	0112      	lsls	r2, r2, #4
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	440b      	add	r3, r1
 8002002:	761a      	strb	r2, [r3, #24]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000e100 	.word	0xe000e100
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002018:	b480      	push	{r7}
 800201a:	b089      	sub	sp, #36	; 0x24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f1c3 0307 	rsb	r3, r3, #7
 8002032:	2b04      	cmp	r3, #4
 8002034:	bf28      	it	cs
 8002036:	2304      	movcs	r3, #4
 8002038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3304      	adds	r3, #4
 800203e:	2b06      	cmp	r3, #6
 8002040:	d902      	bls.n	8002048 <NVIC_EncodePriority+0x30>
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3b03      	subs	r3, #3
 8002046:	e000      	b.n	800204a <NVIC_EncodePriority+0x32>
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800204c:	f04f 32ff 	mov.w	r2, #4294967295
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43da      	mvns	r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	401a      	ands	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002060:	f04f 31ff 	mov.w	r1, #4294967295
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	43d9      	mvns	r1, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002070:	4313      	orrs	r3, r2
         );
}
 8002072:	4618      	mov	r0, r3
 8002074:	3724      	adds	r7, #36	; 0x24
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002090:	d301      	bcc.n	8002096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002092:	2301      	movs	r3, #1
 8002094:	e00f      	b.n	80020b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <SysTick_Config+0x40>)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800209e:	210f      	movs	r1, #15
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295
 80020a4:	f7ff ff8e 	bl	8001fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <SysTick_Config+0x40>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ae:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <SysTick_Config+0x40>)
 80020b0:	2207      	movs	r2, #7
 80020b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	e000e010 	.word	0xe000e010

080020c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ff29 	bl	8001f24 <__NVIC_SetPriorityGrouping>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b086      	sub	sp, #24
 80020de:	af00      	add	r7, sp, #0
 80020e0:	4603      	mov	r3, r0
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
 80020e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020ec:	f7ff ff3e 	bl	8001f6c <__NVIC_GetPriorityGrouping>
 80020f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68b9      	ldr	r1, [r7, #8]
 80020f6:	6978      	ldr	r0, [r7, #20]
 80020f8:	f7ff ff8e 	bl	8002018 <NVIC_EncodePriority>
 80020fc:	4602      	mov	r2, r0
 80020fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002102:	4611      	mov	r1, r2
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff5d 	bl	8001fc4 <__NVIC_SetPriority>
}
 800210a:	bf00      	nop
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	4603      	mov	r3, r0
 800211a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800211c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff31 	bl	8001f88 <__NVIC_EnableIRQ>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff ffa2 	bl	8002080 <SysTick_Config>
 800213c:	4603      	mov	r3, r0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e08d      	b.n	8002276 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	4b47      	ldr	r3, [pc, #284]	; (8002280 <HAL_DMA_Init+0x138>)
 8002162:	429a      	cmp	r2, r3
 8002164:	d80f      	bhi.n	8002186 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	4b45      	ldr	r3, [pc, #276]	; (8002284 <HAL_DMA_Init+0x13c>)
 800216e:	4413      	add	r3, r2
 8002170:	4a45      	ldr	r2, [pc, #276]	; (8002288 <HAL_DMA_Init+0x140>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	091b      	lsrs	r3, r3, #4
 8002178:	009a      	lsls	r2, r3, #2
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a42      	ldr	r2, [pc, #264]	; (800228c <HAL_DMA_Init+0x144>)
 8002182:	641a      	str	r2, [r3, #64]	; 0x40
 8002184:	e00e      	b.n	80021a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	4b40      	ldr	r3, [pc, #256]	; (8002290 <HAL_DMA_Init+0x148>)
 800218e:	4413      	add	r3, r2
 8002190:	4a3d      	ldr	r2, [pc, #244]	; (8002288 <HAL_DMA_Init+0x140>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	091b      	lsrs	r3, r3, #4
 8002198:	009a      	lsls	r2, r3, #2
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a3c      	ldr	r2, [pc, #240]	; (8002294 <HAL_DMA_Init+0x14c>)
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80021ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80021c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f95c 	bl	80024b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002204:	d102      	bne.n	800220c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002220:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d010      	beq.n	800224c <HAL_DMA_Init+0x104>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b04      	cmp	r3, #4
 8002230:	d80c      	bhi.n	800224c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f97c 	bl	8002530 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	e008      	b.n	800225e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40020407 	.word	0x40020407
 8002284:	bffdfff8 	.word	0xbffdfff8
 8002288:	cccccccd 	.word	0xcccccccd
 800228c:	40020000 	.word	0x40020000
 8002290:	bffdfbf8 	.word	0xbffdfbf8
 8002294:	40020400 	.word	0x40020400

08002298 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d005      	beq.n	80022bc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2204      	movs	r2, #4
 80022b4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
 80022ba:	e047      	b.n	800234c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 020e 	bic.w	r2, r2, #14
 80022ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0201 	bic.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f0:	f003 021c 	and.w	r2, r3, #28
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	2101      	movs	r1, #1
 80022fa:	fa01 f202 	lsl.w	r2, r1, r2
 80022fe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002308:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00c      	beq.n	800232c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002320:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800232a:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	4798      	blx	r3
    }
  }
  return status;
 800234c:	7bfb      	ldrb	r3, [r7, #15]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	f003 031c 	and.w	r3, r3, #28
 8002376:	2204      	movs	r2, #4
 8002378:	409a      	lsls	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d026      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x7a>
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d021      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0320 	and.w	r3, r3, #32
 8002396:	2b00      	cmp	r3, #0
 8002398:	d107      	bne.n	80023aa <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0204 	bic.w	r2, r2, #4
 80023a8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f003 021c 	and.w	r2, r3, #28
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	2104      	movs	r1, #4
 80023b8:	fa01 f202 	lsl.w	r2, r1, r2
 80023bc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d071      	beq.n	80024aa <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80023ce:	e06c      	b.n	80024aa <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d4:	f003 031c 	and.w	r3, r3, #28
 80023d8:	2202      	movs	r2, #2
 80023da:	409a      	lsls	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4013      	ands	r3, r2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d02e      	beq.n	8002442 <HAL_DMA_IRQHandler+0xec>
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d029      	beq.n	8002442 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0320 	and.w	r3, r3, #32
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10b      	bne.n	8002414 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 020a 	bic.w	r2, r2, #10
 800240a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002418:	f003 021c 	and.w	r2, r3, #28
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	2102      	movs	r1, #2
 8002422:	fa01 f202 	lsl.w	r2, r1, r2
 8002426:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	2b00      	cmp	r3, #0
 8002436:	d038      	beq.n	80024aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002440:	e033      	b.n	80024aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	f003 031c 	and.w	r3, r3, #28
 800244a:	2208      	movs	r2, #8
 800244c:	409a      	lsls	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4013      	ands	r3, r2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d02a      	beq.n	80024ac <HAL_DMA_IRQHandler+0x156>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	2b00      	cmp	r3, #0
 800245e:	d025      	beq.n	80024ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 020e 	bic.w	r2, r2, #14
 800246e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002474:	f003 021c 	and.w	r2, r3, #28
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	2101      	movs	r1, #1
 800247e:	fa01 f202 	lsl.w	r2, r1, r2
 8002482:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d004      	beq.n	80024ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80024aa:	bf00      	nop
 80024ac:	bf00      	nop
}
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	4b17      	ldr	r3, [pc, #92]	; (8002520 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d80a      	bhi.n	80024de <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80024d4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6493      	str	r3, [r2, #72]	; 0x48
 80024dc:	e007      	b.n	80024ee <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	089b      	lsrs	r3, r3, #2
 80024e4:	009a      	lsls	r2, r3, #2
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80024e8:	4413      	add	r3, r2
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	3b08      	subs	r3, #8
 80024f6:	4a0c      	ldr	r2, [pc, #48]	; (8002528 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80024f8:	fba2 2303 	umull	r2, r3, r2, r3
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002504:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1CU);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f003 031c 	and.w	r3, r3, #28
 800250c:	2201      	movs	r2, #1
 800250e:	409a      	lsls	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	40020407 	.word	0x40020407
 8002524:	4002081c 	.word	0x4002081c
 8002528:	cccccccd 	.word	0xcccccccd
 800252c:	40020880 	.word	0x40020880

08002530 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	461a      	mov	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a08      	ldr	r2, [pc, #32]	; (8002574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002552:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	3b01      	subs	r3, #1
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2201      	movs	r2, #1
 800255e:	409a      	lsls	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	1000823f 	.word	0x1000823f
 8002574:	40020940 	.word	0x40020940

08002578 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002586:	e166      	b.n	8002856 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	2101      	movs	r1, #1
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	fa01 f303 	lsl.w	r3, r1, r3
 8002594:	4013      	ands	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 8158 	beq.w	8002850 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x38>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b12      	cmp	r3, #18
 80025ae:	d123      	bne.n	80025f8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	08da      	lsrs	r2, r3, #3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3208      	adds	r2, #8
 80025b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	220f      	movs	r2, #15
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	08da      	lsrs	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3208      	adds	r2, #8
 80025f2:	6939      	ldr	r1, [r7, #16]
 80025f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0203 	and.w	r2, r3, #3
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4313      	orrs	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d00b      	beq.n	800264c <HAL_GPIO_Init+0xd4>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b02      	cmp	r3, #2
 800263a:	d007      	beq.n	800264c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002640:	2b11      	cmp	r3, #17
 8002642:	d003      	beq.n	800264c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b12      	cmp	r3, #18
 800264a:	d130      	bne.n	80026ae <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002682:	2201      	movs	r2, #1
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	091b      	lsrs	r3, r3, #4
 8002698:	f003 0201 	and.w	r2, r3, #1
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	2203      	movs	r2, #3
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4013      	ands	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 80b2 	beq.w	8002850 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ec:	4b61      	ldr	r3, [pc, #388]	; (8002874 <HAL_GPIO_Init+0x2fc>)
 80026ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f0:	4a60      	ldr	r2, [pc, #384]	; (8002874 <HAL_GPIO_Init+0x2fc>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	6613      	str	r3, [r2, #96]	; 0x60
 80026f8:	4b5e      	ldr	r3, [pc, #376]	; (8002874 <HAL_GPIO_Init+0x2fc>)
 80026fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002704:	4a5c      	ldr	r2, [pc, #368]	; (8002878 <HAL_GPIO_Init+0x300>)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	089b      	lsrs	r3, r3, #2
 800270a:	3302      	adds	r3, #2
 800270c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002710:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	220f      	movs	r2, #15
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800272e:	d02b      	beq.n	8002788 <HAL_GPIO_Init+0x210>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a52      	ldr	r2, [pc, #328]	; (800287c <HAL_GPIO_Init+0x304>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d025      	beq.n	8002784 <HAL_GPIO_Init+0x20c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a51      	ldr	r2, [pc, #324]	; (8002880 <HAL_GPIO_Init+0x308>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d01f      	beq.n	8002780 <HAL_GPIO_Init+0x208>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a50      	ldr	r2, [pc, #320]	; (8002884 <HAL_GPIO_Init+0x30c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d019      	beq.n	800277c <HAL_GPIO_Init+0x204>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a4f      	ldr	r2, [pc, #316]	; (8002888 <HAL_GPIO_Init+0x310>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d013      	beq.n	8002778 <HAL_GPIO_Init+0x200>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a4e      	ldr	r2, [pc, #312]	; (800288c <HAL_GPIO_Init+0x314>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d00d      	beq.n	8002774 <HAL_GPIO_Init+0x1fc>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a4d      	ldr	r2, [pc, #308]	; (8002890 <HAL_GPIO_Init+0x318>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d007      	beq.n	8002770 <HAL_GPIO_Init+0x1f8>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a4c      	ldr	r2, [pc, #304]	; (8002894 <HAL_GPIO_Init+0x31c>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d101      	bne.n	800276c <HAL_GPIO_Init+0x1f4>
 8002768:	2307      	movs	r3, #7
 800276a:	e00e      	b.n	800278a <HAL_GPIO_Init+0x212>
 800276c:	2308      	movs	r3, #8
 800276e:	e00c      	b.n	800278a <HAL_GPIO_Init+0x212>
 8002770:	2306      	movs	r3, #6
 8002772:	e00a      	b.n	800278a <HAL_GPIO_Init+0x212>
 8002774:	2305      	movs	r3, #5
 8002776:	e008      	b.n	800278a <HAL_GPIO_Init+0x212>
 8002778:	2304      	movs	r3, #4
 800277a:	e006      	b.n	800278a <HAL_GPIO_Init+0x212>
 800277c:	2303      	movs	r3, #3
 800277e:	e004      	b.n	800278a <HAL_GPIO_Init+0x212>
 8002780:	2302      	movs	r3, #2
 8002782:	e002      	b.n	800278a <HAL_GPIO_Init+0x212>
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <HAL_GPIO_Init+0x212>
 8002788:	2300      	movs	r3, #0
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	f002 0203 	and.w	r2, r2, #3
 8002790:	0092      	lsls	r2, r2, #2
 8002792:	4093      	lsls	r3, r2
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800279a:	4937      	ldr	r1, [pc, #220]	; (8002878 <HAL_GPIO_Init+0x300>)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	089b      	lsrs	r3, r3, #2
 80027a0:	3302      	adds	r3, #2
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80027a8:	4b3b      	ldr	r3, [pc, #236]	; (8002898 <HAL_GPIO_Init+0x320>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	4013      	ands	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027cc:	4a32      	ldr	r2, [pc, #200]	; (8002898 <HAL_GPIO_Init+0x320>)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80027d2:	4b31      	ldr	r3, [pc, #196]	; (8002898 <HAL_GPIO_Init+0x320>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	43db      	mvns	r3, r3
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4013      	ands	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027f6:	4a28      	ldr	r2, [pc, #160]	; (8002898 <HAL_GPIO_Init+0x320>)
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027fc:	4b26      	ldr	r3, [pc, #152]	; (8002898 <HAL_GPIO_Init+0x320>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	43db      	mvns	r3, r3
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4013      	ands	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002820:	4a1d      	ldr	r2, [pc, #116]	; (8002898 <HAL_GPIO_Init+0x320>)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002826:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <HAL_GPIO_Init+0x320>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	43db      	mvns	r3, r3
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4013      	ands	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800284a:	4a13      	ldr	r2, [pc, #76]	; (8002898 <HAL_GPIO_Init+0x320>)
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	3301      	adds	r3, #1
 8002854:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	f47f ae91 	bne.w	8002588 <HAL_GPIO_Init+0x10>
  }
}
 8002866:	bf00      	nop
 8002868:	371c      	adds	r7, #28
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000
 8002878:	40010000 	.word	0x40010000
 800287c:	48000400 	.word	0x48000400
 8002880:	48000800 	.word	0x48000800
 8002884:	48000c00 	.word	0x48000c00
 8002888:	48001000 	.word	0x48001000
 800288c:	48001400 	.word	0x48001400
 8002890:	48001800 	.word	0x48001800
 8002894:	48001c00 	.word	0x48001c00
 8002898:	40010400 	.word	0x40010400

0800289c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	887b      	ldrh	r3, [r7, #2]
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
 80028b8:	e001      	b.n	80028be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028ba:	2300      	movs	r3, #0
 80028bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028be:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	807b      	strh	r3, [r7, #2]
 80028d8:	4613      	mov	r3, r2
 80028da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028dc:	787b      	ldrb	r3, [r7, #1]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028e2:	887a      	ldrh	r2, [r7, #2]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028e8:	e002      	b.n	80028f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028ea:	887a      	ldrh	r2, [r7, #2]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028fe:	b08f      	sub	sp, #60	; 0x3c
 8002900:	af0a      	add	r7, sp, #40	; 0x28
 8002902:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e116      	b.n	8002b3c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d106      	bne.n	800292e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff f9d3 	bl	8001cd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2203      	movs	r2, #3
 8002932:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d102      	bne.n	8002948 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f004 f85d 	bl	8006a0c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	687e      	ldr	r6, [r7, #4]
 800295a:	466d      	mov	r5, sp
 800295c:	f106 0410 	add.w	r4, r6, #16
 8002960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002962:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002966:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002968:	e894 0003 	ldmia.w	r4, {r0, r1}
 800296c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002970:	1d33      	adds	r3, r6, #4
 8002972:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002974:	6838      	ldr	r0, [r7, #0]
 8002976:	f003 fff7 	bl	8006968 <USB_CoreInit>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e0d7      	b.n	8002b3c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2100      	movs	r1, #0
 8002992:	4618      	mov	r0, r3
 8002994:	f004 f84b 	bl	8006a2e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002998:	2300      	movs	r3, #0
 800299a:	73fb      	strb	r3, [r7, #15]
 800299c:	e04a      	b.n	8002a34 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	1a9b      	subs	r3, r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	333d      	adds	r3, #61	; 0x3d
 80029ae:	2201      	movs	r2, #1
 80029b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029b2:	7bfa      	ldrb	r2, [r7, #15]
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	1a9b      	subs	r3, r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	440b      	add	r3, r1
 80029c0:	333c      	adds	r3, #60	; 0x3c
 80029c2:	7bfa      	ldrb	r2, [r7, #15]
 80029c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	b298      	uxth	r0, r3
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	1a9b      	subs	r3, r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	3342      	adds	r3, #66	; 0x42
 80029da:	4602      	mov	r2, r0
 80029dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029de:	7bfa      	ldrb	r2, [r7, #15]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	1a9b      	subs	r3, r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	333f      	adds	r3, #63	; 0x3f
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029f2:	7bfa      	ldrb	r2, [r7, #15]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	3344      	adds	r3, #68	; 0x44
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a06:	7bfa      	ldrb	r2, [r7, #15]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	3348      	adds	r3, #72	; 0x48
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a1a:	7bfa      	ldrb	r2, [r7, #15]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	1a9b      	subs	r3, r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	3350      	adds	r3, #80	; 0x50
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	3301      	adds	r3, #1
 8002a32:	73fb      	strb	r3, [r7, #15]
 8002a34:	7bfa      	ldrb	r2, [r7, #15]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d3af      	bcc.n	800299e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a3e:	2300      	movs	r3, #0
 8002a40:	73fb      	strb	r3, [r7, #15]
 8002a42:	e044      	b.n	8002ace <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a44:	7bfa      	ldrb	r2, [r7, #15]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	1a9b      	subs	r3, r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002a56:	2200      	movs	r2, #0
 8002a58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a5a:	7bfa      	ldrb	r2, [r7, #15]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002a6c:	7bfa      	ldrb	r2, [r7, #15]
 8002a6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a70:	7bfa      	ldrb	r2, [r7, #15]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	1a9b      	subs	r3, r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a82:	2200      	movs	r2, #0
 8002a84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a86:	7bfa      	ldrb	r2, [r7, #15]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	1a9b      	subs	r3, r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a9c:	7bfa      	ldrb	r2, [r7, #15]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ab2:	7bfa      	ldrb	r2, [r7, #15]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	3301      	adds	r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
 8002ace:	7bfa      	ldrb	r2, [r7, #15]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d3b5      	bcc.n	8002a44 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	603b      	str	r3, [r7, #0]
 8002ade:	687e      	ldr	r6, [r7, #4]
 8002ae0:	466d      	mov	r5, sp
 8002ae2:	f106 0410 	add.w	r4, r6, #16
 8002ae6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ae8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002af2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002af6:	1d33      	adds	r3, r6, #4
 8002af8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002afa:	6838      	ldr	r0, [r7, #0]
 8002afc:	f003 ffc2 	bl	8006a84 <USB_DevInit>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2202      	movs	r2, #2
 8002b0a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e014      	b.n	8002b3c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d102      	bne.n	8002b30 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f80a 	bl	8002b44 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f004 f948 	bl	8006dca <USB_DevDisconnect>

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b44 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b76:	f043 0303 	orr.w	r3, r3, #3
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a04      	ldr	r2, [pc, #16]	; (8002ba8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9a:	6013      	str	r3, [r2, #0]
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40007000 	.word	0x40007000

08002bac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bb0:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bbc:	d102      	bne.n	8002bc4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bc2:	e00b      	b.n	8002bdc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002bc4:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd2:	d102      	bne.n	8002bda <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bd8:	e000      	b.n	8002bdc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002bda:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40007000 	.word	0x40007000

08002bec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d141      	bne.n	8002c7e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bfa:	4b4b      	ldr	r3, [pc, #300]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c06:	d131      	bne.n	8002c6c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c08:	4b47      	ldr	r3, [pc, #284]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c0e:	4a46      	ldr	r2, [pc, #280]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c18:	4b43      	ldr	r3, [pc, #268]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c20:	4a41      	ldr	r2, [pc, #260]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002c28:	4b40      	ldr	r3, [pc, #256]	; (8002d2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2232      	movs	r2, #50	; 0x32
 8002c2e:	fb02 f303 	mul.w	r3, r2, r3
 8002c32:	4a3f      	ldr	r2, [pc, #252]	; (8002d30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c34:	fba2 2303 	umull	r2, r3, r2, r3
 8002c38:	0c9b      	lsrs	r3, r3, #18
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c3e:	e002      	b.n	8002c46 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c46:	4b38      	ldr	r3, [pc, #224]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c52:	d102      	bne.n	8002c5a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f2      	bne.n	8002c40 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c5a:	4b33      	ldr	r3, [pc, #204]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c66:	d158      	bne.n	8002d1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e057      	b.n	8002d1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c6c:	4b2e      	ldr	r3, [pc, #184]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c72:	4a2d      	ldr	r2, [pc, #180]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c7c:	e04d      	b.n	8002d1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c84:	d141      	bne.n	8002d0a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c86:	4b28      	ldr	r3, [pc, #160]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c92:	d131      	bne.n	8002cf8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c94:	4b24      	ldr	r3, [pc, #144]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c9a:	4a23      	ldr	r2, [pc, #140]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ca4:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cac:	4a1e      	ldr	r2, [pc, #120]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2232      	movs	r2, #50	; 0x32
 8002cba:	fb02 f303 	mul.w	r3, r2, r3
 8002cbe:	4a1c      	ldr	r2, [pc, #112]	; (8002d30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc4:	0c9b      	lsrs	r3, r3, #18
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cca:	e002      	b.n	8002cd2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cd2:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cde:	d102      	bne.n	8002ce6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f2      	bne.n	8002ccc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf2:	d112      	bne.n	8002d1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e011      	b.n	8002d1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cfe:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d08:	e007      	b.n	8002d1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d0a:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d12:	4a05      	ldr	r2, [pc, #20]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d18:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	40007000 	.word	0x40007000
 8002d2c:	20000008 	.word	0x20000008
 8002d30:	431bde83 	.word	0x431bde83

08002d34 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	4a04      	ldr	r2, [pc, #16]	; (8002d50 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d42:	6053      	str	r3, [r2, #4]
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40007000 	.word	0x40007000

08002d54 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002d58:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4a04      	ldr	r2, [pc, #16]	; (8002d70 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d62:	6053      	str	r3, [r2, #4]
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40007000 	.word	0x40007000

08002d74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e3db      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d86:	4ba4      	ldr	r3, [pc, #656]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d90:	4ba1      	ldr	r3, [pc, #644]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 80e1 	beq.w	8002f6a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d007      	beq.n	8002dbe <HAL_RCC_OscConfig+0x4a>
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	2b0c      	cmp	r3, #12
 8002db2:	f040 8088 	bne.w	8002ec6 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	f040 8084 	bne.w	8002ec6 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dbe:	4b96      	ldr	r3, [pc, #600]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d005      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x62>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e3b3      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1a      	ldr	r2, [r3, #32]
 8002dda:	4b8f      	ldr	r3, [pc, #572]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d004      	beq.n	8002df0 <HAL_RCC_OscConfig+0x7c>
 8002de6:	4b8c      	ldr	r3, [pc, #560]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dee:	e005      	b.n	8002dfc <HAL_RCC_OscConfig+0x88>
 8002df0:	4b89      	ldr	r3, [pc, #548]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002df6:	091b      	lsrs	r3, r3, #4
 8002df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d223      	bcs.n	8002e48 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 fd91 	bl	800392c <RCC_SetFlashLatencyFromMSIRange>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e394      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e14:	4b80      	ldr	r3, [pc, #512]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a7f      	ldr	r2, [pc, #508]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002e1a:	f043 0308 	orr.w	r3, r3, #8
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	4b7d      	ldr	r3, [pc, #500]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	497a      	ldr	r1, [pc, #488]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e32:	4b79      	ldr	r3, [pc, #484]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	021b      	lsls	r3, r3, #8
 8002e40:	4975      	ldr	r1, [pc, #468]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]
 8002e46:	e022      	b.n	8002e8e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e48:	4b73      	ldr	r3, [pc, #460]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a72      	ldr	r2, [pc, #456]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002e4e:	f043 0308 	orr.w	r3, r3, #8
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	4b70      	ldr	r3, [pc, #448]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	496d      	ldr	r1, [pc, #436]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e66:	4b6c      	ldr	r3, [pc, #432]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	021b      	lsls	r3, r3, #8
 8002e74:	4968      	ldr	r1, [pc, #416]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 fd54 	bl	800392c <RCC_SetFlashLatencyFromMSIRange>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e357      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e8e:	f000 fc8b 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8002e92:	4601      	mov	r1, r0
 8002e94:	4b60      	ldr	r3, [pc, #384]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	4a5f      	ldr	r2, [pc, #380]	; (800301c <HAL_RCC_OscConfig+0x2a8>)
 8002ea0:	5cd3      	ldrb	r3, [r2, r3]
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8002eaa:	4a5d      	ldr	r2, [pc, #372]	; (8003020 <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002eae:	4b5d      	ldr	r3, [pc, #372]	; (8003024 <HAL_RCC_OscConfig+0x2b0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe ffbc 	bl	8001e30 <HAL_InitTick>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d052      	beq.n	8002f68 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
 8002ec4:	e33b      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d032      	beq.n	8002f34 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ece:	4b52      	ldr	r3, [pc, #328]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a51      	ldr	r2, [pc, #324]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eda:	f7fe fff5 	bl	8001ec8 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ee2:	f7fe fff1 	bl	8001ec8 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e324      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ef4:	4b48      	ldr	r3, [pc, #288]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0f0      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f00:	4b45      	ldr	r3, [pc, #276]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a44      	ldr	r2, [pc, #272]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002f06:	f043 0308 	orr.w	r3, r3, #8
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	4b42      	ldr	r3, [pc, #264]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	493f      	ldr	r1, [pc, #252]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f1e:	4b3e      	ldr	r3, [pc, #248]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	021b      	lsls	r3, r3, #8
 8002f2c:	493a      	ldr	r1, [pc, #232]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	604b      	str	r3, [r1, #4]
 8002f32:	e01a      	b.n	8002f6a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f34:	4b38      	ldr	r3, [pc, #224]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a37      	ldr	r2, [pc, #220]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002f3a:	f023 0301 	bic.w	r3, r3, #1
 8002f3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f40:	f7fe ffc2 	bl	8001ec8 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f48:	f7fe ffbe 	bl	8001ec8 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e2f1      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f5a:	4b2f      	ldr	r3, [pc, #188]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x1d4>
 8002f66:	e000      	b.n	8002f6a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d074      	beq.n	8003060 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_OscConfig+0x214>
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	2b0c      	cmp	r3, #12
 8002f80:	d10e      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b03      	cmp	r3, #3
 8002f86:	d10b      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f88:	4b23      	ldr	r3, [pc, #140]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d064      	beq.n	800305e <HAL_RCC_OscConfig+0x2ea>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d160      	bne.n	800305e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e2ce      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa8:	d106      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x244>
 8002faa:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a1a      	ldr	r2, [pc, #104]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e01d      	b.n	8002ff4 <HAL_RCC_OscConfig+0x280>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCC_OscConfig+0x268>
 8002fc2:	4b15      	ldr	r3, [pc, #84]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a14      	ldr	r2, [pc, #80]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	4b12      	ldr	r3, [pc, #72]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a11      	ldr	r2, [pc, #68]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	e00b      	b.n	8002ff4 <HAL_RCC_OscConfig+0x280>
 8002fdc:	4b0e      	ldr	r3, [pc, #56]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a0d      	ldr	r2, [pc, #52]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a0a      	ldr	r2, [pc, #40]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01c      	beq.n	8003036 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffc:	f7fe ff64 	bl	8001ec8 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003002:	e011      	b.n	8003028 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003004:	f7fe ff60 	bl	8001ec8 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b64      	cmp	r3, #100	; 0x64
 8003010:	d90a      	bls.n	8003028 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e293      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
 8003016:	bf00      	nop
 8003018:	40021000 	.word	0x40021000
 800301c:	08081740 	.word	0x08081740
 8003020:	20000008 	.word	0x20000008
 8003024:	2000000c 	.word	0x2000000c
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003028:	4bae      	ldr	r3, [pc, #696]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0e7      	beq.n	8003004 <HAL_RCC_OscConfig+0x290>
 8003034:	e014      	b.n	8003060 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7fe ff47 	bl	8001ec8 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800303e:	f7fe ff43 	bl	8001ec8 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b64      	cmp	r3, #100	; 0x64
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e276      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003050:	4ba4      	ldr	r3, [pc, #656]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f0      	bne.n	800303e <HAL_RCC_OscConfig+0x2ca>
 800305c:	e000      	b.n	8003060 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d060      	beq.n	800312e <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2b04      	cmp	r3, #4
 8003070:	d005      	beq.n	800307e <HAL_RCC_OscConfig+0x30a>
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	2b0c      	cmp	r3, #12
 8003076:	d119      	bne.n	80030ac <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d116      	bne.n	80030ac <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800307e:	4b99      	ldr	r3, [pc, #612]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <HAL_RCC_OscConfig+0x322>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e253      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003096:	4b93      	ldr	r3, [pc, #588]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	061b      	lsls	r3, r3, #24
 80030a4:	498f      	ldr	r1, [pc, #572]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030aa:	e040      	b.n	800312e <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d023      	beq.n	80030fc <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030b4:	4b8b      	ldr	r3, [pc, #556]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a8a      	ldr	r2, [pc, #552]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 80030ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fe ff02 	bl	8001ec8 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c8:	f7fe fefe 	bl	8001ec8 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e231      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030da:	4b82      	ldr	r3, [pc, #520]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e6:	4b7f      	ldr	r3, [pc, #508]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	061b      	lsls	r3, r3, #24
 80030f4:	497b      	ldr	r1, [pc, #492]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	604b      	str	r3, [r1, #4]
 80030fa:	e018      	b.n	800312e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030fc:	4b79      	ldr	r3, [pc, #484]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a78      	ldr	r2, [pc, #480]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 8003102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003108:	f7fe fede 	bl	8001ec8 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003110:	f7fe feda 	bl	8001ec8 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e20d      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003122:	4b70      	ldr	r3, [pc, #448]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d03c      	beq.n	80031b4 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d01c      	beq.n	800317c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003142:	4b68      	ldr	r3, [pc, #416]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 8003144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003148:	4a66      	ldr	r2, [pc, #408]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 800314a:	f043 0301 	orr.w	r3, r3, #1
 800314e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003152:	f7fe feb9 	bl	8001ec8 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800315a:	f7fe feb5 	bl	8001ec8 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e1e8      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800316c:	4b5d      	ldr	r3, [pc, #372]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 800316e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0ef      	beq.n	800315a <HAL_RCC_OscConfig+0x3e6>
 800317a:	e01b      	b.n	80031b4 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800317c:	4b59      	ldr	r3, [pc, #356]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 800317e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003182:	4a58      	ldr	r2, [pc, #352]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318c:	f7fe fe9c 	bl	8001ec8 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003194:	f7fe fe98 	bl	8001ec8 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e1cb      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031a6:	4b4f      	ldr	r3, [pc, #316]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 80031a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1ef      	bne.n	8003194 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80a5 	beq.w	800330c <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031c2:	2300      	movs	r3, #0
 80031c4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031c6:	4b47      	ldr	r3, [pc, #284]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 80031c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10d      	bne.n	80031ee <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d2:	4b44      	ldr	r3, [pc, #272]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 80031d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d6:	4a43      	ldr	r2, [pc, #268]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 80031d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031dc:	6593      	str	r3, [r2, #88]	; 0x58
 80031de:	4b41      	ldr	r3, [pc, #260]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 80031e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e6:	60bb      	str	r3, [r7, #8]
 80031e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ea:	2301      	movs	r3, #1
 80031ec:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ee:	4b3e      	ldr	r3, [pc, #248]	; (80032e8 <HAL_RCC_OscConfig+0x574>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d118      	bne.n	800322c <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031fa:	4b3b      	ldr	r3, [pc, #236]	; (80032e8 <HAL_RCC_OscConfig+0x574>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a3a      	ldr	r2, [pc, #232]	; (80032e8 <HAL_RCC_OscConfig+0x574>)
 8003200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003206:	f7fe fe5f 	bl	8001ec8 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320e:	f7fe fe5b 	bl	8001ec8 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e18e      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003220:	4b31      	ldr	r3, [pc, #196]	; (80032e8 <HAL_RCC_OscConfig+0x574>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f0      	beq.n	800320e <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d108      	bne.n	8003246 <HAL_RCC_OscConfig+0x4d2>
 8003234:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 8003236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323a:	4a2a      	ldr	r2, [pc, #168]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003244:	e024      	b.n	8003290 <HAL_RCC_OscConfig+0x51c>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2b05      	cmp	r3, #5
 800324c:	d110      	bne.n	8003270 <HAL_RCC_OscConfig+0x4fc>
 800324e:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 8003250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003254:	4a23      	ldr	r2, [pc, #140]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 8003256:	f043 0304 	orr.w	r3, r3, #4
 800325a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800325e:	4b21      	ldr	r3, [pc, #132]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 8003260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003264:	4a1f      	ldr	r2, [pc, #124]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800326e:	e00f      	b.n	8003290 <HAL_RCC_OscConfig+0x51c>
 8003270:	4b1c      	ldr	r3, [pc, #112]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003276:	4a1b      	ldr	r2, [pc, #108]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 8003278:	f023 0301 	bic.w	r3, r3, #1
 800327c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003280:	4b18      	ldr	r3, [pc, #96]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003286:	4a17      	ldr	r2, [pc, #92]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 8003288:	f023 0304 	bic.w	r3, r3, #4
 800328c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d016      	beq.n	80032c6 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003298:	f7fe fe16 	bl	8001ec8 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800329e:	e00a      	b.n	80032b6 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a0:	f7fe fe12 	bl	8001ec8 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e143      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b6:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCC_OscConfig+0x570>)
 80032b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0ed      	beq.n	80032a0 <HAL_RCC_OscConfig+0x52c>
 80032c4:	e019      	b.n	80032fa <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c6:	f7fe fdff 	bl	8001ec8 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032cc:	e00e      	b.n	80032ec <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ce:	f7fe fdfb 	bl	8001ec8 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032dc:	4293      	cmp	r3, r2
 80032de:	d905      	bls.n	80032ec <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e12c      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032ec:	4b96      	ldr	r3, [pc, #600]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1e9      	bne.n	80032ce <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032fa:	7ffb      	ldrb	r3, [r7, #31]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d105      	bne.n	800330c <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003300:	4b91      	ldr	r3, [pc, #580]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 8003302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003304:	4a90      	ldr	r2, [pc, #576]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 8003306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d03c      	beq.n	8003392 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01c      	beq.n	800335a <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003320:	4b89      	ldr	r3, [pc, #548]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 8003322:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003326:	4a88      	ldr	r2, [pc, #544]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003330:	f7fe fdca 	bl	8001ec8 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003338:	f7fe fdc6 	bl	8001ec8 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e0f9      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800334a:	4b7f      	ldr	r3, [pc, #508]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 800334c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0ef      	beq.n	8003338 <HAL_RCC_OscConfig+0x5c4>
 8003358:	e01b      	b.n	8003392 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800335a:	4b7b      	ldr	r3, [pc, #492]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 800335c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003360:	4a79      	ldr	r2, [pc, #484]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 8003362:	f023 0301 	bic.w	r3, r3, #1
 8003366:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336a:	f7fe fdad 	bl	8001ec8 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003372:	f7fe fda9 	bl	8001ec8 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e0dc      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003384:	4b70      	ldr	r3, [pc, #448]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 8003386:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1ef      	bne.n	8003372 <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 80d0 	beq.w	800353c <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2b0c      	cmp	r3, #12
 80033a0:	f000 808d 	beq.w	80034be <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d15a      	bne.n	8003462 <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ac:	4b66      	ldr	r3, [pc, #408]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a65      	ldr	r2, [pc, #404]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 80033b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fe fd86 	bl	8001ec8 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c0:	f7fe fd82 	bl	8001ec8 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e0b5      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033d2:	4b5d      	ldr	r3, [pc, #372]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f0      	bne.n	80033c0 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033de:	4b5a      	ldr	r3, [pc, #360]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	4b5a      	ldr	r3, [pc, #360]	; (800354c <HAL_RCC_OscConfig+0x7d8>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033ee:	3a01      	subs	r2, #1
 80033f0:	0112      	lsls	r2, r2, #4
 80033f2:	4311      	orrs	r1, r2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033f8:	0212      	lsls	r2, r2, #8
 80033fa:	4311      	orrs	r1, r2
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003400:	0852      	lsrs	r2, r2, #1
 8003402:	3a01      	subs	r2, #1
 8003404:	0552      	lsls	r2, r2, #21
 8003406:	4311      	orrs	r1, r2
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800340c:	0852      	lsrs	r2, r2, #1
 800340e:	3a01      	subs	r2, #1
 8003410:	0652      	lsls	r2, r2, #25
 8003412:	4311      	orrs	r1, r2
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003418:	06d2      	lsls	r2, r2, #27
 800341a:	430a      	orrs	r2, r1
 800341c:	494a      	ldr	r1, [pc, #296]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 800341e:	4313      	orrs	r3, r2
 8003420:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003422:	4b49      	ldr	r3, [pc, #292]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a48      	ldr	r2, [pc, #288]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 8003428:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800342c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800342e:	4b46      	ldr	r3, [pc, #280]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	4a45      	ldr	r2, [pc, #276]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 8003434:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003438:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343a:	f7fe fd45 	bl	8001ec8 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003442:	f7fe fd41 	bl	8001ec8 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e074      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003454:	4b3c      	ldr	r3, [pc, #240]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x6ce>
 8003460:	e06c      	b.n	800353c <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003462:	4b39      	ldr	r3, [pc, #228]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a38      	ldr	r2, [pc, #224]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 8003468:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800346c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800346e:	4b36      	ldr	r3, [pc, #216]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d105      	bne.n	8003486 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800347a:	4b33      	ldr	r3, [pc, #204]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	4a32      	ldr	r2, [pc, #200]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 8003480:	f023 0303 	bic.w	r3, r3, #3
 8003484:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003486:	4b30      	ldr	r3, [pc, #192]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	4a2f      	ldr	r2, [pc, #188]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 800348c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003494:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003496:	f7fe fd17 	bl	8001ec8 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349e:	f7fe fd13 	bl	8001ec8 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e046      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b0:	4b25      	ldr	r3, [pc, #148]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1f0      	bne.n	800349e <HAL_RCC_OscConfig+0x72a>
 80034bc:	e03e      	b.n	800353c <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e039      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80034ca:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <HAL_RCC_OscConfig+0x7d4>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f003 0203 	and.w	r2, r3, #3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034da:	429a      	cmp	r2, r3
 80034dc:	d12c      	bne.n	8003538 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	3b01      	subs	r3, #1
 80034ea:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d123      	bne.n	8003538 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fa:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d11b      	bne.n	8003538 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350a:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800350c:	429a      	cmp	r2, r3
 800350e:	d113      	bne.n	8003538 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351a:	085b      	lsrs	r3, r3, #1
 800351c:	3b01      	subs	r3, #1
 800351e:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003520:	429a      	cmp	r2, r3
 8003522:	d109      	bne.n	8003538 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	085b      	lsrs	r3, r3, #1
 8003530:	3b01      	subs	r3, #1
 8003532:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003534:	429a      	cmp	r2, r3
 8003536:	d001      	beq.n	800353c <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3720      	adds	r7, #32
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40021000 	.word	0x40021000
 800354c:	019d800c 	.word	0x019d800c

08003550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e10f      	b.n	8003788 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003568:	4b89      	ldr	r3, [pc, #548]	; (8003790 <HAL_RCC_ClockConfig+0x240>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d910      	bls.n	8003598 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003576:	4b86      	ldr	r3, [pc, #536]	; (8003790 <HAL_RCC_ClockConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f023 020f 	bic.w	r2, r3, #15
 800357e:	4984      	ldr	r1, [pc, #528]	; (8003790 <HAL_RCC_ClockConfig+0x240>)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	4313      	orrs	r3, r2
 8003584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003586:	4b82      	ldr	r3, [pc, #520]	; (8003790 <HAL_RCC_ClockConfig+0x240>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d001      	beq.n	8003598 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0f7      	b.n	8003788 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8089 	beq.w	80036b8 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d133      	bne.n	8003616 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ae:	4b79      	ldr	r3, [pc, #484]	; (8003794 <HAL_RCC_ClockConfig+0x244>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e0e4      	b.n	8003788 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80035be:	f000 fa0f 	bl	80039e0 <RCC_GetSysClockFreqFromPLLSource>
 80035c2:	4602      	mov	r2, r0
 80035c4:	4b74      	ldr	r3, [pc, #464]	; (8003798 <HAL_RCC_ClockConfig+0x248>)
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d955      	bls.n	8003676 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80035ca:	4b72      	ldr	r3, [pc, #456]	; (8003794 <HAL_RCC_ClockConfig+0x244>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10a      	bne.n	80035ec <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035d6:	4b6f      	ldr	r3, [pc, #444]	; (8003794 <HAL_RCC_ClockConfig+0x244>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035de:	4a6d      	ldr	r2, [pc, #436]	; (8003794 <HAL_RCC_ClockConfig+0x244>)
 80035e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035e6:	2380      	movs	r3, #128	; 0x80
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e044      	b.n	8003676 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d03e      	beq.n	8003676 <HAL_RCC_ClockConfig+0x126>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d13a      	bne.n	8003676 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003600:	4b64      	ldr	r3, [pc, #400]	; (8003794 <HAL_RCC_ClockConfig+0x244>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003608:	4a62      	ldr	r2, [pc, #392]	; (8003794 <HAL_RCC_ClockConfig+0x244>)
 800360a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800360e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003610:	2380      	movs	r3, #128	; 0x80
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	e02f      	b.n	8003676 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d107      	bne.n	800362e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800361e:	4b5d      	ldr	r3, [pc, #372]	; (8003794 <HAL_RCC_ClockConfig+0x244>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d115      	bne.n	8003656 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e0ac      	b.n	8003788 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d107      	bne.n	8003646 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003636:	4b57      	ldr	r3, [pc, #348]	; (8003794 <HAL_RCC_ClockConfig+0x244>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e0a0      	b.n	8003788 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003646:	4b53      	ldr	r3, [pc, #332]	; (8003794 <HAL_RCC_ClockConfig+0x244>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e098      	b.n	8003788 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003656:	f000 f8a7 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 800365a:	4602      	mov	r2, r0
 800365c:	4b4e      	ldr	r3, [pc, #312]	; (8003798 <HAL_RCC_ClockConfig+0x248>)
 800365e:	429a      	cmp	r2, r3
 8003660:	d909      	bls.n	8003676 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003662:	4b4c      	ldr	r3, [pc, #304]	; (8003794 <HAL_RCC_ClockConfig+0x244>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800366a:	4a4a      	ldr	r2, [pc, #296]	; (8003794 <HAL_RCC_ClockConfig+0x244>)
 800366c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003670:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003672:	2380      	movs	r3, #128	; 0x80
 8003674:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003676:	4b47      	ldr	r3, [pc, #284]	; (8003794 <HAL_RCC_ClockConfig+0x244>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f023 0203 	bic.w	r2, r3, #3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	4944      	ldr	r1, [pc, #272]	; (8003794 <HAL_RCC_ClockConfig+0x244>)
 8003684:	4313      	orrs	r3, r2
 8003686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003688:	f7fe fc1e 	bl	8001ec8 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368e:	e00a      	b.n	80036a6 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003690:	f7fe fc1a 	bl	8001ec8 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f241 3288 	movw	r2, #5000	; 0x1388
 800369e:	4293      	cmp	r3, r2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e070      	b.n	8003788 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a6:	4b3b      	ldr	r3, [pc, #236]	; (8003794 <HAL_RCC_ClockConfig+0x244>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 020c 	and.w	r2, r3, #12
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d1eb      	bne.n	8003690 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d009      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c4:	4b33      	ldr	r3, [pc, #204]	; (8003794 <HAL_RCC_ClockConfig+0x244>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	4930      	ldr	r1, [pc, #192]	; (8003794 <HAL_RCC_ClockConfig+0x244>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	608b      	str	r3, [r1, #8]
 80036d6:	e008      	b.n	80036ea <HAL_RCC_ClockConfig+0x19a>
  }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	2b80      	cmp	r3, #128	; 0x80
 80036dc:	d105      	bne.n	80036ea <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036de:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <HAL_RCC_ClockConfig+0x244>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	4a2c      	ldr	r2, [pc, #176]	; (8003794 <HAL_RCC_ClockConfig+0x244>)
 80036e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036e8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036ea:	4b29      	ldr	r3, [pc, #164]	; (8003790 <HAL_RCC_ClockConfig+0x240>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d210      	bcs.n	800371a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f8:	4b25      	ldr	r3, [pc, #148]	; (8003790 <HAL_RCC_ClockConfig+0x240>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f023 020f 	bic.w	r2, r3, #15
 8003700:	4923      	ldr	r1, [pc, #140]	; (8003790 <HAL_RCC_ClockConfig+0x240>)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	4313      	orrs	r3, r2
 8003706:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003708:	4b21      	ldr	r3, [pc, #132]	; (8003790 <HAL_RCC_ClockConfig+0x240>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d001      	beq.n	800371a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e036      	b.n	8003788 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0304 	and.w	r3, r3, #4
 8003722:	2b00      	cmp	r3, #0
 8003724:	d008      	beq.n	8003738 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003726:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <HAL_RCC_ClockConfig+0x244>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	4918      	ldr	r1, [pc, #96]	; (8003794 <HAL_RCC_ClockConfig+0x244>)
 8003734:	4313      	orrs	r3, r2
 8003736:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	d009      	beq.n	8003758 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003744:	4b13      	ldr	r3, [pc, #76]	; (8003794 <HAL_RCC_ClockConfig+0x244>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4910      	ldr	r1, [pc, #64]	; (8003794 <HAL_RCC_ClockConfig+0x244>)
 8003754:	4313      	orrs	r3, r2
 8003756:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003758:	f000 f826 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 800375c:	4601      	mov	r1, r0
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <HAL_RCC_ClockConfig+0x244>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	091b      	lsrs	r3, r3, #4
 8003764:	f003 030f 	and.w	r3, r3, #15
 8003768:	4a0c      	ldr	r2, [pc, #48]	; (800379c <HAL_RCC_ClockConfig+0x24c>)
 800376a:	5cd3      	ldrb	r3, [r2, r3]
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	fa21 f303 	lsr.w	r3, r1, r3
 8003774:	4a0a      	ldr	r2, [pc, #40]	; (80037a0 <HAL_RCC_ClockConfig+0x250>)
 8003776:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003778:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <HAL_RCC_ClockConfig+0x254>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f7fe fb57 	bl	8001e30 <HAL_InitTick>
 8003782:	4603      	mov	r3, r0
 8003784:	73fb      	strb	r3, [r7, #15]

  return status;
 8003786:	7bfb      	ldrb	r3, [r7, #15]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40022000 	.word	0x40022000
 8003794:	40021000 	.word	0x40021000
 8003798:	04c4b400 	.word	0x04c4b400
 800379c:	08081740 	.word	0x08081740
 80037a0:	20000008 	.word	0x20000008
 80037a4:	2000000c 	.word	0x2000000c

080037a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b089      	sub	sp, #36	; 0x24
 80037ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
 80037b2:	2300      	movs	r3, #0
 80037b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037b6:	4b3d      	ldr	r3, [pc, #244]	; (80038ac <HAL_RCC_GetSysClockFreq+0x104>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 030c 	and.w	r3, r3, #12
 80037be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037c0:	4b3a      	ldr	r3, [pc, #232]	; (80038ac <HAL_RCC_GetSysClockFreq+0x104>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_GetSysClockFreq+0x34>
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	2b0c      	cmp	r3, #12
 80037d4:	d121      	bne.n	800381a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d11e      	bne.n	800381a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037dc:	4b33      	ldr	r3, [pc, #204]	; (80038ac <HAL_RCC_GetSysClockFreq+0x104>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d107      	bne.n	80037f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037e8:	4b30      	ldr	r3, [pc, #192]	; (80038ac <HAL_RCC_GetSysClockFreq+0x104>)
 80037ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ee:	0a1b      	lsrs	r3, r3, #8
 80037f0:	f003 030f 	and.w	r3, r3, #15
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	e005      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037f8:	4b2c      	ldr	r3, [pc, #176]	; (80038ac <HAL_RCC_GetSysClockFreq+0x104>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	091b      	lsrs	r3, r3, #4
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003804:	4a2a      	ldr	r2, [pc, #168]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800380c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10d      	bne.n	8003830 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003818:	e00a      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	2b04      	cmp	r3, #4
 800381e:	d102      	bne.n	8003826 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003820:	4b24      	ldr	r3, [pc, #144]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003822:	61bb      	str	r3, [r7, #24]
 8003824:	e004      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b08      	cmp	r3, #8
 800382a:	d101      	bne.n	8003830 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800382c:	4b22      	ldr	r3, [pc, #136]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x110>)
 800382e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	2b0c      	cmp	r3, #12
 8003834:	d133      	bne.n	800389e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003836:	4b1d      	ldr	r3, [pc, #116]	; (80038ac <HAL_RCC_GetSysClockFreq+0x104>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d002      	beq.n	800384c <HAL_RCC_GetSysClockFreq+0xa4>
 8003846:	2b03      	cmp	r3, #3
 8003848:	d003      	beq.n	8003852 <HAL_RCC_GetSysClockFreq+0xaa>
 800384a:	e005      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800384c:	4b19      	ldr	r3, [pc, #100]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800384e:	617b      	str	r3, [r7, #20]
      break;
 8003850:	e005      	b.n	800385e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003852:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003854:	617b      	str	r3, [r7, #20]
      break;
 8003856:	e002      	b.n	800385e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	617b      	str	r3, [r7, #20]
      break;
 800385c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800385e:	4b13      	ldr	r3, [pc, #76]	; (80038ac <HAL_RCC_GetSysClockFreq+0x104>)
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	3301      	adds	r3, #1
 800386a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800386c:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <HAL_RCC_GetSysClockFreq+0x104>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	0a1b      	lsrs	r3, r3, #8
 8003872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	fb02 f203 	mul.w	r2, r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003882:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003884:	4b09      	ldr	r3, [pc, #36]	; (80038ac <HAL_RCC_GetSysClockFreq+0x104>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	0e5b      	lsrs	r3, r3, #25
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	3301      	adds	r3, #1
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	fbb2 f3f3 	udiv	r3, r2, r3
 800389c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800389e:	69bb      	ldr	r3, [r7, #24]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3724      	adds	r7, #36	; 0x24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	40021000 	.word	0x40021000
 80038b0:	08081758 	.word	0x08081758
 80038b4:	00f42400 	.word	0x00f42400
 80038b8:	007a1200 	.word	0x007a1200

080038bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038c0:	4b03      	ldr	r3, [pc, #12]	; (80038d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038c2:	681b      	ldr	r3, [r3, #0]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	20000008 	.word	0x20000008

080038d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038d8:	f7ff fff0 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 80038dc:	4601      	mov	r1, r0
 80038de:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	0a1b      	lsrs	r3, r3, #8
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	4a04      	ldr	r2, [pc, #16]	; (80038fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80038ea:	5cd3      	ldrb	r3, [r2, r3]
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40021000 	.word	0x40021000
 80038fc:	08081750 	.word	0x08081750

08003900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003904:	f7ff ffda 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 8003908:	4601      	mov	r1, r0
 800390a:	4b06      	ldr	r3, [pc, #24]	; (8003924 <HAL_RCC_GetPCLK2Freq+0x24>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	0adb      	lsrs	r3, r3, #11
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	4a04      	ldr	r2, [pc, #16]	; (8003928 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003916:	5cd3      	ldrb	r3, [r2, r3]
 8003918:	f003 031f 	and.w	r3, r3, #31
 800391c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003920:	4618      	mov	r0, r3
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021000 	.word	0x40021000
 8003928:	08081750 	.word	0x08081750

0800392c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003934:	2300      	movs	r3, #0
 8003936:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003938:	4b27      	ldr	r3, [pc, #156]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800393a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003944:	f7ff f932 	bl	8002bac <HAL_PWREx_GetVoltageRange>
 8003948:	6178      	str	r0, [r7, #20]
 800394a:	e014      	b.n	8003976 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800394c:	4b22      	ldr	r3, [pc, #136]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800394e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003950:	4a21      	ldr	r2, [pc, #132]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003956:	6593      	str	r3, [r2, #88]	; 0x58
 8003958:	4b1f      	ldr	r3, [pc, #124]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800395a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003964:	f7ff f922 	bl	8002bac <HAL_PWREx_GetVoltageRange>
 8003968:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800396a:	4b1b      	ldr	r3, [pc, #108]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396e:	4a1a      	ldr	r2, [pc, #104]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003974:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800397c:	d10b      	bne.n	8003996 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b80      	cmp	r3, #128	; 0x80
 8003982:	d913      	bls.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2ba0      	cmp	r3, #160	; 0xa0
 8003988:	d902      	bls.n	8003990 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800398a:	2302      	movs	r3, #2
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	e00d      	b.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003990:	2301      	movs	r3, #1
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	e00a      	b.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b7f      	cmp	r3, #127	; 0x7f
 800399a:	d902      	bls.n	80039a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800399c:	2302      	movs	r3, #2
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	e004      	b.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b70      	cmp	r3, #112	; 0x70
 80039a6:	d101      	bne.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039a8:	2301      	movs	r3, #1
 80039aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f023 020f 	bic.w	r2, r3, #15
 80039b4:	4909      	ldr	r1, [pc, #36]	; (80039dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039bc:	4b07      	ldr	r3, [pc, #28]	; (80039dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d001      	beq.n	80039ce <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40022000 	.word	0x40022000

080039e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80039ea:	4b2d      	ldr	r3, [pc, #180]	; (8003aa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d118      	bne.n	8003a28 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039f6:	4b2a      	ldr	r3, [pc, #168]	; (8003aa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d107      	bne.n	8003a12 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a02:	4b27      	ldr	r3, [pc, #156]	; (8003aa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a08:	0a1b      	lsrs	r3, r3, #8
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	e005      	b.n	8003a1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a12:	4b23      	ldr	r3, [pc, #140]	; (8003aa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	091b      	lsrs	r3, r3, #4
 8003a18:	f003 030f 	and.w	r3, r3, #15
 8003a1c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a1e:	4a21      	ldr	r2, [pc, #132]	; (8003aa4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a26:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a28:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d002      	beq.n	8003a3e <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d003      	beq.n	8003a44 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003a3c:	e005      	b.n	8003a4a <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003a3e:	4b1a      	ldr	r3, [pc, #104]	; (8003aa8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003a40:	613b      	str	r3, [r7, #16]
    break;
 8003a42:	e005      	b.n	8003a50 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003a44:	4b19      	ldr	r3, [pc, #100]	; (8003aac <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003a46:	613b      	str	r3, [r7, #16]
    break;
 8003a48:	e002      	b.n	8003a50 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	613b      	str	r3, [r7, #16]
    break;
 8003a4e:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a50:	4b13      	ldr	r3, [pc, #76]	; (8003aa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	091b      	lsrs	r3, r3, #4
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a5e:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	0a1b      	lsrs	r3, r3, #8
 8003a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	fb02 f203 	mul.w	r2, r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a74:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a76:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	0e5b      	lsrs	r3, r3, #25
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	3301      	adds	r3, #1
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8e:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003a90:	683b      	ldr	r3, [r7, #0]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	08081758 	.word	0x08081758
 8003aa8:	00f42400 	.word	0x00f42400
 8003aac:	007a1200 	.word	0x007a1200

08003ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ab8:	2300      	movs	r3, #0
 8003aba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003abc:	2300      	movs	r3, #0
 8003abe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d03d      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ad0:	2b40      	cmp	r3, #64	; 0x40
 8003ad2:	d00b      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003ad4:	2b40      	cmp	r3, #64	; 0x40
 8003ad6:	d804      	bhi.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00e      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d015      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003ae0:	e01d      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003ae2:	2b60      	cmp	r3, #96	; 0x60
 8003ae4:	d01e      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ae6:	2b80      	cmp	r3, #128	; 0x80
 8003ae8:	d01c      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003aea:	e018      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003aec:	4b86      	ldr	r3, [pc, #536]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	4a85      	ldr	r2, [pc, #532]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003af8:	e015      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3304      	adds	r3, #4
 8003afe:	2100      	movs	r1, #0
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 fb0d 	bl	8004120 <RCCEx_PLLSAI1_Config>
 8003b06:	4603      	mov	r3, r0
 8003b08:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b0a:	e00c      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3320      	adds	r3, #32
 8003b10:	2100      	movs	r1, #0
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fbf4 	bl	8004300 <RCCEx_PLLSAI2_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b1c:	e003      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	74fb      	strb	r3, [r7, #19]
      break;
 8003b22:	e000      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003b24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b26:	7cfb      	ldrb	r3, [r7, #19]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10b      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b2c:	4b76      	ldr	r3, [pc, #472]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b32:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b3a:	4973      	ldr	r1, [pc, #460]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003b42:	e001      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b44:	7cfb      	ldrb	r3, [r7, #19]
 8003b46:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d042      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b5c:	d00f      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b62:	d805      	bhi.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d011      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b6c:	d017      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003b6e:	e01f      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003b70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b74:	d01f      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b7a:	d01c      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b7c:	e018      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b7e:	4b62      	ldr	r3, [pc, #392]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	4a61      	ldr	r2, [pc, #388]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b88:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b8a:	e015      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3304      	adds	r3, #4
 8003b90:	2100      	movs	r1, #0
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fac4 	bl	8004120 <RCCEx_PLLSAI1_Config>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b9c:	e00c      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3320      	adds	r3, #32
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 fbab 	bl	8004300 <RCCEx_PLLSAI2_Config>
 8003baa:	4603      	mov	r3, r0
 8003bac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bae:	e003      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	74fb      	strb	r3, [r7, #19]
      break;
 8003bb4:	e000      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003bb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bb8:	7cfb      	ldrb	r3, [r7, #19]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10b      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bbe:	4b52      	ldr	r3, [pc, #328]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bcc:	494e      	ldr	r1, [pc, #312]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003bd4:	e001      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd6:	7cfb      	ldrb	r3, [r7, #19]
 8003bd8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 809f 	beq.w	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003be8:	2300      	movs	r3, #0
 8003bea:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bec:	4b46      	ldr	r3, [pc, #280]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e000      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00d      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c02:	4b41      	ldr	r3, [pc, #260]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c06:	4a40      	ldr	r2, [pc, #256]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c0e:	4b3e      	ldr	r3, [pc, #248]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c16:	60bb      	str	r3, [r7, #8]
 8003c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c1e:	4b3b      	ldr	r3, [pc, #236]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a3a      	ldr	r2, [pc, #232]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c2a:	f7fe f94d 	bl	8001ec8 <HAL_GetTick>
 8003c2e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c30:	e009      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c32:	f7fe f949 	bl	8001ec8 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d902      	bls.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	74fb      	strb	r3, [r7, #19]
        break;
 8003c44:	e005      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c46:	4b31      	ldr	r3, [pc, #196]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0ef      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003c52:	7cfb      	ldrb	r3, [r7, #19]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d15b      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c58:	4b2b      	ldr	r3, [pc, #172]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c62:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d01f      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d019      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c76:	4b24      	ldr	r3, [pc, #144]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c80:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c82:	4b21      	ldr	r3, [pc, #132]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c88:	4a1f      	ldr	r2, [pc, #124]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c92:	4b1d      	ldr	r3, [pc, #116]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c98:	4a1b      	ldr	r2, [pc, #108]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ca2:	4a19      	ldr	r2, [pc, #100]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d016      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb4:	f7fe f908 	bl	8001ec8 <HAL_GetTick>
 8003cb8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cba:	e00b      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cbc:	f7fe f904 	bl	8001ec8 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d902      	bls.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	74fb      	strb	r3, [r7, #19]
            break;
 8003cd2:	e006      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0ec      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8003ce2:	7cfb      	ldrb	r3, [r7, #19]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10c      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ce8:	4b07      	ldr	r3, [pc, #28]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf8:	4903      	ldr	r1, [pc, #12]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d00:	e008      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d02:	7cfb      	ldrb	r3, [r7, #19]
 8003d04:	74bb      	strb	r3, [r7, #18]
 8003d06:	e005      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d10:	7cfb      	ldrb	r3, [r7, #19]
 8003d12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d14:	7c7b      	ldrb	r3, [r7, #17]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d105      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d1a:	4ba0      	ldr	r3, [pc, #640]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1e:	4a9f      	ldr	r2, [pc, #636]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d32:	4b9a      	ldr	r3, [pc, #616]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d38:	f023 0203 	bic.w	r2, r3, #3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d40:	4996      	ldr	r1, [pc, #600]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00a      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d54:	4b91      	ldr	r3, [pc, #580]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5a:	f023 020c 	bic.w	r2, r3, #12
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	498e      	ldr	r1, [pc, #568]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d76:	4b89      	ldr	r3, [pc, #548]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d84:	4985      	ldr	r1, [pc, #532]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00a      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d98:	4b80      	ldr	r3, [pc, #512]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da6:	497d      	ldr	r1, [pc, #500]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0310 	and.w	r3, r3, #16
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dba:	4b78      	ldr	r3, [pc, #480]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc8:	4974      	ldr	r1, [pc, #464]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0320 	and.w	r3, r3, #32
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00a      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ddc:	4b6f      	ldr	r3, [pc, #444]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dea:	496c      	ldr	r1, [pc, #432]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dfe:	4b67      	ldr	r3, [pc, #412]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e0c:	4963      	ldr	r1, [pc, #396]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e20:	4b5e      	ldr	r3, [pc, #376]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e2e:	495b      	ldr	r1, [pc, #364]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e42:	4b56      	ldr	r3, [pc, #344]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e50:	4952      	ldr	r1, [pc, #328]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e64:	4b4d      	ldr	r3, [pc, #308]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e72:	494a      	ldr	r1, [pc, #296]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e86:	4b45      	ldr	r3, [pc, #276]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e94:	4941      	ldr	r1, [pc, #260]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00a      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ea8:	4b3c      	ldr	r3, [pc, #240]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eae:	f023 0203 	bic.w	r2, r3, #3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb6:	4939      	ldr	r1, [pc, #228]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d028      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003eca:	4b34      	ldr	r3, [pc, #208]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed8:	4930      	ldr	r1, [pc, #192]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ee8:	d106      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eea:	4b2c      	ldr	r3, [pc, #176]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	4a2b      	ldr	r2, [pc, #172]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ef4:	60d3      	str	r3, [r2, #12]
 8003ef6:	e011      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003efc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f00:	d10c      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3304      	adds	r3, #4
 8003f06:	2101      	movs	r1, #1
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 f909 	bl	8004120 <RCCEx_PLLSAI1_Config>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f12:	7cfb      	ldrb	r3, [r7, #19]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003f18:	7cfb      	ldrb	r3, [r7, #19]
 8003f1a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d04d      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f30:	d108      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003f32:	4b1a      	ldr	r3, [pc, #104]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f38:	4a18      	ldr	r2, [pc, #96]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f3e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003f42:	e012      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003f44:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f4a:	4a14      	ldr	r2, [pc, #80]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f50:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003f54:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f62:	490e      	ldr	r1, [pc, #56]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f72:	d106      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f74:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	4a08      	ldr	r2, [pc, #32]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f7e:	60d3      	str	r3, [r2, #12]
 8003f80:	e020      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f8a:	d109      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f8c:	4b03      	ldr	r3, [pc, #12]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	4a02      	ldr	r2, [pc, #8]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f96:	60d3      	str	r3, [r2, #12]
 8003f98:	e014      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f9a:	bf00      	nop
 8003f9c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3304      	adds	r3, #4
 8003fae:	2101      	movs	r1, #1
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 f8b5 	bl	8004120 <RCCEx_PLLSAI1_Config>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fba:	7cfb      	ldrb	r3, [r7, #19]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003fc0:	7cfb      	ldrb	r3, [r7, #19]
 8003fc2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d028      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fd0:	4b4a      	ldr	r3, [pc, #296]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fde:	4947      	ldr	r1, [pc, #284]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fee:	d106      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ff0:	4b42      	ldr	r3, [pc, #264]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	4a41      	ldr	r2, [pc, #260]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ffa:	60d3      	str	r3, [r2, #12]
 8003ffc:	e011      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004002:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004006:	d10c      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3304      	adds	r3, #4
 800400c:	2101      	movs	r1, #1
 800400e:	4618      	mov	r0, r3
 8004010:	f000 f886 	bl	8004120 <RCCEx_PLLSAI1_Config>
 8004014:	4603      	mov	r3, r0
 8004016:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004018:	7cfb      	ldrb	r3, [r7, #19]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 800401e:	7cfb      	ldrb	r3, [r7, #19]
 8004020:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d01e      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800402e:	4b33      	ldr	r3, [pc, #204]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004034:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800403e:	492f      	ldr	r1, [pc, #188]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800404c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004050:	d10c      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3304      	adds	r3, #4
 8004056:	2102      	movs	r1, #2
 8004058:	4618      	mov	r0, r3
 800405a:	f000 f861 	bl	8004120 <RCCEx_PLLSAI1_Config>
 800405e:	4603      	mov	r3, r0
 8004060:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004062:	7cfb      	ldrb	r3, [r7, #19]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8004068:	7cfb      	ldrb	r3, [r7, #19]
 800406a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00b      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004078:	4b20      	ldr	r3, [pc, #128]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800407a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800407e:	f023 0204 	bic.w	r2, r3, #4
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004088:	491c      	ldr	r1, [pc, #112]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00b      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800409c:	4b17      	ldr	r3, [pc, #92]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800409e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040a2:	f023 0218 	bic.w	r2, r3, #24
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ac:	4913      	ldr	r1, [pc, #76]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d017      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80040c0:	4b0e      	ldr	r3, [pc, #56]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d0:	490a      	ldr	r1, [pc, #40]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040e2:	d105      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040e4:	4b05      	ldr	r3, [pc, #20]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4a04      	ldr	r2, [pc, #16]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40021000 	.word	0x40021000

08004100 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004104:	4b05      	ldr	r3, [pc, #20]	; (800411c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a04      	ldr	r2, [pc, #16]	; (800411c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800410a:	f043 0304 	orr.w	r3, r3, #4
 800410e:	6013      	str	r3, [r2, #0]
}
 8004110:	bf00      	nop
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40021000 	.word	0x40021000

08004120 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800412e:	4b70      	ldr	r3, [pc, #448]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00e      	beq.n	8004158 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800413a:	4b6d      	ldr	r3, [pc, #436]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f003 0203 	and.w	r2, r3, #3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d103      	bne.n	8004152 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
       ||
 800414e:	2b00      	cmp	r3, #0
 8004150:	d13f      	bne.n	80041d2 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	73fb      	strb	r3, [r7, #15]
 8004156:	e03c      	b.n	80041d2 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b02      	cmp	r3, #2
 800415e:	d00c      	beq.n	800417a <RCCEx_PLLSAI1_Config+0x5a>
 8004160:	2b03      	cmp	r3, #3
 8004162:	d013      	beq.n	800418c <RCCEx_PLLSAI1_Config+0x6c>
 8004164:	2b01      	cmp	r3, #1
 8004166:	d120      	bne.n	80041aa <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004168:	4b61      	ldr	r3, [pc, #388]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d11d      	bne.n	80041b0 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004178:	e01a      	b.n	80041b0 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800417a:	4b5d      	ldr	r3, [pc, #372]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004182:	2b00      	cmp	r3, #0
 8004184:	d116      	bne.n	80041b4 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800418a:	e013      	b.n	80041b4 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800418c:	4b58      	ldr	r3, [pc, #352]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10f      	bne.n	80041b8 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004198:	4b55      	ldr	r3, [pc, #340]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d109      	bne.n	80041b8 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041a8:	e006      	b.n	80041b8 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	73fb      	strb	r3, [r7, #15]
      break;
 80041ae:	e004      	b.n	80041ba <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80041b0:	bf00      	nop
 80041b2:	e002      	b.n	80041ba <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80041b4:	bf00      	nop
 80041b6:	e000      	b.n	80041ba <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80041b8:	bf00      	nop
    }

    if(status == HAL_OK)
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d108      	bne.n	80041d2 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80041c0:	4b4b      	ldr	r3, [pc, #300]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f023 0203 	bic.w	r2, r3, #3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4948      	ldr	r1, [pc, #288]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f040 8086 	bne.w	80042e6 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041da:	4b45      	ldr	r3, [pc, #276]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a44      	ldr	r2, [pc, #272]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80041e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e6:	f7fd fe6f 	bl	8001ec8 <HAL_GetTick>
 80041ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041ec:	e009      	b.n	8004202 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041ee:	f7fd fe6b 	bl	8001ec8 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d902      	bls.n	8004202 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	73fb      	strb	r3, [r7, #15]
        break;
 8004200:	e005      	b.n	800420e <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004202:	4b3b      	ldr	r3, [pc, #236]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1ef      	bne.n	80041ee <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800420e:	7bfb      	ldrb	r3, [r7, #15]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d168      	bne.n	80042e6 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d113      	bne.n	8004242 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800421a:	4b35      	ldr	r3, [pc, #212]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	4b35      	ldr	r3, [pc, #212]	; (80042f4 <RCCEx_PLLSAI1_Config+0x1d4>)
 8004220:	4013      	ands	r3, r2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6892      	ldr	r2, [r2, #8]
 8004226:	0211      	lsls	r1, r2, #8
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	68d2      	ldr	r2, [r2, #12]
 800422c:	06d2      	lsls	r2, r2, #27
 800422e:	4311      	orrs	r1, r2
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6852      	ldr	r2, [r2, #4]
 8004234:	3a01      	subs	r2, #1
 8004236:	0112      	lsls	r2, r2, #4
 8004238:	430a      	orrs	r2, r1
 800423a:	492d      	ldr	r1, [pc, #180]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800423c:	4313      	orrs	r3, r2
 800423e:	610b      	str	r3, [r1, #16]
 8004240:	e02d      	b.n	800429e <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d115      	bne.n	8004274 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004248:	4b29      	ldr	r3, [pc, #164]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	4b2a      	ldr	r3, [pc, #168]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800424e:	4013      	ands	r3, r2
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6892      	ldr	r2, [r2, #8]
 8004254:	0211      	lsls	r1, r2, #8
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6912      	ldr	r2, [r2, #16]
 800425a:	0852      	lsrs	r2, r2, #1
 800425c:	3a01      	subs	r2, #1
 800425e:	0552      	lsls	r2, r2, #21
 8004260:	4311      	orrs	r1, r2
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6852      	ldr	r2, [r2, #4]
 8004266:	3a01      	subs	r2, #1
 8004268:	0112      	lsls	r2, r2, #4
 800426a:	430a      	orrs	r2, r1
 800426c:	4920      	ldr	r1, [pc, #128]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800426e:	4313      	orrs	r3, r2
 8004270:	610b      	str	r3, [r1, #16]
 8004272:	e014      	b.n	800429e <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004274:	4b1e      	ldr	r3, [pc, #120]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	4b20      	ldr	r3, [pc, #128]	; (80042fc <RCCEx_PLLSAI1_Config+0x1dc>)
 800427a:	4013      	ands	r3, r2
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6892      	ldr	r2, [r2, #8]
 8004280:	0211      	lsls	r1, r2, #8
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6952      	ldr	r2, [r2, #20]
 8004286:	0852      	lsrs	r2, r2, #1
 8004288:	3a01      	subs	r2, #1
 800428a:	0652      	lsls	r2, r2, #25
 800428c:	4311      	orrs	r1, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6852      	ldr	r2, [r2, #4]
 8004292:	3a01      	subs	r2, #1
 8004294:	0112      	lsls	r2, r2, #4
 8004296:	430a      	orrs	r2, r1
 8004298:	4915      	ldr	r1, [pc, #84]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800429a:	4313      	orrs	r3, r2
 800429c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800429e:	4b14      	ldr	r3, [pc, #80]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a13      	ldr	r2, [pc, #76]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80042a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042aa:	f7fd fe0d 	bl	8001ec8 <HAL_GetTick>
 80042ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042b0:	e009      	b.n	80042c6 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042b2:	f7fd fe09 	bl	8001ec8 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d902      	bls.n	80042c6 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	73fb      	strb	r3, [r7, #15]
          break;
 80042c4:	e005      	b.n	80042d2 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042c6:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0ef      	beq.n	80042b2 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d106      	bne.n	80042e6 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042d8:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	4903      	ldr	r1, [pc, #12]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	40021000 	.word	0x40021000
 80042f4:	07ff800f 	.word	0x07ff800f
 80042f8:	ff9f800f 	.word	0xff9f800f
 80042fc:	f9ff800f 	.word	0xf9ff800f

08004300 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800430e:	4b70      	ldr	r3, [pc, #448]	; (80044d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00e      	beq.n	8004338 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800431a:	4b6d      	ldr	r3, [pc, #436]	; (80044d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f003 0203 	and.w	r2, r3, #3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	429a      	cmp	r2, r3
 8004328:	d103      	bne.n	8004332 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
       ||
 800432e:	2b00      	cmp	r3, #0
 8004330:	d13f      	bne.n	80043b2 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	73fb      	strb	r3, [r7, #15]
 8004336:	e03c      	b.n	80043b2 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b02      	cmp	r3, #2
 800433e:	d00c      	beq.n	800435a <RCCEx_PLLSAI2_Config+0x5a>
 8004340:	2b03      	cmp	r3, #3
 8004342:	d013      	beq.n	800436c <RCCEx_PLLSAI2_Config+0x6c>
 8004344:	2b01      	cmp	r3, #1
 8004346:	d120      	bne.n	800438a <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004348:	4b61      	ldr	r3, [pc, #388]	; (80044d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d11d      	bne.n	8004390 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004358:	e01a      	b.n	8004390 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800435a:	4b5d      	ldr	r3, [pc, #372]	; (80044d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004362:	2b00      	cmp	r3, #0
 8004364:	d116      	bne.n	8004394 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800436a:	e013      	b.n	8004394 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800436c:	4b58      	ldr	r3, [pc, #352]	; (80044d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10f      	bne.n	8004398 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004378:	4b55      	ldr	r3, [pc, #340]	; (80044d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d109      	bne.n	8004398 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004388:	e006      	b.n	8004398 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	73fb      	strb	r3, [r7, #15]
      break;
 800438e:	e004      	b.n	800439a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004390:	bf00      	nop
 8004392:	e002      	b.n	800439a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004394:	bf00      	nop
 8004396:	e000      	b.n	800439a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004398:	bf00      	nop
    }

    if(status == HAL_OK)
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d108      	bne.n	80043b2 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80043a0:	4b4b      	ldr	r3, [pc, #300]	; (80044d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f023 0203 	bic.w	r2, r3, #3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4948      	ldr	r1, [pc, #288]	; (80044d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f040 8086 	bne.w	80044c6 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043ba:	4b45      	ldr	r3, [pc, #276]	; (80044d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a44      	ldr	r2, [pc, #272]	; (80044d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80043c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c6:	f7fd fd7f 	bl	8001ec8 <HAL_GetTick>
 80043ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043cc:	e009      	b.n	80043e2 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043ce:	f7fd fd7b 	bl	8001ec8 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d902      	bls.n	80043e2 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	73fb      	strb	r3, [r7, #15]
        break;
 80043e0:	e005      	b.n	80043ee <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043e2:	4b3b      	ldr	r3, [pc, #236]	; (80044d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1ef      	bne.n	80043ce <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d168      	bne.n	80044c6 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d113      	bne.n	8004422 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043fa:	4b35      	ldr	r3, [pc, #212]	; (80044d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80043fc:	695a      	ldr	r2, [r3, #20]
 80043fe:	4b35      	ldr	r3, [pc, #212]	; (80044d4 <RCCEx_PLLSAI2_Config+0x1d4>)
 8004400:	4013      	ands	r3, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6892      	ldr	r2, [r2, #8]
 8004406:	0211      	lsls	r1, r2, #8
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	68d2      	ldr	r2, [r2, #12]
 800440c:	06d2      	lsls	r2, r2, #27
 800440e:	4311      	orrs	r1, r2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6852      	ldr	r2, [r2, #4]
 8004414:	3a01      	subs	r2, #1
 8004416:	0112      	lsls	r2, r2, #4
 8004418:	430a      	orrs	r2, r1
 800441a:	492d      	ldr	r1, [pc, #180]	; (80044d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800441c:	4313      	orrs	r3, r2
 800441e:	614b      	str	r3, [r1, #20]
 8004420:	e02d      	b.n	800447e <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d115      	bne.n	8004454 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004428:	4b29      	ldr	r3, [pc, #164]	; (80044d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800442a:	695a      	ldr	r2, [r3, #20]
 800442c:	4b2a      	ldr	r3, [pc, #168]	; (80044d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800442e:	4013      	ands	r3, r2
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6892      	ldr	r2, [r2, #8]
 8004434:	0211      	lsls	r1, r2, #8
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6912      	ldr	r2, [r2, #16]
 800443a:	0852      	lsrs	r2, r2, #1
 800443c:	3a01      	subs	r2, #1
 800443e:	0552      	lsls	r2, r2, #21
 8004440:	4311      	orrs	r1, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6852      	ldr	r2, [r2, #4]
 8004446:	3a01      	subs	r2, #1
 8004448:	0112      	lsls	r2, r2, #4
 800444a:	430a      	orrs	r2, r1
 800444c:	4920      	ldr	r1, [pc, #128]	; (80044d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800444e:	4313      	orrs	r3, r2
 8004450:	614b      	str	r3, [r1, #20]
 8004452:	e014      	b.n	800447e <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004454:	4b1e      	ldr	r3, [pc, #120]	; (80044d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004456:	695a      	ldr	r2, [r3, #20]
 8004458:	4b20      	ldr	r3, [pc, #128]	; (80044dc <RCCEx_PLLSAI2_Config+0x1dc>)
 800445a:	4013      	ands	r3, r2
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6892      	ldr	r2, [r2, #8]
 8004460:	0211      	lsls	r1, r2, #8
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6952      	ldr	r2, [r2, #20]
 8004466:	0852      	lsrs	r2, r2, #1
 8004468:	3a01      	subs	r2, #1
 800446a:	0652      	lsls	r2, r2, #25
 800446c:	4311      	orrs	r1, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6852      	ldr	r2, [r2, #4]
 8004472:	3a01      	subs	r2, #1
 8004474:	0112      	lsls	r2, r2, #4
 8004476:	430a      	orrs	r2, r1
 8004478:	4915      	ldr	r1, [pc, #84]	; (80044d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800447a:	4313      	orrs	r3, r2
 800447c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800447e:	4b14      	ldr	r3, [pc, #80]	; (80044d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a13      	ldr	r2, [pc, #76]	; (80044d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004488:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448a:	f7fd fd1d 	bl	8001ec8 <HAL_GetTick>
 800448e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004490:	e009      	b.n	80044a6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004492:	f7fd fd19 	bl	8001ec8 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d902      	bls.n	80044a6 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	73fb      	strb	r3, [r7, #15]
          break;
 80044a4:	e005      	b.n	80044b2 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044a6:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0ef      	beq.n	8004492 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d106      	bne.n	80044c6 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044b8:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80044ba:	695a      	ldr	r2, [r3, #20]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	4903      	ldr	r1, [pc, #12]	; (80044d0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40021000 	.word	0x40021000
 80044d4:	07ff800f 	.word	0x07ff800f
 80044d8:	ff9f800f 	.word	0xff9f800f
 80044dc:	f9ff800f 	.word	0xf9ff800f

080044e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e07c      	b.n	80045ec <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d106      	bne.n	8004512 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7fd f943 	bl	8001798 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2202      	movs	r2, #2
 8004516:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004528:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004532:	d902      	bls.n	800453a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004534:	2300      	movs	r3, #0
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	e002      	b.n	8004540 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800453a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800453e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004548:	d007      	beq.n	800455a <HAL_SPI_Init+0x7a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004552:	d002      	beq.n	800455a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10b      	bne.n	800457a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800456a:	d903      	bls.n	8004574 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	631a      	str	r2, [r3, #48]	; 0x30
 8004572:	e002      	b.n	800457a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	ea42 0103 	orr.w	r1, r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	0c1b      	lsrs	r3, r3, #16
 80045ba:	f003 0204 	and.w	r2, r3, #4
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	ea42 0103 	orr.w	r1, r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	430a      	orrs	r2, r1
 80045da:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->State     = HAL_SPI_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint32_t Size, uint32_t Timeout)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_SPI_Transmit+0x20>
 8004610:	2302      	movs	r3, #2
 8004612:	e140      	b.n	8004896 <HAL_SPI_Transmit+0x2a2>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800461c:	f7fd fc54 	bl	8001ec8 <HAL_GetTick>
 8004620:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	617b      	str	r3, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b01      	cmp	r3, #1
 8004630:	d002      	beq.n	8004638 <HAL_SPI_Transmit+0x44>
  {
    errorcode = HAL_BUSY;
 8004632:	2302      	movs	r3, #2
 8004634:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004636:	e125      	b.n	8004884 <HAL_SPI_Transmit+0x290>
  }

  if ((pData == NULL) || (Size == 0U))
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <HAL_SPI_Transmit+0x50>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d102      	bne.n	800464a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004648:	e11c      	b.n	8004884 <HAL_SPI_Transmit+0x290>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2203      	movs	r2, #3
 800464e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	641a      	str	r2, [r3, #64]	; 0x40

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxXferSize  = 0U;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  hspi->RxXferCount = 0U;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  hspi->TxISR       = NULL;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->RxISR       = NULL;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004694:	d107      	bne.n	80046a6 <HAL_SPI_Transmit+0xb2>
  {
    SPI_1LINE_TX(hspi);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b0:	2b40      	cmp	r3, #64	; 0x40
 80046b2:	d007      	beq.n	80046c4 <HAL_SPI_Transmit+0xd0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046cc:	d946      	bls.n	800475c <HAL_SPI_Transmit+0x168>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <HAL_SPI_Transmit+0xe8>
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d13a      	bne.n	8004752 <HAL_SPI_Transmit+0x15e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e0:	881a      	ldrh	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	1c9a      	adds	r2, r3, #2
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	1e5a      	subs	r2, r3, #1
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046fc:	e029      	b.n	8004752 <HAL_SPI_Transmit+0x15e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b02      	cmp	r3, #2
 800470a:	d110      	bne.n	800472e <HAL_SPI_Transmit+0x13a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004710:	881a      	ldrh	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471c:	1c9a      	adds	r2, r3, #2
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	1e5a      	subs	r2, r3, #1
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	641a      	str	r2, [r3, #64]	; 0x40
 800472c:	e011      	b.n	8004752 <HAL_SPI_Transmit+0x15e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800472e:	f7fd fbcb 	bl	8001ec8 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d803      	bhi.n	8004746 <HAL_SPI_Transmit+0x152>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004744:	d102      	bne.n	800474c <HAL_SPI_Transmit+0x158>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d102      	bne.n	8004752 <HAL_SPI_Transmit+0x15e>
        {
          errorcode = HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004750:	e098      	b.n	8004884 <HAL_SPI_Transmit+0x290>
    while (hspi->TxXferCount > 0U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1d1      	bne.n	80046fe <HAL_SPI_Transmit+0x10a>
 800475a:	e071      	b.n	8004840 <HAL_SPI_Transmit+0x24c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d002      	beq.n	800476a <HAL_SPI_Transmit+0x176>
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d166      	bne.n	8004838 <HAL_SPI_Transmit+0x244>
    {
      if (hspi->TxXferCount > 1U)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	2b01      	cmp	r3, #1
 8004770:	d910      	bls.n	8004794 <HAL_SPI_Transmit+0x1a0>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004776:	881a      	ldrh	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	1c9a      	adds	r2, r3, #2
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	1e9a      	subs	r2, r3, #2
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	641a      	str	r2, [r3, #64]	; 0x40
 8004792:	e051      	b.n	8004838 <HAL_SPI_Transmit+0x244>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	330c      	adds	r3, #12
 800479e:	7812      	ldrb	r2, [r2, #0]
 80047a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	1e5a      	subs	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    while (hspi->TxXferCount > 0U)
 80047b6:	e03f      	b.n	8004838 <HAL_SPI_Transmit+0x244>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d126      	bne.n	8004814 <HAL_SPI_Transmit+0x220>
      {
        if (hspi->TxXferCount > 1U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d910      	bls.n	80047f0 <HAL_SPI_Transmit+0x1fc>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	881a      	ldrh	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	1c9a      	adds	r2, r3, #2
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	1e9a      	subs	r2, r3, #2
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	641a      	str	r2, [r3, #64]	; 0x40
 80047ee:	e023      	b.n	8004838 <HAL_SPI_Transmit+0x244>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	330c      	adds	r3, #12
 80047fa:	7812      	ldrb	r2, [r2, #0]
 80047fc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	1e5a      	subs	r2, r3, #1
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	641a      	str	r2, [r3, #64]	; 0x40
 8004812:	e011      	b.n	8004838 <HAL_SPI_Transmit+0x244>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004814:	f7fd fb58 	bl	8001ec8 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	d803      	bhi.n	800482c <HAL_SPI_Transmit+0x238>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482a:	d102      	bne.n	8004832 <HAL_SPI_Transmit+0x23e>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d102      	bne.n	8004838 <HAL_SPI_Transmit+0x244>
        {
          errorcode = HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004836:	e025      	b.n	8004884 <HAL_SPI_Transmit+0x290>
    while (hspi->TxXferCount > 0U)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1bb      	bne.n	80047b8 <HAL_SPI_Transmit+0x1c4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	6839      	ldr	r1, [r7, #0]
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 fc21 	bl	800508c <SPI_EndRxTxTransaction>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <HAL_SPI_Transmit+0x262>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10a      	bne.n	8004874 <HAL_SPI_Transmit+0x280>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800485e:	2300      	movs	r3, #0
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	613b      	str	r3, [r7, #16]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	613b      	str	r3, [r7, #16]
 8004872:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <HAL_SPI_Transmit+0x28e>
  {
    errorcode = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	77fb      	strb	r3, [r7, #31]
 8004880:	e000      	b.n	8004884 <HAL_SPI_Transmit+0x290>
  }

error:
 8004882:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return errorcode;
 8004894:	7ffb      	ldrb	r3, [r7, #31]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3720      	adds	r7, #32
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b08a      	sub	sp, #40	; 0x28
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	60f8      	str	r0, [r7, #12]
 80048a6:	60b9      	str	r1, [r7, #8]
 80048a8:	607a      	str	r2, [r7, #4]
 80048aa:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80048ac:	2301      	movs	r3, #1
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_SPI_TransmitReceive+0x26>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e1e9      	b.n	8004c98 <HAL_SPI_TransmitReceive+0x3fa>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048cc:	f7fd fafc 	bl	8001ec8 <HAL_GetTick>
 80048d0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80048d8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80048e0:	887b      	ldrh	r3, [r7, #2]
 80048e2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80048e4:	887b      	ldrh	r3, [r7, #2]
 80048e6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80048e8:	7efb      	ldrb	r3, [r7, #27]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d00e      	beq.n	800490c <HAL_SPI_TransmitReceive+0x6e>
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048f4:	d106      	bne.n	8004904 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d102      	bne.n	8004904 <HAL_SPI_TransmitReceive+0x66>
 80048fe:	7efb      	ldrb	r3, [r7, #27]
 8004900:	2b04      	cmp	r3, #4
 8004902:	d003      	beq.n	800490c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004904:	2302      	movs	r3, #2
 8004906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800490a:	e1bb      	b.n	8004c84 <HAL_SPI_TransmitReceive+0x3e6>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d005      	beq.n	800491e <HAL_SPI_TransmitReceive+0x80>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <HAL_SPI_TransmitReceive+0x80>
 8004918:	887b      	ldrh	r3, [r7, #2]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d103      	bne.n	8004926 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004924:	e1ae      	b.n	8004c84 <HAL_SPI_TransmitReceive+0x3e6>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b04      	cmp	r3, #4
 8004930:	d003      	beq.n	800493a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2205      	movs	r2, #5
 8004936:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	887a      	ldrh	r2, [r7, #2]
 800494a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  hspi->RxXferSize  = Size;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	887a      	ldrh	r2, [r7, #2]
 8004952:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800495c:	887a      	ldrh	r2, [r7, #2]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxXferSize  = Size;
 8004962:	887a      	ldrh	r2, [r7, #2]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	63da      	str	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxISR       = NULL;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	655a      	str	r2, [r3, #84]	; 0x54
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800497c:	d802      	bhi.n	8004984 <HAL_SPI_TransmitReceive+0xe6>
 800497e:	8a3b      	ldrh	r3, [r7, #16]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d908      	bls.n	8004996 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004992:	605a      	str	r2, [r3, #4]
 8004994:	e007      	b.n	80049a6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049a4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b0:	2b40      	cmp	r3, #64	; 0x40
 80049b2:	d007      	beq.n	80049c4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049cc:	d976      	bls.n	8004abc <HAL_SPI_TransmitReceive+0x21e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <HAL_SPI_TransmitReceive+0x13e>
 80049d6:	8a7b      	ldrh	r3, [r7, #18]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d164      	bne.n	8004aa6 <HAL_SPI_TransmitReceive+0x208>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	881a      	ldrh	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	1c9a      	adds	r2, r3, #2
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	1e5a      	subs	r2, r3, #1
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049fc:	e053      	b.n	8004aa6 <HAL_SPI_TransmitReceive+0x208>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d118      	bne.n	8004a3e <HAL_SPI_TransmitReceive+0x1a0>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d014      	beq.n	8004a3e <HAL_SPI_TransmitReceive+0x1a0>
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d111      	bne.n	8004a3e <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1e:	881a      	ldrh	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	1c9a      	adds	r2, r3, #2
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	1e5a      	subs	r2, r3, #1
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	641a      	str	r2, [r3, #64]	; 0x40
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d11c      	bne.n	8004a86 <HAL_SPI_TransmitReceive+0x1e8>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d016      	beq.n	8004a86 <HAL_SPI_TransmitReceive+0x1e8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a62:	b292      	uxth	r2, r2
 8004a64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6a:	1c9a      	adds	r2, r3, #2
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	645a      	str	r2, [r3, #68]	; 0x44
        hspi->RxXferCount--;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a82:	2301      	movs	r3, #1
 8004a84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a86:	f7fd fa1f 	bl	8001ec8 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d807      	bhi.n	8004aa6 <HAL_SPI_TransmitReceive+0x208>
 8004a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9c:	d003      	beq.n	8004aa6 <HAL_SPI_TransmitReceive+0x208>
      {
        errorcode = HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004aa4:	e0ee      	b.n	8004c84 <HAL_SPI_TransmitReceive+0x3e6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1a7      	bne.n	80049fe <HAL_SPI_TransmitReceive+0x160>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1a1      	bne.n	80049fe <HAL_SPI_TransmitReceive+0x160>
 8004aba:	e0d3      	b.n	8004c64 <HAL_SPI_TransmitReceive+0x3c6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <HAL_SPI_TransmitReceive+0x22e>
 8004ac4:	8a7b      	ldrh	r3, [r7, #18]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	f040 80c0 	bne.w	8004c4c <HAL_SPI_TransmitReceive+0x3ae>
    {
      if (hspi->TxXferCount > 1U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d910      	bls.n	8004af6 <HAL_SPI_TransmitReceive+0x258>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad8:	881a      	ldrh	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	1c9a      	adds	r2, r3, #2
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	1e9a      	subs	r2, r3, #2
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	641a      	str	r2, [r3, #64]	; 0x40
 8004af4:	e0aa      	b.n	8004c4c <HAL_SPI_TransmitReceive+0x3ae>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	330c      	adds	r3, #12
 8004b00:	7812      	ldrb	r2, [r2, #0]
 8004b02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	1e5a      	subs	r2, r3, #1
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b18:	e098      	b.n	8004c4c <HAL_SPI_TransmitReceive+0x3ae>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d12e      	bne.n	8004b86 <HAL_SPI_TransmitReceive+0x2e8>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d02a      	beq.n	8004b86 <HAL_SPI_TransmitReceive+0x2e8>
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d127      	bne.n	8004b86 <HAL_SPI_TransmitReceive+0x2e8>
      {
        if (hspi->TxXferCount > 1U)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d910      	bls.n	8004b60 <HAL_SPI_TransmitReceive+0x2c2>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	881a      	ldrh	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4e:	1c9a      	adds	r2, r3, #2
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	1e9a      	subs	r2, r3, #2
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	641a      	str	r2, [r3, #64]	; 0x40
 8004b5e:	e010      	b.n	8004b82 <HAL_SPI_TransmitReceive+0x2e4>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	330c      	adds	r3, #12
 8004b6a:	7812      	ldrb	r2, [r2, #0]
 8004b6c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	1e5a      	subs	r2, r3, #1
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	641a      	str	r2, [r3, #64]	; 0x40
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d148      	bne.n	8004c26 <HAL_SPI_TransmitReceive+0x388>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d042      	beq.n	8004c26 <HAL_SPI_TransmitReceive+0x388>
      {
        if (hspi->RxXferCount > 1U)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d923      	bls.n	8004bf4 <HAL_SPI_TransmitReceive+0x356>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb6:	b292      	uxth	r2, r2
 8004bb8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbe:	1c9a      	adds	r2, r3, #2
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	645a      	str	r2, [r3, #68]	; 0x44
          hspi->RxXferCount -= 2U;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b02      	subs	r3, #2
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (hspi->RxXferCount <= 1U)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d81f      	bhi.n	8004c22 <HAL_SPI_TransmitReceive+0x384>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bf0:	605a      	str	r2, [r3, #4]
 8004bf2:	e016      	b.n	8004c22 <HAL_SPI_TransmitReceive+0x384>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f103 020c 	add.w	r2, r3, #12
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c00:	7812      	ldrb	r2, [r2, #0]
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	645a      	str	r2, [r3, #68]	; 0x44
          hspi->RxXferCount--;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c22:	2301      	movs	r3, #1
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c26:	f7fd f94f 	bl	8001ec8 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d803      	bhi.n	8004c3e <HAL_SPI_TransmitReceive+0x3a0>
 8004c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3c:	d102      	bne.n	8004c44 <HAL_SPI_TransmitReceive+0x3a6>
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d103      	bne.n	8004c4c <HAL_SPI_TransmitReceive+0x3ae>
      {
        errorcode = HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004c4a:	e01b      	b.n	8004c84 <HAL_SPI_TransmitReceive+0x3e6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f47f af62 	bne.w	8004b1a <HAL_SPI_TransmitReceive+0x27c>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f47f af5b 	bne.w	8004b1a <HAL_SPI_TransmitReceive+0x27c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c64:	69fa      	ldr	r2, [r7, #28]
 8004c66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 fa0f 	bl	800508c <SPI_EndRxTxTransaction>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d006      	beq.n	8004c82 <HAL_SPI_TransmitReceive+0x3e4>
  {
    errorcode = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	665a      	str	r2, [r3, #100]	; 0x64
 8004c80:	e000      	b.n	8004c84 <HAL_SPI_TransmitReceive+0x3e6>
  }

error :
 8004c82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_UNLOCK(hspi);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return errorcode;
 8004c94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3728      	adds	r7, #40	; 0x28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	099b      	lsrs	r3, r3, #6
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10f      	bne.n	8004ce4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	099b      	lsrs	r3, r3, #6
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d004      	beq.n	8004ce4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	4798      	blx	r3
    return;
 8004ce2:	e0d8      	b.n	8004e96 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	085b      	lsrs	r3, r3, #1
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <HAL_SPI_IRQHandler+0x66>
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	09db      	lsrs	r3, r3, #7
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d004      	beq.n	8004d06 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	4798      	blx	r3
    return;
 8004d04:	e0c7      	b.n	8004e96 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10c      	bne.n	8004d2c <HAL_SPI_IRQHandler+0x8c>
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	099b      	lsrs	r3, r3, #6
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d106      	bne.n	8004d2c <HAL_SPI_IRQHandler+0x8c>
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	0a1b      	lsrs	r3, r3, #8
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 80b5 	beq.w	8004e96 <HAL_SPI_IRQHandler+0x1f6>
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	095b      	lsrs	r3, r3, #5
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 80ae 	beq.w	8004e96 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	099b      	lsrs	r3, r3, #6
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d023      	beq.n	8004d8e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d011      	beq.n	8004d76 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d56:	f043 0204 	orr.w	r2, r3, #4
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	665a      	str	r2, [r3, #100]	; 0x64
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	e00b      	b.n	8004d8e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d76:	2300      	movs	r3, #0
 8004d78:	613b      	str	r3, [r7, #16]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	613b      	str	r3, [r7, #16]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	613b      	str	r3, [r7, #16]
 8004d8a:	693b      	ldr	r3, [r7, #16]
        return;
 8004d8c:	e083      	b.n	8004e96 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	095b      	lsrs	r3, r3, #5
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d014      	beq.n	8004dc4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d9e:	f043 0201 	orr.w	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	665a      	str	r2, [r3, #100]	; 0x64
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	0a1b      	lsrs	r3, r3, #8
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00c      	beq.n	8004dea <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dd4:	f043 0208 	orr.w	r2, r3, #8
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	665a      	str	r2, [r3, #100]	; 0x64
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004ddc:	2300      	movs	r3, #0
 8004dde:	60bb      	str	r3, [r7, #8]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	60bb      	str	r3, [r7, #8]
 8004de8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d050      	beq.n	8004e94 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e00:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d104      	bne.n	8004e1e <HAL_SPI_IRQHandler+0x17e>
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d034      	beq.n	8004e88 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0203 	bic.w	r2, r2, #3
 8004e2c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d011      	beq.n	8004e5a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e3a:	4a18      	ldr	r2, [pc, #96]	; (8004e9c <HAL_SPI_IRQHandler+0x1fc>)
 8004e3c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7fd fa28 	bl	8002298 <HAL_DMA_Abort_IT>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d005      	beq.n	8004e5a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	665a      	str	r2, [r3, #100]	; 0x64
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d016      	beq.n	8004e90 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e66:	4a0d      	ldr	r2, [pc, #52]	; (8004e9c <HAL_SPI_IRQHandler+0x1fc>)
 8004e68:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fd fa12 	bl	8002298 <HAL_DMA_Abort_IT>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	665a      	str	r2, [r3, #100]	; 0x64
        if (hspi->hdmatx != NULL)
 8004e86:	e003      	b.n	8004e90 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f809 	bl	8004ea0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004e8e:	e000      	b.n	8004e92 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004e90:	bf00      	nop
    return;
 8004e92:	bf00      	nop
 8004e94:	bf00      	nop
  }
}
 8004e96:	3720      	adds	r7, #32
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	08004eb5 	.word	0x08004eb5

08004ea0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  hspi->TxXferCount = 0U;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	641a      	str	r2, [r3, #64]	; 0x40

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f7ff ffe5 	bl	8004ea0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ed6:	bf00      	nop
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	603b      	str	r3, [r7, #0]
 8004eea:	4613      	mov	r3, r2
 8004eec:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eee:	e04c      	b.n	8004f8a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef6:	d048      	beq.n	8004f8a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004ef8:	f7fc ffe6 	bl	8001ec8 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d902      	bls.n	8004f0e <SPI_WaitFlagStateUntilTimeout+0x30>
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d13d      	bne.n	8004f8a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f26:	d111      	bne.n	8004f4c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f30:	d004      	beq.n	8004f3c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f3a:	d107      	bne.n	8004f4c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f54:	d10f      	bne.n	8004f76 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e00f      	b.n	8004faa <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	4013      	ands	r3, r2
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	bf0c      	ite	eq
 8004f9a:	2301      	moveq	r3, #1
 8004f9c:	2300      	movne	r3, #0
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	79fb      	ldrb	r3, [r7, #7]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d1a3      	bne.n	8004ef0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	607a      	str	r2, [r7, #4]
 8004fbe:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004fc0:	e057      	b.n	8005072 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004fc8:	d106      	bne.n	8004fd8 <SPI_WaitFifoStateUntilTimeout+0x26>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d103      	bne.n	8004fd8 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	330c      	adds	r3, #12
 8004fd6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fde:	d048      	beq.n	8005072 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004fe0:	f7fc ff72 	bl	8001ec8 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d902      	bls.n	8004ff6 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d13d      	bne.n	8005072 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005004:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800500e:	d111      	bne.n	8005034 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005018:	d004      	beq.n	8005024 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005022:	d107      	bne.n	8005034 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005032:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800503c:	d10f      	bne.n	800505e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800505c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e008      	b.n	8005084 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	4013      	ands	r3, r2
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	429a      	cmp	r2, r3
 8005080:	d19f      	bne.n	8004fc2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af02      	add	r7, sp, #8
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2200      	movs	r2, #0
 80050a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f7ff ff84 	bl	8004fb2 <SPI_WaitFifoStateUntilTimeout>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d007      	beq.n	80050c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050b4:	f043 0220 	orr.w	r2, r3, #32
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	665a      	str	r2, [r3, #100]	; 0x64
    return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e027      	b.n	8005110 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2200      	movs	r2, #0
 80050c8:	2180      	movs	r1, #128	; 0x80
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f7ff ff07 	bl	8004ede <SPI_WaitFlagStateUntilTimeout>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d007      	beq.n	80050e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050da:	f043 0220 	orr.w	r2, r3, #32
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	665a      	str	r2, [r3, #100]	; 0x64
    return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e014      	b.n	8005110 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f7ff ff5d 	bl	8004fb2 <SPI_WaitFifoStateUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d007      	beq.n	800510e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005102:	f043 0220 	orr.w	r2, r3, #32
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	665a      	str	r2, [r3, #100]	; 0x64
    return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e000      	b.n	8005110 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e042      	b.n	80051b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005130:	2b00      	cmp	r3, #0
 8005132:	d106      	bne.n	8005142 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7fc fccb 	bl	8001ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2224      	movs	r2, #36	; 0x24
 8005146:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0201 	bic.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f82c 	bl	80051b8 <UART_SetConfig>
 8005160:	4603      	mov	r3, r0
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e022      	b.n	80051b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f001 f9e0 	bl	8006538 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005196:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f001 fa67 	bl	800667c <UART_CheckIdleState>
 80051ae:	4603      	mov	r3, r0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051b8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80051bc:	b088      	sub	sp, #32
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	431a      	orrs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	4bac      	ldr	r3, [pc, #688]	; (80054a8 <UART_SetConfig+0x2f0>)
 80051f8:	4013      	ands	r3, r2
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	6812      	ldr	r2, [r2, #0]
 80051fe:	69f9      	ldr	r1, [r7, #28]
 8005200:	430b      	orrs	r3, r1
 8005202:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4aa1      	ldr	r2, [pc, #644]	; (80054ac <UART_SetConfig+0x2f4>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d004      	beq.n	8005234 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	4313      	orrs	r3, r2
 8005232:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800523e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6812      	ldr	r2, [r2, #0]
 8005246:	69f9      	ldr	r1, [r7, #28]
 8005248:	430b      	orrs	r3, r1
 800524a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005252:	f023 010f 	bic.w	r1, r3, #15
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a92      	ldr	r2, [pc, #584]	; (80054b0 <UART_SetConfig+0x2f8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d121      	bne.n	80052b0 <UART_SetConfig+0xf8>
 800526c:	4b91      	ldr	r3, [pc, #580]	; (80054b4 <UART_SetConfig+0x2fc>)
 800526e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	2b03      	cmp	r3, #3
 8005278:	d816      	bhi.n	80052a8 <UART_SetConfig+0xf0>
 800527a:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <UART_SetConfig+0xc8>)
 800527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005280:	08005291 	.word	0x08005291
 8005284:	0800529d 	.word	0x0800529d
 8005288:	08005297 	.word	0x08005297
 800528c:	080052a3 	.word	0x080052a3
 8005290:	2301      	movs	r3, #1
 8005292:	76fb      	strb	r3, [r7, #27]
 8005294:	e0e8      	b.n	8005468 <UART_SetConfig+0x2b0>
 8005296:	2302      	movs	r3, #2
 8005298:	76fb      	strb	r3, [r7, #27]
 800529a:	e0e5      	b.n	8005468 <UART_SetConfig+0x2b0>
 800529c:	2304      	movs	r3, #4
 800529e:	76fb      	strb	r3, [r7, #27]
 80052a0:	e0e2      	b.n	8005468 <UART_SetConfig+0x2b0>
 80052a2:	2308      	movs	r3, #8
 80052a4:	76fb      	strb	r3, [r7, #27]
 80052a6:	e0df      	b.n	8005468 <UART_SetConfig+0x2b0>
 80052a8:	2310      	movs	r3, #16
 80052aa:	76fb      	strb	r3, [r7, #27]
 80052ac:	bf00      	nop
 80052ae:	e0db      	b.n	8005468 <UART_SetConfig+0x2b0>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a80      	ldr	r2, [pc, #512]	; (80054b8 <UART_SetConfig+0x300>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d134      	bne.n	8005324 <UART_SetConfig+0x16c>
 80052ba:	4b7e      	ldr	r3, [pc, #504]	; (80054b4 <UART_SetConfig+0x2fc>)
 80052bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c0:	f003 030c 	and.w	r3, r3, #12
 80052c4:	2b0c      	cmp	r3, #12
 80052c6:	d829      	bhi.n	800531c <UART_SetConfig+0x164>
 80052c8:	a201      	add	r2, pc, #4	; (adr r2, 80052d0 <UART_SetConfig+0x118>)
 80052ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ce:	bf00      	nop
 80052d0:	08005305 	.word	0x08005305
 80052d4:	0800531d 	.word	0x0800531d
 80052d8:	0800531d 	.word	0x0800531d
 80052dc:	0800531d 	.word	0x0800531d
 80052e0:	08005311 	.word	0x08005311
 80052e4:	0800531d 	.word	0x0800531d
 80052e8:	0800531d 	.word	0x0800531d
 80052ec:	0800531d 	.word	0x0800531d
 80052f0:	0800530b 	.word	0x0800530b
 80052f4:	0800531d 	.word	0x0800531d
 80052f8:	0800531d 	.word	0x0800531d
 80052fc:	0800531d 	.word	0x0800531d
 8005300:	08005317 	.word	0x08005317
 8005304:	2300      	movs	r3, #0
 8005306:	76fb      	strb	r3, [r7, #27]
 8005308:	e0ae      	b.n	8005468 <UART_SetConfig+0x2b0>
 800530a:	2302      	movs	r3, #2
 800530c:	76fb      	strb	r3, [r7, #27]
 800530e:	e0ab      	b.n	8005468 <UART_SetConfig+0x2b0>
 8005310:	2304      	movs	r3, #4
 8005312:	76fb      	strb	r3, [r7, #27]
 8005314:	e0a8      	b.n	8005468 <UART_SetConfig+0x2b0>
 8005316:	2308      	movs	r3, #8
 8005318:	76fb      	strb	r3, [r7, #27]
 800531a:	e0a5      	b.n	8005468 <UART_SetConfig+0x2b0>
 800531c:	2310      	movs	r3, #16
 800531e:	76fb      	strb	r3, [r7, #27]
 8005320:	bf00      	nop
 8005322:	e0a1      	b.n	8005468 <UART_SetConfig+0x2b0>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a64      	ldr	r2, [pc, #400]	; (80054bc <UART_SetConfig+0x304>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d120      	bne.n	8005370 <UART_SetConfig+0x1b8>
 800532e:	4b61      	ldr	r3, [pc, #388]	; (80054b4 <UART_SetConfig+0x2fc>)
 8005330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005334:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005338:	2b10      	cmp	r3, #16
 800533a:	d00f      	beq.n	800535c <UART_SetConfig+0x1a4>
 800533c:	2b10      	cmp	r3, #16
 800533e:	d802      	bhi.n	8005346 <UART_SetConfig+0x18e>
 8005340:	2b00      	cmp	r3, #0
 8005342:	d005      	beq.n	8005350 <UART_SetConfig+0x198>
 8005344:	e010      	b.n	8005368 <UART_SetConfig+0x1b0>
 8005346:	2b20      	cmp	r3, #32
 8005348:	d005      	beq.n	8005356 <UART_SetConfig+0x19e>
 800534a:	2b30      	cmp	r3, #48	; 0x30
 800534c:	d009      	beq.n	8005362 <UART_SetConfig+0x1aa>
 800534e:	e00b      	b.n	8005368 <UART_SetConfig+0x1b0>
 8005350:	2300      	movs	r3, #0
 8005352:	76fb      	strb	r3, [r7, #27]
 8005354:	e088      	b.n	8005468 <UART_SetConfig+0x2b0>
 8005356:	2302      	movs	r3, #2
 8005358:	76fb      	strb	r3, [r7, #27]
 800535a:	e085      	b.n	8005468 <UART_SetConfig+0x2b0>
 800535c:	2304      	movs	r3, #4
 800535e:	76fb      	strb	r3, [r7, #27]
 8005360:	e082      	b.n	8005468 <UART_SetConfig+0x2b0>
 8005362:	2308      	movs	r3, #8
 8005364:	76fb      	strb	r3, [r7, #27]
 8005366:	e07f      	b.n	8005468 <UART_SetConfig+0x2b0>
 8005368:	2310      	movs	r3, #16
 800536a:	76fb      	strb	r3, [r7, #27]
 800536c:	bf00      	nop
 800536e:	e07b      	b.n	8005468 <UART_SetConfig+0x2b0>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a52      	ldr	r2, [pc, #328]	; (80054c0 <UART_SetConfig+0x308>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d120      	bne.n	80053bc <UART_SetConfig+0x204>
 800537a:	4b4e      	ldr	r3, [pc, #312]	; (80054b4 <UART_SetConfig+0x2fc>)
 800537c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005380:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005384:	2b40      	cmp	r3, #64	; 0x40
 8005386:	d00f      	beq.n	80053a8 <UART_SetConfig+0x1f0>
 8005388:	2b40      	cmp	r3, #64	; 0x40
 800538a:	d802      	bhi.n	8005392 <UART_SetConfig+0x1da>
 800538c:	2b00      	cmp	r3, #0
 800538e:	d005      	beq.n	800539c <UART_SetConfig+0x1e4>
 8005390:	e010      	b.n	80053b4 <UART_SetConfig+0x1fc>
 8005392:	2b80      	cmp	r3, #128	; 0x80
 8005394:	d005      	beq.n	80053a2 <UART_SetConfig+0x1ea>
 8005396:	2bc0      	cmp	r3, #192	; 0xc0
 8005398:	d009      	beq.n	80053ae <UART_SetConfig+0x1f6>
 800539a:	e00b      	b.n	80053b4 <UART_SetConfig+0x1fc>
 800539c:	2300      	movs	r3, #0
 800539e:	76fb      	strb	r3, [r7, #27]
 80053a0:	e062      	b.n	8005468 <UART_SetConfig+0x2b0>
 80053a2:	2302      	movs	r3, #2
 80053a4:	76fb      	strb	r3, [r7, #27]
 80053a6:	e05f      	b.n	8005468 <UART_SetConfig+0x2b0>
 80053a8:	2304      	movs	r3, #4
 80053aa:	76fb      	strb	r3, [r7, #27]
 80053ac:	e05c      	b.n	8005468 <UART_SetConfig+0x2b0>
 80053ae:	2308      	movs	r3, #8
 80053b0:	76fb      	strb	r3, [r7, #27]
 80053b2:	e059      	b.n	8005468 <UART_SetConfig+0x2b0>
 80053b4:	2310      	movs	r3, #16
 80053b6:	76fb      	strb	r3, [r7, #27]
 80053b8:	bf00      	nop
 80053ba:	e055      	b.n	8005468 <UART_SetConfig+0x2b0>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a40      	ldr	r2, [pc, #256]	; (80054c4 <UART_SetConfig+0x30c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d124      	bne.n	8005410 <UART_SetConfig+0x258>
 80053c6:	4b3b      	ldr	r3, [pc, #236]	; (80054b4 <UART_SetConfig+0x2fc>)
 80053c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053d4:	d012      	beq.n	80053fc <UART_SetConfig+0x244>
 80053d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053da:	d802      	bhi.n	80053e2 <UART_SetConfig+0x22a>
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d007      	beq.n	80053f0 <UART_SetConfig+0x238>
 80053e0:	e012      	b.n	8005408 <UART_SetConfig+0x250>
 80053e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e6:	d006      	beq.n	80053f6 <UART_SetConfig+0x23e>
 80053e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053ec:	d009      	beq.n	8005402 <UART_SetConfig+0x24a>
 80053ee:	e00b      	b.n	8005408 <UART_SetConfig+0x250>
 80053f0:	2300      	movs	r3, #0
 80053f2:	76fb      	strb	r3, [r7, #27]
 80053f4:	e038      	b.n	8005468 <UART_SetConfig+0x2b0>
 80053f6:	2302      	movs	r3, #2
 80053f8:	76fb      	strb	r3, [r7, #27]
 80053fa:	e035      	b.n	8005468 <UART_SetConfig+0x2b0>
 80053fc:	2304      	movs	r3, #4
 80053fe:	76fb      	strb	r3, [r7, #27]
 8005400:	e032      	b.n	8005468 <UART_SetConfig+0x2b0>
 8005402:	2308      	movs	r3, #8
 8005404:	76fb      	strb	r3, [r7, #27]
 8005406:	e02f      	b.n	8005468 <UART_SetConfig+0x2b0>
 8005408:	2310      	movs	r3, #16
 800540a:	76fb      	strb	r3, [r7, #27]
 800540c:	bf00      	nop
 800540e:	e02b      	b.n	8005468 <UART_SetConfig+0x2b0>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a25      	ldr	r2, [pc, #148]	; (80054ac <UART_SetConfig+0x2f4>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d124      	bne.n	8005464 <UART_SetConfig+0x2ac>
 800541a:	4b26      	ldr	r3, [pc, #152]	; (80054b4 <UART_SetConfig+0x2fc>)
 800541c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005420:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005428:	d012      	beq.n	8005450 <UART_SetConfig+0x298>
 800542a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800542e:	d802      	bhi.n	8005436 <UART_SetConfig+0x27e>
 8005430:	2b00      	cmp	r3, #0
 8005432:	d007      	beq.n	8005444 <UART_SetConfig+0x28c>
 8005434:	e012      	b.n	800545c <UART_SetConfig+0x2a4>
 8005436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800543a:	d006      	beq.n	800544a <UART_SetConfig+0x292>
 800543c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005440:	d009      	beq.n	8005456 <UART_SetConfig+0x29e>
 8005442:	e00b      	b.n	800545c <UART_SetConfig+0x2a4>
 8005444:	2300      	movs	r3, #0
 8005446:	76fb      	strb	r3, [r7, #27]
 8005448:	e00e      	b.n	8005468 <UART_SetConfig+0x2b0>
 800544a:	2302      	movs	r3, #2
 800544c:	76fb      	strb	r3, [r7, #27]
 800544e:	e00b      	b.n	8005468 <UART_SetConfig+0x2b0>
 8005450:	2304      	movs	r3, #4
 8005452:	76fb      	strb	r3, [r7, #27]
 8005454:	e008      	b.n	8005468 <UART_SetConfig+0x2b0>
 8005456:	2308      	movs	r3, #8
 8005458:	76fb      	strb	r3, [r7, #27]
 800545a:	e005      	b.n	8005468 <UART_SetConfig+0x2b0>
 800545c:	2310      	movs	r3, #16
 800545e:	76fb      	strb	r3, [r7, #27]
 8005460:	bf00      	nop
 8005462:	e001      	b.n	8005468 <UART_SetConfig+0x2b0>
 8005464:	2310      	movs	r3, #16
 8005466:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a0f      	ldr	r2, [pc, #60]	; (80054ac <UART_SetConfig+0x2f4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	f040 842d 	bne.w	8005cce <UART_SetConfig+0xb16>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005474:	7efb      	ldrb	r3, [r7, #27]
 8005476:	2b08      	cmp	r3, #8
 8005478:	f200 816b 	bhi.w	8005752 <UART_SetConfig+0x59a>
 800547c:	a201      	add	r2, pc, #4	; (adr r2, 8005484 <UART_SetConfig+0x2cc>)
 800547e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005482:	bf00      	nop
 8005484:	080054c9 	.word	0x080054c9
 8005488:	08005753 	.word	0x08005753
 800548c:	0800556b 	.word	0x0800556b
 8005490:	08005753 	.word	0x08005753
 8005494:	08005603 	.word	0x08005603
 8005498:	08005753 	.word	0x08005753
 800549c:	08005753 	.word	0x08005753
 80054a0:	08005753 	.word	0x08005753
 80054a4:	080056a5 	.word	0x080056a5
 80054a8:	cfff69f3 	.word	0xcfff69f3
 80054ac:	40008000 	.word	0x40008000
 80054b0:	40013800 	.word	0x40013800
 80054b4:	40021000 	.word	0x40021000
 80054b8:	40004400 	.word	0x40004400
 80054bc:	40004800 	.word	0x40004800
 80054c0:	40004c00 	.word	0x40004c00
 80054c4:	40005000 	.word	0x40005000
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80054c8:	f7fe fa04 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 80054cc:	4602      	mov	r2, r0
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d044      	beq.n	8005560 <UART_SetConfig+0x3a8>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d03e      	beq.n	800555c <UART_SetConfig+0x3a4>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d038      	beq.n	8005558 <UART_SetConfig+0x3a0>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d032      	beq.n	8005554 <UART_SetConfig+0x39c>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d02c      	beq.n	8005550 <UART_SetConfig+0x398>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	2b05      	cmp	r3, #5
 80054fc:	d026      	beq.n	800554c <UART_SetConfig+0x394>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	2b06      	cmp	r3, #6
 8005504:	d020      	beq.n	8005548 <UART_SetConfig+0x390>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	2b07      	cmp	r3, #7
 800550c:	d01a      	beq.n	8005544 <UART_SetConfig+0x38c>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	2b08      	cmp	r3, #8
 8005514:	d014      	beq.n	8005540 <UART_SetConfig+0x388>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	2b09      	cmp	r3, #9
 800551c:	d00e      	beq.n	800553c <UART_SetConfig+0x384>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005522:	2b0a      	cmp	r3, #10
 8005524:	d008      	beq.n	8005538 <UART_SetConfig+0x380>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	2b0b      	cmp	r3, #11
 800552c:	d102      	bne.n	8005534 <UART_SetConfig+0x37c>
 800552e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005532:	e016      	b.n	8005562 <UART_SetConfig+0x3aa>
 8005534:	2301      	movs	r3, #1
 8005536:	e014      	b.n	8005562 <UART_SetConfig+0x3aa>
 8005538:	2380      	movs	r3, #128	; 0x80
 800553a:	e012      	b.n	8005562 <UART_SetConfig+0x3aa>
 800553c:	2340      	movs	r3, #64	; 0x40
 800553e:	e010      	b.n	8005562 <UART_SetConfig+0x3aa>
 8005540:	2320      	movs	r3, #32
 8005542:	e00e      	b.n	8005562 <UART_SetConfig+0x3aa>
 8005544:	2310      	movs	r3, #16
 8005546:	e00c      	b.n	8005562 <UART_SetConfig+0x3aa>
 8005548:	230c      	movs	r3, #12
 800554a:	e00a      	b.n	8005562 <UART_SetConfig+0x3aa>
 800554c:	230a      	movs	r3, #10
 800554e:	e008      	b.n	8005562 <UART_SetConfig+0x3aa>
 8005550:	2308      	movs	r3, #8
 8005552:	e006      	b.n	8005562 <UART_SetConfig+0x3aa>
 8005554:	2306      	movs	r3, #6
 8005556:	e004      	b.n	8005562 <UART_SetConfig+0x3aa>
 8005558:	2304      	movs	r3, #4
 800555a:	e002      	b.n	8005562 <UART_SetConfig+0x3aa>
 800555c:	2302      	movs	r3, #2
 800555e:	e000      	b.n	8005562 <UART_SetConfig+0x3aa>
 8005560:	2301      	movs	r3, #1
 8005562:	fbb2 f3f3 	udiv	r3, r2, r3
 8005566:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8005568:	e0f6      	b.n	8005758 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	2b00      	cmp	r3, #0
 8005570:	d044      	beq.n	80055fc <UART_SetConfig+0x444>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	2b01      	cmp	r3, #1
 8005578:	d03e      	beq.n	80055f8 <UART_SetConfig+0x440>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	2b02      	cmp	r3, #2
 8005580:	d038      	beq.n	80055f4 <UART_SetConfig+0x43c>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	2b03      	cmp	r3, #3
 8005588:	d032      	beq.n	80055f0 <UART_SetConfig+0x438>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	2b04      	cmp	r3, #4
 8005590:	d02c      	beq.n	80055ec <UART_SetConfig+0x434>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	2b05      	cmp	r3, #5
 8005598:	d026      	beq.n	80055e8 <UART_SetConfig+0x430>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	2b06      	cmp	r3, #6
 80055a0:	d020      	beq.n	80055e4 <UART_SetConfig+0x42c>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	2b07      	cmp	r3, #7
 80055a8:	d01a      	beq.n	80055e0 <UART_SetConfig+0x428>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	2b08      	cmp	r3, #8
 80055b0:	d014      	beq.n	80055dc <UART_SetConfig+0x424>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	2b09      	cmp	r3, #9
 80055b8:	d00e      	beq.n	80055d8 <UART_SetConfig+0x420>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	2b0a      	cmp	r3, #10
 80055c0:	d008      	beq.n	80055d4 <UART_SetConfig+0x41c>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	2b0b      	cmp	r3, #11
 80055c8:	d102      	bne.n	80055d0 <UART_SetConfig+0x418>
 80055ca:	f24f 4324 	movw	r3, #62500	; 0xf424
 80055ce:	e016      	b.n	80055fe <UART_SetConfig+0x446>
 80055d0:	4ba1      	ldr	r3, [pc, #644]	; (8005858 <UART_SetConfig+0x6a0>)
 80055d2:	e014      	b.n	80055fe <UART_SetConfig+0x446>
 80055d4:	4ba1      	ldr	r3, [pc, #644]	; (800585c <UART_SetConfig+0x6a4>)
 80055d6:	e012      	b.n	80055fe <UART_SetConfig+0x446>
 80055d8:	4ba1      	ldr	r3, [pc, #644]	; (8005860 <UART_SetConfig+0x6a8>)
 80055da:	e010      	b.n	80055fe <UART_SetConfig+0x446>
 80055dc:	4ba1      	ldr	r3, [pc, #644]	; (8005864 <UART_SetConfig+0x6ac>)
 80055de:	e00e      	b.n	80055fe <UART_SetConfig+0x446>
 80055e0:	4ba1      	ldr	r3, [pc, #644]	; (8005868 <UART_SetConfig+0x6b0>)
 80055e2:	e00c      	b.n	80055fe <UART_SetConfig+0x446>
 80055e4:	4ba1      	ldr	r3, [pc, #644]	; (800586c <UART_SetConfig+0x6b4>)
 80055e6:	e00a      	b.n	80055fe <UART_SetConfig+0x446>
 80055e8:	4ba1      	ldr	r3, [pc, #644]	; (8005870 <UART_SetConfig+0x6b8>)
 80055ea:	e008      	b.n	80055fe <UART_SetConfig+0x446>
 80055ec:	4ba1      	ldr	r3, [pc, #644]	; (8005874 <UART_SetConfig+0x6bc>)
 80055ee:	e006      	b.n	80055fe <UART_SetConfig+0x446>
 80055f0:	4ba1      	ldr	r3, [pc, #644]	; (8005878 <UART_SetConfig+0x6c0>)
 80055f2:	e004      	b.n	80055fe <UART_SetConfig+0x446>
 80055f4:	4ba1      	ldr	r3, [pc, #644]	; (800587c <UART_SetConfig+0x6c4>)
 80055f6:	e002      	b.n	80055fe <UART_SetConfig+0x446>
 80055f8:	4ba1      	ldr	r3, [pc, #644]	; (8005880 <UART_SetConfig+0x6c8>)
 80055fa:	e000      	b.n	80055fe <UART_SetConfig+0x446>
 80055fc:	4b96      	ldr	r3, [pc, #600]	; (8005858 <UART_SetConfig+0x6a0>)
 80055fe:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8005600:	e0aa      	b.n	8005758 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005602:	f7fe f8d1 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8005606:	4602      	mov	r2, r0
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	2b00      	cmp	r3, #0
 800560e:	d044      	beq.n	800569a <UART_SetConfig+0x4e2>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	2b01      	cmp	r3, #1
 8005616:	d03e      	beq.n	8005696 <UART_SetConfig+0x4de>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	2b02      	cmp	r3, #2
 800561e:	d038      	beq.n	8005692 <UART_SetConfig+0x4da>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	2b03      	cmp	r3, #3
 8005626:	d032      	beq.n	800568e <UART_SetConfig+0x4d6>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	2b04      	cmp	r3, #4
 800562e:	d02c      	beq.n	800568a <UART_SetConfig+0x4d2>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	2b05      	cmp	r3, #5
 8005636:	d026      	beq.n	8005686 <UART_SetConfig+0x4ce>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	2b06      	cmp	r3, #6
 800563e:	d020      	beq.n	8005682 <UART_SetConfig+0x4ca>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	2b07      	cmp	r3, #7
 8005646:	d01a      	beq.n	800567e <UART_SetConfig+0x4c6>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	2b08      	cmp	r3, #8
 800564e:	d014      	beq.n	800567a <UART_SetConfig+0x4c2>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	2b09      	cmp	r3, #9
 8005656:	d00e      	beq.n	8005676 <UART_SetConfig+0x4be>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	2b0a      	cmp	r3, #10
 800565e:	d008      	beq.n	8005672 <UART_SetConfig+0x4ba>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	2b0b      	cmp	r3, #11
 8005666:	d102      	bne.n	800566e <UART_SetConfig+0x4b6>
 8005668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800566c:	e016      	b.n	800569c <UART_SetConfig+0x4e4>
 800566e:	2301      	movs	r3, #1
 8005670:	e014      	b.n	800569c <UART_SetConfig+0x4e4>
 8005672:	2380      	movs	r3, #128	; 0x80
 8005674:	e012      	b.n	800569c <UART_SetConfig+0x4e4>
 8005676:	2340      	movs	r3, #64	; 0x40
 8005678:	e010      	b.n	800569c <UART_SetConfig+0x4e4>
 800567a:	2320      	movs	r3, #32
 800567c:	e00e      	b.n	800569c <UART_SetConfig+0x4e4>
 800567e:	2310      	movs	r3, #16
 8005680:	e00c      	b.n	800569c <UART_SetConfig+0x4e4>
 8005682:	230c      	movs	r3, #12
 8005684:	e00a      	b.n	800569c <UART_SetConfig+0x4e4>
 8005686:	230a      	movs	r3, #10
 8005688:	e008      	b.n	800569c <UART_SetConfig+0x4e4>
 800568a:	2308      	movs	r3, #8
 800568c:	e006      	b.n	800569c <UART_SetConfig+0x4e4>
 800568e:	2306      	movs	r3, #6
 8005690:	e004      	b.n	800569c <UART_SetConfig+0x4e4>
 8005692:	2304      	movs	r3, #4
 8005694:	e002      	b.n	800569c <UART_SetConfig+0x4e4>
 8005696:	2302      	movs	r3, #2
 8005698:	e000      	b.n	800569c <UART_SetConfig+0x4e4>
 800569a:	2301      	movs	r3, #1
 800569c:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a0:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 80056a2:	e059      	b.n	8005758 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d04e      	beq.n	800574a <UART_SetConfig+0x592>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d047      	beq.n	8005744 <UART_SetConfig+0x58c>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d040      	beq.n	800573e <UART_SetConfig+0x586>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d039      	beq.n	8005738 <UART_SetConfig+0x580>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d032      	beq.n	8005732 <UART_SetConfig+0x57a>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	2b05      	cmp	r3, #5
 80056d2:	d02b      	beq.n	800572c <UART_SetConfig+0x574>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	2b06      	cmp	r3, #6
 80056da:	d024      	beq.n	8005726 <UART_SetConfig+0x56e>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	2b07      	cmp	r3, #7
 80056e2:	d01d      	beq.n	8005720 <UART_SetConfig+0x568>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d016      	beq.n	800571a <UART_SetConfig+0x562>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f0:	2b09      	cmp	r3, #9
 80056f2:	d00f      	beq.n	8005714 <UART_SetConfig+0x55c>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	2b0a      	cmp	r3, #10
 80056fa:	d008      	beq.n	800570e <UART_SetConfig+0x556>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	2b0b      	cmp	r3, #11
 8005702:	d101      	bne.n	8005708 <UART_SetConfig+0x550>
 8005704:	2380      	movs	r3, #128	; 0x80
 8005706:	e022      	b.n	800574e <UART_SetConfig+0x596>
 8005708:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800570c:	e01f      	b.n	800574e <UART_SetConfig+0x596>
 800570e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005712:	e01c      	b.n	800574e <UART_SetConfig+0x596>
 8005714:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005718:	e019      	b.n	800574e <UART_SetConfig+0x596>
 800571a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800571e:	e016      	b.n	800574e <UART_SetConfig+0x596>
 8005720:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005724:	e013      	b.n	800574e <UART_SetConfig+0x596>
 8005726:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800572a:	e010      	b.n	800574e <UART_SetConfig+0x596>
 800572c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005730:	e00d      	b.n	800574e <UART_SetConfig+0x596>
 8005732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005736:	e00a      	b.n	800574e <UART_SetConfig+0x596>
 8005738:	f241 5355 	movw	r3, #5461	; 0x1555
 800573c:	e007      	b.n	800574e <UART_SetConfig+0x596>
 800573e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005742:	e004      	b.n	800574e <UART_SetConfig+0x596>
 8005744:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005748:	e001      	b.n	800574e <UART_SetConfig+0x596>
 800574a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800574e:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8005750:	e002      	b.n	8005758 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	74fb      	strb	r3, [r7, #19]
        break;
 8005756:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 86c2 	beq.w	80064e4 <UART_SetConfig+0x132c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	4613      	mov	r3, r2
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	4413      	add	r3, r2
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	429a      	cmp	r2, r3
 800576e:	d305      	bcc.n	800577c <UART_SetConfig+0x5c4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	429a      	cmp	r2, r3
 800577a:	d903      	bls.n	8005784 <UART_SetConfig+0x5cc>
      {
        ret = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	74fb      	strb	r3, [r7, #19]
 8005780:	f000 beb0 	b.w	80064e4 <UART_SetConfig+0x132c>
      }
      else
      {
        switch (clocksource)
 8005784:	7efb      	ldrb	r3, [r7, #27]
 8005786:	2b08      	cmp	r3, #8
 8005788:	f200 828c 	bhi.w	8005ca4 <UART_SetConfig+0xaec>
 800578c:	a201      	add	r2, pc, #4	; (adr r2, 8005794 <UART_SetConfig+0x5dc>)
 800578e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005792:	bf00      	nop
 8005794:	080057b9 	.word	0x080057b9
 8005798:	08005ca5 	.word	0x08005ca5
 800579c:	08005923 	.word	0x08005923
 80057a0:	08005ca5 	.word	0x08005ca5
 80057a4:	08005a19 	.word	0x08005a19
 80057a8:	08005ca5 	.word	0x08005ca5
 80057ac:	08005ca5 	.word	0x08005ca5
 80057b0:	08005ca5 	.word	0x08005ca5
 80057b4:	08005b55 	.word	0x08005b55
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057b8:	f7fe f88c 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 80057bc:	4603      	mov	r3, r0
 80057be:	4618      	mov	r0, r3
 80057c0:	f04f 0100 	mov.w	r1, #0
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d07e      	beq.n	80058ca <UART_SetConfig+0x712>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d075      	beq.n	80058c0 <UART_SetConfig+0x708>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d06c      	beq.n	80058b6 <UART_SetConfig+0x6fe>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d063      	beq.n	80058ac <UART_SetConfig+0x6f4>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d05a      	beq.n	80058a2 <UART_SetConfig+0x6ea>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	2b05      	cmp	r3, #5
 80057f2:	d051      	beq.n	8005898 <UART_SetConfig+0x6e0>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	2b06      	cmp	r3, #6
 80057fa:	d048      	beq.n	800588e <UART_SetConfig+0x6d6>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	2b07      	cmp	r3, #7
 8005802:	d03f      	beq.n	8005884 <UART_SetConfig+0x6cc>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	2b08      	cmp	r3, #8
 800580a:	d01f      	beq.n	800584c <UART_SetConfig+0x694>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	2b09      	cmp	r3, #9
 8005812:	d016      	beq.n	8005842 <UART_SetConfig+0x68a>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	2b0a      	cmp	r3, #10
 800581a:	d00d      	beq.n	8005838 <UART_SetConfig+0x680>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	2b0b      	cmp	r3, #11
 8005822:	d104      	bne.n	800582e <UART_SetConfig+0x676>
 8005824:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005828:	f04f 0400 	mov.w	r4, #0
 800582c:	e051      	b.n	80058d2 <UART_SetConfig+0x71a>
 800582e:	f04f 0301 	mov.w	r3, #1
 8005832:	f04f 0400 	mov.w	r4, #0
 8005836:	e04c      	b.n	80058d2 <UART_SetConfig+0x71a>
 8005838:	f04f 0380 	mov.w	r3, #128	; 0x80
 800583c:	f04f 0400 	mov.w	r4, #0
 8005840:	e047      	b.n	80058d2 <UART_SetConfig+0x71a>
 8005842:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005846:	f04f 0400 	mov.w	r4, #0
 800584a:	e042      	b.n	80058d2 <UART_SetConfig+0x71a>
 800584c:	f04f 0320 	mov.w	r3, #32
 8005850:	f04f 0400 	mov.w	r4, #0
 8005854:	e03d      	b.n	80058d2 <UART_SetConfig+0x71a>
 8005856:	bf00      	nop
 8005858:	00f42400 	.word	0x00f42400
 800585c:	0001e848 	.word	0x0001e848
 8005860:	0003d090 	.word	0x0003d090
 8005864:	0007a120 	.word	0x0007a120
 8005868:	000f4240 	.word	0x000f4240
 800586c:	00145855 	.word	0x00145855
 8005870:	00186a00 	.word	0x00186a00
 8005874:	001e8480 	.word	0x001e8480
 8005878:	0028b0aa 	.word	0x0028b0aa
 800587c:	003d0900 	.word	0x003d0900
 8005880:	007a1200 	.word	0x007a1200
 8005884:	f04f 0310 	mov.w	r3, #16
 8005888:	f04f 0400 	mov.w	r4, #0
 800588c:	e021      	b.n	80058d2 <UART_SetConfig+0x71a>
 800588e:	f04f 030c 	mov.w	r3, #12
 8005892:	f04f 0400 	mov.w	r4, #0
 8005896:	e01c      	b.n	80058d2 <UART_SetConfig+0x71a>
 8005898:	f04f 030a 	mov.w	r3, #10
 800589c:	f04f 0400 	mov.w	r4, #0
 80058a0:	e017      	b.n	80058d2 <UART_SetConfig+0x71a>
 80058a2:	f04f 0308 	mov.w	r3, #8
 80058a6:	f04f 0400 	mov.w	r4, #0
 80058aa:	e012      	b.n	80058d2 <UART_SetConfig+0x71a>
 80058ac:	f04f 0306 	mov.w	r3, #6
 80058b0:	f04f 0400 	mov.w	r4, #0
 80058b4:	e00d      	b.n	80058d2 <UART_SetConfig+0x71a>
 80058b6:	f04f 0304 	mov.w	r3, #4
 80058ba:	f04f 0400 	mov.w	r4, #0
 80058be:	e008      	b.n	80058d2 <UART_SetConfig+0x71a>
 80058c0:	f04f 0302 	mov.w	r3, #2
 80058c4:	f04f 0400 	mov.w	r4, #0
 80058c8:	e003      	b.n	80058d2 <UART_SetConfig+0x71a>
 80058ca:	f04f 0301 	mov.w	r3, #1
 80058ce:	f04f 0400 	mov.w	r4, #0
 80058d2:	461a      	mov	r2, r3
 80058d4:	4623      	mov	r3, r4
 80058d6:	f7fa fc93 	bl	8000200 <__aeabi_uldivmod>
 80058da:	4603      	mov	r3, r0
 80058dc:	460c      	mov	r4, r1
 80058de:	4619      	mov	r1, r3
 80058e0:	4622      	mov	r2, r4
 80058e2:	f04f 0300 	mov.w	r3, #0
 80058e6:	f04f 0400 	mov.w	r4, #0
 80058ea:	0214      	lsls	r4, r2, #8
 80058ec:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80058f0:	020b      	lsls	r3, r1, #8
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6852      	ldr	r2, [r2, #4]
 80058f6:	0852      	lsrs	r2, r2, #1
 80058f8:	4611      	mov	r1, r2
 80058fa:	f04f 0200 	mov.w	r2, #0
 80058fe:	eb13 0b01 	adds.w	fp, r3, r1
 8005902:	eb44 0c02 	adc.w	ip, r4, r2
 8005906:	4658      	mov	r0, fp
 8005908:	4661      	mov	r1, ip
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f04f 0400 	mov.w	r4, #0
 8005912:	461a      	mov	r2, r3
 8005914:	4623      	mov	r3, r4
 8005916:	f7fa fc73 	bl	8000200 <__aeabi_uldivmod>
 800591a:	4603      	mov	r3, r0
 800591c:	460c      	mov	r4, r1
 800591e:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8005920:	e1c3      	b.n	8005caa <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	2b00      	cmp	r3, #0
 8005928:	d05b      	beq.n	80059e2 <UART_SetConfig+0x82a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	2b01      	cmp	r3, #1
 8005930:	d053      	beq.n	80059da <UART_SetConfig+0x822>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	2b02      	cmp	r3, #2
 8005938:	d04b      	beq.n	80059d2 <UART_SetConfig+0x81a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	2b03      	cmp	r3, #3
 8005940:	d043      	beq.n	80059ca <UART_SetConfig+0x812>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	2b04      	cmp	r3, #4
 8005948:	d03b      	beq.n	80059c2 <UART_SetConfig+0x80a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	2b05      	cmp	r3, #5
 8005950:	d033      	beq.n	80059ba <UART_SetConfig+0x802>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005956:	2b06      	cmp	r3, #6
 8005958:	d02b      	beq.n	80059b2 <UART_SetConfig+0x7fa>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	2b07      	cmp	r3, #7
 8005960:	d023      	beq.n	80059aa <UART_SetConfig+0x7f2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005966:	2b08      	cmp	r3, #8
 8005968:	d01b      	beq.n	80059a2 <UART_SetConfig+0x7ea>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	2b09      	cmp	r3, #9
 8005970:	d013      	beq.n	800599a <UART_SetConfig+0x7e2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005976:	2b0a      	cmp	r3, #10
 8005978:	d00b      	beq.n	8005992 <UART_SetConfig+0x7da>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	2b0b      	cmp	r3, #11
 8005980:	d103      	bne.n	800598a <UART_SetConfig+0x7d2>
 8005982:	4bad      	ldr	r3, [pc, #692]	; (8005c38 <UART_SetConfig+0xa80>)
 8005984:	f04f 0400 	mov.w	r4, #0
 8005988:	e02e      	b.n	80059e8 <UART_SetConfig+0x830>
 800598a:	4bac      	ldr	r3, [pc, #688]	; (8005c3c <UART_SetConfig+0xa84>)
 800598c:	f04f 0400 	mov.w	r4, #0
 8005990:	e02a      	b.n	80059e8 <UART_SetConfig+0x830>
 8005992:	4bab      	ldr	r3, [pc, #684]	; (8005c40 <UART_SetConfig+0xa88>)
 8005994:	f04f 0400 	mov.w	r4, #0
 8005998:	e026      	b.n	80059e8 <UART_SetConfig+0x830>
 800599a:	4baa      	ldr	r3, [pc, #680]	; (8005c44 <UART_SetConfig+0xa8c>)
 800599c:	f04f 0400 	mov.w	r4, #0
 80059a0:	e022      	b.n	80059e8 <UART_SetConfig+0x830>
 80059a2:	4ba9      	ldr	r3, [pc, #676]	; (8005c48 <UART_SetConfig+0xa90>)
 80059a4:	f04f 0400 	mov.w	r4, #0
 80059a8:	e01e      	b.n	80059e8 <UART_SetConfig+0x830>
 80059aa:	4ba8      	ldr	r3, [pc, #672]	; (8005c4c <UART_SetConfig+0xa94>)
 80059ac:	f04f 0400 	mov.w	r4, #0
 80059b0:	e01a      	b.n	80059e8 <UART_SetConfig+0x830>
 80059b2:	a49d      	add	r4, pc, #628	; (adr r4, 8005c28 <UART_SetConfig+0xa70>)
 80059b4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80059b8:	e016      	b.n	80059e8 <UART_SetConfig+0x830>
 80059ba:	4ba5      	ldr	r3, [pc, #660]	; (8005c50 <UART_SetConfig+0xa98>)
 80059bc:	f04f 0400 	mov.w	r4, #0
 80059c0:	e012      	b.n	80059e8 <UART_SetConfig+0x830>
 80059c2:	4ba4      	ldr	r3, [pc, #656]	; (8005c54 <UART_SetConfig+0xa9c>)
 80059c4:	f04f 0400 	mov.w	r4, #0
 80059c8:	e00e      	b.n	80059e8 <UART_SetConfig+0x830>
 80059ca:	a499      	add	r4, pc, #612	; (adr r4, 8005c30 <UART_SetConfig+0xa78>)
 80059cc:	e9d4 3400 	ldrd	r3, r4, [r4]
 80059d0:	e00a      	b.n	80059e8 <UART_SetConfig+0x830>
 80059d2:	4ba1      	ldr	r3, [pc, #644]	; (8005c58 <UART_SetConfig+0xaa0>)
 80059d4:	f04f 0400 	mov.w	r4, #0
 80059d8:	e006      	b.n	80059e8 <UART_SetConfig+0x830>
 80059da:	4ba0      	ldr	r3, [pc, #640]	; (8005c5c <UART_SetConfig+0xaa4>)
 80059dc:	f04f 0400 	mov.w	r4, #0
 80059e0:	e002      	b.n	80059e8 <UART_SetConfig+0x830>
 80059e2:	4b96      	ldr	r3, [pc, #600]	; (8005c3c <UART_SetConfig+0xa84>)
 80059e4:	f04f 0400 	mov.w	r4, #0
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6852      	ldr	r2, [r2, #4]
 80059ec:	0852      	lsrs	r2, r2, #1
 80059ee:	4611      	mov	r1, r2
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	eb13 0b01 	adds.w	fp, r3, r1
 80059f8:	eb44 0c02 	adc.w	ip, r4, r2
 80059fc:	4658      	mov	r0, fp
 80059fe:	4661      	mov	r1, ip
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f04f 0400 	mov.w	r4, #0
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4623      	mov	r3, r4
 8005a0c:	f7fa fbf8 	bl	8000200 <__aeabi_uldivmod>
 8005a10:	4603      	mov	r3, r0
 8005a12:	460c      	mov	r4, r1
 8005a14:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8005a16:	e148      	b.n	8005caa <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a18:	f7fd fec6 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f04f 0100 	mov.w	r1, #0
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d067      	beq.n	8005afc <UART_SetConfig+0x944>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d05e      	beq.n	8005af2 <UART_SetConfig+0x93a>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d055      	beq.n	8005ae8 <UART_SetConfig+0x930>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	d04c      	beq.n	8005ade <UART_SetConfig+0x926>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d043      	beq.n	8005ad4 <UART_SetConfig+0x91c>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	2b05      	cmp	r3, #5
 8005a52:	d03a      	beq.n	8005aca <UART_SetConfig+0x912>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	2b06      	cmp	r3, #6
 8005a5a:	d031      	beq.n	8005ac0 <UART_SetConfig+0x908>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	2b07      	cmp	r3, #7
 8005a62:	d028      	beq.n	8005ab6 <UART_SetConfig+0x8fe>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d01f      	beq.n	8005aac <UART_SetConfig+0x8f4>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	2b09      	cmp	r3, #9
 8005a72:	d016      	beq.n	8005aa2 <UART_SetConfig+0x8ea>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	2b0a      	cmp	r3, #10
 8005a7a:	d00d      	beq.n	8005a98 <UART_SetConfig+0x8e0>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	2b0b      	cmp	r3, #11
 8005a82:	d104      	bne.n	8005a8e <UART_SetConfig+0x8d6>
 8005a84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a88:	f04f 0400 	mov.w	r4, #0
 8005a8c:	e03a      	b.n	8005b04 <UART_SetConfig+0x94c>
 8005a8e:	f04f 0301 	mov.w	r3, #1
 8005a92:	f04f 0400 	mov.w	r4, #0
 8005a96:	e035      	b.n	8005b04 <UART_SetConfig+0x94c>
 8005a98:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005a9c:	f04f 0400 	mov.w	r4, #0
 8005aa0:	e030      	b.n	8005b04 <UART_SetConfig+0x94c>
 8005aa2:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005aa6:	f04f 0400 	mov.w	r4, #0
 8005aaa:	e02b      	b.n	8005b04 <UART_SetConfig+0x94c>
 8005aac:	f04f 0320 	mov.w	r3, #32
 8005ab0:	f04f 0400 	mov.w	r4, #0
 8005ab4:	e026      	b.n	8005b04 <UART_SetConfig+0x94c>
 8005ab6:	f04f 0310 	mov.w	r3, #16
 8005aba:	f04f 0400 	mov.w	r4, #0
 8005abe:	e021      	b.n	8005b04 <UART_SetConfig+0x94c>
 8005ac0:	f04f 030c 	mov.w	r3, #12
 8005ac4:	f04f 0400 	mov.w	r4, #0
 8005ac8:	e01c      	b.n	8005b04 <UART_SetConfig+0x94c>
 8005aca:	f04f 030a 	mov.w	r3, #10
 8005ace:	f04f 0400 	mov.w	r4, #0
 8005ad2:	e017      	b.n	8005b04 <UART_SetConfig+0x94c>
 8005ad4:	f04f 0308 	mov.w	r3, #8
 8005ad8:	f04f 0400 	mov.w	r4, #0
 8005adc:	e012      	b.n	8005b04 <UART_SetConfig+0x94c>
 8005ade:	f04f 0306 	mov.w	r3, #6
 8005ae2:	f04f 0400 	mov.w	r4, #0
 8005ae6:	e00d      	b.n	8005b04 <UART_SetConfig+0x94c>
 8005ae8:	f04f 0304 	mov.w	r3, #4
 8005aec:	f04f 0400 	mov.w	r4, #0
 8005af0:	e008      	b.n	8005b04 <UART_SetConfig+0x94c>
 8005af2:	f04f 0302 	mov.w	r3, #2
 8005af6:	f04f 0400 	mov.w	r4, #0
 8005afa:	e003      	b.n	8005b04 <UART_SetConfig+0x94c>
 8005afc:	f04f 0301 	mov.w	r3, #1
 8005b00:	f04f 0400 	mov.w	r4, #0
 8005b04:	461a      	mov	r2, r3
 8005b06:	4623      	mov	r3, r4
 8005b08:	f7fa fb7a 	bl	8000200 <__aeabi_uldivmod>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	460c      	mov	r4, r1
 8005b10:	4619      	mov	r1, r3
 8005b12:	4622      	mov	r2, r4
 8005b14:	f04f 0300 	mov.w	r3, #0
 8005b18:	f04f 0400 	mov.w	r4, #0
 8005b1c:	0214      	lsls	r4, r2, #8
 8005b1e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005b22:	020b      	lsls	r3, r1, #8
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	6852      	ldr	r2, [r2, #4]
 8005b28:	0852      	lsrs	r2, r2, #1
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	eb13 0b01 	adds.w	fp, r3, r1
 8005b34:	eb44 0c02 	adc.w	ip, r4, r2
 8005b38:	4658      	mov	r0, fp
 8005b3a:	4661      	mov	r1, ip
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f04f 0400 	mov.w	r4, #0
 8005b44:	461a      	mov	r2, r3
 8005b46:	4623      	mov	r3, r4
 8005b48:	f7fa fb5a 	bl	8000200 <__aeabi_uldivmod>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	460c      	mov	r4, r1
 8005b50:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8005b52:	e0aa      	b.n	8005caa <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 8087 	beq.w	8005c6c <UART_SetConfig+0xab4>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d05b      	beq.n	8005c1e <UART_SetConfig+0xa66>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d052      	beq.n	8005c14 <UART_SetConfig+0xa5c>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	2b03      	cmp	r3, #3
 8005b74:	d04a      	beq.n	8005c0c <UART_SetConfig+0xa54>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d041      	beq.n	8005c02 <UART_SetConfig+0xa4a>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	2b05      	cmp	r3, #5
 8005b84:	d039      	beq.n	8005bfa <UART_SetConfig+0xa42>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	2b06      	cmp	r3, #6
 8005b8c:	d031      	beq.n	8005bf2 <UART_SetConfig+0xa3a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	2b07      	cmp	r3, #7
 8005b94:	d028      	beq.n	8005be8 <UART_SetConfig+0xa30>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	2b08      	cmp	r3, #8
 8005b9c:	d01f      	beq.n	8005bde <UART_SetConfig+0xa26>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	2b09      	cmp	r3, #9
 8005ba4:	d016      	beq.n	8005bd4 <UART_SetConfig+0xa1c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	2b0a      	cmp	r3, #10
 8005bac:	d00d      	beq.n	8005bca <UART_SetConfig+0xa12>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	2b0b      	cmp	r3, #11
 8005bb4:	d104      	bne.n	8005bc0 <UART_SetConfig+0xa08>
 8005bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bba:	f04f 0400 	mov.w	r4, #0
 8005bbe:	e059      	b.n	8005c74 <UART_SetConfig+0xabc>
 8005bc0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005bc4:	f04f 0400 	mov.w	r4, #0
 8005bc8:	e054      	b.n	8005c74 <UART_SetConfig+0xabc>
 8005bca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005bce:	f04f 0400 	mov.w	r4, #0
 8005bd2:	e04f      	b.n	8005c74 <UART_SetConfig+0xabc>
 8005bd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bd8:	f04f 0400 	mov.w	r4, #0
 8005bdc:	e04a      	b.n	8005c74 <UART_SetConfig+0xabc>
 8005bde:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005be2:	f04f 0400 	mov.w	r4, #0
 8005be6:	e045      	b.n	8005c74 <UART_SetConfig+0xabc>
 8005be8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005bec:	f04f 0400 	mov.w	r4, #0
 8005bf0:	e040      	b.n	8005c74 <UART_SetConfig+0xabc>
 8005bf2:	4b1b      	ldr	r3, [pc, #108]	; (8005c60 <UART_SetConfig+0xaa8>)
 8005bf4:	f04f 0400 	mov.w	r4, #0
 8005bf8:	e03c      	b.n	8005c74 <UART_SetConfig+0xabc>
 8005bfa:	4b1a      	ldr	r3, [pc, #104]	; (8005c64 <UART_SetConfig+0xaac>)
 8005bfc:	f04f 0400 	mov.w	r4, #0
 8005c00:	e038      	b.n	8005c74 <UART_SetConfig+0xabc>
 8005c02:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005c06:	f04f 0400 	mov.w	r4, #0
 8005c0a:	e033      	b.n	8005c74 <UART_SetConfig+0xabc>
 8005c0c:	4b16      	ldr	r3, [pc, #88]	; (8005c68 <UART_SetConfig+0xab0>)
 8005c0e:	f04f 0400 	mov.w	r4, #0
 8005c12:	e02f      	b.n	8005c74 <UART_SetConfig+0xabc>
 8005c14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c18:	f04f 0400 	mov.w	r4, #0
 8005c1c:	e02a      	b.n	8005c74 <UART_SetConfig+0xabc>
 8005c1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c22:	f04f 0400 	mov.w	r4, #0
 8005c26:	e025      	b.n	8005c74 <UART_SetConfig+0xabc>
 8005c28:	14585500 	.word	0x14585500
 8005c2c:	00000000 	.word	0x00000000
 8005c30:	28b0aa00 	.word	0x28b0aa00
 8005c34:	00000000 	.word	0x00000000
 8005c38:	00f42400 	.word	0x00f42400
 8005c3c:	f4240000 	.word	0xf4240000
 8005c40:	01e84800 	.word	0x01e84800
 8005c44:	03d09000 	.word	0x03d09000
 8005c48:	07a12000 	.word	0x07a12000
 8005c4c:	0f424000 	.word	0x0f424000
 8005c50:	186a0000 	.word	0x186a0000
 8005c54:	1e848000 	.word	0x1e848000
 8005c58:	3d090000 	.word	0x3d090000
 8005c5c:	7a120000 	.word	0x7a120000
 8005c60:	000aaa00 	.word	0x000aaa00
 8005c64:	000ccc00 	.word	0x000ccc00
 8005c68:	00155500 	.word	0x00155500
 8005c6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005c70:	f04f 0400 	mov.w	r4, #0
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6852      	ldr	r2, [r2, #4]
 8005c78:	0852      	lsrs	r2, r2, #1
 8005c7a:	4611      	mov	r1, r2
 8005c7c:	f04f 0200 	mov.w	r2, #0
 8005c80:	eb13 0b01 	adds.w	fp, r3, r1
 8005c84:	eb44 0c02 	adc.w	ip, r4, r2
 8005c88:	4658      	mov	r0, fp
 8005c8a:	4661      	mov	r1, ip
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f04f 0400 	mov.w	r4, #0
 8005c94:	461a      	mov	r2, r3
 8005c96:	4623      	mov	r3, r4
 8005c98:	f7fa fab2 	bl	8000200 <__aeabi_uldivmod>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	460c      	mov	r4, r1
 8005ca0:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8005ca2:	e002      	b.n	8005caa <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	74fb      	strb	r3, [r7, #19]
            break;
 8005ca8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cb0:	d309      	bcc.n	8005cc6 <UART_SetConfig+0xb0e>
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cb8:	d205      	bcs.n	8005cc6 <UART_SetConfig+0xb0e>
        {
          huart->Instance->BRR = usartdiv;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	60da      	str	r2, [r3, #12]
 8005cc2:	f000 bc0f 	b.w	80064e4 <UART_SetConfig+0x132c>
        }
        else
        {
          ret = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	74fb      	strb	r3, [r7, #19]
 8005cca:	f000 bc0b 	b.w	80064e4 <UART_SetConfig+0x132c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cd6:	f040 81ff 	bne.w	80060d8 <UART_SetConfig+0xf20>
  {
    switch (clocksource)
 8005cda:	7efb      	ldrb	r3, [r7, #27]
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	f200 81db 	bhi.w	8006098 <UART_SetConfig+0xee0>
 8005ce2:	a201      	add	r2, pc, #4	; (adr r2, 8005ce8 <UART_SetConfig+0xb30>)
 8005ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce8:	08005d0d 	.word	0x08005d0d
 8005cec:	08005dc3 	.word	0x08005dc3
 8005cf0:	08005e79 	.word	0x08005e79
 8005cf4:	08006099 	.word	0x08006099
 8005cf8:	08005f21 	.word	0x08005f21
 8005cfc:	08006099 	.word	0x08006099
 8005d00:	08006099 	.word	0x08006099
 8005d04:	08006099 	.word	0x08006099
 8005d08:	08005fd7 	.word	0x08005fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d0c:	f7fd fde2 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 8005d10:	4602      	mov	r2, r0
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d044      	beq.n	8005da4 <UART_SetConfig+0xbec>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d03e      	beq.n	8005da0 <UART_SetConfig+0xbe8>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d038      	beq.n	8005d9c <UART_SetConfig+0xbe4>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	2b03      	cmp	r3, #3
 8005d30:	d032      	beq.n	8005d98 <UART_SetConfig+0xbe0>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d36:	2b04      	cmp	r3, #4
 8005d38:	d02c      	beq.n	8005d94 <UART_SetConfig+0xbdc>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3e:	2b05      	cmp	r3, #5
 8005d40:	d026      	beq.n	8005d90 <UART_SetConfig+0xbd8>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	2b06      	cmp	r3, #6
 8005d48:	d020      	beq.n	8005d8c <UART_SetConfig+0xbd4>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4e:	2b07      	cmp	r3, #7
 8005d50:	d01a      	beq.n	8005d88 <UART_SetConfig+0xbd0>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	2b08      	cmp	r3, #8
 8005d58:	d014      	beq.n	8005d84 <UART_SetConfig+0xbcc>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	2b09      	cmp	r3, #9
 8005d60:	d00e      	beq.n	8005d80 <UART_SetConfig+0xbc8>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	2b0a      	cmp	r3, #10
 8005d68:	d008      	beq.n	8005d7c <UART_SetConfig+0xbc4>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	2b0b      	cmp	r3, #11
 8005d70:	d102      	bne.n	8005d78 <UART_SetConfig+0xbc0>
 8005d72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d76:	e016      	b.n	8005da6 <UART_SetConfig+0xbee>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e014      	b.n	8005da6 <UART_SetConfig+0xbee>
 8005d7c:	2380      	movs	r3, #128	; 0x80
 8005d7e:	e012      	b.n	8005da6 <UART_SetConfig+0xbee>
 8005d80:	2340      	movs	r3, #64	; 0x40
 8005d82:	e010      	b.n	8005da6 <UART_SetConfig+0xbee>
 8005d84:	2320      	movs	r3, #32
 8005d86:	e00e      	b.n	8005da6 <UART_SetConfig+0xbee>
 8005d88:	2310      	movs	r3, #16
 8005d8a:	e00c      	b.n	8005da6 <UART_SetConfig+0xbee>
 8005d8c:	230c      	movs	r3, #12
 8005d8e:	e00a      	b.n	8005da6 <UART_SetConfig+0xbee>
 8005d90:	230a      	movs	r3, #10
 8005d92:	e008      	b.n	8005da6 <UART_SetConfig+0xbee>
 8005d94:	2308      	movs	r3, #8
 8005d96:	e006      	b.n	8005da6 <UART_SetConfig+0xbee>
 8005d98:	2306      	movs	r3, #6
 8005d9a:	e004      	b.n	8005da6 <UART_SetConfig+0xbee>
 8005d9c:	2304      	movs	r3, #4
 8005d9e:	e002      	b.n	8005da6 <UART_SetConfig+0xbee>
 8005da0:	2302      	movs	r3, #2
 8005da2:	e000      	b.n	8005da6 <UART_SetConfig+0xbee>
 8005da4:	2301      	movs	r3, #1
 8005da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005daa:	005a      	lsls	r2, r3, #1
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	085b      	lsrs	r3, r3, #1
 8005db2:	441a      	add	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005dc0:	e16d      	b.n	800609e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dc2:	f7fd fd9d 	bl	8003900 <HAL_RCC_GetPCLK2Freq>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d044      	beq.n	8005e5a <UART_SetConfig+0xca2>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d03e      	beq.n	8005e56 <UART_SetConfig+0xc9e>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d038      	beq.n	8005e52 <UART_SetConfig+0xc9a>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	d032      	beq.n	8005e4e <UART_SetConfig+0xc96>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d02c      	beq.n	8005e4a <UART_SetConfig+0xc92>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	2b05      	cmp	r3, #5
 8005df6:	d026      	beq.n	8005e46 <UART_SetConfig+0xc8e>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	2b06      	cmp	r3, #6
 8005dfe:	d020      	beq.n	8005e42 <UART_SetConfig+0xc8a>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	2b07      	cmp	r3, #7
 8005e06:	d01a      	beq.n	8005e3e <UART_SetConfig+0xc86>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d014      	beq.n	8005e3a <UART_SetConfig+0xc82>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	2b09      	cmp	r3, #9
 8005e16:	d00e      	beq.n	8005e36 <UART_SetConfig+0xc7e>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1c:	2b0a      	cmp	r3, #10
 8005e1e:	d008      	beq.n	8005e32 <UART_SetConfig+0xc7a>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	2b0b      	cmp	r3, #11
 8005e26:	d102      	bne.n	8005e2e <UART_SetConfig+0xc76>
 8005e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e2c:	e016      	b.n	8005e5c <UART_SetConfig+0xca4>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e014      	b.n	8005e5c <UART_SetConfig+0xca4>
 8005e32:	2380      	movs	r3, #128	; 0x80
 8005e34:	e012      	b.n	8005e5c <UART_SetConfig+0xca4>
 8005e36:	2340      	movs	r3, #64	; 0x40
 8005e38:	e010      	b.n	8005e5c <UART_SetConfig+0xca4>
 8005e3a:	2320      	movs	r3, #32
 8005e3c:	e00e      	b.n	8005e5c <UART_SetConfig+0xca4>
 8005e3e:	2310      	movs	r3, #16
 8005e40:	e00c      	b.n	8005e5c <UART_SetConfig+0xca4>
 8005e42:	230c      	movs	r3, #12
 8005e44:	e00a      	b.n	8005e5c <UART_SetConfig+0xca4>
 8005e46:	230a      	movs	r3, #10
 8005e48:	e008      	b.n	8005e5c <UART_SetConfig+0xca4>
 8005e4a:	2308      	movs	r3, #8
 8005e4c:	e006      	b.n	8005e5c <UART_SetConfig+0xca4>
 8005e4e:	2306      	movs	r3, #6
 8005e50:	e004      	b.n	8005e5c <UART_SetConfig+0xca4>
 8005e52:	2304      	movs	r3, #4
 8005e54:	e002      	b.n	8005e5c <UART_SetConfig+0xca4>
 8005e56:	2302      	movs	r3, #2
 8005e58:	e000      	b.n	8005e5c <UART_SetConfig+0xca4>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e60:	005a      	lsls	r2, r3, #1
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	085b      	lsrs	r3, r3, #1
 8005e68:	441a      	add	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e76:	e112      	b.n	800609e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d043      	beq.n	8005f08 <UART_SetConfig+0xd50>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d03d      	beq.n	8005f04 <UART_SetConfig+0xd4c>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d037      	beq.n	8005f00 <UART_SetConfig+0xd48>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	2b03      	cmp	r3, #3
 8005e96:	d031      	beq.n	8005efc <UART_SetConfig+0xd44>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d02b      	beq.n	8005ef8 <UART_SetConfig+0xd40>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	2b05      	cmp	r3, #5
 8005ea6:	d025      	beq.n	8005ef4 <UART_SetConfig+0xd3c>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	2b06      	cmp	r3, #6
 8005eae:	d01f      	beq.n	8005ef0 <UART_SetConfig+0xd38>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	2b07      	cmp	r3, #7
 8005eb6:	d019      	beq.n	8005eec <UART_SetConfig+0xd34>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	2b08      	cmp	r3, #8
 8005ebe:	d013      	beq.n	8005ee8 <UART_SetConfig+0xd30>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	2b09      	cmp	r3, #9
 8005ec6:	d00d      	beq.n	8005ee4 <UART_SetConfig+0xd2c>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ecc:	2b0a      	cmp	r3, #10
 8005ece:	d007      	beq.n	8005ee0 <UART_SetConfig+0xd28>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed4:	2b0b      	cmp	r3, #11
 8005ed6:	d101      	bne.n	8005edc <UART_SetConfig+0xd24>
 8005ed8:	4b8c      	ldr	r3, [pc, #560]	; (800610c <UART_SetConfig+0xf54>)
 8005eda:	e016      	b.n	8005f0a <UART_SetConfig+0xd52>
 8005edc:	4b8c      	ldr	r3, [pc, #560]	; (8006110 <UART_SetConfig+0xf58>)
 8005ede:	e014      	b.n	8005f0a <UART_SetConfig+0xd52>
 8005ee0:	4b8c      	ldr	r3, [pc, #560]	; (8006114 <UART_SetConfig+0xf5c>)
 8005ee2:	e012      	b.n	8005f0a <UART_SetConfig+0xd52>
 8005ee4:	4b8c      	ldr	r3, [pc, #560]	; (8006118 <UART_SetConfig+0xf60>)
 8005ee6:	e010      	b.n	8005f0a <UART_SetConfig+0xd52>
 8005ee8:	4b8c      	ldr	r3, [pc, #560]	; (800611c <UART_SetConfig+0xf64>)
 8005eea:	e00e      	b.n	8005f0a <UART_SetConfig+0xd52>
 8005eec:	4b8c      	ldr	r3, [pc, #560]	; (8006120 <UART_SetConfig+0xf68>)
 8005eee:	e00c      	b.n	8005f0a <UART_SetConfig+0xd52>
 8005ef0:	4b8c      	ldr	r3, [pc, #560]	; (8006124 <UART_SetConfig+0xf6c>)
 8005ef2:	e00a      	b.n	8005f0a <UART_SetConfig+0xd52>
 8005ef4:	4b8c      	ldr	r3, [pc, #560]	; (8006128 <UART_SetConfig+0xf70>)
 8005ef6:	e008      	b.n	8005f0a <UART_SetConfig+0xd52>
 8005ef8:	4b8c      	ldr	r3, [pc, #560]	; (800612c <UART_SetConfig+0xf74>)
 8005efa:	e006      	b.n	8005f0a <UART_SetConfig+0xd52>
 8005efc:	4b8c      	ldr	r3, [pc, #560]	; (8006130 <UART_SetConfig+0xf78>)
 8005efe:	e004      	b.n	8005f0a <UART_SetConfig+0xd52>
 8005f00:	4b8c      	ldr	r3, [pc, #560]	; (8006134 <UART_SetConfig+0xf7c>)
 8005f02:	e002      	b.n	8005f0a <UART_SetConfig+0xd52>
 8005f04:	4b8c      	ldr	r3, [pc, #560]	; (8006138 <UART_SetConfig+0xf80>)
 8005f06:	e000      	b.n	8005f0a <UART_SetConfig+0xd52>
 8005f08:	4b81      	ldr	r3, [pc, #516]	; (8006110 <UART_SetConfig+0xf58>)
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6852      	ldr	r2, [r2, #4]
 8005f0e:	0852      	lsrs	r2, r2, #1
 8005f10:	441a      	add	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f1e:	e0be      	b.n	800609e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f20:	f7fd fc42 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8005f24:	4602      	mov	r2, r0
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d044      	beq.n	8005fb8 <UART_SetConfig+0xe00>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d03e      	beq.n	8005fb4 <UART_SetConfig+0xdfc>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d038      	beq.n	8005fb0 <UART_SetConfig+0xdf8>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	d032      	beq.n	8005fac <UART_SetConfig+0xdf4>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	2b04      	cmp	r3, #4
 8005f4c:	d02c      	beq.n	8005fa8 <UART_SetConfig+0xdf0>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	2b05      	cmp	r3, #5
 8005f54:	d026      	beq.n	8005fa4 <UART_SetConfig+0xdec>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	2b06      	cmp	r3, #6
 8005f5c:	d020      	beq.n	8005fa0 <UART_SetConfig+0xde8>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	2b07      	cmp	r3, #7
 8005f64:	d01a      	beq.n	8005f9c <UART_SetConfig+0xde4>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	2b08      	cmp	r3, #8
 8005f6c:	d014      	beq.n	8005f98 <UART_SetConfig+0xde0>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	2b09      	cmp	r3, #9
 8005f74:	d00e      	beq.n	8005f94 <UART_SetConfig+0xddc>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	2b0a      	cmp	r3, #10
 8005f7c:	d008      	beq.n	8005f90 <UART_SetConfig+0xdd8>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	2b0b      	cmp	r3, #11
 8005f84:	d102      	bne.n	8005f8c <UART_SetConfig+0xdd4>
 8005f86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f8a:	e016      	b.n	8005fba <UART_SetConfig+0xe02>
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e014      	b.n	8005fba <UART_SetConfig+0xe02>
 8005f90:	2380      	movs	r3, #128	; 0x80
 8005f92:	e012      	b.n	8005fba <UART_SetConfig+0xe02>
 8005f94:	2340      	movs	r3, #64	; 0x40
 8005f96:	e010      	b.n	8005fba <UART_SetConfig+0xe02>
 8005f98:	2320      	movs	r3, #32
 8005f9a:	e00e      	b.n	8005fba <UART_SetConfig+0xe02>
 8005f9c:	2310      	movs	r3, #16
 8005f9e:	e00c      	b.n	8005fba <UART_SetConfig+0xe02>
 8005fa0:	230c      	movs	r3, #12
 8005fa2:	e00a      	b.n	8005fba <UART_SetConfig+0xe02>
 8005fa4:	230a      	movs	r3, #10
 8005fa6:	e008      	b.n	8005fba <UART_SetConfig+0xe02>
 8005fa8:	2308      	movs	r3, #8
 8005faa:	e006      	b.n	8005fba <UART_SetConfig+0xe02>
 8005fac:	2306      	movs	r3, #6
 8005fae:	e004      	b.n	8005fba <UART_SetConfig+0xe02>
 8005fb0:	2304      	movs	r3, #4
 8005fb2:	e002      	b.n	8005fba <UART_SetConfig+0xe02>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e000      	b.n	8005fba <UART_SetConfig+0xe02>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fbe:	005a      	lsls	r2, r3, #1
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	085b      	lsrs	r3, r3, #1
 8005fc6:	441a      	add	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005fd4:	e063      	b.n	800609e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d04f      	beq.n	800607e <UART_SetConfig+0xec6>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d048      	beq.n	8006078 <UART_SetConfig+0xec0>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d041      	beq.n	8006072 <UART_SetConfig+0xeba>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	d03a      	beq.n	800606c <UART_SetConfig+0xeb4>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d033      	beq.n	8006066 <UART_SetConfig+0xeae>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	2b05      	cmp	r3, #5
 8006004:	d02c      	beq.n	8006060 <UART_SetConfig+0xea8>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	2b06      	cmp	r3, #6
 800600c:	d025      	beq.n	800605a <UART_SetConfig+0xea2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	2b07      	cmp	r3, #7
 8006014:	d01e      	beq.n	8006054 <UART_SetConfig+0xe9c>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	2b08      	cmp	r3, #8
 800601c:	d017      	beq.n	800604e <UART_SetConfig+0xe96>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	2b09      	cmp	r3, #9
 8006024:	d010      	beq.n	8006048 <UART_SetConfig+0xe90>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	2b0a      	cmp	r3, #10
 800602c:	d009      	beq.n	8006042 <UART_SetConfig+0xe8a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	2b0b      	cmp	r3, #11
 8006034:	d102      	bne.n	800603c <UART_SetConfig+0xe84>
 8006036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800603a:	e022      	b.n	8006082 <UART_SetConfig+0xeca>
 800603c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006040:	e01f      	b.n	8006082 <UART_SetConfig+0xeca>
 8006042:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006046:	e01c      	b.n	8006082 <UART_SetConfig+0xeca>
 8006048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800604c:	e019      	b.n	8006082 <UART_SetConfig+0xeca>
 800604e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006052:	e016      	b.n	8006082 <UART_SetConfig+0xeca>
 8006054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006058:	e013      	b.n	8006082 <UART_SetConfig+0xeca>
 800605a:	f241 5354 	movw	r3, #5460	; 0x1554
 800605e:	e010      	b.n	8006082 <UART_SetConfig+0xeca>
 8006060:	f641 1398 	movw	r3, #6552	; 0x1998
 8006064:	e00d      	b.n	8006082 <UART_SetConfig+0xeca>
 8006066:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800606a:	e00a      	b.n	8006082 <UART_SetConfig+0xeca>
 800606c:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8006070:	e007      	b.n	8006082 <UART_SetConfig+0xeca>
 8006072:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006076:	e004      	b.n	8006082 <UART_SetConfig+0xeca>
 8006078:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800607c:	e001      	b.n	8006082 <UART_SetConfig+0xeca>
 800607e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	6852      	ldr	r2, [r2, #4]
 8006086:	0852      	lsrs	r2, r2, #1
 8006088:	441a      	add	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006092:	b29b      	uxth	r3, r3
 8006094:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8006096:	e002      	b.n	800609e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	74fb      	strb	r3, [r7, #19]
        break;
 800609c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	2b0f      	cmp	r3, #15
 80060a2:	d916      	bls.n	80060d2 <UART_SetConfig+0xf1a>
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060aa:	d212      	bcs.n	80060d2 <UART_SetConfig+0xf1a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	f023 030f 	bic.w	r3, r3, #15
 80060b4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	085b      	lsrs	r3, r3, #1
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	897b      	ldrh	r3, [r7, #10]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	897a      	ldrh	r2, [r7, #10]
 80060ce:	60da      	str	r2, [r3, #12]
 80060d0:	e208      	b.n	80064e4 <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	74fb      	strb	r3, [r7, #19]
 80060d6:	e205      	b.n	80064e4 <UART_SetConfig+0x132c>
    }
  }
  else
  {
    switch (clocksource)
 80060d8:	7efb      	ldrb	r3, [r7, #27]
 80060da:	2b08      	cmp	r3, #8
 80060dc:	f200 81f1 	bhi.w	80064c2 <UART_SetConfig+0x130a>
 80060e0:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <UART_SetConfig+0xf30>)
 80060e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e6:	bf00      	nop
 80060e8:	0800613d 	.word	0x0800613d
 80060ec:	080061f1 	.word	0x080061f1
 80060f0:	080062a5 	.word	0x080062a5
 80060f4:	080064c3 	.word	0x080064c3
 80060f8:	0800634f 	.word	0x0800634f
 80060fc:	080064c3 	.word	0x080064c3
 8006100:	080064c3 	.word	0x080064c3
 8006104:	080064c3 	.word	0x080064c3
 8006108:	08006403 	.word	0x08006403
 800610c:	0001e848 	.word	0x0001e848
 8006110:	01e84800 	.word	0x01e84800
 8006114:	0003d090 	.word	0x0003d090
 8006118:	0007a120 	.word	0x0007a120
 800611c:	000f4240 	.word	0x000f4240
 8006120:	001e8480 	.word	0x001e8480
 8006124:	0028b0aa 	.word	0x0028b0aa
 8006128:	0030d400 	.word	0x0030d400
 800612c:	003d0900 	.word	0x003d0900
 8006130:	00516154 	.word	0x00516154
 8006134:	007a1200 	.word	0x007a1200
 8006138:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800613c:	f7fd fbca 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 8006140:	4602      	mov	r2, r0
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	2b00      	cmp	r3, #0
 8006148:	d044      	beq.n	80061d4 <UART_SetConfig+0x101c>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	2b01      	cmp	r3, #1
 8006150:	d03e      	beq.n	80061d0 <UART_SetConfig+0x1018>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006156:	2b02      	cmp	r3, #2
 8006158:	d038      	beq.n	80061cc <UART_SetConfig+0x1014>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615e:	2b03      	cmp	r3, #3
 8006160:	d032      	beq.n	80061c8 <UART_SetConfig+0x1010>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	2b04      	cmp	r3, #4
 8006168:	d02c      	beq.n	80061c4 <UART_SetConfig+0x100c>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	2b05      	cmp	r3, #5
 8006170:	d026      	beq.n	80061c0 <UART_SetConfig+0x1008>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006176:	2b06      	cmp	r3, #6
 8006178:	d020      	beq.n	80061bc <UART_SetConfig+0x1004>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	2b07      	cmp	r3, #7
 8006180:	d01a      	beq.n	80061b8 <UART_SetConfig+0x1000>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	2b08      	cmp	r3, #8
 8006188:	d014      	beq.n	80061b4 <UART_SetConfig+0xffc>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	2b09      	cmp	r3, #9
 8006190:	d00e      	beq.n	80061b0 <UART_SetConfig+0xff8>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	2b0a      	cmp	r3, #10
 8006198:	d008      	beq.n	80061ac <UART_SetConfig+0xff4>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	2b0b      	cmp	r3, #11
 80061a0:	d102      	bne.n	80061a8 <UART_SetConfig+0xff0>
 80061a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061a6:	e016      	b.n	80061d6 <UART_SetConfig+0x101e>
 80061a8:	2301      	movs	r3, #1
 80061aa:	e014      	b.n	80061d6 <UART_SetConfig+0x101e>
 80061ac:	2380      	movs	r3, #128	; 0x80
 80061ae:	e012      	b.n	80061d6 <UART_SetConfig+0x101e>
 80061b0:	2340      	movs	r3, #64	; 0x40
 80061b2:	e010      	b.n	80061d6 <UART_SetConfig+0x101e>
 80061b4:	2320      	movs	r3, #32
 80061b6:	e00e      	b.n	80061d6 <UART_SetConfig+0x101e>
 80061b8:	2310      	movs	r3, #16
 80061ba:	e00c      	b.n	80061d6 <UART_SetConfig+0x101e>
 80061bc:	230c      	movs	r3, #12
 80061be:	e00a      	b.n	80061d6 <UART_SetConfig+0x101e>
 80061c0:	230a      	movs	r3, #10
 80061c2:	e008      	b.n	80061d6 <UART_SetConfig+0x101e>
 80061c4:	2308      	movs	r3, #8
 80061c6:	e006      	b.n	80061d6 <UART_SetConfig+0x101e>
 80061c8:	2306      	movs	r3, #6
 80061ca:	e004      	b.n	80061d6 <UART_SetConfig+0x101e>
 80061cc:	2304      	movs	r3, #4
 80061ce:	e002      	b.n	80061d6 <UART_SetConfig+0x101e>
 80061d0:	2302      	movs	r3, #2
 80061d2:	e000      	b.n	80061d6 <UART_SetConfig+0x101e>
 80061d4:	2301      	movs	r3, #1
 80061d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	085b      	lsrs	r3, r3, #1
 80061e0:	441a      	add	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80061ee:	e16b      	b.n	80064c8 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061f0:	f7fd fb86 	bl	8003900 <HAL_RCC_GetPCLK2Freq>
 80061f4:	4602      	mov	r2, r0
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d044      	beq.n	8006288 <UART_SetConfig+0x10d0>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	2b01      	cmp	r3, #1
 8006204:	d03e      	beq.n	8006284 <UART_SetConfig+0x10cc>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620a:	2b02      	cmp	r3, #2
 800620c:	d038      	beq.n	8006280 <UART_SetConfig+0x10c8>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006212:	2b03      	cmp	r3, #3
 8006214:	d032      	beq.n	800627c <UART_SetConfig+0x10c4>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	2b04      	cmp	r3, #4
 800621c:	d02c      	beq.n	8006278 <UART_SetConfig+0x10c0>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006222:	2b05      	cmp	r3, #5
 8006224:	d026      	beq.n	8006274 <UART_SetConfig+0x10bc>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622a:	2b06      	cmp	r3, #6
 800622c:	d020      	beq.n	8006270 <UART_SetConfig+0x10b8>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	2b07      	cmp	r3, #7
 8006234:	d01a      	beq.n	800626c <UART_SetConfig+0x10b4>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623a:	2b08      	cmp	r3, #8
 800623c:	d014      	beq.n	8006268 <UART_SetConfig+0x10b0>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	2b09      	cmp	r3, #9
 8006244:	d00e      	beq.n	8006264 <UART_SetConfig+0x10ac>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624a:	2b0a      	cmp	r3, #10
 800624c:	d008      	beq.n	8006260 <UART_SetConfig+0x10a8>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	2b0b      	cmp	r3, #11
 8006254:	d102      	bne.n	800625c <UART_SetConfig+0x10a4>
 8006256:	f44f 7380 	mov.w	r3, #256	; 0x100
 800625a:	e016      	b.n	800628a <UART_SetConfig+0x10d2>
 800625c:	2301      	movs	r3, #1
 800625e:	e014      	b.n	800628a <UART_SetConfig+0x10d2>
 8006260:	2380      	movs	r3, #128	; 0x80
 8006262:	e012      	b.n	800628a <UART_SetConfig+0x10d2>
 8006264:	2340      	movs	r3, #64	; 0x40
 8006266:	e010      	b.n	800628a <UART_SetConfig+0x10d2>
 8006268:	2320      	movs	r3, #32
 800626a:	e00e      	b.n	800628a <UART_SetConfig+0x10d2>
 800626c:	2310      	movs	r3, #16
 800626e:	e00c      	b.n	800628a <UART_SetConfig+0x10d2>
 8006270:	230c      	movs	r3, #12
 8006272:	e00a      	b.n	800628a <UART_SetConfig+0x10d2>
 8006274:	230a      	movs	r3, #10
 8006276:	e008      	b.n	800628a <UART_SetConfig+0x10d2>
 8006278:	2308      	movs	r3, #8
 800627a:	e006      	b.n	800628a <UART_SetConfig+0x10d2>
 800627c:	2306      	movs	r3, #6
 800627e:	e004      	b.n	800628a <UART_SetConfig+0x10d2>
 8006280:	2304      	movs	r3, #4
 8006282:	e002      	b.n	800628a <UART_SetConfig+0x10d2>
 8006284:	2302      	movs	r3, #2
 8006286:	e000      	b.n	800628a <UART_SetConfig+0x10d2>
 8006288:	2301      	movs	r3, #1
 800628a:	fbb2 f2f3 	udiv	r2, r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	085b      	lsrs	r3, r3, #1
 8006294:	441a      	add	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	fbb2 f3f3 	udiv	r3, r2, r3
 800629e:	b29b      	uxth	r3, r3
 80062a0:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80062a2:	e111      	b.n	80064c8 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d044      	beq.n	8006336 <UART_SetConfig+0x117e>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d03e      	beq.n	8006332 <UART_SetConfig+0x117a>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d038      	beq.n	800632e <UART_SetConfig+0x1176>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d032      	beq.n	800632a <UART_SetConfig+0x1172>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	2b04      	cmp	r3, #4
 80062ca:	d02c      	beq.n	8006326 <UART_SetConfig+0x116e>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	2b05      	cmp	r3, #5
 80062d2:	d026      	beq.n	8006322 <UART_SetConfig+0x116a>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	2b06      	cmp	r3, #6
 80062da:	d020      	beq.n	800631e <UART_SetConfig+0x1166>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	2b07      	cmp	r3, #7
 80062e2:	d01a      	beq.n	800631a <UART_SetConfig+0x1162>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d014      	beq.n	8006316 <UART_SetConfig+0x115e>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f0:	2b09      	cmp	r3, #9
 80062f2:	d00e      	beq.n	8006312 <UART_SetConfig+0x115a>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	2b0a      	cmp	r3, #10
 80062fa:	d008      	beq.n	800630e <UART_SetConfig+0x1156>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	2b0b      	cmp	r3, #11
 8006302:	d102      	bne.n	800630a <UART_SetConfig+0x1152>
 8006304:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006308:	e016      	b.n	8006338 <UART_SetConfig+0x1180>
 800630a:	4b80      	ldr	r3, [pc, #512]	; (800650c <UART_SetConfig+0x1354>)
 800630c:	e014      	b.n	8006338 <UART_SetConfig+0x1180>
 800630e:	4b80      	ldr	r3, [pc, #512]	; (8006510 <UART_SetConfig+0x1358>)
 8006310:	e012      	b.n	8006338 <UART_SetConfig+0x1180>
 8006312:	4b80      	ldr	r3, [pc, #512]	; (8006514 <UART_SetConfig+0x135c>)
 8006314:	e010      	b.n	8006338 <UART_SetConfig+0x1180>
 8006316:	4b80      	ldr	r3, [pc, #512]	; (8006518 <UART_SetConfig+0x1360>)
 8006318:	e00e      	b.n	8006338 <UART_SetConfig+0x1180>
 800631a:	4b80      	ldr	r3, [pc, #512]	; (800651c <UART_SetConfig+0x1364>)
 800631c:	e00c      	b.n	8006338 <UART_SetConfig+0x1180>
 800631e:	4b80      	ldr	r3, [pc, #512]	; (8006520 <UART_SetConfig+0x1368>)
 8006320:	e00a      	b.n	8006338 <UART_SetConfig+0x1180>
 8006322:	4b80      	ldr	r3, [pc, #512]	; (8006524 <UART_SetConfig+0x136c>)
 8006324:	e008      	b.n	8006338 <UART_SetConfig+0x1180>
 8006326:	4b80      	ldr	r3, [pc, #512]	; (8006528 <UART_SetConfig+0x1370>)
 8006328:	e006      	b.n	8006338 <UART_SetConfig+0x1180>
 800632a:	4b80      	ldr	r3, [pc, #512]	; (800652c <UART_SetConfig+0x1374>)
 800632c:	e004      	b.n	8006338 <UART_SetConfig+0x1180>
 800632e:	4b80      	ldr	r3, [pc, #512]	; (8006530 <UART_SetConfig+0x1378>)
 8006330:	e002      	b.n	8006338 <UART_SetConfig+0x1180>
 8006332:	4b80      	ldr	r3, [pc, #512]	; (8006534 <UART_SetConfig+0x137c>)
 8006334:	e000      	b.n	8006338 <UART_SetConfig+0x1180>
 8006336:	4b75      	ldr	r3, [pc, #468]	; (800650c <UART_SetConfig+0x1354>)
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	6852      	ldr	r2, [r2, #4]
 800633c:	0852      	lsrs	r2, r2, #1
 800633e:	441a      	add	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	fbb2 f3f3 	udiv	r3, r2, r3
 8006348:	b29b      	uxth	r3, r3
 800634a:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800634c:	e0bc      	b.n	80064c8 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800634e:	f7fd fa2b 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8006352:	4602      	mov	r2, r0
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	2b00      	cmp	r3, #0
 800635a:	d044      	beq.n	80063e6 <UART_SetConfig+0x122e>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	2b01      	cmp	r3, #1
 8006362:	d03e      	beq.n	80063e2 <UART_SetConfig+0x122a>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	2b02      	cmp	r3, #2
 800636a:	d038      	beq.n	80063de <UART_SetConfig+0x1226>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	2b03      	cmp	r3, #3
 8006372:	d032      	beq.n	80063da <UART_SetConfig+0x1222>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	2b04      	cmp	r3, #4
 800637a:	d02c      	beq.n	80063d6 <UART_SetConfig+0x121e>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	2b05      	cmp	r3, #5
 8006382:	d026      	beq.n	80063d2 <UART_SetConfig+0x121a>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	2b06      	cmp	r3, #6
 800638a:	d020      	beq.n	80063ce <UART_SetConfig+0x1216>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	2b07      	cmp	r3, #7
 8006392:	d01a      	beq.n	80063ca <UART_SetConfig+0x1212>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	2b08      	cmp	r3, #8
 800639a:	d014      	beq.n	80063c6 <UART_SetConfig+0x120e>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	2b09      	cmp	r3, #9
 80063a2:	d00e      	beq.n	80063c2 <UART_SetConfig+0x120a>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	2b0a      	cmp	r3, #10
 80063aa:	d008      	beq.n	80063be <UART_SetConfig+0x1206>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	2b0b      	cmp	r3, #11
 80063b2:	d102      	bne.n	80063ba <UART_SetConfig+0x1202>
 80063b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063b8:	e016      	b.n	80063e8 <UART_SetConfig+0x1230>
 80063ba:	2301      	movs	r3, #1
 80063bc:	e014      	b.n	80063e8 <UART_SetConfig+0x1230>
 80063be:	2380      	movs	r3, #128	; 0x80
 80063c0:	e012      	b.n	80063e8 <UART_SetConfig+0x1230>
 80063c2:	2340      	movs	r3, #64	; 0x40
 80063c4:	e010      	b.n	80063e8 <UART_SetConfig+0x1230>
 80063c6:	2320      	movs	r3, #32
 80063c8:	e00e      	b.n	80063e8 <UART_SetConfig+0x1230>
 80063ca:	2310      	movs	r3, #16
 80063cc:	e00c      	b.n	80063e8 <UART_SetConfig+0x1230>
 80063ce:	230c      	movs	r3, #12
 80063d0:	e00a      	b.n	80063e8 <UART_SetConfig+0x1230>
 80063d2:	230a      	movs	r3, #10
 80063d4:	e008      	b.n	80063e8 <UART_SetConfig+0x1230>
 80063d6:	2308      	movs	r3, #8
 80063d8:	e006      	b.n	80063e8 <UART_SetConfig+0x1230>
 80063da:	2306      	movs	r3, #6
 80063dc:	e004      	b.n	80063e8 <UART_SetConfig+0x1230>
 80063de:	2304      	movs	r3, #4
 80063e0:	e002      	b.n	80063e8 <UART_SetConfig+0x1230>
 80063e2:	2302      	movs	r3, #2
 80063e4:	e000      	b.n	80063e8 <UART_SetConfig+0x1230>
 80063e6:	2301      	movs	r3, #1
 80063e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	085b      	lsrs	r3, r3, #1
 80063f2:	441a      	add	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8006400:	e062      	b.n	80064c8 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006406:	2b00      	cmp	r3, #0
 8006408:	d04e      	beq.n	80064a8 <UART_SetConfig+0x12f0>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640e:	2b01      	cmp	r3, #1
 8006410:	d047      	beq.n	80064a2 <UART_SetConfig+0x12ea>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	2b02      	cmp	r3, #2
 8006418:	d040      	beq.n	800649c <UART_SetConfig+0x12e4>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	2b03      	cmp	r3, #3
 8006420:	d039      	beq.n	8006496 <UART_SetConfig+0x12de>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006426:	2b04      	cmp	r3, #4
 8006428:	d032      	beq.n	8006490 <UART_SetConfig+0x12d8>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	2b05      	cmp	r3, #5
 8006430:	d02b      	beq.n	800648a <UART_SetConfig+0x12d2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006436:	2b06      	cmp	r3, #6
 8006438:	d024      	beq.n	8006484 <UART_SetConfig+0x12cc>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643e:	2b07      	cmp	r3, #7
 8006440:	d01d      	beq.n	800647e <UART_SetConfig+0x12c6>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	2b08      	cmp	r3, #8
 8006448:	d016      	beq.n	8006478 <UART_SetConfig+0x12c0>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	2b09      	cmp	r3, #9
 8006450:	d00f      	beq.n	8006472 <UART_SetConfig+0x12ba>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006456:	2b0a      	cmp	r3, #10
 8006458:	d008      	beq.n	800646c <UART_SetConfig+0x12b4>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	2b0b      	cmp	r3, #11
 8006460:	d101      	bne.n	8006466 <UART_SetConfig+0x12ae>
 8006462:	2380      	movs	r3, #128	; 0x80
 8006464:	e022      	b.n	80064ac <UART_SetConfig+0x12f4>
 8006466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800646a:	e01f      	b.n	80064ac <UART_SetConfig+0x12f4>
 800646c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006470:	e01c      	b.n	80064ac <UART_SetConfig+0x12f4>
 8006472:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006476:	e019      	b.n	80064ac <UART_SetConfig+0x12f4>
 8006478:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800647c:	e016      	b.n	80064ac <UART_SetConfig+0x12f4>
 800647e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006482:	e013      	b.n	80064ac <UART_SetConfig+0x12f4>
 8006484:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006488:	e010      	b.n	80064ac <UART_SetConfig+0x12f4>
 800648a:	f640 43cc 	movw	r3, #3276	; 0xccc
 800648e:	e00d      	b.n	80064ac <UART_SetConfig+0x12f4>
 8006490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006494:	e00a      	b.n	80064ac <UART_SetConfig+0x12f4>
 8006496:	f241 5355 	movw	r3, #5461	; 0x1555
 800649a:	e007      	b.n	80064ac <UART_SetConfig+0x12f4>
 800649c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064a0:	e004      	b.n	80064ac <UART_SetConfig+0x12f4>
 80064a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064a6:	e001      	b.n	80064ac <UART_SetConfig+0x12f4>
 80064a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	6852      	ldr	r2, [r2, #4]
 80064b0:	0852      	lsrs	r2, r2, #1
 80064b2:	441a      	add	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064bc:	b29b      	uxth	r3, r3
 80064be:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80064c0:	e002      	b.n	80064c8 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	74fb      	strb	r3, [r7, #19]
        break;
 80064c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	2b0f      	cmp	r3, #15
 80064cc:	d908      	bls.n	80064e0 <UART_SetConfig+0x1328>
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064d4:	d204      	bcs.n	80064e0 <UART_SetConfig+0x1328>
    {
      huart->Instance->BRR = usartdiv;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	60da      	str	r2, [r3, #12]
 80064de:	e001      	b.n	80064e4 <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	74fb      	strb	r3, [r7, #19]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006500:	7cfb      	ldrb	r3, [r7, #19]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3720      	adds	r7, #32
 8006506:	46bd      	mov	sp, r7
 8006508:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800650c:	00f42400 	.word	0x00f42400
 8006510:	0001e848 	.word	0x0001e848
 8006514:	0003d090 	.word	0x0003d090
 8006518:	0007a120 	.word	0x0007a120
 800651c:	000f4240 	.word	0x000f4240
 8006520:	00145855 	.word	0x00145855
 8006524:	00186a00 	.word	0x00186a00
 8006528:	001e8480 	.word	0x001e8480
 800652c:	0028b0aa 	.word	0x0028b0aa
 8006530:	003d0900 	.word	0x003d0900
 8006534:	007a1200 	.word	0x007a1200

08006538 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00a      	beq.n	8006562 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00a      	beq.n	8006584 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006588:	f003 0304 	and.w	r3, r3, #4
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00a      	beq.n	80065a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065aa:	f003 0308 	and.w	r3, r3, #8
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00a      	beq.n	80065c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065cc:	f003 0310 	and.w	r3, r3, #16
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00a      	beq.n	80065ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ee:	f003 0320 	and.w	r3, r3, #32
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006614:	2b00      	cmp	r3, #0
 8006616:	d01a      	beq.n	800664e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006632:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006636:	d10a      	bne.n	800664e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00a      	beq.n	8006670 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	430a      	orrs	r2, r1
 800666e:	605a      	str	r2, [r3, #4]
  }
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af02      	add	r7, sp, #8
 8006682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800668c:	f7fb fc1c 	bl	8001ec8 <HAL_GetTick>
 8006690:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0308 	and.w	r3, r3, #8
 800669c:	2b08      	cmp	r3, #8
 800669e:	d10e      	bne.n	80066be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f82c 	bl	800670c <UART_WaitOnFlagUntilTimeout>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e022      	b.n	8006704 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b04      	cmp	r3, #4
 80066ca:	d10e      	bne.n	80066ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f816 	bl	800670c <UART_WaitOnFlagUntilTimeout>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e00c      	b.n	8006704 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2220      	movs	r2, #32
 80066ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2220      	movs	r2, #32
 80066f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	603b      	str	r3, [r7, #0]
 8006718:	4613      	mov	r3, r2
 800671a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800671c:	e02c      	b.n	8006778 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006724:	d028      	beq.n	8006778 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006726:	f7fb fbcf 	bl	8001ec8 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	429a      	cmp	r2, r3
 8006734:	d302      	bcc.n	800673c <UART_WaitOnFlagUntilTimeout+0x30>
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d11d      	bne.n	8006778 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800674a:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689a      	ldr	r2, [r3, #8]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 0201 	bic.w	r2, r2, #1
 800675a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2220      	movs	r2, #32
 8006760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2220      	movs	r2, #32
 8006768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e00f      	b.n	8006798 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	69da      	ldr	r2, [r3, #28]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	4013      	ands	r3, r2
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	429a      	cmp	r2, r3
 8006786:	bf0c      	ite	eq
 8006788:	2301      	moveq	r3, #1
 800678a:	2300      	movne	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	461a      	mov	r2, r3
 8006790:	79fb      	ldrb	r3, [r7, #7]
 8006792:	429a      	cmp	r2, r3
 8006794:	d0c3      	beq.n	800671e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d101      	bne.n	80067b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80067b4:	2302      	movs	r3, #2
 80067b6:	e02d      	b.n	8006814 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2224      	movs	r2, #36	; 0x24
 80067c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0201 	bic.w	r2, r2, #1
 80067de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f84f 	bl	8006898 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2220      	movs	r2, #32
 8006806:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800682c:	2b01      	cmp	r3, #1
 800682e:	d101      	bne.n	8006834 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006830:	2302      	movs	r3, #2
 8006832:	e02d      	b.n	8006890 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2224      	movs	r2, #36	; 0x24
 8006840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f022 0201 	bic.w	r2, r2, #1
 800685a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	430a      	orrs	r2, r1
 800686e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f811 	bl	8006898 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2220      	movs	r2, #32
 8006882:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006898:	b480      	push	{r7}
 800689a:	b089      	sub	sp, #36	; 0x24
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80068a0:	4a2f      	ldr	r2, [pc, #188]	; (8006960 <UARTEx_SetNbDataToProcess+0xc8>)
 80068a2:	f107 0314 	add.w	r3, r7, #20
 80068a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068aa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80068ae:	4a2d      	ldr	r2, [pc, #180]	; (8006964 <UARTEx_SetNbDataToProcess+0xcc>)
 80068b0:	f107 030c 	add.w	r3, r7, #12
 80068b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068b8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d108      	bne.n	80068d6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80068d4:	e03d      	b.n	8006952 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80068d6:	2308      	movs	r3, #8
 80068d8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80068da:	2308      	movs	r3, #8
 80068dc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	0e5b      	lsrs	r3, r3, #25
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	f003 0307 	and.w	r3, r3, #7
 80068ec:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	0f5b      	lsrs	r3, r3, #29
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	f003 0307 	and.w	r3, r3, #7
 80068fc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80068fe:	7fbb      	ldrb	r3, [r7, #30]
 8006900:	7f3a      	ldrb	r2, [r7, #28]
 8006902:	f107 0120 	add.w	r1, r7, #32
 8006906:	440a      	add	r2, r1
 8006908:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800690c:	fb02 f303 	mul.w	r3, r2, r3
 8006910:	7f3a      	ldrb	r2, [r7, #28]
 8006912:	f107 0120 	add.w	r1, r7, #32
 8006916:	440a      	add	r2, r1
 8006918:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800691c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006920:	b29a      	uxth	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006928:	7ffb      	ldrb	r3, [r7, #31]
 800692a:	7f7a      	ldrb	r2, [r7, #29]
 800692c:	f107 0120 	add.w	r1, r7, #32
 8006930:	440a      	add	r2, r1
 8006932:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006936:	fb02 f303 	mul.w	r3, r2, r3
 800693a:	7f7a      	ldrb	r2, [r7, #29]
 800693c:	f107 0120 	add.w	r1, r7, #32
 8006940:	440a      	add	r2, r1
 8006942:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006946:	fb93 f3f2 	sdiv	r3, r3, r2
 800694a:	b29a      	uxth	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006952:	bf00      	nop
 8006954:	3724      	adds	r7, #36	; 0x24
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	08006ee0 	.word	0x08006ee0
 8006964:	08006ee8 	.word	0x08006ee8

08006968 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006968:	b084      	sub	sp, #16
 800696a:	b580      	push	{r7, lr}
 800696c:	b084      	sub	sp, #16
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
 8006972:	f107 001c 	add.w	r0, r7, #28
 8006976:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800697a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697c:	2b01      	cmp	r3, #1
 800697e:	d122      	bne.n	80069c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006984:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80069a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d105      	bne.n	80069ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fa1e 	bl	8006dfc <USB_CoreReset>
 80069c0:	4603      	mov	r3, r0
 80069c2:	73fb      	strb	r3, [r7, #15]
 80069c4:	e01a      	b.n	80069fc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 fa12 	bl	8006dfc <USB_CoreReset>
 80069d8:	4603      	mov	r3, r0
 80069da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80069dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d106      	bne.n	80069f0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	639a      	str	r2, [r3, #56]	; 0x38
 80069ee:	e005      	b.n	80069fc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a08:	b004      	add	sp, #16
 8006a0a:	4770      	bx	lr

08006a0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f023 0201 	bic.w	r2, r3, #1
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b082      	sub	sp, #8
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	460b      	mov	r3, r1
 8006a38:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a46:	78fb      	ldrb	r3, [r7, #3]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d106      	bne.n	8006a5a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	60da      	str	r2, [r3, #12]
 8006a58:	e00b      	b.n	8006a72 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a5a:	78fb      	ldrb	r3, [r7, #3]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d106      	bne.n	8006a6e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	60da      	str	r2, [r3, #12]
 8006a6c:	e001      	b.n	8006a72 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e003      	b.n	8006a7a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006a72:	2032      	movs	r0, #50	; 0x32
 8006a74:	f7fb fa34 	bl	8001ee0 <HAL_Delay>

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
	...

08006a84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a84:	b084      	sub	sp, #16
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b086      	sub	sp, #24
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	613b      	str	r3, [r7, #16]
 8006aa2:	e009      	b.n	8006ab8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	3340      	adds	r3, #64	; 0x40
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	2200      	movs	r2, #0
 8006ab0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	613b      	str	r3, [r7, #16]
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	2b0e      	cmp	r3, #14
 8006abc:	d9f2      	bls.n	8006aa4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d112      	bne.n	8006aea <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	e005      	b.n	8006af6 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006afc:	461a      	mov	r2, r3
 8006afe:	2300      	movs	r3, #0
 8006b00:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b08:	4619      	mov	r1, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b10:	461a      	mov	r2, r3
 8006b12:	680b      	ldr	r3, [r1, #0]
 8006b14:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b16:	2103      	movs	r1, #3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f93d 	bl	8006d98 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b1e:	2110      	movs	r1, #16
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f8f1 	bl	8006d08 <USB_FlushTxFifo>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f90f 	bl	8006d54 <USB_FlushRxFifo>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b46:	461a      	mov	r2, r3
 8006b48:	2300      	movs	r3, #0
 8006b4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b52:	461a      	mov	r2, r3
 8006b54:	2300      	movs	r3, #0
 8006b56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5e:	461a      	mov	r2, r3
 8006b60:	2300      	movs	r3, #0
 8006b62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b64:	2300      	movs	r3, #0
 8006b66:	613b      	str	r3, [r7, #16]
 8006b68:	e043      	b.n	8006bf2 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b80:	d118      	bne.n	8006bb4 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d10a      	bne.n	8006b9e <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b94:	461a      	mov	r2, r3
 8006b96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b9a:	6013      	str	r3, [r2, #0]
 8006b9c:	e013      	b.n	8006bc6 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006baa:	461a      	mov	r2, r3
 8006bac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006bb0:	6013      	str	r3, [r2, #0]
 8006bb2:	e008      	b.n	8006bc6 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be4:	461a      	mov	r2, r3
 8006be6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006bea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	613b      	str	r3, [r7, #16]
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d3b7      	bcc.n	8006b6a <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	613b      	str	r3, [r7, #16]
 8006bfe:	e043      	b.n	8006c88 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c16:	d118      	bne.n	8006c4a <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10a      	bne.n	8006c34 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c30:	6013      	str	r3, [r2, #0]
 8006c32:	e013      	b.n	8006c5c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c40:	461a      	mov	r2, r3
 8006c42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c46:	6013      	str	r3, [r2, #0]
 8006c48:	e008      	b.n	8006c5c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	015a      	lsls	r2, r3, #5
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	4413      	add	r3, r2
 8006c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c56:	461a      	mov	r2, r3
 8006c58:	2300      	movs	r3, #0
 8006c5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c68:	461a      	mov	r2, r3
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	3301      	adds	r3, #1
 8006c86:	613b      	str	r3, [r7, #16]
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d3b7      	bcc.n	8006c00 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ca2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006cb0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	f043 0210 	orr.w	r2, r3, #16
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	699a      	ldr	r2, [r3, #24]
 8006cc2:	4b10      	ldr	r3, [pc, #64]	; (8006d04 <USB_DevInit+0x280>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d005      	beq.n	8006cdc <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	f043 0208 	orr.w	r2, r3, #8
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d107      	bne.n	8006cf2 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cea:	f043 0304 	orr.w	r3, r3, #4
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3718      	adds	r7, #24
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cfe:	b004      	add	sp, #16
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	803c3800 	.word	0x803c3800

08006d08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	019b      	lsls	r3, r3, #6
 8006d1a:	f043 0220 	orr.w	r2, r3, #32
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	3301      	adds	r3, #1
 8006d26:	60fb      	str	r3, [r7, #12]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4a09      	ldr	r2, [pc, #36]	; (8006d50 <USB_FlushTxFifo+0x48>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d901      	bls.n	8006d34 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e006      	b.n	8006d42 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	f003 0320 	and.w	r3, r3, #32
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d0f0      	beq.n	8006d22 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3714      	adds	r7, #20
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	00030d40 	.word	0x00030d40

08006d54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2210      	movs	r2, #16
 8006d64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	60fb      	str	r3, [r7, #12]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4a09      	ldr	r2, [pc, #36]	; (8006d94 <USB_FlushRxFifo+0x40>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d901      	bls.n	8006d78 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e006      	b.n	8006d86 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	f003 0310 	and.w	r3, r3, #16
 8006d80:	2b10      	cmp	r3, #16
 8006d82:	d0f0      	beq.n	8006d66 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	00030d40 	.word	0x00030d40

08006d98 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	78fb      	ldrb	r3, [r7, #3]
 8006db2:	68f9      	ldr	r1, [r7, #12]
 8006db4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006db8:	4313      	orrs	r3, r2
 8006dba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006de4:	f043 0302 	orr.w	r3, r3, #2
 8006de8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006dea:	2003      	movs	r0, #3
 8006dec:	f7fb f878 	bl	8001ee0 <HAL_Delay>

  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
	...

08006dfc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	60fb      	str	r3, [r7, #12]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	4a13      	ldr	r2, [pc, #76]	; (8006e60 <USB_CoreReset+0x64>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d901      	bls.n	8006e1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e01b      	b.n	8006e52 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	daf2      	bge.n	8006e08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f043 0201 	orr.w	r2, r3, #1
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3301      	adds	r3, #1
 8006e36:	60fb      	str	r3, [r7, #12]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4a09      	ldr	r2, [pc, #36]	; (8006e60 <USB_CoreReset+0x64>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d901      	bls.n	8006e44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e006      	b.n	8006e52 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d0f0      	beq.n	8006e32 <USB_CoreReset+0x36>

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	00030d40 	.word	0x00030d40

08006e64 <__libc_init_array>:
 8006e64:	b570      	push	{r4, r5, r6, lr}
 8006e66:	4e0d      	ldr	r6, [pc, #52]	; (8006e9c <__libc_init_array+0x38>)
 8006e68:	4c0d      	ldr	r4, [pc, #52]	; (8006ea0 <__libc_init_array+0x3c>)
 8006e6a:	1ba4      	subs	r4, r4, r6
 8006e6c:	10a4      	asrs	r4, r4, #2
 8006e6e:	2500      	movs	r5, #0
 8006e70:	42a5      	cmp	r5, r4
 8006e72:	d109      	bne.n	8006e88 <__libc_init_array+0x24>
 8006e74:	4e0b      	ldr	r6, [pc, #44]	; (8006ea4 <__libc_init_array+0x40>)
 8006e76:	4c0c      	ldr	r4, [pc, #48]	; (8006ea8 <__libc_init_array+0x44>)
 8006e78:	f000 f820 	bl	8006ebc <_init>
 8006e7c:	1ba4      	subs	r4, r4, r6
 8006e7e:	10a4      	asrs	r4, r4, #2
 8006e80:	2500      	movs	r5, #0
 8006e82:	42a5      	cmp	r5, r4
 8006e84:	d105      	bne.n	8006e92 <__libc_init_array+0x2e>
 8006e86:	bd70      	pop	{r4, r5, r6, pc}
 8006e88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e8c:	4798      	blx	r3
 8006e8e:	3501      	adds	r5, #1
 8006e90:	e7ee      	b.n	8006e70 <__libc_init_array+0xc>
 8006e92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e96:	4798      	blx	r3
 8006e98:	3501      	adds	r5, #1
 8006e9a:	e7f2      	b.n	8006e82 <__libc_init_array+0x1e>
 8006e9c:	08081790 	.word	0x08081790
 8006ea0:	08081790 	.word	0x08081790
 8006ea4:	08081790 	.word	0x08081790
 8006ea8:	08081794 	.word	0x08081794

08006eac <memset>:
 8006eac:	4402      	add	r2, r0
 8006eae:	4603      	mov	r3, r0
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d100      	bne.n	8006eb6 <memset+0xa>
 8006eb4:	4770      	bx	lr
 8006eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8006eba:	e7f9      	b.n	8006eb0 <memset+0x4>

08006ebc <_init>:
 8006ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ebe:	bf00      	nop
 8006ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ec2:	bc08      	pop	{r3}
 8006ec4:	469e      	mov	lr, r3
 8006ec6:	4770      	bx	lr

08006ec8 <_fini>:
 8006ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eca:	bf00      	nop
 8006ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ece:	bc08      	pop	{r3}
 8006ed0:	469e      	mov	lr, r3
 8006ed2:	4770      	bx	lr
