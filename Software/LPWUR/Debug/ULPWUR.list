
ULPWUR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065f0  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0007a898  080067b0  080067b0  000167b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08081048  08081048  000a0014  2**0
                  CONTENTS
  4 .ARM          00000008  08081048  08081048  00091048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08081050  08081050  000a0014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08081050  08081050  00091050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08081054  08081054  00091054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08081058  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000014  0808106c  000a0014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  0808106c  000a031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000a0014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013df7  00000000  00000000  000a0044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002922  00000000  00000000  000b3e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ed0  00000000  00000000  000b6760  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d48  00000000  00000000  000b7630  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c243  00000000  00000000  000b8378  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fbd9  00000000  00000000  000e45bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00103146  00000000  00000000  000f4194  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f72da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a04  00000000  00000000  001f7358  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000014 	.word	0x20000014
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006798 	.word	0x08006798

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000018 	.word	0x20000018
 80001fc:	08006798 	.word	0x08006798

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b972 	b.w	80004fc <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	4688      	mov	r8, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14b      	bne.n	80002d6 <__udivmoddi4+0xa6>
 800023e:	428a      	cmp	r2, r1
 8000240:	4615      	mov	r5, r2
 8000242:	d967      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0720 	rsb	r7, r2, #32
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	fa20 f707 	lsr.w	r7, r0, r7
 8000256:	4095      	lsls	r5, r2
 8000258:	ea47 0803 	orr.w	r8, r7, r3
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbb8 f7fe 	udiv	r7, r8, lr
 8000268:	fa1f fc85 	uxth.w	ip, r5
 800026c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000270:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000274:	fb07 f10c 	mul.w	r1, r7, ip
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18eb      	adds	r3, r5, r3
 800027e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000282:	f080 811b 	bcs.w	80004bc <__udivmoddi4+0x28c>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8118 	bls.w	80004bc <__udivmoddi4+0x28c>
 800028c:	3f02      	subs	r7, #2
 800028e:	442b      	add	r3, r5
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0fe 	udiv	r0, r3, lr
 8000298:	fb0e 3310 	mls	r3, lr, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a4:	45a4      	cmp	ip, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	192c      	adds	r4, r5, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x290>
 80002b2:	45a4      	cmp	ip, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x290>
 80002b8:	3802      	subs	r0, #2
 80002ba:	442c      	add	r4, r5
 80002bc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c0:	eba4 040c 	sub.w	r4, r4, ip
 80002c4:	2700      	movs	r7, #0
 80002c6:	b11e      	cbz	r6, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c6 4300 	strd	r4, r3, [r6]
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xbe>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80eb 	beq.w	80004b6 <__udivmoddi4+0x286>
 80002e0:	2700      	movs	r7, #0
 80002e2:	e9c6 0100 	strd	r0, r1, [r6]
 80002e6:	4638      	mov	r0, r7
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f783 	clz	r7, r3
 80002f2:	2f00      	cmp	r7, #0
 80002f4:	d147      	bne.n	8000386 <__udivmoddi4+0x156>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd0>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80fa 	bhi.w	80004f4 <__udivmoddi4+0x2c4>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	4698      	mov	r8, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800030e:	e9c6 4800 	strd	r4, r8, [r6]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xe8>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 808f 	bne.w	8000440 <__udivmoddi4+0x210>
 8000322:	1b49      	subs	r1, r1, r5
 8000324:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000328:	fa1f f885 	uxth.w	r8, r5
 800032c:	2701      	movs	r7, #1
 800032e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fb0e 111c 	mls	r1, lr, ip, r1
 8000338:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800033c:	fb08 f10c 	mul.w	r1, r8, ip
 8000340:	4299      	cmp	r1, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x124>
 8000344:	18eb      	adds	r3, r5, r3
 8000346:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4299      	cmp	r1, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 8000352:	4684      	mov	ip, r0
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb1 f0fe 	udiv	r0, r1, lr
 800035c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000360:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000364:	fb08 f800 	mul.w	r8, r8, r0
 8000368:	45a0      	cmp	r8, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x14c>
 800036c:	192c      	adds	r4, r5, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x14a>
 8000374:	45a0      	cmp	r8, r4
 8000376:	f200 80b6 	bhi.w	80004e6 <__udivmoddi4+0x2b6>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 0408 	sub.w	r4, r4, r8
 8000380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000384:	e79f      	b.n	80002c6 <__udivmoddi4+0x96>
 8000386:	f1c7 0c20 	rsb	ip, r7, #32
 800038a:	40bb      	lsls	r3, r7
 800038c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000390:	ea4e 0e03 	orr.w	lr, lr, r3
 8000394:	fa01 f407 	lsl.w	r4, r1, r7
 8000398:	fa20 f50c 	lsr.w	r5, r0, ip
 800039c:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a4:	4325      	orrs	r5, r4
 80003a6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003aa:	0c2c      	lsrs	r4, r5, #16
 80003ac:	fb08 3319 	mls	r3, r8, r9, r3
 80003b0:	fa1f fa8e 	uxth.w	sl, lr
 80003b4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b8:	fb09 f40a 	mul.w	r4, r9, sl
 80003bc:	429c      	cmp	r4, r3
 80003be:	fa02 f207 	lsl.w	r2, r2, r7
 80003c2:	fa00 f107 	lsl.w	r1, r0, r7
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1e 0303 	adds.w	r3, lr, r3
 80003cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d0:	f080 8087 	bcs.w	80004e2 <__udivmoddi4+0x2b2>
 80003d4:	429c      	cmp	r4, r3
 80003d6:	f240 8084 	bls.w	80004e2 <__udivmoddi4+0x2b2>
 80003da:	f1a9 0902 	sub.w	r9, r9, #2
 80003de:	4473      	add	r3, lr
 80003e0:	1b1b      	subs	r3, r3, r4
 80003e2:	b2ad      	uxth	r5, r5
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1e 0404 	adds.w	r4, lr, r4
 80003fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000400:	d26b      	bcs.n	80004da <__udivmoddi4+0x2aa>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d969      	bls.n	80004da <__udivmoddi4+0x2aa>
 8000406:	3802      	subs	r0, #2
 8000408:	4474      	add	r4, lr
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c2      	mov	sl, r8
 800041a:	464b      	mov	r3, r9
 800041c:	d354      	bcc.n	80004c8 <__udivmoddi4+0x298>
 800041e:	d051      	beq.n	80004c4 <__udivmoddi4+0x294>
 8000420:	2e00      	cmp	r6, #0
 8000422:	d069      	beq.n	80004f8 <__udivmoddi4+0x2c8>
 8000424:	ebb1 050a 	subs.w	r5, r1, sl
 8000428:	eb64 0403 	sbc.w	r4, r4, r3
 800042c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000430:	40fd      	lsrs	r5, r7
 8000432:	40fc      	lsrs	r4, r7
 8000434:	ea4c 0505 	orr.w	r5, ip, r5
 8000438:	e9c6 5400 	strd	r5, r4, [r6]
 800043c:	2700      	movs	r7, #0
 800043e:	e747      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000440:	f1c2 0320 	rsb	r3, r2, #32
 8000444:	fa20 f703 	lsr.w	r7, r0, r3
 8000448:	4095      	lsls	r5, r2
 800044a:	fa01 f002 	lsl.w	r0, r1, r2
 800044e:	fa21 f303 	lsr.w	r3, r1, r3
 8000452:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000456:	4338      	orrs	r0, r7
 8000458:	0c01      	lsrs	r1, r0, #16
 800045a:	fbb3 f7fe 	udiv	r7, r3, lr
 800045e:	fa1f f885 	uxth.w	r8, r5
 8000462:	fb0e 3317 	mls	r3, lr, r7, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb07 f308 	mul.w	r3, r7, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	fa04 f402 	lsl.w	r4, r4, r2
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x256>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f107 3cff 	add.w	ip, r7, #4294967295
 800047c:	d22f      	bcs.n	80004de <__udivmoddi4+0x2ae>
 800047e:	428b      	cmp	r3, r1
 8000480:	d92d      	bls.n	80004de <__udivmoddi4+0x2ae>
 8000482:	3f02      	subs	r7, #2
 8000484:	4429      	add	r1, r5
 8000486:	1acb      	subs	r3, r1, r3
 8000488:	b281      	uxth	r1, r0
 800048a:	fbb3 f0fe 	udiv	r0, r3, lr
 800048e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000496:	fb00 f308 	mul.w	r3, r0, r8
 800049a:	428b      	cmp	r3, r1
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x27e>
 800049e:	1869      	adds	r1, r5, r1
 80004a0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a4:	d217      	bcs.n	80004d6 <__udivmoddi4+0x2a6>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d915      	bls.n	80004d6 <__udivmoddi4+0x2a6>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4429      	add	r1, r5
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b4:	e73b      	b.n	800032e <__udivmoddi4+0xfe>
 80004b6:	4637      	mov	r7, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e709      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004bc:	4607      	mov	r7, r0
 80004be:	e6e7      	b.n	8000290 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c4:	4541      	cmp	r1, r8
 80004c6:	d2ab      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004c8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004cc:	eb69 020e 	sbc.w	r2, r9, lr
 80004d0:	3801      	subs	r0, #1
 80004d2:	4613      	mov	r3, r2
 80004d4:	e7a4      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d6:	4660      	mov	r0, ip
 80004d8:	e7e9      	b.n	80004ae <__udivmoddi4+0x27e>
 80004da:	4618      	mov	r0, r3
 80004dc:	e795      	b.n	800040a <__udivmoddi4+0x1da>
 80004de:	4667      	mov	r7, ip
 80004e0:	e7d1      	b.n	8000486 <__udivmoddi4+0x256>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e77c      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	442c      	add	r4, r5
 80004ea:	e747      	b.n	800037c <__udivmoddi4+0x14c>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	442b      	add	r3, r5
 80004f2:	e72f      	b.n	8000354 <__udivmoddi4+0x124>
 80004f4:	4638      	mov	r0, r7
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xda>
 80004f8:	4637      	mov	r7, r6
 80004fa:	e6e9      	b.n	80002d0 <__udivmoddi4+0xa0>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <EpdOn>:
uint32_t gulImgBufAddr; //IT8951 Image buffer address



void EpdOn(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(EPD_OFF_GPIO_Port, EPD_OFF_Pin, RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2102      	movs	r1, #2
 8000508:	4810      	ldr	r0, [pc, #64]	; (800054c <EpdOn+0x4c>)
 800050a:	f002 fa33 	bl	8002974 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_ON_GPIO_Port, EPD_ON_Pin, SET);
 800050e:	2201      	movs	r2, #1
 8000510:	2101      	movs	r1, #1
 8000512:	480e      	ldr	r0, [pc, #56]	; (800054c <EpdOn+0x4c>)
 8000514:	f002 fa2e 	bl	8002974 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2101      	movs	r1, #1
 800051c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000520:	f002 fa28 	bl	8002974 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, SET);
 8000524:	2201      	movs	r2, #1
 8000526:	2110      	movs	r1, #16
 8000528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052c:	f002 fa22 	bl	8002974 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000530:	2001      	movs	r0, #1
 8000532:	f001 fd29 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_ON_GPIO_Port, EPD_ON_Pin, RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2101      	movs	r1, #1
 800053a:	4804      	ldr	r0, [pc, #16]	; (800054c <EpdOn+0x4c>)
 800053c:	f002 fa1a 	bl	8002974 <HAL_GPIO_WritePin>
	IT8951_Power();
 8000540:	f000 fa89 	bl	8000a56 <IT8951_Power>
	IT8951_Init();
 8000544:	f000 faa0 	bl	8000a88 <IT8951_Init>
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	48000800 	.word	0x48000800

08000550 <EpdOff>:

void EpdOff(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2101      	movs	r1, #1
 8000558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055c:	f002 fa0a 	bl	8002974 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	2110      	movs	r1, #16
 8000564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000568:	f002 fa04 	bl	8002974 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_ON_GPIO_Port, EPD_ON_Pin, RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2101      	movs	r1, #1
 8000570:	4809      	ldr	r0, [pc, #36]	; (8000598 <EpdOff+0x48>)
 8000572:	f002 f9ff 	bl	8002974 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_OFF_GPIO_Port, EPD_OFF_Pin, SET);
 8000576:	2201      	movs	r2, #1
 8000578:	2102      	movs	r1, #2
 800057a:	4807      	ldr	r0, [pc, #28]	; (8000598 <EpdOff+0x48>)
 800057c:	f002 f9fa 	bl	8002974 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000580:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000584:	f001 fd00 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_OFF_GPIO_Port, EPD_OFF_Pin, RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2102      	movs	r1, #2
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <EpdOff+0x48>)
 800058e:	f002 f9f1 	bl	8002974 <HAL_GPIO_WritePin>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	48000800 	.word	0x48000800

0800059c <LCDWaitForReady>:

//-----------------------------------------------------------
//Host controller function 1---Wait for host data Bus Ready
//-----------------------------------------------------------
void LCDWaitForReady()
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0

	//while(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET )

	uint8_t ulData = HAL_GPIO_ReadPin(EPD_HRDY_GPIO_Port, EPD_HRDY_Pin);
 80005a2:	2120      	movs	r1, #32
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a8:	f002 f9cc 	bl	8002944 <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	71fb      	strb	r3, [r7, #7]
	while(ulData == 0)
 80005b0:	e006      	b.n	80005c0 <LCDWaitForReady+0x24>
	{
		ulData = HAL_GPIO_ReadPin(EPD_HRDY_GPIO_Port, EPD_HRDY_Pin);
 80005b2:	2120      	movs	r1, #32
 80005b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b8:	f002 f9c4 	bl	8002944 <HAL_GPIO_ReadPin>
 80005bc:	4603      	mov	r3, r0
 80005be:	71fb      	strb	r3, [r7, #7]
	while(ulData == 0)
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0f5      	beq.n	80005b2 <LCDWaitForReady+0x16>
	}
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <LCDWriteCmdCode>:

//-----------------------------------------------------------
//Host controller function 2---Write command code to host data Bus
//-----------------------------------------------------------
void LCDWriteCmdCode(uint16_t usCmdCode)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
	//uint16_t wPreamble = 0x6000;


	//uint8_t wPreamble[2] = {0x00, 0x60};
	//uint8_t wDat[2] = {usCmdCode, usCmdCode>>8};
	uint8_t dat[4]={0x00, 0x60, usCmdCode, usCmdCode>>8};
 80005da:	2300      	movs	r3, #0
 80005dc:	733b      	strb	r3, [r7, #12]
 80005de:	2360      	movs	r3, #96	; 0x60
 80005e0:	737b      	strb	r3, [r7, #13]
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	73bb      	strb	r3, [r7, #14]
 80005e8:	88fb      	ldrh	r3, [r7, #6]
 80005ea:	0a1b      	lsrs	r3, r3, #8
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	73fb      	strb	r3, [r7, #15]
	LCDWaitForReady();
 80005f2:	f7ff ffd3 	bl	800059c <LCDWaitForReady>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2101      	movs	r1, #1
 80005fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fe:	f002 f9b9 	bl	8002974 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, dat, 2, HAL_MAX_DELAY);
 8000602:	f107 010c 	add.w	r1, r7, #12
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
 800060a:	2202      	movs	r2, #2
 800060c:	4806      	ldr	r0, [pc, #24]	; (8000628 <LCDWriteCmdCode+0x58>)
 800060e:	f003 feed 	bl	80043ec <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
	//LCDWaitForReady();
	//HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000612:	2201      	movs	r2, #1
 8000614:	2101      	movs	r1, #1
 8000616:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061a:	f002 f9ab 	bl	8002974 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &CmdMsb, 1, HAL_MAX_DELAY);
	HAL_SPI_Transmit(&hspi1, &CmdLsb, 1, HAL_MAX_DELAY);

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
*/
}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000078 	.word	0x20000078

0800062c <LCDWriteData>:

//-----------------------------------------------------------
//Host controller function 3---Write Data to host data Bus
//-----------------------------------------------------------
void LCDWriteData(uint16_t usData)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]

	uint8_t dat[4]={ 0x00, 0x00, (uint8_t)usData,(uint8_t)( usData>>8)};
 8000636:	2300      	movs	r3, #0
 8000638:	733b      	strb	r3, [r7, #12]
 800063a:	2300      	movs	r3, #0
 800063c:	737b      	strb	r3, [r7, #13]
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	73bb      	strb	r3, [r7, #14]
 8000644:	88fb      	ldrh	r3, [r7, #6]
 8000646:	0a1b      	lsrs	r3, r3, #8
 8000648:	b29b      	uxth	r3, r3
 800064a:	b2db      	uxtb	r3, r3
 800064c:	73fb      	strb	r3, [r7, #15]
	//uint8_t wPreamble[2] = {0x00, 0x00};
	//uint8_t wDat[2] = { (uint8_t)usData,(uint8_t)( usData>>8)};
	LCDWaitForReady();
 800064e:	f7ff ffa5 	bl	800059c <LCDWaitForReady>

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2101      	movs	r1, #1
 8000656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065a:	f002 f98b 	bl	8002974 <HAL_GPIO_WritePin>
	//HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
	HAL_SPI_Transmit(&hspi1, dat, 2, HAL_MAX_DELAY);
 800065e:	f107 010c 	add.w	r1, r7, #12
 8000662:	f04f 33ff 	mov.w	r3, #4294967295
 8000666:	2202      	movs	r2, #2
 8000668:	4806      	ldr	r0, [pc, #24]	; (8000684 <LCDWriteData+0x58>)
 800066a:	f003 febf 	bl	80043ec <HAL_SPI_Transmit>
	//LCDWaitForReady();
	//HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2101      	movs	r1, #1
 8000672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000676:	f002 f97d 	bl	8002974 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &DatLsb, 1, HAL_MAX_DELAY);

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000078 	.word	0x20000078

08000688 <LCDWriteNData>:

void LCDWriteNData(uint16_t* pwBuf, uint32_t ulSizeWordCnt)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
	//uint32_t i;

	//uint8_t dma = 1;
	uint8_t wPreamble[2] = {0x00, 0x00};
 8000692:	2300      	movs	r3, #0
 8000694:	723b      	strb	r3, [r7, #8]
 8000696:	2300      	movs	r3, #0
 8000698:	727b      	strb	r3, [r7, #9]
	//uint8_t wDat[2];
	LCDWaitForReady();
 800069a:	f7ff ff7f 	bl	800059c <LCDWaitForReady>
	uint8_t* Buf = (uint8_t*)pwBuf;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2101      	movs	r1, #1
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f002 f963 	bl	8002974 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 80006ae:	f107 0108 	add.w	r1, r7, #8
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	2201      	movs	r2, #1
 80006b8:	480a      	ldr	r0, [pc, #40]	; (80006e4 <LCDWriteNData+0x5c>)
 80006ba:	f003 fe97 	bl	80043ec <HAL_SPI_Transmit>
	LCDWaitForReady();
 80006be:	f7ff ff6d 	bl	800059c <LCDWaitForReady>
	//HAL_SPI_Transmit_DMA(&hspi1, Buf, ulSizeWordCnt);
	HAL_SPI_Transmit(&hspi1, Buf, ulSizeWordCnt, HAL_MAX_DELAY);
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
 80006c6:	683a      	ldr	r2, [r7, #0]
 80006c8:	68f9      	ldr	r1, [r7, #12]
 80006ca:	4806      	ldr	r0, [pc, #24]	; (80006e4 <LCDWriteNData+0x5c>)
 80006cc:	f003 fe8e 	bl	80043ec <HAL_SPI_Transmit>
//		wDat[1]=pwBuf[i]>>8;
//		HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
//		}
//	while(dma == 1)
//	{}
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2101      	movs	r1, #1
 80006d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d8:	f002 f94c 	bl	8002974 <HAL_GPIO_WritePin>
	}

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000078 	.word	0x20000078

080006e8 <LCDReadData>:

//-----------------------------------------------------------
//Host controller function 4---Read Data from host data Bus
//-----------------------------------------------------------
uint16_t LCDReadData()
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af02      	add	r7, sp, #8

	uint8_t wRLsb[2];
	uint16_t wRData;
	uint8_t wdummy[2] = {0};
 80006ee:	2300      	movs	r3, #0
 80006f0:	813b      	strh	r3, [r7, #8]
	uint8_t rdummy[2] = {0};
 80006f2:	2300      	movs	r3, #0
 80006f4:	80bb      	strh	r3, [r7, #4]
	uint8_t wPreamble[2] = {0x00, 0x10};
 80006f6:	2300      	movs	r3, #0
 80006f8:	703b      	strb	r3, [r7, #0]
 80006fa:	2310      	movs	r3, #16
 80006fc:	707b      	strb	r3, [r7, #1]

	LCDWaitForReady();
 80006fe:	f7ff ff4d 	bl	800059c <LCDWaitForReady>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2101      	movs	r1, #1
 8000706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070a:	f002 f933 	bl	8002974 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 800070e:	4639      	mov	r1, r7
 8000710:	f04f 33ff 	mov.w	r3, #4294967295
 8000714:	2201      	movs	r2, #1
 8000716:	4818      	ldr	r0, [pc, #96]	; (8000778 <LCDReadData+0x90>)
 8000718:	f003 fe68 	bl	80043ec <HAL_SPI_Transmit>
	LCDWaitForReady();
 800071c:	f7ff ff3e 	bl	800059c <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, rdummy, 1,HAL_MAX_DELAY);
 8000720:	1d3a      	adds	r2, r7, #4
 8000722:	f107 0108 	add.w	r1, r7, #8
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2301      	movs	r3, #1
 800072e:	4812      	ldr	r0, [pc, #72]	; (8000778 <LCDReadData+0x90>)
 8000730:	f003 ffb1 	bl	8004696 <HAL_SPI_TransmitReceive>

	LCDWaitForReady();
 8000734:	f7ff ff32 	bl	800059c <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, wRLsb, 1,HAL_MAX_DELAY);
 8000738:	f107 020c 	add.w	r2, r7, #12
 800073c:	f107 0108 	add.w	r1, r7, #8
 8000740:	f04f 33ff 	mov.w	r3, #4294967295
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	2301      	movs	r3, #1
 8000748:	480b      	ldr	r0, [pc, #44]	; (8000778 <LCDReadData+0x90>)
 800074a:	f003 ffa4 	bl	8004696 <HAL_SPI_TransmitReceive>

	wRData = wRLsb[1]<<8;
 800074e:	7b7b      	ldrb	r3, [r7, #13]
 8000750:	b29b      	uxth	r3, r3
 8000752:	021b      	lsls	r3, r3, #8
 8000754:	81fb      	strh	r3, [r7, #14]
	wRData |= wRLsb[0];
 8000756:	7b3b      	ldrb	r3, [r7, #12]
 8000758:	b29a      	uxth	r2, r3
 800075a:	89fb      	ldrh	r3, [r7, #14]
 800075c:	4313      	orrs	r3, r2
 800075e:	81fb      	strh	r3, [r7, #14]
	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000760:	2201      	movs	r2, #1
 8000762:	2101      	movs	r1, #1
 8000764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000768:	f002 f904 	bl	8002974 <HAL_GPIO_WritePin>

	return wRData;
 800076c:	89fb      	ldrh	r3, [r7, #14]
	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);

	return wRData;
	*/
}
 800076e:	4618      	mov	r0, r3
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000078 	.word	0x20000078

0800077c <LCDReadNData>:

//-----------------------------------------------------------
//  Read Burst N words Data
//-----------------------------------------------------------
void LCDReadNData(uint16_t* pwBuf, uint32_t ulSizeWordCnt)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af02      	add	r7, sp, #8
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]

	uint32_t i;

	uint8_t wRLsb[2];
	//uint16_t wRData;
	uint8_t wdummy[2] = {0};
 8000786:	2300      	movs	r3, #0
 8000788:	82bb      	strh	r3, [r7, #20]
	uint8_t rdummy[2] = {0};
 800078a:	2300      	movs	r3, #0
 800078c:	823b      	strh	r3, [r7, #16]
	uint8_t wPreamble[2] = {0x00, 0x10};
 800078e:	2300      	movs	r3, #0
 8000790:	733b      	strb	r3, [r7, #12]
 8000792:	2310      	movs	r3, #16
 8000794:	737b      	strb	r3, [r7, #13]
	LCDWaitForReady();
 8000796:	f7ff ff01 	bl	800059c <LCDWaitForReady>

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2101      	movs	r1, #1
 800079e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a2:	f002 f8e7 	bl	8002974 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 80007a6:	f107 010c 	add.w	r1, r7, #12
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
 80007ae:	2201      	movs	r2, #1
 80007b0:	4823      	ldr	r0, [pc, #140]	; (8000840 <LCDReadNData+0xc4>)
 80007b2:	f003 fe1b 	bl	80043ec <HAL_SPI_Transmit>

	LCDWaitForReady();
 80007b6:	f7ff fef1 	bl	800059c <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, rdummy, 1,HAL_MAX_DELAY);
 80007ba:	f107 0210 	add.w	r2, r7, #16
 80007be:	f107 0114 	add.w	r1, r7, #20
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	2301      	movs	r3, #1
 80007ca:	481d      	ldr	r0, [pc, #116]	; (8000840 <LCDReadNData+0xc4>)
 80007cc:	f003 ff63 	bl	8004696 <HAL_SPI_TransmitReceive>

	LCDWaitForReady();
 80007d0:	f7ff fee4 	bl	800059c <LCDWaitForReady>

		for(i=0;i<ulSizeWordCnt;i++)
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
 80007d8:	e024      	b.n	8000824 <LCDReadNData+0xa8>
		{
			HAL_SPI_TransmitReceive(&hspi1, wdummy, wRLsb, 1,HAL_MAX_DELAY);
 80007da:	f107 0218 	add.w	r2, r7, #24
 80007de:	f107 0114 	add.w	r1, r7, #20
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	2301      	movs	r3, #1
 80007ea:	4815      	ldr	r0, [pc, #84]	; (8000840 <LCDReadNData+0xc4>)
 80007ec:	f003 ff53 	bl	8004696 <HAL_SPI_TransmitReceive>
			pwBuf[i] = wRLsb[1]<<8;
 80007f0:	7e7b      	ldrb	r3, [r7, #25]
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	69fb      	ldr	r3, [r7, #28]
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	6879      	ldr	r1, [r7, #4]
 80007fa:	440b      	add	r3, r1
 80007fc:	0212      	lsls	r2, r2, #8
 80007fe:	b292      	uxth	r2, r2
 8000800:	801a      	strh	r2, [r3, #0]
			pwBuf[i] |= wRLsb[0];
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	4413      	add	r3, r2
 800080a:	8819      	ldrh	r1, [r3, #0]
 800080c:	7e3b      	ldrb	r3, [r7, #24]
 800080e:	b29a      	uxth	r2, r3
 8000810:	69fb      	ldr	r3, [r7, #28]
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	4403      	add	r3, r0
 8000818:	430a      	orrs	r2, r1
 800081a:	b292      	uxth	r2, r2
 800081c:	801a      	strh	r2, [r3, #0]
		for(i=0;i<ulSizeWordCnt;i++)
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	3301      	adds	r3, #1
 8000822:	61fb      	str	r3, [r7, #28]
 8000824:	69fa      	ldr	r2, [r7, #28]
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	429a      	cmp	r2, r3
 800082a:	d3d6      	bcc.n	80007da <LCDReadNData+0x5e>
		}

		HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 800082c:	2201      	movs	r2, #1
 800082e:	2101      	movs	r1, #1
 8000830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000834:	f002 f89e 	bl	8002974 <HAL_GPIO_WritePin>
	}

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 8000838:	bf00      	nop
 800083a:	3720      	adds	r7, #32
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000078 	.word	0x20000078

08000844 <LCDSendCmdArg>:

//-----------------------------------------------------------
//Host controller function 5---Write command to host data Bus with aruments
//-----------------------------------------------------------
void LCDSendCmdArg(uint16_t usCmdCode,uint16_t* pArg, uint16_t usNumArg)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	6039      	str	r1, [r7, #0]
 800084e:	80fb      	strh	r3, [r7, #6]
 8000850:	4613      	mov	r3, r2
 8000852:	80bb      	strh	r3, [r7, #4]
     uint16_t i;
     //Send Cmd code
     LCDWriteCmdCode(usCmdCode);
 8000854:	88fb      	ldrh	r3, [r7, #6]
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff feba 	bl	80005d0 <LCDWriteCmdCode>
     //Send Data
     for(i=0;i<usNumArg;i++)
 800085c:	2300      	movs	r3, #0
 800085e:	81fb      	strh	r3, [r7, #14]
 8000860:	e00a      	b.n	8000878 <LCDSendCmdArg+0x34>
     {
         LCDWriteData(pArg[i]);
 8000862:	89fb      	ldrh	r3, [r7, #14]
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	683a      	ldr	r2, [r7, #0]
 8000868:	4413      	add	r3, r2
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fedd 	bl	800062c <LCDWriteData>
     for(i=0;i<usNumArg;i++)
 8000872:	89fb      	ldrh	r3, [r7, #14]
 8000874:	3301      	adds	r3, #1
 8000876:	81fb      	strh	r3, [r7, #14]
 8000878:	89fa      	ldrh	r2, [r7, #14]
 800087a:	88bb      	ldrh	r3, [r7, #4]
 800087c:	429a      	cmp	r2, r3
 800087e:	d3f0      	bcc.n	8000862 <LCDSendCmdArg+0x1e>
     }
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <IT8951ReadReg>:

//-----------------------------------------------------------
//Host Cmd 4---REG_RD
//-----------------------------------------------------------
uint16_t IT8951ReadReg(uint16_t usRegAddr)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
	uint16_t usData;

	//Send Cmd and Register Address
	LCDWriteCmdCode(IT8951_TCON_REG_RD);
 8000892:	2010      	movs	r0, #16
 8000894:	f7ff fe9c 	bl	80005d0 <LCDWriteCmdCode>
	LCDWriteData(usRegAddr);
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fec6 	bl	800062c <LCDWriteData>
	//Read data from Host Data bus
	usData = LCDReadData();
 80008a0:	f7ff ff22 	bl	80006e8 <LCDReadData>
 80008a4:	4603      	mov	r3, r0
 80008a6:	81fb      	strh	r3, [r7, #14]
	return usData;
 80008a8:	89fb      	ldrh	r3, [r7, #14]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <IT8951WriteReg>:
//-----------------------------------------------------------
//Host Cmd 5---REG_WR
//-----------------------------------------------------------
void IT8951WriteReg(uint16_t usRegAddr,uint16_t usValue)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	4603      	mov	r3, r0
 80008ba:	460a      	mov	r2, r1
 80008bc:	80fb      	strh	r3, [r7, #6]
 80008be:	4613      	mov	r3, r2
 80008c0:	80bb      	strh	r3, [r7, #4]
	//Send Cmd , Register Address and Write Value
	LCDWriteCmdCode(IT8951_TCON_REG_WR);
 80008c2:	2011      	movs	r0, #17
 80008c4:	f7ff fe84 	bl	80005d0 <LCDWriteCmdCode>
	LCDWriteData(usRegAddr);
 80008c8:	88fb      	ldrh	r3, [r7, #6]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff feae 	bl	800062c <LCDWriteData>
	LCDWriteData(usValue);
 80008d0:	88bb      	ldrh	r3, [r7, #4]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff feaa 	bl	800062c <LCDWriteData>
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <IT8951LoadImgAreaStart>:
}
//-----------------------------------------------------------
//Host Cmd 11---LD_IMG_AREA
//-----------------------------------------------------------
void IT8951LoadImgAreaStart(IT8951LdImgInfo* pstLdImgInfo ,IT8951AreaImgInfo* pstAreaImgInfo)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
    uint16_t usArg[5];
    //Setting Argument for Load image start
    usArg[0] = (pstLdImgInfo->usEndianType << 8 )
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	021b      	lsls	r3, r3, #8
    |(pstLdImgInfo->usPixelFormat << 4)
 80008f0:	b21a      	sxth	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	885b      	ldrh	r3, [r3, #2]
 80008f6:	011b      	lsls	r3, r3, #4
 80008f8:	b21b      	sxth	r3, r3
 80008fa:	4313      	orrs	r3, r2
 80008fc:	b21a      	sxth	r2, r3
    |(pstLdImgInfo->usRotate);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	889b      	ldrh	r3, [r3, #4]
 8000902:	b21b      	sxth	r3, r3
 8000904:	4313      	orrs	r3, r2
 8000906:	b21b      	sxth	r3, r3
 8000908:	b29b      	uxth	r3, r3
    usArg[0] = (pstLdImgInfo->usEndianType << 8 )
 800090a:	81bb      	strh	r3, [r7, #12]
    usArg[1] = pstAreaImgInfo->usX;
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	881b      	ldrh	r3, [r3, #0]
 8000910:	81fb      	strh	r3, [r7, #14]
    usArg[2] = pstAreaImgInfo->usY;
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	885b      	ldrh	r3, [r3, #2]
 8000916:	823b      	strh	r3, [r7, #16]
    usArg[3] = pstAreaImgInfo->usWidth;
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	889b      	ldrh	r3, [r3, #4]
 800091c:	827b      	strh	r3, [r7, #18]
    usArg[4] = pstAreaImgInfo->usHeight;
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	88db      	ldrh	r3, [r3, #6]
 8000922:	82bb      	strh	r3, [r7, #20]
    //Send Cmd and Args
    LCDSendCmdArg(IT8951_TCON_LD_IMG_AREA , usArg , 5);
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	2205      	movs	r2, #5
 800092a:	4619      	mov	r1, r3
 800092c:	2021      	movs	r0, #33	; 0x21
 800092e:	f7ff ff89 	bl	8000844 <LCDSendCmdArg>
}
 8000932:	bf00      	nop
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <IT8951LoadImgEnd>:
//-----------------------------------------------------------
//Host Cmd 12---LD_IMG_END
//-----------------------------------------------------------
void IT8951LoadImgEnd(void)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0
    LCDWriteCmdCode(IT8951_TCON_LD_IMG_END);
 800093e:	2022      	movs	r0, #34	; 0x22
 8000940:	f7ff fe46 	bl	80005d0 <LCDWriteCmdCode>
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}

08000948 <GetIT8951SystemInfo>:

void GetIT8951SystemInfo(void* pBuf)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	uint16_t* pusWord = (uint16_t*)pBuf;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	60fb      	str	r3, [r7, #12]
	//IT8951DevInfo* pstDevInfo;

	//Send I80 CMD
	LCDWriteCmdCode(USDEF_I80_CMD_GET_DEV_INFO);
 8000954:	f240 3002 	movw	r0, #770	; 0x302
 8000958:	f7ff fe3a 	bl	80005d0 <LCDWriteCmdCode>

	//Burst Read Request for SPI interface only
	LCDReadNData(pusWord, sizeof(IT8951DevInfo)/2);//Polling HRDY for each words(2-bytes) if possible
 800095c:	2114      	movs	r1, #20
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f7ff ff0c 	bl	800077c <LCDReadNData>
//	printf("Image Buffer Address = %X\r\n",
//	pstDevInfo->usImgBufAddrL | (pstDevInfo->usImgBufAddrH << 16));
	//Show Firmware and LUT Version
//	printf("FW Version = %s\r\n", (uint8_t*)pstDevInfo->usFWVersion);
//	printf("LUT Version = %s\r\n", (uint8_t*)pstDevInfo->usLUTVersion);
}
 8000964:	bf00      	nop
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <IT8951SetImgBufBaseAddr>:

//-----------------------------------------------------------
//Initial function 2---Set Image buffer base address
//-----------------------------------------------------------
void IT8951SetImgBufBaseAddr(uint32_t ulImgBufAddr)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	uint16_t usWordH = (uint16_t)((ulImgBufAddr >> 16) & 0x0000FFFF);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	0c1b      	lsrs	r3, r3, #16
 8000978:	81fb      	strh	r3, [r7, #14]
	uint16_t usWordL = (uint16_t)( ulImgBufAddr & 0x0000FFFF);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	81bb      	strh	r3, [r7, #12]
	//Write LISAR Reg
	IT8951WriteReg(LISAR + 2 ,usWordH);
 800097e:	89fb      	ldrh	r3, [r7, #14]
 8000980:	4619      	mov	r1, r3
 8000982:	f240 200a 	movw	r0, #522	; 0x20a
 8000986:	f7ff ff94 	bl	80008b2 <IT8951WriteReg>
	IT8951WriteReg(LISAR ,usWordL);
 800098a:	89bb      	ldrh	r3, [r7, #12]
 800098c:	4619      	mov	r1, r3
 800098e:	f44f 7002 	mov.w	r0, #520	; 0x208
 8000992:	f7ff ff8e 	bl	80008b2 <IT8951WriteReg>
}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <IT8951WaitForDisplayReady>:
//-----------------------------------------------------------
//Display function 1---Wait for LUT Engine Finish
//                     Polling Display Engine Ready by LUTNo
//-----------------------------------------------------------
void IT8951WaitForDisplayReady()
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0
	//Check IT8951 Register LUTAFSR => NonZero Busy, 0 - Free
	while(IT8951ReadReg(LUTAFSR));
 80009a2:	bf00      	nop
 80009a4:	f241 2024 	movw	r0, #4644	; 0x1224
 80009a8:	f7ff ff6e 	bl	8000888 <IT8951ReadReg>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d1f8      	bne.n	80009a4 <IT8951WaitForDisplayReady+0x6>
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <IT8951HostAreaPackedPixelWrite>:

//-----------------------------------------------------------
//Display function 2---Load Image Area process
//-----------------------------------------------------------
void IT8951HostAreaPackedPixelWrite(IT8951LdImgInfo* pstLdImgInfo,IT8951AreaImgInfo* pstAreaImgInfo)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b084      	sub	sp, #16
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
 80009be:	6039      	str	r1, [r7, #0]
	//uint32_t i,j;
	//Source buffer address of Host
	uint16_t* pusFrameBuf = (uint16_t*)pstLdImgInfo->ulStartFBAddr;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	60fb      	str	r3, [r7, #12]

	//Set Image buffer(IT8951) Base address
	IT8951SetImgBufBaseAddr(pstLdImgInfo->ulImgBufBaseAddr);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ffce 	bl	800096c <IT8951SetImgBufBaseAddr>
	//Send Load Image start Cmd
	IT8951LoadImgAreaStart(pstLdImgInfo , pstAreaImgInfo);
 80009d0:	6839      	ldr	r1, [r7, #0]
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff ff84 	bl	80008e0 <IT8951LoadImgAreaStart>
	//Host Write Data
	//LCDWriteNData(pusFrameBuf, (pstAreaImgInfo->usHeight*pstAreaImgInfo->usWidth/2));
	LCDWriteNData(pusFrameBuf, (pstAreaImgInfo->usHeight*pstAreaImgInfo->usWidth/4));
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	88db      	ldrh	r3, [r3, #6]
 80009dc:	461a      	mov	r2, r3
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	889b      	ldrh	r3, [r3, #4]
 80009e2:	fb03 f302 	mul.w	r3, r3, r2
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	da00      	bge.n	80009ec <IT8951HostAreaPackedPixelWrite+0x36>
 80009ea:	3303      	adds	r3, #3
 80009ec:	109b      	asrs	r3, r3, #2
 80009ee:	4619      	mov	r1, r3
 80009f0:	68f8      	ldr	r0, [r7, #12]
 80009f2:	f7ff fe49 	bl	8000688 <LCDWriteNData>
					LCDWriteData(*pusFrameBuf);
					pusFrameBuf++;
			}
	}*/
	//Send Load Img End Command
	IT8951LoadImgEnd();
 80009f6:	f7ff ffa0 	bl	800093a <IT8951LoadImgEnd>
}
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <IT8951DisplayArea>:

//-----------------------------------------------------------
//Display functions 3---Application for Display panel Area
//-----------------------------------------------------------
void IT8951DisplayArea(uint16_t usX, uint16_t usY, uint16_t usW, uint16_t usH, uint16_t usDpyMode)
{
 8000a02:	b590      	push	{r4, r7, lr}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	4604      	mov	r4, r0
 8000a0a:	4608      	mov	r0, r1
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	461a      	mov	r2, r3
 8000a10:	4623      	mov	r3, r4
 8000a12:	80fb      	strh	r3, [r7, #6]
 8000a14:	4603      	mov	r3, r0
 8000a16:	80bb      	strh	r3, [r7, #4]
 8000a18:	460b      	mov	r3, r1
 8000a1a:	807b      	strh	r3, [r7, #2]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	803b      	strh	r3, [r7, #0]
	//Send I80 Display Command (User defined command of IT8951)
	LCDWriteCmdCode(USDEF_I80_CMD_DPY_AREA); //0x0034
 8000a20:	2034      	movs	r0, #52	; 0x34
 8000a22:	f7ff fdd5 	bl	80005d0 <LCDWriteCmdCode>
	//Write arguments
	LCDWriteData(usX);
 8000a26:	88fb      	ldrh	r3, [r7, #6]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff fdff 	bl	800062c <LCDWriteData>
	LCDWriteData(usY);
 8000a2e:	88bb      	ldrh	r3, [r7, #4]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fdfb 	bl	800062c <LCDWriteData>
	LCDWriteData(usW);
 8000a36:	887b      	ldrh	r3, [r7, #2]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fdf7 	bl	800062c <LCDWriteData>
	LCDWriteData(usH);
 8000a3e:	883b      	ldrh	r3, [r7, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fdf3 	bl	800062c <LCDWriteData>
	LCDWriteData(usDpyMode);
 8000a46:	8b3b      	ldrh	r3, [r7, #24]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fdef 	bl	800062c <LCDWriteData>
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd90      	pop	{r4, r7, pc}

08000a56 <IT8951_Power>:

//-----------------------------------------------------------
//Powerup the controller
//-----------------------------------------------------------
void IT8951_Power()
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0
	// Set chip select and reset controller
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a62:	f001 ff87 	bl	8002974 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2110      	movs	r1, #16
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6e:	f001 ff81 	bl	8002974 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f001 fa88 	bl	8001f88 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2110      	movs	r1, #16
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a80:	f001 ff78 	bl	8002974 <HAL_GPIO_WritePin>
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <IT8951_Init>:
//-----------------------------------------------------------
//Test function 1---Software Initial
//-----------------------------------------------------------
uint8_t IT8951_Init()
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	//Get Device Info
	GetIT8951SystemInfo(&gstI80DevInfo);
 8000a8c:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <IT8951_Init+0x2c>)
 8000a8e:	f7ff ff5b 	bl	8000948 <GetIT8951SystemInfo>
 	gulImgBufAddr = gstI80DevInfo.usImgBufAddrL | (gstI80DevInfo.usImgBufAddrH << 16);
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <IT8951_Init+0x2c>)
 8000a94:	889b      	ldrh	r3, [r3, #4]
 8000a96:	461a      	mov	r2, r3
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <IT8951_Init+0x2c>)
 8000a9a:	88db      	ldrh	r3, [r3, #6]
 8000a9c:	041b      	lsls	r3, r3, #16
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <IT8951_Init+0x30>)
 8000aa4:	601a      	str	r2, [r3, #0]

 	//Set to Enable I80 Packed mode
 	IT8951WriteReg(I80CPCR, 0x0001);
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	2004      	movs	r0, #4
 8000aaa:	f7ff ff02 	bl	80008b2 <IT8951WriteReg>
 	//EpdDriverLoadTemplate();
	return 0;
 8000aae:	2300      	movs	r3, #0
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000034 	.word	0x20000034
 8000ab8:	2000005c 	.word	0x2000005c

08000abc <EpdDriverLoadTemplate>:



extern const unsigned char Kalender[];
void EpdDriverLoadTemplate()
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
	IT8951LdImgInfo stLdImgInfo;
	IT8951AreaImgInfo stAreaImgInfo;
	IT8951WaitForDisplayReady();
 8000ac2:	f7ff ff6c 	bl	800099e <IT8951WaitForDisplayReady>

	//Setting Load image information
	stLdImgInfo.ulStartFBAddr    = (uint32_t)Kalender;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <EpdDriverLoadTemplate+0x4c>)
 8000ac8:	613b      	str	r3, [r7, #16]
	stLdImgInfo.usEndianType     = IT8951_LDIMG_L_ENDIAN;
 8000aca:	2300      	movs	r3, #0
 8000acc:	813b      	strh	r3, [r7, #8]
	stLdImgInfo.usPixelFormat    = IT8951_4BPP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	817b      	strh	r3, [r7, #10]
	stLdImgInfo.usRotate         = IT8951_ROTATE_0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	81bb      	strh	r3, [r7, #12]
	stLdImgInfo.ulImgBufBaseAddr = gulImgBufAddr;
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <EpdDriverLoadTemplate+0x50>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	617b      	str	r3, [r7, #20]
	//Set Load Area
	stAreaImgInfo.usX      = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	803b      	strh	r3, [r7, #0]
	stAreaImgInfo.usY      = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	807b      	strh	r3, [r7, #2]
	stAreaImgInfo.usWidth  = gstI80DevInfo.usPanelW;
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <EpdDriverLoadTemplate+0x54>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	80bb      	strh	r3, [r7, #4]
 	stAreaImgInfo.usHeight = gstI80DevInfo.usPanelH;
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <EpdDriverLoadTemplate+0x54>)
 8000aec:	885b      	ldrh	r3, [r3, #2]
 8000aee:	80fb      	strh	r3, [r7, #6]

	//Load Image from Host to IT8951 Image Buffer
	IT8951HostAreaPackedPixelWrite(&stLdImgInfo, &stAreaImgInfo);//Display function 2
 8000af0:	463a      	mov	r2, r7
 8000af2:	f107 0308 	add.w	r3, r7, #8
 8000af6:	4611      	mov	r1, r2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff5c 	bl	80009b6 <IT8951HostAreaPackedPixelWrite>
	//Display Area ?V (x,y,w,h) with mode 2 for fast gray clear mode - depends on current waveform
	//HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
	//IT8951DisplayArea(stAreaImgInfo.usX ,stAreaImgInfo.usY, gstI80DevInfo.usPanelW, gstI80DevInfo.usPanelH, 2);
	//IT8951Sleep();
}
 8000afe:	bf00      	nop
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	080067b0 	.word	0x080067b0
 8000b0c:	2000005c 	.word	0x2000005c
 8000b10:	20000034 	.word	0x20000034

08000b14 <EpdDriverDrawBox>:


void EpdDriverDrawBox(uint8_t* buffer, uint16_t usX, uint16_t usY, uint16_t usWidth, uint16_t usHeight)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	4608      	mov	r0, r1
 8000b1e:	4611      	mov	r1, r2
 8000b20:	461a      	mov	r2, r3
 8000b22:	4603      	mov	r3, r0
 8000b24:	817b      	strh	r3, [r7, #10]
 8000b26:	460b      	mov	r3, r1
 8000b28:	813b      	strh	r3, [r7, #8]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	80fb      	strh	r3, [r7, #6]
	IT8951LdImgInfo stLdImgInfo;
	IT8951AreaImgInfo stAreaImgInfo;
	IT8951WaitForDisplayReady();
 8000b2e:	f7ff ff36 	bl	800099e <IT8951WaitForDisplayReady>

	//Setting Load image information
	stLdImgInfo.ulStartFBAddr    = (uint32_t)buffer;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	623b      	str	r3, [r7, #32]
	stLdImgInfo.usEndianType     = IT8951_LDIMG_L_ENDIAN;
 8000b36:	2300      	movs	r3, #0
 8000b38:	833b      	strh	r3, [r7, #24]
	stLdImgInfo.usPixelFormat    = IT8951_8BPP;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	837b      	strh	r3, [r7, #26]
	stLdImgInfo.usRotate         = IT8951_ROTATE_0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	83bb      	strh	r3, [r7, #28]
	stLdImgInfo.ulImgBufBaseAddr = gulImgBufAddr;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <EpdDriverDrawBox+0x5c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
	//Set Load Area
	stAreaImgInfo.usX      = usX;
 8000b48:	897b      	ldrh	r3, [r7, #10]
 8000b4a:	823b      	strh	r3, [r7, #16]
	stAreaImgInfo.usY      = usY;
 8000b4c:	893b      	ldrh	r3, [r7, #8]
 8000b4e:	827b      	strh	r3, [r7, #18]
	stAreaImgInfo.usWidth  = usWidth;
 8000b50:	88fb      	ldrh	r3, [r7, #6]
 8000b52:	82bb      	strh	r3, [r7, #20]
 	stAreaImgInfo.usHeight = usHeight;
 8000b54:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000b56:	82fb      	strh	r3, [r7, #22]

	//Load Image from Host to IT8951 Image Buffer
	IT8951HostAreaPackedPixelWrite(&stLdImgInfo, &stAreaImgInfo);//Display function 2
 8000b58:	f107 0210 	add.w	r2, r7, #16
 8000b5c:	f107 0318 	add.w	r3, r7, #24
 8000b60:	4611      	mov	r1, r2
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ff27 	bl	80009b6 <IT8951HostAreaPackedPixelWrite>
	//Display Area ?V (x,y,w,h) with mode 2 for fast gray clear mode - depends on current waveform
	//IT8951DisplayArea(stAreaImgInfo.usX,stAreaImgInfo.usY, stAreaImgInfo.usWidth, stAreaImgInfo.usHeight, 2);
	//IT8951Sleep();
}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	2000005c 	.word	0x2000005c

08000b74 <EpdDriverShowDisp>:

void EpdDriverShowDisp()
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af02      	add	r7, sp, #8
	IT8951DisplayArea(0,0,1200,825, 2);
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	f240 3339 	movw	r3, #825	; 0x339
 8000b82:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000b86:	2100      	movs	r1, #0
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f7ff ff3a 	bl	8000a02 <IT8951DisplayArea>
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <setNewImage>:
//    width   :   The width of the picture
//    Height  :   The height of the picture
//    Color   :   Whether the picture is inverted
******************************************************************************/
void setNewImage(uint8_t *image, uint16_t Width, uint16_t Height, uint16_t Rotate, uint16_t Color)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	817b      	strh	r3, [r7, #10]
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	813b      	strh	r3, [r7, #8]
 8000baa:	4613      	mov	r3, r2
 8000bac:	80fb      	strh	r3, [r7, #6]
    Image.add = NULL;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <setNewImage+0x84>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
    Image.add = image;
 8000bb4:	4a18      	ldr	r2, [pc, #96]	; (8000c18 <setNewImage+0x84>)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	6013      	str	r3, [r2, #0]

    Image.WidthMemory = Width;
 8000bba:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <setNewImage+0x84>)
 8000bbc:	897b      	ldrh	r3, [r7, #10]
 8000bbe:	8113      	strh	r3, [r2, #8]
    Image.HeightMemory = Height;
 8000bc0:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <setNewImage+0x84>)
 8000bc2:	893b      	ldrh	r3, [r7, #8]
 8000bc4:	8153      	strh	r3, [r2, #10]
    Image.Color = Color;
 8000bc6:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <setNewImage+0x84>)
 8000bc8:	8b3b      	ldrh	r3, [r7, #24]
 8000bca:	8193      	strh	r3, [r2, #12]
    //Image.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
    Image.WidthByte = Width;
 8000bcc:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <setNewImage+0x84>)
 8000bce:	897b      	ldrh	r3, [r7, #10]
 8000bd0:	8253      	strh	r3, [r2, #18]
    Image.HeightByte = Height;
 8000bd2:	4a11      	ldr	r2, [pc, #68]	; (8000c18 <setNewImage+0x84>)
 8000bd4:	893b      	ldrh	r3, [r7, #8]
 8000bd6:	8293      	strh	r3, [r2, #20]
    //printf("WidthByte = %d, HeightByte = %d\r\n", Image.WidthByte, Image.HeightByte);
    //printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Image.Rotate = Rotate;
 8000bd8:	4a0f      	ldr	r2, [pc, #60]	; (8000c18 <setNewImage+0x84>)
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	81d3      	strh	r3, [r2, #14]
    Image.Mirror = MIRROR_NONE;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <setNewImage+0x84>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <setNewImage+0x5c>
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	2bb4      	cmp	r3, #180	; 0xb4
 8000bee:	d106      	bne.n	8000bfe <setNewImage+0x6a>
        Image.Width = Width;
 8000bf0:	4a09      	ldr	r2, [pc, #36]	; (8000c18 <setNewImage+0x84>)
 8000bf2:	897b      	ldrh	r3, [r7, #10]
 8000bf4:	8093      	strh	r3, [r2, #4]
        Image.Height = Height;
 8000bf6:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <setNewImage+0x84>)
 8000bf8:	893b      	ldrh	r3, [r7, #8]
 8000bfa:	80d3      	strh	r3, [r2, #6]
 8000bfc:	e005      	b.n	8000c0a <setNewImage+0x76>
    } else {
        Image.Width = Height;
 8000bfe:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <setNewImage+0x84>)
 8000c00:	893b      	ldrh	r3, [r7, #8]
 8000c02:	8093      	strh	r3, [r2, #4]
        Image.Height = Width;
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <setNewImage+0x84>)
 8000c06:	897b      	ldrh	r3, [r7, #10]
 8000c08:	80d3      	strh	r3, [r2, #6]
    }
}
 8000c0a:	bf00      	nop
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000060 	.word	0x20000060

08000c1c <setPixel>:
//    Xpt  :   At point X
//    Ypt  :   At point Y
//    Color   :   Imageed colors
******************************************************************************/
void setPixel(uint16_t Xpt, uint16_t Ypt, uint16_t Color)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]
 8000c26:	460b      	mov	r3, r1
 8000c28:	80bb      	strh	r3, [r7, #4]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	807b      	strh	r3, [r7, #2]
    if(Xpt > Image.Width || Ypt > Image.Height){
 8000c2e:	4b50      	ldr	r3, [pc, #320]	; (8000d70 <setPixel+0x154>)
 8000c30:	889b      	ldrh	r3, [r3, #4]
 8000c32:	88fa      	ldrh	r2, [r7, #6]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	f200 8091 	bhi.w	8000d5c <setPixel+0x140>
 8000c3a:	4b4d      	ldr	r3, [pc, #308]	; (8000d70 <setPixel+0x154>)
 8000c3c:	88db      	ldrh	r3, [r3, #6]
 8000c3e:	88ba      	ldrh	r2, [r7, #4]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f200 808b 	bhi.w	8000d5c <setPixel+0x140>
//        Debug("Exceeding display boundaries\r\n");
        return;
    }      
    uint16_t X, Y;

    switch(Image.Rotate) {
 8000c46:	4b4a      	ldr	r3, [pc, #296]	; (8000d70 <setPixel+0x154>)
 8000c48:	89db      	ldrh	r3, [r3, #14]
 8000c4a:	2b5a      	cmp	r3, #90	; 0x5a
 8000c4c:	d00f      	beq.n	8000c6e <setPixel+0x52>
 8000c4e:	2b5a      	cmp	r3, #90	; 0x5a
 8000c50:	dc02      	bgt.n	8000c58 <setPixel+0x3c>
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d006      	beq.n	8000c64 <setPixel+0x48>
        X = Ypt;
        Y = Image.HeightMemory - Xpt - 1;
        break;
		
    default:
        return;
 8000c56:	e086      	b.n	8000d66 <setPixel+0x14a>
    switch(Image.Rotate) {
 8000c58:	2bb4      	cmp	r3, #180	; 0xb4
 8000c5a:	d012      	beq.n	8000c82 <setPixel+0x66>
 8000c5c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000c60:	d01e      	beq.n	8000ca0 <setPixel+0x84>
        return;
 8000c62:	e080      	b.n	8000d66 <setPixel+0x14a>
        X = Xpt;
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	81fb      	strh	r3, [r7, #14]
        Y = Ypt;
 8000c68:	88bb      	ldrh	r3, [r7, #4]
 8000c6a:	81bb      	strh	r3, [r7, #12]
        break;
 8000c6c:	e022      	b.n	8000cb4 <setPixel+0x98>
        X = Image.WidthMemory - Ypt - 1;
 8000c6e:	4b40      	ldr	r3, [pc, #256]	; (8000d70 <setPixel+0x154>)
 8000c70:	891a      	ldrh	r2, [r3, #8]
 8000c72:	88bb      	ldrh	r3, [r7, #4]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	81fb      	strh	r3, [r7, #14]
        Y = Xpt;
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	81bb      	strh	r3, [r7, #12]
        break;
 8000c80:	e018      	b.n	8000cb4 <setPixel+0x98>
        X = Image.WidthMemory - Xpt - 1;
 8000c82:	4b3b      	ldr	r3, [pc, #236]	; (8000d70 <setPixel+0x154>)
 8000c84:	891a      	ldrh	r2, [r3, #8]
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	81fb      	strh	r3, [r7, #14]
        Y = Image.HeightMemory - Ypt - 1;
 8000c90:	4b37      	ldr	r3, [pc, #220]	; (8000d70 <setPixel+0x154>)
 8000c92:	895a      	ldrh	r2, [r3, #10]
 8000c94:	88bb      	ldrh	r3, [r7, #4]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	81bb      	strh	r3, [r7, #12]
        break;
 8000c9e:	e009      	b.n	8000cb4 <setPixel+0x98>
        X = Ypt;
 8000ca0:	88bb      	ldrh	r3, [r7, #4]
 8000ca2:	81fb      	strh	r3, [r7, #14]
        Y = Image.HeightMemory - Xpt - 1;
 8000ca4:	4b32      	ldr	r3, [pc, #200]	; (8000d70 <setPixel+0x154>)
 8000ca6:	895a      	ldrh	r2, [r3, #10]
 8000ca8:	88fb      	ldrh	r3, [r7, #6]
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	81bb      	strh	r3, [r7, #12]
        break;
 8000cb2:	bf00      	nop
    }
    
    switch(Image.Mirror) {
 8000cb4:	4b2e      	ldr	r3, [pc, #184]	; (8000d70 <setPixel+0x154>)
 8000cb6:	8a1b      	ldrh	r3, [r3, #16]
 8000cb8:	2b03      	cmp	r3, #3
 8000cba:	d851      	bhi.n	8000d60 <setPixel+0x144>
 8000cbc:	a201      	add	r2, pc, #4	; (adr r2, 8000cc4 <setPixel+0xa8>)
 8000cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc2:	bf00      	nop
 8000cc4:	08000d13 	.word	0x08000d13
 8000cc8:	08000cd5 	.word	0x08000cd5
 8000ccc:	08000ce5 	.word	0x08000ce5
 8000cd0:	08000cf5 	.word	0x08000cf5
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Image.WidthMemory - X - 1;
 8000cd4:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <setPixel+0x154>)
 8000cd6:	891a      	ldrh	r2, [r3, #8]
 8000cd8:	89fb      	ldrh	r3, [r7, #14]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	81fb      	strh	r3, [r7, #14]
        break;
 8000ce2:	e017      	b.n	8000d14 <setPixel+0xf8>
    case MIRROR_VERTICAL:
        Y = Image.HeightMemory - Y - 1;
 8000ce4:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <setPixel+0x154>)
 8000ce6:	895a      	ldrh	r2, [r3, #10]
 8000ce8:	89bb      	ldrh	r3, [r7, #12]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	81bb      	strh	r3, [r7, #12]
        break;
 8000cf2:	e00f      	b.n	8000d14 <setPixel+0xf8>
    case MIRROR_ORIGIN:
        X = Image.WidthMemory - X - 1;
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <setPixel+0x154>)
 8000cf6:	891a      	ldrh	r2, [r3, #8]
 8000cf8:	89fb      	ldrh	r3, [r7, #14]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	81fb      	strh	r3, [r7, #14]
        Y = Image.HeightMemory - Y - 1;
 8000d02:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <setPixel+0x154>)
 8000d04:	895a      	ldrh	r2, [r3, #10]
 8000d06:	89bb      	ldrh	r3, [r7, #12]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	81bb      	strh	r3, [r7, #12]
        break;
 8000d10:	e000      	b.n	8000d14 <setPixel+0xf8>
        break;
 8000d12:	bf00      	nop
    default:
        return;
    }

    if(X > Image.WidthMemory || Y > Image.HeightMemory){
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <setPixel+0x154>)
 8000d16:	891b      	ldrh	r3, [r3, #8]
 8000d18:	89fa      	ldrh	r2, [r7, #14]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d822      	bhi.n	8000d64 <setPixel+0x148>
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <setPixel+0x154>)
 8000d20:	895b      	ldrh	r3, [r3, #10]
 8000d22:	89ba      	ldrh	r2, [r7, #12]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d81d      	bhi.n	8000d64 <setPixel+0x148>
//        Debug("Exceeding display boundaries\r\n");
        return;
    }
    
   // uint32_t Addr = X / 8 + Y * Image.WidthByte;
    uint32_t Addr = X + Y * Image.WidthByte;
 8000d28:	89fa      	ldrh	r2, [r7, #14]
 8000d2a:	89bb      	ldrh	r3, [r7, #12]
 8000d2c:	4910      	ldr	r1, [pc, #64]	; (8000d70 <setPixel+0x154>)
 8000d2e:	8a49      	ldrh	r1, [r1, #18]
 8000d30:	fb01 f303 	mul.w	r3, r1, r3
 8000d34:	4413      	add	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
   // uint8_t Rdata = Image.Image[Addr];
    if(Color == BLACK)
 8000d38:	887b      	ldrh	r3, [r7, #2]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d106      	bne.n	8000d4c <setPixel+0x130>
        //Image.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
    	Image.add[Addr] = BLACK;
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <setPixel+0x154>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	4413      	add	r3, r2
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	e00c      	b.n	8000d66 <setPixel+0x14a>
    else
        //Image.Image[Addr] = Rdata | (0x80 >> (X % 8));
    	Image.add[Addr] = Color;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <setPixel+0x154>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4413      	add	r3, r2
 8000d54:	887a      	ldrh	r2, [r7, #2]
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	701a      	strb	r2, [r3, #0]
 8000d5a:	e004      	b.n	8000d66 <setPixel+0x14a>
        return;
 8000d5c:	bf00      	nop
 8000d5e:	e002      	b.n	8000d66 <setPixel+0x14a>
        return;
 8000d60:	bf00      	nop
 8000d62:	e000      	b.n	8000d66 <setPixel+0x14a>
        return;
 8000d64:	bf00      	nop
}
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	20000060 	.word	0x20000060

08000d74 <clear_Image>:
//function:	Clear the color of the picture
//parameter:
//    Color   :   Imageed colors
******************************************************************************/
void clear_Image(uint8_t Color)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
    for (uint16_t Y = 0; Y < Image.HeightByte; Y++) {
 8000d7e:	2300      	movs	r3, #0
 8000d80:	81fb      	strh	r3, [r7, #14]
 8000d82:	e01b      	b.n	8000dbc <clear_Image+0x48>
        for (uint16_t X = 0; X < Image.WidthByte; X++ ) {//8 pixel =  1 byte
 8000d84:	2300      	movs	r3, #0
 8000d86:	81bb      	strh	r3, [r7, #12]
 8000d88:	e010      	b.n	8000dac <clear_Image+0x38>
            uint32_t Addr = X + Y*Image.WidthByte;
 8000d8a:	89ba      	ldrh	r2, [r7, #12]
 8000d8c:	89fb      	ldrh	r3, [r7, #14]
 8000d8e:	4911      	ldr	r1, [pc, #68]	; (8000dd4 <clear_Image+0x60>)
 8000d90:	8a49      	ldrh	r1, [r1, #18]
 8000d92:	fb01 f303 	mul.w	r3, r1, r3
 8000d96:	4413      	add	r3, r2
 8000d98:	60bb      	str	r3, [r7, #8]
            Image.add[Addr] = Color;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <clear_Image+0x60>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	4413      	add	r3, r2
 8000da2:	79fa      	ldrb	r2, [r7, #7]
 8000da4:	701a      	strb	r2, [r3, #0]
        for (uint16_t X = 0; X < Image.WidthByte; X++ ) {//8 pixel =  1 byte
 8000da6:	89bb      	ldrh	r3, [r7, #12]
 8000da8:	3301      	adds	r3, #1
 8000daa:	81bb      	strh	r3, [r7, #12]
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <clear_Image+0x60>)
 8000dae:	8a5b      	ldrh	r3, [r3, #18]
 8000db0:	89ba      	ldrh	r2, [r7, #12]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d3e9      	bcc.n	8000d8a <clear_Image+0x16>
    for (uint16_t Y = 0; Y < Image.HeightByte; Y++) {
 8000db6:	89fb      	ldrh	r3, [r7, #14]
 8000db8:	3301      	adds	r3, #1
 8000dba:	81fb      	strh	r3, [r7, #14]
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <clear_Image+0x60>)
 8000dbe:	8a9b      	ldrh	r3, [r3, #20]
 8000dc0:	89fa      	ldrh	r2, [r7, #14]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d3de      	bcc.n	8000d84 <clear_Image+0x10>
        }
    }
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000060 	.word	0x20000060

08000dd8 <drawChar>:
//    cBackground : Select the background color of the English character
//    cForeground : Select the foreground color of the English character
******************************************************************************/
void drawChar(uint16_t Xpt, uint16_t Ypt, const char Acsii_Char,
                    sFONT* Font, uint8_t cBackground, uint8_t cForeground)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	4603      	mov	r3, r0
 8000de2:	81fb      	strh	r3, [r7, #14]
 8000de4:	460b      	mov	r3, r1
 8000de6:	81bb      	strh	r3, [r7, #12]
 8000de8:	4613      	mov	r3, r2
 8000dea:	72fb      	strb	r3, [r7, #11]
    uint16_t Page, Column;

    if (Xpt > Image.Width || Ypt > Image.Height) {
 8000dec:	4b4f      	ldr	r3, [pc, #316]	; (8000f2c <drawChar+0x154>)
 8000dee:	889b      	ldrh	r3, [r3, #4]
 8000df0:	89fa      	ldrh	r2, [r7, #14]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	f200 8096 	bhi.w	8000f24 <drawChar+0x14c>
 8000df8:	4b4c      	ldr	r3, [pc, #304]	; (8000f2c <drawChar+0x154>)
 8000dfa:	88db      	ldrh	r3, [r3, #6]
 8000dfc:	89ba      	ldrh	r2, [r7, #12]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	f200 8090 	bhi.w	8000f24 <drawChar+0x14c>
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	3b20      	subs	r3, #32
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	88d2      	ldrh	r2, [r2, #6]
 8000e0c:	fb02 f303 	mul.w	r3, r2, r3
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	8892      	ldrh	r2, [r2, #4]
 8000e14:	08d2      	lsrs	r2, r2, #3
 8000e16:	b292      	uxth	r2, r2
 8000e18:	4611      	mov	r1, r2
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	8892      	ldrh	r2, [r2, #4]
 8000e1e:	f002 0207 	and.w	r2, r2, #7
 8000e22:	b292      	uxth	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	bf14      	ite	ne
 8000e28:	2201      	movne	r2, #1
 8000e2a:	2200      	moveq	r2, #0
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	440a      	add	r2, r1
 8000e30:	fb02 f303 	mul.w	r3, r2, r3
 8000e34:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000e40:	2300      	movs	r3, #0
 8000e42:	83fb      	strh	r3, [r7, #30]
 8000e44:	e068      	b.n	8000f18 <drawChar+0x140>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000e46:	2300      	movs	r3, #0
 8000e48:	83bb      	strh	r3, [r7, #28]
 8000e4a:	e053      	b.n	8000ef4 <drawChar+0x11c>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == cBackground) { //this process is to speed up the scan
 8000e4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e50:	2bff      	cmp	r3, #255	; 0xff
 8000e52:	d11a      	bne.n	8000e8a <drawChar+0xb2>
                //if (*ptr & (0x80 >> (Column % 8)))
                if (*ptr & (0x80 >> (Column % 8)))
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	8bbb      	ldrh	r3, [r7, #28]
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	fa42 f303 	asr.w	r3, r2, r3
 8000e66:	400b      	ands	r3, r1
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d037      	beq.n	8000edc <drawChar+0x104>
                    setPixel(Xpt + Column, Ypt + Page, cForeground);
 8000e6c:	89fa      	ldrh	r2, [r7, #14]
 8000e6e:	8bbb      	ldrh	r3, [r7, #28]
 8000e70:	4413      	add	r3, r2
 8000e72:	b298      	uxth	r0, r3
 8000e74:	89ba      	ldrh	r2, [r7, #12]
 8000e76:	8bfb      	ldrh	r3, [r7, #30]
 8000e78:	4413      	add	r3, r2
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000e80:	b292      	uxth	r2, r2
 8000e82:	4619      	mov	r1, r3
 8000e84:	f7ff feca 	bl	8000c1c <setPixel>
 8000e88:	e028      	b.n	8000edc <drawChar+0x104>
                    // Image_DrawPoint(Xpt + Column, Ypt + Page, cForeground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column%8))) {
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	8bbb      	ldrh	r3, [r7, #28]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	2280      	movs	r2, #128	; 0x80
 8000e98:	fa42 f303 	asr.w	r3, r2, r3
 8000e9c:	400b      	ands	r3, r1
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d00e      	beq.n	8000ec0 <drawChar+0xe8>
                    setPixel(Xpt + Column, Ypt + Page, cForeground);
 8000ea2:	89fa      	ldrh	r2, [r7, #14]
 8000ea4:	8bbb      	ldrh	r3, [r7, #28]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	b298      	uxth	r0, r3
 8000eaa:	89ba      	ldrh	r2, [r7, #12]
 8000eac:	8bfb      	ldrh	r3, [r7, #30]
 8000eae:	4413      	add	r3, r2
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000eb6:	b292      	uxth	r2, r2
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f7ff feaf 	bl	8000c1c <setPixel>
 8000ebe:	e00d      	b.n	8000edc <drawChar+0x104>
                    // Image_DrawPoint(Xpt + Column, Ypt + Page, cForeground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    setPixel(Xpt + Column, Ypt + Page, cBackground);
 8000ec0:	89fa      	ldrh	r2, [r7, #14]
 8000ec2:	8bbb      	ldrh	r3, [r7, #28]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	b298      	uxth	r0, r3
 8000ec8:	89ba      	ldrh	r2, [r7, #12]
 8000eca:	8bfb      	ldrh	r3, [r7, #30]
 8000ecc:	4413      	add	r3, r2
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000ed4:	b292      	uxth	r2, r2
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f7ff fea0 	bl	8000c1c <setPixel>
                    // Image_DrawPoint(Xpt + Column, Ypt + Page, cBackground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8000edc:	8bbb      	ldrh	r3, [r7, #28]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	2b07      	cmp	r3, #7
 8000ee6:	d102      	bne.n	8000eee <drawChar+0x116>
                ptr++;
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	3301      	adds	r3, #1
 8000eec:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000eee:	8bbb      	ldrh	r3, [r7, #28]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	83bb      	strh	r3, [r7, #28]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	889b      	ldrh	r3, [r3, #4]
 8000ef8:	8bba      	ldrh	r2, [r7, #28]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d3a6      	bcc.n	8000e4c <drawChar+0x74>
        }// Write a line
        if (Font->Width % 8 != 0)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	889b      	ldrh	r3, [r3, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d002      	beq.n	8000f12 <drawChar+0x13a>
            ptr++;
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000f12:	8bfb      	ldrh	r3, [r7, #30]
 8000f14:	3301      	adds	r3, #1
 8000f16:	83fb      	strh	r3, [r7, #30]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	88db      	ldrh	r3, [r3, #6]
 8000f1c:	8bfa      	ldrh	r2, [r7, #30]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d391      	bcc.n	8000e46 <drawChar+0x6e>
 8000f22:	e000      	b.n	8000f26 <drawChar+0x14e>
        return;
 8000f24:	bf00      	nop
    }// Write all
}
 8000f26:	3720      	adds	r7, #32
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000060 	.word	0x20000060

08000f30 <drawString>:
//    cBackground : Select the background color of the English character
//    cForeground : Select the foreground color of the English character
******************************************************************************/
void drawString(uint16_t xStart, uint16_t yStart, const char * pString,
                         sFONT* Font, uint8_t cBackground, uint8_t cForeground )
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af02      	add	r7, sp, #8
 8000f36:	60ba      	str	r2, [r7, #8]
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	81fb      	strh	r3, [r7, #14]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	81bb      	strh	r3, [r7, #12]
    uint16_t Xpt = xStart;
 8000f42:	89fb      	ldrh	r3, [r7, #14]
 8000f44:	82fb      	strh	r3, [r7, #22]
    uint16_t Ypt = yStart;
 8000f46:	89bb      	ldrh	r3, [r7, #12]
 8000f48:	82bb      	strh	r3, [r7, #20]

    if (xStart > Image.Width || yStart > Image.Height) {
 8000f4a:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <drawString+0xa4>)
 8000f4c:	889b      	ldrh	r3, [r3, #4]
 8000f4e:	89fa      	ldrh	r2, [r7, #14]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d83a      	bhi.n	8000fca <drawString+0x9a>
 8000f54:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <drawString+0xa4>)
 8000f56:	88db      	ldrh	r3, [r3, #6]
 8000f58:	89ba      	ldrh	r2, [r7, #12]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d835      	bhi.n	8000fca <drawString+0x9a>
//        Debug("drawString Input exceeds the normal display range\r\n");
        return;
    }

    while (* pString != '\0') {
 8000f5e:	e02f      	b.n	8000fc0 <drawString+0x90>
        //if X direction filled , reposition to(xStart,Ypt),Ypt is Y direction plus the Height of the character
        if ((Xpt + Font->Width ) > Image.Width ) {
 8000f60:	8afb      	ldrh	r3, [r7, #22]
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	8892      	ldrh	r2, [r2, #4]
 8000f66:	4413      	add	r3, r2
 8000f68:	4a1a      	ldr	r2, [pc, #104]	; (8000fd4 <drawString+0xa4>)
 8000f6a:	8892      	ldrh	r2, [r2, #4]
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	dd06      	ble.n	8000f7e <drawString+0x4e>
            Xpt = xStart;
 8000f70:	89fb      	ldrh	r3, [r7, #14]
 8000f72:	82fb      	strh	r3, [r7, #22]
            Ypt += Font->Height;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	88da      	ldrh	r2, [r3, #6]
 8000f78:	8abb      	ldrh	r3, [r7, #20]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(xStart, yStart)
        if ((Ypt  + Font->Height ) > Image.Height ) {
 8000f7e:	8abb      	ldrh	r3, [r7, #20]
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	88d2      	ldrh	r2, [r2, #6]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a13      	ldr	r2, [pc, #76]	; (8000fd4 <drawString+0xa4>)
 8000f88:	88d2      	ldrh	r2, [r2, #6]
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	dd03      	ble.n	8000f96 <drawString+0x66>
            Xpt = xStart;
 8000f8e:	89fb      	ldrh	r3, [r7, #14]
 8000f90:	82fb      	strh	r3, [r7, #22]
            Ypt = yStart;
 8000f92:	89bb      	ldrh	r3, [r7, #12]
 8000f94:	82bb      	strh	r3, [r7, #20]
        }
        drawChar(Xpt, Ypt, * pString, Font, cBackground, cForeground);
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	781a      	ldrb	r2, [r3, #0]
 8000f9a:	8ab9      	ldrh	r1, [r7, #20]
 8000f9c:	8af8      	ldrh	r0, [r7, #22]
 8000f9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f7ff ff14 	bl	8000dd8 <drawChar>

        //The next character of the address
        pString ++;
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpt += Font->Width;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	889a      	ldrh	r2, [r3, #4]
 8000fba:	8afb      	ldrh	r3, [r7, #22]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1cb      	bne.n	8000f60 <drawString+0x30>
 8000fc8:	e000      	b.n	8000fcc <drawString+0x9c>
        return;
 8000fca:	bf00      	nop
    }
}
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000060 	.word	0x20000060

08000fd8 <DrawCalenderField>:
//   NULL.
// Note:
//
// ****************************************************************************************
void DrawCalenderField(uint8_t place, char* fach, char* dozent)
{
 8000fd8:	b5b0      	push	{r4, r5, r7, lr}
 8000fda:	b08c      	sub	sp, #48	; 0x30
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	4603      	mov	r3, r0
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
 8000fe4:	73fb      	strb	r3, [r7, #15]
 8000fe6:	466b      	mov	r3, sp
 8000fe8:	461d      	mov	r5, r3
	CalCellInfo cal;
	cal.imBufsize= 17336*2;
 8000fea:	f248 7370 	movw	r3, #34672	; 0x8770
 8000fee:	61fb      	str	r3, [r7, #28]
	uint8_t frameBuf[cal.imBufsize];
 8000ff0:	69f8      	ldr	r0, [r7, #28]
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff8:	4601      	mov	r1, r0
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	f04f 0300 	mov.w	r3, #0
 8001002:	f04f 0400 	mov.w	r4, #0
 8001006:	00d4      	lsls	r4, r2, #3
 8001008:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800100c:	00cb      	lsls	r3, r1, #3
 800100e:	4601      	mov	r1, r0
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	f04f 0300 	mov.w	r3, #0
 8001018:	f04f 0400 	mov.w	r4, #0
 800101c:	00d4      	lsls	r4, r2, #3
 800101e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001022:	00cb      	lsls	r3, r1, #3
 8001024:	1dc3      	adds	r3, r0, #7
 8001026:	08db      	lsrs	r3, r3, #3
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	ebad 0d03 	sub.w	sp, sp, r3
 800102e:	ab02      	add	r3, sp, #8
 8001030:	3300      	adds	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
	cal.place = place;
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	743b      	strb	r3, [r7, #16]
	if(cal.place%5!=0)
 8001038:	7c3a      	ldrb	r2, [r7, #16]
 800103a:	4b65      	ldr	r3, [pc, #404]	; (80011d0 <DrawCalenderField+0x1f8>)
 800103c:	fba3 1302 	umull	r1, r3, r3, r2
 8001040:	0899      	lsrs	r1, r3, #2
 8001042:	460b      	mov	r3, r1
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	d019      	beq.n	8001084 <DrawCalenderField+0xac>
		cal.posX = 202 + (cal.place%5-1) * 200;
 8001050:	7c3a      	ldrb	r2, [r7, #16]
 8001052:	4b5f      	ldr	r3, [pc, #380]	; (80011d0 <DrawCalenderField+0x1f8>)
 8001054:	fba3 1302 	umull	r1, r3, r3, r2
 8001058:	0899      	lsrs	r1, r3, #2
 800105a:	460b      	mov	r3, r1
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	440b      	add	r3, r1
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	b2db      	uxtb	r3, r3
 8001064:	3b01      	subs	r3, #1
 8001066:	b29b      	uxth	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	0092      	lsls	r2, r2, #2
 800106c:	4413      	add	r3, r2
 800106e:	461a      	mov	r2, r3
 8001070:	0091      	lsls	r1, r2, #2
 8001072:	461a      	mov	r2, r3
 8001074:	460b      	mov	r3, r1
 8001076:	4413      	add	r3, r2
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	b29b      	uxth	r3, r3
 800107c:	33ca      	adds	r3, #202	; 0xca
 800107e:	b29b      	uxth	r3, r3
 8001080:	827b      	strh	r3, [r7, #18]
 8001082:	e002      	b.n	800108a <DrawCalenderField+0xb2>
	else
		cal.posX = 1002;
 8001084:	f240 33ea 	movw	r3, #1002	; 0x3ea
 8001088:	827b      	strh	r3, [r7, #18]

	if(cal.place%5!=0)
 800108a:	7c3a      	ldrb	r2, [r7, #16]
 800108c:	4b50      	ldr	r3, [pc, #320]	; (80011d0 <DrawCalenderField+0x1f8>)
 800108e:	fba3 1302 	umull	r1, r3, r3, r2
 8001092:	0899      	lsrs	r1, r3, #2
 8001094:	460b      	mov	r3, r1
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	440b      	add	r3, r1
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d012      	beq.n	80010c8 <DrawCalenderField+0xf0>
	cal.posY = cal.place/5 *90 +195;
 80010a2:	7c3b      	ldrb	r3, [r7, #16]
 80010a4:	4a4a      	ldr	r2, [pc, #296]	; (80011d0 <DrawCalenderField+0x1f8>)
 80010a6:	fba2 2303 	umull	r2, r3, r2, r3
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	461a      	mov	r2, r3
 80010b2:	0052      	lsls	r2, r2, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	461a      	mov	r2, r3
 80010b8:	0112      	lsls	r2, r2, #4
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	b29b      	uxth	r3, r3
 80010c0:	33c3      	adds	r3, #195	; 0xc3
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	82bb      	strh	r3, [r7, #20]
 80010c6:	e012      	b.n	80010ee <DrawCalenderField+0x116>
	else
		cal.posY = (cal.place/5 - 1) *90 +195;
 80010c8:	7c3b      	ldrb	r3, [r7, #16]
 80010ca:	4a41      	ldr	r2, [pc, #260]	; (80011d0 <DrawCalenderField+0x1f8>)
 80010cc:	fba2 2303 	umull	r2, r3, r2, r3
 80010d0:	089b      	lsrs	r3, r3, #2
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	3b01      	subs	r3, #1
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	0052      	lsls	r2, r2, #1
 80010dc:	4413      	add	r3, r2
 80010de:	461a      	mov	r2, r3
 80010e0:	0112      	lsls	r2, r2, #4
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	33c3      	adds	r3, #195	; 0xc3
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	82bb      	strh	r3, [r7, #20]

	if((cal.place%5 != 0))
 80010ee:	7c3a      	ldrb	r2, [r7, #16]
 80010f0:	4b37      	ldr	r3, [pc, #220]	; (80011d0 <DrawCalenderField+0x1f8>)
 80010f2:	fba3 1302 	umull	r1, r3, r3, r2
 80010f6:	0899      	lsrs	r1, r3, #2
 80010f8:	460b      	mov	r3, r1
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	440b      	add	r3, r1
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d010      	beq.n	8001128 <DrawCalenderField+0x150>
	{
		if(cal.place/5%2 != 0)
 8001106:	7c3b      	ldrb	r3, [r7, #16]
 8001108:	4a31      	ldr	r2, [pc, #196]	; (80011d0 <DrawCalenderField+0x1f8>)
 800110a:	fba2 2303 	umull	r2, r3, r2, r3
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	b2db      	uxtb	r3, r3
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d002      	beq.n	8001122 <DrawCalenderField+0x14a>
			cal.color = KALBRIGHT;
 800111c:	23e0      	movs	r3, #224	; 0xe0
 800111e:	747b      	strb	r3, [r7, #17]
 8001120:	e012      	b.n	8001148 <DrawCalenderField+0x170>
		else
			cal.color = KALDARK;
 8001122:	23dd      	movs	r3, #221	; 0xdd
 8001124:	747b      	strb	r3, [r7, #17]
 8001126:	e00f      	b.n	8001148 <DrawCalenderField+0x170>
	}
	else
	{
		if(cal.place/5%2 != 0)
 8001128:	7c3b      	ldrb	r3, [r7, #16]
 800112a:	4a29      	ldr	r2, [pc, #164]	; (80011d0 <DrawCalenderField+0x1f8>)
 800112c:	fba2 2303 	umull	r2, r3, r2, r3
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	b2db      	uxtb	r3, r3
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <DrawCalenderField+0x16c>
					cal.color = KALDARK;
 800113e:	23dd      	movs	r3, #221	; 0xdd
 8001140:	747b      	strb	r3, [r7, #17]
 8001142:	e001      	b.n	8001148 <DrawCalenderField+0x170>
				else
					cal.color = KALBRIGHT;
 8001144:	23e0      	movs	r3, #224	; 0xe0
 8001146:	747b      	strb	r3, [r7, #17]
	}

	setNewImage(frameBuf, 196, 88, 0, 0xff);
 8001148:	6a38      	ldr	r0, [r7, #32]
 800114a:	23ff      	movs	r3, #255	; 0xff
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2300      	movs	r3, #0
 8001150:	2258      	movs	r2, #88	; 0x58
 8001152:	21c4      	movs	r1, #196	; 0xc4
 8001154:	f7ff fd1e 	bl	8000b94 <setNewImage>
	clear_Image(cal.color);
 8001158:	7c7b      	ldrb	r3, [r7, #17]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fe0a 	bl	8000d74 <clear_Image>
	//clear_Image(cal.color);
	drawString(5, 20, fach, &Font24, cal.color, 0x44 );
 8001160:	7c7b      	ldrb	r3, [r7, #17]
 8001162:	2244      	movs	r2, #68	; 0x44
 8001164:	9201      	str	r2, [sp, #4]
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <DrawCalenderField+0x1fc>)
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	2114      	movs	r1, #20
 800116e:	2005      	movs	r0, #5
 8001170:	f7ff fede 	bl	8000f30 <drawString>
	EpdDriverDrawBox(frameBuf, cal.posX, cal.posY, 196, 88);
 8001174:	6a38      	ldr	r0, [r7, #32]
 8001176:	8a79      	ldrh	r1, [r7, #18]
 8001178:	8aba      	ldrh	r2, [r7, #20]
 800117a:	2358      	movs	r3, #88	; 0x58
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	23c4      	movs	r3, #196	; 0xc4
 8001180:	f7ff fcc8 	bl	8000b14 <EpdDriverDrawBox>


	setNewImage(frameBuf, 196, 88, 0, 0xff);
 8001184:	6a38      	ldr	r0, [r7, #32]
 8001186:	23ff      	movs	r3, #255	; 0xff
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2300      	movs	r3, #0
 800118c:	2258      	movs	r2, #88	; 0x58
 800118e:	21c4      	movs	r1, #196	; 0xc4
 8001190:	f7ff fd00 	bl	8000b94 <setNewImage>
	clear_Image(cal.color);
 8001194:	7c7b      	ldrb	r3, [r7, #17]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fdec 	bl	8000d74 <clear_Image>
	drawString(5, 15, dozent, &Font24, cal.color, 0x44 );
 800119c:	7c7b      	ldrb	r3, [r7, #17]
 800119e:	2244      	movs	r2, #68	; 0x44
 80011a0:	9201      	str	r2, [sp, #4]
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <DrawCalenderField+0x1fc>)
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	210f      	movs	r1, #15
 80011aa:	2005      	movs	r0, #5
 80011ac:	f7ff fec0 	bl	8000f30 <drawString>
	//EpdDriverDrawBox(frameBuf, 202, 195, 196, 88);
	EpdDriverDrawBox(frameBuf, cal.posX, cal.posY+44, 196, 88);
 80011b0:	6a38      	ldr	r0, [r7, #32]
 80011b2:	8a79      	ldrh	r1, [r7, #18]
 80011b4:	8abb      	ldrh	r3, [r7, #20]
 80011b6:	332c      	adds	r3, #44	; 0x2c
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	2358      	movs	r3, #88	; 0x58
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	23c4      	movs	r3, #196	; 0xc4
 80011c0:	f7ff fca8 	bl	8000b14 <EpdDriverDrawBox>
 80011c4:	46ad      	mov	sp, r5
}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bdb0      	pop	{r4, r5, r7, pc}
 80011ce:	bf00      	nop
 80011d0:	cccccccd 	.word	0xcccccccd
 80011d4:	20000000 	.word	0x20000000

080011d8 <receiveData>:


void receiveData()
{
 80011d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011dc:	b09c      	sub	sp, #112	; 0x70
 80011de:	af00      	add	r7, sp, #0
	uint8_t rxBuf[50]={0};
 80011e0:	f107 0318 	add.w	r3, r7, #24
 80011e4:	2232      	movs	r2, #50	; 0x32
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f005 facd 	bl	8006788 <memset>
	char  fach[14];
	char  doz[4];
	HAL_UART_Receive(&huart4, rxBuf, 20,HAL_MAX_DELAY);
 80011ee:	f107 0118 	add.w	r1, r7, #24
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	2214      	movs	r2, #20
 80011f8:	488d      	ldr	r0, [pc, #564]	; (8001430 <receiveData+0x258>)
 80011fa:	f003 fed9 	bl	8004fb0 <HAL_UART_Receive>
		 	 if(rxBuf[0]==0)
 80011fe:	7e3b      	ldrb	r3, [r7, #24]
 8001200:	2b00      	cmp	r3, #0
 8001202:	f040 80b9 	bne.w	8001378 <receiveData+0x1a0>
		 	 {
 8001206:	466b      	mov	r3, sp
 8001208:	4698      	mov	r8, r3
		 		 uint8_t arrcal[rxBuf[1]][20];
 800120a:	7e78      	ldrb	r0, [r7, #25]
 800120c:	4603      	mov	r3, r0
 800120e:	3b01      	subs	r3, #1
 8001210:	653b      	str	r3, [r7, #80]	; 0x50
 8001212:	b2c5      	uxtb	r5, r0
 8001214:	f04f 0600 	mov.w	r6, #0
 8001218:	462b      	mov	r3, r5
 800121a:	4634      	mov	r4, r6
 800121c:	f04f 0100 	mov.w	r1, #0
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	00a2      	lsls	r2, r4, #2
 8001226:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800122a:	0099      	lsls	r1, r3, #2
 800122c:	460b      	mov	r3, r1
 800122e:	4614      	mov	r4, r2
 8001230:	195b      	adds	r3, r3, r5
 8001232:	eb44 0406 	adc.w	r4, r4, r6
 8001236:	f04f 0100 	mov.w	r1, #0
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	0162      	lsls	r2, r4, #5
 8001240:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001244:	0159      	lsls	r1, r3, #5
 8001246:	460b      	mov	r3, r1
 8001248:	4614      	mov	r4, r2
 800124a:	4602      	mov	r2, r0
 800124c:	4613      	mov	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	b2c5      	uxtb	r5, r0
 8001256:	f04f 0600 	mov.w	r6, #0
 800125a:	462b      	mov	r3, r5
 800125c:	4634      	mov	r4, r6
 800125e:	f04f 0100 	mov.w	r1, #0
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	00a2      	lsls	r2, r4, #2
 8001268:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800126c:	0099      	lsls	r1, r3, #2
 800126e:	460b      	mov	r3, r1
 8001270:	4614      	mov	r4, r2
 8001272:	195b      	adds	r3, r3, r5
 8001274:	eb44 0406 	adc.w	r4, r4, r6
 8001278:	f04f 0100 	mov.w	r1, #0
 800127c:	f04f 0200 	mov.w	r2, #0
 8001280:	0162      	lsls	r2, r4, #5
 8001282:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001286:	0159      	lsls	r1, r3, #5
 8001288:	460b      	mov	r3, r1
 800128a:	4614      	mov	r4, r2
 800128c:	4602      	mov	r2, r0
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	3307      	adds	r3, #7
 8001298:	08db      	lsrs	r3, r3, #3
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	ebad 0d03 	sub.w	sp, sp, r3
 80012a0:	466b      	mov	r3, sp
 80012a2:	3300      	adds	r3, #0
 80012a4:	64fb      	str	r3, [r7, #76]	; 0x4c
		 		 for(int i=0; i< rxBuf[1]; i++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012aa:	e00f      	b.n	80012cc <receiveData+0xf4>
		 		 {
		 			HAL_UART_Receive(&huart4, &arrcal[i][0], 20,HAL_MAX_DELAY);
 80012ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80012b8:	18d1      	adds	r1, r2, r3
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295
 80012be:	2214      	movs	r2, #20
 80012c0:	485b      	ldr	r0, [pc, #364]	; (8001430 <receiveData+0x258>)
 80012c2:	f003 fe75 	bl	8004fb0 <HAL_UART_Receive>
		 		 for(int i=0; i< rxBuf[1]; i++)
 80012c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012c8:	3301      	adds	r3, #1
 80012ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012cc:	7e7b      	ldrb	r3, [r7, #25]
 80012ce:	461a      	mov	r2, r3
 80012d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012d2:	4293      	cmp	r3, r2
 80012d4:	dbea      	blt.n	80012ac <receiveData+0xd4>
		 		 }
		 		 for(int p=0; p< rxBuf[1]; p++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	663b      	str	r3, [r7, #96]	; 0x60
 80012da:	e047      	b.n	800136c <receiveData+0x194>
		 		 {
		 			 for(int i=15; i<18;i++)
 80012dc:	230f      	movs	r3, #15
 80012de:	667b      	str	r3, [r7, #100]	; 0x64
 80012e0:	e014      	b.n	800130c <receiveData+0x134>
		 				{doz[i-15]= arrcal[p][i];}
 80012e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012e4:	f1a3 010f 	sub.w	r1, r3, #15
 80012e8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80012ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	18c2      	adds	r2, r0, r3
 80012f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012f8:	4413      	add	r3, r2
 80012fa:	781a      	ldrb	r2, [r3, #0]
 80012fc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001300:	440b      	add	r3, r1
 8001302:	f803 2c6c 	strb.w	r2, [r3, #-108]
		 			 for(int i=15; i<18;i++)
 8001306:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001308:	3301      	adds	r3, #1
 800130a:	667b      	str	r3, [r7, #100]	; 0x64
 800130c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800130e:	2b11      	cmp	r3, #17
 8001310:	dde7      	ble.n	80012e2 <receiveData+0x10a>
		 			 for(int i=1; i<11;i++)
 8001312:	2301      	movs	r3, #1
 8001314:	66bb      	str	r3, [r7, #104]	; 0x68
 8001316:	e013      	b.n	8001340 <receiveData+0x168>
		 				{fach[i-1]=arrcal[p][i];}
 8001318:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800131a:	1e59      	subs	r1, r3, #1
 800131c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800131e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001320:	4613      	mov	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	18c2      	adds	r2, r0, r3
 800132a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800132c:	4413      	add	r3, r2
 800132e:	781a      	ldrb	r2, [r3, #0]
 8001330:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001334:	440b      	add	r3, r1
 8001336:	f803 2c68 	strb.w	r2, [r3, #-104]
		 			 for(int i=1; i<11;i++)
 800133a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800133c:	3301      	adds	r3, #1
 800133e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001340:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001342:	2b0a      	cmp	r3, #10
 8001344:	dde8      	ble.n	8001318 <receiveData+0x140>
		 			 doz[3]='\0';
 8001346:	2300      	movs	r3, #0
 8001348:	71fb      	strb	r3, [r7, #7]
		 			 DrawCalenderField(arrcal[p][0], fach, doz);
 800134a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800134c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	440b      	add	r3, r1
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	1d3a      	adds	r2, r7, #4
 800135c:	f107 0108 	add.w	r1, r7, #8
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fe39 	bl	8000fd8 <DrawCalenderField>
		 		 for(int p=0; p< rxBuf[1]; p++)
 8001366:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001368:	3301      	adds	r3, #1
 800136a:	663b      	str	r3, [r7, #96]	; 0x60
 800136c:	7e7b      	ldrb	r3, [r7, #25]
 800136e:	461a      	mov	r2, r3
 8001370:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001372:	4293      	cmp	r3, r2
 8001374:	dbb2      	blt.n	80012dc <receiveData+0x104>
 8001376:	46c5      	mov	sp, r8
//		 		 for(int i=0; i<50;i++)
//		 		 {rxBuf[i]=0;}
		 		 //HAL_UART_Transmit(&huart4, (uint8_t*)tempLoad, 16, HAL_MAX_DELAY);
		 		// HAL_UART_Transmit(&huart4, end, 1, HAL_MAX_DELAY);
		 	 }
		 	 if((0<rxBuf[0]) & (rxBuf[0] <=35))
 8001378:	7e3b      	ldrb	r3, [r7, #24]
 800137a:	2b00      	cmp	r3, #0
 800137c:	bf14      	ite	ne
 800137e:	2301      	movne	r3, #1
 8001380:	2300      	moveq	r3, #0
 8001382:	b2da      	uxtb	r2, r3
 8001384:	7e3b      	ldrb	r3, [r7, #24]
 8001386:	2b23      	cmp	r3, #35	; 0x23
 8001388:	bf94      	ite	ls
 800138a:	2301      	movls	r3, #1
 800138c:	2300      	movhi	r3, #0
 800138e:	b2db      	uxtb	r3, r3
 8001390:	4013      	ands	r3, r2
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d041      	beq.n	800141c <receiveData+0x244>
		 	 {
		 		 for(int i=15; i<18;i++)
 8001398:	230f      	movs	r3, #15
 800139a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800139c:	e00e      	b.n	80013bc <receiveData+0x1e4>
		 			 {doz[i-15]=rxBuf[i];}
 800139e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013a0:	3b0f      	subs	r3, #15
 80013a2:	f107 0118 	add.w	r1, r7, #24
 80013a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80013a8:	440a      	add	r2, r1
 80013aa:	7812      	ldrb	r2, [r2, #0]
 80013ac:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80013b0:	440b      	add	r3, r1
 80013b2:	f803 2c6c 	strb.w	r2, [r3, #-108]
		 		 for(int i=15; i<18;i++)
 80013b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013b8:	3301      	adds	r3, #1
 80013ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80013bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013be:	2b11      	cmp	r3, #17
 80013c0:	dded      	ble.n	800139e <receiveData+0x1c6>
		 		 for(int i=1; i<11;i++)
 80013c2:	2301      	movs	r3, #1
 80013c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80013c6:	e00e      	b.n	80013e6 <receiveData+0x20e>
		 		 	 {fach[i-1]=rxBuf[i];}
 80013c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013ca:	3b01      	subs	r3, #1
 80013cc:	f107 0118 	add.w	r1, r7, #24
 80013d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80013d2:	440a      	add	r2, r1
 80013d4:	7812      	ldrb	r2, [r2, #0]
 80013d6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80013da:	440b      	add	r3, r1
 80013dc:	f803 2c68 	strb.w	r2, [r3, #-104]
		 		 for(int i=1; i<11;i++)
 80013e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013e2:	3301      	adds	r3, #1
 80013e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80013e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013e8:	2b0a      	cmp	r3, #10
 80013ea:	dded      	ble.n	80013c8 <receiveData+0x1f0>
		 		 doz[3]='\0';
 80013ec:	2300      	movs	r3, #0
 80013ee:	71fb      	strb	r3, [r7, #7]
		 		 DrawCalenderField(rxBuf[0], fach, doz);
 80013f0:	7e3b      	ldrb	r3, [r7, #24]
 80013f2:	1d3a      	adds	r2, r7, #4
 80013f4:	f107 0108 	add.w	r1, r7, #8
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fded 	bl	8000fd8 <DrawCalenderField>
		 		 //EpdDriverShowDisp();
		 		 for(int i=0; i<50;i++)
 80013fe:	2300      	movs	r3, #0
 8001400:	657b      	str	r3, [r7, #84]	; 0x54
 8001402:	e008      	b.n	8001416 <receiveData+0x23e>
		 		 	 {rxBuf[i]=0;}
 8001404:	f107 0218 	add.w	r2, r7, #24
 8001408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800140a:	4413      	add	r3, r2
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
		 		 for(int i=0; i<50;i++)
 8001410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001412:	3301      	adds	r3, #1
 8001414:	657b      	str	r3, [r7, #84]	; 0x54
 8001416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001418:	2b31      	cmp	r3, #49	; 0x31
 800141a:	ddf3      	ble.n	8001404 <receiveData+0x22c>
		 		 //HAL_UART_Transmit(&huart4, (uint8_t*)tempLoad, 16, HAL_MAX_DELAY);
		 		 //HAL_UART_Transmit(&huart4, trans, 6, HAL_MAX_DELAY);
		 		 //HAL_UART_Receive(&huart4, rxBuf, 2,HAL_MAX_DELAY);

		 	 }
		 	 if(37 == rxBuf[0])
 800141c:	7e3b      	ldrb	r3, [r7, #24]
 800141e:	2b25      	cmp	r3, #37	; 0x25
 8001420:	d101      	bne.n	8001426 <receiveData+0x24e>
		 	 	 {
		 		 EpdDriverShowDisp();
 8001422:	f7ff fba7 	bl	8000b74 <EpdDriverShowDisp>
		 	 	 }
}
 8001426:	bf00      	nop
 8001428:	3770      	adds	r7, #112	; 0x70
 800142a:	46bd      	mov	sp, r7
 800142c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001430:	2000022c 	.word	0x2000022c

08001434 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <MX_DMA_Init+0x70>)
 800143c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800143e:	4a19      	ldr	r2, [pc, #100]	; (80014a4 <MX_DMA_Init+0x70>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	6493      	str	r3, [r2, #72]	; 0x48
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <MX_DMA_Init+0x70>)
 8001448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <MX_DMA_Init+0x70>)
 8001454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001456:	4a13      	ldr	r2, [pc, #76]	; (80014a4 <MX_DMA_Init+0x70>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6493      	str	r3, [r2, #72]	; 0x48
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_DMA_Init+0x70>)
 8001460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	200b      	movs	r0, #11
 8001470:	f000 fe87 	bl	8002182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001474:	200b      	movs	r0, #11
 8001476:	f000 fea0 	bl	80021ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	200c      	movs	r0, #12
 8001480:	f000 fe7f 	bl	8002182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001484:	200c      	movs	r0, #12
 8001486:	f000 fe98 	bl	80021ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	200d      	movs	r0, #13
 8001490:	f000 fe77 	bl	8002182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001494:	200d      	movs	r0, #13
 8001496:	f000 fe90 	bl	80021ba <HAL_NVIC_EnableIRQ>

}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000

080014a8 <MX_GPIO_Init>:
        * the Code Generation settings)
     PD8   ------> USART3_TX
     PD9   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08e      	sub	sp, #56	; 0x38
 80014ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014be:	4bb4      	ldr	r3, [pc, #720]	; (8001790 <MX_GPIO_Init+0x2e8>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	4ab3      	ldr	r2, [pc, #716]	; (8001790 <MX_GPIO_Init+0x2e8>)
 80014c4:	f043 0310 	orr.w	r3, r3, #16
 80014c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ca:	4bb1      	ldr	r3, [pc, #708]	; (8001790 <MX_GPIO_Init+0x2e8>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	623b      	str	r3, [r7, #32]
 80014d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d6:	4bae      	ldr	r3, [pc, #696]	; (8001790 <MX_GPIO_Init+0x2e8>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	4aad      	ldr	r2, [pc, #692]	; (8001790 <MX_GPIO_Init+0x2e8>)
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e2:	4bab      	ldr	r3, [pc, #684]	; (8001790 <MX_GPIO_Init+0x2e8>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	61fb      	str	r3, [r7, #28]
 80014ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ee:	4ba8      	ldr	r3, [pc, #672]	; (8001790 <MX_GPIO_Init+0x2e8>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	4aa7      	ldr	r2, [pc, #668]	; (8001790 <MX_GPIO_Init+0x2e8>)
 80014f4:	f043 0320 	orr.w	r3, r3, #32
 80014f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fa:	4ba5      	ldr	r3, [pc, #660]	; (8001790 <MX_GPIO_Init+0x2e8>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	f003 0320 	and.w	r3, r3, #32
 8001502:	61bb      	str	r3, [r7, #24]
 8001504:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001506:	4ba2      	ldr	r3, [pc, #648]	; (8001790 <MX_GPIO_Init+0x2e8>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	4aa1      	ldr	r2, [pc, #644]	; (8001790 <MX_GPIO_Init+0x2e8>)
 800150c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001512:	4b9f      	ldr	r3, [pc, #636]	; (8001790 <MX_GPIO_Init+0x2e8>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	4b9c      	ldr	r3, [pc, #624]	; (8001790 <MX_GPIO_Init+0x2e8>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	4a9b      	ldr	r2, [pc, #620]	; (8001790 <MX_GPIO_Init+0x2e8>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152a:	4b99      	ldr	r3, [pc, #612]	; (8001790 <MX_GPIO_Init+0x2e8>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	4b96      	ldr	r3, [pc, #600]	; (8001790 <MX_GPIO_Init+0x2e8>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	4a95      	ldr	r2, [pc, #596]	; (8001790 <MX_GPIO_Init+0x2e8>)
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001542:	4b93      	ldr	r3, [pc, #588]	; (8001790 <MX_GPIO_Init+0x2e8>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800154e:	4b90      	ldr	r3, [pc, #576]	; (8001790 <MX_GPIO_Init+0x2e8>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	4a8f      	ldr	r2, [pc, #572]	; (8001790 <MX_GPIO_Init+0x2e8>)
 8001554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155a:	4b8d      	ldr	r3, [pc, #564]	; (8001790 <MX_GPIO_Init+0x2e8>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001566:	4b8a      	ldr	r3, [pc, #552]	; (8001790 <MX_GPIO_Init+0x2e8>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156a:	4a89      	ldr	r2, [pc, #548]	; (8001790 <MX_GPIO_Init+0x2e8>)
 800156c:	f043 0308 	orr.w	r3, r3, #8
 8001570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001572:	4b87      	ldr	r3, [pc, #540]	; (8001790 <MX_GPIO_Init+0x2e8>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800157e:	f001 fae5 	bl	8002b4c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EPD_ON_Pin|Kill_Pin|PwrKill_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	210d      	movs	r1, #13
 8001586:	4883      	ldr	r0, [pc, #524]	; (8001794 <MX_GPIO_Init+0x2ec>)
 8001588:	f001 f9f4 	bl	8002974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EPD_OFF_GPIO_Port, EPD_OFF_Pin, GPIO_PIN_SET);
 800158c:	2201      	movs	r2, #1
 800158e:	2102      	movs	r1, #2
 8001590:	4880      	ldr	r0, [pc, #512]	; (8001794 <MX_GPIO_Init+0x2ec>)
 8001592:	f001 f9ef 	bl	8002974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EPD_CS_Pin|EPD_RST_Pin, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	2111      	movs	r1, #17
 800159a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159e:	f001 f9e9 	bl	8002974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80015a8:	487b      	ldr	r0, [pc, #492]	; (8001798 <MX_GPIO_Init+0x2f0>)
 80015aa:	f001 f9e3 	bl	8002974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2120      	movs	r1, #32
 80015b2:	487a      	ldr	r0, [pc, #488]	; (800179c <MX_GPIO_Init+0x2f4>)
 80015b4:	f001 f9de 	bl	8002974 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE8 PE9 
                           PE10 PE11 PE12 PE13 
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80015b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015be:	2303      	movs	r3, #3
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ca:	4619      	mov	r1, r3
 80015cc:	4874      	ldr	r0, [pc, #464]	; (80017a0 <MX_GPIO_Init+0x2f8>)
 80015ce:	f001 f827 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015d8:	4b72      	ldr	r3, [pc, #456]	; (80017a4 <MX_GPIO_Init+0x2fc>)
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e4:	4619      	mov	r1, r3
 80015e6:	486b      	ldr	r0, [pc, #428]	; (8001794 <MX_GPIO_Init+0x2ec>)
 80015e8:	f001 f81a 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 
                           PF4 PF5 PF6 PF7 
                           PF8 PF9 PF10 PF11 
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80015ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f2:	2303      	movs	r3, #3
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fe:	4619      	mov	r1, r3
 8001600:	4869      	ldr	r0, [pc, #420]	; (80017a8 <MX_GPIO_Init+0x300>)
 8001602:	f001 f80d 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = EPD_ON_Pin|EPD_OFF_Pin|Kill_Pin|PwrKill_Pin;
 8001606:	230f      	movs	r3, #15
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160a:	2301      	movs	r3, #1
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001612:	2303      	movs	r3, #3
 8001614:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161a:	4619      	mov	r1, r3
 800161c:	485d      	ldr	r0, [pc, #372]	; (8001794 <MX_GPIO_Init+0x2ec>)
 800161e:	f000 ffff 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_CS_Pin;
 8001622:	2301      	movs	r3, #1
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001626:	2311      	movs	r3, #17
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800162a:	2301      	movs	r3, #1
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(EPD_CS_GPIO_Port, &GPIO_InitStruct);
 8001632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001636:	4619      	mov	r1, r3
 8001638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163c:	f000 fff0 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8001640:	f248 030c 	movw	r3, #32780	; 0x800c
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001646:	2303      	movs	r3, #3
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001652:	4619      	mov	r1, r3
 8001654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001658:	f000 ffe2 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_RST_Pin;
 800165c:	2310      	movs	r3, #16
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001660:	2301      	movs	r3, #1
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(EPD_RST_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001670:	4619      	mov	r1, r3
 8001672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001676:	f000 ffd3 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_HRDY_Pin;
 800167a:	2320      	movs	r3, #32
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167e:	2300      	movs	r3, #0
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EPD_HRDY_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168a:	4619      	mov	r1, r3
 800168c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001690:	f000 ffc6 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7 
                           PC8 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
 8001694:	f241 33f0 	movw	r3, #5104	; 0x13f0
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800169a:	2303      	movs	r3, #3
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a6:	4619      	mov	r1, r3
 80016a8:	483a      	ldr	r0, [pc, #232]	; (8001794 <MX_GPIO_Init+0x2ec>)
 80016aa:	f000 ffb9 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB15 
                           PB4 PB5 PB6 PB8 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80016ae:	f64b 7377 	movw	r3, #49015	; 0xbf77
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016b4:	2303      	movs	r3, #3
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c0:	4619      	mov	r1, r3
 80016c2:	4835      	ldr	r0, [pc, #212]	; (8001798 <MX_GPIO_Init+0x2f0>)
 80016c4:	f000 ffac 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 
                           PG4 PG9 PG10 PG11 
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80016c8:	f64f 631f 	movw	r3, #65055	; 0xfe1f
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ce:	2303      	movs	r3, #3
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016da:	4619      	mov	r1, r3
 80016dc:	482f      	ldr	r0, [pc, #188]	; (800179c <MX_GPIO_Init+0x2f4>)
 80016de:	f000 ff9f 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80016e2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f8:	4619      	mov	r1, r3
 80016fa:	4827      	ldr	r0, [pc, #156]	; (8001798 <MX_GPIO_Init+0x2f0>)
 80016fc:	f000 ff90 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001700:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001712:	2307      	movs	r3, #7
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171a:	4619      	mov	r1, r3
 800171c:	4823      	ldr	r0, [pc, #140]	; (80017ac <MX_GPIO_Init+0x304>)
 800171e:	f000 ff7f 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13 
                           PD14 PD15 PD0 PD1 
                           PD2 PD3 PD4 PD5 
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8001722:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001728:	2303      	movs	r3, #3
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001734:	4619      	mov	r1, r3
 8001736:	481d      	ldr	r0, [pc, #116]	; (80017ac <MX_GPIO_Init+0x304>)
 8001738:	f000 ff72 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800173c:	2320      	movs	r3, #32
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001740:	2301      	movs	r3, #1
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800174c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001750:	4619      	mov	r1, r3
 8001752:	4812      	ldr	r0, [pc, #72]	; (800179c <MX_GPIO_Init+0x2f4>)
 8001754:	f000 ff64 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001758:	2340      	movs	r3, #64	; 0x40
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800175c:	2300      	movs	r3, #0
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001768:	4619      	mov	r1, r3
 800176a:	480c      	ldr	r0, [pc, #48]	; (800179c <MX_GPIO_Init+0x2f4>)
 800176c:	f000 ff58 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001770:	2308      	movs	r3, #8
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001774:	2303      	movs	r3, #3
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800177c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001780:	4619      	mov	r1, r3
 8001782:	480b      	ldr	r0, [pc, #44]	; (80017b0 <MX_GPIO_Init+0x308>)
 8001784:	f000 ff4c 	bl	8002620 <HAL_GPIO_Init>

}
 8001788:	bf00      	nop
 800178a:	3738      	adds	r7, #56	; 0x38
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40021000 	.word	0x40021000
 8001794:	48000800 	.word	0x48000800
 8001798:	48000400 	.word	0x48000400
 800179c:	48001800 	.word	0x48001800
 80017a0:	48001000 	.word	0x48001000
 80017a4:	10110000 	.word	0x10110000
 80017a8:	48001400 	.word	0x48001400
 80017ac:	48000c00 	.word	0x48000c00
 80017b0:	48001c00 	.word	0x48001c00

080017b4 <initController>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void initController()
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	HAL_Init();
 80017b8:	f000 fb75 	bl	8001ea6 <HAL_Init>
	SystemClock_Config();
 80017bc:	f000 f842 	bl	8001844 <SystemClock_Config>
	MX_GPIO_Init();
 80017c0:	f7ff fe72 	bl	80014a8 <MX_GPIO_Init>
	MX_SPI1_Init();
 80017c4:	f000 f8da 	bl	800197c <MX_SPI1_Init>
	MX_DMA_Init();
 80017c8:	f7ff fe34 	bl	8001434 <MX_DMA_Init>
	MX_UART4_Init();
 80017cc:	f000 fa3e 	bl	8001c4c <MX_UART4_Init>
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <disablePwrKill>:
void disablePwrKill()
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(Kill_GPIO_Port, Kill_Pin, SET);
 80017d8:	2201      	movs	r2, #1
 80017da:	2104      	movs	r1, #4
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <disablePwrKill+0x20>)
 80017de:	f001 f8c9 	bl	8002974 <HAL_GPIO_WritePin>
EpdOff();
 80017e2:	f7fe feb5 	bl	8000550 <EpdOff>
//HAL_Delay(20);
HAL_GPIO_WritePin(PwrKill_GPIO_Port, PwrKill_Pin, SET);
 80017e6:	2201      	movs	r2, #1
 80017e8:	2108      	movs	r1, #8
 80017ea:	4802      	ldr	r0, [pc, #8]	; (80017f4 <disablePwrKill+0x20>)
 80017ec:	f001 f8c2 	bl	8002974 <HAL_GPIO_WritePin>
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	48000800 	.word	0x48000800

080017f8 <main>:
  * @retval int
  */


int main(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  /* USER CODE BEGIN Init */
	initController();
 80017fc:	f7ff ffda 	bl	80017b4 <initController>
	disablePwrKill();
 8001800:	f7ff ffe8 	bl	80017d4 <disablePwrKill>

  //MX_LPUART1_UART_Init();
  //MX_USB_OTG_FS_PCD_Init();

  /* USER CODE BEGIN 2 */
  EpdOn();
 8001804:	f7fe fe7c 	bl	8000500 <EpdOn>
  //HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
  EpdDriverLoadTemplate();
 8001808:	f7ff f958 	bl	8000abc <EpdDriverLoadTemplate>
  receiveData();
 800180c:	f7ff fce4 	bl	80011d8 <receiveData>
  //HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
  EpdDriverShowDisp();
 8001810:	f7ff f9b0 	bl	8000b74 <EpdDriverShowDisp>
  HAL_Delay(1500);
 8001814:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001818:	f000 fbb6 	bl	8001f88 <HAL_Delay>
  EpdOff();
 800181c:	f7fe fe98 	bl	8000550 <EpdOff>
  //HAL_Delay(10);

  HAL_GPIO_WritePin(EPD_OFF_GPIO_Port, EPD_OFF_Pin, SET);
 8001820:	2201      	movs	r2, #1
 8001822:	2102      	movs	r1, #2
 8001824:	4806      	ldr	r0, [pc, #24]	; (8001840 <main+0x48>)
 8001826:	f001 f8a5 	bl	8002974 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PwrKill_GPIO_Port, PwrKill_Pin, RESET);
 800182a:	2200      	movs	r2, #0
 800182c:	2108      	movs	r1, #8
 800182e:	4804      	ldr	r0, [pc, #16]	; (8001840 <main+0x48>)
 8001830:	f001 f8a0 	bl	8002974 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Kill_GPIO_Port, Kill_Pin, RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	2104      	movs	r1, #4
 8001838:	4801      	ldr	r0, [pc, #4]	; (8001840 <main+0x48>)
 800183a:	f001 f89b 	bl	8002974 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800183e:	e7fe      	b.n	800183e <main+0x46>
 8001840:	48000800 	.word	0x48000800

08001844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b0bc      	sub	sp, #240	; 0xf0
 8001848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800184a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800184e:	2244      	movs	r2, #68	; 0x44
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f004 ff98 	bl	8006788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001858:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	2294      	movs	r2, #148	; 0x94
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f004 ff8a 	bl	8006788 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001874:	2000      	movs	r0, #0
 8001876:	f001 f8c5 	bl	8002a04 <HAL_PWREx_ControlVoltageScaling>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8001880:	f000 f874 	bl	800196c <Error_Handler>
  }
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001884:	f001 f88e 	bl	80029a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001888:	4b37      	ldr	r3, [pc, #220]	; (8001968 <SystemClock_Config+0x124>)
 800188a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188e:	4a36      	ldr	r2, [pc, #216]	; (8001968 <SystemClock_Config+0x124>)
 8001890:	f023 0318 	bic.w	r3, r3, #24
 8001894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8001898:	2316      	movs	r3, #22
 800189a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800189e:	2301      	movs	r3, #1
 80018a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018ac:	2340      	movs	r3, #64	; 0x40
 80018ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80018b2:	2301      	movs	r3, #1
 80018b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80018be:	23b0      	movs	r3, #176	; 0xb0
 80018c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c4:	2302      	movs	r3, #2
 80018c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018ca:	2302      	movs	r3, #2
 80018cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 80018d0:	2302      	movs	r3, #2
 80018d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 28;
 80018d6:	231c      	movs	r3, #28
 80018d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018dc:	2302      	movs	r3, #2
 80018de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018e2:	2302      	movs	r3, #2
 80018e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018e8:	2302      	movs	r3, #2
 80018ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018f2:	4618      	mov	r0, r3
 80018f4:	f001 f93a 	bl	8002b6c <HAL_RCC_OscConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80018fe:	f000 f835 	bl	800196c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001902:	230f      	movs	r3, #15
 8001904:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001908:	2303      	movs	r3, #3
 800190a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800190e:	2300      	movs	r3, #0
 8001910:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001914:	2300      	movs	r3, #0
 8001916:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800191a:	2300      	movs	r3, #0
 800191c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001920:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001924:	2105      	movs	r1, #5
 8001926:	4618      	mov	r0, r3
 8001928:	f001 fd0e 	bl	8003348 <HAL_RCC_ClockConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001932:	f000 f81b 	bl	800196c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_LPUART1
 8001936:	f242 0328 	movw	r3, #8232	; 0x2028
 800193a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800193c:	2300      	movs	r3, #0
 800193e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001940:	2300      	movs	r3, #0
 8001942:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8001944:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8001948:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	4618      	mov	r0, r3
 800194e:	f001 ffab 	bl	80038a8 <HAL_RCCEx_PeriphCLKConfig>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <SystemClock_Config+0x118>
  {
    Error_Handler();
 8001958:	f000 f808 	bl	800196c <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800195c:	f002 facc 	bl	8003ef8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001960:	bf00      	nop
 8001962:	37f0      	adds	r7, #240	; 0xf0
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40021000 	.word	0x40021000

0800196c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001980:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <MX_SPI1_Init+0x74>)
 8001982:	4a1c      	ldr	r2, [pc, #112]	; (80019f4 <MX_SPI1_Init+0x78>)
 8001984:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001986:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <MX_SPI1_Init+0x74>)
 8001988:	f44f 7282 	mov.w	r2, #260	; 0x104
 800198c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800198e:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <MX_SPI1_Init+0x74>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001994:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <MX_SPI1_Init+0x74>)
 8001996:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800199a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <MX_SPI1_Init+0x74>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019a2:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <MX_SPI1_Init+0x74>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <MX_SPI1_Init+0x74>)
 80019aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80019b0:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <MX_SPI1_Init+0x74>)
 80019b2:	2210      	movs	r2, #16
 80019b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <MX_SPI1_Init+0x74>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <MX_SPI1_Init+0x74>)
 80019be:	2200      	movs	r2, #0
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019c2:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <MX_SPI1_Init+0x74>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80019c8:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <MX_SPI1_Init+0x74>)
 80019ca:	2207      	movs	r2, #7
 80019cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019ce:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <MX_SPI1_Init+0x74>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <MX_SPI1_Init+0x74>)
 80019d6:	2208      	movs	r2, #8
 80019d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <MX_SPI1_Init+0x74>)
 80019dc:	f002 fc7c 	bl	80042d8 <HAL_SPI_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80019e6:	f7ff ffc1 	bl	800196c <Error_Handler>
  }

}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000078 	.word	0x20000078
 80019f4:	40013000 	.word	0x40013000

080019f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	; 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a31      	ldr	r2, [pc, #196]	; (8001adc <HAL_SPI_MspInit+0xe4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d15c      	bne.n	8001ad4 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a1a:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <HAL_SPI_MspInit+0xe8>)
 8001a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1e:	4a30      	ldr	r2, [pc, #192]	; (8001ae0 <HAL_SPI_MspInit+0xe8>)
 8001a20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a24:	6613      	str	r3, [r2, #96]	; 0x60
 8001a26:	4b2e      	ldr	r3, [pc, #184]	; (8001ae0 <HAL_SPI_MspInit+0xe8>)
 8001a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	4b2b      	ldr	r3, [pc, #172]	; (8001ae0 <HAL_SPI_MspInit+0xe8>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a36:	4a2a      	ldr	r2, [pc, #168]	; (8001ae0 <HAL_SPI_MspInit+0xe8>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a3e:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <HAL_SPI_MspInit+0xe8>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001a4a:	23c2      	movs	r3, #194	; 0xc2
 8001a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a5a:	2305      	movs	r3, #5
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4619      	mov	r1, r3
 8001a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a68:	f000 fdda 	bl	8002620 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <HAL_SPI_MspInit+0xec>)
 8001a6e:	4a1e      	ldr	r2, [pc, #120]	; (8001ae8 <HAL_SPI_MspInit+0xf0>)
 8001a70:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <HAL_SPI_MspInit+0xec>)
 8001a74:	220b      	movs	r2, #11
 8001a76:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a78:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <HAL_SPI_MspInit+0xec>)
 8001a7a:	2210      	movs	r2, #16
 8001a7c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a7e:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_SPI_MspInit+0xec>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a84:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <HAL_SPI_MspInit+0xec>)
 8001a86:	2280      	movs	r2, #128	; 0x80
 8001a88:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <HAL_SPI_MspInit+0xec>)
 8001a8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a90:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <HAL_SPI_MspInit+0xec>)
 8001a94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a98:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001a9a:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_SPI_MspInit+0xec>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001aa0:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_SPI_MspInit+0xec>)
 8001aa2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aa6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001aa8:	480e      	ldr	r0, [pc, #56]	; (8001ae4 <HAL_SPI_MspInit+0xec>)
 8001aaa:	f000 fba1 	bl	80021f0 <HAL_DMA_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8001ab4:	f7ff ff5a 	bl	800196c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <HAL_SPI_MspInit+0xec>)
 8001abc:	659a      	str	r2, [r3, #88]	; 0x58
 8001abe:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <HAL_SPI_MspInit+0xec>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	2023      	movs	r0, #35	; 0x23
 8001aca:	f000 fb5a 	bl	8002182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001ace:	2023      	movs	r0, #35	; 0x23
 8001ad0:	f000 fb73 	bl	80021ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	3728      	adds	r7, #40	; 0x28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40013000 	.word	0x40013000
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	200000e0 	.word	0x200000e0
 8001ae8:	40020030 	.word	0x40020030

08001aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <HAL_MspInit+0x44>)
 8001af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af6:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <HAL_MspInit+0x44>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6613      	str	r3, [r2, #96]	; 0x60
 8001afe:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <HAL_MspInit+0x44>)
 8001b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_MspInit+0x44>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	4a08      	ldr	r2, [pc, #32]	; (8001b30 <HAL_MspInit+0x44>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b14:	6593      	str	r3, [r2, #88]	; 0x58
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_MspInit+0x44>)
 8001b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000

08001b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <HardFault_Handler+0x4>

08001b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <MemManage_Handler+0x4>

08001b4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b52:	e7fe      	b.n	8001b52 <BusFault_Handler+0x4>

08001b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <UsageFault_Handler+0x4>

08001b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b88:	f000 f9e0 	bl	8001f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <DMA1_Channel1_IRQHandler+0x10>)
 8001b96:	f000 fc32 	bl	80023fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000140 	.word	0x20000140

08001ba4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <DMA1_Channel2_IRQHandler+0x10>)
 8001baa:	f000 fc28 	bl	80023fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200002b8 	.word	0x200002b8

08001bb8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001bbc:	4802      	ldr	r0, [pc, #8]	; (8001bc8 <DMA1_Channel3_IRQHandler+0x10>)
 8001bbe:	f000 fc1e 	bl	80023fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200000e0 	.word	0x200000e0

08001bcc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001bd0:	4802      	ldr	r0, [pc, #8]	; (8001bdc <SPI1_IRQHandler+0x10>)
 8001bd2:	f002 ff61 	bl	8004a98 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000078 	.word	0x20000078

08001be0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <SystemInit+0x64>)
 8001be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bea:	4a16      	ldr	r2, [pc, #88]	; (8001c44 <SystemInit+0x64>)
 8001bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001bf4:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <SystemInit+0x68>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a13      	ldr	r2, [pc, #76]	; (8001c48 <SystemInit+0x68>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <SystemInit+0x68>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <SystemInit+0x68>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a0f      	ldr	r2, [pc, #60]	; (8001c48 <SystemInit+0x68>)
 8001c0c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c10:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c14:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <SystemInit+0x68>)
 8001c18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c1c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <SystemInit+0x68>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a09      	ldr	r2, [pc, #36]	; (8001c48 <SystemInit+0x68>)
 8001c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c28:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <SystemInit+0x68>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c30:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <SystemInit+0x64>)
 8001c32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c36:	609a      	str	r2, [r3, #8]
#endif
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000ed00 	.word	0xe000ed00
 8001c48:	40021000 	.word	0x40021000

08001c4c <MX_UART4_Init>:
  }

}
/* UART4 init function */
void MX_UART4_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001c50:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <MX_UART4_Init+0x58>)
 8001c52:	4a15      	ldr	r2, [pc, #84]	; (8001ca8 <MX_UART4_Init+0x5c>)
 8001c54:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001c56:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <MX_UART4_Init+0x58>)
 8001c58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c5c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5e:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <MX_UART4_Init+0x58>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <MX_UART4_Init+0x58>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <MX_UART4_Init+0x58>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <MX_UART4_Init+0x58>)
 8001c72:	220c      	movs	r2, #12
 8001c74:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c76:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <MX_UART4_Init+0x58>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <MX_UART4_Init+0x58>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <MX_UART4_Init+0x58>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <MX_UART4_Init+0x58>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c8e:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <MX_UART4_Init+0x58>)
 8001c90:	f003 f93e 	bl	8004f10 <HAL_UART_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001c9a:	f7ff fe67 	bl	800196c <Error_Handler>
  }

}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	2000022c 	.word	0x2000022c
 8001ca8:	40004c00 	.word	0x40004c00

08001cac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08c      	sub	sp, #48	; 0x30
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 031c 	add.w	r3, r7, #28
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a59      	ldr	r2, [pc, #356]	; (8001e30 <HAL_UART_MspInit+0x184>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d12b      	bne.n	8001d26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001cce:	4b59      	ldr	r3, [pc, #356]	; (8001e34 <HAL_UART_MspInit+0x188>)
 8001cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd2:	4a58      	ldr	r2, [pc, #352]	; (8001e34 <HAL_UART_MspInit+0x188>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001cda:	4b56      	ldr	r3, [pc, #344]	; (8001e34 <HAL_UART_MspInit+0x188>)
 8001cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	61bb      	str	r3, [r7, #24]
 8001ce4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ce6:	4b53      	ldr	r3, [pc, #332]	; (8001e34 <HAL_UART_MspInit+0x188>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cea:	4a52      	ldr	r2, [pc, #328]	; (8001e34 <HAL_UART_MspInit+0x188>)
 8001cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf2:	4b50      	ldr	r3, [pc, #320]	; (8001e34 <HAL_UART_MspInit+0x188>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8001cfe:	f000 ff25 	bl	8002b4c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001d02:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d10:	2303      	movs	r3, #3
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001d14:	2308      	movs	r3, #8
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d18:	f107 031c 	add.w	r3, r7, #28
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4846      	ldr	r0, [pc, #280]	; (8001e38 <HAL_UART_MspInit+0x18c>)
 8001d20:	f000 fc7e 	bl	8002620 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001d24:	e07f      	b.n	8001e26 <HAL_UART_MspInit+0x17a>
  else if(uartHandle->Instance==UART4)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a44      	ldr	r2, [pc, #272]	; (8001e3c <HAL_UART_MspInit+0x190>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d17a      	bne.n	8001e26 <HAL_UART_MspInit+0x17a>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d30:	4b40      	ldr	r3, [pc, #256]	; (8001e34 <HAL_UART_MspInit+0x188>)
 8001d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d34:	4a3f      	ldr	r2, [pc, #252]	; (8001e34 <HAL_UART_MspInit+0x188>)
 8001d36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d3c:	4b3d      	ldr	r3, [pc, #244]	; (8001e34 <HAL_UART_MspInit+0x188>)
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d48:	4b3a      	ldr	r3, [pc, #232]	; (8001e34 <HAL_UART_MspInit+0x188>)
 8001d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4c:	4a39      	ldr	r2, [pc, #228]	; (8001e34 <HAL_UART_MspInit+0x188>)
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d54:	4b37      	ldr	r3, [pc, #220]	; (8001e34 <HAL_UART_MspInit+0x188>)
 8001d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d60:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d72:	2308      	movs	r3, #8
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d76:	f107 031c 	add.w	r3, r7, #28
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4830      	ldr	r0, [pc, #192]	; (8001e40 <HAL_UART_MspInit+0x194>)
 8001d7e:	f000 fc4f 	bl	8002620 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Channel1;
 8001d82:	4b30      	ldr	r3, [pc, #192]	; (8001e44 <HAL_UART_MspInit+0x198>)
 8001d84:	4a30      	ldr	r2, [pc, #192]	; (8001e48 <HAL_UART_MspInit+0x19c>)
 8001d86:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001d88:	4b2e      	ldr	r3, [pc, #184]	; (8001e44 <HAL_UART_MspInit+0x198>)
 8001d8a:	221e      	movs	r2, #30
 8001d8c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d8e:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <HAL_UART_MspInit+0x198>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d94:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <HAL_UART_MspInit+0x198>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d9a:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <HAL_UART_MspInit+0x198>)
 8001d9c:	2280      	movs	r2, #128	; 0x80
 8001d9e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001da0:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <HAL_UART_MspInit+0x198>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001da6:	4b27      	ldr	r3, [pc, #156]	; (8001e44 <HAL_UART_MspInit+0x198>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001dac:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <HAL_UART_MspInit+0x198>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001db2:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <HAL_UART_MspInit+0x198>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001db8:	4822      	ldr	r0, [pc, #136]	; (8001e44 <HAL_UART_MspInit+0x198>)
 8001dba:	f000 fa19 	bl	80021f0 <HAL_DMA_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <HAL_UART_MspInit+0x11c>
      Error_Handler();
 8001dc4:	f7ff fdd2 	bl	800196c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a1e      	ldr	r2, [pc, #120]	; (8001e44 <HAL_UART_MspInit+0x198>)
 8001dcc:	679a      	str	r2, [r3, #120]	; 0x78
 8001dce:	4a1d      	ldr	r2, [pc, #116]	; (8001e44 <HAL_UART_MspInit+0x198>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_uart4_tx.Instance = DMA1_Channel2;
 8001dd4:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <HAL_UART_MspInit+0x1a0>)
 8001dd6:	4a1e      	ldr	r2, [pc, #120]	; (8001e50 <HAL_UART_MspInit+0x1a4>)
 8001dd8:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001dda:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <HAL_UART_MspInit+0x1a0>)
 8001ddc:	221f      	movs	r2, #31
 8001dde:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001de0:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <HAL_UART_MspInit+0x1a0>)
 8001de2:	2210      	movs	r2, #16
 8001de4:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001de6:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <HAL_UART_MspInit+0x1a0>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <HAL_UART_MspInit+0x1a0>)
 8001dee:	2280      	movs	r2, #128	; 0x80
 8001df0:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001df2:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <HAL_UART_MspInit+0x1a0>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001df8:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <HAL_UART_MspInit+0x1a0>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <HAL_UART_MspInit+0x1a0>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_UART_MspInit+0x1a0>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001e0a:	4810      	ldr	r0, [pc, #64]	; (8001e4c <HAL_UART_MspInit+0x1a0>)
 8001e0c:	f000 f9f0 	bl	80021f0 <HAL_DMA_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8001e16:	f7ff fda9 	bl	800196c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <HAL_UART_MspInit+0x1a0>)
 8001e1e:	675a      	str	r2, [r3, #116]	; 0x74
 8001e20:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <HAL_UART_MspInit+0x1a0>)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001e26:	bf00      	nop
 8001e28:	3730      	adds	r7, #48	; 0x30
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40008000 	.word	0x40008000
 8001e34:	40021000 	.word	0x40021000
 8001e38:	48001800 	.word	0x48001800
 8001e3c:	40004c00 	.word	0x40004c00
 8001e40:	48000800 	.word	0x48000800
 8001e44:	20000140 	.word	0x20000140
 8001e48:	40020008 	.word	0x40020008
 8001e4c:	200002b8 	.word	0x200002b8
 8001e50:	4002001c 	.word	0x4002001c

08001e54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e8c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e5a:	e003      	b.n	8001e64 <LoopCopyDataInit>

08001e5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e62:	3104      	adds	r1, #4

08001e64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e64:	480b      	ldr	r0, [pc, #44]	; (8001e94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e66:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e6c:	d3f6      	bcc.n	8001e5c <CopyDataInit>
	ldr	r2, =_sbss
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e70:	e002      	b.n	8001e78 <LoopFillZerobss>

08001e72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e74:	f842 3b04 	str.w	r3, [r2], #4

08001e78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <LoopForever+0x16>)
	cmp	r2, r3
 8001e7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e7c:	d3f9      	bcc.n	8001e72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e7e:	f7ff feaf 	bl	8001be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e82:	f004 fc5d 	bl	8006740 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e86:	f7ff fcb7 	bl	80017f8 <main>

08001e8a <LoopForever>:

LoopForever:
    b LoopForever
 8001e8a:	e7fe      	b.n	8001e8a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e8c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001e90:	08081058 	.word	0x08081058
	ldr	r0, =_sdata
 8001e94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e98:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8001e9c:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8001ea0:	2000031c 	.word	0x2000031c

08001ea4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ea4:	e7fe      	b.n	8001ea4 <ADC1_IRQHandler>

08001ea6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb0:	2003      	movs	r0, #3
 8001eb2:	f000 f95b 	bl	800216c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f000 f80e 	bl	8001ed8 <HAL_InitTick>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d002      	beq.n	8001ec8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	71fb      	strb	r3, [r7, #7]
 8001ec6:	e001      	b.n	8001ecc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ec8:	f7ff fe10 	bl	8001aec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ee4:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <HAL_InitTick+0x68>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d022      	beq.n	8001f32 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001eec:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <HAL_InitTick+0x6c>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <HAL_InitTick+0x68>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ef8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 f968 	bl	80021d6 <HAL_SYSTICK_Config>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10f      	bne.n	8001f2c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b0f      	cmp	r3, #15
 8001f10:	d809      	bhi.n	8001f26 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f12:	2200      	movs	r2, #0
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1a:	f000 f932 	bl	8002182 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <HAL_InitTick+0x70>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	e007      	b.n	8001f36 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	73fb      	strb	r3, [r7, #15]
 8001f2a:	e004      	b.n	8001f36 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	e001      	b.n	8001f36 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000010 	.word	0x20000010
 8001f44:	20000008 	.word	0x20000008
 8001f48:	2000000c 	.word	0x2000000c

08001f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_IncTick+0x1c>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_IncTick+0x20>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4413      	add	r3, r2
 8001f5a:	4a03      	ldr	r2, [pc, #12]	; (8001f68 <HAL_IncTick+0x1c>)
 8001f5c:	6013      	str	r3, [r2, #0]
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	20000318 	.word	0x20000318
 8001f6c:	20000010 	.word	0x20000010

08001f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return uwTick;
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <HAL_GetTick+0x14>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20000318 	.word	0x20000318

08001f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f90:	f7ff ffee 	bl	8001f70 <HAL_GetTick>
 8001f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa0:	d004      	beq.n	8001fac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_Delay+0x40>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4413      	add	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fac:	bf00      	nop
 8001fae:	f7ff ffdf 	bl	8001f70 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d8f7      	bhi.n	8001fae <HAL_Delay+0x26>
  {
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000010 	.word	0x20000010

08001fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <__NVIC_SetPriorityGrouping+0x44>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ffe:	4a04      	ldr	r2, [pc, #16]	; (8002010 <__NVIC_SetPriorityGrouping+0x44>)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	60d3      	str	r3, [r2, #12]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <__NVIC_GetPriorityGrouping+0x18>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	0a1b      	lsrs	r3, r3, #8
 800201e:	f003 0307 	and.w	r3, r3, #7
}
 8002022:	4618      	mov	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	2b00      	cmp	r3, #0
 8002040:	db0b      	blt.n	800205a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	f003 021f 	and.w	r2, r3, #31
 8002048:	4907      	ldr	r1, [pc, #28]	; (8002068 <__NVIC_EnableIRQ+0x38>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	2001      	movs	r0, #1
 8002052:	fa00 f202 	lsl.w	r2, r0, r2
 8002056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000e100 	.word	0xe000e100

0800206c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	6039      	str	r1, [r7, #0]
 8002076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207c:	2b00      	cmp	r3, #0
 800207e:	db0a      	blt.n	8002096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	b2da      	uxtb	r2, r3
 8002084:	490c      	ldr	r1, [pc, #48]	; (80020b8 <__NVIC_SetPriority+0x4c>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	0112      	lsls	r2, r2, #4
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	440b      	add	r3, r1
 8002090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002094:	e00a      	b.n	80020ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4908      	ldr	r1, [pc, #32]	; (80020bc <__NVIC_SetPriority+0x50>)
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	3b04      	subs	r3, #4
 80020a4:	0112      	lsls	r2, r2, #4
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	440b      	add	r3, r1
 80020aa:	761a      	strb	r2, [r3, #24]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000e100 	.word	0xe000e100
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	; 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f1c3 0307 	rsb	r3, r3, #7
 80020da:	2b04      	cmp	r3, #4
 80020dc:	bf28      	it	cs
 80020de:	2304      	movcs	r3, #4
 80020e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3304      	adds	r3, #4
 80020e6:	2b06      	cmp	r3, #6
 80020e8:	d902      	bls.n	80020f0 <NVIC_EncodePriority+0x30>
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3b03      	subs	r3, #3
 80020ee:	e000      	b.n	80020f2 <NVIC_EncodePriority+0x32>
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	f04f 32ff 	mov.w	r2, #4294967295
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43da      	mvns	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	401a      	ands	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002108:	f04f 31ff 	mov.w	r1, #4294967295
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	43d9      	mvns	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	4313      	orrs	r3, r2
         );
}
 800211a:	4618      	mov	r0, r3
 800211c:	3724      	adds	r7, #36	; 0x24
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002138:	d301      	bcc.n	800213e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213a:	2301      	movs	r3, #1
 800213c:	e00f      	b.n	800215e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213e:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <SysTick_Config+0x40>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3b01      	subs	r3, #1
 8002144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002146:	210f      	movs	r1, #15
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	f7ff ff8e 	bl	800206c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <SysTick_Config+0x40>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002156:	4b04      	ldr	r3, [pc, #16]	; (8002168 <SysTick_Config+0x40>)
 8002158:	2207      	movs	r2, #7
 800215a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	e000e010 	.word	0xe000e010

0800216c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ff29 	bl	8001fcc <__NVIC_SetPriorityGrouping>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b086      	sub	sp, #24
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002194:	f7ff ff3e 	bl	8002014 <__NVIC_GetPriorityGrouping>
 8002198:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	6978      	ldr	r0, [r7, #20]
 80021a0:	f7ff ff8e 	bl	80020c0 <NVIC_EncodePriority>
 80021a4:	4602      	mov	r2, r0
 80021a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff5d 	bl	800206c <__NVIC_SetPriority>
}
 80021b2:	bf00      	nop
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4603      	mov	r3, r0
 80021c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff31 	bl	8002030 <__NVIC_EnableIRQ>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff ffa2 	bl	8002128 <SysTick_Config>
 80021e4:	4603      	mov	r3, r0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e08d      	b.n	800231e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	4b47      	ldr	r3, [pc, #284]	; (8002328 <HAL_DMA_Init+0x138>)
 800220a:	429a      	cmp	r2, r3
 800220c:	d80f      	bhi.n	800222e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	4b45      	ldr	r3, [pc, #276]	; (800232c <HAL_DMA_Init+0x13c>)
 8002216:	4413      	add	r3, r2
 8002218:	4a45      	ldr	r2, [pc, #276]	; (8002330 <HAL_DMA_Init+0x140>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	091b      	lsrs	r3, r3, #4
 8002220:	009a      	lsls	r2, r3, #2
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a42      	ldr	r2, [pc, #264]	; (8002334 <HAL_DMA_Init+0x144>)
 800222a:	641a      	str	r2, [r3, #64]	; 0x40
 800222c:	e00e      	b.n	800224c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	4b40      	ldr	r3, [pc, #256]	; (8002338 <HAL_DMA_Init+0x148>)
 8002236:	4413      	add	r3, r2
 8002238:	4a3d      	ldr	r2, [pc, #244]	; (8002330 <HAL_DMA_Init+0x140>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	091b      	lsrs	r3, r3, #4
 8002240:	009a      	lsls	r2, r3, #2
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a3c      	ldr	r2, [pc, #240]	; (800233c <HAL_DMA_Init+0x14c>)
 800224a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002266:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002270:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800227c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002288:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4313      	orrs	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f95c 	bl	800255c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022ac:	d102      	bne.n	80022b4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022c8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d010      	beq.n	80022f4 <HAL_DMA_Init+0x104>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d80c      	bhi.n	80022f4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f97c 	bl	80025d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	e008      	b.n	8002306 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40020407 	.word	0x40020407
 800232c:	bffdfff8 	.word	0xbffdfff8
 8002330:	cccccccd 	.word	0xcccccccd
 8002334:	40020000 	.word	0x40020000
 8002338:	bffdfbf8 	.word	0xbffdfbf8
 800233c:	40020400 	.word	0x40020400

08002340 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d005      	beq.n	8002364 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2204      	movs	r2, #4
 800235c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	73fb      	strb	r3, [r7, #15]
 8002362:	e047      	b.n	80023f4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 020e 	bic.w	r2, r2, #14
 8002372:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0201 	bic.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800238e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002392:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002398:	f003 021c 	and.w	r2, r3, #28
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	2101      	movs	r1, #1
 80023a2:	fa01 f202 	lsl.w	r2, r1, r2
 80023a6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023b0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00c      	beq.n	80023d4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80023d2:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4798      	blx	r3
    }
  }
  return status;
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b084      	sub	sp, #16
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f003 031c 	and.w	r3, r3, #28
 800241e:	2204      	movs	r2, #4
 8002420:	409a      	lsls	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4013      	ands	r3, r2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d026      	beq.n	8002478 <HAL_DMA_IRQHandler+0x7a>
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d021      	beq.n	8002478 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0320 	and.w	r3, r3, #32
 800243e:	2b00      	cmp	r3, #0
 8002440:	d107      	bne.n	8002452 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0204 	bic.w	r2, r2, #4
 8002450:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	f003 021c 	and.w	r2, r3, #28
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	2104      	movs	r1, #4
 8002460:	fa01 f202 	lsl.w	r2, r1, r2
 8002464:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	2b00      	cmp	r3, #0
 800246c:	d071      	beq.n	8002552 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002476:	e06c      	b.n	8002552 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247c:	f003 031c 	and.w	r3, r3, #28
 8002480:	2202      	movs	r2, #2
 8002482:	409a      	lsls	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d02e      	beq.n	80024ea <HAL_DMA_IRQHandler+0xec>
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d029      	beq.n	80024ea <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0320 	and.w	r3, r3, #32
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10b      	bne.n	80024bc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 020a 	bic.w	r2, r2, #10
 80024b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c0:	f003 021c 	and.w	r2, r3, #28
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	2102      	movs	r1, #2
 80024ca:	fa01 f202 	lsl.w	r2, r1, r2
 80024ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d038      	beq.n	8002552 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80024e8:	e033      	b.n	8002552 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	f003 031c 	and.w	r3, r3, #28
 80024f2:	2208      	movs	r2, #8
 80024f4:	409a      	lsls	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d02a      	beq.n	8002554 <HAL_DMA_IRQHandler+0x156>
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d025      	beq.n	8002554 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 020e 	bic.w	r2, r2, #14
 8002516:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251c:	f003 021c 	and.w	r2, r3, #28
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	2101      	movs	r1, #1
 8002526:	fa01 f202 	lsl.w	r2, r1, r2
 800252a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002546:	2b00      	cmp	r3, #0
 8002548:	d004      	beq.n	8002554 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002552:	bf00      	nop
 8002554:	bf00      	nop
}
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800256c:	429a      	cmp	r2, r3
 800256e:	d80a      	bhi.n	8002586 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800257c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6493      	str	r3, [r2, #72]	; 0x48
 8002584:	e007      	b.n	8002596 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	009a      	lsls	r2, r3, #2
 800258e:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002590:	4413      	add	r3, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	b2db      	uxtb	r3, r3
 800259c:	3b08      	subs	r3, #8
 800259e:	4a0c      	ldr	r2, [pc, #48]	; (80025d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80025a0:	fba2 2303 	umull	r2, r3, r2, r3
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80025ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1CU);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f003 031c 	and.w	r3, r3, #28
 80025b4:	2201      	movs	r2, #1
 80025b6:	409a      	lsls	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	651a      	str	r2, [r3, #80]	; 0x50
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	40020407 	.word	0x40020407
 80025cc:	4002081c 	.word	0x4002081c
 80025d0:	cccccccd 	.word	0xcccccccd
 80025d4:	40020880 	.word	0x40020880

080025d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	461a      	mov	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a08      	ldr	r2, [pc, #32]	; (800261c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80025fa:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3b01      	subs	r3, #1
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	2201      	movs	r2, #1
 8002606:	409a      	lsls	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	1000823f 	.word	0x1000823f
 800261c:	40020940 	.word	0x40020940

08002620 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002620:	b480      	push	{r7}
 8002622:	b087      	sub	sp, #28
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800262e:	e166      	b.n	80028fe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	2101      	movs	r1, #1
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	fa01 f303 	lsl.w	r3, r1, r3
 800263c:	4013      	ands	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 8158 	beq.w	80028f8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b02      	cmp	r3, #2
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x38>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b12      	cmp	r3, #18
 8002656:	d123      	bne.n	80026a0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	08da      	lsrs	r2, r3, #3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3208      	adds	r2, #8
 8002660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002664:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	220f      	movs	r2, #15
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	08da      	lsrs	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3208      	adds	r2, #8
 800269a:	6939      	ldr	r1, [r7, #16]
 800269c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	2203      	movs	r2, #3
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 0203 	and.w	r2, r3, #3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d00b      	beq.n	80026f4 <HAL_GPIO_Init+0xd4>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d007      	beq.n	80026f4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026e8:	2b11      	cmp	r3, #17
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b12      	cmp	r3, #18
 80026f2:	d130      	bne.n	8002756 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	2203      	movs	r2, #3
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	4013      	ands	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800272a:	2201      	movs	r2, #1
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	091b      	lsrs	r3, r3, #4
 8002740:	f003 0201 	and.w	r2, r3, #1
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	2203      	movs	r2, #3
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4013      	ands	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 80b2 	beq.w	80028f8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002794:	4b61      	ldr	r3, [pc, #388]	; (800291c <HAL_GPIO_Init+0x2fc>)
 8002796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002798:	4a60      	ldr	r2, [pc, #384]	; (800291c <HAL_GPIO_Init+0x2fc>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	6613      	str	r3, [r2, #96]	; 0x60
 80027a0:	4b5e      	ldr	r3, [pc, #376]	; (800291c <HAL_GPIO_Init+0x2fc>)
 80027a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027ac:	4a5c      	ldr	r2, [pc, #368]	; (8002920 <HAL_GPIO_Init+0x300>)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	089b      	lsrs	r3, r3, #2
 80027b2:	3302      	adds	r3, #2
 80027b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	220f      	movs	r2, #15
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027d6:	d02b      	beq.n	8002830 <HAL_GPIO_Init+0x210>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a52      	ldr	r2, [pc, #328]	; (8002924 <HAL_GPIO_Init+0x304>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d025      	beq.n	800282c <HAL_GPIO_Init+0x20c>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a51      	ldr	r2, [pc, #324]	; (8002928 <HAL_GPIO_Init+0x308>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d01f      	beq.n	8002828 <HAL_GPIO_Init+0x208>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a50      	ldr	r2, [pc, #320]	; (800292c <HAL_GPIO_Init+0x30c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d019      	beq.n	8002824 <HAL_GPIO_Init+0x204>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a4f      	ldr	r2, [pc, #316]	; (8002930 <HAL_GPIO_Init+0x310>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d013      	beq.n	8002820 <HAL_GPIO_Init+0x200>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a4e      	ldr	r2, [pc, #312]	; (8002934 <HAL_GPIO_Init+0x314>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00d      	beq.n	800281c <HAL_GPIO_Init+0x1fc>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a4d      	ldr	r2, [pc, #308]	; (8002938 <HAL_GPIO_Init+0x318>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d007      	beq.n	8002818 <HAL_GPIO_Init+0x1f8>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a4c      	ldr	r2, [pc, #304]	; (800293c <HAL_GPIO_Init+0x31c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d101      	bne.n	8002814 <HAL_GPIO_Init+0x1f4>
 8002810:	2307      	movs	r3, #7
 8002812:	e00e      	b.n	8002832 <HAL_GPIO_Init+0x212>
 8002814:	2308      	movs	r3, #8
 8002816:	e00c      	b.n	8002832 <HAL_GPIO_Init+0x212>
 8002818:	2306      	movs	r3, #6
 800281a:	e00a      	b.n	8002832 <HAL_GPIO_Init+0x212>
 800281c:	2305      	movs	r3, #5
 800281e:	e008      	b.n	8002832 <HAL_GPIO_Init+0x212>
 8002820:	2304      	movs	r3, #4
 8002822:	e006      	b.n	8002832 <HAL_GPIO_Init+0x212>
 8002824:	2303      	movs	r3, #3
 8002826:	e004      	b.n	8002832 <HAL_GPIO_Init+0x212>
 8002828:	2302      	movs	r3, #2
 800282a:	e002      	b.n	8002832 <HAL_GPIO_Init+0x212>
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <HAL_GPIO_Init+0x212>
 8002830:	2300      	movs	r3, #0
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	f002 0203 	and.w	r2, r2, #3
 8002838:	0092      	lsls	r2, r2, #2
 800283a:	4093      	lsls	r3, r2
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002842:	4937      	ldr	r1, [pc, #220]	; (8002920 <HAL_GPIO_Init+0x300>)
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	089b      	lsrs	r3, r3, #2
 8002848:	3302      	adds	r3, #2
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002850:	4b3b      	ldr	r3, [pc, #236]	; (8002940 <HAL_GPIO_Init+0x320>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	43db      	mvns	r3, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002874:	4a32      	ldr	r2, [pc, #200]	; (8002940 <HAL_GPIO_Init+0x320>)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800287a:	4b31      	ldr	r3, [pc, #196]	; (8002940 <HAL_GPIO_Init+0x320>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	43db      	mvns	r3, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800289e:	4a28      	ldr	r2, [pc, #160]	; (8002940 <HAL_GPIO_Init+0x320>)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028a4:	4b26      	ldr	r3, [pc, #152]	; (8002940 <HAL_GPIO_Init+0x320>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028c8:	4a1d      	ldr	r2, [pc, #116]	; (8002940 <HAL_GPIO_Init+0x320>)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028ce:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <HAL_GPIO_Init+0x320>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	43db      	mvns	r3, r3
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4013      	ands	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028f2:	4a13      	ldr	r2, [pc, #76]	; (8002940 <HAL_GPIO_Init+0x320>)
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	3301      	adds	r3, #1
 80028fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	f47f ae91 	bne.w	8002630 <HAL_GPIO_Init+0x10>
  }
}
 800290e:	bf00      	nop
 8002910:	371c      	adds	r7, #28
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40021000 	.word	0x40021000
 8002920:	40010000 	.word	0x40010000
 8002924:	48000400 	.word	0x48000400
 8002928:	48000800 	.word	0x48000800
 800292c:	48000c00 	.word	0x48000c00
 8002930:	48001000 	.word	0x48001000
 8002934:	48001400 	.word	0x48001400
 8002938:	48001800 	.word	0x48001800
 800293c:	48001c00 	.word	0x48001c00
 8002940:	40010400 	.word	0x40010400

08002944 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	887b      	ldrh	r3, [r7, #2]
 8002956:	4013      	ands	r3, r2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
 8002960:	e001      	b.n	8002966 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002962:	2300      	movs	r3, #0
 8002964:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002966:	7bfb      	ldrb	r3, [r7, #15]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	807b      	strh	r3, [r7, #2]
 8002980:	4613      	mov	r3, r2
 8002982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002984:	787b      	ldrb	r3, [r7, #1]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800298a:	887a      	ldrh	r2, [r7, #2]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002990:	e002      	b.n	8002998 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002992:	887a      	ldrh	r2, [r7, #2]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a04      	ldr	r2, [pc, #16]	; (80029c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b2:	6013      	str	r3, [r2, #0]
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40007000 	.word	0x40007000

080029c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029c8:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <HAL_PWREx_GetVoltageRange+0x3c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d4:	d102      	bne.n	80029dc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80029d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029da:	e00b      	b.n	80029f4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80029dc:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <HAL_PWREx_GetVoltageRange+0x3c>)
 80029de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ea:	d102      	bne.n	80029f2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80029ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029f0:	e000      	b.n	80029f4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80029f2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40007000 	.word	0x40007000

08002a04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d141      	bne.n	8002a96 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a12:	4b4b      	ldr	r3, [pc, #300]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a1e:	d131      	bne.n	8002a84 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a20:	4b47      	ldr	r3, [pc, #284]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a26:	4a46      	ldr	r2, [pc, #280]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a30:	4b43      	ldr	r3, [pc, #268]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a38:	4a41      	ldr	r2, [pc, #260]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002a40:	4b40      	ldr	r3, [pc, #256]	; (8002b44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2232      	movs	r2, #50	; 0x32
 8002a46:	fb02 f303 	mul.w	r3, r2, r3
 8002a4a:	4a3f      	ldr	r2, [pc, #252]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a50:	0c9b      	lsrs	r3, r3, #18
 8002a52:	3301      	adds	r3, #1
 8002a54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a56:	e002      	b.n	8002a5e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a5e:	4b38      	ldr	r3, [pc, #224]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6a:	d102      	bne.n	8002a72 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f2      	bne.n	8002a58 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a72:	4b33      	ldr	r3, [pc, #204]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a7e:	d158      	bne.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e057      	b.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a84:	4b2e      	ldr	r3, [pc, #184]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a8a:	4a2d      	ldr	r2, [pc, #180]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a94:	e04d      	b.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a9c:	d141      	bne.n	8002b22 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a9e:	4b28      	ldr	r3, [pc, #160]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aaa:	d131      	bne.n	8002b10 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002aac:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ab2:	4a23      	ldr	r2, [pc, #140]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002abc:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ac4:	4a1e      	ldr	r2, [pc, #120]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002acc:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2232      	movs	r2, #50	; 0x32
 8002ad2:	fb02 f303 	mul.w	r3, r2, r3
 8002ad6:	4a1c      	ldr	r2, [pc, #112]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8002adc:	0c9b      	lsrs	r3, r3, #18
 8002ade:	3301      	adds	r3, #1
 8002ae0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ae2:	e002      	b.n	8002aea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aea:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af6:	d102      	bne.n	8002afe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f2      	bne.n	8002ae4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b0a:	d112      	bne.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e011      	b.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b16:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b20:	e007      	b.n	8002b32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b22:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b2a:	4a05      	ldr	r2, [pc, #20]	; (8002b40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b30:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	40007000 	.word	0x40007000
 8002b44:	20000008 	.word	0x20000008
 8002b48:	431bde83 	.word	0x431bde83

08002b4c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b5a:	6053      	str	r3, [r2, #4]
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	40007000 	.word	0x40007000

08002b6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e3db      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b7e:	4ba4      	ldr	r3, [pc, #656]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b88:	4ba1      	ldr	r3, [pc, #644]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 80e1 	beq.w	8002d62 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d007      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x4a>
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2b0c      	cmp	r3, #12
 8002baa:	f040 8088 	bne.w	8002cbe <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	f040 8084 	bne.w	8002cbe <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bb6:	4b96      	ldr	r3, [pc, #600]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <HAL_RCC_OscConfig+0x62>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e3b3      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1a      	ldr	r2, [r3, #32]
 8002bd2:	4b8f      	ldr	r3, [pc, #572]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d004      	beq.n	8002be8 <HAL_RCC_OscConfig+0x7c>
 8002bde:	4b8c      	ldr	r3, [pc, #560]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002be6:	e005      	b.n	8002bf4 <HAL_RCC_OscConfig+0x88>
 8002be8:	4b89      	ldr	r3, [pc, #548]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bee:	091b      	lsrs	r3, r3, #4
 8002bf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d223      	bcs.n	8002c40 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 fd91 	bl	8003724 <RCC_SetFlashLatencyFromMSIRange>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e394      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c0c:	4b80      	ldr	r3, [pc, #512]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a7f      	ldr	r2, [pc, #508]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002c12:	f043 0308 	orr.w	r3, r3, #8
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	4b7d      	ldr	r3, [pc, #500]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	497a      	ldr	r1, [pc, #488]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c2a:	4b79      	ldr	r3, [pc, #484]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	021b      	lsls	r3, r3, #8
 8002c38:	4975      	ldr	r1, [pc, #468]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	604b      	str	r3, [r1, #4]
 8002c3e:	e022      	b.n	8002c86 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c40:	4b73      	ldr	r3, [pc, #460]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a72      	ldr	r2, [pc, #456]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002c46:	f043 0308 	orr.w	r3, r3, #8
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	4b70      	ldr	r3, [pc, #448]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	496d      	ldr	r1, [pc, #436]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c5e:	4b6c      	ldr	r3, [pc, #432]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	021b      	lsls	r3, r3, #8
 8002c6c:	4968      	ldr	r1, [pc, #416]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 fd54 	bl	8003724 <RCC_SetFlashLatencyFromMSIRange>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e357      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c86:	f000 fc8b 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 8002c8a:	4601      	mov	r1, r0
 8002c8c:	4b60      	ldr	r3, [pc, #384]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	4a5f      	ldr	r2, [pc, #380]	; (8002e14 <HAL_RCC_OscConfig+0x2a8>)
 8002c98:	5cd3      	ldrb	r3, [r2, r3]
 8002c9a:	f003 031f 	and.w	r3, r3, #31
 8002c9e:	fa21 f303 	lsr.w	r3, r1, r3
 8002ca2:	4a5d      	ldr	r2, [pc, #372]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ca6:	4b5d      	ldr	r3, [pc, #372]	; (8002e1c <HAL_RCC_OscConfig+0x2b0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff f914 	bl	8001ed8 <HAL_InitTick>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d052      	beq.n	8002d60 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	e33b      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d032      	beq.n	8002d2c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cc6:	4b52      	ldr	r3, [pc, #328]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a51      	ldr	r2, [pc, #324]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cd2:	f7ff f94d 	bl	8001f70 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cda:	f7ff f949 	bl	8001f70 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e324      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cec:	4b48      	ldr	r3, [pc, #288]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cf8:	4b45      	ldr	r3, [pc, #276]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a44      	ldr	r2, [pc, #272]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002cfe:	f043 0308 	orr.w	r3, r3, #8
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	4b42      	ldr	r3, [pc, #264]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	493f      	ldr	r1, [pc, #252]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d16:	4b3e      	ldr	r3, [pc, #248]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	021b      	lsls	r3, r3, #8
 8002d24:	493a      	ldr	r1, [pc, #232]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	604b      	str	r3, [r1, #4]
 8002d2a:	e01a      	b.n	8002d62 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d2c:	4b38      	ldr	r3, [pc, #224]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a37      	ldr	r2, [pc, #220]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002d32:	f023 0301 	bic.w	r3, r3, #1
 8002d36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d38:	f7ff f91a 	bl	8001f70 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d40:	f7ff f916 	bl	8001f70 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e2f1      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d52:	4b2f      	ldr	r3, [pc, #188]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x1d4>
 8002d5e:	e000      	b.n	8002d62 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d074      	beq.n	8002e58 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_OscConfig+0x214>
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	2b0c      	cmp	r3, #12
 8002d78:	d10e      	bne.n	8002d98 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d10b      	bne.n	8002d98 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d80:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d064      	beq.n	8002e56 <HAL_RCC_OscConfig+0x2ea>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d160      	bne.n	8002e56 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e2ce      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da0:	d106      	bne.n	8002db0 <HAL_RCC_OscConfig+0x244>
 8002da2:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a1a      	ldr	r2, [pc, #104]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	e01d      	b.n	8002dec <HAL_RCC_OscConfig+0x280>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002db8:	d10c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x268>
 8002dba:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a14      	ldr	r2, [pc, #80]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a11      	ldr	r2, [pc, #68]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	e00b      	b.n	8002dec <HAL_RCC_OscConfig+0x280>
 8002dd4:	4b0e      	ldr	r3, [pc, #56]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a0d      	ldr	r2, [pc, #52]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dde:	6013      	str	r3, [r2, #0]
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <HAL_RCC_OscConfig+0x2a4>)
 8002de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d01c      	beq.n	8002e2e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df4:	f7ff f8bc 	bl	8001f70 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dfa:	e011      	b.n	8002e20 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dfc:	f7ff f8b8 	bl	8001f70 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b64      	cmp	r3, #100	; 0x64
 8002e08:	d90a      	bls.n	8002e20 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e293      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
 8002e14:	08081000 	.word	0x08081000
 8002e18:	20000008 	.word	0x20000008
 8002e1c:	2000000c 	.word	0x2000000c
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e20:	4bae      	ldr	r3, [pc, #696]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0e7      	beq.n	8002dfc <HAL_RCC_OscConfig+0x290>
 8002e2c:	e014      	b.n	8002e58 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2e:	f7ff f89f 	bl	8001f70 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e36:	f7ff f89b 	bl	8001f70 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b64      	cmp	r3, #100	; 0x64
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e276      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e48:	4ba4      	ldr	r3, [pc, #656]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f0      	bne.n	8002e36 <HAL_RCC_OscConfig+0x2ca>
 8002e54:	e000      	b.n	8002e58 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e56:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d060      	beq.n	8002f26 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d005      	beq.n	8002e76 <HAL_RCC_OscConfig+0x30a>
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	2b0c      	cmp	r3, #12
 8002e6e:	d119      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d116      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e76:	4b99      	ldr	r3, [pc, #612]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d005      	beq.n	8002e8e <HAL_RCC_OscConfig+0x322>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e253      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8e:	4b93      	ldr	r3, [pc, #588]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	061b      	lsls	r3, r3, #24
 8002e9c:	498f      	ldr	r1, [pc, #572]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ea2:	e040      	b.n	8002f26 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d023      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eac:	4b8b      	ldr	r3, [pc, #556]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a8a      	ldr	r2, [pc, #552]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8002eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7ff f85a 	bl	8001f70 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec0:	f7ff f856 	bl	8001f70 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e231      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ed2:	4b82      	ldr	r3, [pc, #520]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ede:	4b7f      	ldr	r3, [pc, #508]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	061b      	lsls	r3, r3, #24
 8002eec:	497b      	ldr	r1, [pc, #492]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	604b      	str	r3, [r1, #4]
 8002ef2:	e018      	b.n	8002f26 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef4:	4b79      	ldr	r3, [pc, #484]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a78      	ldr	r2, [pc, #480]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8002efa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7ff f836 	bl	8001f70 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f08:	f7ff f832 	bl	8001f70 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e20d      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f1a:	4b70      	ldr	r3, [pc, #448]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d03c      	beq.n	8002fac <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d01c      	beq.n	8002f74 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f3a:	4b68      	ldr	r3, [pc, #416]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8002f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f40:	4a66      	ldr	r2, [pc, #408]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4a:	f7ff f811 	bl	8001f70 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f52:	f7ff f80d 	bl	8001f70 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e1e8      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f64:	4b5d      	ldr	r3, [pc, #372]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8002f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0ef      	beq.n	8002f52 <HAL_RCC_OscConfig+0x3e6>
 8002f72:	e01b      	b.n	8002fac <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f74:	4b59      	ldr	r3, [pc, #356]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8002f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f7a:	4a58      	ldr	r2, [pc, #352]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8002f7c:	f023 0301 	bic.w	r3, r3, #1
 8002f80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f84:	f7fe fff4 	bl	8001f70 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f8c:	f7fe fff0 	bl	8001f70 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e1cb      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f9e:	4b4f      	ldr	r3, [pc, #316]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8002fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1ef      	bne.n	8002f8c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 80a5 	beq.w	8003104 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fbe:	4b47      	ldr	r3, [pc, #284]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8002fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10d      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fca:	4b44      	ldr	r3, [pc, #272]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8002fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fce:	4a43      	ldr	r2, [pc, #268]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8002fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8002fd6:	4b41      	ldr	r3, [pc, #260]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fe6:	4b3e      	ldr	r3, [pc, #248]	; (80030e0 <HAL_RCC_OscConfig+0x574>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d118      	bne.n	8003024 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ff2:	4b3b      	ldr	r3, [pc, #236]	; (80030e0 <HAL_RCC_OscConfig+0x574>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a3a      	ldr	r2, [pc, #232]	; (80030e0 <HAL_RCC_OscConfig+0x574>)
 8002ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ffe:	f7fe ffb7 	bl	8001f70 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003006:	f7fe ffb3 	bl	8001f70 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e18e      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003018:	4b31      	ldr	r3, [pc, #196]	; (80030e0 <HAL_RCC_OscConfig+0x574>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d108      	bne.n	800303e <HAL_RCC_OscConfig+0x4d2>
 800302c:	4b2b      	ldr	r3, [pc, #172]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003032:	4a2a      	ldr	r2, [pc, #168]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800303c:	e024      	b.n	8003088 <HAL_RCC_OscConfig+0x51c>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b05      	cmp	r3, #5
 8003044:	d110      	bne.n	8003068 <HAL_RCC_OscConfig+0x4fc>
 8003046:	4b25      	ldr	r3, [pc, #148]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8003048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304c:	4a23      	ldr	r2, [pc, #140]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 800304e:	f043 0304 	orr.w	r3, r3, #4
 8003052:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003056:	4b21      	ldr	r3, [pc, #132]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	4a1f      	ldr	r2, [pc, #124]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003066:	e00f      	b.n	8003088 <HAL_RCC_OscConfig+0x51c>
 8003068:	4b1c      	ldr	r3, [pc, #112]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306e:	4a1b      	ldr	r2, [pc, #108]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8003070:	f023 0301 	bic.w	r3, r3, #1
 8003074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003078:	4b18      	ldr	r3, [pc, #96]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307e:	4a17      	ldr	r2, [pc, #92]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 8003080:	f023 0304 	bic.w	r3, r3, #4
 8003084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d016      	beq.n	80030be <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003090:	f7fe ff6e 	bl	8001f70 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003096:	e00a      	b.n	80030ae <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003098:	f7fe ff6a 	bl	8001f70 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e143      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ae:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <HAL_RCC_OscConfig+0x570>)
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0ed      	beq.n	8003098 <HAL_RCC_OscConfig+0x52c>
 80030bc:	e019      	b.n	80030f2 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030be:	f7fe ff57 	bl	8001f70 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030c4:	e00e      	b.n	80030e4 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c6:	f7fe ff53 	bl	8001f70 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d905      	bls.n	80030e4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e12c      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030e4:	4b96      	ldr	r3, [pc, #600]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1e9      	bne.n	80030c6 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030f2:	7ffb      	ldrb	r3, [r7, #31]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d105      	bne.n	8003104 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f8:	4b91      	ldr	r3, [pc, #580]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 80030fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fc:	4a90      	ldr	r2, [pc, #576]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 80030fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003102:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b00      	cmp	r3, #0
 800310e:	d03c      	beq.n	800318a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01c      	beq.n	8003152 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003118:	4b89      	ldr	r3, [pc, #548]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 800311a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800311e:	4a88      	ldr	r2, [pc, #544]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003128:	f7fe ff22 	bl	8001f70 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003130:	f7fe ff1e 	bl	8001f70 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e0f9      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003142:	4b7f      	ldr	r3, [pc, #508]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 8003144:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0ef      	beq.n	8003130 <HAL_RCC_OscConfig+0x5c4>
 8003150:	e01b      	b.n	800318a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003152:	4b7b      	ldr	r3, [pc, #492]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 8003154:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003158:	4a79      	ldr	r2, [pc, #484]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 800315a:	f023 0301 	bic.w	r3, r3, #1
 800315e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003162:	f7fe ff05 	bl	8001f70 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800316a:	f7fe ff01 	bl	8001f70 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e0dc      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800317c:	4b70      	ldr	r3, [pc, #448]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 800317e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1ef      	bne.n	800316a <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 80d0 	beq.w	8003334 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2b0c      	cmp	r3, #12
 8003198:	f000 808d 	beq.w	80032b6 <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d15a      	bne.n	800325a <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a4:	4b66      	ldr	r3, [pc, #408]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a65      	ldr	r2, [pc, #404]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 80031aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7fe fede 	bl	8001f70 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b8:	f7fe feda 	bl	8001f70 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e0b5      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ca:	4b5d      	ldr	r3, [pc, #372]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031d6:	4b5a      	ldr	r3, [pc, #360]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	4b5a      	ldr	r3, [pc, #360]	; (8003344 <HAL_RCC_OscConfig+0x7d8>)
 80031dc:	4013      	ands	r3, r2
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031e6:	3a01      	subs	r2, #1
 80031e8:	0112      	lsls	r2, r2, #4
 80031ea:	4311      	orrs	r1, r2
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031f0:	0212      	lsls	r2, r2, #8
 80031f2:	4311      	orrs	r1, r2
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031f8:	0852      	lsrs	r2, r2, #1
 80031fa:	3a01      	subs	r2, #1
 80031fc:	0552      	lsls	r2, r2, #21
 80031fe:	4311      	orrs	r1, r2
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003204:	0852      	lsrs	r2, r2, #1
 8003206:	3a01      	subs	r2, #1
 8003208:	0652      	lsls	r2, r2, #25
 800320a:	4311      	orrs	r1, r2
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003210:	06d2      	lsls	r2, r2, #27
 8003212:	430a      	orrs	r2, r1
 8003214:	494a      	ldr	r1, [pc, #296]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 8003216:	4313      	orrs	r3, r2
 8003218:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800321a:	4b49      	ldr	r3, [pc, #292]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a48      	ldr	r2, [pc, #288]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 8003220:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003224:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003226:	4b46      	ldr	r3, [pc, #280]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	4a45      	ldr	r2, [pc, #276]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 800322c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003230:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003232:	f7fe fe9d 	bl	8001f70 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323a:	f7fe fe99 	bl	8001f70 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e074      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800324c:	4b3c      	ldr	r3, [pc, #240]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x6ce>
 8003258:	e06c      	b.n	8003334 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325a:	4b39      	ldr	r3, [pc, #228]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a38      	ldr	r2, [pc, #224]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 8003260:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003264:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003266:	4b36      	ldr	r3, [pc, #216]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d105      	bne.n	800327e <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003272:	4b33      	ldr	r3, [pc, #204]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	4a32      	ldr	r2, [pc, #200]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 8003278:	f023 0303 	bic.w	r3, r3, #3
 800327c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800327e:	4b30      	ldr	r3, [pc, #192]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	4a2f      	ldr	r2, [pc, #188]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 8003284:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800328c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328e:	f7fe fe6f 	bl	8001f70 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003296:	f7fe fe6b 	bl	8001f70 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e046      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032a8:	4b25      	ldr	r3, [pc, #148]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1f0      	bne.n	8003296 <HAL_RCC_OscConfig+0x72a>
 80032b4:	e03e      	b.n	8003334 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e039      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80032c2:	4b1f      	ldr	r3, [pc, #124]	; (8003340 <HAL_RCC_OscConfig+0x7d4>)
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f003 0203 	and.w	r2, r3, #3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d12c      	bne.n	8003330 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	3b01      	subs	r3, #1
 80032e2:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d123      	bne.n	8003330 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f2:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d11b      	bne.n	8003330 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003302:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003304:	429a      	cmp	r2, r3
 8003306:	d113      	bne.n	8003330 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003312:	085b      	lsrs	r3, r3, #1
 8003314:	3b01      	subs	r3, #1
 8003316:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003318:	429a      	cmp	r2, r3
 800331a:	d109      	bne.n	8003330 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	085b      	lsrs	r3, r3, #1
 8003328:	3b01      	subs	r3, #1
 800332a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3720      	adds	r7, #32
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40021000 	.word	0x40021000
 8003344:	019d800c 	.word	0x019d800c

08003348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e10f      	b.n	8003580 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003360:	4b89      	ldr	r3, [pc, #548]	; (8003588 <HAL_RCC_ClockConfig+0x240>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d910      	bls.n	8003390 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336e:	4b86      	ldr	r3, [pc, #536]	; (8003588 <HAL_RCC_ClockConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f023 020f 	bic.w	r2, r3, #15
 8003376:	4984      	ldr	r1, [pc, #528]	; (8003588 <HAL_RCC_ClockConfig+0x240>)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	4313      	orrs	r3, r2
 800337c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800337e:	4b82      	ldr	r3, [pc, #520]	; (8003588 <HAL_RCC_ClockConfig+0x240>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d001      	beq.n	8003390 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0f7      	b.n	8003580 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 8089 	beq.w	80034b0 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d133      	bne.n	800340e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a6:	4b79      	ldr	r3, [pc, #484]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e0e4      	b.n	8003580 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80033b6:	f000 fa0f 	bl	80037d8 <RCC_GetSysClockFreqFromPLLSource>
 80033ba:	4602      	mov	r2, r0
 80033bc:	4b74      	ldr	r3, [pc, #464]	; (8003590 <HAL_RCC_ClockConfig+0x248>)
 80033be:	429a      	cmp	r2, r3
 80033c0:	d955      	bls.n	800346e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80033c2:	4b72      	ldr	r3, [pc, #456]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10a      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033ce:	4b6f      	ldr	r3, [pc, #444]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033d6:	4a6d      	ldr	r2, [pc, #436]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 80033d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	e044      	b.n	800346e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d03e      	beq.n	800346e <HAL_RCC_ClockConfig+0x126>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d13a      	bne.n	800346e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033f8:	4b64      	ldr	r3, [pc, #400]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003400:	4a62      	ldr	r2, [pc, #392]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 8003402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003406:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003408:	2380      	movs	r3, #128	; 0x80
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	e02f      	b.n	800346e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d107      	bne.n	8003426 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003416:	4b5d      	ldr	r3, [pc, #372]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d115      	bne.n	800344e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e0ac      	b.n	8003580 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d107      	bne.n	800343e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800342e:	4b57      	ldr	r3, [pc, #348]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e0a0      	b.n	8003580 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800343e:	4b53      	ldr	r3, [pc, #332]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e098      	b.n	8003580 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800344e:	f000 f8a7 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 8003452:	4602      	mov	r2, r0
 8003454:	4b4e      	ldr	r3, [pc, #312]	; (8003590 <HAL_RCC_ClockConfig+0x248>)
 8003456:	429a      	cmp	r2, r3
 8003458:	d909      	bls.n	800346e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800345a:	4b4c      	ldr	r3, [pc, #304]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003462:	4a4a      	ldr	r2, [pc, #296]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 8003464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003468:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800346a:	2380      	movs	r3, #128	; 0x80
 800346c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800346e:	4b47      	ldr	r3, [pc, #284]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f023 0203 	bic.w	r2, r3, #3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4944      	ldr	r1, [pc, #272]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 800347c:	4313      	orrs	r3, r2
 800347e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003480:	f7fe fd76 	bl	8001f70 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003486:	e00a      	b.n	800349e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003488:	f7fe fd72 	bl	8001f70 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	f241 3288 	movw	r2, #5000	; 0x1388
 8003496:	4293      	cmp	r3, r2
 8003498:	d901      	bls.n	800349e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e070      	b.n	8003580 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349e:	4b3b      	ldr	r3, [pc, #236]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 020c 	and.w	r2, r3, #12
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d1eb      	bne.n	8003488 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d009      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034bc:	4b33      	ldr	r3, [pc, #204]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	4930      	ldr	r1, [pc, #192]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	608b      	str	r3, [r1, #8]
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_ClockConfig+0x19a>
  }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2b80      	cmp	r3, #128	; 0x80
 80034d4:	d105      	bne.n	80034e2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80034d6:	4b2d      	ldr	r3, [pc, #180]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	4a2c      	ldr	r2, [pc, #176]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 80034dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034e0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034e2:	4b29      	ldr	r3, [pc, #164]	; (8003588 <HAL_RCC_ClockConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d210      	bcs.n	8003512 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f0:	4b25      	ldr	r3, [pc, #148]	; (8003588 <HAL_RCC_ClockConfig+0x240>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f023 020f 	bic.w	r2, r3, #15
 80034f8:	4923      	ldr	r1, [pc, #140]	; (8003588 <HAL_RCC_ClockConfig+0x240>)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003500:	4b21      	ldr	r3, [pc, #132]	; (8003588 <HAL_RCC_ClockConfig+0x240>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d001      	beq.n	8003512 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e036      	b.n	8003580 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b00      	cmp	r3, #0
 800351c:	d008      	beq.n	8003530 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800351e:	4b1b      	ldr	r3, [pc, #108]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	4918      	ldr	r1, [pc, #96]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 800352c:	4313      	orrs	r3, r2
 800352e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d009      	beq.n	8003550 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800353c:	4b13      	ldr	r3, [pc, #76]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	4910      	ldr	r1, [pc, #64]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 800354c:	4313      	orrs	r3, r2
 800354e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003550:	f000 f826 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 8003554:	4601      	mov	r1, r0
 8003556:	4b0d      	ldr	r3, [pc, #52]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	091b      	lsrs	r3, r3, #4
 800355c:	f003 030f 	and.w	r3, r3, #15
 8003560:	4a0c      	ldr	r2, [pc, #48]	; (8003594 <HAL_RCC_ClockConfig+0x24c>)
 8003562:	5cd3      	ldrb	r3, [r2, r3]
 8003564:	f003 031f 	and.w	r3, r3, #31
 8003568:	fa21 f303 	lsr.w	r3, r1, r3
 800356c:	4a0a      	ldr	r2, [pc, #40]	; (8003598 <HAL_RCC_ClockConfig+0x250>)
 800356e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003570:	4b0a      	ldr	r3, [pc, #40]	; (800359c <HAL_RCC_ClockConfig+0x254>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f7fe fcaf 	bl	8001ed8 <HAL_InitTick>
 800357a:	4603      	mov	r3, r0
 800357c:	73fb      	strb	r3, [r7, #15]

  return status;
 800357e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40022000 	.word	0x40022000
 800358c:	40021000 	.word	0x40021000
 8003590:	04c4b400 	.word	0x04c4b400
 8003594:	08081000 	.word	0x08081000
 8003598:	20000008 	.word	0x20000008
 800359c:	2000000c 	.word	0x2000000c

080035a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b089      	sub	sp, #36	; 0x24
 80035a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
 80035aa:	2300      	movs	r3, #0
 80035ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ae:	4b3d      	ldr	r3, [pc, #244]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035b8:	4b3a      	ldr	r3, [pc, #232]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f003 0303 	and.w	r3, r3, #3
 80035c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d005      	beq.n	80035d4 <HAL_RCC_GetSysClockFreq+0x34>
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	2b0c      	cmp	r3, #12
 80035cc:	d121      	bne.n	8003612 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d11e      	bne.n	8003612 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035d4:	4b33      	ldr	r3, [pc, #204]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d107      	bne.n	80035f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035e0:	4b30      	ldr	r3, [pc, #192]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80035e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035e6:	0a1b      	lsrs	r3, r3, #8
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	e005      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035f0:	4b2c      	ldr	r3, [pc, #176]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	091b      	lsrs	r3, r3, #4
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035fc:	4a2a      	ldr	r2, [pc, #168]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003604:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10d      	bne.n	8003628 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003610:	e00a      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	2b04      	cmp	r3, #4
 8003616:	d102      	bne.n	800361e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003618:	4b24      	ldr	r3, [pc, #144]	; (80036ac <HAL_RCC_GetSysClockFreq+0x10c>)
 800361a:	61bb      	str	r3, [r7, #24]
 800361c:	e004      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	2b08      	cmp	r3, #8
 8003622:	d101      	bne.n	8003628 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003624:	4b22      	ldr	r3, [pc, #136]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003626:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	2b0c      	cmp	r3, #12
 800362c:	d133      	bne.n	8003696 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800362e:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d002      	beq.n	8003644 <HAL_RCC_GetSysClockFreq+0xa4>
 800363e:	2b03      	cmp	r3, #3
 8003640:	d003      	beq.n	800364a <HAL_RCC_GetSysClockFreq+0xaa>
 8003642:	e005      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003644:	4b19      	ldr	r3, [pc, #100]	; (80036ac <HAL_RCC_GetSysClockFreq+0x10c>)
 8003646:	617b      	str	r3, [r7, #20]
      break;
 8003648:	e005      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800364a:	4b19      	ldr	r3, [pc, #100]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800364c:	617b      	str	r3, [r7, #20]
      break;
 800364e:	e002      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	617b      	str	r3, [r7, #20]
      break;
 8003654:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003656:	4b13      	ldr	r3, [pc, #76]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	091b      	lsrs	r3, r3, #4
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	3301      	adds	r3, #1
 8003662:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003664:	4b0f      	ldr	r3, [pc, #60]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	0a1b      	lsrs	r3, r3, #8
 800366a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	fb02 f203 	mul.w	r2, r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	fbb2 f3f3 	udiv	r3, r2, r3
 800367a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800367c:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x104>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	0e5b      	lsrs	r3, r3, #25
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	3301      	adds	r3, #1
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	fbb2 f3f3 	udiv	r3, r2, r3
 8003694:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003696:	69bb      	ldr	r3, [r7, #24]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3724      	adds	r7, #36	; 0x24
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	40021000 	.word	0x40021000
 80036a8:	08081018 	.word	0x08081018
 80036ac:	00f42400 	.word	0x00f42400
 80036b0:	007a1200 	.word	0x007a1200

080036b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036b8:	4b03      	ldr	r3, [pc, #12]	; (80036c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036ba:	681b      	ldr	r3, [r3, #0]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	20000008 	.word	0x20000008

080036cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036d0:	f7ff fff0 	bl	80036b4 <HAL_RCC_GetHCLKFreq>
 80036d4:	4601      	mov	r1, r0
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	0a1b      	lsrs	r3, r3, #8
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	4a04      	ldr	r2, [pc, #16]	; (80036f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036e2:	5cd3      	ldrb	r3, [r2, r3]
 80036e4:	f003 031f 	and.w	r3, r3, #31
 80036e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40021000 	.word	0x40021000
 80036f4:	08081010 	.word	0x08081010

080036f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036fc:	f7ff ffda 	bl	80036b4 <HAL_RCC_GetHCLKFreq>
 8003700:	4601      	mov	r1, r0
 8003702:	4b06      	ldr	r3, [pc, #24]	; (800371c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	0adb      	lsrs	r3, r3, #11
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	4a04      	ldr	r2, [pc, #16]	; (8003720 <HAL_RCC_GetPCLK2Freq+0x28>)
 800370e:	5cd3      	ldrb	r3, [r2, r3]
 8003710:	f003 031f 	and.w	r3, r3, #31
 8003714:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003718:	4618      	mov	r0, r3
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40021000 	.word	0x40021000
 8003720:	08081010 	.word	0x08081010

08003724 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800372c:	2300      	movs	r3, #0
 800372e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003730:	4b27      	ldr	r3, [pc, #156]	; (80037d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800373c:	f7ff f942 	bl	80029c4 <HAL_PWREx_GetVoltageRange>
 8003740:	6178      	str	r0, [r7, #20]
 8003742:	e014      	b.n	800376e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003744:	4b22      	ldr	r3, [pc, #136]	; (80037d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003748:	4a21      	ldr	r2, [pc, #132]	; (80037d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800374a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374e:	6593      	str	r3, [r2, #88]	; 0x58
 8003750:	4b1f      	ldr	r3, [pc, #124]	; (80037d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800375c:	f7ff f932 	bl	80029c4 <HAL_PWREx_GetVoltageRange>
 8003760:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003762:	4b1b      	ldr	r3, [pc, #108]	; (80037d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003766:	4a1a      	ldr	r2, [pc, #104]	; (80037d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800376c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003774:	d10b      	bne.n	800378e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b80      	cmp	r3, #128	; 0x80
 800377a:	d913      	bls.n	80037a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2ba0      	cmp	r3, #160	; 0xa0
 8003780:	d902      	bls.n	8003788 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003782:	2302      	movs	r3, #2
 8003784:	613b      	str	r3, [r7, #16]
 8003786:	e00d      	b.n	80037a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003788:	2301      	movs	r3, #1
 800378a:	613b      	str	r3, [r7, #16]
 800378c:	e00a      	b.n	80037a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b7f      	cmp	r3, #127	; 0x7f
 8003792:	d902      	bls.n	800379a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003794:	2302      	movs	r3, #2
 8003796:	613b      	str	r3, [r7, #16]
 8003798:	e004      	b.n	80037a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b70      	cmp	r3, #112	; 0x70
 800379e:	d101      	bne.n	80037a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037a0:	2301      	movs	r3, #1
 80037a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f023 020f 	bic.w	r2, r3, #15
 80037ac:	4909      	ldr	r1, [pc, #36]	; (80037d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037b4:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 030f 	and.w	r3, r3, #15
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d001      	beq.n	80037c6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40022000 	.word	0x40022000

080037d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80037e2:	4b2d      	ldr	r3, [pc, #180]	; (8003898 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d118      	bne.n	8003820 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037ee:	4b2a      	ldr	r3, [pc, #168]	; (8003898 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d107      	bne.n	800380a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037fa:	4b27      	ldr	r3, [pc, #156]	; (8003898 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80037fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003800:	0a1b      	lsrs	r3, r3, #8
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	e005      	b.n	8003816 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800380a:	4b23      	ldr	r3, [pc, #140]	; (8003898 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	091b      	lsrs	r3, r3, #4
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003816:	4a21      	ldr	r2, [pc, #132]	; (800389c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003820:	4b1d      	ldr	r3, [pc, #116]	; (8003898 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f003 0303 	and.w	r3, r3, #3
 8003828:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b02      	cmp	r3, #2
 800382e:	d002      	beq.n	8003836 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003830:	2b03      	cmp	r3, #3
 8003832:	d003      	beq.n	800383c <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003834:	e005      	b.n	8003842 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003836:	4b1a      	ldr	r3, [pc, #104]	; (80038a0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003838:	613b      	str	r3, [r7, #16]
    break;
 800383a:	e005      	b.n	8003848 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800383c:	4b19      	ldr	r3, [pc, #100]	; (80038a4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800383e:	613b      	str	r3, [r7, #16]
    break;
 8003840:	e002      	b.n	8003848 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	613b      	str	r3, [r7, #16]
    break;
 8003846:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003848:	4b13      	ldr	r3, [pc, #76]	; (8003898 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	091b      	lsrs	r3, r3, #4
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	3301      	adds	r3, #1
 8003854:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003856:	4b10      	ldr	r3, [pc, #64]	; (8003898 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	0a1b      	lsrs	r3, r3, #8
 800385c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	fb02 f203 	mul.w	r2, r2, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	fbb2 f3f3 	udiv	r3, r2, r3
 800386c:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	0e5b      	lsrs	r3, r3, #25
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	3301      	adds	r3, #1
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	fbb2 f3f3 	udiv	r3, r2, r3
 8003886:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003888:	683b      	ldr	r3, [r7, #0]
}
 800388a:	4618      	mov	r0, r3
 800388c:	371c      	adds	r7, #28
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40021000 	.word	0x40021000
 800389c:	08081018 	.word	0x08081018
 80038a0:	00f42400 	.word	0x00f42400
 80038a4:	007a1200 	.word	0x007a1200

080038a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038b0:	2300      	movs	r3, #0
 80038b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038b4:	2300      	movs	r3, #0
 80038b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d03d      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c8:	2b40      	cmp	r3, #64	; 0x40
 80038ca:	d00b      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80038cc:	2b40      	cmp	r3, #64	; 0x40
 80038ce:	d804      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x32>
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00e      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d015      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80038d8:	e01d      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80038da:	2b60      	cmp	r3, #96	; 0x60
 80038dc:	d01e      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80038de:	2b80      	cmp	r3, #128	; 0x80
 80038e0:	d01c      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80038e2:	e018      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038e4:	4b86      	ldr	r3, [pc, #536]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	4a85      	ldr	r2, [pc, #532]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038f0:	e015      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3304      	adds	r3, #4
 80038f6:	2100      	movs	r1, #0
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fb0d 	bl	8003f18 <RCCEx_PLLSAI1_Config>
 80038fe:	4603      	mov	r3, r0
 8003900:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003902:	e00c      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3320      	adds	r3, #32
 8003908:	2100      	movs	r1, #0
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fbf4 	bl	80040f8 <RCCEx_PLLSAI2_Config>
 8003910:	4603      	mov	r3, r0
 8003912:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003914:	e003      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	74fb      	strb	r3, [r7, #19]
      break;
 800391a:	e000      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 800391c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800391e:	7cfb      	ldrb	r3, [r7, #19]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10b      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003924:	4b76      	ldr	r3, [pc, #472]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003926:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800392a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003932:	4973      	ldr	r1, [pc, #460]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800393a:	e001      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393c:	7cfb      	ldrb	r3, [r7, #19]
 800393e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d042      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003954:	d00f      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800395a:	d805      	bhi.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800395c:	2b00      	cmp	r3, #0
 800395e:	d011      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003964:	d017      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003966:	e01f      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003968:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800396c:	d01f      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 800396e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003972:	d01c      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003974:	e018      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003976:	4b62      	ldr	r3, [pc, #392]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	4a61      	ldr	r2, [pc, #388]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800397c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003980:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003982:	e015      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3304      	adds	r3, #4
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fac4 	bl	8003f18 <RCCEx_PLLSAI1_Config>
 8003990:	4603      	mov	r3, r0
 8003992:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003994:	e00c      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	3320      	adds	r3, #32
 800399a:	2100      	movs	r1, #0
 800399c:	4618      	mov	r0, r3
 800399e:	f000 fbab 	bl	80040f8 <RCCEx_PLLSAI2_Config>
 80039a2:	4603      	mov	r3, r0
 80039a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039a6:	e003      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	74fb      	strb	r3, [r7, #19]
      break;
 80039ac:	e000      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80039ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039b0:	7cfb      	ldrb	r3, [r7, #19]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10b      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039b6:	4b52      	ldr	r3, [pc, #328]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	494e      	ldr	r1, [pc, #312]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80039cc:	e001      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ce:	7cfb      	ldrb	r3, [r7, #19]
 80039d0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 809f 	beq.w	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e0:	2300      	movs	r3, #0
 80039e2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039e4:	4b46      	ldr	r3, [pc, #280]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80039f0:	2301      	movs	r3, #1
 80039f2:	e000      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80039f4:	2300      	movs	r3, #0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00d      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fa:	4b41      	ldr	r3, [pc, #260]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fe:	4a40      	ldr	r2, [pc, #256]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a04:	6593      	str	r3, [r2, #88]	; 0x58
 8003a06:	4b3e      	ldr	r3, [pc, #248]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0e:	60bb      	str	r3, [r7, #8]
 8003a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a12:	2301      	movs	r3, #1
 8003a14:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a16:	4b3b      	ldr	r3, [pc, #236]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a3a      	ldr	r2, [pc, #232]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a22:	f7fe faa5 	bl	8001f70 <HAL_GetTick>
 8003a26:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a28:	e009      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a2a:	f7fe faa1 	bl	8001f70 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d902      	bls.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	74fb      	strb	r3, [r7, #19]
        break;
 8003a3c:	e005      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a3e:	4b31      	ldr	r3, [pc, #196]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0ef      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003a4a:	7cfb      	ldrb	r3, [r7, #19]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d15b      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a50:	4b2b      	ldr	r3, [pc, #172]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d01f      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d019      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a6e:	4b24      	ldr	r3, [pc, #144]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a78:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a7a:	4b21      	ldr	r3, [pc, #132]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a80:	4a1f      	ldr	r2, [pc, #124]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a8a:	4b1d      	ldr	r3, [pc, #116]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a90:	4a1b      	ldr	r2, [pc, #108]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a9a:	4a19      	ldr	r2, [pc, #100]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d016      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aac:	f7fe fa60 	bl	8001f70 <HAL_GetTick>
 8003ab0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab2:	e00b      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab4:	f7fe fa5c 	bl	8001f70 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d902      	bls.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	74fb      	strb	r3, [r7, #19]
            break;
 8003aca:	e006      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003acc:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0ec      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8003ada:	7cfb      	ldrb	r3, [r7, #19]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10c      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ae0:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af0:	4903      	ldr	r1, [pc, #12]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003af8:	e008      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003afa:	7cfb      	ldrb	r3, [r7, #19]
 8003afc:	74bb      	strb	r3, [r7, #18]
 8003afe:	e005      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003b00:	40021000 	.word	0x40021000
 8003b04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b08:	7cfb      	ldrb	r3, [r7, #19]
 8003b0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b0c:	7c7b      	ldrb	r3, [r7, #17]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d105      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b12:	4ba0      	ldr	r3, [pc, #640]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b16:	4a9f      	ldr	r2, [pc, #636]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b2a:	4b9a      	ldr	r3, [pc, #616]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b30:	f023 0203 	bic.w	r2, r3, #3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b38:	4996      	ldr	r1, [pc, #600]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b4c:	4b91      	ldr	r3, [pc, #580]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b52:	f023 020c 	bic.w	r2, r3, #12
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	498e      	ldr	r1, [pc, #568]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b6e:	4b89      	ldr	r3, [pc, #548]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7c:	4985      	ldr	r1, [pc, #532]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b90:	4b80      	ldr	r3, [pc, #512]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b9e:	497d      	ldr	r1, [pc, #500]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0310 	and.w	r3, r3, #16
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bb2:	4b78      	ldr	r3, [pc, #480]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc0:	4974      	ldr	r1, [pc, #464]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0320 	and.w	r3, r3, #32
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bd4:	4b6f      	ldr	r3, [pc, #444]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be2:	496c      	ldr	r1, [pc, #432]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bf6:	4b67      	ldr	r3, [pc, #412]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c04:	4963      	ldr	r1, [pc, #396]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c18:	4b5e      	ldr	r3, [pc, #376]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c26:	495b      	ldr	r1, [pc, #364]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c3a:	4b56      	ldr	r3, [pc, #344]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c48:	4952      	ldr	r1, [pc, #328]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c5c:	4b4d      	ldr	r3, [pc, #308]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6a:	494a      	ldr	r1, [pc, #296]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c7e:	4b45      	ldr	r3, [pc, #276]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8c:	4941      	ldr	r1, [pc, #260]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ca0:	4b3c      	ldr	r3, [pc, #240]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ca6:	f023 0203 	bic.w	r2, r3, #3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cae:	4939      	ldr	r1, [pc, #228]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d028      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cc2:	4b34      	ldr	r3, [pc, #208]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd0:	4930      	ldr	r1, [pc, #192]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ce0:	d106      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ce2:	4b2c      	ldr	r3, [pc, #176]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	4a2b      	ldr	r2, [pc, #172]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cec:	60d3      	str	r3, [r2, #12]
 8003cee:	e011      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cf8:	d10c      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	2101      	movs	r1, #1
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 f909 	bl	8003f18 <RCCEx_PLLSAI1_Config>
 8003d06:	4603      	mov	r3, r0
 8003d08:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d0a:	7cfb      	ldrb	r3, [r7, #19]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003d10:	7cfb      	ldrb	r3, [r7, #19]
 8003d12:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d04d      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d28:	d108      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003d2a:	4b1a      	ldr	r3, [pc, #104]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d30:	4a18      	ldr	r2, [pc, #96]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d36:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003d3a:	e012      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003d3c:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d42:	4a14      	ldr	r2, [pc, #80]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d48:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003d4c:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d5a:	490e      	ldr	r1, [pc, #56]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d6a:	d106      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d6c:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4a08      	ldr	r2, [pc, #32]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d76:	60d3      	str	r3, [r2, #12]
 8003d78:	e020      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d82:	d109      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d84:	4b03      	ldr	r3, [pc, #12]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	4a02      	ldr	r2, [pc, #8]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8e:	60d3      	str	r3, [r2, #12]
 8003d90:	e014      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003d92:	bf00      	nop
 8003d94:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3304      	adds	r3, #4
 8003da6:	2101      	movs	r1, #1
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 f8b5 	bl	8003f18 <RCCEx_PLLSAI1_Config>
 8003dae:	4603      	mov	r3, r0
 8003db0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003db2:	7cfb      	ldrb	r3, [r7, #19]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d028      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dc8:	4b4a      	ldr	r3, [pc, #296]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dd6:	4947      	ldr	r1, [pc, #284]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003de2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003de6:	d106      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003de8:	4b42      	ldr	r3, [pc, #264]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	4a41      	ldr	r2, [pc, #260]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003dee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003df2:	60d3      	str	r3, [r2, #12]
 8003df4:	e011      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dfe:	d10c      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3304      	adds	r3, #4
 8003e04:	2101      	movs	r1, #1
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 f886 	bl	8003f18 <RCCEx_PLLSAI1_Config>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e10:	7cfb      	ldrb	r3, [r7, #19]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003e16:	7cfb      	ldrb	r3, [r7, #19]
 8003e18:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d01e      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e26:	4b33      	ldr	r3, [pc, #204]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e36:	492f      	ldr	r1, [pc, #188]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e48:	d10c      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	2102      	movs	r1, #2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 f861 	bl	8003f18 <RCCEx_PLLSAI1_Config>
 8003e56:	4603      	mov	r3, r0
 8003e58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e5a:	7cfb      	ldrb	r3, [r7, #19]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003e60:	7cfb      	ldrb	r3, [r7, #19]
 8003e62:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00b      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e70:	4b20      	ldr	r3, [pc, #128]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e76:	f023 0204 	bic.w	r2, r3, #4
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e80:	491c      	ldr	r1, [pc, #112]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00b      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003e94:	4b17      	ldr	r3, [pc, #92]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e9a:	f023 0218 	bic.w	r2, r3, #24
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea4:	4913      	ldr	r1, [pc, #76]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d017      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003eb8:	4b0e      	ldr	r3, [pc, #56]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003eba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ebe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ec8:	490a      	ldr	r1, [pc, #40]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ed6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003eda:	d105      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003edc:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	4a04      	ldr	r2, [pc, #16]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ee2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ee6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ee8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40021000 	.word	0x40021000

08003ef8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a04      	ldr	r2, [pc, #16]	; (8003f14 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f02:	f043 0304 	orr.w	r3, r3, #4
 8003f06:	6013      	str	r3, [r2, #0]
}
 8003f08:	bf00      	nop
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	40021000 	.word	0x40021000

08003f18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f26:	4b70      	ldr	r3, [pc, #448]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00e      	beq.n	8003f50 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f32:	4b6d      	ldr	r3, [pc, #436]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f003 0203 	and.w	r2, r3, #3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d103      	bne.n	8003f4a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
       ||
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d13f      	bne.n	8003fca <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	73fb      	strb	r3, [r7, #15]
 8003f4e:	e03c      	b.n	8003fca <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d00c      	beq.n	8003f72 <RCCEx_PLLSAI1_Config+0x5a>
 8003f58:	2b03      	cmp	r3, #3
 8003f5a:	d013      	beq.n	8003f84 <RCCEx_PLLSAI1_Config+0x6c>
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d120      	bne.n	8003fa2 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f60:	4b61      	ldr	r3, [pc, #388]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d11d      	bne.n	8003fa8 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f70:	e01a      	b.n	8003fa8 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f72:	4b5d      	ldr	r3, [pc, #372]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d116      	bne.n	8003fac <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f82:	e013      	b.n	8003fac <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f84:	4b58      	ldr	r3, [pc, #352]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10f      	bne.n	8003fb0 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f90:	4b55      	ldr	r3, [pc, #340]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d109      	bne.n	8003fb0 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fa0:	e006      	b.n	8003fb0 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8003fa6:	e004      	b.n	8003fb2 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003fa8:	bf00      	nop
 8003faa:	e002      	b.n	8003fb2 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003fac:	bf00      	nop
 8003fae:	e000      	b.n	8003fb2 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003fb0:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d108      	bne.n	8003fca <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003fb8:	4b4b      	ldr	r3, [pc, #300]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f023 0203 	bic.w	r2, r3, #3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4948      	ldr	r1, [pc, #288]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f040 8086 	bne.w	80040de <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003fd2:	4b45      	ldr	r3, [pc, #276]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a44      	ldr	r2, [pc, #272]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003fd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fde:	f7fd ffc7 	bl	8001f70 <HAL_GetTick>
 8003fe2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fe4:	e009      	b.n	8003ffa <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fe6:	f7fd ffc3 	bl	8001f70 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d902      	bls.n	8003ffa <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	73fb      	strb	r3, [r7, #15]
        break;
 8003ff8:	e005      	b.n	8004006 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ffa:	4b3b      	ldr	r3, [pc, #236]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1ef      	bne.n	8003fe6 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d168      	bne.n	80040de <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d113      	bne.n	800403a <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004012:	4b35      	ldr	r3, [pc, #212]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004014:	691a      	ldr	r2, [r3, #16]
 8004016:	4b35      	ldr	r3, [pc, #212]	; (80040ec <RCCEx_PLLSAI1_Config+0x1d4>)
 8004018:	4013      	ands	r3, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6892      	ldr	r2, [r2, #8]
 800401e:	0211      	lsls	r1, r2, #8
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	68d2      	ldr	r2, [r2, #12]
 8004024:	06d2      	lsls	r2, r2, #27
 8004026:	4311      	orrs	r1, r2
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6852      	ldr	r2, [r2, #4]
 800402c:	3a01      	subs	r2, #1
 800402e:	0112      	lsls	r2, r2, #4
 8004030:	430a      	orrs	r2, r1
 8004032:	492d      	ldr	r1, [pc, #180]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004034:	4313      	orrs	r3, r2
 8004036:	610b      	str	r3, [r1, #16]
 8004038:	e02d      	b.n	8004096 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d115      	bne.n	800406c <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004040:	4b29      	ldr	r3, [pc, #164]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004042:	691a      	ldr	r2, [r3, #16]
 8004044:	4b2a      	ldr	r3, [pc, #168]	; (80040f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004046:	4013      	ands	r3, r2
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6892      	ldr	r2, [r2, #8]
 800404c:	0211      	lsls	r1, r2, #8
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6912      	ldr	r2, [r2, #16]
 8004052:	0852      	lsrs	r2, r2, #1
 8004054:	3a01      	subs	r2, #1
 8004056:	0552      	lsls	r2, r2, #21
 8004058:	4311      	orrs	r1, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6852      	ldr	r2, [r2, #4]
 800405e:	3a01      	subs	r2, #1
 8004060:	0112      	lsls	r2, r2, #4
 8004062:	430a      	orrs	r2, r1
 8004064:	4920      	ldr	r1, [pc, #128]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004066:	4313      	orrs	r3, r2
 8004068:	610b      	str	r3, [r1, #16]
 800406a:	e014      	b.n	8004096 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800406c:	4b1e      	ldr	r3, [pc, #120]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1d0>)
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	4b20      	ldr	r3, [pc, #128]	; (80040f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004072:	4013      	ands	r3, r2
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6892      	ldr	r2, [r2, #8]
 8004078:	0211      	lsls	r1, r2, #8
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6952      	ldr	r2, [r2, #20]
 800407e:	0852      	lsrs	r2, r2, #1
 8004080:	3a01      	subs	r2, #1
 8004082:	0652      	lsls	r2, r2, #25
 8004084:	4311      	orrs	r1, r2
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6852      	ldr	r2, [r2, #4]
 800408a:	3a01      	subs	r2, #1
 800408c:	0112      	lsls	r2, r2, #4
 800408e:	430a      	orrs	r2, r1
 8004090:	4915      	ldr	r1, [pc, #84]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004092:	4313      	orrs	r3, r2
 8004094:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004096:	4b14      	ldr	r3, [pc, #80]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a13      	ldr	r2, [pc, #76]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1d0>)
 800409c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a2:	f7fd ff65 	bl	8001f70 <HAL_GetTick>
 80040a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040a8:	e009      	b.n	80040be <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040aa:	f7fd ff61 	bl	8001f70 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d902      	bls.n	80040be <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	73fb      	strb	r3, [r7, #15]
          break;
 80040bc:	e005      	b.n	80040ca <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040be:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0ef      	beq.n	80040aa <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d106      	bne.n	80040de <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80040d0:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	4903      	ldr	r1, [pc, #12]	; (80040e8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80040de:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40021000 	.word	0x40021000
 80040ec:	07ff800f 	.word	0x07ff800f
 80040f0:	ff9f800f 	.word	0xff9f800f
 80040f4:	f9ff800f 	.word	0xf9ff800f

080040f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004106:	4b70      	ldr	r3, [pc, #448]	; (80042c8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00e      	beq.n	8004130 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004112:	4b6d      	ldr	r3, [pc, #436]	; (80042c8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f003 0203 	and.w	r2, r3, #3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d103      	bne.n	800412a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
       ||
 8004126:	2b00      	cmp	r3, #0
 8004128:	d13f      	bne.n	80041aa <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	73fb      	strb	r3, [r7, #15]
 800412e:	e03c      	b.n	80041aa <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b02      	cmp	r3, #2
 8004136:	d00c      	beq.n	8004152 <RCCEx_PLLSAI2_Config+0x5a>
 8004138:	2b03      	cmp	r3, #3
 800413a:	d013      	beq.n	8004164 <RCCEx_PLLSAI2_Config+0x6c>
 800413c:	2b01      	cmp	r3, #1
 800413e:	d120      	bne.n	8004182 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004140:	4b61      	ldr	r3, [pc, #388]	; (80042c8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d11d      	bne.n	8004188 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004150:	e01a      	b.n	8004188 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004152:	4b5d      	ldr	r3, [pc, #372]	; (80042c8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415a:	2b00      	cmp	r3, #0
 800415c:	d116      	bne.n	800418c <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004162:	e013      	b.n	800418c <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004164:	4b58      	ldr	r3, [pc, #352]	; (80042c8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10f      	bne.n	8004190 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004170:	4b55      	ldr	r3, [pc, #340]	; (80042c8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d109      	bne.n	8004190 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004180:	e006      	b.n	8004190 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
      break;
 8004186:	e004      	b.n	8004192 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004188:	bf00      	nop
 800418a:	e002      	b.n	8004192 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800418c:	bf00      	nop
 800418e:	e000      	b.n	8004192 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004190:	bf00      	nop
    }

    if(status == HAL_OK)
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d108      	bne.n	80041aa <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004198:	4b4b      	ldr	r3, [pc, #300]	; (80042c8 <RCCEx_PLLSAI2_Config+0x1d0>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f023 0203 	bic.w	r2, r3, #3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4948      	ldr	r1, [pc, #288]	; (80042c8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f040 8086 	bne.w	80042be <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80041b2:	4b45      	ldr	r3, [pc, #276]	; (80042c8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a44      	ldr	r2, [pc, #272]	; (80042c8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80041b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041be:	f7fd fed7 	bl	8001f70 <HAL_GetTick>
 80041c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041c4:	e009      	b.n	80041da <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041c6:	f7fd fed3 	bl	8001f70 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d902      	bls.n	80041da <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	73fb      	strb	r3, [r7, #15]
        break;
 80041d8:	e005      	b.n	80041e6 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041da:	4b3b      	ldr	r3, [pc, #236]	; (80042c8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1ef      	bne.n	80041c6 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d168      	bne.n	80042be <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d113      	bne.n	800421a <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041f2:	4b35      	ldr	r3, [pc, #212]	; (80042c8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80041f4:	695a      	ldr	r2, [r3, #20]
 80041f6:	4b35      	ldr	r3, [pc, #212]	; (80042cc <RCCEx_PLLSAI2_Config+0x1d4>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6892      	ldr	r2, [r2, #8]
 80041fe:	0211      	lsls	r1, r2, #8
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	68d2      	ldr	r2, [r2, #12]
 8004204:	06d2      	lsls	r2, r2, #27
 8004206:	4311      	orrs	r1, r2
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6852      	ldr	r2, [r2, #4]
 800420c:	3a01      	subs	r2, #1
 800420e:	0112      	lsls	r2, r2, #4
 8004210:	430a      	orrs	r2, r1
 8004212:	492d      	ldr	r1, [pc, #180]	; (80042c8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004214:	4313      	orrs	r3, r2
 8004216:	614b      	str	r3, [r1, #20]
 8004218:	e02d      	b.n	8004276 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d115      	bne.n	800424c <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004220:	4b29      	ldr	r3, [pc, #164]	; (80042c8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004222:	695a      	ldr	r2, [r3, #20]
 8004224:	4b2a      	ldr	r3, [pc, #168]	; (80042d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004226:	4013      	ands	r3, r2
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6892      	ldr	r2, [r2, #8]
 800422c:	0211      	lsls	r1, r2, #8
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6912      	ldr	r2, [r2, #16]
 8004232:	0852      	lsrs	r2, r2, #1
 8004234:	3a01      	subs	r2, #1
 8004236:	0552      	lsls	r2, r2, #21
 8004238:	4311      	orrs	r1, r2
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6852      	ldr	r2, [r2, #4]
 800423e:	3a01      	subs	r2, #1
 8004240:	0112      	lsls	r2, r2, #4
 8004242:	430a      	orrs	r2, r1
 8004244:	4920      	ldr	r1, [pc, #128]	; (80042c8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004246:	4313      	orrs	r3, r2
 8004248:	614b      	str	r3, [r1, #20]
 800424a:	e014      	b.n	8004276 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800424c:	4b1e      	ldr	r3, [pc, #120]	; (80042c8 <RCCEx_PLLSAI2_Config+0x1d0>)
 800424e:	695a      	ldr	r2, [r3, #20]
 8004250:	4b20      	ldr	r3, [pc, #128]	; (80042d4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004252:	4013      	ands	r3, r2
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6892      	ldr	r2, [r2, #8]
 8004258:	0211      	lsls	r1, r2, #8
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6952      	ldr	r2, [r2, #20]
 800425e:	0852      	lsrs	r2, r2, #1
 8004260:	3a01      	subs	r2, #1
 8004262:	0652      	lsls	r2, r2, #25
 8004264:	4311      	orrs	r1, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6852      	ldr	r2, [r2, #4]
 800426a:	3a01      	subs	r2, #1
 800426c:	0112      	lsls	r2, r2, #4
 800426e:	430a      	orrs	r2, r1
 8004270:	4915      	ldr	r1, [pc, #84]	; (80042c8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004272:	4313      	orrs	r3, r2
 8004274:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004276:	4b14      	ldr	r3, [pc, #80]	; (80042c8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a13      	ldr	r2, [pc, #76]	; (80042c8 <RCCEx_PLLSAI2_Config+0x1d0>)
 800427c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004280:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004282:	f7fd fe75 	bl	8001f70 <HAL_GetTick>
 8004286:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004288:	e009      	b.n	800429e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800428a:	f7fd fe71 	bl	8001f70 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d902      	bls.n	800429e <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	73fb      	strb	r3, [r7, #15]
          break;
 800429c:	e005      	b.n	80042aa <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800429e:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0ef      	beq.n	800428a <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d106      	bne.n	80042be <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042b0:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80042b2:	695a      	ldr	r2, [r3, #20]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	4903      	ldr	r1, [pc, #12]	; (80042c8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042be:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40021000 	.word	0x40021000
 80042cc:	07ff800f 	.word	0x07ff800f
 80042d0:	ff9f800f 	.word	0xff9f800f
 80042d4:	f9ff800f 	.word	0xf9ff800f

080042d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e07c      	b.n	80043e4 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d106      	bne.n	800430a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7fd fb77 	bl	80019f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2202      	movs	r2, #2
 800430e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004320:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800432a:	d902      	bls.n	8004332 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	e002      	b.n	8004338 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004336:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004340:	d007      	beq.n	8004352 <HAL_SPI_Init+0x7a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800434a:	d002      	beq.n	8004352 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10b      	bne.n	8004372 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004362:	d903      	bls.n	800436c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	631a      	str	r2, [r3, #48]	; 0x30
 800436a:	e002      	b.n	8004372 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004390:	431a      	orrs	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	ea42 0103 	orr.w	r1, r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	0c1b      	lsrs	r3, r3, #16
 80043b2:	f003 0204 	and.w	r2, r3, #4
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	ea42 0103 	orr.w	r1, r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->State     = HAL_SPI_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint32_t Size, uint32_t Timeout)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b088      	sub	sp, #32
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <HAL_SPI_Transmit+0x20>
 8004408:	2302      	movs	r3, #2
 800440a:	e140      	b.n	800468e <HAL_SPI_Transmit+0x2a2>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004414:	f7fd fdac 	bl	8001f70 <HAL_GetTick>
 8004418:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	617b      	str	r3, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b01      	cmp	r3, #1
 8004428:	d002      	beq.n	8004430 <HAL_SPI_Transmit+0x44>
  {
    errorcode = HAL_BUSY;
 800442a:	2302      	movs	r3, #2
 800442c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800442e:	e125      	b.n	800467c <HAL_SPI_Transmit+0x290>
  }

  if ((pData == NULL) || (Size == 0U))
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d002      	beq.n	800443c <HAL_SPI_Transmit+0x50>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d102      	bne.n	8004442 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004440:	e11c      	b.n	800467c <HAL_SPI_Transmit+0x290>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2203      	movs	r2, #3
 8004446:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	641a      	str	r2, [r3, #64]	; 0x40

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxXferSize  = 0U;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  hspi->RxXferCount = 0U;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  hspi->TxISR       = NULL;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->RxISR       = NULL;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800448c:	d107      	bne.n	800449e <HAL_SPI_Transmit+0xb2>
  {
    SPI_1LINE_TX(hspi);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800449c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a8:	2b40      	cmp	r3, #64	; 0x40
 80044aa:	d007      	beq.n	80044bc <HAL_SPI_Transmit+0xd0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044c4:	d946      	bls.n	8004554 <HAL_SPI_Transmit+0x168>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <HAL_SPI_Transmit+0xe8>
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d13a      	bne.n	800454a <HAL_SPI_Transmit+0x15e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	881a      	ldrh	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	1c9a      	adds	r2, r3, #2
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	1e5a      	subs	r2, r3, #1
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044f4:	e029      	b.n	800454a <HAL_SPI_Transmit+0x15e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b02      	cmp	r3, #2
 8004502:	d110      	bne.n	8004526 <HAL_SPI_Transmit+0x13a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	881a      	ldrh	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	1c9a      	adds	r2, r3, #2
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	1e5a      	subs	r2, r3, #1
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	641a      	str	r2, [r3, #64]	; 0x40
 8004524:	e011      	b.n	800454a <HAL_SPI_Transmit+0x15e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004526:	f7fd fd23 	bl	8001f70 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d803      	bhi.n	800453e <HAL_SPI_Transmit+0x152>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453c:	d102      	bne.n	8004544 <HAL_SPI_Transmit+0x158>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d102      	bne.n	800454a <HAL_SPI_Transmit+0x15e>
        {
          errorcode = HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004548:	e098      	b.n	800467c <HAL_SPI_Transmit+0x290>
    while (hspi->TxXferCount > 0U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1d1      	bne.n	80044f6 <HAL_SPI_Transmit+0x10a>
 8004552:	e071      	b.n	8004638 <HAL_SPI_Transmit+0x24c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <HAL_SPI_Transmit+0x176>
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d166      	bne.n	8004630 <HAL_SPI_Transmit+0x244>
    {
      if (hspi->TxXferCount > 1U)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	2b01      	cmp	r3, #1
 8004568:	d910      	bls.n	800458c <HAL_SPI_Transmit+0x1a0>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	881a      	ldrh	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457a:	1c9a      	adds	r2, r3, #2
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004584:	1e9a      	subs	r2, r3, #2
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	641a      	str	r2, [r3, #64]	; 0x40
 800458a:	e051      	b.n	8004630 <HAL_SPI_Transmit+0x244>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	330c      	adds	r3, #12
 8004596:	7812      	ldrb	r2, [r2, #0]
 8004598:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	1e5a      	subs	r2, r3, #1
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    while (hspi->TxXferCount > 0U)
 80045ae:	e03f      	b.n	8004630 <HAL_SPI_Transmit+0x244>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d126      	bne.n	800460c <HAL_SPI_Transmit+0x220>
      {
        if (hspi->TxXferCount > 1U)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d910      	bls.n	80045e8 <HAL_SPI_Transmit+0x1fc>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	881a      	ldrh	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d6:	1c9a      	adds	r2, r3, #2
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	1e9a      	subs	r2, r3, #2
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	641a      	str	r2, [r3, #64]	; 0x40
 80045e6:	e023      	b.n	8004630 <HAL_SPI_Transmit+0x244>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	330c      	adds	r3, #12
 80045f2:	7812      	ldrb	r2, [r2, #0]
 80045f4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	1e5a      	subs	r2, r3, #1
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	641a      	str	r2, [r3, #64]	; 0x40
 800460a:	e011      	b.n	8004630 <HAL_SPI_Transmit+0x244>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800460c:	f7fd fcb0 	bl	8001f70 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	d803      	bhi.n	8004624 <HAL_SPI_Transmit+0x238>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004622:	d102      	bne.n	800462a <HAL_SPI_Transmit+0x23e>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d102      	bne.n	8004630 <HAL_SPI_Transmit+0x244>
        {
          errorcode = HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800462e:	e025      	b.n	800467c <HAL_SPI_Transmit+0x290>
    while (hspi->TxXferCount > 0U)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1bb      	bne.n	80045b0 <HAL_SPI_Transmit+0x1c4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	6839      	ldr	r1, [r7, #0]
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 fc21 	bl	8004e84 <SPI_EndRxTxTransaction>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <HAL_SPI_Transmit+0x262>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2220      	movs	r2, #32
 800464c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10a      	bne.n	800466c <HAL_SPI_Transmit+0x280>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004656:	2300      	movs	r3, #0
 8004658:	613b      	str	r3, [r7, #16]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	613b      	str	r3, [r7, #16]
 800466a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <HAL_SPI_Transmit+0x28e>
  {
    errorcode = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	77fb      	strb	r3, [r7, #31]
 8004678:	e000      	b.n	800467c <HAL_SPI_Transmit+0x290>
  }

error:
 800467a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return errorcode;
 800468c:	7ffb      	ldrb	r3, [r7, #31]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3720      	adds	r7, #32
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b08a      	sub	sp, #40	; 0x28
 800469a:	af00      	add	r7, sp, #0
 800469c:	60f8      	str	r0, [r7, #12]
 800469e:	60b9      	str	r1, [r7, #8]
 80046a0:	607a      	str	r2, [r7, #4]
 80046a2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046a4:	2301      	movs	r3, #1
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_SPI_TransmitReceive+0x26>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e1e9      	b.n	8004a90 <HAL_SPI_TransmitReceive+0x3fa>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046c4:	f7fd fc54 	bl	8001f70 <HAL_GetTick>
 80046c8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80046d0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80046d8:	887b      	ldrh	r3, [r7, #2]
 80046da:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80046dc:	887b      	ldrh	r3, [r7, #2]
 80046de:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046e0:	7efb      	ldrb	r3, [r7, #27]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d00e      	beq.n	8004704 <HAL_SPI_TransmitReceive+0x6e>
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ec:	d106      	bne.n	80046fc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d102      	bne.n	80046fc <HAL_SPI_TransmitReceive+0x66>
 80046f6:	7efb      	ldrb	r3, [r7, #27]
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d003      	beq.n	8004704 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80046fc:	2302      	movs	r3, #2
 80046fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004702:	e1bb      	b.n	8004a7c <HAL_SPI_TransmitReceive+0x3e6>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <HAL_SPI_TransmitReceive+0x80>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <HAL_SPI_TransmitReceive+0x80>
 8004710:	887b      	ldrh	r3, [r7, #2]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d103      	bne.n	800471e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800471c:	e1ae      	b.n	8004a7c <HAL_SPI_TransmitReceive+0x3e6>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b04      	cmp	r3, #4
 8004728:	d003      	beq.n	8004732 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2205      	movs	r2, #5
 800472e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	887a      	ldrh	r2, [r7, #2]
 8004742:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  hspi->RxXferSize  = Size;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	887a      	ldrh	r2, [r7, #2]
 800474a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004754:	887a      	ldrh	r2, [r7, #2]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxXferSize  = Size;
 800475a:	887a      	ldrh	r2, [r7, #2]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	63da      	str	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxISR       = NULL;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	655a      	str	r2, [r3, #84]	; 0x54
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004774:	d802      	bhi.n	800477c <HAL_SPI_TransmitReceive+0xe6>
 8004776:	8a3b      	ldrh	r3, [r7, #16]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d908      	bls.n	800478e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800478a:	605a      	str	r2, [r3, #4]
 800478c:	e007      	b.n	800479e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800479c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a8:	2b40      	cmp	r3, #64	; 0x40
 80047aa:	d007      	beq.n	80047bc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047c4:	d976      	bls.n	80048b4 <HAL_SPI_TransmitReceive+0x21e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <HAL_SPI_TransmitReceive+0x13e>
 80047ce:	8a7b      	ldrh	r3, [r7, #18]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d164      	bne.n	800489e <HAL_SPI_TransmitReceive+0x208>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d8:	881a      	ldrh	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e4:	1c9a      	adds	r2, r3, #2
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	1e5a      	subs	r2, r3, #1
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047f4:	e053      	b.n	800489e <HAL_SPI_TransmitReceive+0x208>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b02      	cmp	r3, #2
 8004802:	d118      	bne.n	8004836 <HAL_SPI_TransmitReceive+0x1a0>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004808:	2b00      	cmp	r3, #0
 800480a:	d014      	beq.n	8004836 <HAL_SPI_TransmitReceive+0x1a0>
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	2b01      	cmp	r3, #1
 8004810:	d111      	bne.n	8004836 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004816:	881a      	ldrh	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	1c9a      	adds	r2, r3, #2
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482c:	1e5a      	subs	r2, r3, #1
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	641a      	str	r2, [r3, #64]	; 0x40
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b01      	cmp	r3, #1
 8004842:	d11c      	bne.n	800487e <HAL_SPI_TransmitReceive+0x1e8>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d016      	beq.n	800487e <HAL_SPI_TransmitReceive+0x1e8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485a:	b292      	uxth	r2, r2
 800485c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	1c9a      	adds	r2, r3, #2
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	645a      	str	r2, [r3, #68]	; 0x44
        hspi->RxXferCount--;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800486e:	b29b      	uxth	r3, r3
 8004870:	3b01      	subs	r3, #1
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800487a:	2301      	movs	r3, #1
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800487e:	f7fd fb77 	bl	8001f70 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800488a:	429a      	cmp	r2, r3
 800488c:	d807      	bhi.n	800489e <HAL_SPI_TransmitReceive+0x208>
 800488e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004894:	d003      	beq.n	800489e <HAL_SPI_TransmitReceive+0x208>
      {
        errorcode = HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800489c:	e0ee      	b.n	8004a7c <HAL_SPI_TransmitReceive+0x3e6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1a7      	bne.n	80047f6 <HAL_SPI_TransmitReceive+0x160>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1a1      	bne.n	80047f6 <HAL_SPI_TransmitReceive+0x160>
 80048b2:	e0d3      	b.n	8004a5c <HAL_SPI_TransmitReceive+0x3c6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <HAL_SPI_TransmitReceive+0x22e>
 80048bc:	8a7b      	ldrh	r3, [r7, #18]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	f040 80c0 	bne.w	8004a44 <HAL_SPI_TransmitReceive+0x3ae>
    {
      if (hspi->TxXferCount > 1U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d910      	bls.n	80048ee <HAL_SPI_TransmitReceive+0x258>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d0:	881a      	ldrh	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	1c9a      	adds	r2, r3, #2
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	1e9a      	subs	r2, r3, #2
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	641a      	str	r2, [r3, #64]	; 0x40
 80048ec:	e0aa      	b.n	8004a44 <HAL_SPI_TransmitReceive+0x3ae>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	330c      	adds	r3, #12
 80048f8:	7812      	ldrb	r2, [r2, #0]
 80048fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	1e5a      	subs	r2, r3, #1
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004910:	e098      	b.n	8004a44 <HAL_SPI_TransmitReceive+0x3ae>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b02      	cmp	r3, #2
 800491e:	d12e      	bne.n	800497e <HAL_SPI_TransmitReceive+0x2e8>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	2b00      	cmp	r3, #0
 8004926:	d02a      	beq.n	800497e <HAL_SPI_TransmitReceive+0x2e8>
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	2b01      	cmp	r3, #1
 800492c:	d127      	bne.n	800497e <HAL_SPI_TransmitReceive+0x2e8>
      {
        if (hspi->TxXferCount > 1U)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	2b01      	cmp	r3, #1
 8004934:	d910      	bls.n	8004958 <HAL_SPI_TransmitReceive+0x2c2>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493a:	881a      	ldrh	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004946:	1c9a      	adds	r2, r3, #2
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	1e9a      	subs	r2, r3, #2
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	641a      	str	r2, [r3, #64]	; 0x40
 8004956:	e010      	b.n	800497a <HAL_SPI_TransmitReceive+0x2e4>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	330c      	adds	r3, #12
 8004962:	7812      	ldrb	r2, [r2, #0]
 8004964:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	1e5a      	subs	r2, r3, #1
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	641a      	str	r2, [r3, #64]	; 0x40
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b01      	cmp	r3, #1
 800498a:	d148      	bne.n	8004a1e <HAL_SPI_TransmitReceive+0x388>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d042      	beq.n	8004a1e <HAL_SPI_TransmitReceive+0x388>
      {
        if (hspi->RxXferCount > 1U)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800499e:	b29b      	uxth	r3, r3
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d923      	bls.n	80049ec <HAL_SPI_TransmitReceive+0x356>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ae:	b292      	uxth	r2, r2
 80049b0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b6:	1c9a      	adds	r2, r3, #2
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	645a      	str	r2, [r3, #68]	; 0x44
          hspi->RxXferCount -= 2U;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b02      	subs	r3, #2
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (hspi->RxXferCount <= 1U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d81f      	bhi.n	8004a1a <HAL_SPI_TransmitReceive+0x384>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049e8:	605a      	str	r2, [r3, #4]
 80049ea:	e016      	b.n	8004a1a <HAL_SPI_TransmitReceive+0x384>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f103 020c 	add.w	r2, r3, #12
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f8:	7812      	ldrb	r2, [r2, #0]
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	645a      	str	r2, [r3, #68]	; 0x44
          hspi->RxXferCount--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a1e:	f7fd faa7 	bl	8001f70 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d803      	bhi.n	8004a36 <HAL_SPI_TransmitReceive+0x3a0>
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a34:	d102      	bne.n	8004a3c <HAL_SPI_TransmitReceive+0x3a6>
 8004a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d103      	bne.n	8004a44 <HAL_SPI_TransmitReceive+0x3ae>
      {
        errorcode = HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004a42:	e01b      	b.n	8004a7c <HAL_SPI_TransmitReceive+0x3e6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f47f af62 	bne.w	8004912 <HAL_SPI_TransmitReceive+0x27c>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f47f af5b 	bne.w	8004912 <HAL_SPI_TransmitReceive+0x27c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a5c:	69fa      	ldr	r2, [r7, #28]
 8004a5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 fa0f 	bl	8004e84 <SPI_EndRxTxTransaction>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d006      	beq.n	8004a7a <HAL_SPI_TransmitReceive+0x3e4>
  {
    errorcode = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2220      	movs	r2, #32
 8004a76:	665a      	str	r2, [r3, #100]	; 0x64
 8004a78:	e000      	b.n	8004a7c <HAL_SPI_TransmitReceive+0x3e6>
  }

error :
 8004a7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_UNLOCK(hspi);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return errorcode;
 8004a8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3728      	adds	r7, #40	; 0x28
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b088      	sub	sp, #32
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	099b      	lsrs	r3, r3, #6
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10f      	bne.n	8004adc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	099b      	lsrs	r3, r3, #6
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d004      	beq.n	8004adc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	4798      	blx	r3
    return;
 8004ada:	e0d8      	b.n	8004c8e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	085b      	lsrs	r3, r3, #1
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <HAL_SPI_IRQHandler+0x66>
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	09db      	lsrs	r3, r3, #7
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d004      	beq.n	8004afe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	4798      	blx	r3
    return;
 8004afc:	e0c7      	b.n	8004c8e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10c      	bne.n	8004b24 <HAL_SPI_IRQHandler+0x8c>
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	099b      	lsrs	r3, r3, #6
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d106      	bne.n	8004b24 <HAL_SPI_IRQHandler+0x8c>
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	0a1b      	lsrs	r3, r3, #8
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 80b5 	beq.w	8004c8e <HAL_SPI_IRQHandler+0x1f6>
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 80ae 	beq.w	8004c8e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	099b      	lsrs	r3, r3, #6
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d023      	beq.n	8004b86 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d011      	beq.n	8004b6e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b4e:	f043 0204 	orr.w	r2, r3, #4
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	665a      	str	r2, [r3, #100]	; 0x64
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b56:	2300      	movs	r3, #0
 8004b58:	617b      	str	r3, [r7, #20]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	e00b      	b.n	8004b86 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b6e:	2300      	movs	r3, #0
 8004b70:	613b      	str	r3, [r7, #16]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	613b      	str	r3, [r7, #16]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	613b      	str	r3, [r7, #16]
 8004b82:	693b      	ldr	r3, [r7, #16]
        return;
 8004b84:	e083      	b.n	8004c8e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d014      	beq.n	8004bbc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b96:	f043 0201 	orr.w	r2, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	665a      	str	r2, [r3, #100]	; 0x64
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	0a1b      	lsrs	r3, r3, #8
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00c      	beq.n	8004be2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bcc:	f043 0208 	orr.w	r2, r3, #8
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	665a      	str	r2, [r3, #100]	; 0x64
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60bb      	str	r3, [r7, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	60bb      	str	r3, [r7, #8]
 8004be0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d050      	beq.n	8004c8c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004bf8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d104      	bne.n	8004c16 <HAL_SPI_IRQHandler+0x17e>
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d034      	beq.n	8004c80 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0203 	bic.w	r2, r2, #3
 8004c24:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d011      	beq.n	8004c52 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c32:	4a18      	ldr	r2, [pc, #96]	; (8004c94 <HAL_SPI_IRQHandler+0x1fc>)
 8004c34:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fd fb80 	bl	8002340 <HAL_DMA_Abort_IT>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	665a      	str	r2, [r3, #100]	; 0x64
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d016      	beq.n	8004c88 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5e:	4a0d      	ldr	r2, [pc, #52]	; (8004c94 <HAL_SPI_IRQHandler+0x1fc>)
 8004c60:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fd fb6a 	bl	8002340 <HAL_DMA_Abort_IT>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	665a      	str	r2, [r3, #100]	; 0x64
        if (hspi->hdmatx != NULL)
 8004c7e:	e003      	b.n	8004c88 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f809 	bl	8004c98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004c86:	e000      	b.n	8004c8a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004c88:	bf00      	nop
    return;
 8004c8a:	bf00      	nop
 8004c8c:	bf00      	nop
  }
}
 8004c8e:	3720      	adds	r7, #32
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	08004cad 	.word	0x08004cad

08004c98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  hspi->TxXferCount = 0U;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f7ff ffe5 	bl	8004c98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cce:	bf00      	nop
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b084      	sub	sp, #16
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	603b      	str	r3, [r7, #0]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ce6:	e04c      	b.n	8004d82 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cee:	d048      	beq.n	8004d82 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004cf0:	f7fd f93e 	bl	8001f70 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d902      	bls.n	8004d06 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d13d      	bne.n	8004d82 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d1e:	d111      	bne.n	8004d44 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d28:	d004      	beq.n	8004d34 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d32:	d107      	bne.n	8004d44 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d4c:	d10f      	bne.n	8004d6e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e00f      	b.n	8004da2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	bf0c      	ite	eq
 8004d92:	2301      	moveq	r3, #1
 8004d94:	2300      	movne	r3, #0
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	79fb      	ldrb	r3, [r7, #7]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d1a3      	bne.n	8004ce8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b084      	sub	sp, #16
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	60f8      	str	r0, [r7, #12]
 8004db2:	60b9      	str	r1, [r7, #8]
 8004db4:	607a      	str	r2, [r7, #4]
 8004db6:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004db8:	e057      	b.n	8004e6a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004dc0:	d106      	bne.n	8004dd0 <SPI_WaitFifoStateUntilTimeout+0x26>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d103      	bne.n	8004dd0 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	330c      	adds	r3, #12
 8004dce:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd6:	d048      	beq.n	8004e6a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004dd8:	f7fd f8ca 	bl	8001f70 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d902      	bls.n	8004dee <SPI_WaitFifoStateUntilTimeout+0x44>
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d13d      	bne.n	8004e6a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004dfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e06:	d111      	bne.n	8004e2c <SPI_WaitFifoStateUntilTimeout+0x82>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e10:	d004      	beq.n	8004e1c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e1a:	d107      	bne.n	8004e2c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e34:	d10f      	bne.n	8004e56 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e008      	b.n	8004e7c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4013      	ands	r3, r2
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d19f      	bne.n	8004dba <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af02      	add	r7, sp, #8
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f7ff ff84 	bl	8004daa <SPI_WaitFifoStateUntilTimeout>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d007      	beq.n	8004eb8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eac:	f043 0220 	orr.w	r2, r3, #32
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	665a      	str	r2, [r3, #100]	; 0x64
    return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e027      	b.n	8004f08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	2180      	movs	r1, #128	; 0x80
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f7ff ff07 	bl	8004cd6 <SPI_WaitFlagStateUntilTimeout>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d007      	beq.n	8004ede <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ed2:	f043 0220 	orr.w	r2, r3, #32
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	665a      	str	r2, [r3, #100]	; 0x64
    return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e014      	b.n	8004f08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f7ff ff5d 	bl	8004daa <SPI_WaitFifoStateUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d007      	beq.n	8004f06 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004efa:	f043 0220 	orr.w	r2, r3, #32
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	665a      	str	r2, [r3, #100]	; 0x64
    return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e000      	b.n	8004f08 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e042      	b.n	8004fa8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d106      	bne.n	8004f3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7fc feb9 	bl	8001cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2224      	movs	r2, #36	; 0x24
 8004f3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0201 	bic.w	r2, r2, #1
 8004f50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f900 	bl	8005158 <UART_SetConfig>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e022      	b.n	8004fa8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f001 fab4 	bl	80064d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f001 fb3b 	bl	800661c <UART_CheckIdleState>
 8004fa6:	4603      	mov	r3, r0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b08a      	sub	sp, #40	; 0x28
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	603b      	str	r3, [r7, #0]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	f040 80be 	bne.w	8005148 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <HAL_UART_Receive+0x28>
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e0b6      	b.n	800514a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <HAL_UART_Receive+0x3a>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e0af      	b.n	800514a <HAL_UART_Receive+0x19a>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2222      	movs	r2, #34	; 0x22
 8004ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005002:	f7fc ffb5 	bl	8001f70 <HAL_GetTick>
 8005006:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	88fa      	ldrh	r2, [r7, #6]
 800500c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	88fa      	ldrh	r2, [r7, #6]
 8005014:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005020:	d10e      	bne.n	8005040 <HAL_UART_Receive+0x90>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d105      	bne.n	8005036 <HAL_UART_Receive+0x86>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005030:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005034:	e02d      	b.n	8005092 <HAL_UART_Receive+0xe2>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	22ff      	movs	r2, #255	; 0xff
 800503a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800503e:	e028      	b.n	8005092 <HAL_UART_Receive+0xe2>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10d      	bne.n	8005064 <HAL_UART_Receive+0xb4>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d104      	bne.n	800505a <HAL_UART_Receive+0xaa>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	22ff      	movs	r2, #255	; 0xff
 8005054:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005058:	e01b      	b.n	8005092 <HAL_UART_Receive+0xe2>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	227f      	movs	r2, #127	; 0x7f
 800505e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005062:	e016      	b.n	8005092 <HAL_UART_Receive+0xe2>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800506c:	d10d      	bne.n	800508a <HAL_UART_Receive+0xda>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d104      	bne.n	8005080 <HAL_UART_Receive+0xd0>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	227f      	movs	r2, #127	; 0x7f
 800507a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800507e:	e008      	b.n	8005092 <HAL_UART_Receive+0xe2>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	223f      	movs	r2, #63	; 0x3f
 8005084:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005088:	e003      	b.n	8005092 <HAL_UART_Receive+0xe2>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005098:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a2:	d108      	bne.n	80050b6 <HAL_UART_Receive+0x106>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d104      	bne.n	80050b6 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	61bb      	str	r3, [r7, #24]
 80050b4:	e003      	b.n	80050be <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050ba:	2300      	movs	r3, #0
 80050bc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80050be:	e033      	b.n	8005128 <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	2200      	movs	r2, #0
 80050c8:	2120      	movs	r1, #32
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f001 faee 	bl	80066ac <UART_WaitOnFlagUntilTimeout>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <HAL_UART_Receive+0x12a>
      {
        return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e037      	b.n	800514a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10c      	bne.n	80050fa <HAL_UART_Receive+0x14a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	8a7b      	ldrh	r3, [r7, #18]
 80050ea:	4013      	ands	r3, r2
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	3302      	adds	r3, #2
 80050f6:	61bb      	str	r3, [r7, #24]
 80050f8:	e00d      	b.n	8005116 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005100:	b29b      	uxth	r3, r3
 8005102:	b2da      	uxtb	r2, r3
 8005104:	8a7b      	ldrh	r3, [r7, #18]
 8005106:	b2db      	uxtb	r3, r3
 8005108:	4013      	ands	r3, r2
 800510a:	b2da      	uxtb	r2, r3
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	3301      	adds	r3, #1
 8005114:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800512e:	b29b      	uxth	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1c5      	bne.n	80050c0 <HAL_UART_Receive+0x110>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2220      	movs	r2, #32
 8005138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_UNLOCK(huart);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	e000      	b.n	800514a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005148:	2302      	movs	r3, #2
  }
}
 800514a:	4618      	mov	r0, r3
 800514c:	3720      	adds	r7, #32
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	0000      	movs	r0, r0
 8005154:	0000      	movs	r0, r0
	...

08005158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005158:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800515c:	b088      	sub	sp, #32
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	4313      	orrs	r3, r2
 8005184:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	4313      	orrs	r3, r2
 800518e:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4bac      	ldr	r3, [pc, #688]	; (8005448 <UART_SetConfig+0x2f0>)
 8005198:	4013      	ands	r3, r2
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	6812      	ldr	r2, [r2, #0]
 800519e:	69f9      	ldr	r1, [r7, #28]
 80051a0:	430b      	orrs	r3, r1
 80051a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4aa1      	ldr	r2, [pc, #644]	; (800544c <UART_SetConfig+0x2f4>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d004      	beq.n	80051d4 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	69fa      	ldr	r2, [r7, #28]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80051de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6812      	ldr	r2, [r2, #0]
 80051e6:	69f9      	ldr	r1, [r7, #28]
 80051e8:	430b      	orrs	r3, r1
 80051ea:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f2:	f023 010f 	bic.w	r1, r3, #15
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a92      	ldr	r2, [pc, #584]	; (8005450 <UART_SetConfig+0x2f8>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d121      	bne.n	8005250 <UART_SetConfig+0xf8>
 800520c:	4b91      	ldr	r3, [pc, #580]	; (8005454 <UART_SetConfig+0x2fc>)
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	2b03      	cmp	r3, #3
 8005218:	d816      	bhi.n	8005248 <UART_SetConfig+0xf0>
 800521a:	a201      	add	r2, pc, #4	; (adr r2, 8005220 <UART_SetConfig+0xc8>)
 800521c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005220:	08005231 	.word	0x08005231
 8005224:	0800523d 	.word	0x0800523d
 8005228:	08005237 	.word	0x08005237
 800522c:	08005243 	.word	0x08005243
 8005230:	2301      	movs	r3, #1
 8005232:	76fb      	strb	r3, [r7, #27]
 8005234:	e0e8      	b.n	8005408 <UART_SetConfig+0x2b0>
 8005236:	2302      	movs	r3, #2
 8005238:	76fb      	strb	r3, [r7, #27]
 800523a:	e0e5      	b.n	8005408 <UART_SetConfig+0x2b0>
 800523c:	2304      	movs	r3, #4
 800523e:	76fb      	strb	r3, [r7, #27]
 8005240:	e0e2      	b.n	8005408 <UART_SetConfig+0x2b0>
 8005242:	2308      	movs	r3, #8
 8005244:	76fb      	strb	r3, [r7, #27]
 8005246:	e0df      	b.n	8005408 <UART_SetConfig+0x2b0>
 8005248:	2310      	movs	r3, #16
 800524a:	76fb      	strb	r3, [r7, #27]
 800524c:	bf00      	nop
 800524e:	e0db      	b.n	8005408 <UART_SetConfig+0x2b0>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a80      	ldr	r2, [pc, #512]	; (8005458 <UART_SetConfig+0x300>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d134      	bne.n	80052c4 <UART_SetConfig+0x16c>
 800525a:	4b7e      	ldr	r3, [pc, #504]	; (8005454 <UART_SetConfig+0x2fc>)
 800525c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005260:	f003 030c 	and.w	r3, r3, #12
 8005264:	2b0c      	cmp	r3, #12
 8005266:	d829      	bhi.n	80052bc <UART_SetConfig+0x164>
 8005268:	a201      	add	r2, pc, #4	; (adr r2, 8005270 <UART_SetConfig+0x118>)
 800526a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526e:	bf00      	nop
 8005270:	080052a5 	.word	0x080052a5
 8005274:	080052bd 	.word	0x080052bd
 8005278:	080052bd 	.word	0x080052bd
 800527c:	080052bd 	.word	0x080052bd
 8005280:	080052b1 	.word	0x080052b1
 8005284:	080052bd 	.word	0x080052bd
 8005288:	080052bd 	.word	0x080052bd
 800528c:	080052bd 	.word	0x080052bd
 8005290:	080052ab 	.word	0x080052ab
 8005294:	080052bd 	.word	0x080052bd
 8005298:	080052bd 	.word	0x080052bd
 800529c:	080052bd 	.word	0x080052bd
 80052a0:	080052b7 	.word	0x080052b7
 80052a4:	2300      	movs	r3, #0
 80052a6:	76fb      	strb	r3, [r7, #27]
 80052a8:	e0ae      	b.n	8005408 <UART_SetConfig+0x2b0>
 80052aa:	2302      	movs	r3, #2
 80052ac:	76fb      	strb	r3, [r7, #27]
 80052ae:	e0ab      	b.n	8005408 <UART_SetConfig+0x2b0>
 80052b0:	2304      	movs	r3, #4
 80052b2:	76fb      	strb	r3, [r7, #27]
 80052b4:	e0a8      	b.n	8005408 <UART_SetConfig+0x2b0>
 80052b6:	2308      	movs	r3, #8
 80052b8:	76fb      	strb	r3, [r7, #27]
 80052ba:	e0a5      	b.n	8005408 <UART_SetConfig+0x2b0>
 80052bc:	2310      	movs	r3, #16
 80052be:	76fb      	strb	r3, [r7, #27]
 80052c0:	bf00      	nop
 80052c2:	e0a1      	b.n	8005408 <UART_SetConfig+0x2b0>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a64      	ldr	r2, [pc, #400]	; (800545c <UART_SetConfig+0x304>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d120      	bne.n	8005310 <UART_SetConfig+0x1b8>
 80052ce:	4b61      	ldr	r3, [pc, #388]	; (8005454 <UART_SetConfig+0x2fc>)
 80052d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052d8:	2b10      	cmp	r3, #16
 80052da:	d00f      	beq.n	80052fc <UART_SetConfig+0x1a4>
 80052dc:	2b10      	cmp	r3, #16
 80052de:	d802      	bhi.n	80052e6 <UART_SetConfig+0x18e>
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <UART_SetConfig+0x198>
 80052e4:	e010      	b.n	8005308 <UART_SetConfig+0x1b0>
 80052e6:	2b20      	cmp	r3, #32
 80052e8:	d005      	beq.n	80052f6 <UART_SetConfig+0x19e>
 80052ea:	2b30      	cmp	r3, #48	; 0x30
 80052ec:	d009      	beq.n	8005302 <UART_SetConfig+0x1aa>
 80052ee:	e00b      	b.n	8005308 <UART_SetConfig+0x1b0>
 80052f0:	2300      	movs	r3, #0
 80052f2:	76fb      	strb	r3, [r7, #27]
 80052f4:	e088      	b.n	8005408 <UART_SetConfig+0x2b0>
 80052f6:	2302      	movs	r3, #2
 80052f8:	76fb      	strb	r3, [r7, #27]
 80052fa:	e085      	b.n	8005408 <UART_SetConfig+0x2b0>
 80052fc:	2304      	movs	r3, #4
 80052fe:	76fb      	strb	r3, [r7, #27]
 8005300:	e082      	b.n	8005408 <UART_SetConfig+0x2b0>
 8005302:	2308      	movs	r3, #8
 8005304:	76fb      	strb	r3, [r7, #27]
 8005306:	e07f      	b.n	8005408 <UART_SetConfig+0x2b0>
 8005308:	2310      	movs	r3, #16
 800530a:	76fb      	strb	r3, [r7, #27]
 800530c:	bf00      	nop
 800530e:	e07b      	b.n	8005408 <UART_SetConfig+0x2b0>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a52      	ldr	r2, [pc, #328]	; (8005460 <UART_SetConfig+0x308>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d120      	bne.n	800535c <UART_SetConfig+0x204>
 800531a:	4b4e      	ldr	r3, [pc, #312]	; (8005454 <UART_SetConfig+0x2fc>)
 800531c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005320:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005324:	2b40      	cmp	r3, #64	; 0x40
 8005326:	d00f      	beq.n	8005348 <UART_SetConfig+0x1f0>
 8005328:	2b40      	cmp	r3, #64	; 0x40
 800532a:	d802      	bhi.n	8005332 <UART_SetConfig+0x1da>
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <UART_SetConfig+0x1e4>
 8005330:	e010      	b.n	8005354 <UART_SetConfig+0x1fc>
 8005332:	2b80      	cmp	r3, #128	; 0x80
 8005334:	d005      	beq.n	8005342 <UART_SetConfig+0x1ea>
 8005336:	2bc0      	cmp	r3, #192	; 0xc0
 8005338:	d009      	beq.n	800534e <UART_SetConfig+0x1f6>
 800533a:	e00b      	b.n	8005354 <UART_SetConfig+0x1fc>
 800533c:	2300      	movs	r3, #0
 800533e:	76fb      	strb	r3, [r7, #27]
 8005340:	e062      	b.n	8005408 <UART_SetConfig+0x2b0>
 8005342:	2302      	movs	r3, #2
 8005344:	76fb      	strb	r3, [r7, #27]
 8005346:	e05f      	b.n	8005408 <UART_SetConfig+0x2b0>
 8005348:	2304      	movs	r3, #4
 800534a:	76fb      	strb	r3, [r7, #27]
 800534c:	e05c      	b.n	8005408 <UART_SetConfig+0x2b0>
 800534e:	2308      	movs	r3, #8
 8005350:	76fb      	strb	r3, [r7, #27]
 8005352:	e059      	b.n	8005408 <UART_SetConfig+0x2b0>
 8005354:	2310      	movs	r3, #16
 8005356:	76fb      	strb	r3, [r7, #27]
 8005358:	bf00      	nop
 800535a:	e055      	b.n	8005408 <UART_SetConfig+0x2b0>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a40      	ldr	r2, [pc, #256]	; (8005464 <UART_SetConfig+0x30c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d124      	bne.n	80053b0 <UART_SetConfig+0x258>
 8005366:	4b3b      	ldr	r3, [pc, #236]	; (8005454 <UART_SetConfig+0x2fc>)
 8005368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005374:	d012      	beq.n	800539c <UART_SetConfig+0x244>
 8005376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800537a:	d802      	bhi.n	8005382 <UART_SetConfig+0x22a>
 800537c:	2b00      	cmp	r3, #0
 800537e:	d007      	beq.n	8005390 <UART_SetConfig+0x238>
 8005380:	e012      	b.n	80053a8 <UART_SetConfig+0x250>
 8005382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005386:	d006      	beq.n	8005396 <UART_SetConfig+0x23e>
 8005388:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800538c:	d009      	beq.n	80053a2 <UART_SetConfig+0x24a>
 800538e:	e00b      	b.n	80053a8 <UART_SetConfig+0x250>
 8005390:	2300      	movs	r3, #0
 8005392:	76fb      	strb	r3, [r7, #27]
 8005394:	e038      	b.n	8005408 <UART_SetConfig+0x2b0>
 8005396:	2302      	movs	r3, #2
 8005398:	76fb      	strb	r3, [r7, #27]
 800539a:	e035      	b.n	8005408 <UART_SetConfig+0x2b0>
 800539c:	2304      	movs	r3, #4
 800539e:	76fb      	strb	r3, [r7, #27]
 80053a0:	e032      	b.n	8005408 <UART_SetConfig+0x2b0>
 80053a2:	2308      	movs	r3, #8
 80053a4:	76fb      	strb	r3, [r7, #27]
 80053a6:	e02f      	b.n	8005408 <UART_SetConfig+0x2b0>
 80053a8:	2310      	movs	r3, #16
 80053aa:	76fb      	strb	r3, [r7, #27]
 80053ac:	bf00      	nop
 80053ae:	e02b      	b.n	8005408 <UART_SetConfig+0x2b0>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a25      	ldr	r2, [pc, #148]	; (800544c <UART_SetConfig+0x2f4>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d124      	bne.n	8005404 <UART_SetConfig+0x2ac>
 80053ba:	4b26      	ldr	r3, [pc, #152]	; (8005454 <UART_SetConfig+0x2fc>)
 80053bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c8:	d012      	beq.n	80053f0 <UART_SetConfig+0x298>
 80053ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ce:	d802      	bhi.n	80053d6 <UART_SetConfig+0x27e>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d007      	beq.n	80053e4 <UART_SetConfig+0x28c>
 80053d4:	e012      	b.n	80053fc <UART_SetConfig+0x2a4>
 80053d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053da:	d006      	beq.n	80053ea <UART_SetConfig+0x292>
 80053dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053e0:	d009      	beq.n	80053f6 <UART_SetConfig+0x29e>
 80053e2:	e00b      	b.n	80053fc <UART_SetConfig+0x2a4>
 80053e4:	2300      	movs	r3, #0
 80053e6:	76fb      	strb	r3, [r7, #27]
 80053e8:	e00e      	b.n	8005408 <UART_SetConfig+0x2b0>
 80053ea:	2302      	movs	r3, #2
 80053ec:	76fb      	strb	r3, [r7, #27]
 80053ee:	e00b      	b.n	8005408 <UART_SetConfig+0x2b0>
 80053f0:	2304      	movs	r3, #4
 80053f2:	76fb      	strb	r3, [r7, #27]
 80053f4:	e008      	b.n	8005408 <UART_SetConfig+0x2b0>
 80053f6:	2308      	movs	r3, #8
 80053f8:	76fb      	strb	r3, [r7, #27]
 80053fa:	e005      	b.n	8005408 <UART_SetConfig+0x2b0>
 80053fc:	2310      	movs	r3, #16
 80053fe:	76fb      	strb	r3, [r7, #27]
 8005400:	bf00      	nop
 8005402:	e001      	b.n	8005408 <UART_SetConfig+0x2b0>
 8005404:	2310      	movs	r3, #16
 8005406:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a0f      	ldr	r2, [pc, #60]	; (800544c <UART_SetConfig+0x2f4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	f040 842d 	bne.w	8005c6e <UART_SetConfig+0xb16>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005414:	7efb      	ldrb	r3, [r7, #27]
 8005416:	2b08      	cmp	r3, #8
 8005418:	f200 816b 	bhi.w	80056f2 <UART_SetConfig+0x59a>
 800541c:	a201      	add	r2, pc, #4	; (adr r2, 8005424 <UART_SetConfig+0x2cc>)
 800541e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005422:	bf00      	nop
 8005424:	08005469 	.word	0x08005469
 8005428:	080056f3 	.word	0x080056f3
 800542c:	0800550b 	.word	0x0800550b
 8005430:	080056f3 	.word	0x080056f3
 8005434:	080055a3 	.word	0x080055a3
 8005438:	080056f3 	.word	0x080056f3
 800543c:	080056f3 	.word	0x080056f3
 8005440:	080056f3 	.word	0x080056f3
 8005444:	08005645 	.word	0x08005645
 8005448:	cfff69f3 	.word	0xcfff69f3
 800544c:	40008000 	.word	0x40008000
 8005450:	40013800 	.word	0x40013800
 8005454:	40021000 	.word	0x40021000
 8005458:	40004400 	.word	0x40004400
 800545c:	40004800 	.word	0x40004800
 8005460:	40004c00 	.word	0x40004c00
 8005464:	40005000 	.word	0x40005000
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005468:	f7fe f930 	bl	80036cc <HAL_RCC_GetPCLK1Freq>
 800546c:	4602      	mov	r2, r0
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	2b00      	cmp	r3, #0
 8005474:	d044      	beq.n	8005500 <UART_SetConfig+0x3a8>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547a:	2b01      	cmp	r3, #1
 800547c:	d03e      	beq.n	80054fc <UART_SetConfig+0x3a4>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	2b02      	cmp	r3, #2
 8005484:	d038      	beq.n	80054f8 <UART_SetConfig+0x3a0>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	2b03      	cmp	r3, #3
 800548c:	d032      	beq.n	80054f4 <UART_SetConfig+0x39c>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	2b04      	cmp	r3, #4
 8005494:	d02c      	beq.n	80054f0 <UART_SetConfig+0x398>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	2b05      	cmp	r3, #5
 800549c:	d026      	beq.n	80054ec <UART_SetConfig+0x394>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	2b06      	cmp	r3, #6
 80054a4:	d020      	beq.n	80054e8 <UART_SetConfig+0x390>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	2b07      	cmp	r3, #7
 80054ac:	d01a      	beq.n	80054e4 <UART_SetConfig+0x38c>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	2b08      	cmp	r3, #8
 80054b4:	d014      	beq.n	80054e0 <UART_SetConfig+0x388>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	2b09      	cmp	r3, #9
 80054bc:	d00e      	beq.n	80054dc <UART_SetConfig+0x384>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	2b0a      	cmp	r3, #10
 80054c4:	d008      	beq.n	80054d8 <UART_SetConfig+0x380>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	2b0b      	cmp	r3, #11
 80054cc:	d102      	bne.n	80054d4 <UART_SetConfig+0x37c>
 80054ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054d2:	e016      	b.n	8005502 <UART_SetConfig+0x3aa>
 80054d4:	2301      	movs	r3, #1
 80054d6:	e014      	b.n	8005502 <UART_SetConfig+0x3aa>
 80054d8:	2380      	movs	r3, #128	; 0x80
 80054da:	e012      	b.n	8005502 <UART_SetConfig+0x3aa>
 80054dc:	2340      	movs	r3, #64	; 0x40
 80054de:	e010      	b.n	8005502 <UART_SetConfig+0x3aa>
 80054e0:	2320      	movs	r3, #32
 80054e2:	e00e      	b.n	8005502 <UART_SetConfig+0x3aa>
 80054e4:	2310      	movs	r3, #16
 80054e6:	e00c      	b.n	8005502 <UART_SetConfig+0x3aa>
 80054e8:	230c      	movs	r3, #12
 80054ea:	e00a      	b.n	8005502 <UART_SetConfig+0x3aa>
 80054ec:	230a      	movs	r3, #10
 80054ee:	e008      	b.n	8005502 <UART_SetConfig+0x3aa>
 80054f0:	2308      	movs	r3, #8
 80054f2:	e006      	b.n	8005502 <UART_SetConfig+0x3aa>
 80054f4:	2306      	movs	r3, #6
 80054f6:	e004      	b.n	8005502 <UART_SetConfig+0x3aa>
 80054f8:	2304      	movs	r3, #4
 80054fa:	e002      	b.n	8005502 <UART_SetConfig+0x3aa>
 80054fc:	2302      	movs	r3, #2
 80054fe:	e000      	b.n	8005502 <UART_SetConfig+0x3aa>
 8005500:	2301      	movs	r3, #1
 8005502:	fbb2 f3f3 	udiv	r3, r2, r3
 8005506:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8005508:	e0f6      	b.n	80056f8 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	2b00      	cmp	r3, #0
 8005510:	d044      	beq.n	800559c <UART_SetConfig+0x444>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	2b01      	cmp	r3, #1
 8005518:	d03e      	beq.n	8005598 <UART_SetConfig+0x440>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	2b02      	cmp	r3, #2
 8005520:	d038      	beq.n	8005594 <UART_SetConfig+0x43c>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	2b03      	cmp	r3, #3
 8005528:	d032      	beq.n	8005590 <UART_SetConfig+0x438>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	2b04      	cmp	r3, #4
 8005530:	d02c      	beq.n	800558c <UART_SetConfig+0x434>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	2b05      	cmp	r3, #5
 8005538:	d026      	beq.n	8005588 <UART_SetConfig+0x430>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	2b06      	cmp	r3, #6
 8005540:	d020      	beq.n	8005584 <UART_SetConfig+0x42c>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	2b07      	cmp	r3, #7
 8005548:	d01a      	beq.n	8005580 <UART_SetConfig+0x428>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	2b08      	cmp	r3, #8
 8005550:	d014      	beq.n	800557c <UART_SetConfig+0x424>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	2b09      	cmp	r3, #9
 8005558:	d00e      	beq.n	8005578 <UART_SetConfig+0x420>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	2b0a      	cmp	r3, #10
 8005560:	d008      	beq.n	8005574 <UART_SetConfig+0x41c>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	2b0b      	cmp	r3, #11
 8005568:	d102      	bne.n	8005570 <UART_SetConfig+0x418>
 800556a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800556e:	e016      	b.n	800559e <UART_SetConfig+0x446>
 8005570:	4ba1      	ldr	r3, [pc, #644]	; (80057f8 <UART_SetConfig+0x6a0>)
 8005572:	e014      	b.n	800559e <UART_SetConfig+0x446>
 8005574:	4ba1      	ldr	r3, [pc, #644]	; (80057fc <UART_SetConfig+0x6a4>)
 8005576:	e012      	b.n	800559e <UART_SetConfig+0x446>
 8005578:	4ba1      	ldr	r3, [pc, #644]	; (8005800 <UART_SetConfig+0x6a8>)
 800557a:	e010      	b.n	800559e <UART_SetConfig+0x446>
 800557c:	4ba1      	ldr	r3, [pc, #644]	; (8005804 <UART_SetConfig+0x6ac>)
 800557e:	e00e      	b.n	800559e <UART_SetConfig+0x446>
 8005580:	4ba1      	ldr	r3, [pc, #644]	; (8005808 <UART_SetConfig+0x6b0>)
 8005582:	e00c      	b.n	800559e <UART_SetConfig+0x446>
 8005584:	4ba1      	ldr	r3, [pc, #644]	; (800580c <UART_SetConfig+0x6b4>)
 8005586:	e00a      	b.n	800559e <UART_SetConfig+0x446>
 8005588:	4ba1      	ldr	r3, [pc, #644]	; (8005810 <UART_SetConfig+0x6b8>)
 800558a:	e008      	b.n	800559e <UART_SetConfig+0x446>
 800558c:	4ba1      	ldr	r3, [pc, #644]	; (8005814 <UART_SetConfig+0x6bc>)
 800558e:	e006      	b.n	800559e <UART_SetConfig+0x446>
 8005590:	4ba1      	ldr	r3, [pc, #644]	; (8005818 <UART_SetConfig+0x6c0>)
 8005592:	e004      	b.n	800559e <UART_SetConfig+0x446>
 8005594:	4ba1      	ldr	r3, [pc, #644]	; (800581c <UART_SetConfig+0x6c4>)
 8005596:	e002      	b.n	800559e <UART_SetConfig+0x446>
 8005598:	4ba1      	ldr	r3, [pc, #644]	; (8005820 <UART_SetConfig+0x6c8>)
 800559a:	e000      	b.n	800559e <UART_SetConfig+0x446>
 800559c:	4b96      	ldr	r3, [pc, #600]	; (80057f8 <UART_SetConfig+0x6a0>)
 800559e:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 80055a0:	e0aa      	b.n	80056f8 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80055a2:	f7fd fffd 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 80055a6:	4602      	mov	r2, r0
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d044      	beq.n	800563a <UART_SetConfig+0x4e2>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d03e      	beq.n	8005636 <UART_SetConfig+0x4de>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d038      	beq.n	8005632 <UART_SetConfig+0x4da>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	2b03      	cmp	r3, #3
 80055c6:	d032      	beq.n	800562e <UART_SetConfig+0x4d6>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	2b04      	cmp	r3, #4
 80055ce:	d02c      	beq.n	800562a <UART_SetConfig+0x4d2>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	2b05      	cmp	r3, #5
 80055d6:	d026      	beq.n	8005626 <UART_SetConfig+0x4ce>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	2b06      	cmp	r3, #6
 80055de:	d020      	beq.n	8005622 <UART_SetConfig+0x4ca>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	2b07      	cmp	r3, #7
 80055e6:	d01a      	beq.n	800561e <UART_SetConfig+0x4c6>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d014      	beq.n	800561a <UART_SetConfig+0x4c2>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	2b09      	cmp	r3, #9
 80055f6:	d00e      	beq.n	8005616 <UART_SetConfig+0x4be>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	2b0a      	cmp	r3, #10
 80055fe:	d008      	beq.n	8005612 <UART_SetConfig+0x4ba>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	2b0b      	cmp	r3, #11
 8005606:	d102      	bne.n	800560e <UART_SetConfig+0x4b6>
 8005608:	f44f 7380 	mov.w	r3, #256	; 0x100
 800560c:	e016      	b.n	800563c <UART_SetConfig+0x4e4>
 800560e:	2301      	movs	r3, #1
 8005610:	e014      	b.n	800563c <UART_SetConfig+0x4e4>
 8005612:	2380      	movs	r3, #128	; 0x80
 8005614:	e012      	b.n	800563c <UART_SetConfig+0x4e4>
 8005616:	2340      	movs	r3, #64	; 0x40
 8005618:	e010      	b.n	800563c <UART_SetConfig+0x4e4>
 800561a:	2320      	movs	r3, #32
 800561c:	e00e      	b.n	800563c <UART_SetConfig+0x4e4>
 800561e:	2310      	movs	r3, #16
 8005620:	e00c      	b.n	800563c <UART_SetConfig+0x4e4>
 8005622:	230c      	movs	r3, #12
 8005624:	e00a      	b.n	800563c <UART_SetConfig+0x4e4>
 8005626:	230a      	movs	r3, #10
 8005628:	e008      	b.n	800563c <UART_SetConfig+0x4e4>
 800562a:	2308      	movs	r3, #8
 800562c:	e006      	b.n	800563c <UART_SetConfig+0x4e4>
 800562e:	2306      	movs	r3, #6
 8005630:	e004      	b.n	800563c <UART_SetConfig+0x4e4>
 8005632:	2304      	movs	r3, #4
 8005634:	e002      	b.n	800563c <UART_SetConfig+0x4e4>
 8005636:	2302      	movs	r3, #2
 8005638:	e000      	b.n	800563c <UART_SetConfig+0x4e4>
 800563a:	2301      	movs	r3, #1
 800563c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005640:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8005642:	e059      	b.n	80056f8 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	2b00      	cmp	r3, #0
 800564a:	d04e      	beq.n	80056ea <UART_SetConfig+0x592>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	2b01      	cmp	r3, #1
 8005652:	d047      	beq.n	80056e4 <UART_SetConfig+0x58c>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	2b02      	cmp	r3, #2
 800565a:	d040      	beq.n	80056de <UART_SetConfig+0x586>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	2b03      	cmp	r3, #3
 8005662:	d039      	beq.n	80056d8 <UART_SetConfig+0x580>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	2b04      	cmp	r3, #4
 800566a:	d032      	beq.n	80056d2 <UART_SetConfig+0x57a>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	2b05      	cmp	r3, #5
 8005672:	d02b      	beq.n	80056cc <UART_SetConfig+0x574>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	2b06      	cmp	r3, #6
 800567a:	d024      	beq.n	80056c6 <UART_SetConfig+0x56e>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	2b07      	cmp	r3, #7
 8005682:	d01d      	beq.n	80056c0 <UART_SetConfig+0x568>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	2b08      	cmp	r3, #8
 800568a:	d016      	beq.n	80056ba <UART_SetConfig+0x562>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	2b09      	cmp	r3, #9
 8005692:	d00f      	beq.n	80056b4 <UART_SetConfig+0x55c>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	2b0a      	cmp	r3, #10
 800569a:	d008      	beq.n	80056ae <UART_SetConfig+0x556>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	2b0b      	cmp	r3, #11
 80056a2:	d101      	bne.n	80056a8 <UART_SetConfig+0x550>
 80056a4:	2380      	movs	r3, #128	; 0x80
 80056a6:	e022      	b.n	80056ee <UART_SetConfig+0x596>
 80056a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ac:	e01f      	b.n	80056ee <UART_SetConfig+0x596>
 80056ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056b2:	e01c      	b.n	80056ee <UART_SetConfig+0x596>
 80056b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056b8:	e019      	b.n	80056ee <UART_SetConfig+0x596>
 80056ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056be:	e016      	b.n	80056ee <UART_SetConfig+0x596>
 80056c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056c4:	e013      	b.n	80056ee <UART_SetConfig+0x596>
 80056c6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80056ca:	e010      	b.n	80056ee <UART_SetConfig+0x596>
 80056cc:	f640 43cc 	movw	r3, #3276	; 0xccc
 80056d0:	e00d      	b.n	80056ee <UART_SetConfig+0x596>
 80056d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056d6:	e00a      	b.n	80056ee <UART_SetConfig+0x596>
 80056d8:	f241 5355 	movw	r3, #5461	; 0x1555
 80056dc:	e007      	b.n	80056ee <UART_SetConfig+0x596>
 80056de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056e2:	e004      	b.n	80056ee <UART_SetConfig+0x596>
 80056e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056e8:	e001      	b.n	80056ee <UART_SetConfig+0x596>
 80056ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ee:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 80056f0:	e002      	b.n	80056f8 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	74fb      	strb	r3, [r7, #19]
        break;
 80056f6:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 86c2 	beq.w	8006484 <UART_SetConfig+0x132c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	4613      	mov	r3, r2
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	4413      	add	r3, r2
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	429a      	cmp	r2, r3
 800570e:	d305      	bcc.n	800571c <UART_SetConfig+0x5c4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	429a      	cmp	r2, r3
 800571a:	d903      	bls.n	8005724 <UART_SetConfig+0x5cc>
      {
        ret = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	74fb      	strb	r3, [r7, #19]
 8005720:	f000 beb0 	b.w	8006484 <UART_SetConfig+0x132c>
      }
      else
      {
        switch (clocksource)
 8005724:	7efb      	ldrb	r3, [r7, #27]
 8005726:	2b08      	cmp	r3, #8
 8005728:	f200 828c 	bhi.w	8005c44 <UART_SetConfig+0xaec>
 800572c:	a201      	add	r2, pc, #4	; (adr r2, 8005734 <UART_SetConfig+0x5dc>)
 800572e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005732:	bf00      	nop
 8005734:	08005759 	.word	0x08005759
 8005738:	08005c45 	.word	0x08005c45
 800573c:	080058c3 	.word	0x080058c3
 8005740:	08005c45 	.word	0x08005c45
 8005744:	080059b9 	.word	0x080059b9
 8005748:	08005c45 	.word	0x08005c45
 800574c:	08005c45 	.word	0x08005c45
 8005750:	08005c45 	.word	0x08005c45
 8005754:	08005af5 	.word	0x08005af5
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005758:	f7fd ffb8 	bl	80036cc <HAL_RCC_GetPCLK1Freq>
 800575c:	4603      	mov	r3, r0
 800575e:	4618      	mov	r0, r3
 8005760:	f04f 0100 	mov.w	r1, #0
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	2b00      	cmp	r3, #0
 800576a:	d07e      	beq.n	800586a <UART_SetConfig+0x712>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	2b01      	cmp	r3, #1
 8005772:	d075      	beq.n	8005860 <UART_SetConfig+0x708>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	2b02      	cmp	r3, #2
 800577a:	d06c      	beq.n	8005856 <UART_SetConfig+0x6fe>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	2b03      	cmp	r3, #3
 8005782:	d063      	beq.n	800584c <UART_SetConfig+0x6f4>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	2b04      	cmp	r3, #4
 800578a:	d05a      	beq.n	8005842 <UART_SetConfig+0x6ea>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	2b05      	cmp	r3, #5
 8005792:	d051      	beq.n	8005838 <UART_SetConfig+0x6e0>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	2b06      	cmp	r3, #6
 800579a:	d048      	beq.n	800582e <UART_SetConfig+0x6d6>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	2b07      	cmp	r3, #7
 80057a2:	d03f      	beq.n	8005824 <UART_SetConfig+0x6cc>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d01f      	beq.n	80057ec <UART_SetConfig+0x694>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	2b09      	cmp	r3, #9
 80057b2:	d016      	beq.n	80057e2 <UART_SetConfig+0x68a>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	2b0a      	cmp	r3, #10
 80057ba:	d00d      	beq.n	80057d8 <UART_SetConfig+0x680>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	2b0b      	cmp	r3, #11
 80057c2:	d104      	bne.n	80057ce <UART_SetConfig+0x676>
 80057c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057c8:	f04f 0400 	mov.w	r4, #0
 80057cc:	e051      	b.n	8005872 <UART_SetConfig+0x71a>
 80057ce:	f04f 0301 	mov.w	r3, #1
 80057d2:	f04f 0400 	mov.w	r4, #0
 80057d6:	e04c      	b.n	8005872 <UART_SetConfig+0x71a>
 80057d8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80057dc:	f04f 0400 	mov.w	r4, #0
 80057e0:	e047      	b.n	8005872 <UART_SetConfig+0x71a>
 80057e2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80057e6:	f04f 0400 	mov.w	r4, #0
 80057ea:	e042      	b.n	8005872 <UART_SetConfig+0x71a>
 80057ec:	f04f 0320 	mov.w	r3, #32
 80057f0:	f04f 0400 	mov.w	r4, #0
 80057f4:	e03d      	b.n	8005872 <UART_SetConfig+0x71a>
 80057f6:	bf00      	nop
 80057f8:	00f42400 	.word	0x00f42400
 80057fc:	0001e848 	.word	0x0001e848
 8005800:	0003d090 	.word	0x0003d090
 8005804:	0007a120 	.word	0x0007a120
 8005808:	000f4240 	.word	0x000f4240
 800580c:	00145855 	.word	0x00145855
 8005810:	00186a00 	.word	0x00186a00
 8005814:	001e8480 	.word	0x001e8480
 8005818:	0028b0aa 	.word	0x0028b0aa
 800581c:	003d0900 	.word	0x003d0900
 8005820:	007a1200 	.word	0x007a1200
 8005824:	f04f 0310 	mov.w	r3, #16
 8005828:	f04f 0400 	mov.w	r4, #0
 800582c:	e021      	b.n	8005872 <UART_SetConfig+0x71a>
 800582e:	f04f 030c 	mov.w	r3, #12
 8005832:	f04f 0400 	mov.w	r4, #0
 8005836:	e01c      	b.n	8005872 <UART_SetConfig+0x71a>
 8005838:	f04f 030a 	mov.w	r3, #10
 800583c:	f04f 0400 	mov.w	r4, #0
 8005840:	e017      	b.n	8005872 <UART_SetConfig+0x71a>
 8005842:	f04f 0308 	mov.w	r3, #8
 8005846:	f04f 0400 	mov.w	r4, #0
 800584a:	e012      	b.n	8005872 <UART_SetConfig+0x71a>
 800584c:	f04f 0306 	mov.w	r3, #6
 8005850:	f04f 0400 	mov.w	r4, #0
 8005854:	e00d      	b.n	8005872 <UART_SetConfig+0x71a>
 8005856:	f04f 0304 	mov.w	r3, #4
 800585a:	f04f 0400 	mov.w	r4, #0
 800585e:	e008      	b.n	8005872 <UART_SetConfig+0x71a>
 8005860:	f04f 0302 	mov.w	r3, #2
 8005864:	f04f 0400 	mov.w	r4, #0
 8005868:	e003      	b.n	8005872 <UART_SetConfig+0x71a>
 800586a:	f04f 0301 	mov.w	r3, #1
 800586e:	f04f 0400 	mov.w	r4, #0
 8005872:	461a      	mov	r2, r3
 8005874:	4623      	mov	r3, r4
 8005876:	f7fa fcc3 	bl	8000200 <__aeabi_uldivmod>
 800587a:	4603      	mov	r3, r0
 800587c:	460c      	mov	r4, r1
 800587e:	4619      	mov	r1, r3
 8005880:	4622      	mov	r2, r4
 8005882:	f04f 0300 	mov.w	r3, #0
 8005886:	f04f 0400 	mov.w	r4, #0
 800588a:	0214      	lsls	r4, r2, #8
 800588c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005890:	020b      	lsls	r3, r1, #8
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6852      	ldr	r2, [r2, #4]
 8005896:	0852      	lsrs	r2, r2, #1
 8005898:	4611      	mov	r1, r2
 800589a:	f04f 0200 	mov.w	r2, #0
 800589e:	eb13 0b01 	adds.w	fp, r3, r1
 80058a2:	eb44 0c02 	adc.w	ip, r4, r2
 80058a6:	4658      	mov	r0, fp
 80058a8:	4661      	mov	r1, ip
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f04f 0400 	mov.w	r4, #0
 80058b2:	461a      	mov	r2, r3
 80058b4:	4623      	mov	r3, r4
 80058b6:	f7fa fca3 	bl	8000200 <__aeabi_uldivmod>
 80058ba:	4603      	mov	r3, r0
 80058bc:	460c      	mov	r4, r1
 80058be:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 80058c0:	e1c3      	b.n	8005c4a <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d05b      	beq.n	8005982 <UART_SetConfig+0x82a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d053      	beq.n	800597a <UART_SetConfig+0x822>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d04b      	beq.n	8005972 <UART_SetConfig+0x81a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	2b03      	cmp	r3, #3
 80058e0:	d043      	beq.n	800596a <UART_SetConfig+0x812>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d03b      	beq.n	8005962 <UART_SetConfig+0x80a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	2b05      	cmp	r3, #5
 80058f0:	d033      	beq.n	800595a <UART_SetConfig+0x802>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	2b06      	cmp	r3, #6
 80058f8:	d02b      	beq.n	8005952 <UART_SetConfig+0x7fa>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	2b07      	cmp	r3, #7
 8005900:	d023      	beq.n	800594a <UART_SetConfig+0x7f2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	2b08      	cmp	r3, #8
 8005908:	d01b      	beq.n	8005942 <UART_SetConfig+0x7ea>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	2b09      	cmp	r3, #9
 8005910:	d013      	beq.n	800593a <UART_SetConfig+0x7e2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	2b0a      	cmp	r3, #10
 8005918:	d00b      	beq.n	8005932 <UART_SetConfig+0x7da>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	2b0b      	cmp	r3, #11
 8005920:	d103      	bne.n	800592a <UART_SetConfig+0x7d2>
 8005922:	4bad      	ldr	r3, [pc, #692]	; (8005bd8 <UART_SetConfig+0xa80>)
 8005924:	f04f 0400 	mov.w	r4, #0
 8005928:	e02e      	b.n	8005988 <UART_SetConfig+0x830>
 800592a:	4bac      	ldr	r3, [pc, #688]	; (8005bdc <UART_SetConfig+0xa84>)
 800592c:	f04f 0400 	mov.w	r4, #0
 8005930:	e02a      	b.n	8005988 <UART_SetConfig+0x830>
 8005932:	4bab      	ldr	r3, [pc, #684]	; (8005be0 <UART_SetConfig+0xa88>)
 8005934:	f04f 0400 	mov.w	r4, #0
 8005938:	e026      	b.n	8005988 <UART_SetConfig+0x830>
 800593a:	4baa      	ldr	r3, [pc, #680]	; (8005be4 <UART_SetConfig+0xa8c>)
 800593c:	f04f 0400 	mov.w	r4, #0
 8005940:	e022      	b.n	8005988 <UART_SetConfig+0x830>
 8005942:	4ba9      	ldr	r3, [pc, #676]	; (8005be8 <UART_SetConfig+0xa90>)
 8005944:	f04f 0400 	mov.w	r4, #0
 8005948:	e01e      	b.n	8005988 <UART_SetConfig+0x830>
 800594a:	4ba8      	ldr	r3, [pc, #672]	; (8005bec <UART_SetConfig+0xa94>)
 800594c:	f04f 0400 	mov.w	r4, #0
 8005950:	e01a      	b.n	8005988 <UART_SetConfig+0x830>
 8005952:	a49d      	add	r4, pc, #628	; (adr r4, 8005bc8 <UART_SetConfig+0xa70>)
 8005954:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005958:	e016      	b.n	8005988 <UART_SetConfig+0x830>
 800595a:	4ba5      	ldr	r3, [pc, #660]	; (8005bf0 <UART_SetConfig+0xa98>)
 800595c:	f04f 0400 	mov.w	r4, #0
 8005960:	e012      	b.n	8005988 <UART_SetConfig+0x830>
 8005962:	4ba4      	ldr	r3, [pc, #656]	; (8005bf4 <UART_SetConfig+0xa9c>)
 8005964:	f04f 0400 	mov.w	r4, #0
 8005968:	e00e      	b.n	8005988 <UART_SetConfig+0x830>
 800596a:	a499      	add	r4, pc, #612	; (adr r4, 8005bd0 <UART_SetConfig+0xa78>)
 800596c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005970:	e00a      	b.n	8005988 <UART_SetConfig+0x830>
 8005972:	4ba1      	ldr	r3, [pc, #644]	; (8005bf8 <UART_SetConfig+0xaa0>)
 8005974:	f04f 0400 	mov.w	r4, #0
 8005978:	e006      	b.n	8005988 <UART_SetConfig+0x830>
 800597a:	4ba0      	ldr	r3, [pc, #640]	; (8005bfc <UART_SetConfig+0xaa4>)
 800597c:	f04f 0400 	mov.w	r4, #0
 8005980:	e002      	b.n	8005988 <UART_SetConfig+0x830>
 8005982:	4b96      	ldr	r3, [pc, #600]	; (8005bdc <UART_SetConfig+0xa84>)
 8005984:	f04f 0400 	mov.w	r4, #0
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6852      	ldr	r2, [r2, #4]
 800598c:	0852      	lsrs	r2, r2, #1
 800598e:	4611      	mov	r1, r2
 8005990:	f04f 0200 	mov.w	r2, #0
 8005994:	eb13 0b01 	adds.w	fp, r3, r1
 8005998:	eb44 0c02 	adc.w	ip, r4, r2
 800599c:	4658      	mov	r0, fp
 800599e:	4661      	mov	r1, ip
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f04f 0400 	mov.w	r4, #0
 80059a8:	461a      	mov	r2, r3
 80059aa:	4623      	mov	r3, r4
 80059ac:	f7fa fc28 	bl	8000200 <__aeabi_uldivmod>
 80059b0:	4603      	mov	r3, r0
 80059b2:	460c      	mov	r4, r1
 80059b4:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 80059b6:	e148      	b.n	8005c4a <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059b8:	f7fd fdf2 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 80059bc:	4603      	mov	r3, r0
 80059be:	4618      	mov	r0, r3
 80059c0:	f04f 0100 	mov.w	r1, #0
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d067      	beq.n	8005a9c <UART_SetConfig+0x944>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d05e      	beq.n	8005a92 <UART_SetConfig+0x93a>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d055      	beq.n	8005a88 <UART_SetConfig+0x930>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	d04c      	beq.n	8005a7e <UART_SetConfig+0x926>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d043      	beq.n	8005a74 <UART_SetConfig+0x91c>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	2b05      	cmp	r3, #5
 80059f2:	d03a      	beq.n	8005a6a <UART_SetConfig+0x912>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	2b06      	cmp	r3, #6
 80059fa:	d031      	beq.n	8005a60 <UART_SetConfig+0x908>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	2b07      	cmp	r3, #7
 8005a02:	d028      	beq.n	8005a56 <UART_SetConfig+0x8fe>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d01f      	beq.n	8005a4c <UART_SetConfig+0x8f4>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	2b09      	cmp	r3, #9
 8005a12:	d016      	beq.n	8005a42 <UART_SetConfig+0x8ea>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	2b0a      	cmp	r3, #10
 8005a1a:	d00d      	beq.n	8005a38 <UART_SetConfig+0x8e0>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a20:	2b0b      	cmp	r3, #11
 8005a22:	d104      	bne.n	8005a2e <UART_SetConfig+0x8d6>
 8005a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a28:	f04f 0400 	mov.w	r4, #0
 8005a2c:	e03a      	b.n	8005aa4 <UART_SetConfig+0x94c>
 8005a2e:	f04f 0301 	mov.w	r3, #1
 8005a32:	f04f 0400 	mov.w	r4, #0
 8005a36:	e035      	b.n	8005aa4 <UART_SetConfig+0x94c>
 8005a38:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005a3c:	f04f 0400 	mov.w	r4, #0
 8005a40:	e030      	b.n	8005aa4 <UART_SetConfig+0x94c>
 8005a42:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005a46:	f04f 0400 	mov.w	r4, #0
 8005a4a:	e02b      	b.n	8005aa4 <UART_SetConfig+0x94c>
 8005a4c:	f04f 0320 	mov.w	r3, #32
 8005a50:	f04f 0400 	mov.w	r4, #0
 8005a54:	e026      	b.n	8005aa4 <UART_SetConfig+0x94c>
 8005a56:	f04f 0310 	mov.w	r3, #16
 8005a5a:	f04f 0400 	mov.w	r4, #0
 8005a5e:	e021      	b.n	8005aa4 <UART_SetConfig+0x94c>
 8005a60:	f04f 030c 	mov.w	r3, #12
 8005a64:	f04f 0400 	mov.w	r4, #0
 8005a68:	e01c      	b.n	8005aa4 <UART_SetConfig+0x94c>
 8005a6a:	f04f 030a 	mov.w	r3, #10
 8005a6e:	f04f 0400 	mov.w	r4, #0
 8005a72:	e017      	b.n	8005aa4 <UART_SetConfig+0x94c>
 8005a74:	f04f 0308 	mov.w	r3, #8
 8005a78:	f04f 0400 	mov.w	r4, #0
 8005a7c:	e012      	b.n	8005aa4 <UART_SetConfig+0x94c>
 8005a7e:	f04f 0306 	mov.w	r3, #6
 8005a82:	f04f 0400 	mov.w	r4, #0
 8005a86:	e00d      	b.n	8005aa4 <UART_SetConfig+0x94c>
 8005a88:	f04f 0304 	mov.w	r3, #4
 8005a8c:	f04f 0400 	mov.w	r4, #0
 8005a90:	e008      	b.n	8005aa4 <UART_SetConfig+0x94c>
 8005a92:	f04f 0302 	mov.w	r3, #2
 8005a96:	f04f 0400 	mov.w	r4, #0
 8005a9a:	e003      	b.n	8005aa4 <UART_SetConfig+0x94c>
 8005a9c:	f04f 0301 	mov.w	r3, #1
 8005aa0:	f04f 0400 	mov.w	r4, #0
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	4623      	mov	r3, r4
 8005aa8:	f7fa fbaa 	bl	8000200 <__aeabi_uldivmod>
 8005aac:	4603      	mov	r3, r0
 8005aae:	460c      	mov	r4, r1
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4622      	mov	r2, r4
 8005ab4:	f04f 0300 	mov.w	r3, #0
 8005ab8:	f04f 0400 	mov.w	r4, #0
 8005abc:	0214      	lsls	r4, r2, #8
 8005abe:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005ac2:	020b      	lsls	r3, r1, #8
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	6852      	ldr	r2, [r2, #4]
 8005ac8:	0852      	lsrs	r2, r2, #1
 8005aca:	4611      	mov	r1, r2
 8005acc:	f04f 0200 	mov.w	r2, #0
 8005ad0:	eb13 0b01 	adds.w	fp, r3, r1
 8005ad4:	eb44 0c02 	adc.w	ip, r4, r2
 8005ad8:	4658      	mov	r0, fp
 8005ada:	4661      	mov	r1, ip
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f04f 0400 	mov.w	r4, #0
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	4623      	mov	r3, r4
 8005ae8:	f7fa fb8a 	bl	8000200 <__aeabi_uldivmod>
 8005aec:	4603      	mov	r3, r0
 8005aee:	460c      	mov	r4, r1
 8005af0:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8005af2:	e0aa      	b.n	8005c4a <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 8087 	beq.w	8005c0c <UART_SetConfig+0xab4>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d05b      	beq.n	8005bbe <UART_SetConfig+0xa66>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d052      	beq.n	8005bb4 <UART_SetConfig+0xa5c>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	2b03      	cmp	r3, #3
 8005b14:	d04a      	beq.n	8005bac <UART_SetConfig+0xa54>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d041      	beq.n	8005ba2 <UART_SetConfig+0xa4a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	2b05      	cmp	r3, #5
 8005b24:	d039      	beq.n	8005b9a <UART_SetConfig+0xa42>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	2b06      	cmp	r3, #6
 8005b2c:	d031      	beq.n	8005b92 <UART_SetConfig+0xa3a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	2b07      	cmp	r3, #7
 8005b34:	d028      	beq.n	8005b88 <UART_SetConfig+0xa30>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	2b08      	cmp	r3, #8
 8005b3c:	d01f      	beq.n	8005b7e <UART_SetConfig+0xa26>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	2b09      	cmp	r3, #9
 8005b44:	d016      	beq.n	8005b74 <UART_SetConfig+0xa1c>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	2b0a      	cmp	r3, #10
 8005b4c:	d00d      	beq.n	8005b6a <UART_SetConfig+0xa12>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	2b0b      	cmp	r3, #11
 8005b54:	d104      	bne.n	8005b60 <UART_SetConfig+0xa08>
 8005b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b5a:	f04f 0400 	mov.w	r4, #0
 8005b5e:	e059      	b.n	8005c14 <UART_SetConfig+0xabc>
 8005b60:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005b64:	f04f 0400 	mov.w	r4, #0
 8005b68:	e054      	b.n	8005c14 <UART_SetConfig+0xabc>
 8005b6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b6e:	f04f 0400 	mov.w	r4, #0
 8005b72:	e04f      	b.n	8005c14 <UART_SetConfig+0xabc>
 8005b74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b78:	f04f 0400 	mov.w	r4, #0
 8005b7c:	e04a      	b.n	8005c14 <UART_SetConfig+0xabc>
 8005b7e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005b82:	f04f 0400 	mov.w	r4, #0
 8005b86:	e045      	b.n	8005c14 <UART_SetConfig+0xabc>
 8005b88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005b8c:	f04f 0400 	mov.w	r4, #0
 8005b90:	e040      	b.n	8005c14 <UART_SetConfig+0xabc>
 8005b92:	4b1b      	ldr	r3, [pc, #108]	; (8005c00 <UART_SetConfig+0xaa8>)
 8005b94:	f04f 0400 	mov.w	r4, #0
 8005b98:	e03c      	b.n	8005c14 <UART_SetConfig+0xabc>
 8005b9a:	4b1a      	ldr	r3, [pc, #104]	; (8005c04 <UART_SetConfig+0xaac>)
 8005b9c:	f04f 0400 	mov.w	r4, #0
 8005ba0:	e038      	b.n	8005c14 <UART_SetConfig+0xabc>
 8005ba2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005ba6:	f04f 0400 	mov.w	r4, #0
 8005baa:	e033      	b.n	8005c14 <UART_SetConfig+0xabc>
 8005bac:	4b16      	ldr	r3, [pc, #88]	; (8005c08 <UART_SetConfig+0xab0>)
 8005bae:	f04f 0400 	mov.w	r4, #0
 8005bb2:	e02f      	b.n	8005c14 <UART_SetConfig+0xabc>
 8005bb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005bb8:	f04f 0400 	mov.w	r4, #0
 8005bbc:	e02a      	b.n	8005c14 <UART_SetConfig+0xabc>
 8005bbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005bc2:	f04f 0400 	mov.w	r4, #0
 8005bc6:	e025      	b.n	8005c14 <UART_SetConfig+0xabc>
 8005bc8:	14585500 	.word	0x14585500
 8005bcc:	00000000 	.word	0x00000000
 8005bd0:	28b0aa00 	.word	0x28b0aa00
 8005bd4:	00000000 	.word	0x00000000
 8005bd8:	00f42400 	.word	0x00f42400
 8005bdc:	f4240000 	.word	0xf4240000
 8005be0:	01e84800 	.word	0x01e84800
 8005be4:	03d09000 	.word	0x03d09000
 8005be8:	07a12000 	.word	0x07a12000
 8005bec:	0f424000 	.word	0x0f424000
 8005bf0:	186a0000 	.word	0x186a0000
 8005bf4:	1e848000 	.word	0x1e848000
 8005bf8:	3d090000 	.word	0x3d090000
 8005bfc:	7a120000 	.word	0x7a120000
 8005c00:	000aaa00 	.word	0x000aaa00
 8005c04:	000ccc00 	.word	0x000ccc00
 8005c08:	00155500 	.word	0x00155500
 8005c0c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005c10:	f04f 0400 	mov.w	r4, #0
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6852      	ldr	r2, [r2, #4]
 8005c18:	0852      	lsrs	r2, r2, #1
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	f04f 0200 	mov.w	r2, #0
 8005c20:	eb13 0b01 	adds.w	fp, r3, r1
 8005c24:	eb44 0c02 	adc.w	ip, r4, r2
 8005c28:	4658      	mov	r0, fp
 8005c2a:	4661      	mov	r1, ip
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f04f 0400 	mov.w	r4, #0
 8005c34:	461a      	mov	r2, r3
 8005c36:	4623      	mov	r3, r4
 8005c38:	f7fa fae2 	bl	8000200 <__aeabi_uldivmod>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	460c      	mov	r4, r1
 8005c40:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8005c42:	e002      	b.n	8005c4a <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	74fb      	strb	r3, [r7, #19]
            break;
 8005c48:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c50:	d309      	bcc.n	8005c66 <UART_SetConfig+0xb0e>
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c58:	d205      	bcs.n	8005c66 <UART_SetConfig+0xb0e>
        {
          huart->Instance->BRR = usartdiv;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	60da      	str	r2, [r3, #12]
 8005c62:	f000 bc0f 	b.w	8006484 <UART_SetConfig+0x132c>
        }
        else
        {
          ret = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	74fb      	strb	r3, [r7, #19]
 8005c6a:	f000 bc0b 	b.w	8006484 <UART_SetConfig+0x132c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c76:	f040 81ff 	bne.w	8006078 <UART_SetConfig+0xf20>
  {
    switch (clocksource)
 8005c7a:	7efb      	ldrb	r3, [r7, #27]
 8005c7c:	2b08      	cmp	r3, #8
 8005c7e:	f200 81db 	bhi.w	8006038 <UART_SetConfig+0xee0>
 8005c82:	a201      	add	r2, pc, #4	; (adr r2, 8005c88 <UART_SetConfig+0xb30>)
 8005c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c88:	08005cad 	.word	0x08005cad
 8005c8c:	08005d63 	.word	0x08005d63
 8005c90:	08005e19 	.word	0x08005e19
 8005c94:	08006039 	.word	0x08006039
 8005c98:	08005ec1 	.word	0x08005ec1
 8005c9c:	08006039 	.word	0x08006039
 8005ca0:	08006039 	.word	0x08006039
 8005ca4:	08006039 	.word	0x08006039
 8005ca8:	08005f77 	.word	0x08005f77
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cac:	f7fd fd0e 	bl	80036cc <HAL_RCC_GetPCLK1Freq>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d044      	beq.n	8005d44 <UART_SetConfig+0xbec>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d03e      	beq.n	8005d40 <UART_SetConfig+0xbe8>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d038      	beq.n	8005d3c <UART_SetConfig+0xbe4>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d032      	beq.n	8005d38 <UART_SetConfig+0xbe0>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d02c      	beq.n	8005d34 <UART_SetConfig+0xbdc>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	2b05      	cmp	r3, #5
 8005ce0:	d026      	beq.n	8005d30 <UART_SetConfig+0xbd8>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	2b06      	cmp	r3, #6
 8005ce8:	d020      	beq.n	8005d2c <UART_SetConfig+0xbd4>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	2b07      	cmp	r3, #7
 8005cf0:	d01a      	beq.n	8005d28 <UART_SetConfig+0xbd0>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	2b08      	cmp	r3, #8
 8005cf8:	d014      	beq.n	8005d24 <UART_SetConfig+0xbcc>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfe:	2b09      	cmp	r3, #9
 8005d00:	d00e      	beq.n	8005d20 <UART_SetConfig+0xbc8>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d06:	2b0a      	cmp	r3, #10
 8005d08:	d008      	beq.n	8005d1c <UART_SetConfig+0xbc4>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	2b0b      	cmp	r3, #11
 8005d10:	d102      	bne.n	8005d18 <UART_SetConfig+0xbc0>
 8005d12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d16:	e016      	b.n	8005d46 <UART_SetConfig+0xbee>
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e014      	b.n	8005d46 <UART_SetConfig+0xbee>
 8005d1c:	2380      	movs	r3, #128	; 0x80
 8005d1e:	e012      	b.n	8005d46 <UART_SetConfig+0xbee>
 8005d20:	2340      	movs	r3, #64	; 0x40
 8005d22:	e010      	b.n	8005d46 <UART_SetConfig+0xbee>
 8005d24:	2320      	movs	r3, #32
 8005d26:	e00e      	b.n	8005d46 <UART_SetConfig+0xbee>
 8005d28:	2310      	movs	r3, #16
 8005d2a:	e00c      	b.n	8005d46 <UART_SetConfig+0xbee>
 8005d2c:	230c      	movs	r3, #12
 8005d2e:	e00a      	b.n	8005d46 <UART_SetConfig+0xbee>
 8005d30:	230a      	movs	r3, #10
 8005d32:	e008      	b.n	8005d46 <UART_SetConfig+0xbee>
 8005d34:	2308      	movs	r3, #8
 8005d36:	e006      	b.n	8005d46 <UART_SetConfig+0xbee>
 8005d38:	2306      	movs	r3, #6
 8005d3a:	e004      	b.n	8005d46 <UART_SetConfig+0xbee>
 8005d3c:	2304      	movs	r3, #4
 8005d3e:	e002      	b.n	8005d46 <UART_SetConfig+0xbee>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e000      	b.n	8005d46 <UART_SetConfig+0xbee>
 8005d44:	2301      	movs	r3, #1
 8005d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4a:	005a      	lsls	r2, r3, #1
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	085b      	lsrs	r3, r3, #1
 8005d52:	441a      	add	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005d60:	e16d      	b.n	800603e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d62:	f7fd fcc9 	bl	80036f8 <HAL_RCC_GetPCLK2Freq>
 8005d66:	4602      	mov	r2, r0
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d044      	beq.n	8005dfa <UART_SetConfig+0xca2>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d03e      	beq.n	8005df6 <UART_SetConfig+0xc9e>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d038      	beq.n	8005df2 <UART_SetConfig+0xc9a>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	2b03      	cmp	r3, #3
 8005d86:	d032      	beq.n	8005dee <UART_SetConfig+0xc96>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	2b04      	cmp	r3, #4
 8005d8e:	d02c      	beq.n	8005dea <UART_SetConfig+0xc92>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d94:	2b05      	cmp	r3, #5
 8005d96:	d026      	beq.n	8005de6 <UART_SetConfig+0xc8e>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	2b06      	cmp	r3, #6
 8005d9e:	d020      	beq.n	8005de2 <UART_SetConfig+0xc8a>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da4:	2b07      	cmp	r3, #7
 8005da6:	d01a      	beq.n	8005dde <UART_SetConfig+0xc86>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d014      	beq.n	8005dda <UART_SetConfig+0xc82>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	2b09      	cmp	r3, #9
 8005db6:	d00e      	beq.n	8005dd6 <UART_SetConfig+0xc7e>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	2b0a      	cmp	r3, #10
 8005dbe:	d008      	beq.n	8005dd2 <UART_SetConfig+0xc7a>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	2b0b      	cmp	r3, #11
 8005dc6:	d102      	bne.n	8005dce <UART_SetConfig+0xc76>
 8005dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005dcc:	e016      	b.n	8005dfc <UART_SetConfig+0xca4>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e014      	b.n	8005dfc <UART_SetConfig+0xca4>
 8005dd2:	2380      	movs	r3, #128	; 0x80
 8005dd4:	e012      	b.n	8005dfc <UART_SetConfig+0xca4>
 8005dd6:	2340      	movs	r3, #64	; 0x40
 8005dd8:	e010      	b.n	8005dfc <UART_SetConfig+0xca4>
 8005dda:	2320      	movs	r3, #32
 8005ddc:	e00e      	b.n	8005dfc <UART_SetConfig+0xca4>
 8005dde:	2310      	movs	r3, #16
 8005de0:	e00c      	b.n	8005dfc <UART_SetConfig+0xca4>
 8005de2:	230c      	movs	r3, #12
 8005de4:	e00a      	b.n	8005dfc <UART_SetConfig+0xca4>
 8005de6:	230a      	movs	r3, #10
 8005de8:	e008      	b.n	8005dfc <UART_SetConfig+0xca4>
 8005dea:	2308      	movs	r3, #8
 8005dec:	e006      	b.n	8005dfc <UART_SetConfig+0xca4>
 8005dee:	2306      	movs	r3, #6
 8005df0:	e004      	b.n	8005dfc <UART_SetConfig+0xca4>
 8005df2:	2304      	movs	r3, #4
 8005df4:	e002      	b.n	8005dfc <UART_SetConfig+0xca4>
 8005df6:	2302      	movs	r3, #2
 8005df8:	e000      	b.n	8005dfc <UART_SetConfig+0xca4>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e00:	005a      	lsls	r2, r3, #1
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	085b      	lsrs	r3, r3, #1
 8005e08:	441a      	add	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e16:	e112      	b.n	800603e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d043      	beq.n	8005ea8 <UART_SetConfig+0xd50>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d03d      	beq.n	8005ea4 <UART_SetConfig+0xd4c>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d037      	beq.n	8005ea0 <UART_SetConfig+0xd48>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d031      	beq.n	8005e9c <UART_SetConfig+0xd44>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d02b      	beq.n	8005e98 <UART_SetConfig+0xd40>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	2b05      	cmp	r3, #5
 8005e46:	d025      	beq.n	8005e94 <UART_SetConfig+0xd3c>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	2b06      	cmp	r3, #6
 8005e4e:	d01f      	beq.n	8005e90 <UART_SetConfig+0xd38>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	2b07      	cmp	r3, #7
 8005e56:	d019      	beq.n	8005e8c <UART_SetConfig+0xd34>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d013      	beq.n	8005e88 <UART_SetConfig+0xd30>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	2b09      	cmp	r3, #9
 8005e66:	d00d      	beq.n	8005e84 <UART_SetConfig+0xd2c>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	2b0a      	cmp	r3, #10
 8005e6e:	d007      	beq.n	8005e80 <UART_SetConfig+0xd28>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	2b0b      	cmp	r3, #11
 8005e76:	d101      	bne.n	8005e7c <UART_SetConfig+0xd24>
 8005e78:	4b8c      	ldr	r3, [pc, #560]	; (80060ac <UART_SetConfig+0xf54>)
 8005e7a:	e016      	b.n	8005eaa <UART_SetConfig+0xd52>
 8005e7c:	4b8c      	ldr	r3, [pc, #560]	; (80060b0 <UART_SetConfig+0xf58>)
 8005e7e:	e014      	b.n	8005eaa <UART_SetConfig+0xd52>
 8005e80:	4b8c      	ldr	r3, [pc, #560]	; (80060b4 <UART_SetConfig+0xf5c>)
 8005e82:	e012      	b.n	8005eaa <UART_SetConfig+0xd52>
 8005e84:	4b8c      	ldr	r3, [pc, #560]	; (80060b8 <UART_SetConfig+0xf60>)
 8005e86:	e010      	b.n	8005eaa <UART_SetConfig+0xd52>
 8005e88:	4b8c      	ldr	r3, [pc, #560]	; (80060bc <UART_SetConfig+0xf64>)
 8005e8a:	e00e      	b.n	8005eaa <UART_SetConfig+0xd52>
 8005e8c:	4b8c      	ldr	r3, [pc, #560]	; (80060c0 <UART_SetConfig+0xf68>)
 8005e8e:	e00c      	b.n	8005eaa <UART_SetConfig+0xd52>
 8005e90:	4b8c      	ldr	r3, [pc, #560]	; (80060c4 <UART_SetConfig+0xf6c>)
 8005e92:	e00a      	b.n	8005eaa <UART_SetConfig+0xd52>
 8005e94:	4b8c      	ldr	r3, [pc, #560]	; (80060c8 <UART_SetConfig+0xf70>)
 8005e96:	e008      	b.n	8005eaa <UART_SetConfig+0xd52>
 8005e98:	4b8c      	ldr	r3, [pc, #560]	; (80060cc <UART_SetConfig+0xf74>)
 8005e9a:	e006      	b.n	8005eaa <UART_SetConfig+0xd52>
 8005e9c:	4b8c      	ldr	r3, [pc, #560]	; (80060d0 <UART_SetConfig+0xf78>)
 8005e9e:	e004      	b.n	8005eaa <UART_SetConfig+0xd52>
 8005ea0:	4b8c      	ldr	r3, [pc, #560]	; (80060d4 <UART_SetConfig+0xf7c>)
 8005ea2:	e002      	b.n	8005eaa <UART_SetConfig+0xd52>
 8005ea4:	4b8c      	ldr	r3, [pc, #560]	; (80060d8 <UART_SetConfig+0xf80>)
 8005ea6:	e000      	b.n	8005eaa <UART_SetConfig+0xd52>
 8005ea8:	4b81      	ldr	r3, [pc, #516]	; (80060b0 <UART_SetConfig+0xf58>)
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	6852      	ldr	r2, [r2, #4]
 8005eae:	0852      	lsrs	r2, r2, #1
 8005eb0:	441a      	add	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ebe:	e0be      	b.n	800603e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ec0:	f7fd fb6e 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d044      	beq.n	8005f58 <UART_SetConfig+0xe00>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d03e      	beq.n	8005f54 <UART_SetConfig+0xdfc>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d038      	beq.n	8005f50 <UART_SetConfig+0xdf8>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	2b03      	cmp	r3, #3
 8005ee4:	d032      	beq.n	8005f4c <UART_SetConfig+0xdf4>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d02c      	beq.n	8005f48 <UART_SetConfig+0xdf0>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	2b05      	cmp	r3, #5
 8005ef4:	d026      	beq.n	8005f44 <UART_SetConfig+0xdec>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	2b06      	cmp	r3, #6
 8005efc:	d020      	beq.n	8005f40 <UART_SetConfig+0xde8>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	2b07      	cmp	r3, #7
 8005f04:	d01a      	beq.n	8005f3c <UART_SetConfig+0xde4>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	2b08      	cmp	r3, #8
 8005f0c:	d014      	beq.n	8005f38 <UART_SetConfig+0xde0>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	2b09      	cmp	r3, #9
 8005f14:	d00e      	beq.n	8005f34 <UART_SetConfig+0xddc>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	2b0a      	cmp	r3, #10
 8005f1c:	d008      	beq.n	8005f30 <UART_SetConfig+0xdd8>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	2b0b      	cmp	r3, #11
 8005f24:	d102      	bne.n	8005f2c <UART_SetConfig+0xdd4>
 8005f26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f2a:	e016      	b.n	8005f5a <UART_SetConfig+0xe02>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e014      	b.n	8005f5a <UART_SetConfig+0xe02>
 8005f30:	2380      	movs	r3, #128	; 0x80
 8005f32:	e012      	b.n	8005f5a <UART_SetConfig+0xe02>
 8005f34:	2340      	movs	r3, #64	; 0x40
 8005f36:	e010      	b.n	8005f5a <UART_SetConfig+0xe02>
 8005f38:	2320      	movs	r3, #32
 8005f3a:	e00e      	b.n	8005f5a <UART_SetConfig+0xe02>
 8005f3c:	2310      	movs	r3, #16
 8005f3e:	e00c      	b.n	8005f5a <UART_SetConfig+0xe02>
 8005f40:	230c      	movs	r3, #12
 8005f42:	e00a      	b.n	8005f5a <UART_SetConfig+0xe02>
 8005f44:	230a      	movs	r3, #10
 8005f46:	e008      	b.n	8005f5a <UART_SetConfig+0xe02>
 8005f48:	2308      	movs	r3, #8
 8005f4a:	e006      	b.n	8005f5a <UART_SetConfig+0xe02>
 8005f4c:	2306      	movs	r3, #6
 8005f4e:	e004      	b.n	8005f5a <UART_SetConfig+0xe02>
 8005f50:	2304      	movs	r3, #4
 8005f52:	e002      	b.n	8005f5a <UART_SetConfig+0xe02>
 8005f54:	2302      	movs	r3, #2
 8005f56:	e000      	b.n	8005f5a <UART_SetConfig+0xe02>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5e:	005a      	lsls	r2, r3, #1
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	085b      	lsrs	r3, r3, #1
 8005f66:	441a      	add	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f74:	e063      	b.n	800603e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d04f      	beq.n	800601e <UART_SetConfig+0xec6>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d048      	beq.n	8006018 <UART_SetConfig+0xec0>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d041      	beq.n	8006012 <UART_SetConfig+0xeba>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	2b03      	cmp	r3, #3
 8005f94:	d03a      	beq.n	800600c <UART_SetConfig+0xeb4>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d033      	beq.n	8006006 <UART_SetConfig+0xeae>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa2:	2b05      	cmp	r3, #5
 8005fa4:	d02c      	beq.n	8006000 <UART_SetConfig+0xea8>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	2b06      	cmp	r3, #6
 8005fac:	d025      	beq.n	8005ffa <UART_SetConfig+0xea2>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	2b07      	cmp	r3, #7
 8005fb4:	d01e      	beq.n	8005ff4 <UART_SetConfig+0xe9c>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	2b08      	cmp	r3, #8
 8005fbc:	d017      	beq.n	8005fee <UART_SetConfig+0xe96>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	2b09      	cmp	r3, #9
 8005fc4:	d010      	beq.n	8005fe8 <UART_SetConfig+0xe90>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	2b0a      	cmp	r3, #10
 8005fcc:	d009      	beq.n	8005fe2 <UART_SetConfig+0xe8a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd2:	2b0b      	cmp	r3, #11
 8005fd4:	d102      	bne.n	8005fdc <UART_SetConfig+0xe84>
 8005fd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fda:	e022      	b.n	8006022 <UART_SetConfig+0xeca>
 8005fdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fe0:	e01f      	b.n	8006022 <UART_SetConfig+0xeca>
 8005fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fe6:	e01c      	b.n	8006022 <UART_SetConfig+0xeca>
 8005fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fec:	e019      	b.n	8006022 <UART_SetConfig+0xeca>
 8005fee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ff2:	e016      	b.n	8006022 <UART_SetConfig+0xeca>
 8005ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ff8:	e013      	b.n	8006022 <UART_SetConfig+0xeca>
 8005ffa:	f241 5354 	movw	r3, #5460	; 0x1554
 8005ffe:	e010      	b.n	8006022 <UART_SetConfig+0xeca>
 8006000:	f641 1398 	movw	r3, #6552	; 0x1998
 8006004:	e00d      	b.n	8006022 <UART_SetConfig+0xeca>
 8006006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800600a:	e00a      	b.n	8006022 <UART_SetConfig+0xeca>
 800600c:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8006010:	e007      	b.n	8006022 <UART_SetConfig+0xeca>
 8006012:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006016:	e004      	b.n	8006022 <UART_SetConfig+0xeca>
 8006018:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800601c:	e001      	b.n	8006022 <UART_SetConfig+0xeca>
 800601e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6852      	ldr	r2, [r2, #4]
 8006026:	0852      	lsrs	r2, r2, #1
 8006028:	441a      	add	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006032:	b29b      	uxth	r3, r3
 8006034:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8006036:	e002      	b.n	800603e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	74fb      	strb	r3, [r7, #19]
        break;
 800603c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2b0f      	cmp	r3, #15
 8006042:	d916      	bls.n	8006072 <UART_SetConfig+0xf1a>
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800604a:	d212      	bcs.n	8006072 <UART_SetConfig+0xf1a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	b29b      	uxth	r3, r3
 8006050:	f023 030f 	bic.w	r3, r3, #15
 8006054:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	085b      	lsrs	r3, r3, #1
 800605a:	b29b      	uxth	r3, r3
 800605c:	f003 0307 	and.w	r3, r3, #7
 8006060:	b29a      	uxth	r2, r3
 8006062:	897b      	ldrh	r3, [r7, #10]
 8006064:	4313      	orrs	r3, r2
 8006066:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	897a      	ldrh	r2, [r7, #10]
 800606e:	60da      	str	r2, [r3, #12]
 8006070:	e208      	b.n	8006484 <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	74fb      	strb	r3, [r7, #19]
 8006076:	e205      	b.n	8006484 <UART_SetConfig+0x132c>
    }
  }
  else
  {
    switch (clocksource)
 8006078:	7efb      	ldrb	r3, [r7, #27]
 800607a:	2b08      	cmp	r3, #8
 800607c:	f200 81f1 	bhi.w	8006462 <UART_SetConfig+0x130a>
 8006080:	a201      	add	r2, pc, #4	; (adr r2, 8006088 <UART_SetConfig+0xf30>)
 8006082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006086:	bf00      	nop
 8006088:	080060dd 	.word	0x080060dd
 800608c:	08006191 	.word	0x08006191
 8006090:	08006245 	.word	0x08006245
 8006094:	08006463 	.word	0x08006463
 8006098:	080062ef 	.word	0x080062ef
 800609c:	08006463 	.word	0x08006463
 80060a0:	08006463 	.word	0x08006463
 80060a4:	08006463 	.word	0x08006463
 80060a8:	080063a3 	.word	0x080063a3
 80060ac:	0001e848 	.word	0x0001e848
 80060b0:	01e84800 	.word	0x01e84800
 80060b4:	0003d090 	.word	0x0003d090
 80060b8:	0007a120 	.word	0x0007a120
 80060bc:	000f4240 	.word	0x000f4240
 80060c0:	001e8480 	.word	0x001e8480
 80060c4:	0028b0aa 	.word	0x0028b0aa
 80060c8:	0030d400 	.word	0x0030d400
 80060cc:	003d0900 	.word	0x003d0900
 80060d0:	00516154 	.word	0x00516154
 80060d4:	007a1200 	.word	0x007a1200
 80060d8:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060dc:	f7fd faf6 	bl	80036cc <HAL_RCC_GetPCLK1Freq>
 80060e0:	4602      	mov	r2, r0
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d044      	beq.n	8006174 <UART_SetConfig+0x101c>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d03e      	beq.n	8006170 <UART_SetConfig+0x1018>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d038      	beq.n	800616c <UART_SetConfig+0x1014>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d032      	beq.n	8006168 <UART_SetConfig+0x1010>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	2b04      	cmp	r3, #4
 8006108:	d02c      	beq.n	8006164 <UART_SetConfig+0x100c>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	2b05      	cmp	r3, #5
 8006110:	d026      	beq.n	8006160 <UART_SetConfig+0x1008>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	2b06      	cmp	r3, #6
 8006118:	d020      	beq.n	800615c <UART_SetConfig+0x1004>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	2b07      	cmp	r3, #7
 8006120:	d01a      	beq.n	8006158 <UART_SetConfig+0x1000>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	2b08      	cmp	r3, #8
 8006128:	d014      	beq.n	8006154 <UART_SetConfig+0xffc>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612e:	2b09      	cmp	r3, #9
 8006130:	d00e      	beq.n	8006150 <UART_SetConfig+0xff8>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	2b0a      	cmp	r3, #10
 8006138:	d008      	beq.n	800614c <UART_SetConfig+0xff4>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	2b0b      	cmp	r3, #11
 8006140:	d102      	bne.n	8006148 <UART_SetConfig+0xff0>
 8006142:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006146:	e016      	b.n	8006176 <UART_SetConfig+0x101e>
 8006148:	2301      	movs	r3, #1
 800614a:	e014      	b.n	8006176 <UART_SetConfig+0x101e>
 800614c:	2380      	movs	r3, #128	; 0x80
 800614e:	e012      	b.n	8006176 <UART_SetConfig+0x101e>
 8006150:	2340      	movs	r3, #64	; 0x40
 8006152:	e010      	b.n	8006176 <UART_SetConfig+0x101e>
 8006154:	2320      	movs	r3, #32
 8006156:	e00e      	b.n	8006176 <UART_SetConfig+0x101e>
 8006158:	2310      	movs	r3, #16
 800615a:	e00c      	b.n	8006176 <UART_SetConfig+0x101e>
 800615c:	230c      	movs	r3, #12
 800615e:	e00a      	b.n	8006176 <UART_SetConfig+0x101e>
 8006160:	230a      	movs	r3, #10
 8006162:	e008      	b.n	8006176 <UART_SetConfig+0x101e>
 8006164:	2308      	movs	r3, #8
 8006166:	e006      	b.n	8006176 <UART_SetConfig+0x101e>
 8006168:	2306      	movs	r3, #6
 800616a:	e004      	b.n	8006176 <UART_SetConfig+0x101e>
 800616c:	2304      	movs	r3, #4
 800616e:	e002      	b.n	8006176 <UART_SetConfig+0x101e>
 8006170:	2302      	movs	r3, #2
 8006172:	e000      	b.n	8006176 <UART_SetConfig+0x101e>
 8006174:	2301      	movs	r3, #1
 8006176:	fbb2 f2f3 	udiv	r2, r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	085b      	lsrs	r3, r3, #1
 8006180:	441a      	add	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	fbb2 f3f3 	udiv	r3, r2, r3
 800618a:	b29b      	uxth	r3, r3
 800618c:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800618e:	e16b      	b.n	8006468 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006190:	f7fd fab2 	bl	80036f8 <HAL_RCC_GetPCLK2Freq>
 8006194:	4602      	mov	r2, r0
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619a:	2b00      	cmp	r3, #0
 800619c:	d044      	beq.n	8006228 <UART_SetConfig+0x10d0>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d03e      	beq.n	8006224 <UART_SetConfig+0x10cc>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d038      	beq.n	8006220 <UART_SetConfig+0x10c8>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	2b03      	cmp	r3, #3
 80061b4:	d032      	beq.n	800621c <UART_SetConfig+0x10c4>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	2b04      	cmp	r3, #4
 80061bc:	d02c      	beq.n	8006218 <UART_SetConfig+0x10c0>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	2b05      	cmp	r3, #5
 80061c4:	d026      	beq.n	8006214 <UART_SetConfig+0x10bc>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	2b06      	cmp	r3, #6
 80061cc:	d020      	beq.n	8006210 <UART_SetConfig+0x10b8>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	2b07      	cmp	r3, #7
 80061d4:	d01a      	beq.n	800620c <UART_SetConfig+0x10b4>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061da:	2b08      	cmp	r3, #8
 80061dc:	d014      	beq.n	8006208 <UART_SetConfig+0x10b0>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	2b09      	cmp	r3, #9
 80061e4:	d00e      	beq.n	8006204 <UART_SetConfig+0x10ac>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	2b0a      	cmp	r3, #10
 80061ec:	d008      	beq.n	8006200 <UART_SetConfig+0x10a8>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	2b0b      	cmp	r3, #11
 80061f4:	d102      	bne.n	80061fc <UART_SetConfig+0x10a4>
 80061f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061fa:	e016      	b.n	800622a <UART_SetConfig+0x10d2>
 80061fc:	2301      	movs	r3, #1
 80061fe:	e014      	b.n	800622a <UART_SetConfig+0x10d2>
 8006200:	2380      	movs	r3, #128	; 0x80
 8006202:	e012      	b.n	800622a <UART_SetConfig+0x10d2>
 8006204:	2340      	movs	r3, #64	; 0x40
 8006206:	e010      	b.n	800622a <UART_SetConfig+0x10d2>
 8006208:	2320      	movs	r3, #32
 800620a:	e00e      	b.n	800622a <UART_SetConfig+0x10d2>
 800620c:	2310      	movs	r3, #16
 800620e:	e00c      	b.n	800622a <UART_SetConfig+0x10d2>
 8006210:	230c      	movs	r3, #12
 8006212:	e00a      	b.n	800622a <UART_SetConfig+0x10d2>
 8006214:	230a      	movs	r3, #10
 8006216:	e008      	b.n	800622a <UART_SetConfig+0x10d2>
 8006218:	2308      	movs	r3, #8
 800621a:	e006      	b.n	800622a <UART_SetConfig+0x10d2>
 800621c:	2306      	movs	r3, #6
 800621e:	e004      	b.n	800622a <UART_SetConfig+0x10d2>
 8006220:	2304      	movs	r3, #4
 8006222:	e002      	b.n	800622a <UART_SetConfig+0x10d2>
 8006224:	2302      	movs	r3, #2
 8006226:	e000      	b.n	800622a <UART_SetConfig+0x10d2>
 8006228:	2301      	movs	r3, #1
 800622a:	fbb2 f2f3 	udiv	r2, r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	085b      	lsrs	r3, r3, #1
 8006234:	441a      	add	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	fbb2 f3f3 	udiv	r3, r2, r3
 800623e:	b29b      	uxth	r3, r3
 8006240:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8006242:	e111      	b.n	8006468 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	2b00      	cmp	r3, #0
 800624a:	d044      	beq.n	80062d6 <UART_SetConfig+0x117e>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	2b01      	cmp	r3, #1
 8006252:	d03e      	beq.n	80062d2 <UART_SetConfig+0x117a>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	2b02      	cmp	r3, #2
 800625a:	d038      	beq.n	80062ce <UART_SetConfig+0x1176>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	2b03      	cmp	r3, #3
 8006262:	d032      	beq.n	80062ca <UART_SetConfig+0x1172>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006268:	2b04      	cmp	r3, #4
 800626a:	d02c      	beq.n	80062c6 <UART_SetConfig+0x116e>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006270:	2b05      	cmp	r3, #5
 8006272:	d026      	beq.n	80062c2 <UART_SetConfig+0x116a>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006278:	2b06      	cmp	r3, #6
 800627a:	d020      	beq.n	80062be <UART_SetConfig+0x1166>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	2b07      	cmp	r3, #7
 8006282:	d01a      	beq.n	80062ba <UART_SetConfig+0x1162>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006288:	2b08      	cmp	r3, #8
 800628a:	d014      	beq.n	80062b6 <UART_SetConfig+0x115e>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	2b09      	cmp	r3, #9
 8006292:	d00e      	beq.n	80062b2 <UART_SetConfig+0x115a>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	2b0a      	cmp	r3, #10
 800629a:	d008      	beq.n	80062ae <UART_SetConfig+0x1156>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a0:	2b0b      	cmp	r3, #11
 80062a2:	d102      	bne.n	80062aa <UART_SetConfig+0x1152>
 80062a4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80062a8:	e016      	b.n	80062d8 <UART_SetConfig+0x1180>
 80062aa:	4b80      	ldr	r3, [pc, #512]	; (80064ac <UART_SetConfig+0x1354>)
 80062ac:	e014      	b.n	80062d8 <UART_SetConfig+0x1180>
 80062ae:	4b80      	ldr	r3, [pc, #512]	; (80064b0 <UART_SetConfig+0x1358>)
 80062b0:	e012      	b.n	80062d8 <UART_SetConfig+0x1180>
 80062b2:	4b80      	ldr	r3, [pc, #512]	; (80064b4 <UART_SetConfig+0x135c>)
 80062b4:	e010      	b.n	80062d8 <UART_SetConfig+0x1180>
 80062b6:	4b80      	ldr	r3, [pc, #512]	; (80064b8 <UART_SetConfig+0x1360>)
 80062b8:	e00e      	b.n	80062d8 <UART_SetConfig+0x1180>
 80062ba:	4b80      	ldr	r3, [pc, #512]	; (80064bc <UART_SetConfig+0x1364>)
 80062bc:	e00c      	b.n	80062d8 <UART_SetConfig+0x1180>
 80062be:	4b80      	ldr	r3, [pc, #512]	; (80064c0 <UART_SetConfig+0x1368>)
 80062c0:	e00a      	b.n	80062d8 <UART_SetConfig+0x1180>
 80062c2:	4b80      	ldr	r3, [pc, #512]	; (80064c4 <UART_SetConfig+0x136c>)
 80062c4:	e008      	b.n	80062d8 <UART_SetConfig+0x1180>
 80062c6:	4b80      	ldr	r3, [pc, #512]	; (80064c8 <UART_SetConfig+0x1370>)
 80062c8:	e006      	b.n	80062d8 <UART_SetConfig+0x1180>
 80062ca:	4b80      	ldr	r3, [pc, #512]	; (80064cc <UART_SetConfig+0x1374>)
 80062cc:	e004      	b.n	80062d8 <UART_SetConfig+0x1180>
 80062ce:	4b80      	ldr	r3, [pc, #512]	; (80064d0 <UART_SetConfig+0x1378>)
 80062d0:	e002      	b.n	80062d8 <UART_SetConfig+0x1180>
 80062d2:	4b80      	ldr	r3, [pc, #512]	; (80064d4 <UART_SetConfig+0x137c>)
 80062d4:	e000      	b.n	80062d8 <UART_SetConfig+0x1180>
 80062d6:	4b75      	ldr	r3, [pc, #468]	; (80064ac <UART_SetConfig+0x1354>)
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	6852      	ldr	r2, [r2, #4]
 80062dc:	0852      	lsrs	r2, r2, #1
 80062de:	441a      	add	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80062ec:	e0bc      	b.n	8006468 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062ee:	f7fd f957 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 80062f2:	4602      	mov	r2, r0
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d044      	beq.n	8006386 <UART_SetConfig+0x122e>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	2b01      	cmp	r3, #1
 8006302:	d03e      	beq.n	8006382 <UART_SetConfig+0x122a>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	2b02      	cmp	r3, #2
 800630a:	d038      	beq.n	800637e <UART_SetConfig+0x1226>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	2b03      	cmp	r3, #3
 8006312:	d032      	beq.n	800637a <UART_SetConfig+0x1222>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006318:	2b04      	cmp	r3, #4
 800631a:	d02c      	beq.n	8006376 <UART_SetConfig+0x121e>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	2b05      	cmp	r3, #5
 8006322:	d026      	beq.n	8006372 <UART_SetConfig+0x121a>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	2b06      	cmp	r3, #6
 800632a:	d020      	beq.n	800636e <UART_SetConfig+0x1216>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	2b07      	cmp	r3, #7
 8006332:	d01a      	beq.n	800636a <UART_SetConfig+0x1212>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006338:	2b08      	cmp	r3, #8
 800633a:	d014      	beq.n	8006366 <UART_SetConfig+0x120e>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	2b09      	cmp	r3, #9
 8006342:	d00e      	beq.n	8006362 <UART_SetConfig+0x120a>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	2b0a      	cmp	r3, #10
 800634a:	d008      	beq.n	800635e <UART_SetConfig+0x1206>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006350:	2b0b      	cmp	r3, #11
 8006352:	d102      	bne.n	800635a <UART_SetConfig+0x1202>
 8006354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006358:	e016      	b.n	8006388 <UART_SetConfig+0x1230>
 800635a:	2301      	movs	r3, #1
 800635c:	e014      	b.n	8006388 <UART_SetConfig+0x1230>
 800635e:	2380      	movs	r3, #128	; 0x80
 8006360:	e012      	b.n	8006388 <UART_SetConfig+0x1230>
 8006362:	2340      	movs	r3, #64	; 0x40
 8006364:	e010      	b.n	8006388 <UART_SetConfig+0x1230>
 8006366:	2320      	movs	r3, #32
 8006368:	e00e      	b.n	8006388 <UART_SetConfig+0x1230>
 800636a:	2310      	movs	r3, #16
 800636c:	e00c      	b.n	8006388 <UART_SetConfig+0x1230>
 800636e:	230c      	movs	r3, #12
 8006370:	e00a      	b.n	8006388 <UART_SetConfig+0x1230>
 8006372:	230a      	movs	r3, #10
 8006374:	e008      	b.n	8006388 <UART_SetConfig+0x1230>
 8006376:	2308      	movs	r3, #8
 8006378:	e006      	b.n	8006388 <UART_SetConfig+0x1230>
 800637a:	2306      	movs	r3, #6
 800637c:	e004      	b.n	8006388 <UART_SetConfig+0x1230>
 800637e:	2304      	movs	r3, #4
 8006380:	e002      	b.n	8006388 <UART_SetConfig+0x1230>
 8006382:	2302      	movs	r3, #2
 8006384:	e000      	b.n	8006388 <UART_SetConfig+0x1230>
 8006386:	2301      	movs	r3, #1
 8006388:	fbb2 f2f3 	udiv	r2, r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	085b      	lsrs	r3, r3, #1
 8006392:	441a      	add	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	fbb2 f3f3 	udiv	r3, r2, r3
 800639c:	b29b      	uxth	r3, r3
 800639e:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80063a0:	e062      	b.n	8006468 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d04e      	beq.n	8006448 <UART_SetConfig+0x12f0>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d047      	beq.n	8006442 <UART_SetConfig+0x12ea>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d040      	beq.n	800643c <UART_SetConfig+0x12e4>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	2b03      	cmp	r3, #3
 80063c0:	d039      	beq.n	8006436 <UART_SetConfig+0x12de>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d032      	beq.n	8006430 <UART_SetConfig+0x12d8>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ce:	2b05      	cmp	r3, #5
 80063d0:	d02b      	beq.n	800642a <UART_SetConfig+0x12d2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	2b06      	cmp	r3, #6
 80063d8:	d024      	beq.n	8006424 <UART_SetConfig+0x12cc>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	2b07      	cmp	r3, #7
 80063e0:	d01d      	beq.n	800641e <UART_SetConfig+0x12c6>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d016      	beq.n	8006418 <UART_SetConfig+0x12c0>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	2b09      	cmp	r3, #9
 80063f0:	d00f      	beq.n	8006412 <UART_SetConfig+0x12ba>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f6:	2b0a      	cmp	r3, #10
 80063f8:	d008      	beq.n	800640c <UART_SetConfig+0x12b4>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fe:	2b0b      	cmp	r3, #11
 8006400:	d101      	bne.n	8006406 <UART_SetConfig+0x12ae>
 8006402:	2380      	movs	r3, #128	; 0x80
 8006404:	e022      	b.n	800644c <UART_SetConfig+0x12f4>
 8006406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800640a:	e01f      	b.n	800644c <UART_SetConfig+0x12f4>
 800640c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006410:	e01c      	b.n	800644c <UART_SetConfig+0x12f4>
 8006412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006416:	e019      	b.n	800644c <UART_SetConfig+0x12f4>
 8006418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800641c:	e016      	b.n	800644c <UART_SetConfig+0x12f4>
 800641e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006422:	e013      	b.n	800644c <UART_SetConfig+0x12f4>
 8006424:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006428:	e010      	b.n	800644c <UART_SetConfig+0x12f4>
 800642a:	f640 43cc 	movw	r3, #3276	; 0xccc
 800642e:	e00d      	b.n	800644c <UART_SetConfig+0x12f4>
 8006430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006434:	e00a      	b.n	800644c <UART_SetConfig+0x12f4>
 8006436:	f241 5355 	movw	r3, #5461	; 0x1555
 800643a:	e007      	b.n	800644c <UART_SetConfig+0x12f4>
 800643c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006440:	e004      	b.n	800644c <UART_SetConfig+0x12f4>
 8006442:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006446:	e001      	b.n	800644c <UART_SetConfig+0x12f4>
 8006448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6852      	ldr	r2, [r2, #4]
 8006450:	0852      	lsrs	r2, r2, #1
 8006452:	441a      	add	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	fbb2 f3f3 	udiv	r3, r2, r3
 800645c:	b29b      	uxth	r3, r3
 800645e:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8006460:	e002      	b.n	8006468 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	74fb      	strb	r3, [r7, #19]
        break;
 8006466:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	2b0f      	cmp	r3, #15
 800646c:	d908      	bls.n	8006480 <UART_SetConfig+0x1328>
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006474:	d204      	bcs.n	8006480 <UART_SetConfig+0x1328>
    {
      huart->Instance->BRR = usartdiv;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	60da      	str	r2, [r3, #12]
 800647e:	e001      	b.n	8006484 <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	74fb      	strb	r3, [r7, #19]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80064a0:	7cfb      	ldrb	r3, [r7, #19]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3720      	adds	r7, #32
 80064a6:	46bd      	mov	sp, r7
 80064a8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80064ac:	00f42400 	.word	0x00f42400
 80064b0:	0001e848 	.word	0x0001e848
 80064b4:	0003d090 	.word	0x0003d090
 80064b8:	0007a120 	.word	0x0007a120
 80064bc:	000f4240 	.word	0x000f4240
 80064c0:	00145855 	.word	0x00145855
 80064c4:	00186a00 	.word	0x00186a00
 80064c8:	001e8480 	.word	0x001e8480
 80064cc:	0028b0aa 	.word	0x0028b0aa
 80064d0:	003d0900 	.word	0x003d0900
 80064d4:	007a1200 	.word	0x007a1200

080064d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00a      	beq.n	8006502 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00a      	beq.n	8006546 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654a:	f003 0308 	and.w	r3, r3, #8
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656c:	f003 0310 	and.w	r3, r3, #16
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00a      	beq.n	800658a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d01a      	beq.n	80065ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065d6:	d10a      	bne.n	80065ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00a      	beq.n	8006610 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	430a      	orrs	r2, r1
 800660e:	605a      	str	r2, [r3, #4]
  }
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af02      	add	r7, sp, #8
 8006622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800662c:	f7fb fca0 	bl	8001f70 <HAL_GetTick>
 8006630:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	2b08      	cmp	r3, #8
 800663e:	d10e      	bne.n	800665e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006640:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f82c 	bl	80066ac <UART_WaitOnFlagUntilTimeout>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e022      	b.n	80066a4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b04      	cmp	r3, #4
 800666a:	d10e      	bne.n	800668a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800666c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f816 	bl	80066ac <UART_WaitOnFlagUntilTimeout>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e00c      	b.n	80066a4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2220      	movs	r2, #32
 800668e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2220      	movs	r2, #32
 8006696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	603b      	str	r3, [r7, #0]
 80066b8:	4613      	mov	r3, r2
 80066ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066bc:	e02c      	b.n	8006718 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c4:	d028      	beq.n	8006718 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066c6:	f7fb fc53 	bl	8001f70 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d302      	bcc.n	80066dc <UART_WaitOnFlagUntilTimeout+0x30>
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d11d      	bne.n	8006718 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066ea:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689a      	ldr	r2, [r3, #8]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0201 	bic.w	r2, r2, #1
 80066fa:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2220      	movs	r2, #32
 8006700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2220      	movs	r2, #32
 8006708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e00f      	b.n	8006738 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	69da      	ldr	r2, [r3, #28]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	4013      	ands	r3, r2
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	429a      	cmp	r2, r3
 8006726:	bf0c      	ite	eq
 8006728:	2301      	moveq	r3, #1
 800672a:	2300      	movne	r3, #0
 800672c:	b2db      	uxtb	r3, r3
 800672e:	461a      	mov	r2, r3
 8006730:	79fb      	ldrb	r3, [r7, #7]
 8006732:	429a      	cmp	r2, r3
 8006734:	d0c3      	beq.n	80066be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <__libc_init_array>:
 8006740:	b570      	push	{r4, r5, r6, lr}
 8006742:	4e0d      	ldr	r6, [pc, #52]	; (8006778 <__libc_init_array+0x38>)
 8006744:	4c0d      	ldr	r4, [pc, #52]	; (800677c <__libc_init_array+0x3c>)
 8006746:	1ba4      	subs	r4, r4, r6
 8006748:	10a4      	asrs	r4, r4, #2
 800674a:	2500      	movs	r5, #0
 800674c:	42a5      	cmp	r5, r4
 800674e:	d109      	bne.n	8006764 <__libc_init_array+0x24>
 8006750:	4e0b      	ldr	r6, [pc, #44]	; (8006780 <__libc_init_array+0x40>)
 8006752:	4c0c      	ldr	r4, [pc, #48]	; (8006784 <__libc_init_array+0x44>)
 8006754:	f000 f820 	bl	8006798 <_init>
 8006758:	1ba4      	subs	r4, r4, r6
 800675a:	10a4      	asrs	r4, r4, #2
 800675c:	2500      	movs	r5, #0
 800675e:	42a5      	cmp	r5, r4
 8006760:	d105      	bne.n	800676e <__libc_init_array+0x2e>
 8006762:	bd70      	pop	{r4, r5, r6, pc}
 8006764:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006768:	4798      	blx	r3
 800676a:	3501      	adds	r5, #1
 800676c:	e7ee      	b.n	800674c <__libc_init_array+0xc>
 800676e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006772:	4798      	blx	r3
 8006774:	3501      	adds	r5, #1
 8006776:	e7f2      	b.n	800675e <__libc_init_array+0x1e>
 8006778:	08081050 	.word	0x08081050
 800677c:	08081050 	.word	0x08081050
 8006780:	08081050 	.word	0x08081050
 8006784:	08081054 	.word	0x08081054

08006788 <memset>:
 8006788:	4402      	add	r2, r0
 800678a:	4603      	mov	r3, r0
 800678c:	4293      	cmp	r3, r2
 800678e:	d100      	bne.n	8006792 <memset+0xa>
 8006790:	4770      	bx	lr
 8006792:	f803 1b01 	strb.w	r1, [r3], #1
 8006796:	e7f9      	b.n	800678c <memset+0x4>

08006798 <_init>:
 8006798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679a:	bf00      	nop
 800679c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679e:	bc08      	pop	{r3}
 80067a0:	469e      	mov	lr, r3
 80067a2:	4770      	bx	lr

080067a4 <_fini>:
 80067a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a6:	bf00      	nop
 80067a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067aa:	bc08      	pop	{r3}
 80067ac:	469e      	mov	lr, r3
 80067ae:	4770      	bx	lr
