
EPD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cf4  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002eb0  08002eb0  00012eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ef4  08002ef4  0002043c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ef4  08002ef4  0002043c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ef4  08002ef4  0002043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002ef4  08002ef4  00012ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002efc  08002efc  00012efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000043c  20000000  08002f00  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000043c  0800333c  0002043c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  0800333c  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbb5  00000000  00000000  0002046c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c9c  00000000  00000000  0002c021  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009d8  00000000  00000000  0002dcc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e0  00000000  00000000  0002e698  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029f06  00000000  00000000  0002ef78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008b98  00000000  00000000  00058e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fa37f  00000000  00000000  00061a16  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015bd95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002788  00000000  00000000  0015be10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000043c 	.word	0x2000043c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08002e98 	.word	0x08002e98

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000440 	.word	0x20000440
 80001f8:	08002e98 	.word	0x08002e98

080001fc <EpdWaitForReady>:

//-------------------------------------------------------------------
//  Wait for HRDY pin to go High
//-------------------------------------------------------------------
void EpdWaitForReady()
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	//Regarding to HRDY
	//you may need to use a GPIO pin connected to HRDY of IT8951
	while(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET )
 8000200:	bf00      	nop
 8000202:	2120      	movs	r1, #32
 8000204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000208:	f001 f914 	bl	8001434 <HAL_GPIO_ReadPin>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d0f7      	beq.n	8000202 <EpdWaitForReady+0x6>
	{
	}
}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}

08000216 <EpdInit>:

//-------------------------------------------------------------------
//  Init Gpio and resets slave
//-------------------------------------------------------------------
void EpdInit(void)
{/*Configure GPIO pin Output Level */
 8000216:	b580      	push	{r7, lr}
 8000218:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 800021a:	2201      	movs	r2, #1
 800021c:	2101      	movs	r1, #1
 800021e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000222:	f001 f91f 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	2110      	movs	r1, #16
 800022a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800022e:	f001 f919 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000232:	2064      	movs	r0, #100	; 0x64
 8000234:	f000 fc7e 	bl	8000b34 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 8000238:	2201      	movs	r2, #1
 800023a:	2110      	movs	r1, #16
 800023c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000240:	f001 f910 	bl	8001464 <HAL_GPIO_WritePin>
}
 8000244:	bf00      	nop
 8000246:	bd80      	pop	{r7, pc}

08000248 <SPI_Send_byte>:

//-------------------------------------------------------------------
//  SPI sends 2 Bytes in Endian mode
//-------------------------------------------------------------------
void SPI_Send_byte(uint16_t byte)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	80fb      	strh	r3, [r7, #6]
	byte	= MY_WORD_SWAP(byte);
 8000252:	88fb      	ldrh	r3, [r7, #6]
 8000254:	0a1b      	lsrs	r3, r3, #8
 8000256:	b29b      	uxth	r3, r3
 8000258:	b21a      	sxth	r2, r3
 800025a:	88fb      	ldrh	r3, [r7, #6]
 800025c:	021b      	lsls	r3, r3, #8
 800025e:	b21b      	sxth	r3, r3
 8000260:	4313      	orrs	r3, r2
 8000262:	b21b      	sxth	r3, r3
 8000264:	80fb      	strh	r3, [r7, #6]
	uint8_t wbyte[2] = {(uint8_t)(byte>>8), (uint8_t)(byte) };
 8000266:	88fb      	ldrh	r3, [r7, #6]
 8000268:	0a1b      	lsrs	r3, r3, #8
 800026a:	b29b      	uxth	r3, r3
 800026c:	b2db      	uxtb	r3, r3
 800026e:	733b      	strb	r3, [r7, #12]
 8000270:	88fb      	ldrh	r3, [r7, #6]
 8000272:	b2db      	uxtb	r3, r3
 8000274:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi1, wbyte, 1, 0);
 8000276:	f107 010c 	add.w	r1, r7, #12
 800027a:	2300      	movs	r3, #0
 800027c:	2201      	movs	r2, #1
 800027e:	4803      	ldr	r0, [pc, #12]	; (800028c <SPI_Send_byte+0x44>)
 8000280:	f002 f8cc 	bl	800241c <HAL_SPI_Transmit>
}
 8000284:	bf00      	nop
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000458 	.word	0x20000458

08000290 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000296:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <MX_DMA_Init+0x50>)
 8000298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800029a:	4a11      	ldr	r2, [pc, #68]	; (80002e0 <MX_DMA_Init+0x50>)
 800029c:	f043 0304 	orr.w	r3, r3, #4
 80002a0:	6493      	str	r3, [r2, #72]	; 0x48
 80002a2:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <MX_DMA_Init+0x50>)
 80002a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80002a6:	f003 0304 	and.w	r3, r3, #4
 80002aa:	607b      	str	r3, [r7, #4]
 80002ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002ae:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <MX_DMA_Init+0x50>)
 80002b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80002b2:	4a0b      	ldr	r2, [pc, #44]	; (80002e0 <MX_DMA_Init+0x50>)
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	6493      	str	r3, [r2, #72]	; 0x48
 80002ba:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <MX_DMA_Init+0x50>)
 80002bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80002be:	f003 0301 	and.w	r3, r3, #1
 80002c2:	603b      	str	r3, [r7, #0]
 80002c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80002c6:	2200      	movs	r2, #0
 80002c8:	2100      	movs	r1, #0
 80002ca:	200b      	movs	r0, #11
 80002cc:	f000 fd2f 	bl	8000d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80002d0:	200b      	movs	r0, #11
 80002d2:	f000 fd48 	bl	8000d66 <HAL_NVIC_EnableIRQ>

}
 80002d6:	bf00      	nop
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40021000 	.word	0x40021000

080002e4 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b08e      	sub	sp, #56	; 0x38
 80002e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
 80002f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002fa:	4bb7      	ldr	r3, [pc, #732]	; (80005d8 <MX_GPIO_Init+0x2f4>)
 80002fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fe:	4ab6      	ldr	r2, [pc, #728]	; (80005d8 <MX_GPIO_Init+0x2f4>)
 8000300:	f043 0310 	orr.w	r3, r3, #16
 8000304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000306:	4bb4      	ldr	r3, [pc, #720]	; (80005d8 <MX_GPIO_Init+0x2f4>)
 8000308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030a:	f003 0310 	and.w	r3, r3, #16
 800030e:	623b      	str	r3, [r7, #32]
 8000310:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000312:	4bb1      	ldr	r3, [pc, #708]	; (80005d8 <MX_GPIO_Init+0x2f4>)
 8000314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000316:	4ab0      	ldr	r2, [pc, #704]	; (80005d8 <MX_GPIO_Init+0x2f4>)
 8000318:	f043 0304 	orr.w	r3, r3, #4
 800031c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800031e:	4bae      	ldr	r3, [pc, #696]	; (80005d8 <MX_GPIO_Init+0x2f4>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000322:	f003 0304 	and.w	r3, r3, #4
 8000326:	61fb      	str	r3, [r7, #28]
 8000328:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800032a:	4bab      	ldr	r3, [pc, #684]	; (80005d8 <MX_GPIO_Init+0x2f4>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032e:	4aaa      	ldr	r2, [pc, #680]	; (80005d8 <MX_GPIO_Init+0x2f4>)
 8000330:	f043 0320 	orr.w	r3, r3, #32
 8000334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000336:	4ba8      	ldr	r3, [pc, #672]	; (80005d8 <MX_GPIO_Init+0x2f4>)
 8000338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033a:	f003 0320 	and.w	r3, r3, #32
 800033e:	61bb      	str	r3, [r7, #24]
 8000340:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000342:	4ba5      	ldr	r3, [pc, #660]	; (80005d8 <MX_GPIO_Init+0x2f4>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000346:	4aa4      	ldr	r2, [pc, #656]	; (80005d8 <MX_GPIO_Init+0x2f4>)
 8000348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800034c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800034e:	4ba2      	ldr	r3, [pc, #648]	; (80005d8 <MX_GPIO_Init+0x2f4>)
 8000350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000356:	617b      	str	r3, [r7, #20]
 8000358:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035a:	4b9f      	ldr	r3, [pc, #636]	; (80005d8 <MX_GPIO_Init+0x2f4>)
 800035c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035e:	4a9e      	ldr	r2, [pc, #632]	; (80005d8 <MX_GPIO_Init+0x2f4>)
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000366:	4b9c      	ldr	r3, [pc, #624]	; (80005d8 <MX_GPIO_Init+0x2f4>)
 8000368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036a:	f003 0301 	and.w	r3, r3, #1
 800036e:	613b      	str	r3, [r7, #16]
 8000370:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000372:	4b99      	ldr	r3, [pc, #612]	; (80005d8 <MX_GPIO_Init+0x2f4>)
 8000374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000376:	4a98      	ldr	r2, [pc, #608]	; (80005d8 <MX_GPIO_Init+0x2f4>)
 8000378:	f043 0302 	orr.w	r3, r3, #2
 800037c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800037e:	4b96      	ldr	r3, [pc, #600]	; (80005d8 <MX_GPIO_Init+0x2f4>)
 8000380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000382:	f003 0302 	and.w	r3, r3, #2
 8000386:	60fb      	str	r3, [r7, #12]
 8000388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800038a:	4b93      	ldr	r3, [pc, #588]	; (80005d8 <MX_GPIO_Init+0x2f4>)
 800038c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038e:	4a92      	ldr	r2, [pc, #584]	; (80005d8 <MX_GPIO_Init+0x2f4>)
 8000390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000396:	4b90      	ldr	r3, [pc, #576]	; (80005d8 <MX_GPIO_Init+0x2f4>)
 8000398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800039e:	60bb      	str	r3, [r7, #8]
 80003a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a2:	4b8d      	ldr	r3, [pc, #564]	; (80005d8 <MX_GPIO_Init+0x2f4>)
 80003a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a6:	4a8c      	ldr	r2, [pc, #560]	; (80005d8 <MX_GPIO_Init+0x2f4>)
 80003a8:	f043 0308 	orr.w	r3, r3, #8
 80003ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ae:	4b8a      	ldr	r3, [pc, #552]	; (80005d8 <MX_GPIO_Init+0x2f4>)
 80003b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b2:	f003 0308 	and.w	r3, r3, #8
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80003ba:	f001 f92f 	bl	800161c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EPD_CS_Pin|EPD_RST_Pin, GPIO_PIN_RESET);
 80003be:	2200      	movs	r2, #0
 80003c0:	2111      	movs	r1, #17
 80003c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003c6:	f001 f84d 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80003ca:	2200      	movs	r2, #0
 80003cc:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80003d0:	4882      	ldr	r0, [pc, #520]	; (80005dc <MX_GPIO_Init+0x2f8>)
 80003d2:	f001 f847 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2120      	movs	r1, #32
 80003da:	4881      	ldr	r0, [pc, #516]	; (80005e0 <MX_GPIO_Init+0x2fc>)
 80003dc:	f001 f842 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE8 PE9 
                           PE10 PE11 PE12 PE13 
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80003e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003e4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003e6:	2303      	movs	r3, #3
 80003e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ea:	2300      	movs	r3, #0
 80003ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003f2:	4619      	mov	r1, r3
 80003f4:	487b      	ldr	r0, [pc, #492]	; (80005e4 <MX_GPIO_Init+0x300>)
 80003f6:	f000 fe8b 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000400:	4b79      	ldr	r3, [pc, #484]	; (80005e8 <MX_GPIO_Init+0x304>)
 8000402:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800040c:	4619      	mov	r1, r3
 800040e:	4877      	ldr	r0, [pc, #476]	; (80005ec <MX_GPIO_Init+0x308>)
 8000410:	f000 fe7e 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 
                           PF4 PF5 PF6 PF7 
                           PF8 PF9 PF10 PF11 
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000414:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000418:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800041a:	2303      	movs	r3, #3
 800041c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041e:	2300      	movs	r3, #0
 8000420:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000426:	4619      	mov	r1, r3
 8000428:	4871      	ldr	r0, [pc, #452]	; (80005f0 <MX_GPIO_Init+0x30c>)
 800042a:	f000 fe71 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC5 PC6 PC7 
                           PC8 PC9 PC10 PC11 
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800042e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000432:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000434:	2303      	movs	r3, #3
 8000436:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000438:	2300      	movs	r3, #0
 800043a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800043c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000440:	4619      	mov	r1, r3
 8000442:	486a      	ldr	r0, [pc, #424]	; (80005ec <MX_GPIO_Init+0x308>)
 8000444:	f000 fe64 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_CS_Pin;
 8000448:	2301      	movs	r3, #1
 800044a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	2301      	movs	r3, #1
 800044e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000454:	2303      	movs	r3, #3
 8000456:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(EPD_CS_GPIO_Port, &GPIO_InitStruct);
 8000458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800045c:	4619      	mov	r1, r3
 800045e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000462:	f000 fe55 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8000466:	f248 030c 	movw	r3, #32780	; 0x800c
 800046a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800046c:	2303      	movs	r3, #3
 800046e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	2300      	movs	r3, #0
 8000472:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000478:	4619      	mov	r1, r3
 800047a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047e:	f000 fe47 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_RST_Pin;
 8000482:	2310      	movs	r3, #16
 8000484:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000486:	2301      	movs	r3, #1
 8000488:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	2300      	movs	r3, #0
 800048c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048e:	2300      	movs	r3, #0
 8000490:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(EPD_RST_GPIO_Port, &GPIO_InitStruct);
 8000492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000496:	4619      	mov	r1, r3
 8000498:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800049c:	f000 fe38 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_BUSY_Pin;
 80004a0:	2320      	movs	r3, #32
 80004a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004a4:	2300      	movs	r3, #0
 80004a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EPD_BUSY_GPIO_Port, &GPIO_InitStruct);
 80004ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004b0:	4619      	mov	r1, r3
 80004b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b6:	f000 fe2b 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB15 
                           PB4 PB5 PB6 PB8 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80004ba:	f64b 7377 	movw	r3, #49015	; 0xbf77
 80004be:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004c0:	2303      	movs	r3, #3
 80004c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004cc:	4619      	mov	r1, r3
 80004ce:	4843      	ldr	r0, [pc, #268]	; (80005dc <MX_GPIO_Init+0x2f8>)
 80004d0:	f000 fe1e 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 
                           PG4 PG9 PG10 PG11 
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80004d4:	f64f 631f 	movw	r3, #65055	; 0xfe1f
 80004d8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004da:	2303      	movs	r3, #3
 80004dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80004e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004e6:	4619      	mov	r1, r3
 80004e8:	483d      	ldr	r0, [pc, #244]	; (80005e0 <MX_GPIO_Init+0x2fc>)
 80004ea:	f000 fe11 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80004ee:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80004f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f4:	2301      	movs	r3, #1
 80004f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	2300      	movs	r3, #0
 80004fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fc:	2300      	movs	r3, #0
 80004fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000504:	4619      	mov	r1, r3
 8000506:	4835      	ldr	r0, [pc, #212]	; (80005dc <MX_GPIO_Init+0x2f8>)
 8000508:	f000 fe02 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800050c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000510:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000512:	2302      	movs	r3, #2
 8000514:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	2300      	movs	r3, #0
 8000518:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800051a:	2303      	movs	r3, #3
 800051c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800051e:	2307      	movs	r3, #7
 8000520:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000526:	4619      	mov	r1, r3
 8000528:	4832      	ldr	r0, [pc, #200]	; (80005f4 <MX_GPIO_Init+0x310>)
 800052a:	f000 fdf1 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13 
                           PD14 PD15 PD0 PD1 
                           PD2 PD3 PD4 PD5 
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 800052e:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000532:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000534:	2303      	movs	r3, #3
 8000536:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000538:	2300      	movs	r3, #0
 800053a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800053c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000540:	4619      	mov	r1, r3
 8000542:	482c      	ldr	r0, [pc, #176]	; (80005f4 <MX_GPIO_Init+0x310>)
 8000544:	f000 fde4 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000548:	2320      	movs	r3, #32
 800054a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054c:	2301      	movs	r3, #1
 800054e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000554:	2300      	movs	r3, #0
 8000556:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055c:	4619      	mov	r1, r3
 800055e:	4820      	ldr	r0, [pc, #128]	; (80005e0 <MX_GPIO_Init+0x2fc>)
 8000560:	f000 fdd6 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000564:	2340      	movs	r3, #64	; 0x40
 8000566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000568:	2300      	movs	r3, #0
 800056a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000574:	4619      	mov	r1, r3
 8000576:	481a      	ldr	r0, [pc, #104]	; (80005e0 <MX_GPIO_Init+0x2fc>)
 8000578:	f000 fdca 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800057c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000582:	2302      	movs	r3, #2
 8000584:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800058a:	2303      	movs	r3, #3
 800058c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800058e:	2308      	movs	r3, #8
 8000590:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000596:	4619      	mov	r1, r3
 8000598:	4811      	ldr	r0, [pc, #68]	; (80005e0 <MX_GPIO_Init+0x2fc>)
 800059a:	f000 fdb9 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800059e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	2302      	movs	r3, #2
 80005a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ac:	2303      	movs	r3, #3
 80005ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80005b0:	230a      	movs	r3, #10
 80005b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005b8:	4619      	mov	r1, r3
 80005ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005be:	f000 fda7 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80005c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c8:	2300      	movs	r3, #0
 80005ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80005d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d4:	e010      	b.n	80005f8 <MX_GPIO_Init+0x314>
 80005d6:	bf00      	nop
 80005d8:	40021000 	.word	0x40021000
 80005dc:	48000400 	.word	0x48000400
 80005e0:	48001800 	.word	0x48001800
 80005e4:	48001000 	.word	0x48001000
 80005e8:	10110000 	.word	0x10110000
 80005ec:	48000800 	.word	0x48000800
 80005f0:	48001400 	.word	0x48001400
 80005f4:	48000c00 	.word	0x48000c00
 80005f8:	4619      	mov	r1, r3
 80005fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fe:	f000 fd87 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000602:	2308      	movs	r3, #8
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000606:	2303      	movs	r3, #3
 8000608:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800060e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000612:	4619      	mov	r1, r3
 8000614:	4803      	ldr	r0, [pc, #12]	; (8000624 <MX_GPIO_Init+0x340>)
 8000616:	f000 fd7b 	bl	8001110 <HAL_GPIO_Init>

}
 800061a:	bf00      	nop
 800061c:	3738      	adds	r7, #56	; 0x38
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	48001c00 	.word	0x48001c00

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062e:	f000 fa10 	bl	8000a52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000632:	f000 f84b 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000636:	f7ff fe55 	bl	80002e4 <MX_GPIO_Init>
  MX_DMA_Init();
 800063a:	f7ff fe29 	bl	8000290 <MX_DMA_Init>
  MX_SPI1_Init();
 800063e:	f000 f89d 	bl	800077c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  EpdInit();
 8000642:	f7ff fde8 	bl	8000216 <EpdInit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //HostInit();
	SPI_Enable;
 8000646:	2200      	movs	r2, #0
 8000648:	2101      	movs	r1, #1
 800064a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064e:	f000 ff09 	bl	8001464 <HAL_GPIO_WritePin>
	EpdWaitForReady();
 8000652:	f7ff fdd3 	bl	80001fc <EpdWaitForReady>
	SPI_Send_byte(0x6000);
 8000656:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 800065a:	f7ff fdf5 	bl	8000248 <SPI_Send_byte>
	EpdWaitForReady();
 800065e:	f7ff fdcd 	bl	80001fc <EpdWaitForReady>
	SPI_Send_byte(0x0302);
 8000662:	f240 3002 	movw	r0, #770	; 0x302
 8000666:	f7ff fdef 	bl	8000248 <SPI_Send_byte>
	//delay_nop();
	SPI_Disable;
 800066a:	2201      	movs	r2, #1
 800066c:	2101      	movs	r1, #1
 800066e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000672:	f000 fef7 	bl	8001464 <HAL_GPIO_WritePin>

	SPI_Enable;
 8000676:	2200      	movs	r2, #0
 8000678:	2101      	movs	r1, #1
 800067a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067e:	f000 fef1 	bl	8001464 <HAL_GPIO_WritePin>
	SPI_Send_byte(0x1000);
 8000682:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000686:	f7ff fddf 	bl	8000248 <SPI_Send_byte>
	uint8_t dum[2]={0, 0};
 800068a:	2300      	movs	r3, #0
 800068c:	723b      	strb	r3, [r7, #8]
 800068e:	2300      	movs	r3, #0
 8000690:	727b      	strb	r3, [r7, #9]
	uint8_t data[2];
	for(int i=0;i<20;i++)
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	e013      	b.n	80006c0 <main+0x98>
	{
	HAL_SPI_TransmitReceive(&hspi1, &dum[0], &data[0], 1, 0);
 8000698:	1d3a      	adds	r2, r7, #4
 800069a:	f107 0108 	add.w	r1, r7, #8
 800069e:	2300      	movs	r3, #0
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2301      	movs	r3, #1
 80006a4:	4808      	ldr	r0, [pc, #32]	; (80006c8 <main+0xa0>)
 80006a6:	f002 f81f 	bl	80026e8 <HAL_SPI_TransmitReceive>
	uint16_t dat = (data[1]<<8|data[0]);
 80006aa:	797b      	ldrb	r3, [r7, #5]
 80006ac:	021b      	lsls	r3, r3, #8
 80006ae:	b21a      	sxth	r2, r3
 80006b0:	793b      	ldrb	r3, [r7, #4]
 80006b2:	b21b      	sxth	r3, r3
 80006b4:	4313      	orrs	r3, r2
 80006b6:	b21b      	sxth	r3, r3
 80006b8:	817b      	strh	r3, [r7, #10]
	for(int i=0;i<20;i++)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	3301      	adds	r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	2b13      	cmp	r3, #19
 80006c4:	dde8      	ble.n	8000698 <main+0x70>
  {
 80006c6:	e7be      	b.n	8000646 <main+0x1e>
 80006c8:	20000458 	.word	0x20000458

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b096      	sub	sp, #88	; 0x58
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2244      	movs	r2, #68	; 0x44
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 fb58 	bl	8002d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	463b      	mov	r3, r7
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 fef0 	bl	80014d4 <HAL_PWREx_ControlVoltageScaling>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x32>
  {
    Error_Handler();
 80006fa:	f000 f837 	bl	800076c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fe:	2302      	movs	r3, #2
 8000700:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000702:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2340      	movs	r3, #64	; 0x40
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000718:	231e      	movs	r3, #30
 800071a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000720:	2302      	movs	r3, #2
 8000722:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000724:	2302      	movs	r3, #2
 8000726:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4618      	mov	r0, r3
 800072e:	f000 ff85 	bl	800163c <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000738:	f000 f818 	bl	800076c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2303      	movs	r3, #3
 8000742:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000750:	463b      	mov	r3, r7
 8000752:	2105      	movs	r1, #5
 8000754:	4618      	mov	r0, r3
 8000756:	f001 fb5f 	bl	8001e18 <HAL_RCC_ClockConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000760:	f000 f804 	bl	800076c <Error_Handler>
  }
}
 8000764:	bf00      	nop
 8000766:	3758      	adds	r7, #88	; 0x58
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
	...

0800077c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000780:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <MX_SPI1_Init+0x74>)
 8000782:	4a1c      	ldr	r2, [pc, #112]	; (80007f4 <MX_SPI1_Init+0x78>)
 8000784:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <MX_SPI1_Init+0x74>)
 8000788:	f44f 7282 	mov.w	r2, #260	; 0x104
 800078c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <MX_SPI1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000794:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <MX_SPI1_Init+0x74>)
 8000796:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800079a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_SPI1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_SPI1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_SPI1_Init+0x74>)
 80007aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_SPI1_Init+0x74>)
 80007b2:	2230      	movs	r2, #48	; 0x30
 80007b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_SPI1_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_SPI1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_SPI1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_SPI1_Init+0x74>)
 80007ca:	2207      	movs	r2, #7
 80007cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_SPI1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_SPI1_Init+0x74>)
 80007d6:	2208      	movs	r2, #8
 80007d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_SPI1_Init+0x74>)
 80007dc:	f001 fd94 	bl	8002308 <HAL_SPI_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007e6:	f7ff ffc1 	bl	800076c <Error_Handler>
  }

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000458 	.word	0x20000458
 80007f4:	40013000 	.word	0x40013000

080007f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a2d      	ldr	r2, [pc, #180]	; (80008cc <HAL_SPI_MspInit+0xd4>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d153      	bne.n	80008c2 <HAL_SPI_MspInit+0xca>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800081a:	4b2d      	ldr	r3, [pc, #180]	; (80008d0 <HAL_SPI_MspInit+0xd8>)
 800081c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800081e:	4a2c      	ldr	r2, [pc, #176]	; (80008d0 <HAL_SPI_MspInit+0xd8>)
 8000820:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000824:	6613      	str	r3, [r2, #96]	; 0x60
 8000826:	4b2a      	ldr	r3, [pc, #168]	; (80008d0 <HAL_SPI_MspInit+0xd8>)
 8000828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b27      	ldr	r3, [pc, #156]	; (80008d0 <HAL_SPI_MspInit+0xd8>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4a26      	ldr	r2, [pc, #152]	; (80008d0 <HAL_SPI_MspInit+0xd8>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <HAL_SPI_MspInit+0xd8>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800084a:	23c2      	movs	r3, #194	; 0xc2
 800084c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000856:	2303      	movs	r3, #3
 8000858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800085a:	2305      	movs	r3, #5
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000868:	f000 fc52 	bl	8001110 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 800086c:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <HAL_SPI_MspInit+0xdc>)
 800086e:	4a1a      	ldr	r2, [pc, #104]	; (80008d8 <HAL_SPI_MspInit+0xe0>)
 8000870:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <HAL_SPI_MspInit+0xdc>)
 8000874:	220b      	movs	r2, #11
 8000876:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <HAL_SPI_MspInit+0xdc>)
 800087a:	2210      	movs	r2, #16
 800087c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <HAL_SPI_MspInit+0xdc>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <HAL_SPI_MspInit+0xdc>)
 8000886:	2280      	movs	r2, #128	; 0x80
 8000888:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <HAL_SPI_MspInit+0xdc>)
 800088c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000890:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <HAL_SPI_MspInit+0xdc>)
 8000894:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000898:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <HAL_SPI_MspInit+0xdc>)
 800089c:	2200      	movs	r2, #0
 800089e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <HAL_SPI_MspInit+0xdc>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80008a6:	480b      	ldr	r0, [pc, #44]	; (80008d4 <HAL_SPI_MspInit+0xdc>)
 80008a8:	f000 fa78 	bl	8000d9c <HAL_DMA_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 80008b2:	f7ff ff5b 	bl	800076c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a06      	ldr	r2, [pc, #24]	; (80008d4 <HAL_SPI_MspInit+0xdc>)
 80008ba:	655a      	str	r2, [r3, #84]	; 0x54
 80008bc:	4a05      	ldr	r2, [pc, #20]	; (80008d4 <HAL_SPI_MspInit+0xdc>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008c2:	bf00      	nop
 80008c4:	3728      	adds	r7, #40	; 0x28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40013000 	.word	0x40013000
 80008d0:	40021000 	.word	0x40021000
 80008d4:	200004bc 	.word	0x200004bc
 80008d8:	40020008 	.word	0x40020008

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <HAL_MspInit+0x44>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e6:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <HAL_MspInit+0x44>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6613      	str	r3, [r2, #96]	; 0x60
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <HAL_MspInit+0x44>)
 80008f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <HAL_MspInit+0x44>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fe:	4a08      	ldr	r2, [pc, #32]	; (8000920 <HAL_MspInit+0x44>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	6593      	str	r3, [r2, #88]	; 0x58
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_MspInit+0x44>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <MemManage_Handler+0x4>

0800093e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <BusFault_Handler+0x4>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <UsageFault_Handler+0x4>

0800094a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000978:	f000 f8be 	bl	8000af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}

08000980 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000984:	4802      	ldr	r0, [pc, #8]	; (8000990 <DMA1_Channel1_IRQHandler+0x10>)
 8000986:	f000 fab1 	bl	8000eec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200004bc 	.word	0x200004bc

08000994 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <SystemInit+0x64>)
 800099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099e:	4a16      	ldr	r2, [pc, #88]	; (80009f8 <SystemInit+0x64>)
 80009a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <SystemInit+0x68>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a13      	ldr	r2, [pc, #76]	; (80009fc <SystemInit+0x68>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <SystemInit+0x68>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <SystemInit+0x68>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a0f      	ldr	r2, [pc, #60]	; (80009fc <SystemInit+0x68>)
 80009c0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009c4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <SystemInit+0x68>)
 80009cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009d0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <SystemInit+0x68>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a09      	ldr	r2, [pc, #36]	; (80009fc <SystemInit+0x68>)
 80009d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <SystemInit+0x68>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <SystemInit+0x64>)
 80009e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009ea:	609a      	str	r2, [r3, #8]
#endif
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00
 80009fc:	40021000 	.word	0x40021000

08000a00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a04:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a06:	e003      	b.n	8000a10 <LoopCopyDataInit>

08000a08 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a0a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a0c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a0e:	3104      	adds	r1, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a10:	480b      	ldr	r0, [pc, #44]	; (8000a40 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a14:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a16:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a18:	d3f6      	bcc.n	8000a08 <CopyDataInit>
	ldr	r2, =_sbss
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a1c:	e002      	b.n	8000a24 <LoopFillZerobss>

08000a1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a1e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a20:	f842 3b04 	str.w	r3, [r2], #4

08000a24 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <LoopForever+0x16>)
	cmp	r2, r3
 8000a26:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a28:	d3f9      	bcc.n	8000a1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a2a:	f7ff ffb3 	bl	8000994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2e:	f002 f98b 	bl	8002d48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a32:	f7ff fdf9 	bl	8000628 <main>

08000a36 <LoopForever>:

LoopForever:
    b LoopForever
 8000a36:	e7fe      	b.n	8000a36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a38:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000a3c:	08002f00 	.word	0x08002f00
	ldr	r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a44:	2000043c 	.word	0x2000043c
	ldr	r2, =_sbss
 8000a48:	2000043c 	.word	0x2000043c
	ldr	r3, = _ebss
 8000a4c:	2000052c 	.word	0x2000052c

08000a50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a50:	e7fe      	b.n	8000a50 <ADC1_IRQHandler>

08000a52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f000 f95b 	bl	8000d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a62:	2000      	movs	r0, #0
 8000a64:	f000 f80e 	bl	8000a84 <HAL_InitTick>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d002      	beq.n	8000a74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	71fb      	strb	r3, [r7, #7]
 8000a72:	e001      	b.n	8000a78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a74:	f7ff ff32 	bl	80008dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a78:	79fb      	ldrb	r3, [r7, #7]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a90:	4b16      	ldr	r3, [pc, #88]	; (8000aec <HAL_InitTick+0x68>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d022      	beq.n	8000ade <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a98:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_InitTick+0x6c>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <HAL_InitTick+0x68>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000aa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 f968 	bl	8000d82 <HAL_SYSTICK_Config>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d10f      	bne.n	8000ad8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b0f      	cmp	r3, #15
 8000abc:	d809      	bhi.n	8000ad2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	6879      	ldr	r1, [r7, #4]
 8000ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac6:	f000 f932 	bl	8000d2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <HAL_InitTick+0x70>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6013      	str	r3, [r2, #0]
 8000ad0:	e007      	b.n	8000ae2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	73fb      	strb	r3, [r7, #15]
 8000ad6:	e004      	b.n	8000ae2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	73fb      	strb	r3, [r7, #15]
 8000adc:	e001      	b.n	8000ae2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000008 	.word	0x20000008
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000004 	.word	0x20000004

08000af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <HAL_IncTick+0x1c>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <HAL_IncTick+0x20>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4413      	add	r3, r2
 8000b06:	4a03      	ldr	r2, [pc, #12]	; (8000b14 <HAL_IncTick+0x1c>)
 8000b08:	6013      	str	r3, [r2, #0]
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	2000051c 	.word	0x2000051c
 8000b18:	20000008 	.word	0x20000008

08000b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <HAL_GetTick+0x14>)
 8000b22:	681b      	ldr	r3, [r3, #0]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	2000051c 	.word	0x2000051c

08000b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b3c:	f7ff ffee 	bl	8000b1c <HAL_GetTick>
 8000b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b4c:	d004      	beq.n	8000b58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <HAL_Delay+0x40>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	4413      	add	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b58:	bf00      	nop
 8000b5a:	f7ff ffdf 	bl	8000b1c <HAL_GetTick>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d8f7      	bhi.n	8000b5a <HAL_Delay+0x26>
  {
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000008 	.word	0x20000008

08000b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db0b      	blt.n	8000c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 021f 	and.w	r2, r3, #31
 8000bf4:	4907      	ldr	r1, [pc, #28]	; (8000c14 <__NVIC_EnableIRQ+0x38>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	; (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	; 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce4:	d301      	bcc.n	8000cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00f      	b.n	8000d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <SysTick_Config+0x40>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f7ff ff8e 	bl	8000c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <SysTick_Config+0x40>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SysTick_Config+0x40>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff29 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d40:	f7ff ff3e 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000d44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	6978      	ldr	r0, [r7, #20]
 8000d4c:	f7ff ff8e 	bl	8000c6c <NVIC_EncodePriority>
 8000d50:	4602      	mov	r2, r0
 8000d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff5d 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff31 	bl	8000bdc <__NVIC_EnableIRQ>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ffa2 	bl	8000cd4 <SysTick_Config>
 8000d90:	4603      	mov	r3, r0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e08d      	b.n	8000eca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b47      	ldr	r3, [pc, #284]	; (8000ed4 <HAL_DMA_Init+0x138>)
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d80f      	bhi.n	8000dda <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b45      	ldr	r3, [pc, #276]	; (8000ed8 <HAL_DMA_Init+0x13c>)
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a45      	ldr	r2, [pc, #276]	; (8000edc <HAL_DMA_Init+0x140>)
 8000dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dca:	091b      	lsrs	r3, r3, #4
 8000dcc:	009a      	lsls	r2, r3, #2
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a42      	ldr	r2, [pc, #264]	; (8000ee0 <HAL_DMA_Init+0x144>)
 8000dd6:	641a      	str	r2, [r3, #64]	; 0x40
 8000dd8:	e00e      	b.n	8000df8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b40      	ldr	r3, [pc, #256]	; (8000ee4 <HAL_DMA_Init+0x148>)
 8000de2:	4413      	add	r3, r2
 8000de4:	4a3d      	ldr	r2, [pc, #244]	; (8000edc <HAL_DMA_Init+0x140>)
 8000de6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dea:	091b      	lsrs	r3, r3, #4
 8000dec:	009a      	lsls	r2, r3, #2
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a3c      	ldr	r2, [pc, #240]	; (8000ee8 <HAL_DMA_Init+0x14c>)
 8000df6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a1b      	ldr	r3, [r3, #32]
 8000e3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f000 f8fe 	bl	800104c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e58:	d102      	bne.n	8000e60 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e74:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d010      	beq.n	8000ea0 <HAL_DMA_Init+0x104>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	d80c      	bhi.n	8000ea0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f000 f91e 	bl	80010c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	e008      	b.n	8000eb2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40020407 	.word	0x40020407
 8000ed8:	bffdfff8 	.word	0xbffdfff8
 8000edc:	cccccccd 	.word	0xcccccccd
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	bffdfbf8 	.word	0xbffdfbf8
 8000ee8:	40020400 	.word	0x40020400

08000eec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f08:	f003 031c 	and.w	r3, r3, #28
 8000f0c:	2204      	movs	r2, #4
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4013      	ands	r3, r2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d026      	beq.n	8000f66 <HAL_DMA_IRQHandler+0x7a>
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d021      	beq.n	8000f66 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0320 	and.w	r3, r3, #32
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d107      	bne.n	8000f40 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 0204 	bic.w	r2, r2, #4
 8000f3e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f44:	f003 021c 	and.w	r2, r3, #28
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	2104      	movs	r1, #4
 8000f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f52:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d071      	beq.n	8001040 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000f64:	e06c      	b.n	8001040 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	f003 031c 	and.w	r3, r3, #28
 8000f6e:	2202      	movs	r2, #2
 8000f70:	409a      	lsls	r2, r3
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	4013      	ands	r3, r2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d02e      	beq.n	8000fd8 <HAL_DMA_IRQHandler+0xec>
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d029      	beq.n	8000fd8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0320 	and.w	r3, r3, #32
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10b      	bne.n	8000faa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 020a 	bic.w	r2, r2, #10
 8000fa0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	f003 021c 	and.w	r2, r3, #28
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fbc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d038      	beq.n	8001040 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000fd6:	e033      	b.n	8001040 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fdc:	f003 031c 	and.w	r3, r3, #28
 8000fe0:	2208      	movs	r2, #8
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d02a      	beq.n	8001042 <HAL_DMA_IRQHandler+0x156>
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d025      	beq.n	8001042 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 020e 	bic.w	r2, r2, #14
 8001004:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f003 021c 	and.w	r2, r3, #28
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	2101      	movs	r1, #1
 8001014:	fa01 f202 	lsl.w	r2, r1, r2
 8001018:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2201      	movs	r2, #1
 8001024:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001034:	2b00      	cmp	r3, #0
 8001036:	d004      	beq.n	8001042 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001040:	bf00      	nop
 8001042:	bf00      	nop
}
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800105c:	429a      	cmp	r2, r3
 800105e:	d80a      	bhi.n	8001076 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001064:	089b      	lsrs	r3, r3, #2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800106c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	6493      	str	r3, [r2, #72]	; 0x48
 8001074:	e007      	b.n	8001086 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	009a      	lsls	r2, r3, #2
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001080:	4413      	add	r3, r2
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	3b08      	subs	r3, #8
 800108e:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001090:	fba2 2303 	umull	r2, r3, r2, r3
 8001094:	091b      	lsrs	r3, r3, #4
 8001096:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800109c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1CU);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f003 031c 	and.w	r3, r3, #28
 80010a4:	2201      	movs	r2, #1
 80010a6:	409a      	lsls	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	40020407 	.word	0x40020407
 80010bc:	4002081c 	.word	0x4002081c
 80010c0:	cccccccd 	.word	0xcccccccd
 80010c4:	40020880 	.word	0x40020880

080010c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	461a      	mov	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a08      	ldr	r2, [pc, #32]	; (800110c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80010ea:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	2201      	movs	r2, #1
 80010f6:	409a      	lsls	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	1000823f 	.word	0x1000823f
 800110c:	40020940 	.word	0x40020940

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111e:	e166      	b.n	80013ee <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	2101      	movs	r1, #1
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	fa01 f303 	lsl.w	r3, r1, r3
 800112c:	4013      	ands	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 8158 	beq.w	80013e8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x38>
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b12      	cmp	r3, #18
 8001146:	d123      	bne.n	8001190 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	08da      	lsrs	r2, r3, #3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3208      	adds	r2, #8
 8001150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	220f      	movs	r2, #15
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	691a      	ldr	r2, [r3, #16]
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	08da      	lsrs	r2, r3, #3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3208      	adds	r2, #8
 800118a:	6939      	ldr	r1, [r7, #16]
 800118c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0203 	and.w	r2, r3, #3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d00b      	beq.n	80011e4 <HAL_GPIO_Init+0xd4>
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d007      	beq.n	80011e4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d8:	2b11      	cmp	r3, #17
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b12      	cmp	r3, #18
 80011e2:	d130      	bne.n	8001246 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	68da      	ldr	r2, [r3, #12]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800121a:	2201      	movs	r2, #1
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	091b      	lsrs	r3, r3, #4
 8001230:	f003 0201 	and.w	r2, r3, #1
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2203      	movs	r2, #3
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80b2 	beq.w	80013e8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001284:	4b61      	ldr	r3, [pc, #388]	; (800140c <HAL_GPIO_Init+0x2fc>)
 8001286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001288:	4a60      	ldr	r2, [pc, #384]	; (800140c <HAL_GPIO_Init+0x2fc>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6613      	str	r3, [r2, #96]	; 0x60
 8001290:	4b5e      	ldr	r3, [pc, #376]	; (800140c <HAL_GPIO_Init+0x2fc>)
 8001292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800129c:	4a5c      	ldr	r2, [pc, #368]	; (8001410 <HAL_GPIO_Init+0x300>)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	220f      	movs	r2, #15
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012c6:	d02b      	beq.n	8001320 <HAL_GPIO_Init+0x210>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a52      	ldr	r2, [pc, #328]	; (8001414 <HAL_GPIO_Init+0x304>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d025      	beq.n	800131c <HAL_GPIO_Init+0x20c>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a51      	ldr	r2, [pc, #324]	; (8001418 <HAL_GPIO_Init+0x308>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d01f      	beq.n	8001318 <HAL_GPIO_Init+0x208>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a50      	ldr	r2, [pc, #320]	; (800141c <HAL_GPIO_Init+0x30c>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d019      	beq.n	8001314 <HAL_GPIO_Init+0x204>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a4f      	ldr	r2, [pc, #316]	; (8001420 <HAL_GPIO_Init+0x310>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d013      	beq.n	8001310 <HAL_GPIO_Init+0x200>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a4e      	ldr	r2, [pc, #312]	; (8001424 <HAL_GPIO_Init+0x314>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d00d      	beq.n	800130c <HAL_GPIO_Init+0x1fc>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a4d      	ldr	r2, [pc, #308]	; (8001428 <HAL_GPIO_Init+0x318>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d007      	beq.n	8001308 <HAL_GPIO_Init+0x1f8>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a4c      	ldr	r2, [pc, #304]	; (800142c <HAL_GPIO_Init+0x31c>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d101      	bne.n	8001304 <HAL_GPIO_Init+0x1f4>
 8001300:	2307      	movs	r3, #7
 8001302:	e00e      	b.n	8001322 <HAL_GPIO_Init+0x212>
 8001304:	2308      	movs	r3, #8
 8001306:	e00c      	b.n	8001322 <HAL_GPIO_Init+0x212>
 8001308:	2306      	movs	r3, #6
 800130a:	e00a      	b.n	8001322 <HAL_GPIO_Init+0x212>
 800130c:	2305      	movs	r3, #5
 800130e:	e008      	b.n	8001322 <HAL_GPIO_Init+0x212>
 8001310:	2304      	movs	r3, #4
 8001312:	e006      	b.n	8001322 <HAL_GPIO_Init+0x212>
 8001314:	2303      	movs	r3, #3
 8001316:	e004      	b.n	8001322 <HAL_GPIO_Init+0x212>
 8001318:	2302      	movs	r3, #2
 800131a:	e002      	b.n	8001322 <HAL_GPIO_Init+0x212>
 800131c:	2301      	movs	r3, #1
 800131e:	e000      	b.n	8001322 <HAL_GPIO_Init+0x212>
 8001320:	2300      	movs	r3, #0
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	f002 0203 	and.w	r2, r2, #3
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	4093      	lsls	r3, r2
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001332:	4937      	ldr	r1, [pc, #220]	; (8001410 <HAL_GPIO_Init+0x300>)
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001340:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <HAL_GPIO_Init+0x320>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	43db      	mvns	r3, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001364:	4a32      	ldr	r2, [pc, #200]	; (8001430 <HAL_GPIO_Init+0x320>)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800136a:	4b31      	ldr	r3, [pc, #196]	; (8001430 <HAL_GPIO_Init+0x320>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	43db      	mvns	r3, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800138e:	4a28      	ldr	r2, [pc, #160]	; (8001430 <HAL_GPIO_Init+0x320>)
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001394:	4b26      	ldr	r3, [pc, #152]	; (8001430 <HAL_GPIO_Init+0x320>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	43db      	mvns	r3, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013b8:	4a1d      	ldr	r2, [pc, #116]	; (8001430 <HAL_GPIO_Init+0x320>)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013be:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <HAL_GPIO_Init+0x320>)
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013e2:	4a13      	ldr	r2, [pc, #76]	; (8001430 <HAL_GPIO_Init+0x320>)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	3301      	adds	r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	fa22 f303 	lsr.w	r3, r2, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f47f ae91 	bne.w	8001120 <HAL_GPIO_Init+0x10>
  }
}
 80013fe:	bf00      	nop
 8001400:	371c      	adds	r7, #28
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000
 8001410:	40010000 	.word	0x40010000
 8001414:	48000400 	.word	0x48000400
 8001418:	48000800 	.word	0x48000800
 800141c:	48000c00 	.word	0x48000c00
 8001420:	48001000 	.word	0x48001000
 8001424:	48001400 	.word	0x48001400
 8001428:	48001800 	.word	0x48001800
 800142c:	48001c00 	.word	0x48001c00
 8001430:	40010400 	.word	0x40010400

08001434 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691a      	ldr	r2, [r3, #16]
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	4013      	ands	r3, r2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d002      	beq.n	8001452 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800144c:	2301      	movs	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e001      	b.n	8001456 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001456:	7bfb      	ldrb	r3, [r7, #15]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]
 8001470:	4613      	mov	r3, r2
 8001472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001474:	787b      	ldrb	r3, [r7, #1]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800147a:	887a      	ldrh	r2, [r7, #2]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001480:	e002      	b.n	8001488 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001482:	887a      	ldrh	r2, [r7, #2]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001498:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a4:	d102      	bne.n	80014ac <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80014a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014aa:	e00b      	b.n	80014c4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80014ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014ba:	d102      	bne.n	80014c2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80014bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014c0:	e000      	b.n	80014c4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80014c2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40007000 	.word	0x40007000

080014d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d141      	bne.n	8001566 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014e2:	4b4b      	ldr	r3, [pc, #300]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ee:	d131      	bne.n	8001554 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014f0:	4b47      	ldr	r3, [pc, #284]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014f6:	4a46      	ldr	r2, [pc, #280]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001500:	4b43      	ldr	r3, [pc, #268]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001508:	4a41      	ldr	r2, [pc, #260]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800150a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001510:	4b40      	ldr	r3, [pc, #256]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2232      	movs	r2, #50	; 0x32
 8001516:	fb02 f303 	mul.w	r3, r2, r3
 800151a:	4a3f      	ldr	r2, [pc, #252]	; (8001618 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800151c:	fba2 2303 	umull	r2, r3, r2, r3
 8001520:	0c9b      	lsrs	r3, r3, #18
 8001522:	3301      	adds	r3, #1
 8001524:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001526:	e002      	b.n	800152e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3b01      	subs	r3, #1
 800152c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800152e:	4b38      	ldr	r3, [pc, #224]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800153a:	d102      	bne.n	8001542 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f2      	bne.n	8001528 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001542:	4b33      	ldr	r3, [pc, #204]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800154e:	d158      	bne.n	8001602 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e057      	b.n	8001604 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001554:	4b2e      	ldr	r3, [pc, #184]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800155a:	4a2d      	ldr	r2, [pc, #180]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001560:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001564:	e04d      	b.n	8001602 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800156c:	d141      	bne.n	80015f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800156e:	4b28      	ldr	r3, [pc, #160]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800157a:	d131      	bne.n	80015e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800157c:	4b24      	ldr	r3, [pc, #144]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800157e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001582:	4a23      	ldr	r2, [pc, #140]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001588:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800158c:	4b20      	ldr	r3, [pc, #128]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001594:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800159a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2232      	movs	r2, #50	; 0x32
 80015a2:	fb02 f303 	mul.w	r3, r2, r3
 80015a6:	4a1c      	ldr	r2, [pc, #112]	; (8001618 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015a8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ac:	0c9b      	lsrs	r3, r3, #18
 80015ae:	3301      	adds	r3, #1
 80015b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015b2:	e002      	b.n	80015ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c6:	d102      	bne.n	80015ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f2      	bne.n	80015b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015da:	d112      	bne.n	8001602 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e011      	b.n	8001604 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80015f0:	e007      	b.n	8001602 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015f2:	4b07      	ldr	r3, [pc, #28]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001600:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	40007000 	.word	0x40007000
 8001614:	20000000 	.word	0x20000000
 8001618:	431bde83 	.word	0x431bde83

0800161c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001626:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162a:	6053      	str	r3, [r2, #4]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40007000 	.word	0x40007000

0800163c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e3db      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800164e:	4ba4      	ldr	r3, [pc, #656]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001658:	4ba1      	ldr	r3, [pc, #644]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 80e1 	beq.w	8001832 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d007      	beq.n	8001686 <HAL_RCC_OscConfig+0x4a>
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	2b0c      	cmp	r3, #12
 800167a:	f040 8088 	bne.w	800178e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	2b01      	cmp	r3, #1
 8001682:	f040 8084 	bne.w	800178e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001686:	4b96      	ldr	r3, [pc, #600]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d005      	beq.n	800169e <HAL_RCC_OscConfig+0x62>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e3b3      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1a      	ldr	r2, [r3, #32]
 80016a2:	4b8f      	ldr	r3, [pc, #572]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d004      	beq.n	80016b8 <HAL_RCC_OscConfig+0x7c>
 80016ae:	4b8c      	ldr	r3, [pc, #560]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016b6:	e005      	b.n	80016c4 <HAL_RCC_OscConfig+0x88>
 80016b8:	4b89      	ldr	r3, [pc, #548]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 80016ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016be:	091b      	lsrs	r3, r3, #4
 80016c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d223      	bcs.n	8001710 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 fd59 	bl	8002184 <RCC_SetFlashLatencyFromMSIRange>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e394      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016dc:	4b80      	ldr	r3, [pc, #512]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a7f      	ldr	r2, [pc, #508]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 80016e2:	f043 0308 	orr.w	r3, r3, #8
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	4b7d      	ldr	r3, [pc, #500]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	497a      	ldr	r1, [pc, #488]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016fa:	4b79      	ldr	r3, [pc, #484]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	4975      	ldr	r1, [pc, #468]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 800170a:	4313      	orrs	r3, r2
 800170c:	604b      	str	r3, [r1, #4]
 800170e:	e022      	b.n	8001756 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001710:	4b73      	ldr	r3, [pc, #460]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a72      	ldr	r2, [pc, #456]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 8001716:	f043 0308 	orr.w	r3, r3, #8
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b70      	ldr	r3, [pc, #448]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	496d      	ldr	r1, [pc, #436]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 800172a:	4313      	orrs	r3, r2
 800172c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800172e:	4b6c      	ldr	r3, [pc, #432]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	4968      	ldr	r1, [pc, #416]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 800173e:	4313      	orrs	r3, r2
 8001740:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	4618      	mov	r0, r3
 8001748:	f000 fd1c 	bl	8002184 <RCC_SetFlashLatencyFromMSIRange>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e357      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001756:	f000 fc8b 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 800175a:	4601      	mov	r1, r0
 800175c:	4b60      	ldr	r3, [pc, #384]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	091b      	lsrs	r3, r3, #4
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	4a5f      	ldr	r2, [pc, #380]	; (80018e4 <HAL_RCC_OscConfig+0x2a8>)
 8001768:	5cd3      	ldrb	r3, [r2, r3]
 800176a:	f003 031f 	and.w	r3, r3, #31
 800176e:	fa21 f303 	lsr.w	r3, r1, r3
 8001772:	4a5d      	ldr	r2, [pc, #372]	; (80018e8 <HAL_RCC_OscConfig+0x2ac>)
 8001774:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001776:	4b5d      	ldr	r3, [pc, #372]	; (80018ec <HAL_RCC_OscConfig+0x2b0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff f982 	bl	8000a84 <HAL_InitTick>
 8001780:	4603      	mov	r3, r0
 8001782:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d052      	beq.n	8001830 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	e33b      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d032      	beq.n	80017fc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001796:	4b52      	ldr	r3, [pc, #328]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a51      	ldr	r2, [pc, #324]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017a2:	f7ff f9bb 	bl	8000b1c <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017aa:	f7ff f9b7 	bl	8000b1c <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e324      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017bc:	4b48      	ldr	r3, [pc, #288]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f0      	beq.n	80017aa <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017c8:	4b45      	ldr	r3, [pc, #276]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a44      	ldr	r2, [pc, #272]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 80017ce:	f043 0308 	orr.w	r3, r3, #8
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	4b42      	ldr	r3, [pc, #264]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	493f      	ldr	r1, [pc, #252]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017e6:	4b3e      	ldr	r3, [pc, #248]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	021b      	lsls	r3, r3, #8
 80017f4:	493a      	ldr	r1, [pc, #232]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	604b      	str	r3, [r1, #4]
 80017fa:	e01a      	b.n	8001832 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017fc:	4b38      	ldr	r3, [pc, #224]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a37      	ldr	r2, [pc, #220]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 8001802:	f023 0301 	bic.w	r3, r3, #1
 8001806:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001808:	f7ff f988 	bl	8000b1c <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001810:	f7ff f984 	bl	8000b1c <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e2f1      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001822:	4b2f      	ldr	r3, [pc, #188]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x1d4>
 800182e:	e000      	b.n	8001832 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001830:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d074      	beq.n	8001928 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	2b08      	cmp	r3, #8
 8001842:	d005      	beq.n	8001850 <HAL_RCC_OscConfig+0x214>
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	2b0c      	cmp	r3, #12
 8001848:	d10e      	bne.n	8001868 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2b03      	cmp	r3, #3
 800184e:	d10b      	bne.n	8001868 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001850:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d064      	beq.n	8001926 <HAL_RCC_OscConfig+0x2ea>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d160      	bne.n	8001926 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e2ce      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001870:	d106      	bne.n	8001880 <HAL_RCC_OscConfig+0x244>
 8001872:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a1a      	ldr	r2, [pc, #104]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 8001878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e01d      	b.n	80018bc <HAL_RCC_OscConfig+0x280>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001888:	d10c      	bne.n	80018a4 <HAL_RCC_OscConfig+0x268>
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 8001890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a11      	ldr	r2, [pc, #68]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 800189c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e00b      	b.n	80018bc <HAL_RCC_OscConfig+0x280>
 80018a4:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0d      	ldr	r2, [pc, #52]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 80018aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <HAL_RCC_OscConfig+0x2a4>)
 80018b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d01c      	beq.n	80018fe <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff f92a 	bl	8000b1c <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ca:	e011      	b.n	80018f0 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018cc:	f7ff f926 	bl	8000b1c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b64      	cmp	r3, #100	; 0x64
 80018d8:	d90a      	bls.n	80018f0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e293      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	08002eb0 	.word	0x08002eb0
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018f0:	4bae      	ldr	r3, [pc, #696]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0e7      	beq.n	80018cc <HAL_RCC_OscConfig+0x290>
 80018fc:	e014      	b.n	8001928 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fe:	f7ff f90d 	bl	8000b1c <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001906:	f7ff f909 	bl	8000b1c <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b64      	cmp	r3, #100	; 0x64
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e276      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001918:	4ba4      	ldr	r3, [pc, #656]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f0      	bne.n	8001906 <HAL_RCC_OscConfig+0x2ca>
 8001924:	e000      	b.n	8001928 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001926:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d060      	beq.n	80019f6 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2b04      	cmp	r3, #4
 8001938:	d005      	beq.n	8001946 <HAL_RCC_OscConfig+0x30a>
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	2b0c      	cmp	r3, #12
 800193e:	d119      	bne.n	8001974 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	2b02      	cmp	r3, #2
 8001944:	d116      	bne.n	8001974 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001946:	4b99      	ldr	r3, [pc, #612]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194e:	2b00      	cmp	r3, #0
 8001950:	d005      	beq.n	800195e <HAL_RCC_OscConfig+0x322>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e253      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195e:	4b93      	ldr	r3, [pc, #588]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	061b      	lsls	r3, r3, #24
 800196c:	498f      	ldr	r1, [pc, #572]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 800196e:	4313      	orrs	r3, r2
 8001970:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001972:	e040      	b.n	80019f6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d023      	beq.n	80019c4 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800197c:	4b8b      	ldr	r3, [pc, #556]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a8a      	ldr	r2, [pc, #552]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 8001982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff f8c8 	bl	8000b1c <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001990:	f7ff f8c4 	bl	8000b1c <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e231      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019a2:	4b82      	ldr	r3, [pc, #520]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ae:	4b7f      	ldr	r3, [pc, #508]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	061b      	lsls	r3, r3, #24
 80019bc:	497b      	ldr	r1, [pc, #492]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	604b      	str	r3, [r1, #4]
 80019c2:	e018      	b.n	80019f6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c4:	4b79      	ldr	r3, [pc, #484]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a78      	ldr	r2, [pc, #480]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 80019ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d0:	f7ff f8a4 	bl	8000b1c <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d8:	f7ff f8a0 	bl	8000b1c <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e20d      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019ea:	4b70      	ldr	r3, [pc, #448]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d03c      	beq.n	8001a7c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d01c      	beq.n	8001a44 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0a:	4b68      	ldr	r3, [pc, #416]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 8001a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a10:	4a66      	ldr	r2, [pc, #408]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1a:	f7ff f87f 	bl	8000b1c <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a22:	f7ff f87b 	bl	8000b1c <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e1e8      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a34:	4b5d      	ldr	r3, [pc, #372]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 8001a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0ef      	beq.n	8001a22 <HAL_RCC_OscConfig+0x3e6>
 8001a42:	e01b      	b.n	8001a7c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a44:	4b59      	ldr	r3, [pc, #356]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 8001a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a4a:	4a58      	ldr	r2, [pc, #352]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 8001a4c:	f023 0301 	bic.w	r3, r3, #1
 8001a50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a54:	f7ff f862 	bl	8000b1c <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5c:	f7ff f85e 	bl	8000b1c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e1cb      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a6e:	4b4f      	ldr	r3, [pc, #316]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 8001a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1ef      	bne.n	8001a5c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80a5 	beq.w	8001bd4 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a8e:	4b47      	ldr	r3, [pc, #284]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 8001a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10d      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	4b44      	ldr	r3, [pc, #272]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9e:	4a43      	ldr	r2, [pc, #268]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa6:	4b41      	ldr	r3, [pc, #260]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab6:	4b3e      	ldr	r3, [pc, #248]	; (8001bb0 <HAL_RCC_OscConfig+0x574>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d118      	bne.n	8001af4 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ac2:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <HAL_RCC_OscConfig+0x574>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a3a      	ldr	r2, [pc, #232]	; (8001bb0 <HAL_RCC_OscConfig+0x574>)
 8001ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ace:	f7ff f825 	bl	8000b1c <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad6:	f7ff f821 	bl	8000b1c <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e18e      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae8:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <HAL_RCC_OscConfig+0x574>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d108      	bne.n	8001b0e <HAL_RCC_OscConfig+0x4d2>
 8001afc:	4b2b      	ldr	r3, [pc, #172]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 8001afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b02:	4a2a      	ldr	r2, [pc, #168]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b0c:	e024      	b.n	8001b58 <HAL_RCC_OscConfig+0x51c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	2b05      	cmp	r3, #5
 8001b14:	d110      	bne.n	8001b38 <HAL_RCC_OscConfig+0x4fc>
 8001b16:	4b25      	ldr	r3, [pc, #148]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 8001b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1c:	4a23      	ldr	r2, [pc, #140]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b26:	4b21      	ldr	r3, [pc, #132]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 8001b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2c:	4a1f      	ldr	r2, [pc, #124]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b36:	e00f      	b.n	8001b58 <HAL_RCC_OscConfig+0x51c>
 8001b38:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 8001b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3e:	4a1b      	ldr	r2, [pc, #108]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 8001b40:	f023 0301 	bic.w	r3, r3, #1
 8001b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b48:	4b18      	ldr	r3, [pc, #96]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 8001b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4e:	4a17      	ldr	r2, [pc, #92]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 8001b50:	f023 0304 	bic.w	r3, r3, #4
 8001b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d016      	beq.n	8001b8e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b60:	f7fe ffdc 	bl	8000b1c <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b66:	e00a      	b.n	8001b7e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b68:	f7fe ffd8 	bl	8000b1c <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e143      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_RCC_OscConfig+0x570>)
 8001b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0ed      	beq.n	8001b68 <HAL_RCC_OscConfig+0x52c>
 8001b8c:	e019      	b.n	8001bc2 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8e:	f7fe ffc5 	bl	8000b1c <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b94:	e00e      	b.n	8001bb4 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b96:	f7fe ffc1 	bl	8000b1c <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d905      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e12c      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bb4:	4b96      	ldr	r3, [pc, #600]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1e9      	bne.n	8001b96 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bc2:	7ffb      	ldrb	r3, [r7, #31]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d105      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc8:	4b91      	ldr	r3, [pc, #580]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bcc:	4a90      	ldr	r2, [pc, #576]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d03c      	beq.n	8001c5a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d01c      	beq.n	8001c22 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001be8:	4b89      	ldr	r3, [pc, #548]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001bea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bee:	4a88      	ldr	r2, [pc, #544]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf8:	f7fe ff90 	bl	8000b1c <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c00:	f7fe ff8c 	bl	8000b1c <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e0f9      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c12:	4b7f      	ldr	r3, [pc, #508]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001c14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0ef      	beq.n	8001c00 <HAL_RCC_OscConfig+0x5c4>
 8001c20:	e01b      	b.n	8001c5a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c22:	4b7b      	ldr	r3, [pc, #492]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001c24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c28:	4a79      	ldr	r2, [pc, #484]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001c2a:	f023 0301 	bic.w	r3, r3, #1
 8001c2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c32:	f7fe ff73 	bl	8000b1c <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c3a:	f7fe ff6f 	bl	8000b1c <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e0dc      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c4c:	4b70      	ldr	r3, [pc, #448]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001c4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1ef      	bne.n	8001c3a <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 80d0 	beq.w	8001e04 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2b0c      	cmp	r3, #12
 8001c68:	f000 808d 	beq.w	8001d86 <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d15a      	bne.n	8001d2a <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c74:	4b66      	ldr	r3, [pc, #408]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a65      	ldr	r2, [pc, #404]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001c7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7fe ff4c 	bl	8000b1c <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c88:	f7fe ff48 	bl	8000b1c <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e0b5      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c9a:	4b5d      	ldr	r3, [pc, #372]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca6:	4b5a      	ldr	r3, [pc, #360]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	4b5a      	ldr	r3, [pc, #360]	; (8001e14 <HAL_RCC_OscConfig+0x7d8>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cb6:	3a01      	subs	r2, #1
 8001cb8:	0112      	lsls	r2, r2, #4
 8001cba:	4311      	orrs	r1, r2
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cc0:	0212      	lsls	r2, r2, #8
 8001cc2:	4311      	orrs	r1, r2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cc8:	0852      	lsrs	r2, r2, #1
 8001cca:	3a01      	subs	r2, #1
 8001ccc:	0552      	lsls	r2, r2, #21
 8001cce:	4311      	orrs	r1, r2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cd4:	0852      	lsrs	r2, r2, #1
 8001cd6:	3a01      	subs	r2, #1
 8001cd8:	0652      	lsls	r2, r2, #25
 8001cda:	4311      	orrs	r1, r2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ce0:	06d2      	lsls	r2, r2, #27
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	494a      	ldr	r1, [pc, #296]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cea:	4b49      	ldr	r3, [pc, #292]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a48      	ldr	r2, [pc, #288]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001cf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cf4:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cf6:	4b46      	ldr	r3, [pc, #280]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	4a45      	ldr	r2, [pc, #276]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001cfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d00:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d02:	f7fe ff0b 	bl	8000b1c <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0a:	f7fe ff07 	bl	8000b1c <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e074      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1c:	4b3c      	ldr	r3, [pc, #240]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0x6ce>
 8001d28:	e06c      	b.n	8001e04 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2a:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a38      	ldr	r2, [pc, #224]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001d30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d34:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001d36:	4b36      	ldr	r3, [pc, #216]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d105      	bne.n	8001d4e <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d42:	4b33      	ldr	r3, [pc, #204]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	4a32      	ldr	r2, [pc, #200]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001d48:	f023 0303 	bic.w	r3, r3, #3
 8001d4c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d4e:	4b30      	ldr	r3, [pc, #192]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	4a2f      	ldr	r2, [pc, #188]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001d54:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5e:	f7fe fedd 	bl	8000b1c <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d66:	f7fe fed9 	bl	8000b1c <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e046      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d78:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f0      	bne.n	8001d66 <HAL_RCC_OscConfig+0x72a>
 8001d84:	e03e      	b.n	8001e04 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e039      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001d92:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <HAL_RCC_OscConfig+0x7d4>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f003 0203 	and.w	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d12c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	3b01      	subs	r3, #1
 8001db2:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d123      	bne.n	8001e00 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc2:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d11b      	bne.n	8001e00 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd2:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d113      	bne.n	8001e00 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de2:	085b      	lsrs	r3, r3, #1
 8001de4:	3b01      	subs	r3, #1
 8001de6:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d109      	bne.n	8001e00 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	085b      	lsrs	r3, r3, #1
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3720      	adds	r7, #32
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	019d800c 	.word	0x019d800c

08001e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e10f      	b.n	8002050 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e30:	4b89      	ldr	r3, [pc, #548]	; (8002058 <HAL_RCC_ClockConfig+0x240>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d910      	bls.n	8001e60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3e:	4b86      	ldr	r3, [pc, #536]	; (8002058 <HAL_RCC_ClockConfig+0x240>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 020f 	bic.w	r2, r3, #15
 8001e46:	4984      	ldr	r1, [pc, #528]	; (8002058 <HAL_RCC_ClockConfig+0x240>)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4e:	4b82      	ldr	r3, [pc, #520]	; (8002058 <HAL_RCC_ClockConfig+0x240>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d001      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0f7      	b.n	8002050 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 8089 	beq.w	8001f80 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d133      	bne.n	8001ede <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e76:	4b79      	ldr	r3, [pc, #484]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e0e4      	b.n	8002050 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001e86:	f000 f9d7 	bl	8002238 <RCC_GetSysClockFreqFromPLLSource>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	4b74      	ldr	r3, [pc, #464]	; (8002060 <HAL_RCC_ClockConfig+0x248>)
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d955      	bls.n	8001f3e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001e92:	4b72      	ldr	r3, [pc, #456]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10a      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e9e:	4b6f      	ldr	r3, [pc, #444]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ea6:	4a6d      	ldr	r2, [pc, #436]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	e044      	b.n	8001f3e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d03e      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x126>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d13a      	bne.n	8001f3e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ec8:	4b64      	ldr	r3, [pc, #400]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ed0:	4a62      	ldr	r2, [pc, #392]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	e02f      	b.n	8001f3e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d107      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ee6:	4b5d      	ldr	r3, [pc, #372]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d115      	bne.n	8001f1e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e0ac      	b.n	8002050 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d107      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001efe:	4b57      	ldr	r3, [pc, #348]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d109      	bne.n	8001f1e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e0a0      	b.n	8002050 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f0e:	4b53      	ldr	r3, [pc, #332]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e098      	b.n	8002050 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001f1e:	f000 f8a7 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 8001f22:	4602      	mov	r2, r0
 8001f24:	4b4e      	ldr	r3, [pc, #312]	; (8002060 <HAL_RCC_ClockConfig+0x248>)
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d909      	bls.n	8001f3e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f2a:	4b4c      	ldr	r3, [pc, #304]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f32:	4a4a      	ldr	r2, [pc, #296]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f38:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f3e:	4b47      	ldr	r3, [pc, #284]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f023 0203 	bic.w	r2, r3, #3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4944      	ldr	r1, [pc, #272]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f50:	f7fe fde4 	bl	8000b1c <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f56:	e00a      	b.n	8001f6e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f58:	f7fe fde0 	bl	8000b1c <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e070      	b.n	8002050 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	4b3b      	ldr	r3, [pc, #236]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 020c 	and.w	r2, r3, #12
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d1eb      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d009      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f8c:	4b33      	ldr	r3, [pc, #204]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	4930      	ldr	r1, [pc, #192]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	608b      	str	r3, [r1, #8]
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x19a>
  }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2b80      	cmp	r3, #128	; 0x80
 8001fa4:	d105      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001fa6:	4b2d      	ldr	r3, [pc, #180]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	4a2c      	ldr	r2, [pc, #176]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001fac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fb0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb2:	4b29      	ldr	r3, [pc, #164]	; (8002058 <HAL_RCC_ClockConfig+0x240>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d210      	bcs.n	8001fe2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc0:	4b25      	ldr	r3, [pc, #148]	; (8002058 <HAL_RCC_ClockConfig+0x240>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f023 020f 	bic.w	r2, r3, #15
 8001fc8:	4923      	ldr	r1, [pc, #140]	; (8002058 <HAL_RCC_ClockConfig+0x240>)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd0:	4b21      	ldr	r3, [pc, #132]	; (8002058 <HAL_RCC_ClockConfig+0x240>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d001      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e036      	b.n	8002050 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d008      	beq.n	8002000 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fee:	4b1b      	ldr	r3, [pc, #108]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	4918      	ldr	r1, [pc, #96]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b00      	cmp	r3, #0
 800200a:	d009      	beq.n	8002020 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800200c:	4b13      	ldr	r3, [pc, #76]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4910      	ldr	r1, [pc, #64]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 800201c:	4313      	orrs	r3, r2
 800201e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002020:	f000 f826 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 8002024:	4601      	mov	r1, r0
 8002026:	4b0d      	ldr	r3, [pc, #52]	; (800205c <HAL_RCC_ClockConfig+0x244>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	091b      	lsrs	r3, r3, #4
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	4a0c      	ldr	r2, [pc, #48]	; (8002064 <HAL_RCC_ClockConfig+0x24c>)
 8002032:	5cd3      	ldrb	r3, [r2, r3]
 8002034:	f003 031f 	and.w	r3, r3, #31
 8002038:	fa21 f303 	lsr.w	r3, r1, r3
 800203c:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <HAL_RCC_ClockConfig+0x250>)
 800203e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002040:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_RCC_ClockConfig+0x254>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fd1d 	bl	8000a84 <HAL_InitTick>
 800204a:	4603      	mov	r3, r0
 800204c:	73fb      	strb	r3, [r7, #15]

  return status;
 800204e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40022000 	.word	0x40022000
 800205c:	40021000 	.word	0x40021000
 8002060:	04c4b400 	.word	0x04c4b400
 8002064:	08002eb0 	.word	0x08002eb0
 8002068:	20000000 	.word	0x20000000
 800206c:	20000004 	.word	0x20000004

08002070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800207e:	4b3d      	ldr	r3, [pc, #244]	; (8002174 <HAL_RCC_GetSysClockFreq+0x104>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 030c 	and.w	r3, r3, #12
 8002086:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002088:	4b3a      	ldr	r3, [pc, #232]	; (8002174 <HAL_RCC_GetSysClockFreq+0x104>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	2b0c      	cmp	r3, #12
 800209c:	d121      	bne.n	80020e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d11e      	bne.n	80020e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020a4:	4b33      	ldr	r3, [pc, #204]	; (8002174 <HAL_RCC_GetSysClockFreq+0x104>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d107      	bne.n	80020c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020b0:	4b30      	ldr	r3, [pc, #192]	; (8002174 <HAL_RCC_GetSysClockFreq+0x104>)
 80020b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	f003 030f 	and.w	r3, r3, #15
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	e005      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020c0:	4b2c      	ldr	r3, [pc, #176]	; (8002174 <HAL_RCC_GetSysClockFreq+0x104>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020cc:	4a2a      	ldr	r2, [pc, #168]	; (8002178 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10d      	bne.n	80020f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020e0:	e00a      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d102      	bne.n	80020ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020e8:	4b24      	ldr	r3, [pc, #144]	; (800217c <HAL_RCC_GetSysClockFreq+0x10c>)
 80020ea:	61bb      	str	r3, [r7, #24]
 80020ec:	e004      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020f4:	4b22      	ldr	r3, [pc, #136]	; (8002180 <HAL_RCC_GetSysClockFreq+0x110>)
 80020f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	2b0c      	cmp	r3, #12
 80020fc:	d133      	bne.n	8002166 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020fe:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <HAL_RCC_GetSysClockFreq+0x104>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d002      	beq.n	8002114 <HAL_RCC_GetSysClockFreq+0xa4>
 800210e:	2b03      	cmp	r3, #3
 8002110:	d003      	beq.n	800211a <HAL_RCC_GetSysClockFreq+0xaa>
 8002112:	e005      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002114:	4b19      	ldr	r3, [pc, #100]	; (800217c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002116:	617b      	str	r3, [r7, #20]
      break;
 8002118:	e005      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800211a:	4b19      	ldr	r3, [pc, #100]	; (8002180 <HAL_RCC_GetSysClockFreq+0x110>)
 800211c:	617b      	str	r3, [r7, #20]
      break;
 800211e:	e002      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	617b      	str	r3, [r7, #20]
      break;
 8002124:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <HAL_RCC_GetSysClockFreq+0x104>)
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	091b      	lsrs	r3, r3, #4
 800212c:	f003 030f 	and.w	r3, r3, #15
 8002130:	3301      	adds	r3, #1
 8002132:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002134:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <HAL_RCC_GetSysClockFreq+0x104>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	0a1b      	lsrs	r3, r3, #8
 800213a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	fb02 f203 	mul.w	r2, r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	fbb2 f3f3 	udiv	r3, r2, r3
 800214a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <HAL_RCC_GetSysClockFreq+0x104>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	0e5b      	lsrs	r3, r3, #25
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	3301      	adds	r3, #1
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	fbb2 f3f3 	udiv	r3, r2, r3
 8002164:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002166:	69bb      	ldr	r3, [r7, #24]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3724      	adds	r7, #36	; 0x24
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	40021000 	.word	0x40021000
 8002178:	08002ec0 	.word	0x08002ec0
 800217c:	00f42400 	.word	0x00f42400
 8002180:	007a1200 	.word	0x007a1200

08002184 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800218c:	2300      	movs	r3, #0
 800218e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002190:	4b27      	ldr	r3, [pc, #156]	; (8002230 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800219c:	f7ff f97a 	bl	8001494 <HAL_PWREx_GetVoltageRange>
 80021a0:	6178      	str	r0, [r7, #20]
 80021a2:	e014      	b.n	80021ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021a4:	4b22      	ldr	r3, [pc, #136]	; (8002230 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80021a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a8:	4a21      	ldr	r2, [pc, #132]	; (8002230 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80021aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ae:	6593      	str	r3, [r2, #88]	; 0x58
 80021b0:	4b1f      	ldr	r3, [pc, #124]	; (8002230 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021bc:	f7ff f96a 	bl	8001494 <HAL_PWREx_GetVoltageRange>
 80021c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021c2:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	4a1a      	ldr	r2, [pc, #104]	; (8002230 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80021c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021d4:	d10b      	bne.n	80021ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b80      	cmp	r3, #128	; 0x80
 80021da:	d913      	bls.n	8002204 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2ba0      	cmp	r3, #160	; 0xa0
 80021e0:	d902      	bls.n	80021e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021e2:	2302      	movs	r3, #2
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	e00d      	b.n	8002204 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021e8:	2301      	movs	r3, #1
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	e00a      	b.n	8002204 <RCC_SetFlashLatencyFromMSIRange+0x80>
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b7f      	cmp	r3, #127	; 0x7f
 80021f2:	d902      	bls.n	80021fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80021f4:	2302      	movs	r3, #2
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	e004      	b.n	8002204 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b70      	cmp	r3, #112	; 0x70
 80021fe:	d101      	bne.n	8002204 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002200:	2301      	movs	r3, #1
 8002202:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f023 020f 	bic.w	r2, r3, #15
 800220c:	4909      	ldr	r1, [pc, #36]	; (8002234 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002214:	4b07      	ldr	r3, [pc, #28]	; (8002234 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 030f 	and.w	r3, r3, #15
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	429a      	cmp	r2, r3
 8002220:	d001      	beq.n	8002226 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000
 8002234:	40022000 	.word	0x40022000

08002238 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002238:	b480      	push	{r7}
 800223a:	b087      	sub	sp, #28
 800223c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002242:	4b2d      	ldr	r3, [pc, #180]	; (80022f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d118      	bne.n	8002280 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800224e:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d107      	bne.n	800226a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800225a:	4b27      	ldr	r3, [pc, #156]	; (80022f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800225c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002260:	0a1b      	lsrs	r3, r3, #8
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	e005      	b.n	8002276 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800226a:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	091b      	lsrs	r3, r3, #4
 8002270:	f003 030f 	and.w	r3, r3, #15
 8002274:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002276:	4a21      	ldr	r2, [pc, #132]	; (80022fc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002280:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2b02      	cmp	r3, #2
 800228e:	d002      	beq.n	8002296 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8002290:	2b03      	cmp	r3, #3
 8002292:	d003      	beq.n	800229c <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002294:	e005      	b.n	80022a2 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002296:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002298:	613b      	str	r3, [r7, #16]
    break;
 800229a:	e005      	b.n	80022a8 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800229e:	613b      	str	r3, [r7, #16]
    break;
 80022a0:	e002      	b.n	80022a8 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	613b      	str	r3, [r7, #16]
    break;
 80022a6:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	3301      	adds	r3, #1
 80022b4:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	fb02 f203 	mul.w	r2, r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022cc:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	0e5b      	lsrs	r3, r3, #25
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	3301      	adds	r3, #1
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e6:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80022e8:	683b      	ldr	r3, [r7, #0]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40021000 	.word	0x40021000
 80022fc:	08002ec0 	.word	0x08002ec0
 8002300:	00f42400 	.word	0x00f42400
 8002304:	007a1200 	.word	0x007a1200

08002308 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e07c      	b.n	8002414 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d106      	bne.n	800233a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7fe fa5f 	bl	80007f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2202      	movs	r2, #2
 800233e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002350:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800235a:	d902      	bls.n	8002362 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	e002      	b.n	8002368 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002366:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002370:	d007      	beq.n	8002382 <HAL_SPI_Init+0x7a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800237a:	d002      	beq.n	8002382 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10b      	bne.n	80023a2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002392:	d903      	bls.n	800239c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	631a      	str	r2, [r3, #48]	; 0x30
 800239a:	e002      	b.n	80023a2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	ea42 0103 	orr.w	r1, r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	0c1b      	lsrs	r3, r3, #16
 80023e2:	f003 0204 	and.w	r2, r3, #4
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	ea42 0103 	orr.w	r1, r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	430a      	orrs	r2, r1
 8002402:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	4613      	mov	r3, r2
 800242a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_SPI_Transmit+0x22>
 800243a:	2302      	movs	r3, #2
 800243c:	e150      	b.n	80026e0 <HAL_SPI_Transmit+0x2c4>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002446:	f7fe fb69 	bl	8000b1c <HAL_GetTick>
 800244a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b01      	cmp	r3, #1
 800245a:	d002      	beq.n	8002462 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800245c:	2302      	movs	r3, #2
 800245e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002460:	e135      	b.n	80026ce <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <HAL_SPI_Transmit+0x52>
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d102      	bne.n	8002474 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002472:	e12c      	b.n	80026ce <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2203      	movs	r2, #3
 8002478:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	88fa      	ldrh	r2, [r7, #6]
 800248c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	88fa      	ldrh	r2, [r7, #6]
 8002492:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024be:	d107      	bne.n	80024d0 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024da:	2b40      	cmp	r3, #64	; 0x40
 80024dc:	d007      	beq.n	80024ee <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024f6:	d94b      	bls.n	8002590 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <HAL_SPI_Transmit+0xea>
 8002500:	8afb      	ldrh	r3, [r7, #22]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d13e      	bne.n	8002584 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250a:	881a      	ldrh	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002516:	1c9a      	adds	r2, r3, #2
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800252a:	e02b      	b.n	8002584 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b02      	cmp	r3, #2
 8002538:	d112      	bne.n	8002560 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253e:	881a      	ldrh	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254a:	1c9a      	adds	r2, r3, #2
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002554:	b29b      	uxth	r3, r3
 8002556:	3b01      	subs	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800255e:	e011      	b.n	8002584 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002560:	f7fe fadc 	bl	8000b1c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d803      	bhi.n	8002578 <HAL_SPI_Transmit+0x15c>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002576:	d102      	bne.n	800257e <HAL_SPI_Transmit+0x162>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d102      	bne.n	8002584 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002582:	e0a4      	b.n	80026ce <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002588:	b29b      	uxth	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1ce      	bne.n	800252c <HAL_SPI_Transmit+0x110>
 800258e:	e07c      	b.n	800268a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <HAL_SPI_Transmit+0x182>
 8002598:	8afb      	ldrh	r3, [r7, #22]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d170      	bne.n	8002680 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d912      	bls.n	80025ce <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ac:	881a      	ldrh	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b8:	1c9a      	adds	r2, r3, #2
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	3b02      	subs	r3, #2
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025cc:	e058      	b.n	8002680 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	330c      	adds	r3, #12
 80025d8:	7812      	ldrb	r2, [r2, #0]
 80025da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80025f4:	e044      	b.n	8002680 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b02      	cmp	r3, #2
 8002602:	d12b      	bne.n	800265c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002608:	b29b      	uxth	r3, r3
 800260a:	2b01      	cmp	r3, #1
 800260c:	d912      	bls.n	8002634 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002612:	881a      	ldrh	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261e:	1c9a      	adds	r2, r3, #2
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002628:	b29b      	uxth	r3, r3
 800262a:	3b02      	subs	r3, #2
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002632:	e025      	b.n	8002680 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	330c      	adds	r3, #12
 800263e:	7812      	ldrb	r2, [r2, #0]
 8002640:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002650:	b29b      	uxth	r3, r3
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	87da      	strh	r2, [r3, #62]	; 0x3e
 800265a:	e011      	b.n	8002680 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800265c:	f7fe fa5e 	bl	8000b1c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d803      	bhi.n	8002674 <HAL_SPI_Transmit+0x258>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002672:	d102      	bne.n	800267a <HAL_SPI_Transmit+0x25e>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d102      	bne.n	8002680 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800267e:	e026      	b.n	80026ce <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1b5      	bne.n	80025f6 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	6839      	ldr	r1, [r7, #0]
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fb14 	bl	8002cbc <SPI_EndRxTxTransaction>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2220      	movs	r2, #32
 800269e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10a      	bne.n	80026be <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026a8:	2300      	movs	r3, #0
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	77fb      	strb	r3, [r7, #31]
 80026ca:	e000      	b.n	80026ce <HAL_SPI_Transmit+0x2b2>
  }

error:
 80026cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80026de:	7ffb      	ldrb	r3, [r7, #31]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3720      	adds	r7, #32
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08a      	sub	sp, #40	; 0x28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
 80026f4:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80026f6:	2301      	movs	r3, #1
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <HAL_SPI_TransmitReceive+0x26>
 800270a:	2302      	movs	r3, #2
 800270c:	e1fb      	b.n	8002b06 <HAL_SPI_TransmitReceive+0x41e>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002716:	f7fe fa01 	bl	8000b1c <HAL_GetTick>
 800271a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002722:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800272a:	887b      	ldrh	r3, [r7, #2]
 800272c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800272e:	887b      	ldrh	r3, [r7, #2]
 8002730:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002732:	7efb      	ldrb	r3, [r7, #27]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d00e      	beq.n	8002756 <HAL_SPI_TransmitReceive+0x6e>
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800273e:	d106      	bne.n	800274e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <HAL_SPI_TransmitReceive+0x66>
 8002748:	7efb      	ldrb	r3, [r7, #27]
 800274a:	2b04      	cmp	r3, #4
 800274c:	d003      	beq.n	8002756 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800274e:	2302      	movs	r3, #2
 8002750:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002754:	e1cd      	b.n	8002af2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_SPI_TransmitReceive+0x80>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <HAL_SPI_TransmitReceive+0x80>
 8002762:	887b      	ldrh	r3, [r7, #2]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d103      	bne.n	8002770 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800276e:	e1c0      	b.n	8002af2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b04      	cmp	r3, #4
 800277a:	d003      	beq.n	8002784 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2205      	movs	r2, #5
 8002780:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	887a      	ldrh	r2, [r7, #2]
 8002794:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	887a      	ldrh	r2, [r7, #2]
 800279c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	887a      	ldrh	r2, [r7, #2]
 80027aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	887a      	ldrh	r2, [r7, #2]
 80027b0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027c6:	d802      	bhi.n	80027ce <HAL_SPI_TransmitReceive+0xe6>
 80027c8:	8a3b      	ldrh	r3, [r7, #16]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d908      	bls.n	80027e0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	e007      	b.n	80027f0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027ee:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fa:	2b40      	cmp	r3, #64	; 0x40
 80027fc:	d007      	beq.n	800280e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800280c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002816:	d97c      	bls.n	8002912 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <HAL_SPI_TransmitReceive+0x13e>
 8002820:	8a7b      	ldrh	r3, [r7, #18]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d169      	bne.n	80028fa <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	881a      	ldrh	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002836:	1c9a      	adds	r2, r3, #2
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800284a:	e056      	b.n	80028fa <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b02      	cmp	r3, #2
 8002858:	d11b      	bne.n	8002892 <HAL_SPI_TransmitReceive+0x1aa>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d016      	beq.n	8002892 <HAL_SPI_TransmitReceive+0x1aa>
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	2b01      	cmp	r3, #1
 8002868:	d113      	bne.n	8002892 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286e:	881a      	ldrh	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287a:	1c9a      	adds	r2, r3, #2
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002884:	b29b      	uxth	r3, r3
 8002886:	3b01      	subs	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d11c      	bne.n	80028da <HAL_SPI_TransmitReceive+0x1f2>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d016      	beq.n	80028da <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	b292      	uxth	r2, r2
 80028b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	1c9a      	adds	r2, r3, #2
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028d6:	2301      	movs	r3, #1
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028da:	f7fe f91f 	bl	8000b1c <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d807      	bhi.n	80028fa <HAL_SPI_TransmitReceive+0x212>
 80028ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d003      	beq.n	80028fa <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80028f8:	e0fb      	b.n	8002af2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028fe:	b29b      	uxth	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1a3      	bne.n	800284c <HAL_SPI_TransmitReceive+0x164>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800290a:	b29b      	uxth	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d19d      	bne.n	800284c <HAL_SPI_TransmitReceive+0x164>
 8002910:	e0df      	b.n	8002ad2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_SPI_TransmitReceive+0x23a>
 800291a:	8a7b      	ldrh	r3, [r7, #18]
 800291c:	2b01      	cmp	r3, #1
 800291e:	f040 80cb 	bne.w	8002ab8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b01      	cmp	r3, #1
 800292a:	d912      	bls.n	8002952 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002930:	881a      	ldrh	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293c:	1c9a      	adds	r2, r3, #2
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b02      	subs	r3, #2
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002950:	e0b2      	b.n	8002ab8 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	330c      	adds	r3, #12
 800295c:	7812      	ldrb	r2, [r2, #0]
 800295e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800296e:	b29b      	uxth	r3, r3
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002978:	e09e      	b.n	8002ab8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b02      	cmp	r3, #2
 8002986:	d134      	bne.n	80029f2 <HAL_SPI_TransmitReceive+0x30a>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800298c:	b29b      	uxth	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d02f      	beq.n	80029f2 <HAL_SPI_TransmitReceive+0x30a>
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	2b01      	cmp	r3, #1
 8002996:	d12c      	bne.n	80029f2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800299c:	b29b      	uxth	r3, r3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d912      	bls.n	80029c8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a6:	881a      	ldrh	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b2:	1c9a      	adds	r2, r3, #2
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029bc:	b29b      	uxth	r3, r3
 80029be:	3b02      	subs	r3, #2
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029c6:	e012      	b.n	80029ee <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	330c      	adds	r3, #12
 80029d2:	7812      	ldrb	r2, [r2, #0]
 80029d4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d148      	bne.n	8002a92 <HAL_SPI_TransmitReceive+0x3aa>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d042      	beq.n	8002a92 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d923      	bls.n	8002a60 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	b292      	uxth	r2, r2
 8002a24:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	1c9a      	adds	r2, r3, #2
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b02      	subs	r3, #2
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d81f      	bhi.n	8002a8e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	e016      	b.n	8002a8e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f103 020c 	add.w	r2, r3, #12
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	7812      	ldrb	r2, [r2, #0]
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a92:	f7fe f843 	bl	8000b1c <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d803      	bhi.n	8002aaa <HAL_SPI_TransmitReceive+0x3c2>
 8002aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa8:	d102      	bne.n	8002ab0 <HAL_SPI_TransmitReceive+0x3c8>
 8002aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d103      	bne.n	8002ab8 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002ab6:	e01c      	b.n	8002af2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f47f af5b 	bne.w	800297a <HAL_SPI_TransmitReceive+0x292>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f47f af54 	bne.w	800297a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 f8f0 	bl	8002cbc <SPI_EndRxTxTransaction>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d006      	beq.n	8002af0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2220      	movs	r2, #32
 8002aec:	661a      	str	r2, [r3, #96]	; 0x60
 8002aee:	e000      	b.n	8002af2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002af0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002b02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3728      	adds	r7, #40	; 0x28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	603b      	str	r3, [r7, #0]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b1e:	e04c      	b.n	8002bba <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b26:	d048      	beq.n	8002bba <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002b28:	f7fd fff8 	bl	8000b1c <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d902      	bls.n	8002b3e <SPI_WaitFlagStateUntilTimeout+0x30>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d13d      	bne.n	8002bba <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b56:	d111      	bne.n	8002b7c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b60:	d004      	beq.n	8002b6c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b6a:	d107      	bne.n	8002b7c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b84:	d10f      	bne.n	8002ba6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ba4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e00f      	b.n	8002bda <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	bf0c      	ite	eq
 8002bca:	2301      	moveq	r3, #1
 8002bcc:	2300      	movne	r3, #0
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d1a3      	bne.n	8002b20 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002bf0:	e057      	b.n	8002ca2 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002bf8:	d106      	bne.n	8002c08 <SPI_WaitFifoStateUntilTimeout+0x26>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d103      	bne.n	8002c08 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	330c      	adds	r3, #12
 8002c06:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0e:	d048      	beq.n	8002ca2 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002c10:	f7fd ff84 	bl	8000b1c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d902      	bls.n	8002c26 <SPI_WaitFifoStateUntilTimeout+0x44>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d13d      	bne.n	8002ca2 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c3e:	d111      	bne.n	8002c64 <SPI_WaitFifoStateUntilTimeout+0x82>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c48:	d004      	beq.n	8002c54 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c52:	d107      	bne.n	8002c64 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c6c:	d10f      	bne.n	8002c8e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e008      	b.n	8002cb4 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	4013      	ands	r3, r2
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d19f      	bne.n	8002bf2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f7ff ff84 	bl	8002be2 <SPI_WaitFifoStateUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d007      	beq.n	8002cf0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce4:	f043 0220 	orr.w	r2, r3, #32
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e027      	b.n	8002d40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2180      	movs	r1, #128	; 0x80
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f7ff ff07 	bl	8002b0e <SPI_WaitFlagStateUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d007      	beq.n	8002d16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0a:	f043 0220 	orr.w	r2, r3, #32
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e014      	b.n	8002d40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f7ff ff5d 	bl	8002be2 <SPI_WaitFifoStateUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d007      	beq.n	8002d3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d32:	f043 0220 	orr.w	r2, r3, #32
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e000      	b.n	8002d40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <__libc_init_array>:
 8002d48:	b570      	push	{r4, r5, r6, lr}
 8002d4a:	4e0d      	ldr	r6, [pc, #52]	; (8002d80 <__libc_init_array+0x38>)
 8002d4c:	4c0d      	ldr	r4, [pc, #52]	; (8002d84 <__libc_init_array+0x3c>)
 8002d4e:	1ba4      	subs	r4, r4, r6
 8002d50:	10a4      	asrs	r4, r4, #2
 8002d52:	2500      	movs	r5, #0
 8002d54:	42a5      	cmp	r5, r4
 8002d56:	d109      	bne.n	8002d6c <__libc_init_array+0x24>
 8002d58:	4e0b      	ldr	r6, [pc, #44]	; (8002d88 <__libc_init_array+0x40>)
 8002d5a:	4c0c      	ldr	r4, [pc, #48]	; (8002d8c <__libc_init_array+0x44>)
 8002d5c:	f000 f89c 	bl	8002e98 <_init>
 8002d60:	1ba4      	subs	r4, r4, r6
 8002d62:	10a4      	asrs	r4, r4, #2
 8002d64:	2500      	movs	r5, #0
 8002d66:	42a5      	cmp	r5, r4
 8002d68:	d105      	bne.n	8002d76 <__libc_init_array+0x2e>
 8002d6a:	bd70      	pop	{r4, r5, r6, pc}
 8002d6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d70:	4798      	blx	r3
 8002d72:	3501      	adds	r5, #1
 8002d74:	e7ee      	b.n	8002d54 <__libc_init_array+0xc>
 8002d76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d7a:	4798      	blx	r3
 8002d7c:	3501      	adds	r5, #1
 8002d7e:	e7f2      	b.n	8002d66 <__libc_init_array+0x1e>
 8002d80:	08002ef4 	.word	0x08002ef4
 8002d84:	08002ef4 	.word	0x08002ef4
 8002d88:	08002ef4 	.word	0x08002ef4
 8002d8c:	08002efc 	.word	0x08002efc

08002d90 <memset>:
 8002d90:	4402      	add	r2, r0
 8002d92:	4603      	mov	r3, r0
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d100      	bne.n	8002d9a <memset+0xa>
 8002d98:	4770      	bx	lr
 8002d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d9e:	e7f9      	b.n	8002d94 <memset+0x4>

08002da0 <register_fini>:
 8002da0:	4b02      	ldr	r3, [pc, #8]	; (8002dac <register_fini+0xc>)
 8002da2:	b113      	cbz	r3, 8002daa <register_fini+0xa>
 8002da4:	4802      	ldr	r0, [pc, #8]	; (8002db0 <register_fini+0x10>)
 8002da6:	f000 b805 	b.w	8002db4 <atexit>
 8002daa:	4770      	bx	lr
 8002dac:	00000000 	.word	0x00000000
 8002db0:	08002dc1 	.word	0x08002dc1

08002db4 <atexit>:
 8002db4:	2300      	movs	r3, #0
 8002db6:	4601      	mov	r1, r0
 8002db8:	461a      	mov	r2, r3
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 b816 	b.w	8002dec <__register_exitproc>

08002dc0 <__libc_fini_array>:
 8002dc0:	b538      	push	{r3, r4, r5, lr}
 8002dc2:	4d07      	ldr	r5, [pc, #28]	; (8002de0 <__libc_fini_array+0x20>)
 8002dc4:	4c07      	ldr	r4, [pc, #28]	; (8002de4 <__libc_fini_array+0x24>)
 8002dc6:	1b64      	subs	r4, r4, r5
 8002dc8:	10a4      	asrs	r4, r4, #2
 8002dca:	b91c      	cbnz	r4, 8002dd4 <__libc_fini_array+0x14>
 8002dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002dd0:	f000 b868 	b.w	8002ea4 <_fini>
 8002dd4:	3c01      	subs	r4, #1
 8002dd6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8002dda:	4798      	blx	r3
 8002ddc:	e7f5      	b.n	8002dca <__libc_fini_array+0xa>
 8002dde:	bf00      	nop
 8002de0:	08002efc 	.word	0x08002efc
 8002de4:	08002f00 	.word	0x08002f00

08002de8 <__retarget_lock_acquire_recursive>:
 8002de8:	4770      	bx	lr

08002dea <__retarget_lock_release_recursive>:
 8002dea:	4770      	bx	lr

08002dec <__register_exitproc>:
 8002dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002df0:	4c26      	ldr	r4, [pc, #152]	; (8002e8c <__register_exitproc+0xa0>)
 8002df2:	4606      	mov	r6, r0
 8002df4:	6820      	ldr	r0, [r4, #0]
 8002df6:	4698      	mov	r8, r3
 8002df8:	460f      	mov	r7, r1
 8002dfa:	4691      	mov	r9, r2
 8002dfc:	f7ff fff4 	bl	8002de8 <__retarget_lock_acquire_recursive>
 8002e00:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <__register_exitproc+0xa4>)
 8002e02:	681d      	ldr	r5, [r3, #0]
 8002e04:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8002e08:	b918      	cbnz	r0, 8002e12 <__register_exitproc+0x26>
 8002e0a:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8002e0e:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8002e12:	6843      	ldr	r3, [r0, #4]
 8002e14:	2b1f      	cmp	r3, #31
 8002e16:	dd19      	ble.n	8002e4c <__register_exitproc+0x60>
 8002e18:	4b1e      	ldr	r3, [pc, #120]	; (8002e94 <__register_exitproc+0xa8>)
 8002e1a:	b933      	cbnz	r3, 8002e2a <__register_exitproc+0x3e>
 8002e1c:	6820      	ldr	r0, [r4, #0]
 8002e1e:	f7ff ffe4 	bl	8002dea <__retarget_lock_release_recursive>
 8002e22:	f04f 30ff 	mov.w	r0, #4294967295
 8002e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e2a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002e2e:	f3af 8000 	nop.w
 8002e32:	2800      	cmp	r0, #0
 8002e34:	d0f2      	beq.n	8002e1c <__register_exitproc+0x30>
 8002e36:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8002e3a:	6003      	str	r3, [r0, #0]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	6042      	str	r2, [r0, #4]
 8002e40:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8002e44:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8002e48:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8002e4c:	6843      	ldr	r3, [r0, #4]
 8002e4e:	b19e      	cbz	r6, 8002e78 <__register_exitproc+0x8c>
 8002e50:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8002e54:	2201      	movs	r2, #1
 8002e56:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8002e5a:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	4311      	orrs	r1, r2
 8002e62:	2e02      	cmp	r6, #2
 8002e64:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8002e68:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8002e6c:	bf02      	ittt	eq
 8002e6e:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8002e72:	430a      	orreq	r2, r1
 8002e74:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	6042      	str	r2, [r0, #4]
 8002e7e:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8002e82:	6820      	ldr	r0, [r4, #0]
 8002e84:	f7ff ffb1 	bl	8002dea <__retarget_lock_release_recursive>
 8002e88:	2000      	movs	r0, #0
 8002e8a:	e7cc      	b.n	8002e26 <__register_exitproc+0x3a>
 8002e8c:	20000438 	.word	0x20000438
 8002e90:	08002ef0 	.word	0x08002ef0
 8002e94:	00000000 	.word	0x00000000

08002e98 <_init>:
 8002e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9a:	bf00      	nop
 8002e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9e:	bc08      	pop	{r3}
 8002ea0:	469e      	mov	lr, r3
 8002ea2:	4770      	bx	lr

08002ea4 <_fini>:
 8002ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea6:	bf00      	nop
 8002ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eaa:	bc08      	pop	{r3}
 8002eac:	469e      	mov	lr, r3
 8002eae:	4770      	bx	lr
