
EpdSpi_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f34  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0007a9dc  080070f4  080070f4  000170f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08081ad0  08081ad0  000a0078  2**0
                  CONTENTS
  4 .ARM          00000008  08081ad0  08081ad0  00091ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08081ad8  08081ad8  000a0078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08081ad8  08081ad8  00091ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08081adc  08081adc  00091adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08081ae0  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000078  08081b58  000a0078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08081b58  000a029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000a0078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014274  00000000  00000000  000a00a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b70  00000000  00000000  000b431c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ef0  00000000  00000000  000b6e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d58  00000000  00000000  000b7d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b2f7  00000000  00000000  000b8ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e691  00000000  00000000  000e3dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00102b3b  00000000  00000000  000f2460  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f4f9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041d8  00000000  00000000  001f5018  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000078 	.word	0x20000078
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080070dc 	.word	0x080070dc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	080070dc 	.word	0x080070dc

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <LCDWaitForReady>:

//-----------------------------------------------------------
//Host controller function 1---Wait for host data Bus Ready
//-----------------------------------------------------------
void LCDWaitForReady()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0

	//while(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET )

	uint8_t ulData = HAL_GPIO_ReadPin(EPD_HRDY_GPIO_Port, EPD_HRDY_Pin);
 80005a6:	2120      	movs	r1, #32
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ac:	f002 f83c 	bl	8002628 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	71fb      	strb	r3, [r7, #7]
	while(ulData == 0)
 80005b4:	e006      	b.n	80005c4 <LCDWaitForReady+0x24>
	{
		ulData = HAL_GPIO_ReadPin(EPD_HRDY_GPIO_Port, EPD_HRDY_Pin);
 80005b6:	2120      	movs	r1, #32
 80005b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005bc:	f002 f834 	bl	8002628 <HAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	71fb      	strb	r3, [r7, #7]
	while(ulData == 0)
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f5      	beq.n	80005b6 <LCDWaitForReady+0x16>
	}
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <LCDWriteCmdCode>:

//-----------------------------------------------------------
//Host controller function 2---Write command code to host data Bus
//-----------------------------------------------------------
void LCDWriteCmdCode(uint16_t usCmdCode)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	80fb      	strh	r3, [r7, #6]
	//uint16_t wPreamble = 0x6000;


	//uint8_t wPreamble[2] = {0x00, 0x60};
	//uint8_t wDat[2] = {usCmdCode, usCmdCode>>8};
	uint8_t dat[4]={0x00, 0x60, usCmdCode, usCmdCode>>8};
 80005de:	2300      	movs	r3, #0
 80005e0:	733b      	strb	r3, [r7, #12]
 80005e2:	2360      	movs	r3, #96	; 0x60
 80005e4:	737b      	strb	r3, [r7, #13]
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	73bb      	strb	r3, [r7, #14]
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	73fb      	strb	r3, [r7, #15]
	LCDWaitForReady();
 80005f6:	f7ff ffd3 	bl	80005a0 <LCDWaitForReady>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2101      	movs	r1, #1
 80005fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000602:	f002 f829 	bl	8002658 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, dat, 2, HAL_MAX_DELAY);
 8000606:	f107 010c 	add.w	r1, r7, #12
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	2202      	movs	r2, #2
 8000610:	4806      	ldr	r0, [pc, #24]	; (800062c <LCDWriteCmdCode+0x58>)
 8000612:	f003 fd3d 	bl	8004090 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
	//LCDWaitForReady();
	//HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000616:	2201      	movs	r2, #1
 8000618:	2101      	movs	r1, #1
 800061a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061e:	f002 f81b 	bl	8002658 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &CmdMsb, 1, HAL_MAX_DELAY);
	HAL_SPI_Transmit(&hspi1, &CmdLsb, 1, HAL_MAX_DELAY);

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
*/
}
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	200000e4 	.word	0x200000e4

08000630 <LCDWriteData>:

//-----------------------------------------------------------
//Host controller function 3---Write Data to host data Bus
//-----------------------------------------------------------
void LCDWriteData(uint16_t usData)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	80fb      	strh	r3, [r7, #6]

	uint8_t dat[4]={ 0x00, 0x00, (uint8_t)usData,(uint8_t)( usData>>8)};
 800063a:	2300      	movs	r3, #0
 800063c:	733b      	strb	r3, [r7, #12]
 800063e:	2300      	movs	r3, #0
 8000640:	737b      	strb	r3, [r7, #13]
 8000642:	88fb      	ldrh	r3, [r7, #6]
 8000644:	b2db      	uxtb	r3, r3
 8000646:	73bb      	strb	r3, [r7, #14]
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	0a1b      	lsrs	r3, r3, #8
 800064c:	b29b      	uxth	r3, r3
 800064e:	b2db      	uxtb	r3, r3
 8000650:	73fb      	strb	r3, [r7, #15]
	//uint8_t wPreamble[2] = {0x00, 0x00};
	//uint8_t wDat[2] = { (uint8_t)usData,(uint8_t)( usData>>8)};
	LCDWaitForReady();
 8000652:	f7ff ffa5 	bl	80005a0 <LCDWaitForReady>

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2101      	movs	r1, #1
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f001 fffb 	bl	8002658 <HAL_GPIO_WritePin>
	//HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
	HAL_SPI_Transmit(&hspi1, dat, 2, HAL_MAX_DELAY);
 8000662:	f107 010c 	add.w	r1, r7, #12
 8000666:	f04f 33ff 	mov.w	r3, #4294967295
 800066a:	2202      	movs	r2, #2
 800066c:	4806      	ldr	r0, [pc, #24]	; (8000688 <LCDWriteData+0x58>)
 800066e:	f003 fd0f 	bl	8004090 <HAL_SPI_Transmit>
	//LCDWaitForReady();
	//HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000672:	2201      	movs	r2, #1
 8000674:	2101      	movs	r1, #1
 8000676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067a:	f001 ffed 	bl	8002658 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &DatLsb, 1, HAL_MAX_DELAY);

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	200000e4 	.word	0x200000e4

0800068c <LCDWriteNData>:

void LCDWriteNData(uint16_t* pwBuf, uint32_t ulSizeWordCnt)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
	uint32_t i;


	uint8_t wPreamble[2] = {0x00, 0x00};
 8000696:	2300      	movs	r3, #0
 8000698:	743b      	strb	r3, [r7, #16]
 800069a:	2300      	movs	r3, #0
 800069c:	747b      	strb	r3, [r7, #17]
	uint8_t wDat[2];
	LCDWaitForReady();
 800069e:	f7ff ff7f 	bl	80005a0 <LCDWaitForReady>

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2101      	movs	r1, #1
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f001 ffd5 	bl	8002658 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 80006ae:	f107 0110 	add.w	r1, r7, #16
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	2201      	movs	r2, #1
 80006b8:	4818      	ldr	r0, [pc, #96]	; (800071c <LCDWriteNData+0x90>)
 80006ba:	f003 fce9 	bl	8004090 <HAL_SPI_Transmit>
	LCDWaitForReady();
 80006be:	f7ff ff6f 	bl	80005a0 <LCDWaitForReady>
	for(i=0;i<ulSizeWordCnt;i++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
 80006c6:	e01a      	b.n	80006fe <LCDWriteNData+0x72>
		{
		wDat[0]=pwBuf[i];
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	4413      	add	r3, r2
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	733b      	strb	r3, [r7, #12]
		wDat[1]=pwBuf[i]>>8;
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	0a1b      	lsrs	r3, r3, #8
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	737b      	strb	r3, [r7, #13]
		HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
 80006e8:	f107 010c 	add.w	r1, r7, #12
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
 80006f0:	2201      	movs	r2, #1
 80006f2:	480a      	ldr	r0, [pc, #40]	; (800071c <LCDWriteNData+0x90>)
 80006f4:	f003 fccc 	bl	8004090 <HAL_SPI_Transmit>
	for(i=0;i<ulSizeWordCnt;i++)
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	3301      	adds	r3, #1
 80006fc:	617b      	str	r3, [r7, #20]
 80006fe:	697a      	ldr	r2, [r7, #20]
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	429a      	cmp	r2, r3
 8000704:	d3e0      	bcc.n	80006c8 <LCDWriteNData+0x3c>
		}

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000706:	2201      	movs	r2, #1
 8000708:	2101      	movs	r1, #1
 800070a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070e:	f001 ffa3 	bl	8002658 <HAL_GPIO_WritePin>
	}

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 8000712:	bf00      	nop
 8000714:	3718      	adds	r7, #24
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200000e4 	.word	0x200000e4

08000720 <LCDReadData>:

//-----------------------------------------------------------
//Host controller function 4---Read Data from host data Bus
//-----------------------------------------------------------
uint16_t LCDReadData()
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af02      	add	r7, sp, #8

	uint8_t wRLsb[2];
	uint16_t wRData;
	uint8_t wdummy[2] = {0};
 8000726:	2300      	movs	r3, #0
 8000728:	813b      	strh	r3, [r7, #8]
	uint8_t rdummy[2] = {0};
 800072a:	2300      	movs	r3, #0
 800072c:	80bb      	strh	r3, [r7, #4]
	uint8_t wPreamble[2] = {0x00, 0x10};
 800072e:	2300      	movs	r3, #0
 8000730:	703b      	strb	r3, [r7, #0]
 8000732:	2310      	movs	r3, #16
 8000734:	707b      	strb	r3, [r7, #1]

	LCDWaitForReady();
 8000736:	f7ff ff33 	bl	80005a0 <LCDWaitForReady>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2101      	movs	r1, #1
 800073e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000742:	f001 ff89 	bl	8002658 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 8000746:	4639      	mov	r1, r7
 8000748:	f04f 33ff 	mov.w	r3, #4294967295
 800074c:	2201      	movs	r2, #1
 800074e:	4818      	ldr	r0, [pc, #96]	; (80007b0 <LCDReadData+0x90>)
 8000750:	f003 fc9e 	bl	8004090 <HAL_SPI_Transmit>
	LCDWaitForReady();
 8000754:	f7ff ff24 	bl	80005a0 <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, rdummy, 1,HAL_MAX_DELAY);
 8000758:	1d3a      	adds	r2, r7, #4
 800075a:	f107 0108 	add.w	r1, r7, #8
 800075e:	f04f 33ff 	mov.w	r3, #4294967295
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	2301      	movs	r3, #1
 8000766:	4812      	ldr	r0, [pc, #72]	; (80007b0 <LCDReadData+0x90>)
 8000768:	f003 fdf8 	bl	800435c <HAL_SPI_TransmitReceive>

	LCDWaitForReady();
 800076c:	f7ff ff18 	bl	80005a0 <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, wRLsb, 1,HAL_MAX_DELAY);
 8000770:	f107 020c 	add.w	r2, r7, #12
 8000774:	f107 0108 	add.w	r1, r7, #8
 8000778:	f04f 33ff 	mov.w	r3, #4294967295
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	2301      	movs	r3, #1
 8000780:	480b      	ldr	r0, [pc, #44]	; (80007b0 <LCDReadData+0x90>)
 8000782:	f003 fdeb 	bl	800435c <HAL_SPI_TransmitReceive>

	wRData = wRLsb[1]<<8;
 8000786:	7b7b      	ldrb	r3, [r7, #13]
 8000788:	b29b      	uxth	r3, r3
 800078a:	021b      	lsls	r3, r3, #8
 800078c:	81fb      	strh	r3, [r7, #14]
	wRData |= wRLsb[0];
 800078e:	7b3b      	ldrb	r3, [r7, #12]
 8000790:	b29a      	uxth	r2, r3
 8000792:	89fb      	ldrh	r3, [r7, #14]
 8000794:	4313      	orrs	r3, r2
 8000796:	81fb      	strh	r3, [r7, #14]
	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000798:	2201      	movs	r2, #1
 800079a:	2101      	movs	r1, #1
 800079c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a0:	f001 ff5a 	bl	8002658 <HAL_GPIO_WritePin>

	return wRData;
 80007a4:	89fb      	ldrh	r3, [r7, #14]
	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);

	return wRData;
	*/
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000e4 	.word	0x200000e4

080007b4 <LCDReadNData>:

//-----------------------------------------------------------
//  Read Burst N words Data
//-----------------------------------------------------------
void LCDReadNData(uint16_t* pwBuf, uint32_t ulSizeWordCnt)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af02      	add	r7, sp, #8
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]

	uint32_t i;

	uint8_t wRLsb[2];
	//uint16_t wRData;
	uint8_t wdummy[2] = {0};
 80007be:	2300      	movs	r3, #0
 80007c0:	82bb      	strh	r3, [r7, #20]
	uint8_t rdummy[2] = {0};
 80007c2:	2300      	movs	r3, #0
 80007c4:	823b      	strh	r3, [r7, #16]
	uint8_t wPreamble[2] = {0x00, 0x10};
 80007c6:	2300      	movs	r3, #0
 80007c8:	733b      	strb	r3, [r7, #12]
 80007ca:	2310      	movs	r3, #16
 80007cc:	737b      	strb	r3, [r7, #13]
	LCDWaitForReady();
 80007ce:	f7ff fee7 	bl	80005a0 <LCDWaitForReady>

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2101      	movs	r1, #1
 80007d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007da:	f001 ff3d 	bl	8002658 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 80007de:	f107 010c 	add.w	r1, r7, #12
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
 80007e6:	2201      	movs	r2, #1
 80007e8:	4823      	ldr	r0, [pc, #140]	; (8000878 <LCDReadNData+0xc4>)
 80007ea:	f003 fc51 	bl	8004090 <HAL_SPI_Transmit>

	LCDWaitForReady();
 80007ee:	f7ff fed7 	bl	80005a0 <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, rdummy, 1,HAL_MAX_DELAY);
 80007f2:	f107 0210 	add.w	r2, r7, #16
 80007f6:	f107 0114 	add.w	r1, r7, #20
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	2301      	movs	r3, #1
 8000802:	481d      	ldr	r0, [pc, #116]	; (8000878 <LCDReadNData+0xc4>)
 8000804:	f003 fdaa 	bl	800435c <HAL_SPI_TransmitReceive>

	LCDWaitForReady();
 8000808:	f7ff feca 	bl	80005a0 <LCDWaitForReady>

		for(i=0;i<ulSizeWordCnt;i++)
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
 8000810:	e024      	b.n	800085c <LCDReadNData+0xa8>
		{
			HAL_SPI_TransmitReceive(&hspi1, wdummy, wRLsb, 1,HAL_MAX_DELAY);
 8000812:	f107 0218 	add.w	r2, r7, #24
 8000816:	f107 0114 	add.w	r1, r7, #20
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2301      	movs	r3, #1
 8000822:	4815      	ldr	r0, [pc, #84]	; (8000878 <LCDReadNData+0xc4>)
 8000824:	f003 fd9a 	bl	800435c <HAL_SPI_TransmitReceive>
			pwBuf[i] = wRLsb[1]<<8;
 8000828:	7e7b      	ldrb	r3, [r7, #25]
 800082a:	b29a      	uxth	r2, r3
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	6879      	ldr	r1, [r7, #4]
 8000832:	440b      	add	r3, r1
 8000834:	0212      	lsls	r2, r2, #8
 8000836:	b292      	uxth	r2, r2
 8000838:	801a      	strh	r2, [r3, #0]
			pwBuf[i] |= wRLsb[0];
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	8819      	ldrh	r1, [r3, #0]
 8000844:	7e3b      	ldrb	r3, [r7, #24]
 8000846:	b29a      	uxth	r2, r3
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	4403      	add	r3, r0
 8000850:	430a      	orrs	r2, r1
 8000852:	b292      	uxth	r2, r2
 8000854:	801a      	strh	r2, [r3, #0]
		for(i=0;i<ulSizeWordCnt;i++)
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3301      	adds	r3, #1
 800085a:	61fb      	str	r3, [r7, #28]
 800085c:	69fa      	ldr	r2, [r7, #28]
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	429a      	cmp	r2, r3
 8000862:	d3d6      	bcc.n	8000812 <LCDReadNData+0x5e>
		}

		HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000864:	2201      	movs	r2, #1
 8000866:	2101      	movs	r1, #1
 8000868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086c:	f001 fef4 	bl	8002658 <HAL_GPIO_WritePin>
	}

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 8000870:	bf00      	nop
 8000872:	3720      	adds	r7, #32
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200000e4 	.word	0x200000e4

0800087c <LCDSendCmdArg>:

//-----------------------------------------------------------
//Host controller function 5---Write command to host data Bus with aruments
//-----------------------------------------------------------
void LCDSendCmdArg(uint16_t usCmdCode,uint16_t* pArg, uint16_t usNumArg)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	6039      	str	r1, [r7, #0]
 8000886:	80fb      	strh	r3, [r7, #6]
 8000888:	4613      	mov	r3, r2
 800088a:	80bb      	strh	r3, [r7, #4]
     uint16_t i;
     //Send Cmd code
     LCDWriteCmdCode(usCmdCode);
 800088c:	88fb      	ldrh	r3, [r7, #6]
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fea0 	bl	80005d4 <LCDWriteCmdCode>
     //Send Data
     for(i=0;i<usNumArg;i++)
 8000894:	2300      	movs	r3, #0
 8000896:	81fb      	strh	r3, [r7, #14]
 8000898:	e00a      	b.n	80008b0 <LCDSendCmdArg+0x34>
     {
         LCDWriteData(pArg[i]);
 800089a:	89fb      	ldrh	r3, [r7, #14]
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	683a      	ldr	r2, [r7, #0]
 80008a0:	4413      	add	r3, r2
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fec3 	bl	8000630 <LCDWriteData>
     for(i=0;i<usNumArg;i++)
 80008aa:	89fb      	ldrh	r3, [r7, #14]
 80008ac:	3301      	adds	r3, #1
 80008ae:	81fb      	strh	r3, [r7, #14]
 80008b0:	89fa      	ldrh	r2, [r7, #14]
 80008b2:	88bb      	ldrh	r3, [r7, #4]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d3f0      	bcc.n	800089a <LCDSendCmdArg+0x1e>
     }
}
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <IT8951ReadReg>:

//-----------------------------------------------------------
//Host Cmd 4---REG_RD
//-----------------------------------------------------------
uint16_t IT8951ReadReg(uint16_t usRegAddr)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	80fb      	strh	r3, [r7, #6]
	uint16_t usData;

	//Send Cmd and Register Address
	LCDWriteCmdCode(IT8951_TCON_REG_RD);
 80008ca:	2010      	movs	r0, #16
 80008cc:	f7ff fe82 	bl	80005d4 <LCDWriteCmdCode>
	LCDWriteData(usRegAddr);
 80008d0:	88fb      	ldrh	r3, [r7, #6]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff feac 	bl	8000630 <LCDWriteData>
	//Read data from Host Data bus
	usData = LCDReadData();
 80008d8:	f7ff ff22 	bl	8000720 <LCDReadData>
 80008dc:	4603      	mov	r3, r0
 80008de:	81fb      	strh	r3, [r7, #14]
	return usData;
 80008e0:	89fb      	ldrh	r3, [r7, #14]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <IT8951WriteReg>:
//-----------------------------------------------------------
//Host Cmd 5---REG_WR
//-----------------------------------------------------------
void IT8951WriteReg(uint16_t usRegAddr,uint16_t usValue)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	460a      	mov	r2, r1
 80008f4:	80fb      	strh	r3, [r7, #6]
 80008f6:	4613      	mov	r3, r2
 80008f8:	80bb      	strh	r3, [r7, #4]
	//Send Cmd , Register Address and Write Value
	LCDWriteCmdCode(IT8951_TCON_REG_WR);
 80008fa:	2011      	movs	r0, #17
 80008fc:	f7ff fe6a 	bl	80005d4 <LCDWriteCmdCode>
	LCDWriteData(usRegAddr);
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fe94 	bl	8000630 <LCDWriteData>
	LCDWriteData(usValue);
 8000908:	88bb      	ldrh	r3, [r7, #4]
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fe90 	bl	8000630 <LCDWriteData>
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <IT8951LoadImgAreaStart>:
}
//-----------------------------------------------------------
//Host Cmd 11---LD_IMG_AREA
//-----------------------------------------------------------
void IT8951LoadImgAreaStart(IT8951LdImgInfo* pstLdImgInfo ,IT8951AreaImgInfo* pstAreaImgInfo)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
    uint16_t usArg[5];
    //Setting Argument for Load image start
    usArg[0] = (pstLdImgInfo->usEndianType << 8 )
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	021b      	lsls	r3, r3, #8
    |(pstLdImgInfo->usPixelFormat << 4)
 8000928:	b21a      	sxth	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	885b      	ldrh	r3, [r3, #2]
 800092e:	011b      	lsls	r3, r3, #4
 8000930:	b21b      	sxth	r3, r3
 8000932:	4313      	orrs	r3, r2
 8000934:	b21a      	sxth	r2, r3
    |(pstLdImgInfo->usRotate);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	889b      	ldrh	r3, [r3, #4]
 800093a:	b21b      	sxth	r3, r3
 800093c:	4313      	orrs	r3, r2
 800093e:	b21b      	sxth	r3, r3
 8000940:	b29b      	uxth	r3, r3
    usArg[0] = (pstLdImgInfo->usEndianType << 8 )
 8000942:	81bb      	strh	r3, [r7, #12]
    usArg[1] = pstAreaImgInfo->usX;
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	81fb      	strh	r3, [r7, #14]
    usArg[2] = pstAreaImgInfo->usY;
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	885b      	ldrh	r3, [r3, #2]
 800094e:	823b      	strh	r3, [r7, #16]
    usArg[3] = pstAreaImgInfo->usWidth;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	889b      	ldrh	r3, [r3, #4]
 8000954:	827b      	strh	r3, [r7, #18]
    usArg[4] = pstAreaImgInfo->usHeight;
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	88db      	ldrh	r3, [r3, #6]
 800095a:	82bb      	strh	r3, [r7, #20]
    //Send Cmd and Args
    LCDSendCmdArg(IT8951_TCON_LD_IMG_AREA , usArg , 5);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	2205      	movs	r2, #5
 8000962:	4619      	mov	r1, r3
 8000964:	2021      	movs	r0, #33	; 0x21
 8000966:	f7ff ff89 	bl	800087c <LCDSendCmdArg>
}
 800096a:	bf00      	nop
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <IT8951LoadImgEnd>:
//-----------------------------------------------------------
//Host Cmd 12---LD_IMG_END
//-----------------------------------------------------------
void IT8951LoadImgEnd(void)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	af00      	add	r7, sp, #0
    LCDWriteCmdCode(IT8951_TCON_LD_IMG_END);
 8000976:	2022      	movs	r0, #34	; 0x22
 8000978:	f7ff fe2c 	bl	80005d4 <LCDWriteCmdCode>
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}

08000980 <GetIT8951SystemInfo>:

void GetIT8951SystemInfo(void* pBuf)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	uint16_t* pusWord = (uint16_t*)pBuf;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	60fb      	str	r3, [r7, #12]
	IT8951DevInfo* pstDevInfo;

	//Send I80 CMD
	LCDWriteCmdCode(USDEF_I80_CMD_GET_DEV_INFO);
 800098c:	f240 3002 	movw	r0, #770	; 0x302
 8000990:	f7ff fe20 	bl	80005d4 <LCDWriteCmdCode>

	//Burst Read Request for SPI interface only
	LCDReadNData(pusWord, sizeof(IT8951DevInfo)/2);//Polling HRDY for each words(2-bytes) if possible
 8000994:	2114      	movs	r1, #20
 8000996:	68f8      	ldr	r0, [r7, #12]
 8000998:	f7ff ff0c 	bl	80007b4 <LCDReadNData>

	//Show Device information of IT8951
	pstDevInfo = (IT8951DevInfo*)pBuf;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	60bb      	str	r3, [r7, #8]
	printf("Panel(W,H) = (%d,%d)\r\n",
	pstDevInfo->usPanelW, pstDevInfo->usPanelH );
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	881b      	ldrh	r3, [r3, #0]
	printf("Panel(W,H) = (%d,%d)\r\n",
 80009a4:	4619      	mov	r1, r3
	pstDevInfo->usPanelW, pstDevInfo->usPanelH );
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	885b      	ldrh	r3, [r3, #2]
	printf("Panel(W,H) = (%d,%d)\r\n",
 80009aa:	461a      	mov	r2, r3
 80009ac:	480e      	ldr	r0, [pc, #56]	; (80009e8 <GetIT8951SystemInfo+0x68>)
 80009ae:	f005 fc4d 	bl	800624c <iprintf>
	printf("Image Buffer Address = %X\r\n",
	pstDevInfo->usImgBufAddrL | (pstDevInfo->usImgBufAddrH << 16));
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	889b      	ldrh	r3, [r3, #4]
 80009b6:	461a      	mov	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	88db      	ldrh	r3, [r3, #6]
 80009bc:	041b      	lsls	r3, r3, #16
	printf("Image Buffer Address = %X\r\n",
 80009be:	4313      	orrs	r3, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	480a      	ldr	r0, [pc, #40]	; (80009ec <GetIT8951SystemInfo+0x6c>)
 80009c4:	f005 fc42 	bl	800624c <iprintf>
	//Show Firmware and LUT Version
	printf("FW Version = %s\r\n", (uint8_t*)pstDevInfo->usFWVersion);
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	3308      	adds	r3, #8
 80009cc:	4619      	mov	r1, r3
 80009ce:	4808      	ldr	r0, [pc, #32]	; (80009f0 <GetIT8951SystemInfo+0x70>)
 80009d0:	f005 fc3c 	bl	800624c <iprintf>
	printf("LUT Version = %s\r\n", (uint8_t*)pstDevInfo->usLUTVersion);
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	3318      	adds	r3, #24
 80009d8:	4619      	mov	r1, r3
 80009da:	4806      	ldr	r0, [pc, #24]	; (80009f4 <GetIT8951SystemInfo+0x74>)
 80009dc:	f005 fc36 	bl	800624c <iprintf>
}
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	080070f4 	.word	0x080070f4
 80009ec:	0800710c 	.word	0x0800710c
 80009f0:	08007128 	.word	0x08007128
 80009f4:	0800713c 	.word	0x0800713c

080009f8 <IT8951SetImgBufBaseAddr>:

//-----------------------------------------------------------
//Initial function 2---Set Image buffer base address
//-----------------------------------------------------------
void IT8951SetImgBufBaseAddr(uint32_t ulImgBufAddr)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	uint16_t usWordH = (uint16_t)((ulImgBufAddr >> 16) & 0x0000FFFF);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	0c1b      	lsrs	r3, r3, #16
 8000a04:	81fb      	strh	r3, [r7, #14]
	uint16_t usWordL = (uint16_t)( ulImgBufAddr & 0x0000FFFF);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	81bb      	strh	r3, [r7, #12]
	//Write LISAR Reg
	IT8951WriteReg(LISAR + 2 ,usWordH);
 8000a0a:	89fb      	ldrh	r3, [r7, #14]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f240 200a 	movw	r0, #522	; 0x20a
 8000a12:	f7ff ff6a 	bl	80008ea <IT8951WriteReg>
	IT8951WriteReg(LISAR ,usWordL);
 8000a16:	89bb      	ldrh	r3, [r7, #12]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f44f 7002 	mov.w	r0, #520	; 0x208
 8000a1e:	f7ff ff64 	bl	80008ea <IT8951WriteReg>
}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <IT8951WaitForDisplayReady>:
//-----------------------------------------------------------
//Display function 1---Wait for LUT Engine Finish
//                     Polling Display Engine Ready by LUTNo
//-----------------------------------------------------------
void IT8951WaitForDisplayReady()
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	af00      	add	r7, sp, #0
	//Check IT8951 Register LUTAFSR => NonZero Busy, 0 - Free
	while(IT8951ReadReg(LUTAFSR));
 8000a2e:	bf00      	nop
 8000a30:	f241 2024 	movw	r0, #4644	; 0x1224
 8000a34:	f7ff ff44 	bl	80008c0 <IT8951ReadReg>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d1f8      	bne.n	8000a30 <IT8951WaitForDisplayReady+0x6>
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <IT8951HostAreaPackedPixelWrite>:

//-----------------------------------------------------------
//Display function 2---Load Image Area process
//-----------------------------------------------------------
void IT8951HostAreaPackedPixelWrite(IT8951LdImgInfo* pstLdImgInfo,IT8951AreaImgInfo* pstAreaImgInfo)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b084      	sub	sp, #16
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
 8000a4a:	6039      	str	r1, [r7, #0]
	//uint32_t i,j;
	//Source buffer address of Host
	uint16_t* pusFrameBuf = (uint16_t*)pstLdImgInfo->ulStartFBAddr;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	60fb      	str	r3, [r7, #12]

	//Set Image buffer(IT8951) Base address
	IT8951SetImgBufBaseAddr(pstLdImgInfo->ulImgBufBaseAddr);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff ffce 	bl	80009f8 <IT8951SetImgBufBaseAddr>
	//Send Load Image start Cmd
	IT8951LoadImgAreaStart(pstLdImgInfo , pstAreaImgInfo);
 8000a5c:	6839      	ldr	r1, [r7, #0]
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff ff5a 	bl	8000918 <IT8951LoadImgAreaStart>
	//Host Write Data
	LCDWriteNData(pusFrameBuf, (pstAreaImgInfo->usHeight*pstAreaImgInfo->usWidth/2));
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	88db      	ldrh	r3, [r3, #6]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	889b      	ldrh	r3, [r3, #4]
 8000a6e:	fb03 f302 	mul.w	r3, r3, r2
 8000a72:	0fda      	lsrs	r2, r3, #31
 8000a74:	4413      	add	r3, r2
 8000a76:	105b      	asrs	r3, r3, #1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	68f8      	ldr	r0, [r7, #12]
 8000a7c:	f7ff fe06 	bl	800068c <LCDWriteNData>
					LCDWriteData(*pusFrameBuf);
					pusFrameBuf++;
			}
	}*/
	//Send Load Img End Command
	IT8951LoadImgEnd();
 8000a80:	f7ff ff77 	bl	8000972 <IT8951LoadImgEnd>
}
 8000a84:	bf00      	nop
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <IT8951DisplayArea>:

//-----------------------------------------------------------
//Display functions 3---Application for Display panel Area
//-----------------------------------------------------------
void IT8951DisplayArea(uint16_t usX, uint16_t usY, uint16_t usW, uint16_t usH, uint16_t usDpyMode)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4604      	mov	r4, r0
 8000a94:	4608      	mov	r0, r1
 8000a96:	4611      	mov	r1, r2
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4623      	mov	r3, r4
 8000a9c:	80fb      	strh	r3, [r7, #6]
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	80bb      	strh	r3, [r7, #4]
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	807b      	strh	r3, [r7, #2]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	803b      	strh	r3, [r7, #0]
	//Send I80 Display Command (User defined command of IT8951)
	LCDWriteCmdCode(USDEF_I80_CMD_DPY_AREA); //0x0034
 8000aaa:	2034      	movs	r0, #52	; 0x34
 8000aac:	f7ff fd92 	bl	80005d4 <LCDWriteCmdCode>
	//Write arguments
	LCDWriteData(usX);
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fdbc 	bl	8000630 <LCDWriteData>
	LCDWriteData(usY);
 8000ab8:	88bb      	ldrh	r3, [r7, #4]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fdb8 	bl	8000630 <LCDWriteData>
	LCDWriteData(usW);
 8000ac0:	887b      	ldrh	r3, [r7, #2]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fdb4 	bl	8000630 <LCDWriteData>
	LCDWriteData(usH);
 8000ac8:	883b      	ldrh	r3, [r7, #0]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fdb0 	bl	8000630 <LCDWriteData>
	LCDWriteData(usDpyMode);
 8000ad0:	8b3b      	ldrh	r3, [r7, #24]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fdac 	bl	8000630 <LCDWriteData>
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd90      	pop	{r4, r7, pc}

08000ae0 <IT8951_Init>:

//-----------------------------------------------------------
//Test function 1---Software Initial
//-----------------------------------------------------------
uint8_t IT8951_Init()
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	//bcm2835_gpio_fsel(CS, BCM2835_GPIO_FSEL_OUTP);
	//bcm2835_gpio_fsel(HRDY, BCM2835_GPIO_FSEL_INPT);
	//bcm2835_gpio_fsel(RESET, BCM2835_GPIO_FSEL_OUTP);

	//bcm2835_gpio_write(CS, HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aec:	f001 fdb4 	bl	8002658 <HAL_GPIO_WritePin>

	printf("****** IT8951 ******\n");
 8000af0:	4813      	ldr	r0, [pc, #76]	; (8000b40 <IT8951_Init+0x60>)
 8000af2:	f005 fc1f 	bl	8006334 <puts>

	//bcm2835_gpio_write(RESET, LOW);
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2110      	movs	r1, #16
 8000afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afe:	f001 fdab 	bl	8002658 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000b02:	200a      	movs	r0, #10
 8000b04:	f001 f910 	bl	8001d28 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2110      	movs	r1, #16
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b10:	f001 fda2 	bl	8002658 <HAL_GPIO_WritePin>
	//bcm2835_gpio_write(RESET, HIGH);

	//Get Device Info
	GetIT8951SystemInfo(&gstI80DevInfo);
 8000b14:	480b      	ldr	r0, [pc, #44]	; (8000b44 <IT8951_Init+0x64>)
 8000b16:	f7ff ff33 	bl	8000980 <GetIT8951SystemInfo>
//	{
//		perror("malloc error!\n");
//		return 1;
//	}

 	gulImgBufAddr = gstI80DevInfo.usImgBufAddrL | (gstI80DevInfo.usImgBufAddrH << 16);
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <IT8951_Init+0x64>)
 8000b1c:	889b      	ldrh	r3, [r3, #4]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <IT8951_Init+0x64>)
 8000b22:	88db      	ldrh	r3, [r3, #6]
 8000b24:	041b      	lsls	r3, r3, #16
 8000b26:	4313      	orrs	r3, r2
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <IT8951_Init+0x68>)
 8000b2c:	601a      	str	r2, [r3, #0]

 	//Set to Enable I80 Packed mode
 	IT8951WriteReg(I80CPCR, 0x0001);
 8000b2e:	2101      	movs	r1, #1
 8000b30:	2004      	movs	r0, #4
 8000b32:	f7ff feda 	bl	80008ea <IT8951WriteReg>
 	EpdDriverLoadTemplate();
 8000b36:	f000 f809 	bl	8000b4c <EpdDriverLoadTemplate>
	return 0;
 8000b3a:	2300      	movs	r3, #0
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	08007150 	.word	0x08007150
 8000b44:	200000a0 	.word	0x200000a0
 8000b48:	200000c8 	.word	0x200000c8

08000b4c <EpdDriverLoadTemplate>:



extern const unsigned char Kalender[];
void EpdDriverLoadTemplate()
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af02      	add	r7, sp, #8
	IT8951LdImgInfo stLdImgInfo;
	IT8951AreaImgInfo stAreaImgInfo;
	IT8951WaitForDisplayReady();
 8000b52:	f7ff ff6a 	bl	8000a2a <IT8951WaitForDisplayReady>

	//Setting Load image information
	stLdImgInfo.ulStartFBAddr    = (uint32_t)Kalender;
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <EpdDriverLoadTemplate+0x60>)
 8000b58:	613b      	str	r3, [r7, #16]
	stLdImgInfo.usEndianType     = IT8951_LDIMG_L_ENDIAN;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	813b      	strh	r3, [r7, #8]
	stLdImgInfo.usPixelFormat    = IT8951_4BPP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	817b      	strh	r3, [r7, #10]
	stLdImgInfo.usRotate         = IT8951_ROTATE_0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	81bb      	strh	r3, [r7, #12]
	stLdImgInfo.ulImgBufBaseAddr = gulImgBufAddr;
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <EpdDriverLoadTemplate+0x64>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	617b      	str	r3, [r7, #20]
	//Set Load Area
	stAreaImgInfo.usX      = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	803b      	strh	r3, [r7, #0]
	stAreaImgInfo.usY      = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	807b      	strh	r3, [r7, #2]
	stAreaImgInfo.usWidth  = gstI80DevInfo.usPanelW;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <EpdDriverLoadTemplate+0x68>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	80bb      	strh	r3, [r7, #4]
 	stAreaImgInfo.usHeight = gstI80DevInfo.usPanelH;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <EpdDriverLoadTemplate+0x68>)
 8000b7c:	885b      	ldrh	r3, [r3, #2]
 8000b7e:	80fb      	strh	r3, [r7, #6]

	//Load Image from Host to IT8951 Image Buffer
	IT8951HostAreaPackedPixelWrite(&stLdImgInfo, &stAreaImgInfo);//Display function 2
 8000b80:	463a      	mov	r2, r7
 8000b82:	f107 0308 	add.w	r3, r7, #8
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff5a 	bl	8000a42 <IT8951HostAreaPackedPixelWrite>
	//Display Area ?V (x,y,w,h) with mode 2 for fast gray clear mode - depends on current waveform
	IT8951DisplayArea(0,0, gstI80DevInfo.usPanelW, gstI80DevInfo.usPanelH, 2);
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <EpdDriverLoadTemplate+0x68>)
 8000b90:	881a      	ldrh	r2, [r3, #0]
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <EpdDriverLoadTemplate+0x68>)
 8000b94:	8859      	ldrh	r1, [r3, #2]
 8000b96:	2302      	movs	r3, #2
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff ff74 	bl	8000a8c <IT8951DisplayArea>
	//IT8951Sleep();
}
 8000ba4:	bf00      	nop
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	080071a0 	.word	0x080071a0
 8000bb0:	200000c8 	.word	0x200000c8
 8000bb4:	200000a0 	.word	0x200000a0

08000bb8 <EpdDriverDrawBox>:


void EpdDriverDrawBox(uint8_t* buffer, uint16_t usX, uint16_t usY, uint16_t usWidth, uint16_t usHeight)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	4608      	mov	r0, r1
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	817b      	strh	r3, [r7, #10]
 8000bca:	460b      	mov	r3, r1
 8000bcc:	813b      	strh	r3, [r7, #8]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	80fb      	strh	r3, [r7, #6]
	IT8951LdImgInfo stLdImgInfo;
	IT8951AreaImgInfo stAreaImgInfo;
	IT8951WaitForDisplayReady();
 8000bd2:	f7ff ff2a 	bl	8000a2a <IT8951WaitForDisplayReady>

	//Setting Load image information
	stLdImgInfo.ulStartFBAddr    = (uint32_t)buffer;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	623b      	str	r3, [r7, #32]
	stLdImgInfo.usEndianType     = IT8951_LDIMG_L_ENDIAN;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	833b      	strh	r3, [r7, #24]
	stLdImgInfo.usPixelFormat    = IT8951_8BPP;
 8000bde:	2303      	movs	r3, #3
 8000be0:	837b      	strh	r3, [r7, #26]
	stLdImgInfo.usRotate         = IT8951_ROTATE_0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	83bb      	strh	r3, [r7, #28]
	stLdImgInfo.ulImgBufBaseAddr = gulImgBufAddr;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <EpdDriverDrawBox+0x5c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
	//Set Load Area
	stAreaImgInfo.usX      = usX;
 8000bec:	897b      	ldrh	r3, [r7, #10]
 8000bee:	823b      	strh	r3, [r7, #16]
	stAreaImgInfo.usY      = usY;
 8000bf0:	893b      	ldrh	r3, [r7, #8]
 8000bf2:	827b      	strh	r3, [r7, #18]
	stAreaImgInfo.usWidth  = usWidth;
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	82bb      	strh	r3, [r7, #20]
 	stAreaImgInfo.usHeight = usHeight;
 8000bf8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000bfa:	82fb      	strh	r3, [r7, #22]

	//Load Image from Host to IT8951 Image Buffer
	IT8951HostAreaPackedPixelWrite(&stLdImgInfo, &stAreaImgInfo);//Display function 2
 8000bfc:	f107 0210 	add.w	r2, r7, #16
 8000c00:	f107 0318 	add.w	r3, r7, #24
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff1b 	bl	8000a42 <IT8951HostAreaPackedPixelWrite>
	//Display Area ?V (x,y,w,h) with mode 2 for fast gray clear mode - depends on current waveform
	//IT8951DisplayArea(stAreaImgInfo.usX,stAreaImgInfo.usY, stAreaImgInfo.usWidth, stAreaImgInfo.usHeight, 2);
	//IT8951Sleep();
}
 8000c0c:	bf00      	nop
 8000c0e:	3728      	adds	r7, #40	; 0x28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200000c8 	.word	0x200000c8

08000c18 <EpdDriverShowDisp>:

void EpdDriverShowDisp()
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af02      	add	r7, sp, #8
	IT8951DisplayArea(0,0,1200,825, 2);
 8000c1e:	2302      	movs	r3, #2
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	f240 3339 	movw	r3, #825	; 0x339
 8000c26:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff ff2d 	bl	8000a8c <IT8951DisplayArea>
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(uint8_t *image, uint16_t Width, uint16_t Height, uint16_t Rotate, uint16_t Color)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	4608      	mov	r0, r1
 8000c42:	4611      	mov	r1, r2
 8000c44:	461a      	mov	r2, r3
 8000c46:	4603      	mov	r3, r0
 8000c48:	817b      	strh	r3, [r7, #10]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	813b      	strh	r3, [r7, #8]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 8000c52:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <Paint_NewImage+0x84>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8000c58:	4a18      	ldr	r2, [pc, #96]	; (8000cbc <Paint_NewImage+0x84>)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 8000c5e:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <Paint_NewImage+0x84>)
 8000c60:	897b      	ldrh	r3, [r7, #10]
 8000c62:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000c64:	4a15      	ldr	r2, [pc, #84]	; (8000cbc <Paint_NewImage+0x84>)
 8000c66:	893b      	ldrh	r3, [r7, #8]
 8000c68:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8000c6a:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <Paint_NewImage+0x84>)
 8000c6c:	8b3b      	ldrh	r3, [r7, #24]
 8000c6e:	8193      	strh	r3, [r2, #12]
    //Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
    Paint.WidthByte = Width;
 8000c70:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <Paint_NewImage+0x84>)
 8000c72:	897b      	ldrh	r3, [r7, #10]
 8000c74:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8000c76:	4a11      	ldr	r2, [pc, #68]	; (8000cbc <Paint_NewImage+0x84>)
 8000c78:	893b      	ldrh	r3, [r7, #8]
 8000c7a:	8293      	strh	r3, [r2, #20]
    //printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
    //printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 8000c7c:	4a0f      	ldr	r2, [pc, #60]	; (8000cbc <Paint_NewImage+0x84>)
 8000c7e:	88fb      	ldrh	r3, [r7, #6]
 8000c80:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <Paint_NewImage+0x84>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d002      	beq.n	8000c94 <Paint_NewImage+0x5c>
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	2bb4      	cmp	r3, #180	; 0xb4
 8000c92:	d106      	bne.n	8000ca2 <Paint_NewImage+0x6a>
        Paint.Width = Width;
 8000c94:	4a09      	ldr	r2, [pc, #36]	; (8000cbc <Paint_NewImage+0x84>)
 8000c96:	897b      	ldrh	r3, [r7, #10]
 8000c98:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <Paint_NewImage+0x84>)
 8000c9c:	893b      	ldrh	r3, [r7, #8]
 8000c9e:	80d3      	strh	r3, [r2, #6]
 8000ca0:	e005      	b.n	8000cae <Paint_NewImage+0x76>
    } else {
        Paint.Width = Height;
 8000ca2:	4a06      	ldr	r2, [pc, #24]	; (8000cbc <Paint_NewImage+0x84>)
 8000ca4:	893b      	ldrh	r3, [r7, #8]
 8000ca6:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <Paint_NewImage+0x84>)
 8000caa:	897b      	ldrh	r3, [r7, #10]
 8000cac:	80d3      	strh	r3, [r2, #6]
    }
}
 8000cae:	bf00      	nop
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	200000cc 	.word	0x200000cc

08000cc0 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	80fb      	strh	r3, [r7, #6]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	80bb      	strh	r3, [r7, #4]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000cd2:	4b50      	ldr	r3, [pc, #320]	; (8000e14 <Paint_SetPixel+0x154>)
 8000cd4:	889b      	ldrh	r3, [r3, #4]
 8000cd6:	88fa      	ldrh	r2, [r7, #6]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	f200 8091 	bhi.w	8000e00 <Paint_SetPixel+0x140>
 8000cde:	4b4d      	ldr	r3, [pc, #308]	; (8000e14 <Paint_SetPixel+0x154>)
 8000ce0:	88db      	ldrh	r3, [r3, #6]
 8000ce2:	88ba      	ldrh	r2, [r7, #4]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	f200 808b 	bhi.w	8000e00 <Paint_SetPixel+0x140>
//        Debug("Exceeding display boundaries\r\n");
        return;
    }      
    uint16_t X, Y;

    switch(Paint.Rotate) {
 8000cea:	4b4a      	ldr	r3, [pc, #296]	; (8000e14 <Paint_SetPixel+0x154>)
 8000cec:	89db      	ldrh	r3, [r3, #14]
 8000cee:	2b5a      	cmp	r3, #90	; 0x5a
 8000cf0:	d00f      	beq.n	8000d12 <Paint_SetPixel+0x52>
 8000cf2:	2b5a      	cmp	r3, #90	; 0x5a
 8000cf4:	dc02      	bgt.n	8000cfc <Paint_SetPixel+0x3c>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d006      	beq.n	8000d08 <Paint_SetPixel+0x48>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
		
    default:
        return;
 8000cfa:	e086      	b.n	8000e0a <Paint_SetPixel+0x14a>
    switch(Paint.Rotate) {
 8000cfc:	2bb4      	cmp	r3, #180	; 0xb4
 8000cfe:	d012      	beq.n	8000d26 <Paint_SetPixel+0x66>
 8000d00:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000d04:	d01e      	beq.n	8000d44 <Paint_SetPixel+0x84>
        return;
 8000d06:	e080      	b.n	8000e0a <Paint_SetPixel+0x14a>
        X = Xpoint;
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 8000d0c:	88bb      	ldrh	r3, [r7, #4]
 8000d0e:	81bb      	strh	r3, [r7, #12]
        break;
 8000d10:	e022      	b.n	8000d58 <Paint_SetPixel+0x98>
        X = Paint.WidthMemory - Ypoint - 1;
 8000d12:	4b40      	ldr	r3, [pc, #256]	; (8000e14 <Paint_SetPixel+0x154>)
 8000d14:	891a      	ldrh	r2, [r3, #8]
 8000d16:	88bb      	ldrh	r3, [r7, #4]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	81bb      	strh	r3, [r7, #12]
        break;
 8000d24:	e018      	b.n	8000d58 <Paint_SetPixel+0x98>
        X = Paint.WidthMemory - Xpoint - 1;
 8000d26:	4b3b      	ldr	r3, [pc, #236]	; (8000e14 <Paint_SetPixel+0x154>)
 8000d28:	891a      	ldrh	r2, [r3, #8]
 8000d2a:	88fb      	ldrh	r3, [r7, #6]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	3b01      	subs	r3, #1
 8000d32:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8000d34:	4b37      	ldr	r3, [pc, #220]	; (8000e14 <Paint_SetPixel+0x154>)
 8000d36:	895a      	ldrh	r2, [r3, #10]
 8000d38:	88bb      	ldrh	r3, [r7, #4]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	81bb      	strh	r3, [r7, #12]
        break;
 8000d42:	e009      	b.n	8000d58 <Paint_SetPixel+0x98>
        X = Ypoint;
 8000d44:	88bb      	ldrh	r3, [r7, #4]
 8000d46:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8000d48:	4b32      	ldr	r3, [pc, #200]	; (8000e14 <Paint_SetPixel+0x154>)
 8000d4a:	895a      	ldrh	r2, [r3, #10]
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	3b01      	subs	r3, #1
 8000d54:	81bb      	strh	r3, [r7, #12]
        break;
 8000d56:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8000d58:	4b2e      	ldr	r3, [pc, #184]	; (8000e14 <Paint_SetPixel+0x154>)
 8000d5a:	8a1b      	ldrh	r3, [r3, #16]
 8000d5c:	2b03      	cmp	r3, #3
 8000d5e:	d851      	bhi.n	8000e04 <Paint_SetPixel+0x144>
 8000d60:	a201      	add	r2, pc, #4	; (adr r2, 8000d68 <Paint_SetPixel+0xa8>)
 8000d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d66:	bf00      	nop
 8000d68:	08000db7 	.word	0x08000db7
 8000d6c:	08000d79 	.word	0x08000d79
 8000d70:	08000d89 	.word	0x08000d89
 8000d74:	08000d99 	.word	0x08000d99
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8000d78:	4b26      	ldr	r3, [pc, #152]	; (8000e14 <Paint_SetPixel+0x154>)
 8000d7a:	891a      	ldrh	r2, [r3, #8]
 8000d7c:	89fb      	ldrh	r3, [r7, #14]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	3b01      	subs	r3, #1
 8000d84:	81fb      	strh	r3, [r7, #14]
        break;
 8000d86:	e017      	b.n	8000db8 <Paint_SetPixel+0xf8>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8000d88:	4b22      	ldr	r3, [pc, #136]	; (8000e14 <Paint_SetPixel+0x154>)
 8000d8a:	895a      	ldrh	r2, [r3, #10]
 8000d8c:	89bb      	ldrh	r3, [r7, #12]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	3b01      	subs	r3, #1
 8000d94:	81bb      	strh	r3, [r7, #12]
        break;
 8000d96:	e00f      	b.n	8000db8 <Paint_SetPixel+0xf8>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8000d98:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <Paint_SetPixel+0x154>)
 8000d9a:	891a      	ldrh	r2, [r3, #8]
 8000d9c:	89fb      	ldrh	r3, [r7, #14]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	3b01      	subs	r3, #1
 8000da4:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8000da6:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <Paint_SetPixel+0x154>)
 8000da8:	895a      	ldrh	r2, [r3, #10]
 8000daa:	89bb      	ldrh	r3, [r7, #12]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	3b01      	subs	r3, #1
 8000db2:	81bb      	strh	r3, [r7, #12]
        break;
 8000db4:	e000      	b.n	8000db8 <Paint_SetPixel+0xf8>
        break;
 8000db6:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8000db8:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <Paint_SetPixel+0x154>)
 8000dba:	891b      	ldrh	r3, [r3, #8]
 8000dbc:	89fa      	ldrh	r2, [r7, #14]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d822      	bhi.n	8000e08 <Paint_SetPixel+0x148>
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <Paint_SetPixel+0x154>)
 8000dc4:	895b      	ldrh	r3, [r3, #10]
 8000dc6:	89ba      	ldrh	r2, [r7, #12]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d81d      	bhi.n	8000e08 <Paint_SetPixel+0x148>
//        Debug("Exceeding display boundaries\r\n");
        return;
    }
    
   // uint32_t Addr = X / 8 + Y * Paint.WidthByte;
    uint32_t Addr = X + Y * Paint.WidthByte;
 8000dcc:	89fa      	ldrh	r2, [r7, #14]
 8000dce:	89bb      	ldrh	r3, [r7, #12]
 8000dd0:	4910      	ldr	r1, [pc, #64]	; (8000e14 <Paint_SetPixel+0x154>)
 8000dd2:	8a49      	ldrh	r1, [r1, #18]
 8000dd4:	fb01 f303 	mul.w	r3, r1, r3
 8000dd8:	4413      	add	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
   // uint8_t Rdata = Paint.Image[Addr];
    if(Color == BLACK)
 8000ddc:	887b      	ldrh	r3, [r7, #2]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d106      	bne.n	8000df0 <Paint_SetPixel+0x130>
        //Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
    	Paint.Image[Addr] = BLACK;
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <Paint_SetPixel+0x154>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	4413      	add	r3, r2
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
 8000dee:	e00c      	b.n	8000e0a <Paint_SetPixel+0x14a>
    else
        //Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
    	Paint.Image[Addr] = Color;
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <Paint_SetPixel+0x154>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	4413      	add	r3, r2
 8000df8:	887a      	ldrh	r2, [r7, #2]
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	701a      	strb	r2, [r3, #0]
 8000dfe:	e004      	b.n	8000e0a <Paint_SetPixel+0x14a>
        return;
 8000e00:	bf00      	nop
 8000e02:	e002      	b.n	8000e0a <Paint_SetPixel+0x14a>
        return;
 8000e04:	bf00      	nop
 8000e06:	e000      	b.n	8000e0a <Paint_SetPixel+0x14a>
        return;
 8000e08:	bf00      	nop
}
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	200000cc 	.word	0x200000cc

08000e18 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(uint8_t Color)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
    for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000e22:	2300      	movs	r3, #0
 8000e24:	81fb      	strh	r3, [r7, #14]
 8000e26:	e01b      	b.n	8000e60 <Paint_Clear+0x48>
        for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000e28:	2300      	movs	r3, #0
 8000e2a:	81bb      	strh	r3, [r7, #12]
 8000e2c:	e010      	b.n	8000e50 <Paint_Clear+0x38>
            uint32_t Addr = X + Y*Paint.WidthByte;
 8000e2e:	89ba      	ldrh	r2, [r7, #12]
 8000e30:	89fb      	ldrh	r3, [r7, #14]
 8000e32:	4911      	ldr	r1, [pc, #68]	; (8000e78 <Paint_Clear+0x60>)
 8000e34:	8a49      	ldrh	r1, [r1, #18]
 8000e36:	fb01 f303 	mul.w	r3, r1, r3
 8000e3a:	4413      	add	r3, r2
 8000e3c:	60bb      	str	r3, [r7, #8]
            Paint.Image[Addr] = Color;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <Paint_Clear+0x60>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	4413      	add	r3, r2
 8000e46:	79fa      	ldrb	r2, [r7, #7]
 8000e48:	701a      	strb	r2, [r3, #0]
        for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000e4a:	89bb      	ldrh	r3, [r7, #12]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	81bb      	strh	r3, [r7, #12]
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <Paint_Clear+0x60>)
 8000e52:	8a5b      	ldrh	r3, [r3, #18]
 8000e54:	89ba      	ldrh	r2, [r7, #12]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d3e9      	bcc.n	8000e2e <Paint_Clear+0x16>
    for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000e5a:	89fb      	ldrh	r3, [r7, #14]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	81fb      	strh	r3, [r7, #14]
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <Paint_Clear+0x60>)
 8000e62:	8a9b      	ldrh	r3, [r3, #20]
 8000e64:	89fa      	ldrh	r2, [r7, #14]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d3de      	bcc.n	8000e28 <Paint_Clear+0x10>
        }
    }
}
 8000e6a:	bf00      	nop
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	200000cc 	.word	0x200000cc

08000e7c <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(uint16_t Xpoint, uint16_t Ypoint, const char Acsii_Char,
                    sFONT* Font, uint8_t Color_Background, uint8_t Color_Foreground)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	4603      	mov	r3, r0
 8000e86:	81fb      	strh	r3, [r7, #14]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	81bb      	strh	r3, [r7, #12]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	72fb      	strb	r3, [r7, #11]
    uint16_t Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000e90:	4b4f      	ldr	r3, [pc, #316]	; (8000fd0 <Paint_DrawChar+0x154>)
 8000e92:	889b      	ldrh	r3, [r3, #4]
 8000e94:	89fa      	ldrh	r2, [r7, #14]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	f200 8096 	bhi.w	8000fc8 <Paint_DrawChar+0x14c>
 8000e9c:	4b4c      	ldr	r3, [pc, #304]	; (8000fd0 <Paint_DrawChar+0x154>)
 8000e9e:	88db      	ldrh	r3, [r3, #6]
 8000ea0:	89ba      	ldrh	r2, [r7, #12]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	f200 8090 	bhi.w	8000fc8 <Paint_DrawChar+0x14c>
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8000ea8:	7afb      	ldrb	r3, [r7, #11]
 8000eaa:	3b20      	subs	r3, #32
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	88d2      	ldrh	r2, [r2, #6]
 8000eb0:	fb02 f303 	mul.w	r3, r2, r3
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	8892      	ldrh	r2, [r2, #4]
 8000eb8:	08d2      	lsrs	r2, r2, #3
 8000eba:	b292      	uxth	r2, r2
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	8892      	ldrh	r2, [r2, #4]
 8000ec2:	f002 0207 	and.w	r2, r2, #7
 8000ec6:	b292      	uxth	r2, r2
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	bf14      	ite	ne
 8000ecc:	2201      	movne	r2, #1
 8000ece:	2200      	moveq	r2, #0
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	440a      	add	r2, r1
 8000ed4:	fb02 f303 	mul.w	r3, r2, r3
 8000ed8:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	83fb      	strh	r3, [r7, #30]
 8000ee8:	e068      	b.n	8000fbc <Paint_DrawChar+0x140>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000eea:	2300      	movs	r3, #0
 8000eec:	83bb      	strh	r3, [r7, #28]
 8000eee:	e053      	b.n	8000f98 <Paint_DrawChar+0x11c>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8000ef0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ef4:	2bff      	cmp	r3, #255	; 0xff
 8000ef6:	d11a      	bne.n	8000f2e <Paint_DrawChar+0xb2>
                //if (*ptr & (0x80 >> (Column % 8)))
                if (*ptr & (0x80 >> (Column % 8)))
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	8bbb      	ldrh	r3, [r7, #28]
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	2280      	movs	r2, #128	; 0x80
 8000f06:	fa42 f303 	asr.w	r3, r2, r3
 8000f0a:	400b      	ands	r3, r1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d037      	beq.n	8000f80 <Paint_DrawChar+0x104>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000f10:	89fa      	ldrh	r2, [r7, #14]
 8000f12:	8bbb      	ldrh	r3, [r7, #28]
 8000f14:	4413      	add	r3, r2
 8000f16:	b298      	uxth	r0, r3
 8000f18:	89ba      	ldrh	r2, [r7, #12]
 8000f1a:	8bfb      	ldrh	r3, [r7, #30]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000f24:	b292      	uxth	r2, r2
 8000f26:	4619      	mov	r1, r3
 8000f28:	f7ff feca 	bl	8000cc0 <Paint_SetPixel>
 8000f2c:	e028      	b.n	8000f80 <Paint_DrawChar+0x104>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column%8))) {
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	4619      	mov	r1, r3
 8000f34:	8bbb      	ldrh	r3, [r7, #28]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	2280      	movs	r2, #128	; 0x80
 8000f3c:	fa42 f303 	asr.w	r3, r2, r3
 8000f40:	400b      	ands	r3, r1
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d00e      	beq.n	8000f64 <Paint_DrawChar+0xe8>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000f46:	89fa      	ldrh	r2, [r7, #14]
 8000f48:	8bbb      	ldrh	r3, [r7, #28]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	b298      	uxth	r0, r3
 8000f4e:	89ba      	ldrh	r2, [r7, #12]
 8000f50:	8bfb      	ldrh	r3, [r7, #30]
 8000f52:	4413      	add	r3, r2
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000f5a:	b292      	uxth	r2, r2
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f7ff feaf 	bl	8000cc0 <Paint_SetPixel>
 8000f62:	e00d      	b.n	8000f80 <Paint_DrawChar+0x104>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8000f64:	89fa      	ldrh	r2, [r7, #14]
 8000f66:	8bbb      	ldrh	r3, [r7, #28]
 8000f68:	4413      	add	r3, r2
 8000f6a:	b298      	uxth	r0, r3
 8000f6c:	89ba      	ldrh	r2, [r7, #12]
 8000f6e:	8bfb      	ldrh	r3, [r7, #30]
 8000f70:	4413      	add	r3, r2
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000f78:	b292      	uxth	r2, r2
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f7ff fea0 	bl	8000cc0 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8000f80:	8bbb      	ldrh	r3, [r7, #28]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	2b07      	cmp	r3, #7
 8000f8a:	d102      	bne.n	8000f92 <Paint_DrawChar+0x116>
                ptr++;
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000f92:	8bbb      	ldrh	r3, [r7, #28]
 8000f94:	3301      	adds	r3, #1
 8000f96:	83bb      	strh	r3, [r7, #28]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	889b      	ldrh	r3, [r3, #4]
 8000f9c:	8bba      	ldrh	r2, [r7, #28]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d3a6      	bcc.n	8000ef0 <Paint_DrawChar+0x74>
        }// Write a line
        if (Font->Width % 8 != 0)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	889b      	ldrh	r3, [r3, #4]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <Paint_DrawChar+0x13a>
            ptr++;
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000fb6:	8bfb      	ldrh	r3, [r7, #30]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	83fb      	strh	r3, [r7, #30]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	88db      	ldrh	r3, [r3, #6]
 8000fc0:	8bfa      	ldrh	r2, [r7, #30]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d391      	bcc.n	8000eea <Paint_DrawChar+0x6e>
 8000fc6:	e000      	b.n	8000fca <Paint_DrawChar+0x14e>
        return;
 8000fc8:	bf00      	nop
    }// Write all
}
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200000cc 	.word	0x200000cc

08000fd4 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(uint16_t Xstart, uint16_t Ystart, const char * pString,
                         sFONT* Font, uint8_t Color_Background, uint8_t Color_Foreground )
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	60ba      	str	r2, [r7, #8]
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	4603      	mov	r3, r0
 8000fe0:	81fb      	strh	r3, [r7, #14]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	81bb      	strh	r3, [r7, #12]
    uint16_t Xpoint = Xstart;
 8000fe6:	89fb      	ldrh	r3, [r7, #14]
 8000fe8:	82fb      	strh	r3, [r7, #22]
    uint16_t Ypoint = Ystart;
 8000fea:	89bb      	ldrh	r3, [r7, #12]
 8000fec:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8000fee:	4b22      	ldr	r3, [pc, #136]	; (8001078 <Paint_DrawString_EN+0xa4>)
 8000ff0:	889b      	ldrh	r3, [r3, #4]
 8000ff2:	89fa      	ldrh	r2, [r7, #14]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d83a      	bhi.n	800106e <Paint_DrawString_EN+0x9a>
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <Paint_DrawString_EN+0xa4>)
 8000ffa:	88db      	ldrh	r3, [r3, #6]
 8000ffc:	89ba      	ldrh	r2, [r7, #12]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d835      	bhi.n	800106e <Paint_DrawString_EN+0x9a>
//        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
        return;
    }

    while (* pString != '\0') {
 8001002:	e02f      	b.n	8001064 <Paint_DrawString_EN+0x90>
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8001004:	8afb      	ldrh	r3, [r7, #22]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	8892      	ldrh	r2, [r2, #4]
 800100a:	4413      	add	r3, r2
 800100c:	4a1a      	ldr	r2, [pc, #104]	; (8001078 <Paint_DrawString_EN+0xa4>)
 800100e:	8892      	ldrh	r2, [r2, #4]
 8001010:	4293      	cmp	r3, r2
 8001012:	dd06      	ble.n	8001022 <Paint_DrawString_EN+0x4e>
            Xpoint = Xstart;
 8001014:	89fb      	ldrh	r3, [r7, #14]
 8001016:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	88da      	ldrh	r2, [r3, #6]
 800101c:	8abb      	ldrh	r3, [r7, #20]
 800101e:	4413      	add	r3, r2
 8001020:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8001022:	8abb      	ldrh	r3, [r7, #20]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	88d2      	ldrh	r2, [r2, #6]
 8001028:	4413      	add	r3, r2
 800102a:	4a13      	ldr	r2, [pc, #76]	; (8001078 <Paint_DrawString_EN+0xa4>)
 800102c:	88d2      	ldrh	r2, [r2, #6]
 800102e:	4293      	cmp	r3, r2
 8001030:	dd03      	ble.n	800103a <Paint_DrawString_EN+0x66>
            Xpoint = Xstart;
 8001032:	89fb      	ldrh	r3, [r7, #14]
 8001034:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8001036:	89bb      	ldrh	r3, [r7, #12]
 8001038:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	781a      	ldrb	r2, [r3, #0]
 800103e:	8ab9      	ldrh	r1, [r7, #20]
 8001040:	8af8      	ldrh	r0, [r7, #22]
 8001042:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	f897 3020 	ldrb.w	r3, [r7, #32]
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f7ff ff14 	bl	8000e7c <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	3301      	adds	r3, #1
 8001058:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	889a      	ldrh	r2, [r3, #4]
 800105e:	8afb      	ldrh	r3, [r7, #22]
 8001060:	4413      	add	r3, r2
 8001062:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1cb      	bne.n	8001004 <Paint_DrawString_EN+0x30>
 800106c:	e000      	b.n	8001070 <Paint_DrawString_EN+0x9c>
        return;
 800106e:	bf00      	nop
    }
}
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200000cc 	.word	0x200000cc

0800107c <DrawCalenderField>:
//   NULL.
// Note:
//
// ****************************************************************************************
void DrawCalenderField(uint8_t place, char* fach, char* dozent)
{
 800107c:	b5b0      	push	{r4, r5, r7, lr}
 800107e:	b08c      	sub	sp, #48	; 0x30
 8001080:	af02      	add	r7, sp, #8
 8001082:	4603      	mov	r3, r0
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	73fb      	strb	r3, [r7, #15]
 800108a:	466b      	mov	r3, sp
 800108c:	461d      	mov	r5, r3
	CalCellInfo cal;
	cal.imBufsize= 17336;
 800108e:	f244 33b8 	movw	r3, #17336	; 0x43b8
 8001092:	61fb      	str	r3, [r7, #28]
	uint8_t frameBuf[cal.imBufsize];
 8001094:	69f8      	ldr	r0, [r7, #28]
 8001096:	4603      	mov	r3, r0
 8001098:	3b01      	subs	r3, #1
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
 800109c:	4601      	mov	r1, r0
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	f04f 0400 	mov.w	r4, #0
 80010aa:	00d4      	lsls	r4, r2, #3
 80010ac:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80010b0:	00cb      	lsls	r3, r1, #3
 80010b2:	4601      	mov	r1, r0
 80010b4:	f04f 0200 	mov.w	r2, #0
 80010b8:	f04f 0300 	mov.w	r3, #0
 80010bc:	f04f 0400 	mov.w	r4, #0
 80010c0:	00d4      	lsls	r4, r2, #3
 80010c2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80010c6:	00cb      	lsls	r3, r1, #3
 80010c8:	1dc3      	adds	r3, r0, #7
 80010ca:	08db      	lsrs	r3, r3, #3
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	ebad 0d03 	sub.w	sp, sp, r3
 80010d2:	ab02      	add	r3, sp, #8
 80010d4:	3300      	adds	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
	cal.place = place;
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	743b      	strb	r3, [r7, #16]
	if(cal.place%5!=0)
 80010dc:	7c3a      	ldrb	r2, [r7, #16]
 80010de:	4b5a      	ldr	r3, [pc, #360]	; (8001248 <DrawCalenderField+0x1cc>)
 80010e0:	fba3 1302 	umull	r1, r3, r3, r2
 80010e4:	0899      	lsrs	r1, r3, #2
 80010e6:	460b      	mov	r3, r1
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	440b      	add	r3, r1
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d019      	beq.n	8001128 <DrawCalenderField+0xac>
		cal.posX = 202 + (cal.place%5-1) * 200;
 80010f4:	7c3a      	ldrb	r2, [r7, #16]
 80010f6:	4b54      	ldr	r3, [pc, #336]	; (8001248 <DrawCalenderField+0x1cc>)
 80010f8:	fba3 1302 	umull	r1, r3, r3, r2
 80010fc:	0899      	lsrs	r1, r3, #2
 80010fe:	460b      	mov	r3, r1
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	440b      	add	r3, r1
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	b2db      	uxtb	r3, r3
 8001108:	3b01      	subs	r3, #1
 800110a:	b29b      	uxth	r3, r3
 800110c:	461a      	mov	r2, r3
 800110e:	0092      	lsls	r2, r2, #2
 8001110:	4413      	add	r3, r2
 8001112:	461a      	mov	r2, r3
 8001114:	0091      	lsls	r1, r2, #2
 8001116:	461a      	mov	r2, r3
 8001118:	460b      	mov	r3, r1
 800111a:	4413      	add	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	b29b      	uxth	r3, r3
 8001120:	33ca      	adds	r3, #202	; 0xca
 8001122:	b29b      	uxth	r3, r3
 8001124:	827b      	strh	r3, [r7, #18]
 8001126:	e002      	b.n	800112e <DrawCalenderField+0xb2>
	else
		cal.posX = 1002;
 8001128:	f240 33ea 	movw	r3, #1002	; 0x3ea
 800112c:	827b      	strh	r3, [r7, #18]

	if(cal.place%5!=0)
 800112e:	7c3a      	ldrb	r2, [r7, #16]
 8001130:	4b45      	ldr	r3, [pc, #276]	; (8001248 <DrawCalenderField+0x1cc>)
 8001132:	fba3 1302 	umull	r1, r3, r3, r2
 8001136:	0899      	lsrs	r1, r3, #2
 8001138:	460b      	mov	r3, r1
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d012      	beq.n	800116c <DrawCalenderField+0xf0>
	cal.posY = cal.place/5 *90 +195;
 8001146:	7c3b      	ldrb	r3, [r7, #16]
 8001148:	4a3f      	ldr	r2, [pc, #252]	; (8001248 <DrawCalenderField+0x1cc>)
 800114a:	fba2 2303 	umull	r2, r3, r2, r3
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	b2db      	uxtb	r3, r3
 8001152:	b29b      	uxth	r3, r3
 8001154:	461a      	mov	r2, r3
 8001156:	0052      	lsls	r2, r2, #1
 8001158:	4413      	add	r3, r2
 800115a:	461a      	mov	r2, r3
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	b29b      	uxth	r3, r3
 8001164:	33c3      	adds	r3, #195	; 0xc3
 8001166:	b29b      	uxth	r3, r3
 8001168:	82bb      	strh	r3, [r7, #20]
 800116a:	e012      	b.n	8001192 <DrawCalenderField+0x116>
	else
		cal.posY = (cal.place/5 - 1) *90 +195;
 800116c:	7c3b      	ldrb	r3, [r7, #16]
 800116e:	4a36      	ldr	r2, [pc, #216]	; (8001248 <DrawCalenderField+0x1cc>)
 8001170:	fba2 2303 	umull	r2, r3, r2, r3
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	b2db      	uxtb	r3, r3
 8001178:	3b01      	subs	r3, #1
 800117a:	b29b      	uxth	r3, r3
 800117c:	461a      	mov	r2, r3
 800117e:	0052      	lsls	r2, r2, #1
 8001180:	4413      	add	r3, r2
 8001182:	461a      	mov	r2, r3
 8001184:	0112      	lsls	r2, r2, #4
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	b29b      	uxth	r3, r3
 800118c:	33c3      	adds	r3, #195	; 0xc3
 800118e:	b29b      	uxth	r3, r3
 8001190:	82bb      	strh	r3, [r7, #20]

	if((cal.place%5 != 0))
 8001192:	7c3a      	ldrb	r2, [r7, #16]
 8001194:	4b2c      	ldr	r3, [pc, #176]	; (8001248 <DrawCalenderField+0x1cc>)
 8001196:	fba3 1302 	umull	r1, r3, r3, r2
 800119a:	0899      	lsrs	r1, r3, #2
 800119c:	460b      	mov	r3, r1
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d010      	beq.n	80011cc <DrawCalenderField+0x150>
	{
		if(cal.place/5%2 != 0)
 80011aa:	7c3b      	ldrb	r3, [r7, #16]
 80011ac:	4a26      	ldr	r2, [pc, #152]	; (8001248 <DrawCalenderField+0x1cc>)
 80011ae:	fba2 2303 	umull	r2, r3, r2, r3
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d002      	beq.n	80011c6 <DrawCalenderField+0x14a>
			cal.color = KALBRIGHT;
 80011c0:	23e0      	movs	r3, #224	; 0xe0
 80011c2:	747b      	strb	r3, [r7, #17]
 80011c4:	e012      	b.n	80011ec <DrawCalenderField+0x170>
		else
			cal.color = KALDARK;
 80011c6:	23dd      	movs	r3, #221	; 0xdd
 80011c8:	747b      	strb	r3, [r7, #17]
 80011ca:	e00f      	b.n	80011ec <DrawCalenderField+0x170>
	}
	else
	{
		if(cal.place/5%2 != 0)
 80011cc:	7c3b      	ldrb	r3, [r7, #16]
 80011ce:	4a1e      	ldr	r2, [pc, #120]	; (8001248 <DrawCalenderField+0x1cc>)
 80011d0:	fba2 2303 	umull	r2, r3, r2, r3
 80011d4:	089b      	lsrs	r3, r3, #2
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d002      	beq.n	80011e8 <DrawCalenderField+0x16c>
					cal.color = KALDARK;
 80011e2:	23dd      	movs	r3, #221	; 0xdd
 80011e4:	747b      	strb	r3, [r7, #17]
 80011e6:	e001      	b.n	80011ec <DrawCalenderField+0x170>
				else
					cal.color = KALBRIGHT;
 80011e8:	23e0      	movs	r3, #224	; 0xe0
 80011ea:	747b      	strb	r3, [r7, #17]
	}

	Paint_NewImage(frameBuf, 196, 88, 0, 0xff);
 80011ec:	6a38      	ldr	r0, [r7, #32]
 80011ee:	23ff      	movs	r3, #255	; 0xff
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2300      	movs	r3, #0
 80011f4:	2258      	movs	r2, #88	; 0x58
 80011f6:	21c4      	movs	r1, #196	; 0xc4
 80011f8:	f7ff fd1e 	bl	8000c38 <Paint_NewImage>
	Paint_Clear(cal.color);
 80011fc:	7c7b      	ldrb	r3, [r7, #17]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fe0a 	bl	8000e18 <Paint_Clear>
	Paint_DrawString_EN(5, 20, fach, &Font24, cal.color, 0x44 );
 8001204:	7c7b      	ldrb	r3, [r7, #17]
 8001206:	2244      	movs	r2, #68	; 0x44
 8001208:	9201      	str	r2, [sp, #4]
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <DrawCalenderField+0x1d0>)
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	2114      	movs	r1, #20
 8001212:	2005      	movs	r0, #5
 8001214:	f7ff fede 	bl	8000fd4 <Paint_DrawString_EN>
	Paint_DrawString_EN(5, 50, dozent, &Font24, cal.color, 0x66 );
 8001218:	7c7b      	ldrb	r3, [r7, #17]
 800121a:	2266      	movs	r2, #102	; 0x66
 800121c:	9201      	str	r2, [sp, #4]
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <DrawCalenderField+0x1d0>)
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	2132      	movs	r1, #50	; 0x32
 8001226:	2005      	movs	r0, #5
 8001228:	f7ff fed4 	bl	8000fd4 <Paint_DrawString_EN>
	//EpdDriverDrawBox(frameBuf, 202, 195, 196, 88);
	EpdDriverDrawBox(frameBuf, cal.posX, cal.posY, 196, 88);
 800122c:	6a38      	ldr	r0, [r7, #32]
 800122e:	8a79      	ldrh	r1, [r7, #18]
 8001230:	8aba      	ldrh	r2, [r7, #20]
 8001232:	2358      	movs	r3, #88	; 0x58
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	23c4      	movs	r3, #196	; 0xc4
 8001238:	f7ff fcbe 	bl	8000bb8 <EpdDriverDrawBox>
 800123c:	46ad      	mov	sp, r5
}
 800123e:	bf00      	nop
 8001240:	3728      	adds	r7, #40	; 0x28
 8001242:	46bd      	mov	sp, r7
 8001244:	bdb0      	pop	{r4, r5, r7, pc}
 8001246:	bf00      	nop
 8001248:	cccccccd 	.word	0xcccccccd
 800124c:	20000000 	.word	0x20000000

08001250 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001256:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <MX_DMA_Init+0x60>)
 8001258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800125a:	4a15      	ldr	r2, [pc, #84]	; (80012b0 <MX_DMA_Init+0x60>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6493      	str	r3, [r2, #72]	; 0x48
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <MX_DMA_Init+0x60>)
 8001264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <MX_DMA_Init+0x60>)
 8001270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001272:	4a0f      	ldr	r2, [pc, #60]	; (80012b0 <MX_DMA_Init+0x60>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6493      	str	r3, [r2, #72]	; 0x48
 800127a:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <MX_DMA_Init+0x60>)
 800127c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	200b      	movs	r0, #11
 800128c:	f000 fe49 	bl	8001f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001290:	200b      	movs	r0, #11
 8001292:	f000 fe62 	bl	8001f5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	200c      	movs	r0, #12
 800129c:	f000 fe41 	bl	8001f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80012a0:	200c      	movs	r0, #12
 80012a2:	f000 fe5a 	bl	8001f5a <HAL_NVIC_EnableIRQ>

}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000

080012b4 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08c      	sub	sp, #48	; 0x30
 80012b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	4b79      	ldr	r3, [pc, #484]	; (80014b0 <MX_GPIO_Init+0x1fc>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	4a78      	ldr	r2, [pc, #480]	; (80014b0 <MX_GPIO_Init+0x1fc>)
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d6:	4b76      	ldr	r3, [pc, #472]	; (80014b0 <MX_GPIO_Init+0x1fc>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	61bb      	str	r3, [r7, #24]
 80012e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e2:	4b73      	ldr	r3, [pc, #460]	; (80014b0 <MX_GPIO_Init+0x1fc>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	4a72      	ldr	r2, [pc, #456]	; (80014b0 <MX_GPIO_Init+0x1fc>)
 80012e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ee:	4b70      	ldr	r3, [pc, #448]	; (80014b0 <MX_GPIO_Init+0x1fc>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	4b6d      	ldr	r3, [pc, #436]	; (80014b0 <MX_GPIO_Init+0x1fc>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	4a6c      	ldr	r2, [pc, #432]	; (80014b0 <MX_GPIO_Init+0x1fc>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001306:	4b6a      	ldr	r3, [pc, #424]	; (80014b0 <MX_GPIO_Init+0x1fc>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	4b67      	ldr	r3, [pc, #412]	; (80014b0 <MX_GPIO_Init+0x1fc>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	4a66      	ldr	r2, [pc, #408]	; (80014b0 <MX_GPIO_Init+0x1fc>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131e:	4b64      	ldr	r3, [pc, #400]	; (80014b0 <MX_GPIO_Init+0x1fc>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800132a:	4b61      	ldr	r3, [pc, #388]	; (80014b0 <MX_GPIO_Init+0x1fc>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	4a60      	ldr	r2, [pc, #384]	; (80014b0 <MX_GPIO_Init+0x1fc>)
 8001330:	f043 0308 	orr.w	r3, r3, #8
 8001334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001336:	4b5e      	ldr	r3, [pc, #376]	; (80014b0 <MX_GPIO_Init+0x1fc>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001342:	4b5b      	ldr	r3, [pc, #364]	; (80014b0 <MX_GPIO_Init+0x1fc>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a5a      	ldr	r2, [pc, #360]	; (80014b0 <MX_GPIO_Init+0x1fc>)
 8001348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134e:	4b58      	ldr	r3, [pc, #352]	; (80014b0 <MX_GPIO_Init+0x1fc>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800135a:	f001 fa59 	bl	8002810 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EPD_CS_Pin|EPD_RST_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	2111      	movs	r1, #17
 8001362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001366:	f001 f977 	bl	8002658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001370:	4850      	ldr	r0, [pc, #320]	; (80014b4 <MX_GPIO_Init+0x200>)
 8001372:	f001 f971 	bl	8002658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	2140      	movs	r1, #64	; 0x40
 800137a:	484f      	ldr	r0, [pc, #316]	; (80014b8 <MX_GPIO_Init+0x204>)
 800137c:	f001 f96c 	bl	8002658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001380:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001386:	4b4d      	ldr	r3, [pc, #308]	; (80014bc <MX_GPIO_Init+0x208>)
 8001388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	4619      	mov	r1, r3
 8001394:	484a      	ldr	r0, [pc, #296]	; (80014c0 <MX_GPIO_Init+0x20c>)
 8001396:	f000 ffb5 	bl	8002304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_RST_Pin;
 800139a:	2311      	movs	r3, #17
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	2301      	movs	r3, #1
 80013a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	4619      	mov	r1, r3
 80013b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b4:	f000 ffa6 	bl	8002304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_HRDY_Pin;
 80013b8:	2320      	movs	r3, #32
 80013ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EPD_HRDY_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	4619      	mov	r1, r3
 80013ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ce:	f000 ff99 	bl	8002304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80013d2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80013d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d8:	2301      	movs	r3, #1
 80013da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	4619      	mov	r1, r3
 80013ea:	4832      	ldr	r0, [pc, #200]	; (80014b4 <MX_GPIO_Init+0x200>)
 80013ec:	f000 ff8a 	bl	8002304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	2303      	movs	r3, #3
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001402:	2307      	movs	r3, #7
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	4619      	mov	r1, r3
 800140c:	482d      	ldr	r0, [pc, #180]	; (80014c4 <MX_GPIO_Init+0x210>)
 800140e:	f000 ff79 	bl	8002304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001412:	2320      	movs	r3, #32
 8001414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800141e:	f107 031c 	add.w	r3, r7, #28
 8001422:	4619      	mov	r1, r3
 8001424:	4824      	ldr	r0, [pc, #144]	; (80014b8 <MX_GPIO_Init+0x204>)
 8001426:	f000 ff6d 	bl	8002304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800142a:	2340      	movs	r3, #64	; 0x40
 800142c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	4619      	mov	r1, r3
 8001440:	481d      	ldr	r0, [pc, #116]	; (80014b8 <MX_GPIO_Init+0x204>)
 8001442:	f000 ff5f 	bl	8002304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001446:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800144a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001458:	2308      	movs	r3, #8
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	4619      	mov	r1, r3
 8001462:	4815      	ldr	r0, [pc, #84]	; (80014b8 <MX_GPIO_Init+0x204>)
 8001464:	f000 ff4e 	bl	8002304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001468:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800147a:	230a      	movs	r3, #10
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	4619      	mov	r1, r3
 8001484:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001488:	f000 ff3c 	bl	8002304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800148c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	4619      	mov	r1, r3
 80014a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a4:	f000 ff2e 	bl	8002304 <HAL_GPIO_Init>

}
 80014a8:	bf00      	nop
 80014aa:	3730      	adds	r7, #48	; 0x30
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40021000 	.word	0x40021000
 80014b4:	48000400 	.word	0x48000400
 80014b8:	48001800 	.word	0x48001800
 80014bc:	10110000 	.word	0x10110000
 80014c0:	48000800 	.word	0x48000800
 80014c4:	48000c00 	.word	0x48000c00

080014c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b096      	sub	sp, #88	; 0x58
 80014cc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ce:	f000 fbba 	bl	8001c46 <HAL_Init>
  /* USER CODE BEGIN Init */

 // char tex[]={'H','A','L','L','O','\0'};
  char  fach[11];
  char  doz[4];
  char* tempLoad = "Template Loaded";
 80014d2:	4b46      	ldr	r3, [pc, #280]	; (80015ec <main+0x124>)
 80014d4:	647b      	str	r3, [r7, #68]	; 0x44
  //char end[1] = {'\N'};
  uint8_t rxBuf[50]={0};
 80014d6:	463b      	mov	r3, r7
 80014d8:	2232      	movs	r2, #50	; 0x32
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f004 fead 	bl	800623c <memset>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e2:	f000 f887 	bl	80015f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e6:	f7ff fee5 	bl	80012b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80014ea:	f000 f8ff 	bl	80016ec <MX_SPI1_Init>
  MX_DMA_Init();
 80014ee:	f7ff feaf 	bl	8001250 <MX_DMA_Init>
  MX_UART4_Init();
 80014f2:	f000 fab1 	bl	8001a58 <MX_UART4_Init>
  HAL_UART_MspInit(&huart4);
 80014f6:	483e      	ldr	r0, [pc, #248]	; (80015f0 <main+0x128>)
 80014f8:	f000 fade 	bl	8001ab8 <HAL_UART_MspInit>
  /* USER CODE BEGIN 2 */
  IT8951_Init();
 80014fc:	f7ff faf0 	bl	8000ae0 <IT8951_Init>
 while(1)
 {
	 //IT8951DisplayExample3();
	 //IT8951DisplayExample4();

	 HAL_UART_Receive(&huart4, rxBuf, 20,HAL_MAX_DELAY);
 8001500:	4639      	mov	r1, r7
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	2214      	movs	r2, #20
 8001508:	4839      	ldr	r0, [pc, #228]	; (80015f0 <main+0x128>)
 800150a:	f003 faa7 	bl	8004a5c <HAL_UART_Receive>
	 if(rxBuf[0]==0)
 800150e:	783b      	ldrb	r3, [r7, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d111      	bne.n	8001538 <main+0x70>
	 {
		 EpdDriverLoadTemplate();
 8001514:	f7ff fb1a 	bl	8000b4c <EpdDriverLoadTemplate>
		 EpdDriverShowDisp();
 8001518:	f7ff fb7e 	bl	8000c18 <EpdDriverShowDisp>
		 for(int i=0; i<50;i++)
 800151c:	2300      	movs	r3, #0
 800151e:	657b      	str	r3, [r7, #84]	; 0x54
 8001520:	e007      	b.n	8001532 <main+0x6a>
		 {rxBuf[i]=0;}
 8001522:	463a      	mov	r2, r7
 8001524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001526:	4413      	add	r3, r2
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
		 for(int i=0; i<50;i++)
 800152c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800152e:	3301      	adds	r3, #1
 8001530:	657b      	str	r3, [r7, #84]	; 0x54
 8001532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001534:	2b31      	cmp	r3, #49	; 0x31
 8001536:	ddf4      	ble.n	8001522 <main+0x5a>
		 //HAL_UART_Transmit(&huart4, (uint8_t*)tempLoad, 16, HAL_MAX_DELAY);
		// HAL_UART_Transmit(&huart4, end, 1, HAL_MAX_DELAY);
	 }
	 if((0<rxBuf[0]) & (rxBuf[0] <=35))
 8001538:	783b      	ldrb	r3, [r7, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	bf14      	ite	ne
 800153e:	2301      	movne	r3, #1
 8001540:	2300      	moveq	r3, #0
 8001542:	b2da      	uxtb	r2, r3
 8001544:	783b      	ldrb	r3, [r7, #0]
 8001546:	2b23      	cmp	r3, #35	; 0x23
 8001548:	bf94      	ite	ls
 800154a:	2301      	movls	r3, #1
 800154c:	2300      	movhi	r3, #0
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4013      	ands	r3, r2
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d042      	beq.n	80015de <main+0x116>
	 {
		 for(int i=15; i<18;i++)
 8001558:	230f      	movs	r3, #15
 800155a:	653b      	str	r3, [r7, #80]	; 0x50
 800155c:	e00d      	b.n	800157a <main+0xb2>
			 {doz[i-15]=rxBuf[i];}
 800155e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001560:	3b0f      	subs	r3, #15
 8001562:	4639      	mov	r1, r7
 8001564:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001566:	440a      	add	r2, r1
 8001568:	7812      	ldrb	r2, [r2, #0]
 800156a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800156e:	440b      	add	r3, r1
 8001570:	f803 2c24 	strb.w	r2, [r3, #-36]
		 for(int i=15; i<18;i++)
 8001574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001576:	3301      	adds	r3, #1
 8001578:	653b      	str	r3, [r7, #80]	; 0x50
 800157a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800157c:	2b11      	cmp	r3, #17
 800157e:	ddee      	ble.n	800155e <main+0x96>
		 for(int i=1; i<11;i++)
 8001580:	2301      	movs	r3, #1
 8001582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001584:	e00d      	b.n	80015a2 <main+0xda>
		 	 {fach[i-1]=rxBuf[i];}
 8001586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001588:	3b01      	subs	r3, #1
 800158a:	4639      	mov	r1, r7
 800158c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800158e:	440a      	add	r2, r1
 8001590:	7812      	ldrb	r2, [r2, #0]
 8001592:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001596:	440b      	add	r3, r1
 8001598:	f803 2c20 	strb.w	r2, [r3, #-32]
		 for(int i=1; i<11;i++)
 800159c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800159e:	3301      	adds	r3, #1
 80015a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015a4:	2b0a      	cmp	r3, #10
 80015a6:	ddee      	ble.n	8001586 <main+0xbe>
		 doz[3]='\0';
 80015a8:	2300      	movs	r3, #0
 80015aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		 DrawCalenderField(rxBuf[0], fach, doz);
 80015ae:	783b      	ldrb	r3, [r7, #0]
 80015b0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80015b4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fd5f 	bl	800107c <DrawCalenderField>
		 EpdDriverShowDisp();
 80015be:	f7ff fb2b 	bl	8000c18 <EpdDriverShowDisp>
		 for(int i=0; i<50;i++)
 80015c2:	2300      	movs	r3, #0
 80015c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80015c6:	e007      	b.n	80015d8 <main+0x110>
		 	 {rxBuf[i]=0;}
 80015c8:	463a      	mov	r2, r7
 80015ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015cc:	4413      	add	r3, r2
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
		 for(int i=0; i<50;i++)
 80015d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015d4:	3301      	adds	r3, #1
 80015d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80015d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015da:	2b31      	cmp	r3, #49	; 0x31
 80015dc:	ddf4      	ble.n	80015c8 <main+0x100>
		 //HAL_UART_Transmit(&huart4, (uint8_t*)tempLoad, 16, HAL_MAX_DELAY);
		 //HAL_UART_Transmit(&huart4, trans, 6, HAL_MAX_DELAY);
		 //HAL_UART_Receive(&huart4, rxBuf, 2,HAL_MAX_DELAY);

	 }
	 if(37 == rxBuf[0])
 80015de:	783b      	ldrb	r3, [r7, #0]
 80015e0:	2b25      	cmp	r3, #37	; 0x25
 80015e2:	d18d      	bne.n	8001500 <main+0x38>
	 	 {
		 EpdDriverShowDisp();
 80015e4:	f7ff fb18 	bl	8000c18 <EpdDriverShowDisp>
	 HAL_UART_Receive(&huart4, rxBuf, 20,HAL_MAX_DELAY);
 80015e8:	e78a      	b.n	8001500 <main+0x38>
 80015ea:	bf00      	nop
 80015ec:	08007190 	.word	0x08007190
 80015f0:	200001a8 	.word	0x200001a8

080015f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b0bc      	sub	sp, #240	; 0xf0
 80015f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015fe:	2244      	movs	r2, #68	; 0x44
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f004 fe1a 	bl	800623c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001608:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2294      	movs	r2, #148	; 0x94
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f004 fe0c 	bl	800623c <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001624:	2000      	movs	r0, #0
 8001626:	f001 f84f 	bl	80026c8 <HAL_PWREx_ControlVoltageScaling>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8001630:	f000 f854 	bl	80016dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001634:	2302      	movs	r3, #2
 8001636:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800163a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800163e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001642:	2340      	movs	r3, #64	; 0x40
 8001644:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001648:	2302      	movs	r3, #2
 800164a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800164e:	2302      	movs	r3, #2
 8001650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001654:	2302      	movs	r3, #2
 8001656:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 28;
 800165a:	231c      	movs	r3, #28
 800165c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001660:	2302      	movs	r3, #2
 8001662:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001666:	2302      	movs	r3, #2
 8001668:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800166c:	2302      	movs	r3, #2
 800166e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001672:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001676:	4618      	mov	r0, r3
 8001678:	f001 f8da 	bl	8002830 <HAL_RCC_OscConfig>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001682:	f000 f82b 	bl	80016dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001686:	230f      	movs	r3, #15
 8001688:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800168c:	2303      	movs	r3, #3
 800168e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001692:	2300      	movs	r3, #0
 8001694:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001698:	2300      	movs	r3, #0
 800169a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800169e:	2300      	movs	r3, #0
 80016a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016a4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016a8:	2105      	movs	r1, #5
 80016aa:	4618      	mov	r0, r3
 80016ac:	f001 fcae 	bl	800300c <HAL_RCC_ClockConfig>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80016b6:	f000 f811 	bl	80016dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80016ba:	2308      	movs	r3, #8
 80016bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80016be:	2300      	movs	r3, #0
 80016c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	4618      	mov	r0, r3
 80016c6:	f001 ff51 	bl	800356c <HAL_RCCEx_PeriphCLKConfig>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80016d0:	f000 f804 	bl	80016dc <Error_Handler>
  }
}
 80016d4:	bf00      	nop
 80016d6:	37f0      	adds	r7, #240	; 0xf0
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <MX_SPI1_Init+0x74>)
 80016f2:	4a1c      	ldr	r2, [pc, #112]	; (8001764 <MX_SPI1_Init+0x78>)
 80016f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016f6:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <MX_SPI1_Init+0x74>)
 80016f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <MX_SPI1_Init+0x74>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001704:	4b16      	ldr	r3, [pc, #88]	; (8001760 <MX_SPI1_Init+0x74>)
 8001706:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800170a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800170c:	4b14      	ldr	r3, [pc, #80]	; (8001760 <MX_SPI1_Init+0x74>)
 800170e:	2200      	movs	r2, #0
 8001710:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001712:	4b13      	ldr	r3, [pc, #76]	; (8001760 <MX_SPI1_Init+0x74>)
 8001714:	2200      	movs	r2, #0
 8001716:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <MX_SPI1_Init+0x74>)
 800171a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800171e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <MX_SPI1_Init+0x74>)
 8001722:	2218      	movs	r2, #24
 8001724:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <MX_SPI1_Init+0x74>)
 8001728:	2200      	movs	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <MX_SPI1_Init+0x74>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <MX_SPI1_Init+0x74>)
 8001734:	2200      	movs	r2, #0
 8001736:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <MX_SPI1_Init+0x74>)
 800173a:	2207      	movs	r2, #7
 800173c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <MX_SPI1_Init+0x74>)
 8001740:	2200      	movs	r2, #0
 8001742:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <MX_SPI1_Init+0x74>)
 8001746:	2208      	movs	r2, #8
 8001748:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_SPI1_Init+0x74>)
 800174c:	f002 fc16 	bl	8003f7c <HAL_SPI_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001756:	f7ff ffc1 	bl	80016dc <Error_Handler>
  }

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200000e4 	.word	0x200000e4
 8001764:	40013000 	.word	0x40013000

08001768 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a17      	ldr	r2, [pc, #92]	; (80017e4 <HAL_SPI_MspInit+0x7c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d128      	bne.n	80017dc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800178a:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <HAL_SPI_MspInit+0x80>)
 800178c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178e:	4a16      	ldr	r2, [pc, #88]	; (80017e8 <HAL_SPI_MspInit+0x80>)
 8001790:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001794:	6613      	str	r3, [r2, #96]	; 0x60
 8001796:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <HAL_SPI_MspInit+0x80>)
 8001798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800179a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <HAL_SPI_MspInit+0x80>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	4a10      	ldr	r2, [pc, #64]	; (80017e8 <HAL_SPI_MspInit+0x80>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <HAL_SPI_MspInit+0x80>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80017ba:	23c2      	movs	r3, #194	; 0xc2
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	2303      	movs	r3, #3
 80017c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ca:	2305      	movs	r3, #5
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d8:	f000 fd94 	bl	8002304 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80017dc:	bf00      	nop
 80017de:	3728      	adds	r7, #40	; 0x28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40013000 	.word	0x40013000
 80017e8:	40021000 	.word	0x40021000

080017ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <HAL_MspInit+0x44>)
 80017f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f6:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <HAL_MspInit+0x44>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6613      	str	r3, [r2, #96]	; 0x60
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <HAL_MspInit+0x44>)
 8001800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_MspInit+0x44>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	4a08      	ldr	r2, [pc, #32]	; (8001830 <HAL_MspInit+0x44>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001814:	6593      	str	r3, [r2, #88]	; 0x58
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_MspInit+0x44>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000

08001834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <HardFault_Handler+0x4>

08001848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <MemManage_Handler+0x4>

0800184e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <BusFault_Handler+0x4>

08001854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <UsageFault_Handler+0x4>

0800185a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001888:	f000 fa30 	bl	8001cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}

08001890 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <DMA1_Channel1_IRQHandler+0x10>)
 8001896:	f000 fc23 	bl	80020e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000148 	.word	0x20000148

080018a4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <DMA1_Channel2_IRQHandler+0x10>)
 80018aa:	f000 fc19 	bl	80020e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000234 	.word	0x20000234

080018b8 <_read>:
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	e00a      	b.n	80018e0 <_read+0x28>
 80018ca:	f3af 8000 	nop.w
 80018ce:	4601      	mov	r1, r0
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	60ba      	str	r2, [r7, #8]
 80018d6:	b2ca      	uxtb	r2, r1
 80018d8:	701a      	strb	r2, [r3, #0]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	3301      	adds	r3, #1
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	dbf0      	blt.n	80018ca <_read+0x12>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4618      	mov	r0, r3
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <_write>:
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	e009      	b.n	8001918 <_write+0x26>
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	60ba      	str	r2, [r7, #8]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f3af 8000 	nop.w
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	dbf1      	blt.n	8001904 <_write+0x12>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <_close>:
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <_fstat>:
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	6039      	str	r1, [r7, #0]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	2300      	movs	r3, #0
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <_isatty>:
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	2301      	movs	r3, #1
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <_lseek>:
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	2300      	movs	r3, #0
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <_sbrk>:
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <_sbrk+0x50>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <_sbrk+0x16>
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <_sbrk+0x50>)
 80019a6:	4a10      	ldr	r2, [pc, #64]	; (80019e8 <_sbrk+0x54>)
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <_sbrk+0x50>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <_sbrk+0x50>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4413      	add	r3, r2
 80019b8:	466a      	mov	r2, sp
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d907      	bls.n	80019ce <_sbrk+0x3a>
 80019be:	f004 fc13 	bl	80061e8 <__errno>
 80019c2:	4602      	mov	r2, r0
 80019c4:	230c      	movs	r3, #12
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295
 80019cc:	e006      	b.n	80019dc <_sbrk+0x48>
 80019ce:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <_sbrk+0x50>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	4a03      	ldr	r2, [pc, #12]	; (80019e4 <_sbrk+0x50>)
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000094 	.word	0x20000094
 80019e8:	200002a0 	.word	0x200002a0

080019ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f0:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <SystemInit+0x64>)
 80019f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f6:	4a16      	ldr	r2, [pc, #88]	; (8001a50 <SystemInit+0x64>)
 80019f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <SystemInit+0x68>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <SystemInit+0x68>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <SystemInit+0x68>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <SystemInit+0x68>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a0f      	ldr	r2, [pc, #60]	; (8001a54 <SystemInit+0x68>)
 8001a18:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a1c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a20:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001a22:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <SystemInit+0x68>)
 8001a24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a28:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <SystemInit+0x68>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a09      	ldr	r2, [pc, #36]	; (8001a54 <SystemInit+0x68>)
 8001a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a34:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <SystemInit+0x68>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <SystemInit+0x64>)
 8001a3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a42:	609a      	str	r2, [r3, #8]
#endif
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000ed00 	.word	0xe000ed00
 8001a54:	40021000 	.word	0x40021000

08001a58 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <MX_UART4_Init+0x58>)
 8001a5e:	4a15      	ldr	r2, [pc, #84]	; (8001ab4 <MX_UART4_Init+0x5c>)
 8001a60:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <MX_UART4_Init+0x58>)
 8001a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a68:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <MX_UART4_Init+0x58>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <MX_UART4_Init+0x58>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <MX_UART4_Init+0x58>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <MX_UART4_Init+0x58>)
 8001a7e:	220c      	movs	r2, #12
 8001a80:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <MX_UART4_Init+0x58>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <MX_UART4_Init+0x58>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <MX_UART4_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <MX_UART4_Init+0x58>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_UART4_Init+0x58>)
 8001a9c:	f002 ff8e 	bl	80049bc <HAL_UART_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001aa6:	f7ff fe19 	bl	80016dc <Error_Handler>
  }

}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200001a8 	.word	0x200001a8
 8001ab4:	40004c00 	.word	0x40004c00

08001ab8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a40      	ldr	r2, [pc, #256]	; (8001bd8 <HAL_UART_MspInit+0x120>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d17a      	bne.n	8001bd0 <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ada:	4b40      	ldr	r3, [pc, #256]	; (8001bdc <HAL_UART_MspInit+0x124>)
 8001adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ade:	4a3f      	ldr	r2, [pc, #252]	; (8001bdc <HAL_UART_MspInit+0x124>)
 8001ae0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ae4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae6:	4b3d      	ldr	r3, [pc, #244]	; (8001bdc <HAL_UART_MspInit+0x124>)
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af2:	4b3a      	ldr	r3, [pc, #232]	; (8001bdc <HAL_UART_MspInit+0x124>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	4a39      	ldr	r2, [pc, #228]	; (8001bdc <HAL_UART_MspInit+0x124>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afe:	4b37      	ldr	r3, [pc, #220]	; (8001bdc <HAL_UART_MspInit+0x124>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b10:	2302      	movs	r3, #2
 8001b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b14:	2301      	movs	r3, #1
 8001b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b1c:	2308      	movs	r3, #8
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	4619      	mov	r1, r3
 8001b26:	482e      	ldr	r0, [pc, #184]	; (8001be0 <HAL_UART_MspInit+0x128>)
 8001b28:	f000 fbec 	bl	8002304 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Channel1;
 8001b2c:	4b2d      	ldr	r3, [pc, #180]	; (8001be4 <HAL_UART_MspInit+0x12c>)
 8001b2e:	4a2e      	ldr	r2, [pc, #184]	; (8001be8 <HAL_UART_MspInit+0x130>)
 8001b30:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001b32:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <HAL_UART_MspInit+0x12c>)
 8001b34:	221e      	movs	r2, #30
 8001b36:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b38:	4b2a      	ldr	r3, [pc, #168]	; (8001be4 <HAL_UART_MspInit+0x12c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b3e:	4b29      	ldr	r3, [pc, #164]	; (8001be4 <HAL_UART_MspInit+0x12c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b44:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <HAL_UART_MspInit+0x12c>)
 8001b46:	2280      	movs	r2, #128	; 0x80
 8001b48:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b4a:	4b26      	ldr	r3, [pc, #152]	; (8001be4 <HAL_UART_MspInit+0x12c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b50:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <HAL_UART_MspInit+0x12c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001b56:	4b23      	ldr	r3, [pc, #140]	; (8001be4 <HAL_UART_MspInit+0x12c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b5c:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <HAL_UART_MspInit+0x12c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001b62:	4820      	ldr	r0, [pc, #128]	; (8001be4 <HAL_UART_MspInit+0x12c>)
 8001b64:	f000 fa14 	bl	8001f90 <HAL_DMA_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8001b6e:	f7ff fdb5 	bl	80016dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a1b      	ldr	r2, [pc, #108]	; (8001be4 <HAL_UART_MspInit+0x12c>)
 8001b76:	679a      	str	r2, [r3, #120]	; 0x78
 8001b78:	4a1a      	ldr	r2, [pc, #104]	; (8001be4 <HAL_UART_MspInit+0x12c>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Channel2;
 8001b7e:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_UART_MspInit+0x134>)
 8001b80:	4a1b      	ldr	r2, [pc, #108]	; (8001bf0 <HAL_UART_MspInit+0x138>)
 8001b82:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001b84:	4b19      	ldr	r3, [pc, #100]	; (8001bec <HAL_UART_MspInit+0x134>)
 8001b86:	221f      	movs	r2, #31
 8001b88:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <HAL_UART_MspInit+0x134>)
 8001b8c:	2210      	movs	r2, #16
 8001b8e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b90:	4b16      	ldr	r3, [pc, #88]	; (8001bec <HAL_UART_MspInit+0x134>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_UART_MspInit+0x134>)
 8001b98:	2280      	movs	r2, #128	; 0x80
 8001b9a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <HAL_UART_MspInit+0x134>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_UART_MspInit+0x134>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001ba8:	4b10      	ldr	r3, [pc, #64]	; (8001bec <HAL_UART_MspInit+0x134>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <HAL_UART_MspInit+0x134>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001bb4:	480d      	ldr	r0, [pc, #52]	; (8001bec <HAL_UART_MspInit+0x134>)
 8001bb6:	f000 f9eb 	bl	8001f90 <HAL_DMA_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001bc0:	f7ff fd8c 	bl	80016dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a09      	ldr	r2, [pc, #36]	; (8001bec <HAL_UART_MspInit+0x134>)
 8001bc8:	675a      	str	r2, [r3, #116]	; 0x74
 8001bca:	4a08      	ldr	r2, [pc, #32]	; (8001bec <HAL_UART_MspInit+0x134>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	3728      	adds	r7, #40	; 0x28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40004c00 	.word	0x40004c00
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	48000800 	.word	0x48000800
 8001be4:	20000148 	.word	0x20000148
 8001be8:	40020008 	.word	0x40020008
 8001bec:	20000234 	.word	0x20000234
 8001bf0:	4002001c 	.word	0x4002001c

08001bf4 <Reset_Handler>:
 8001bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c2c <LoopForever+0x2>
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	e003      	b.n	8001c04 <LoopCopyDataInit>

08001bfc <CopyDataInit>:
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <LoopForever+0x6>)
 8001bfe:	585b      	ldr	r3, [r3, r1]
 8001c00:	5043      	str	r3, [r0, r1]
 8001c02:	3104      	adds	r1, #4

08001c04 <LoopCopyDataInit>:
 8001c04:	480b      	ldr	r0, [pc, #44]	; (8001c34 <LoopForever+0xa>)
 8001c06:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <LoopForever+0xe>)
 8001c08:	1842      	adds	r2, r0, r1
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d3f6      	bcc.n	8001bfc <CopyDataInit>
 8001c0e:	4a0b      	ldr	r2, [pc, #44]	; (8001c3c <LoopForever+0x12>)
 8001c10:	e002      	b.n	8001c18 <LoopFillZerobss>

08001c12 <FillZerobss>:
 8001c12:	2300      	movs	r3, #0
 8001c14:	f842 3b04 	str.w	r3, [r2], #4

08001c18 <LoopFillZerobss>:
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <LoopForever+0x16>)
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d3f9      	bcc.n	8001c12 <FillZerobss>
 8001c1e:	f7ff fee5 	bl	80019ec <SystemInit>
 8001c22:	f004 fae7 	bl	80061f4 <__libc_init_array>
 8001c26:	f7ff fc4f 	bl	80014c8 <main>

08001c2a <LoopForever>:
 8001c2a:	e7fe      	b.n	8001c2a <LoopForever>
 8001c2c:	200a0000 	.word	0x200a0000
 8001c30:	08081ae0 	.word	0x08081ae0
 8001c34:	20000000 	.word	0x20000000
 8001c38:	20000078 	.word	0x20000078
 8001c3c:	20000078 	.word	0x20000078
 8001c40:	2000029c 	.word	0x2000029c

08001c44 <ADC1_IRQHandler>:
 8001c44:	e7fe      	b.n	8001c44 <ADC1_IRQHandler>

08001c46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c50:	2003      	movs	r0, #3
 8001c52:	f000 f95b 	bl	8001f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c56:	2000      	movs	r0, #0
 8001c58:	f000 f80e 	bl	8001c78 <HAL_InitTick>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	71fb      	strb	r3, [r7, #7]
 8001c66:	e001      	b.n	8001c6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c68:	f7ff fdc0 	bl	80017ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c84:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <HAL_InitTick+0x68>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d022      	beq.n	8001cd2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c8c:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <HAL_InitTick+0x6c>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <HAL_InitTick+0x68>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c98:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 f968 	bl	8001f76 <HAL_SYSTICK_Config>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10f      	bne.n	8001ccc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b0f      	cmp	r3, #15
 8001cb0:	d809      	bhi.n	8001cc6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8001cba:	f000 f932 	bl	8001f22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <HAL_InitTick+0x70>)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	e007      	b.n	8001cd6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	73fb      	strb	r3, [r7, #15]
 8001cca:	e004      	b.n	8001cd6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	73fb      	strb	r3, [r7, #15]
 8001cd0:	e001      	b.n	8001cd6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000010 	.word	0x20000010
 8001ce4:	20000008 	.word	0x20000008
 8001ce8:	2000000c 	.word	0x2000000c

08001cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_IncTick+0x1c>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_IncTick+0x20>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4a03      	ldr	r2, [pc, #12]	; (8001d08 <HAL_IncTick+0x1c>)
 8001cfc:	6013      	str	r3, [r2, #0]
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	20000294 	.word	0x20000294
 8001d0c:	20000010 	.word	0x20000010

08001d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return uwTick;
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_GetTick+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000294 	.word	0x20000294

08001d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d30:	f7ff ffee 	bl	8001d10 <HAL_GetTick>
 8001d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d40:	d004      	beq.n	8001d4c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_Delay+0x40>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4413      	add	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d4c:	bf00      	nop
 8001d4e:	f7ff ffdf 	bl	8001d10 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d8f7      	bhi.n	8001d4e <HAL_Delay+0x26>
  {
  }
}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000010 	.word	0x20000010

08001d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9e:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	60d3      	str	r3, [r2, #12]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <__NVIC_GetPriorityGrouping+0x18>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	f003 0307 	and.w	r3, r3, #7
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	db0b      	blt.n	8001dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	f003 021f 	and.w	r2, r3, #31
 8001de8:	4907      	ldr	r1, [pc, #28]	; (8001e08 <__NVIC_EnableIRQ+0x38>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	2001      	movs	r0, #1
 8001df2:	fa00 f202 	lsl.w	r2, r0, r2
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000e100 	.word	0xe000e100

08001e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	6039      	str	r1, [r7, #0]
 8001e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	db0a      	blt.n	8001e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	490c      	ldr	r1, [pc, #48]	; (8001e58 <__NVIC_SetPriority+0x4c>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	0112      	lsls	r2, r2, #4
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e34:	e00a      	b.n	8001e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4908      	ldr	r1, [pc, #32]	; (8001e5c <__NVIC_SetPriority+0x50>)
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	3b04      	subs	r3, #4
 8001e44:	0112      	lsls	r2, r2, #4
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	440b      	add	r3, r1
 8001e4a:	761a      	strb	r2, [r3, #24]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000e100 	.word	0xe000e100
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f1c3 0307 	rsb	r3, r3, #7
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	bf28      	it	cs
 8001e7e:	2304      	movcs	r3, #4
 8001e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3304      	adds	r3, #4
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d902      	bls.n	8001e90 <NVIC_EncodePriority+0x30>
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3b03      	subs	r3, #3
 8001e8e:	e000      	b.n	8001e92 <NVIC_EncodePriority+0x32>
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	43d9      	mvns	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	4313      	orrs	r3, r2
         );
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3724      	adds	r7, #36	; 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed8:	d301      	bcc.n	8001ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00f      	b.n	8001efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ede:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <SysTick_Config+0x40>)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee6:	210f      	movs	r1, #15
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eec:	f7ff ff8e 	bl	8001e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <SysTick_Config+0x40>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <SysTick_Config+0x40>)
 8001ef8:	2207      	movs	r2, #7
 8001efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	e000e010 	.word	0xe000e010

08001f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ff29 	bl	8001d6c <__NVIC_SetPriorityGrouping>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b086      	sub	sp, #24
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
 8001f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f34:	f7ff ff3e 	bl	8001db4 <__NVIC_GetPriorityGrouping>
 8001f38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	6978      	ldr	r0, [r7, #20]
 8001f40:	f7ff ff8e 	bl	8001e60 <NVIC_EncodePriority>
 8001f44:	4602      	mov	r2, r0
 8001f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff5d 	bl	8001e0c <__NVIC_SetPriority>
}
 8001f52:	bf00      	nop
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4603      	mov	r3, r0
 8001f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff31 	bl	8001dd0 <__NVIC_EnableIRQ>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ffa2 	bl	8001ec8 <SysTick_Config>
 8001f84:	4603      	mov	r3, r0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e08d      	b.n	80020be <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4b47      	ldr	r3, [pc, #284]	; (80020c8 <HAL_DMA_Init+0x138>)
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d80f      	bhi.n	8001fce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4b45      	ldr	r3, [pc, #276]	; (80020cc <HAL_DMA_Init+0x13c>)
 8001fb6:	4413      	add	r3, r2
 8001fb8:	4a45      	ldr	r2, [pc, #276]	; (80020d0 <HAL_DMA_Init+0x140>)
 8001fba:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbe:	091b      	lsrs	r3, r3, #4
 8001fc0:	009a      	lsls	r2, r3, #2
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a42      	ldr	r2, [pc, #264]	; (80020d4 <HAL_DMA_Init+0x144>)
 8001fca:	641a      	str	r2, [r3, #64]	; 0x40
 8001fcc:	e00e      	b.n	8001fec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4b40      	ldr	r3, [pc, #256]	; (80020d8 <HAL_DMA_Init+0x148>)
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4a3d      	ldr	r2, [pc, #244]	; (80020d0 <HAL_DMA_Init+0x140>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	091b      	lsrs	r3, r3, #4
 8001fe0:	009a      	lsls	r2, r3, #2
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a3c      	ldr	r2, [pc, #240]	; (80020dc <HAL_DMA_Init+0x14c>)
 8001fea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002006:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002010:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800201c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002028:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f8fe 	bl	8002240 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800204c:	d102      	bne.n	8002054 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002068:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d010      	beq.n	8002094 <HAL_DMA_Init+0x104>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b04      	cmp	r3, #4
 8002078:	d80c      	bhi.n	8002094 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f91e 	bl	80022bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	e008      	b.n	80020a6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40020407 	.word	0x40020407
 80020cc:	bffdfff8 	.word	0xbffdfff8
 80020d0:	cccccccd 	.word	0xcccccccd
 80020d4:	40020000 	.word	0x40020000
 80020d8:	bffdfbf8 	.word	0xbffdfbf8
 80020dc:	40020400 	.word	0x40020400

080020e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fc:	f003 031c 	and.w	r3, r3, #28
 8002100:	2204      	movs	r2, #4
 8002102:	409a      	lsls	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d026      	beq.n	800215a <HAL_DMA_IRQHandler+0x7a>
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b00      	cmp	r3, #0
 8002114:	d021      	beq.n	800215a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	2b00      	cmp	r3, #0
 8002122:	d107      	bne.n	8002134 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0204 	bic.w	r2, r2, #4
 8002132:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002138:	f003 021c 	and.w	r2, r3, #28
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	2104      	movs	r1, #4
 8002142:	fa01 f202 	lsl.w	r2, r1, r2
 8002146:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	2b00      	cmp	r3, #0
 800214e:	d071      	beq.n	8002234 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002158:	e06c      	b.n	8002234 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	f003 031c 	and.w	r3, r3, #28
 8002162:	2202      	movs	r2, #2
 8002164:	409a      	lsls	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4013      	ands	r3, r2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d02e      	beq.n	80021cc <HAL_DMA_IRQHandler+0xec>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d029      	beq.n	80021cc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0320 	and.w	r3, r3, #32
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10b      	bne.n	800219e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 020a 	bic.w	r2, r2, #10
 8002194:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	f003 021c 	and.w	r2, r3, #28
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	2102      	movs	r1, #2
 80021ac:	fa01 f202 	lsl.w	r2, r1, r2
 80021b0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d038      	beq.n	8002234 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80021ca:	e033      	b.n	8002234 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d0:	f003 031c 	and.w	r3, r3, #28
 80021d4:	2208      	movs	r2, #8
 80021d6:	409a      	lsls	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d02a      	beq.n	8002236 <HAL_DMA_IRQHandler+0x156>
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d025      	beq.n	8002236 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 020e 	bic.w	r2, r2, #14
 80021f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	f003 021c 	and.w	r2, r3, #28
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	2101      	movs	r1, #1
 8002208:	fa01 f202 	lsl.w	r2, r1, r2
 800220c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002228:	2b00      	cmp	r3, #0
 800222a:	d004      	beq.n	8002236 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002234:	bf00      	nop
 8002236:	bf00      	nop
}
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	4b17      	ldr	r3, [pc, #92]	; (80022ac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002250:	429a      	cmp	r2, r3
 8002252:	d80a      	bhi.n	800226a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002258:	089b      	lsrs	r3, r3, #2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002260:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6493      	str	r3, [r2, #72]	; 0x48
 8002268:	e007      	b.n	800227a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	089b      	lsrs	r3, r3, #2
 8002270:	009a      	lsls	r2, r3, #2
 8002272:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002274:	4413      	add	r3, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	3b08      	subs	r3, #8
 8002282:	4a0c      	ldr	r2, [pc, #48]	; (80022b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002284:	fba2 2303 	umull	r2, r3, r2, r3
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002290:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1CU);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f003 031c 	and.w	r3, r3, #28
 8002298:	2201      	movs	r2, #1
 800229a:	409a      	lsls	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	40020407 	.word	0x40020407
 80022b0:	4002081c 	.word	0x4002081c
 80022b4:	cccccccd 	.word	0xcccccccd
 80022b8:	40020880 	.word	0x40020880

080022bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80022d0:	4413      	add	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	461a      	mov	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a08      	ldr	r2, [pc, #32]	; (8002300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80022de:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2201      	movs	r2, #1
 80022ea:	409a      	lsls	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	1000823f 	.word	0x1000823f
 8002300:	40020940 	.word	0x40020940

08002304 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002304:	b480      	push	{r7}
 8002306:	b087      	sub	sp, #28
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002312:	e166      	b.n	80025e2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	2101      	movs	r1, #1
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	fa01 f303 	lsl.w	r3, r1, r3
 8002320:	4013      	ands	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 8158 	beq.w	80025dc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x38>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b12      	cmp	r3, #18
 800233a:	d123      	bne.n	8002384 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	08da      	lsrs	r2, r3, #3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3208      	adds	r2, #8
 8002344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002348:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	220f      	movs	r2, #15
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	691a      	ldr	r2, [r3, #16]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	08da      	lsrs	r2, r3, #3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3208      	adds	r2, #8
 800237e:	6939      	ldr	r1, [r7, #16]
 8002380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	2203      	movs	r2, #3
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0203 	and.w	r2, r3, #3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d00b      	beq.n	80023d8 <HAL_GPIO_Init+0xd4>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d007      	beq.n	80023d8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023cc:	2b11      	cmp	r3, #17
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b12      	cmp	r3, #18
 80023d6:	d130      	bne.n	800243a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	2203      	movs	r2, #3
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800240e:	2201      	movs	r2, #1
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	f003 0201 	and.w	r2, r3, #1
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	2203      	movs	r2, #3
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4013      	ands	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 80b2 	beq.w	80025dc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002478:	4b61      	ldr	r3, [pc, #388]	; (8002600 <HAL_GPIO_Init+0x2fc>)
 800247a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800247c:	4a60      	ldr	r2, [pc, #384]	; (8002600 <HAL_GPIO_Init+0x2fc>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	6613      	str	r3, [r2, #96]	; 0x60
 8002484:	4b5e      	ldr	r3, [pc, #376]	; (8002600 <HAL_GPIO_Init+0x2fc>)
 8002486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002490:	4a5c      	ldr	r2, [pc, #368]	; (8002604 <HAL_GPIO_Init+0x300>)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	089b      	lsrs	r3, r3, #2
 8002496:	3302      	adds	r3, #2
 8002498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	220f      	movs	r2, #15
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024ba:	d02b      	beq.n	8002514 <HAL_GPIO_Init+0x210>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a52      	ldr	r2, [pc, #328]	; (8002608 <HAL_GPIO_Init+0x304>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d025      	beq.n	8002510 <HAL_GPIO_Init+0x20c>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a51      	ldr	r2, [pc, #324]	; (800260c <HAL_GPIO_Init+0x308>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d01f      	beq.n	800250c <HAL_GPIO_Init+0x208>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a50      	ldr	r2, [pc, #320]	; (8002610 <HAL_GPIO_Init+0x30c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d019      	beq.n	8002508 <HAL_GPIO_Init+0x204>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a4f      	ldr	r2, [pc, #316]	; (8002614 <HAL_GPIO_Init+0x310>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d013      	beq.n	8002504 <HAL_GPIO_Init+0x200>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a4e      	ldr	r2, [pc, #312]	; (8002618 <HAL_GPIO_Init+0x314>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00d      	beq.n	8002500 <HAL_GPIO_Init+0x1fc>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a4d      	ldr	r2, [pc, #308]	; (800261c <HAL_GPIO_Init+0x318>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d007      	beq.n	80024fc <HAL_GPIO_Init+0x1f8>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a4c      	ldr	r2, [pc, #304]	; (8002620 <HAL_GPIO_Init+0x31c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d101      	bne.n	80024f8 <HAL_GPIO_Init+0x1f4>
 80024f4:	2307      	movs	r3, #7
 80024f6:	e00e      	b.n	8002516 <HAL_GPIO_Init+0x212>
 80024f8:	2308      	movs	r3, #8
 80024fa:	e00c      	b.n	8002516 <HAL_GPIO_Init+0x212>
 80024fc:	2306      	movs	r3, #6
 80024fe:	e00a      	b.n	8002516 <HAL_GPIO_Init+0x212>
 8002500:	2305      	movs	r3, #5
 8002502:	e008      	b.n	8002516 <HAL_GPIO_Init+0x212>
 8002504:	2304      	movs	r3, #4
 8002506:	e006      	b.n	8002516 <HAL_GPIO_Init+0x212>
 8002508:	2303      	movs	r3, #3
 800250a:	e004      	b.n	8002516 <HAL_GPIO_Init+0x212>
 800250c:	2302      	movs	r3, #2
 800250e:	e002      	b.n	8002516 <HAL_GPIO_Init+0x212>
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <HAL_GPIO_Init+0x212>
 8002514:	2300      	movs	r3, #0
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	f002 0203 	and.w	r2, r2, #3
 800251c:	0092      	lsls	r2, r2, #2
 800251e:	4093      	lsls	r3, r2
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002526:	4937      	ldr	r1, [pc, #220]	; (8002604 <HAL_GPIO_Init+0x300>)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	089b      	lsrs	r3, r3, #2
 800252c:	3302      	adds	r3, #2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002534:	4b3b      	ldr	r3, [pc, #236]	; (8002624 <HAL_GPIO_Init+0x320>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	43db      	mvns	r3, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002558:	4a32      	ldr	r2, [pc, #200]	; (8002624 <HAL_GPIO_Init+0x320>)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800255e:	4b31      	ldr	r3, [pc, #196]	; (8002624 <HAL_GPIO_Init+0x320>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	43db      	mvns	r3, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4013      	ands	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002582:	4a28      	ldr	r2, [pc, #160]	; (8002624 <HAL_GPIO_Init+0x320>)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002588:	4b26      	ldr	r3, [pc, #152]	; (8002624 <HAL_GPIO_Init+0x320>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	43db      	mvns	r3, r3
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025ac:	4a1d      	ldr	r2, [pc, #116]	; (8002624 <HAL_GPIO_Init+0x320>)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025b2:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <HAL_GPIO_Init+0x320>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4013      	ands	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025d6:	4a13      	ldr	r2, [pc, #76]	; (8002624 <HAL_GPIO_Init+0x320>)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	3301      	adds	r3, #1
 80025e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f47f ae91 	bne.w	8002314 <HAL_GPIO_Init+0x10>
  }
}
 80025f2:	bf00      	nop
 80025f4:	371c      	adds	r7, #28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	40010000 	.word	0x40010000
 8002608:	48000400 	.word	0x48000400
 800260c:	48000800 	.word	0x48000800
 8002610:	48000c00 	.word	0x48000c00
 8002614:	48001000 	.word	0x48001000
 8002618:	48001400 	.word	0x48001400
 800261c:	48001800 	.word	0x48001800
 8002620:	48001c00 	.word	0x48001c00
 8002624:	40010400 	.word	0x40010400

08002628 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	887b      	ldrh	r3, [r7, #2]
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
 8002644:	e001      	b.n	800264a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002646:	2300      	movs	r3, #0
 8002648:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800264a:	7bfb      	ldrb	r3, [r7, #15]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	807b      	strh	r3, [r7, #2]
 8002664:	4613      	mov	r3, r2
 8002666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002668:	787b      	ldrb	r3, [r7, #1]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800266e:	887a      	ldrh	r2, [r7, #2]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002674:	e002      	b.n	800267c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002676:	887a      	ldrh	r2, [r7, #2]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800268c:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002698:	d102      	bne.n	80026a0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800269a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800269e:	e00b      	b.n	80026b8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80026a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ae:	d102      	bne.n	80026b6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80026b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026b4:	e000      	b.n	80026b8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80026b6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40007000 	.word	0x40007000

080026c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d141      	bne.n	800275a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026d6:	4b4b      	ldr	r3, [pc, #300]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e2:	d131      	bne.n	8002748 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026e4:	4b47      	ldr	r3, [pc, #284]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ea:	4a46      	ldr	r2, [pc, #280]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026f4:	4b43      	ldr	r3, [pc, #268]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026fc:	4a41      	ldr	r2, [pc, #260]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002702:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002704:	4b40      	ldr	r3, [pc, #256]	; (8002808 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2232      	movs	r2, #50	; 0x32
 800270a:	fb02 f303 	mul.w	r3, r2, r3
 800270e:	4a3f      	ldr	r2, [pc, #252]	; (800280c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002710:	fba2 2303 	umull	r2, r3, r2, r3
 8002714:	0c9b      	lsrs	r3, r3, #18
 8002716:	3301      	adds	r3, #1
 8002718:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800271a:	e002      	b.n	8002722 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3b01      	subs	r3, #1
 8002720:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002722:	4b38      	ldr	r3, [pc, #224]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272e:	d102      	bne.n	8002736 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f2      	bne.n	800271c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002736:	4b33      	ldr	r3, [pc, #204]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002742:	d158      	bne.n	80027f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e057      	b.n	80027f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002748:	4b2e      	ldr	r3, [pc, #184]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800274a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800274e:	4a2d      	ldr	r2, [pc, #180]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002754:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002758:	e04d      	b.n	80027f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002760:	d141      	bne.n	80027e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002762:	4b28      	ldr	r3, [pc, #160]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800276a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800276e:	d131      	bne.n	80027d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002770:	4b24      	ldr	r3, [pc, #144]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002776:	4a23      	ldr	r2, [pc, #140]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002780:	4b20      	ldr	r3, [pc, #128]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002788:	4a1e      	ldr	r2, [pc, #120]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800278a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800278e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002790:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2232      	movs	r2, #50	; 0x32
 8002796:	fb02 f303 	mul.w	r3, r2, r3
 800279a:	4a1c      	ldr	r2, [pc, #112]	; (800280c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800279c:	fba2 2303 	umull	r2, r3, r2, r3
 80027a0:	0c9b      	lsrs	r3, r3, #18
 80027a2:	3301      	adds	r3, #1
 80027a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027a6:	e002      	b.n	80027ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027ae:	4b15      	ldr	r3, [pc, #84]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ba:	d102      	bne.n	80027c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f2      	bne.n	80027a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027c2:	4b10      	ldr	r3, [pc, #64]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ce:	d112      	bne.n	80027f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e011      	b.n	80027f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027e4:	e007      	b.n	80027f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027e6:	4b07      	ldr	r3, [pc, #28]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027ee:	4a05      	ldr	r2, [pc, #20]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027f4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	40007000 	.word	0x40007000
 8002808:	20000008 	.word	0x20000008
 800280c:	431bde83 	.word	0x431bde83

08002810 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4a04      	ldr	r2, [pc, #16]	; (800282c <HAL_PWREx_EnableVddIO2+0x1c>)
 800281a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800281e:	6053      	str	r3, [r2, #4]
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40007000 	.word	0x40007000

08002830 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e3db      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002842:	4ba4      	ldr	r3, [pc, #656]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800284c:	4ba1      	ldr	r3, [pc, #644]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0310 	and.w	r3, r3, #16
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 80e1 	beq.w	8002a26 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d007      	beq.n	800287a <HAL_RCC_OscConfig+0x4a>
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	2b0c      	cmp	r3, #12
 800286e:	f040 8088 	bne.w	8002982 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2b01      	cmp	r3, #1
 8002876:	f040 8084 	bne.w	8002982 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800287a:	4b96      	ldr	r3, [pc, #600]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_RCC_OscConfig+0x62>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e3b3      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1a      	ldr	r2, [r3, #32]
 8002896:	4b8f      	ldr	r3, [pc, #572]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d004      	beq.n	80028ac <HAL_RCC_OscConfig+0x7c>
 80028a2:	4b8c      	ldr	r3, [pc, #560]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028aa:	e005      	b.n	80028b8 <HAL_RCC_OscConfig+0x88>
 80028ac:	4b89      	ldr	r3, [pc, #548]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 80028ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d223      	bcs.n	8002904 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 fd91 	bl	80033e8 <RCC_SetFlashLatencyFromMSIRange>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e394      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028d0:	4b80      	ldr	r3, [pc, #512]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a7f      	ldr	r2, [pc, #508]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 80028d6:	f043 0308 	orr.w	r3, r3, #8
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	4b7d      	ldr	r3, [pc, #500]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	497a      	ldr	r1, [pc, #488]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028ee:	4b79      	ldr	r3, [pc, #484]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	021b      	lsls	r3, r3, #8
 80028fc:	4975      	ldr	r1, [pc, #468]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	604b      	str	r3, [r1, #4]
 8002902:	e022      	b.n	800294a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002904:	4b73      	ldr	r3, [pc, #460]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a72      	ldr	r2, [pc, #456]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 800290a:	f043 0308 	orr.w	r3, r3, #8
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	4b70      	ldr	r3, [pc, #448]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	496d      	ldr	r1, [pc, #436]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002922:	4b6c      	ldr	r3, [pc, #432]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	4968      	ldr	r1, [pc, #416]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 8002932:	4313      	orrs	r3, r2
 8002934:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fd54 	bl	80033e8 <RCC_SetFlashLatencyFromMSIRange>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e357      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800294a:	f000 fc8b 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 800294e:	4601      	mov	r1, r0
 8002950:	4b60      	ldr	r3, [pc, #384]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	4a5f      	ldr	r2, [pc, #380]	; (8002ad8 <HAL_RCC_OscConfig+0x2a8>)
 800295c:	5cd3      	ldrb	r3, [r2, r3]
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	fa21 f303 	lsr.w	r3, r1, r3
 8002966:	4a5d      	ldr	r2, [pc, #372]	; (8002adc <HAL_RCC_OscConfig+0x2ac>)
 8002968:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800296a:	4b5d      	ldr	r3, [pc, #372]	; (8002ae0 <HAL_RCC_OscConfig+0x2b0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff f982 	bl	8001c78 <HAL_InitTick>
 8002974:	4603      	mov	r3, r0
 8002976:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d052      	beq.n	8002a24 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	e33b      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d032      	beq.n	80029f0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800298a:	4b52      	ldr	r3, [pc, #328]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a51      	ldr	r2, [pc, #324]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002996:	f7ff f9bb 	bl	8001d10 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800299e:	f7ff f9b7 	bl	8001d10 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e324      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029b0:	4b48      	ldr	r3, [pc, #288]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0f0      	beq.n	800299e <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029bc:	4b45      	ldr	r3, [pc, #276]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a44      	ldr	r2, [pc, #272]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 80029c2:	f043 0308 	orr.w	r3, r3, #8
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	4b42      	ldr	r3, [pc, #264]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	493f      	ldr	r1, [pc, #252]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029da:	4b3e      	ldr	r3, [pc, #248]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	021b      	lsls	r3, r3, #8
 80029e8:	493a      	ldr	r1, [pc, #232]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	604b      	str	r3, [r1, #4]
 80029ee:	e01a      	b.n	8002a26 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029f0:	4b38      	ldr	r3, [pc, #224]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a37      	ldr	r2, [pc, #220]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 80029f6:	f023 0301 	bic.w	r3, r3, #1
 80029fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029fc:	f7ff f988 	bl	8001d10 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a04:	f7ff f984 	bl	8001d10 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e2f1      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a16:	4b2f      	ldr	r3, [pc, #188]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x1d4>
 8002a22:	e000      	b.n	8002a26 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d074      	beq.n	8002b1c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d005      	beq.n	8002a44 <HAL_RCC_OscConfig+0x214>
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	2b0c      	cmp	r3, #12
 8002a3c:	d10e      	bne.n	8002a5c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d10b      	bne.n	8002a5c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a44:	4b23      	ldr	r3, [pc, #140]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d064      	beq.n	8002b1a <HAL_RCC_OscConfig+0x2ea>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d160      	bne.n	8002b1a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e2ce      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a64:	d106      	bne.n	8002a74 <HAL_RCC_OscConfig+0x244>
 8002a66:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a1a      	ldr	r2, [pc, #104]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 8002a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	e01d      	b.n	8002ab0 <HAL_RCC_OscConfig+0x280>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCC_OscConfig+0x268>
 8002a7e:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a14      	ldr	r2, [pc, #80]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 8002a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a11      	ldr	r2, [pc, #68]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 8002a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	e00b      	b.n	8002ab0 <HAL_RCC_OscConfig+0x280>
 8002a98:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 8002a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <HAL_RCC_OscConfig+0x2a4>)
 8002aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01c      	beq.n	8002af2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7ff f92a 	bl	8001d10 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002abe:	e011      	b.n	8002ae4 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac0:	f7ff f926 	bl	8001d10 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b64      	cmp	r3, #100	; 0x64
 8002acc:	d90a      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e293      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
 8002ad2:	bf00      	nop
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	080819f0 	.word	0x080819f0
 8002adc:	20000008 	.word	0x20000008
 8002ae0:	2000000c 	.word	0x2000000c
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ae4:	4bae      	ldr	r3, [pc, #696]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0e7      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x290>
 8002af0:	e014      	b.n	8002b1c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af2:	f7ff f90d 	bl	8001d10 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002afa:	f7ff f909 	bl	8001d10 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b64      	cmp	r3, #100	; 0x64
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e276      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b0c:	4ba4      	ldr	r3, [pc, #656]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1f0      	bne.n	8002afa <HAL_RCC_OscConfig+0x2ca>
 8002b18:	e000      	b.n	8002b1c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d060      	beq.n	8002bea <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d005      	beq.n	8002b3a <HAL_RCC_OscConfig+0x30a>
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	2b0c      	cmp	r3, #12
 8002b32:	d119      	bne.n	8002b68 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d116      	bne.n	8002b68 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b3a:	4b99      	ldr	r3, [pc, #612]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d005      	beq.n	8002b52 <HAL_RCC_OscConfig+0x322>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e253      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b52:	4b93      	ldr	r3, [pc, #588]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	061b      	lsls	r3, r3, #24
 8002b60:	498f      	ldr	r1, [pc, #572]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b66:	e040      	b.n	8002bea <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d023      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b70:	4b8b      	ldr	r3, [pc, #556]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a8a      	ldr	r2, [pc, #552]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7ff f8c8 	bl	8001d10 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b84:	f7ff f8c4 	bl	8001d10 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e231      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b96:	4b82      	ldr	r3, [pc, #520]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba2:	4b7f      	ldr	r3, [pc, #508]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	061b      	lsls	r3, r3, #24
 8002bb0:	497b      	ldr	r1, [pc, #492]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	604b      	str	r3, [r1, #4]
 8002bb6:	e018      	b.n	8002bea <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bb8:	4b79      	ldr	r3, [pc, #484]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a78      	ldr	r2, [pc, #480]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002bbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc4:	f7ff f8a4 	bl	8001d10 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bcc:	f7ff f8a0 	bl	8001d10 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e20d      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bde:	4b70      	ldr	r3, [pc, #448]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d03c      	beq.n	8002c70 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d01c      	beq.n	8002c38 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bfe:	4b68      	ldr	r3, [pc, #416]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c04:	4a66      	ldr	r2, [pc, #408]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0e:	f7ff f87f 	bl	8001d10 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c16:	f7ff f87b 	bl	8001d10 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e1e8      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c28:	4b5d      	ldr	r3, [pc, #372]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0ef      	beq.n	8002c16 <HAL_RCC_OscConfig+0x3e6>
 8002c36:	e01b      	b.n	8002c70 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c38:	4b59      	ldr	r3, [pc, #356]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c3e:	4a58      	ldr	r2, [pc, #352]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002c40:	f023 0301 	bic.w	r3, r3, #1
 8002c44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7ff f862 	bl	8001d10 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c50:	f7ff f85e 	bl	8001d10 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e1cb      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c62:	4b4f      	ldr	r3, [pc, #316]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1ef      	bne.n	8002c50 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80a5 	beq.w	8002dc8 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c82:	4b47      	ldr	r3, [pc, #284]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10d      	bne.n	8002caa <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c8e:	4b44      	ldr	r3, [pc, #272]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c92:	4a43      	ldr	r2, [pc, #268]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c98:	6593      	str	r3, [r2, #88]	; 0x58
 8002c9a:	4b41      	ldr	r3, [pc, #260]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002caa:	4b3e      	ldr	r3, [pc, #248]	; (8002da4 <HAL_RCC_OscConfig+0x574>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d118      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cb6:	4b3b      	ldr	r3, [pc, #236]	; (8002da4 <HAL_RCC_OscConfig+0x574>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a3a      	ldr	r2, [pc, #232]	; (8002da4 <HAL_RCC_OscConfig+0x574>)
 8002cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cc2:	f7ff f825 	bl	8001d10 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cca:	f7ff f821 	bl	8001d10 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e18e      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cdc:	4b31      	ldr	r3, [pc, #196]	; (8002da4 <HAL_RCC_OscConfig+0x574>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0f0      	beq.n	8002cca <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d108      	bne.n	8002d02 <HAL_RCC_OscConfig+0x4d2>
 8002cf0:	4b2b      	ldr	r3, [pc, #172]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf6:	4a2a      	ldr	r2, [pc, #168]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d00:	e024      	b.n	8002d4c <HAL_RCC_OscConfig+0x51c>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b05      	cmp	r3, #5
 8002d08:	d110      	bne.n	8002d2c <HAL_RCC_OscConfig+0x4fc>
 8002d0a:	4b25      	ldr	r3, [pc, #148]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d10:	4a23      	ldr	r2, [pc, #140]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002d12:	f043 0304 	orr.w	r3, r3, #4
 8002d16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d1a:	4b21      	ldr	r3, [pc, #132]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d20:	4a1f      	ldr	r2, [pc, #124]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d2a:	e00f      	b.n	8002d4c <HAL_RCC_OscConfig+0x51c>
 8002d2c:	4b1c      	ldr	r3, [pc, #112]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d32:	4a1b      	ldr	r2, [pc, #108]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d3c:	4b18      	ldr	r3, [pc, #96]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d42:	4a17      	ldr	r2, [pc, #92]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002d44:	f023 0304 	bic.w	r3, r3, #4
 8002d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d016      	beq.n	8002d82 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d54:	f7fe ffdc 	bl	8001d10 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d5a:	e00a      	b.n	8002d72 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5c:	f7fe ffd8 	bl	8001d10 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e143      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d72:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HAL_RCC_OscConfig+0x570>)
 8002d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0ed      	beq.n	8002d5c <HAL_RCC_OscConfig+0x52c>
 8002d80:	e019      	b.n	8002db6 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d82:	f7fe ffc5 	bl	8001d10 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d88:	e00e      	b.n	8002da8 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8a:	f7fe ffc1 	bl	8001d10 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d905      	bls.n	8002da8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e12c      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002da8:	4b96      	ldr	r3, [pc, #600]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1e9      	bne.n	8002d8a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002db6:	7ffb      	ldrb	r3, [r7, #31]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d105      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dbc:	4b91      	ldr	r3, [pc, #580]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc0:	4a90      	ldr	r2, [pc, #576]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d03c      	beq.n	8002e4e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d01c      	beq.n	8002e16 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ddc:	4b89      	ldr	r3, [pc, #548]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002dde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002de2:	4a88      	ldr	r2, [pc, #544]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dec:	f7fe ff90 	bl	8001d10 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002df4:	f7fe ff8c 	bl	8001d10 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e0f9      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e06:	4b7f      	ldr	r3, [pc, #508]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002e08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0ef      	beq.n	8002df4 <HAL_RCC_OscConfig+0x5c4>
 8002e14:	e01b      	b.n	8002e4e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e16:	4b7b      	ldr	r3, [pc, #492]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002e18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e1c:	4a79      	ldr	r2, [pc, #484]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002e1e:	f023 0301 	bic.w	r3, r3, #1
 8002e22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e26:	f7fe ff73 	bl	8001d10 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e2e:	f7fe ff6f 	bl	8001d10 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e0dc      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e40:	4b70      	ldr	r3, [pc, #448]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002e42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1ef      	bne.n	8002e2e <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 80d0 	beq.w	8002ff8 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	2b0c      	cmp	r3, #12
 8002e5c:	f000 808d 	beq.w	8002f7a <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d15a      	bne.n	8002f1e <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e68:	4b66      	ldr	r3, [pc, #408]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a65      	ldr	r2, [pc, #404]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7fe ff4c 	bl	8001d10 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7c:	f7fe ff48 	bl	8001d10 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e0b5      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e8e:	4b5d      	ldr	r3, [pc, #372]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e9a:	4b5a      	ldr	r3, [pc, #360]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	4b5a      	ldr	r3, [pc, #360]	; (8003008 <HAL_RCC_OscConfig+0x7d8>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002eaa:	3a01      	subs	r2, #1
 8002eac:	0112      	lsls	r2, r2, #4
 8002eae:	4311      	orrs	r1, r2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002eb4:	0212      	lsls	r2, r2, #8
 8002eb6:	4311      	orrs	r1, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ebc:	0852      	lsrs	r2, r2, #1
 8002ebe:	3a01      	subs	r2, #1
 8002ec0:	0552      	lsls	r2, r2, #21
 8002ec2:	4311      	orrs	r1, r2
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ec8:	0852      	lsrs	r2, r2, #1
 8002eca:	3a01      	subs	r2, #1
 8002ecc:	0652      	lsls	r2, r2, #25
 8002ece:	4311      	orrs	r1, r2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ed4:	06d2      	lsls	r2, r2, #27
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	494a      	ldr	r1, [pc, #296]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ede:	4b49      	ldr	r3, [pc, #292]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a48      	ldr	r2, [pc, #288]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002ee4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ee8:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002eea:	4b46      	ldr	r3, [pc, #280]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	4a45      	ldr	r2, [pc, #276]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002ef0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef6:	f7fe ff0b 	bl	8001d10 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efe:	f7fe ff07 	bl	8001d10 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e074      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f10:	4b3c      	ldr	r3, [pc, #240]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x6ce>
 8002f1c:	e06c      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1e:	4b39      	ldr	r3, [pc, #228]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a38      	ldr	r2, [pc, #224]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002f24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f28:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002f2a:	4b36      	ldr	r3, [pc, #216]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d105      	bne.n	8002f42 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f36:	4b33      	ldr	r3, [pc, #204]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	4a32      	ldr	r2, [pc, #200]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002f3c:	f023 0303 	bic.w	r3, r3, #3
 8002f40:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f42:	4b30      	ldr	r3, [pc, #192]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	4a2f      	ldr	r2, [pc, #188]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002f48:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f50:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f52:	f7fe fedd 	bl	8001d10 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5a:	f7fe fed9 	bl	8001d10 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e046      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f6c:	4b25      	ldr	r3, [pc, #148]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f0      	bne.n	8002f5a <HAL_RCC_OscConfig+0x72a>
 8002f78:	e03e      	b.n	8002ff8 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e039      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002f86:	4b1f      	ldr	r3, [pc, #124]	; (8003004 <HAL_RCC_OscConfig+0x7d4>)
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f003 0203 	and.w	r2, r3, #3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d12c      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d123      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb6:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d11b      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc6:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d113      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd6:	085b      	lsrs	r3, r3, #1
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d109      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	085b      	lsrs	r3, r3, #1
 8002fec:	3b01      	subs	r3, #1
 8002fee:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3720      	adds	r7, #32
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40021000 	.word	0x40021000
 8003008:	019d800c 	.word	0x019d800c

0800300c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e10f      	b.n	8003244 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003024:	4b89      	ldr	r3, [pc, #548]	; (800324c <HAL_RCC_ClockConfig+0x240>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 030f 	and.w	r3, r3, #15
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d910      	bls.n	8003054 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	4b86      	ldr	r3, [pc, #536]	; (800324c <HAL_RCC_ClockConfig+0x240>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 020f 	bic.w	r2, r3, #15
 800303a:	4984      	ldr	r1, [pc, #528]	; (800324c <HAL_RCC_ClockConfig+0x240>)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003042:	4b82      	ldr	r3, [pc, #520]	; (800324c <HAL_RCC_ClockConfig+0x240>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d001      	beq.n	8003054 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0f7      	b.n	8003244 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 8089 	beq.w	8003174 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b03      	cmp	r3, #3
 8003068:	d133      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800306a:	4b79      	ldr	r3, [pc, #484]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e0e4      	b.n	8003244 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800307a:	f000 fa0f 	bl	800349c <RCC_GetSysClockFreqFromPLLSource>
 800307e:	4602      	mov	r2, r0
 8003080:	4b74      	ldr	r3, [pc, #464]	; (8003254 <HAL_RCC_ClockConfig+0x248>)
 8003082:	429a      	cmp	r2, r3
 8003084:	d955      	bls.n	8003132 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003086:	4b72      	ldr	r3, [pc, #456]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10a      	bne.n	80030a8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003092:	4b6f      	ldr	r3, [pc, #444]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800309a:	4a6d      	ldr	r2, [pc, #436]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 800309c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80030a2:	2380      	movs	r3, #128	; 0x80
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	e044      	b.n	8003132 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d03e      	beq.n	8003132 <HAL_RCC_ClockConfig+0x126>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d13a      	bne.n	8003132 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030bc:	4b64      	ldr	r3, [pc, #400]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030c4:	4a62      	ldr	r2, [pc, #392]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 80030c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ca:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80030cc:	2380      	movs	r3, #128	; 0x80
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	e02f      	b.n	8003132 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d107      	bne.n	80030ea <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030da:	4b5d      	ldr	r3, [pc, #372]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d115      	bne.n	8003112 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e0ac      	b.n	8003244 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030f2:	4b57      	ldr	r3, [pc, #348]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0a0      	b.n	8003244 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003102:	4b53      	ldr	r3, [pc, #332]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e098      	b.n	8003244 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003112:	f000 f8a7 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8003116:	4602      	mov	r2, r0
 8003118:	4b4e      	ldr	r3, [pc, #312]	; (8003254 <HAL_RCC_ClockConfig+0x248>)
 800311a:	429a      	cmp	r2, r3
 800311c:	d909      	bls.n	8003132 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800311e:	4b4c      	ldr	r3, [pc, #304]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003126:	4a4a      	ldr	r2, [pc, #296]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800312c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003132:	4b47      	ldr	r3, [pc, #284]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f023 0203 	bic.w	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4944      	ldr	r1, [pc, #272]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003140:	4313      	orrs	r3, r2
 8003142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003144:	f7fe fde4 	bl	8001d10 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	e00a      	b.n	8003162 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800314c:	f7fe fde0 	bl	8001d10 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	; 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e070      	b.n	8003244 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	4b3b      	ldr	r3, [pc, #236]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 020c 	and.w	r2, r3, #12
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	429a      	cmp	r2, r3
 8003172:	d1eb      	bne.n	800314c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d009      	beq.n	8003194 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003180:	4b33      	ldr	r3, [pc, #204]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	4930      	ldr	r1, [pc, #192]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 800318e:	4313      	orrs	r3, r2
 8003190:	608b      	str	r3, [r1, #8]
 8003192:	e008      	b.n	80031a6 <HAL_RCC_ClockConfig+0x19a>
  }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	2b80      	cmp	r3, #128	; 0x80
 8003198:	d105      	bne.n	80031a6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800319a:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	4a2c      	ldr	r2, [pc, #176]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 80031a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031a4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031a6:	4b29      	ldr	r3, [pc, #164]	; (800324c <HAL_RCC_ClockConfig+0x240>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d210      	bcs.n	80031d6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b4:	4b25      	ldr	r3, [pc, #148]	; (800324c <HAL_RCC_ClockConfig+0x240>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f023 020f 	bic.w	r2, r3, #15
 80031bc:	4923      	ldr	r1, [pc, #140]	; (800324c <HAL_RCC_ClockConfig+0x240>)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c4:	4b21      	ldr	r3, [pc, #132]	; (800324c <HAL_RCC_ClockConfig+0x240>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d001      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e036      	b.n	8003244 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d008      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e2:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	4918      	ldr	r1, [pc, #96]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d009      	beq.n	8003214 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003200:	4b13      	ldr	r3, [pc, #76]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4910      	ldr	r1, [pc, #64]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003210:	4313      	orrs	r3, r2
 8003212:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003214:	f000 f826 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8003218:	4601      	mov	r1, r0
 800321a:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	091b      	lsrs	r3, r3, #4
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	4a0c      	ldr	r2, [pc, #48]	; (8003258 <HAL_RCC_ClockConfig+0x24c>)
 8003226:	5cd3      	ldrb	r3, [r2, r3]
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	fa21 f303 	lsr.w	r3, r1, r3
 8003230:	4a0a      	ldr	r2, [pc, #40]	; (800325c <HAL_RCC_ClockConfig+0x250>)
 8003232:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003234:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <HAL_RCC_ClockConfig+0x254>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7fe fd1d 	bl	8001c78 <HAL_InitTick>
 800323e:	4603      	mov	r3, r0
 8003240:	73fb      	strb	r3, [r7, #15]

  return status;
 8003242:	7bfb      	ldrb	r3, [r7, #15]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40022000 	.word	0x40022000
 8003250:	40021000 	.word	0x40021000
 8003254:	04c4b400 	.word	0x04c4b400
 8003258:	080819f0 	.word	0x080819f0
 800325c:	20000008 	.word	0x20000008
 8003260:	2000000c 	.word	0x2000000c

08003264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003264:	b480      	push	{r7}
 8003266:	b089      	sub	sp, #36	; 0x24
 8003268:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	2300      	movs	r3, #0
 8003270:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003272:	4b3d      	ldr	r3, [pc, #244]	; (8003368 <HAL_RCC_GetSysClockFreq+0x104>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800327c:	4b3a      	ldr	r3, [pc, #232]	; (8003368 <HAL_RCC_GetSysClockFreq+0x104>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x34>
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	2b0c      	cmp	r3, #12
 8003290:	d121      	bne.n	80032d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d11e      	bne.n	80032d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003298:	4b33      	ldr	r3, [pc, #204]	; (8003368 <HAL_RCC_GetSysClockFreq+0x104>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d107      	bne.n	80032b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032a4:	4b30      	ldr	r3, [pc, #192]	; (8003368 <HAL_RCC_GetSysClockFreq+0x104>)
 80032a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032aa:	0a1b      	lsrs	r3, r3, #8
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	e005      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032b4:	4b2c      	ldr	r3, [pc, #176]	; (8003368 <HAL_RCC_GetSysClockFreq+0x104>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032c0:	4a2a      	ldr	r2, [pc, #168]	; (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10d      	bne.n	80032ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032d4:	e00a      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d102      	bne.n	80032e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032dc:	4b24      	ldr	r3, [pc, #144]	; (8003370 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	e004      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032e8:	4b22      	ldr	r3, [pc, #136]	; (8003374 <HAL_RCC_GetSysClockFreq+0x110>)
 80032ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	d133      	bne.n	800335a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032f2:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <HAL_RCC_GetSysClockFreq+0x104>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d002      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0xa4>
 8003302:	2b03      	cmp	r3, #3
 8003304:	d003      	beq.n	800330e <HAL_RCC_GetSysClockFreq+0xaa>
 8003306:	e005      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003308:	4b19      	ldr	r3, [pc, #100]	; (8003370 <HAL_RCC_GetSysClockFreq+0x10c>)
 800330a:	617b      	str	r3, [r7, #20]
      break;
 800330c:	e005      	b.n	800331a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800330e:	4b19      	ldr	r3, [pc, #100]	; (8003374 <HAL_RCC_GetSysClockFreq+0x110>)
 8003310:	617b      	str	r3, [r7, #20]
      break;
 8003312:	e002      	b.n	800331a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	617b      	str	r3, [r7, #20]
      break;
 8003318:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800331a:	4b13      	ldr	r3, [pc, #76]	; (8003368 <HAL_RCC_GetSysClockFreq+0x104>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	3301      	adds	r3, #1
 8003326:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003328:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <HAL_RCC_GetSysClockFreq+0x104>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	0a1b      	lsrs	r3, r3, #8
 800332e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	fb02 f203 	mul.w	r2, r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	fbb2 f3f3 	udiv	r3, r2, r3
 800333e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003340:	4b09      	ldr	r3, [pc, #36]	; (8003368 <HAL_RCC_GetSysClockFreq+0x104>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	0e5b      	lsrs	r3, r3, #25
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	3301      	adds	r3, #1
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	fbb2 f3f3 	udiv	r3, r2, r3
 8003358:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800335a:	69bb      	ldr	r3, [r7, #24]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3724      	adds	r7, #36	; 0x24
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	40021000 	.word	0x40021000
 800336c:	08081a08 	.word	0x08081a08
 8003370:	00f42400 	.word	0x00f42400
 8003374:	007a1200 	.word	0x007a1200

08003378 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800337c:	4b03      	ldr	r3, [pc, #12]	; (800338c <HAL_RCC_GetHCLKFreq+0x14>)
 800337e:	681b      	ldr	r3, [r3, #0]
}
 8003380:	4618      	mov	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	20000008 	.word	0x20000008

08003390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003394:	f7ff fff0 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 8003398:	4601      	mov	r1, r0
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033a6:	5cd3      	ldrb	r3, [r2, r3]
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40021000 	.word	0x40021000
 80033b8:	08081a00 	.word	0x08081a00

080033bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033c0:	f7ff ffda 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 80033c4:	4601      	mov	r1, r0
 80033c6:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	0adb      	lsrs	r3, r3, #11
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033d2:	5cd3      	ldrb	r3, [r2, r3]
 80033d4:	f003 031f 	and.w	r3, r3, #31
 80033d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021000 	.word	0x40021000
 80033e4:	08081a00 	.word	0x08081a00

080033e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033f0:	2300      	movs	r3, #0
 80033f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033f4:	4b27      	ldr	r3, [pc, #156]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003400:	f7ff f942 	bl	8002688 <HAL_PWREx_GetVoltageRange>
 8003404:	6178      	str	r0, [r7, #20]
 8003406:	e014      	b.n	8003432 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003408:	4b22      	ldr	r3, [pc, #136]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800340a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340c:	4a21      	ldr	r2, [pc, #132]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800340e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003412:	6593      	str	r3, [r2, #88]	; 0x58
 8003414:	4b1f      	ldr	r3, [pc, #124]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003420:	f7ff f932 	bl	8002688 <HAL_PWREx_GetVoltageRange>
 8003424:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003426:	4b1b      	ldr	r3, [pc, #108]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342a:	4a1a      	ldr	r2, [pc, #104]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800342c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003430:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003438:	d10b      	bne.n	8003452 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b80      	cmp	r3, #128	; 0x80
 800343e:	d913      	bls.n	8003468 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2ba0      	cmp	r3, #160	; 0xa0
 8003444:	d902      	bls.n	800344c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003446:	2302      	movs	r3, #2
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	e00d      	b.n	8003468 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800344c:	2301      	movs	r3, #1
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	e00a      	b.n	8003468 <RCC_SetFlashLatencyFromMSIRange+0x80>
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b7f      	cmp	r3, #127	; 0x7f
 8003456:	d902      	bls.n	800345e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003458:	2302      	movs	r3, #2
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	e004      	b.n	8003468 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b70      	cmp	r3, #112	; 0x70
 8003462:	d101      	bne.n	8003468 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003464:	2301      	movs	r3, #1
 8003466:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f023 020f 	bic.w	r2, r3, #15
 8003470:	4909      	ldr	r1, [pc, #36]	; (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003478:	4b07      	ldr	r3, [pc, #28]	; (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	429a      	cmp	r2, r3
 8003484:	d001      	beq.n	800348a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40021000 	.word	0x40021000
 8003498:	40022000 	.word	0x40022000

0800349c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80034a6:	4b2d      	ldr	r3, [pc, #180]	; (800355c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d118      	bne.n	80034e4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034b2:	4b2a      	ldr	r3, [pc, #168]	; (800355c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d107      	bne.n	80034ce <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034be:	4b27      	ldr	r3, [pc, #156]	; (800355c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034c4:	0a1b      	lsrs	r3, r3, #8
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	e005      	b.n	80034da <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034ce:	4b23      	ldr	r3, [pc, #140]	; (800355c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034da:	4a21      	ldr	r2, [pc, #132]	; (8003560 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034e4:	4b1d      	ldr	r3, [pc, #116]	; (800355c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d002      	beq.n	80034fa <RCC_GetSysClockFreqFromPLLSource+0x5e>
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d003      	beq.n	8003500 <RCC_GetSysClockFreqFromPLLSource+0x64>
 80034f8:	e005      	b.n	8003506 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80034fa:	4b1a      	ldr	r3, [pc, #104]	; (8003564 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80034fc:	613b      	str	r3, [r7, #16]
    break;
 80034fe:	e005      	b.n	800350c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003500:	4b19      	ldr	r3, [pc, #100]	; (8003568 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003502:	613b      	str	r3, [r7, #16]
    break;
 8003504:	e002      	b.n	800350c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	613b      	str	r3, [r7, #16]
    break;
 800350a:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800350c:	4b13      	ldr	r3, [pc, #76]	; (800355c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	3301      	adds	r3, #1
 8003518:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800351a:	4b10      	ldr	r3, [pc, #64]	; (800355c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	0a1b      	lsrs	r3, r3, #8
 8003520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	fb02 f203 	mul.w	r2, r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003530:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003532:	4b0a      	ldr	r3, [pc, #40]	; (800355c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	0e5b      	lsrs	r3, r3, #25
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	3301      	adds	r3, #1
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	fbb2 f3f3 	udiv	r3, r2, r3
 800354a:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800354c:	683b      	ldr	r3, [r7, #0]
}
 800354e:	4618      	mov	r0, r3
 8003550:	371c      	adds	r7, #28
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000
 8003560:	08081a08 	.word	0x08081a08
 8003564:	00f42400 	.word	0x00f42400
 8003568:	007a1200 	.word	0x007a1200

0800356c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003574:	2300      	movs	r3, #0
 8003576:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003578:	2300      	movs	r3, #0
 800357a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003584:	2b00      	cmp	r3, #0
 8003586:	d03d      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800358c:	2b40      	cmp	r3, #64	; 0x40
 800358e:	d00b      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003590:	2b40      	cmp	r3, #64	; 0x40
 8003592:	d804      	bhi.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00e      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003598:	2b20      	cmp	r3, #32
 800359a:	d015      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800359c:	e01d      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800359e:	2b60      	cmp	r3, #96	; 0x60
 80035a0:	d01e      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80035a2:	2b80      	cmp	r3, #128	; 0x80
 80035a4:	d01c      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80035a6:	e018      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035a8:	4b86      	ldr	r3, [pc, #536]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4a85      	ldr	r2, [pc, #532]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035b4:	e015      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3304      	adds	r3, #4
 80035ba:	2100      	movs	r1, #0
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fafd 	bl	8003bbc <RCCEx_PLLSAI1_Config>
 80035c2:	4603      	mov	r3, r0
 80035c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035c6:	e00c      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3320      	adds	r3, #32
 80035cc:	2100      	movs	r1, #0
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fbe4 	bl	8003d9c <RCCEx_PLLSAI2_Config>
 80035d4:	4603      	mov	r3, r0
 80035d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035d8:	e003      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	74fb      	strb	r3, [r7, #19]
      break;
 80035de:	e000      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 80035e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035e2:	7cfb      	ldrb	r3, [r7, #19]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10b      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035e8:	4b76      	ldr	r3, [pc, #472]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035ee:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035f6:	4973      	ldr	r1, [pc, #460]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80035fe:	e001      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003600:	7cfb      	ldrb	r3, [r7, #19]
 8003602:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d042      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003618:	d00f      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xce>
 800361a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800361e:	d805      	bhi.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003620:	2b00      	cmp	r3, #0
 8003622:	d011      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003628:	d017      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xee>
 800362a:	e01f      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x100>
 800362c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003630:	d01f      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003636:	d01c      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003638:	e018      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800363a:	4b62      	ldr	r3, [pc, #392]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	4a61      	ldr	r2, [pc, #388]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003644:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003646:	e015      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3304      	adds	r3, #4
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fab4 	bl	8003bbc <RCCEx_PLLSAI1_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003658:	e00c      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3320      	adds	r3, #32
 800365e:	2100      	movs	r1, #0
 8003660:	4618      	mov	r0, r3
 8003662:	f000 fb9b 	bl	8003d9c <RCCEx_PLLSAI2_Config>
 8003666:	4603      	mov	r3, r0
 8003668:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800366a:	e003      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	74fb      	strb	r3, [r7, #19]
      break;
 8003670:	e000      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003672:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003674:	7cfb      	ldrb	r3, [r7, #19]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10b      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800367a:	4b52      	ldr	r3, [pc, #328]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800367c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003680:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	494e      	ldr	r1, [pc, #312]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003690:	e001      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003692:	7cfb      	ldrb	r3, [r7, #19]
 8003694:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 809f 	beq.w	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036a4:	2300      	movs	r3, #0
 80036a6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036a8:	4b46      	ldr	r3, [pc, #280]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80036b4:	2301      	movs	r3, #1
 80036b6:	e000      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80036b8:	2300      	movs	r3, #0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00d      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036be:	4b41      	ldr	r3, [pc, #260]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c2:	4a40      	ldr	r2, [pc, #256]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c8:	6593      	str	r3, [r2, #88]	; 0x58
 80036ca:	4b3e      	ldr	r3, [pc, #248]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d2:	60bb      	str	r3, [r7, #8]
 80036d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036d6:	2301      	movs	r3, #1
 80036d8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036da:	4b3b      	ldr	r3, [pc, #236]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a3a      	ldr	r2, [pc, #232]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80036e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036e6:	f7fe fb13 	bl	8001d10 <HAL_GetTick>
 80036ea:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036ec:	e009      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ee:	f7fe fb0f 	bl	8001d10 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d902      	bls.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	74fb      	strb	r3, [r7, #19]
        break;
 8003700:	e005      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003702:	4b31      	ldr	r3, [pc, #196]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0ef      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800370e:	7cfb      	ldrb	r3, [r7, #19]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d15b      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003714:	4b2b      	ldr	r3, [pc, #172]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d01f      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	429a      	cmp	r2, r3
 8003730:	d019      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003732:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800373e:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003744:	4a1f      	ldr	r2, [pc, #124]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800374a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800374e:	4b1d      	ldr	r3, [pc, #116]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003754:	4a1b      	ldr	r2, [pc, #108]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800375a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800375e:	4a19      	ldr	r2, [pc, #100]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d016      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003770:	f7fe face 	bl	8001d10 <HAL_GetTick>
 8003774:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003776:	e00b      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003778:	f7fe faca 	bl	8001d10 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f241 3288 	movw	r2, #5000	; 0x1388
 8003786:	4293      	cmp	r3, r2
 8003788:	d902      	bls.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	74fb      	strb	r3, [r7, #19]
            break;
 800378e:	e006      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003790:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0ec      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800379e:	7cfb      	ldrb	r3, [r7, #19]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10c      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037a4:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b4:	4903      	ldr	r1, [pc, #12]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037bc:	e008      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037be:	7cfb      	ldrb	r3, [r7, #19]
 80037c0:	74bb      	strb	r3, [r7, #18]
 80037c2:	e005      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80037c4:	40021000 	.word	0x40021000
 80037c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037cc:	7cfb      	ldrb	r3, [r7, #19]
 80037ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037d0:	7c7b      	ldrb	r3, [r7, #17]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d105      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d6:	4ba0      	ldr	r3, [pc, #640]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	4a9f      	ldr	r2, [pc, #636]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ee:	4b9a      	ldr	r3, [pc, #616]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f4:	f023 0203 	bic.w	r2, r3, #3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fc:	4996      	ldr	r1, [pc, #600]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003810:	4b91      	ldr	r3, [pc, #580]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003816:	f023 020c 	bic.w	r2, r3, #12
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	498e      	ldr	r1, [pc, #568]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003832:	4b89      	ldr	r3, [pc, #548]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003838:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003840:	4985      	ldr	r1, [pc, #532]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003854:	4b80      	ldr	r3, [pc, #512]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003862:	497d      	ldr	r1, [pc, #500]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0310 	and.w	r3, r3, #16
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003876:	4b78      	ldr	r3, [pc, #480]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003884:	4974      	ldr	r1, [pc, #464]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003898:	4b6f      	ldr	r3, [pc, #444]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a6:	496c      	ldr	r1, [pc, #432]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038ba:	4b67      	ldr	r3, [pc, #412]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038c8:	4963      	ldr	r1, [pc, #396]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038dc:	4b5e      	ldr	r3, [pc, #376]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038ea:	495b      	ldr	r1, [pc, #364]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038fe:	4b56      	ldr	r3, [pc, #344]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003904:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390c:	4952      	ldr	r1, [pc, #328]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003920:	4b4d      	ldr	r3, [pc, #308]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003926:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392e:	494a      	ldr	r1, [pc, #296]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003942:	4b45      	ldr	r3, [pc, #276]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003948:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003950:	4941      	ldr	r1, [pc, #260]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003964:	4b3c      	ldr	r3, [pc, #240]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003966:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800396a:	f023 0203 	bic.w	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003972:	4939      	ldr	r1, [pc, #228]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d028      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003986:	4b34      	ldr	r3, [pc, #208]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003994:	4930      	ldr	r1, [pc, #192]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039a4:	d106      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039a6:	4b2c      	ldr	r3, [pc, #176]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	4a2b      	ldr	r2, [pc, #172]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039b0:	60d3      	str	r3, [r2, #12]
 80039b2:	e011      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039bc:	d10c      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3304      	adds	r3, #4
 80039c2:	2101      	movs	r1, #1
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 f8f9 	bl	8003bbc <RCCEx_PLLSAI1_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039ce:	7cfb      	ldrb	r3, [r7, #19]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80039d4:	7cfb      	ldrb	r3, [r7, #19]
 80039d6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d04d      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ec:	d108      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80039ee:	4b1a      	ldr	r3, [pc, #104]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039f4:	4a18      	ldr	r2, [pc, #96]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80039fe:	e012      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003a00:	4b15      	ldr	r3, [pc, #84]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a06:	4a14      	ldr	r2, [pc, #80]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a0c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003a10:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a1e:	490e      	ldr	r1, [pc, #56]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a2e:	d106      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a30:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4a08      	ldr	r2, [pc, #32]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a3a:	60d3      	str	r3, [r2, #12]
 8003a3c:	e020      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a46:	d109      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a48:	4b03      	ldr	r3, [pc, #12]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	4a02      	ldr	r2, [pc, #8]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a52:	60d3      	str	r3, [r2, #12]
 8003a54:	e014      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a56:	bf00      	nop
 8003a58:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a64:	d10c      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 f8a5 	bl	8003bbc <RCCEx_PLLSAI1_Config>
 8003a72:	4603      	mov	r3, r0
 8003a74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a76:	7cfb      	ldrb	r3, [r7, #19]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a7c:	7cfb      	ldrb	r3, [r7, #19]
 8003a7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d028      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a8c:	4b4a      	ldr	r3, [pc, #296]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a9a:	4947      	ldr	r1, [pc, #284]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aaa:	d106      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aac:	4b42      	ldr	r3, [pc, #264]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	4a41      	ldr	r2, [pc, #260]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ab6:	60d3      	str	r3, [r2, #12]
 8003ab8:	e011      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003abe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ac2:	d10c      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	2101      	movs	r1, #1
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 f876 	bl	8003bbc <RCCEx_PLLSAI1_Config>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ad4:	7cfb      	ldrb	r3, [r7, #19]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003ada:	7cfb      	ldrb	r3, [r7, #19]
 8003adc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d01e      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003aea:	4b33      	ldr	r3, [pc, #204]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003afa:	492f      	ldr	r1, [pc, #188]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b0c:	d10c      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3304      	adds	r3, #4
 8003b12:	2102      	movs	r1, #2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 f851 	bl	8003bbc <RCCEx_PLLSAI1_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b1e:	7cfb      	ldrb	r3, [r7, #19]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003b24:	7cfb      	ldrb	r3, [r7, #19]
 8003b26:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00b      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b34:	4b20      	ldr	r3, [pc, #128]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b3a:	f023 0204 	bic.w	r2, r3, #4
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b44:	491c      	ldr	r1, [pc, #112]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00b      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b58:	4b17      	ldr	r3, [pc, #92]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b5e:	f023 0218 	bic.w	r2, r3, #24
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b68:	4913      	ldr	r1, [pc, #76]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d017      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003b7c:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b8c:	490a      	ldr	r1, [pc, #40]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b9e:	d105      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ba0:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4a04      	ldr	r2, [pc, #16]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003baa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bac:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40021000 	.word	0x40021000

08003bbc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bca:	4b70      	ldr	r3, [pc, #448]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00e      	beq.n	8003bf4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bd6:	4b6d      	ldr	r3, [pc, #436]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f003 0203 	and.w	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d103      	bne.n	8003bee <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
       ||
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d13f      	bne.n	8003c6e <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	73fb      	strb	r3, [r7, #15]
 8003bf2:	e03c      	b.n	8003c6e <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d00c      	beq.n	8003c16 <RCCEx_PLLSAI1_Config+0x5a>
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d013      	beq.n	8003c28 <RCCEx_PLLSAI1_Config+0x6c>
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d120      	bne.n	8003c46 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c04:	4b61      	ldr	r3, [pc, #388]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d11d      	bne.n	8003c4c <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c14:	e01a      	b.n	8003c4c <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c16:	4b5d      	ldr	r3, [pc, #372]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d116      	bne.n	8003c50 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c26:	e013      	b.n	8003c50 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c28:	4b58      	ldr	r3, [pc, #352]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10f      	bne.n	8003c54 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c34:	4b55      	ldr	r3, [pc, #340]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d109      	bne.n	8003c54 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c44:	e006      	b.n	8003c54 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	73fb      	strb	r3, [r7, #15]
      break;
 8003c4a:	e004      	b.n	8003c56 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003c4c:	bf00      	nop
 8003c4e:	e002      	b.n	8003c56 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003c50:	bf00      	nop
 8003c52:	e000      	b.n	8003c56 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003c54:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d108      	bne.n	8003c6e <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003c5c:	4b4b      	ldr	r3, [pc, #300]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f023 0203 	bic.w	r2, r3, #3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4948      	ldr	r1, [pc, #288]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f040 8086 	bne.w	8003d82 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c76:	4b45      	ldr	r3, [pc, #276]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a44      	ldr	r2, [pc, #272]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c82:	f7fe f845 	bl	8001d10 <HAL_GetTick>
 8003c86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c88:	e009      	b.n	8003c9e <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c8a:	f7fe f841 	bl	8001d10 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d902      	bls.n	8003c9e <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	73fb      	strb	r3, [r7, #15]
        break;
 8003c9c:	e005      	b.n	8003caa <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c9e:	4b3b      	ldr	r3, [pc, #236]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1ef      	bne.n	8003c8a <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d168      	bne.n	8003d82 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d113      	bne.n	8003cde <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cb6:	4b35      	ldr	r3, [pc, #212]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cb8:	691a      	ldr	r2, [r3, #16]
 8003cba:	4b35      	ldr	r3, [pc, #212]	; (8003d90 <RCCEx_PLLSAI1_Config+0x1d4>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6892      	ldr	r2, [r2, #8]
 8003cc2:	0211      	lsls	r1, r2, #8
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	68d2      	ldr	r2, [r2, #12]
 8003cc8:	06d2      	lsls	r2, r2, #27
 8003cca:	4311      	orrs	r1, r2
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6852      	ldr	r2, [r2, #4]
 8003cd0:	3a01      	subs	r2, #1
 8003cd2:	0112      	lsls	r2, r2, #4
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	492d      	ldr	r1, [pc, #180]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	610b      	str	r3, [r1, #16]
 8003cdc:	e02d      	b.n	8003d3a <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d115      	bne.n	8003d10 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ce4:	4b29      	ldr	r3, [pc, #164]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	4b2a      	ldr	r3, [pc, #168]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6892      	ldr	r2, [r2, #8]
 8003cf0:	0211      	lsls	r1, r2, #8
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6912      	ldr	r2, [r2, #16]
 8003cf6:	0852      	lsrs	r2, r2, #1
 8003cf8:	3a01      	subs	r2, #1
 8003cfa:	0552      	lsls	r2, r2, #21
 8003cfc:	4311      	orrs	r1, r2
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6852      	ldr	r2, [r2, #4]
 8003d02:	3a01      	subs	r2, #1
 8003d04:	0112      	lsls	r2, r2, #4
 8003d06:	430a      	orrs	r2, r1
 8003d08:	4920      	ldr	r1, [pc, #128]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	610b      	str	r3, [r1, #16]
 8003d0e:	e014      	b.n	8003d3a <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d10:	4b1e      	ldr	r3, [pc, #120]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	4b20      	ldr	r3, [pc, #128]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6892      	ldr	r2, [r2, #8]
 8003d1c:	0211      	lsls	r1, r2, #8
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6952      	ldr	r2, [r2, #20]
 8003d22:	0852      	lsrs	r2, r2, #1
 8003d24:	3a01      	subs	r2, #1
 8003d26:	0652      	lsls	r2, r2, #25
 8003d28:	4311      	orrs	r1, r2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6852      	ldr	r2, [r2, #4]
 8003d2e:	3a01      	subs	r2, #1
 8003d30:	0112      	lsls	r2, r2, #4
 8003d32:	430a      	orrs	r2, r1
 8003d34:	4915      	ldr	r1, [pc, #84]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d3a:	4b14      	ldr	r3, [pc, #80]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a13      	ldr	r2, [pc, #76]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d44:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d46:	f7fd ffe3 	bl	8001d10 <HAL_GetTick>
 8003d4a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d4c:	e009      	b.n	8003d62 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d4e:	f7fd ffdf 	bl	8001d10 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d902      	bls.n	8003d62 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	73fb      	strb	r3, [r7, #15]
          break;
 8003d60:	e005      	b.n	8003d6e <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d62:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0ef      	beq.n	8003d4e <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d106      	bne.n	8003d82 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	4903      	ldr	r1, [pc, #12]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	07ff800f 	.word	0x07ff800f
 8003d94:	ff9f800f 	.word	0xff9f800f
 8003d98:	f9ff800f 	.word	0xf9ff800f

08003d9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003daa:	4b70      	ldr	r3, [pc, #448]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00e      	beq.n	8003dd4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003db6:	4b6d      	ldr	r3, [pc, #436]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f003 0203 	and.w	r2, r3, #3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d103      	bne.n	8003dce <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
       ||
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d13f      	bne.n	8003e4e <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	73fb      	strb	r3, [r7, #15]
 8003dd2:	e03c      	b.n	8003e4e <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d00c      	beq.n	8003df6 <RCCEx_PLLSAI2_Config+0x5a>
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	d013      	beq.n	8003e08 <RCCEx_PLLSAI2_Config+0x6c>
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d120      	bne.n	8003e26 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003de4:	4b61      	ldr	r3, [pc, #388]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d11d      	bne.n	8003e2c <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003df4:	e01a      	b.n	8003e2c <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003df6:	4b5d      	ldr	r3, [pc, #372]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d116      	bne.n	8003e30 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e06:	e013      	b.n	8003e30 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e08:	4b58      	ldr	r3, [pc, #352]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10f      	bne.n	8003e34 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e14:	4b55      	ldr	r3, [pc, #340]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d109      	bne.n	8003e34 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e24:	e006      	b.n	8003e34 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	73fb      	strb	r3, [r7, #15]
      break;
 8003e2a:	e004      	b.n	8003e36 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003e2c:	bf00      	nop
 8003e2e:	e002      	b.n	8003e36 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003e30:	bf00      	nop
 8003e32:	e000      	b.n	8003e36 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003e34:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d108      	bne.n	8003e4e <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003e3c:	4b4b      	ldr	r3, [pc, #300]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f023 0203 	bic.w	r2, r3, #3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4948      	ldr	r1, [pc, #288]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f040 8086 	bne.w	8003f62 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e56:	4b45      	ldr	r3, [pc, #276]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a44      	ldr	r2, [pc, #272]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e62:	f7fd ff55 	bl	8001d10 <HAL_GetTick>
 8003e66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e68:	e009      	b.n	8003e7e <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e6a:	f7fd ff51 	bl	8001d10 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d902      	bls.n	8003e7e <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	73fb      	strb	r3, [r7, #15]
        break;
 8003e7c:	e005      	b.n	8003e8a <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e7e:	4b3b      	ldr	r3, [pc, #236]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1ef      	bne.n	8003e6a <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d168      	bne.n	8003f62 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d113      	bne.n	8003ebe <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e96:	4b35      	ldr	r3, [pc, #212]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e98:	695a      	ldr	r2, [r3, #20]
 8003e9a:	4b35      	ldr	r3, [pc, #212]	; (8003f70 <RCCEx_PLLSAI2_Config+0x1d4>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6892      	ldr	r2, [r2, #8]
 8003ea2:	0211      	lsls	r1, r2, #8
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	68d2      	ldr	r2, [r2, #12]
 8003ea8:	06d2      	lsls	r2, r2, #27
 8003eaa:	4311      	orrs	r1, r2
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6852      	ldr	r2, [r2, #4]
 8003eb0:	3a01      	subs	r2, #1
 8003eb2:	0112      	lsls	r2, r2, #4
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	492d      	ldr	r1, [pc, #180]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	614b      	str	r3, [r1, #20]
 8003ebc:	e02d      	b.n	8003f1a <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d115      	bne.n	8003ef0 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ec4:	4b29      	ldr	r3, [pc, #164]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ec6:	695a      	ldr	r2, [r3, #20]
 8003ec8:	4b2a      	ldr	r3, [pc, #168]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6892      	ldr	r2, [r2, #8]
 8003ed0:	0211      	lsls	r1, r2, #8
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6912      	ldr	r2, [r2, #16]
 8003ed6:	0852      	lsrs	r2, r2, #1
 8003ed8:	3a01      	subs	r2, #1
 8003eda:	0552      	lsls	r2, r2, #21
 8003edc:	4311      	orrs	r1, r2
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6852      	ldr	r2, [r2, #4]
 8003ee2:	3a01      	subs	r2, #1
 8003ee4:	0112      	lsls	r2, r2, #4
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	4920      	ldr	r1, [pc, #128]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	614b      	str	r3, [r1, #20]
 8003eee:	e014      	b.n	8003f1a <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ef0:	4b1e      	ldr	r3, [pc, #120]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ef2:	695a      	ldr	r2, [r3, #20]
 8003ef4:	4b20      	ldr	r3, [pc, #128]	; (8003f78 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6892      	ldr	r2, [r2, #8]
 8003efc:	0211      	lsls	r1, r2, #8
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6952      	ldr	r2, [r2, #20]
 8003f02:	0852      	lsrs	r2, r2, #1
 8003f04:	3a01      	subs	r2, #1
 8003f06:	0652      	lsls	r2, r2, #25
 8003f08:	4311      	orrs	r1, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6852      	ldr	r2, [r2, #4]
 8003f0e:	3a01      	subs	r2, #1
 8003f10:	0112      	lsls	r2, r2, #4
 8003f12:	430a      	orrs	r2, r1
 8003f14:	4915      	ldr	r1, [pc, #84]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f1a:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a13      	ldr	r2, [pc, #76]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f26:	f7fd fef3 	bl	8001d10 <HAL_GetTick>
 8003f2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f2c:	e009      	b.n	8003f42 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f2e:	f7fd feef 	bl	8001d10 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d902      	bls.n	8003f42 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	73fb      	strb	r3, [r7, #15]
          break;
 8003f40:	e005      	b.n	8003f4e <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f42:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0ef      	beq.n	8003f2e <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d106      	bne.n	8003f62 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f54:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f56:	695a      	ldr	r2, [r3, #20]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	4903      	ldr	r1, [pc, #12]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	07ff800f 	.word	0x07ff800f
 8003f74:	ff9f800f 	.word	0xff9f800f
 8003f78:	f9ff800f 	.word	0xf9ff800f

08003f7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e07c      	b.n	8004088 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d106      	bne.n	8003fae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7fd fbdd 	bl	8001768 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fce:	d902      	bls.n	8003fd6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	e002      	b.n	8003fdc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fda:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003fe4:	d007      	beq.n	8003ff6 <HAL_SPI_Init+0x7a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fee:	d002      	beq.n	8003ff6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10b      	bne.n	8004016 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004006:	d903      	bls.n	8004010 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	631a      	str	r2, [r3, #48]	; 0x30
 800400e:	e002      	b.n	8004016 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	ea42 0103 	orr.w	r1, r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	0c1b      	lsrs	r3, r3, #16
 8004056:	f003 0204 	and.w	r2, r3, #4
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	ea42 0103 	orr.w	r1, r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	430a      	orrs	r2, r1
 8004076:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	4613      	mov	r3, r2
 800409e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <HAL_SPI_Transmit+0x22>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e150      	b.n	8004354 <HAL_SPI_Transmit+0x2c4>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040ba:	f7fd fe29 	bl	8001d10 <HAL_GetTick>
 80040be:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80040c0:	88fb      	ldrh	r3, [r7, #6]
 80040c2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d002      	beq.n	80040d6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80040d0:	2302      	movs	r3, #2
 80040d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040d4:	e135      	b.n	8004342 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <HAL_SPI_Transmit+0x52>
 80040dc:	88fb      	ldrh	r3, [r7, #6]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d102      	bne.n	80040e8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040e6:	e12c      	b.n	8004342 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2203      	movs	r2, #3
 80040ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	88fa      	ldrh	r2, [r7, #6]
 8004100:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	88fa      	ldrh	r2, [r7, #6]
 8004106:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004132:	d107      	bne.n	8004144 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004142:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414e:	2b40      	cmp	r3, #64	; 0x40
 8004150:	d007      	beq.n	8004162 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004160:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800416a:	d94b      	bls.n	8004204 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <HAL_SPI_Transmit+0xea>
 8004174:	8afb      	ldrh	r3, [r7, #22]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d13e      	bne.n	80041f8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	881a      	ldrh	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418a:	1c9a      	adds	r2, r3, #2
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004194:	b29b      	uxth	r3, r3
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800419e:	e02b      	b.n	80041f8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d112      	bne.n	80041d4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	881a      	ldrh	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041be:	1c9a      	adds	r2, r3, #2
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041d2:	e011      	b.n	80041f8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041d4:	f7fd fd9c 	bl	8001d10 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d803      	bhi.n	80041ec <HAL_SPI_Transmit+0x15c>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ea:	d102      	bne.n	80041f2 <HAL_SPI_Transmit+0x162>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041f6:	e0a4      	b.n	8004342 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1ce      	bne.n	80041a0 <HAL_SPI_Transmit+0x110>
 8004202:	e07c      	b.n	80042fe <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <HAL_SPI_Transmit+0x182>
 800420c:	8afb      	ldrh	r3, [r7, #22]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d170      	bne.n	80042f4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b01      	cmp	r3, #1
 800421a:	d912      	bls.n	8004242 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004220:	881a      	ldrh	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422c:	1c9a      	adds	r2, r3, #2
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b02      	subs	r3, #2
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004240:	e058      	b.n	80042f4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	330c      	adds	r3, #12
 800424c:	7812      	ldrb	r2, [r2, #0]
 800424e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004268:	e044      	b.n	80042f4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b02      	cmp	r3, #2
 8004276:	d12b      	bne.n	80042d0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b01      	cmp	r3, #1
 8004280:	d912      	bls.n	80042a8 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004286:	881a      	ldrh	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004292:	1c9a      	adds	r2, r3, #2
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800429c:	b29b      	uxth	r3, r3
 800429e:	3b02      	subs	r3, #2
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042a6:	e025      	b.n	80042f4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	330c      	adds	r3, #12
 80042b2:	7812      	ldrb	r2, [r2, #0]
 80042b4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042ce:	e011      	b.n	80042f4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042d0:	f7fd fd1e 	bl	8001d10 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d803      	bhi.n	80042e8 <HAL_SPI_Transmit+0x258>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e6:	d102      	bne.n	80042ee <HAL_SPI_Transmit+0x25e>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d102      	bne.n	80042f4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80042f2:	e026      	b.n	8004342 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1b5      	bne.n	800426a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	6839      	ldr	r1, [r7, #0]
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 fb14 	bl	8004930 <SPI_EndRxTxTransaction>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d002      	beq.n	8004314 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2220      	movs	r2, #32
 8004312:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10a      	bne.n	8004332 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800431c:	2300      	movs	r3, #0
 800431e:	613b      	str	r3, [r7, #16]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	613b      	str	r3, [r7, #16]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	613b      	str	r3, [r7, #16]
 8004330:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	77fb      	strb	r3, [r7, #31]
 800433e:	e000      	b.n	8004342 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8004340:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004352:	7ffb      	ldrb	r3, [r7, #31]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3720      	adds	r7, #32
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	; 0x28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800436a:	2301      	movs	r3, #1
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_SPI_TransmitReceive+0x26>
 800437e:	2302      	movs	r3, #2
 8004380:	e1fb      	b.n	800477a <HAL_SPI_TransmitReceive+0x41e>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800438a:	f7fd fcc1 	bl	8001d10 <HAL_GetTick>
 800438e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004396:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800439e:	887b      	ldrh	r3, [r7, #2]
 80043a0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80043a2:	887b      	ldrh	r3, [r7, #2]
 80043a4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043a6:	7efb      	ldrb	r3, [r7, #27]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d00e      	beq.n	80043ca <HAL_SPI_TransmitReceive+0x6e>
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043b2:	d106      	bne.n	80043c2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d102      	bne.n	80043c2 <HAL_SPI_TransmitReceive+0x66>
 80043bc:	7efb      	ldrb	r3, [r7, #27]
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d003      	beq.n	80043ca <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80043c2:	2302      	movs	r3, #2
 80043c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80043c8:	e1cd      	b.n	8004766 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <HAL_SPI_TransmitReceive+0x80>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <HAL_SPI_TransmitReceive+0x80>
 80043d6:	887b      	ldrh	r3, [r7, #2]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d103      	bne.n	80043e4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80043e2:	e1c0      	b.n	8004766 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d003      	beq.n	80043f8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2205      	movs	r2, #5
 80043f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	887a      	ldrh	r2, [r7, #2]
 8004408:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	887a      	ldrh	r2, [r7, #2]
 8004410:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	887a      	ldrh	r2, [r7, #2]
 800441e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	887a      	ldrh	r2, [r7, #2]
 8004424:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800443a:	d802      	bhi.n	8004442 <HAL_SPI_TransmitReceive+0xe6>
 800443c:	8a3b      	ldrh	r3, [r7, #16]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d908      	bls.n	8004454 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004450:	605a      	str	r2, [r3, #4]
 8004452:	e007      	b.n	8004464 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004462:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446e:	2b40      	cmp	r3, #64	; 0x40
 8004470:	d007      	beq.n	8004482 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004480:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800448a:	d97c      	bls.n	8004586 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <HAL_SPI_TransmitReceive+0x13e>
 8004494:	8a7b      	ldrh	r3, [r7, #18]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d169      	bne.n	800456e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449e:	881a      	ldrh	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	1c9a      	adds	r2, r3, #2
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044be:	e056      	b.n	800456e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d11b      	bne.n	8004506 <HAL_SPI_TransmitReceive+0x1aa>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d016      	beq.n	8004506 <HAL_SPI_TransmitReceive+0x1aa>
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d113      	bne.n	8004506 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	881a      	ldrh	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	1c9a      	adds	r2, r3, #2
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b01      	cmp	r3, #1
 8004512:	d11c      	bne.n	800454e <HAL_SPI_TransmitReceive+0x1f2>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d016      	beq.n	800454e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	b292      	uxth	r2, r2
 800452c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	1c9a      	adds	r2, r3, #2
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800454a:	2301      	movs	r3, #1
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800454e:	f7fd fbdf 	bl	8001d10 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800455a:	429a      	cmp	r2, r3
 800455c:	d807      	bhi.n	800456e <HAL_SPI_TransmitReceive+0x212>
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d003      	beq.n	800456e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800456c:	e0fb      	b.n	8004766 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1a3      	bne.n	80044c0 <HAL_SPI_TransmitReceive+0x164>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d19d      	bne.n	80044c0 <HAL_SPI_TransmitReceive+0x164>
 8004584:	e0df      	b.n	8004746 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_SPI_TransmitReceive+0x23a>
 800458e:	8a7b      	ldrh	r3, [r7, #18]
 8004590:	2b01      	cmp	r3, #1
 8004592:	f040 80cb 	bne.w	800472c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	d912      	bls.n	80045c6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a4:	881a      	ldrh	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b0:	1c9a      	adds	r2, r3, #2
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b02      	subs	r3, #2
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045c4:	e0b2      	b.n	800472c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	330c      	adds	r3, #12
 80045d0:	7812      	ldrb	r2, [r2, #0]
 80045d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045ec:	e09e      	b.n	800472c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d134      	bne.n	8004666 <HAL_SPI_TransmitReceive+0x30a>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004600:	b29b      	uxth	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d02f      	beq.n	8004666 <HAL_SPI_TransmitReceive+0x30a>
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	2b01      	cmp	r3, #1
 800460a:	d12c      	bne.n	8004666 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b01      	cmp	r3, #1
 8004614:	d912      	bls.n	800463c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461a:	881a      	ldrh	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	1c9a      	adds	r2, r3, #2
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b02      	subs	r3, #2
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	87da      	strh	r2, [r3, #62]	; 0x3e
 800463a:	e012      	b.n	8004662 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	330c      	adds	r3, #12
 8004646:	7812      	ldrb	r2, [r2, #0]
 8004648:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b01      	cmp	r3, #1
 8004672:	d148      	bne.n	8004706 <HAL_SPI_TransmitReceive+0x3aa>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d042      	beq.n	8004706 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004686:	b29b      	uxth	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	d923      	bls.n	80046d4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	b292      	uxth	r2, r2
 8004698:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	1c9a      	adds	r2, r3, #2
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	3b02      	subs	r3, #2
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d81f      	bhi.n	8004702 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046d0:	605a      	str	r2, [r3, #4]
 80046d2:	e016      	b.n	8004702 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f103 020c 	add.w	r2, r3, #12
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	7812      	ldrb	r2, [r2, #0]
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004702:	2301      	movs	r3, #1
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004706:	f7fd fb03 	bl	8001d10 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004712:	429a      	cmp	r2, r3
 8004714:	d803      	bhi.n	800471e <HAL_SPI_TransmitReceive+0x3c2>
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471c:	d102      	bne.n	8004724 <HAL_SPI_TransmitReceive+0x3c8>
 800471e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004720:	2b00      	cmp	r3, #0
 8004722:	d103      	bne.n	800472c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800472a:	e01c      	b.n	8004766 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004730:	b29b      	uxth	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	f47f af5b 	bne.w	80045ee <HAL_SPI_TransmitReceive+0x292>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800473e:	b29b      	uxth	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	f47f af54 	bne.w	80045ee <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004746:	69fa      	ldr	r2, [r7, #28]
 8004748:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 f8f0 	bl	8004930 <SPI_EndRxTxTransaction>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d006      	beq.n	8004764 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2220      	movs	r2, #32
 8004760:	661a      	str	r2, [r3, #96]	; 0x60
 8004762:	e000      	b.n	8004766 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004764:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004776:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800477a:	4618      	mov	r0, r3
 800477c:	3728      	adds	r7, #40	; 0x28
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	60f8      	str	r0, [r7, #12]
 800478a:	60b9      	str	r1, [r7, #8]
 800478c:	603b      	str	r3, [r7, #0]
 800478e:	4613      	mov	r3, r2
 8004790:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004792:	e04c      	b.n	800482e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479a:	d048      	beq.n	800482e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800479c:	f7fd fab8 	bl	8001d10 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d902      	bls.n	80047b2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d13d      	bne.n	800482e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047ca:	d111      	bne.n	80047f0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d4:	d004      	beq.n	80047e0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047de:	d107      	bne.n	80047f0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f8:	d10f      	bne.n	800481a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004818:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e00f      	b.n	800484e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	4013      	ands	r3, r2
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	429a      	cmp	r2, r3
 800483c:	bf0c      	ite	eq
 800483e:	2301      	moveq	r3, #1
 8004840:	2300      	movne	r3, #0
 8004842:	b2db      	uxtb	r3, r3
 8004844:	461a      	mov	r2, r3
 8004846:	79fb      	ldrb	r3, [r7, #7]
 8004848:	429a      	cmp	r2, r3
 800484a:	d1a3      	bne.n	8004794 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b084      	sub	sp, #16
 800485a:	af00      	add	r7, sp, #0
 800485c:	60f8      	str	r0, [r7, #12]
 800485e:	60b9      	str	r1, [r7, #8]
 8004860:	607a      	str	r2, [r7, #4]
 8004862:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004864:	e057      	b.n	8004916 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800486c:	d106      	bne.n	800487c <SPI_WaitFifoStateUntilTimeout+0x26>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d103      	bne.n	800487c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	330c      	adds	r3, #12
 800487a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004882:	d048      	beq.n	8004916 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004884:	f7fd fa44 	bl	8001d10 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d902      	bls.n	800489a <SPI_WaitFifoStateUntilTimeout+0x44>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d13d      	bne.n	8004916 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048b2:	d111      	bne.n	80048d8 <SPI_WaitFifoStateUntilTimeout+0x82>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048bc:	d004      	beq.n	80048c8 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c6:	d107      	bne.n	80048d8 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e0:	d10f      	bne.n	8004902 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004900:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e008      	b.n	8004928 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	4013      	ands	r3, r2
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	429a      	cmp	r2, r3
 8004924:	d19f      	bne.n	8004866 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af02      	add	r7, sp, #8
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2200      	movs	r2, #0
 8004944:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f7ff ff84 	bl	8004856 <SPI_WaitFifoStateUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d007      	beq.n	8004964 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004958:	f043 0220 	orr.w	r2, r3, #32
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e027      	b.n	80049b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2200      	movs	r2, #0
 800496c:	2180      	movs	r1, #128	; 0x80
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f7ff ff07 	bl	8004782 <SPI_WaitFlagStateUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d007      	beq.n	800498a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800497e:	f043 0220 	orr.w	r2, r3, #32
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e014      	b.n	80049b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2200      	movs	r2, #0
 8004992:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f7ff ff5d 	bl	8004856 <SPI_WaitFifoStateUntilTimeout>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d007      	beq.n	80049b2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a6:	f043 0220 	orr.w	r2, r3, #32
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e000      	b.n	80049b4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e042      	b.n	8004a54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d106      	bne.n	80049e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7fd f869 	bl	8001ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2224      	movs	r2, #36	; 0x24
 80049ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0201 	bic.w	r2, r2, #1
 80049fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f8fe 	bl	8004c00 <UART_SetConfig>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e022      	b.n	8004a54 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f001 fab2 	bl	8005f80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f001 fb39 	bl	80060c4 <UART_CheckIdleState>
 8004a52:	4603      	mov	r3, r0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08a      	sub	sp, #40	; 0x28
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	603b      	str	r3, [r7, #0]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a72:	2b20      	cmp	r3, #32
 8004a74:	f040 80be 	bne.w	8004bf4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <HAL_UART_Receive+0x28>
 8004a7e:	88fb      	ldrh	r3, [r7, #6]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e0b6      	b.n	8004bf6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d101      	bne.n	8004a96 <HAL_UART_Receive+0x3a>
 8004a92:	2302      	movs	r3, #2
 8004a94:	e0af      	b.n	8004bf6 <HAL_UART_Receive+0x19a>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2222      	movs	r2, #34	; 0x22
 8004aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004aae:	f7fd f92f 	bl	8001d10 <HAL_GetTick>
 8004ab2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	88fa      	ldrh	r2, [r7, #6]
 8004ab8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	88fa      	ldrh	r2, [r7, #6]
 8004ac0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004acc:	d10e      	bne.n	8004aec <HAL_UART_Receive+0x90>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d105      	bne.n	8004ae2 <HAL_UART_Receive+0x86>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004adc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004ae0:	e02d      	b.n	8004b3e <HAL_UART_Receive+0xe2>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	22ff      	movs	r2, #255	; 0xff
 8004ae6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004aea:	e028      	b.n	8004b3e <HAL_UART_Receive+0xe2>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10d      	bne.n	8004b10 <HAL_UART_Receive+0xb4>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d104      	bne.n	8004b06 <HAL_UART_Receive+0xaa>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	22ff      	movs	r2, #255	; 0xff
 8004b00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b04:	e01b      	b.n	8004b3e <HAL_UART_Receive+0xe2>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	227f      	movs	r2, #127	; 0x7f
 8004b0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b0e:	e016      	b.n	8004b3e <HAL_UART_Receive+0xe2>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b18:	d10d      	bne.n	8004b36 <HAL_UART_Receive+0xda>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d104      	bne.n	8004b2c <HAL_UART_Receive+0xd0>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	227f      	movs	r2, #127	; 0x7f
 8004b26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b2a:	e008      	b.n	8004b3e <HAL_UART_Receive+0xe2>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	223f      	movs	r2, #63	; 0x3f
 8004b30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b34:	e003      	b.n	8004b3e <HAL_UART_Receive+0xe2>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004b44:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b4e:	d108      	bne.n	8004b62 <HAL_UART_Receive+0x106>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d104      	bne.n	8004b62 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	61bb      	str	r3, [r7, #24]
 8004b60:	e003      	b.n	8004b6a <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b66:	2300      	movs	r3, #0
 8004b68:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004b6a:	e033      	b.n	8004bd4 <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	2200      	movs	r2, #0
 8004b74:	2120      	movs	r1, #32
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f001 faec 	bl	8006154 <UART_WaitOnFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_UART_Receive+0x12a>
      {
        return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e037      	b.n	8004bf6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10c      	bne.n	8004ba6 <HAL_UART_Receive+0x14a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	8a7b      	ldrh	r3, [r7, #18]
 8004b96:	4013      	ands	r3, r2
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	3302      	adds	r3, #2
 8004ba2:	61bb      	str	r3, [r7, #24]
 8004ba4:	e00d      	b.n	8004bc2 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	8a7b      	ldrh	r3, [r7, #18]
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1c5      	bne.n	8004b6c <HAL_UART_Receive+0x110>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_UNLOCK(huart);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	e000      	b.n	8004bf6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004bf4:	2302      	movs	r3, #2
  }
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3720      	adds	r7, #32
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
	...

08004c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c00:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004c04:	b088      	sub	sp, #32
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c32:	69fa      	ldr	r2, [r7, #28]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	4bac      	ldr	r3, [pc, #688]	; (8004ef0 <UART_SetConfig+0x2f0>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6812      	ldr	r2, [r2, #0]
 8004c46:	69f9      	ldr	r1, [r7, #28]
 8004c48:	430b      	orrs	r3, r1
 8004c4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4aa1      	ldr	r2, [pc, #644]	; (8004ef4 <UART_SetConfig+0x2f4>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d004      	beq.n	8004c7c <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	69fa      	ldr	r2, [r7, #28]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004c86:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6812      	ldr	r2, [r2, #0]
 8004c8e:	69f9      	ldr	r1, [r7, #28]
 8004c90:	430b      	orrs	r3, r1
 8004c92:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	f023 010f 	bic.w	r1, r3, #15
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a92      	ldr	r2, [pc, #584]	; (8004ef8 <UART_SetConfig+0x2f8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d121      	bne.n	8004cf8 <UART_SetConfig+0xf8>
 8004cb4:	4b91      	ldr	r3, [pc, #580]	; (8004efc <UART_SetConfig+0x2fc>)
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d816      	bhi.n	8004cf0 <UART_SetConfig+0xf0>
 8004cc2:	a201      	add	r2, pc, #4	; (adr r2, 8004cc8 <UART_SetConfig+0xc8>)
 8004cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc8:	08004cd9 	.word	0x08004cd9
 8004ccc:	08004ce5 	.word	0x08004ce5
 8004cd0:	08004cdf 	.word	0x08004cdf
 8004cd4:	08004ceb 	.word	0x08004ceb
 8004cd8:	2301      	movs	r3, #1
 8004cda:	76fb      	strb	r3, [r7, #27]
 8004cdc:	e0e8      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	76fb      	strb	r3, [r7, #27]
 8004ce2:	e0e5      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004ce4:	2304      	movs	r3, #4
 8004ce6:	76fb      	strb	r3, [r7, #27]
 8004ce8:	e0e2      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004cea:	2308      	movs	r3, #8
 8004cec:	76fb      	strb	r3, [r7, #27]
 8004cee:	e0df      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004cf0:	2310      	movs	r3, #16
 8004cf2:	76fb      	strb	r3, [r7, #27]
 8004cf4:	bf00      	nop
 8004cf6:	e0db      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a80      	ldr	r2, [pc, #512]	; (8004f00 <UART_SetConfig+0x300>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d134      	bne.n	8004d6c <UART_SetConfig+0x16c>
 8004d02:	4b7e      	ldr	r3, [pc, #504]	; (8004efc <UART_SetConfig+0x2fc>)
 8004d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d08:	f003 030c 	and.w	r3, r3, #12
 8004d0c:	2b0c      	cmp	r3, #12
 8004d0e:	d829      	bhi.n	8004d64 <UART_SetConfig+0x164>
 8004d10:	a201      	add	r2, pc, #4	; (adr r2, 8004d18 <UART_SetConfig+0x118>)
 8004d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d16:	bf00      	nop
 8004d18:	08004d4d 	.word	0x08004d4d
 8004d1c:	08004d65 	.word	0x08004d65
 8004d20:	08004d65 	.word	0x08004d65
 8004d24:	08004d65 	.word	0x08004d65
 8004d28:	08004d59 	.word	0x08004d59
 8004d2c:	08004d65 	.word	0x08004d65
 8004d30:	08004d65 	.word	0x08004d65
 8004d34:	08004d65 	.word	0x08004d65
 8004d38:	08004d53 	.word	0x08004d53
 8004d3c:	08004d65 	.word	0x08004d65
 8004d40:	08004d65 	.word	0x08004d65
 8004d44:	08004d65 	.word	0x08004d65
 8004d48:	08004d5f 	.word	0x08004d5f
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	76fb      	strb	r3, [r7, #27]
 8004d50:	e0ae      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004d52:	2302      	movs	r3, #2
 8004d54:	76fb      	strb	r3, [r7, #27]
 8004d56:	e0ab      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004d58:	2304      	movs	r3, #4
 8004d5a:	76fb      	strb	r3, [r7, #27]
 8004d5c:	e0a8      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004d5e:	2308      	movs	r3, #8
 8004d60:	76fb      	strb	r3, [r7, #27]
 8004d62:	e0a5      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004d64:	2310      	movs	r3, #16
 8004d66:	76fb      	strb	r3, [r7, #27]
 8004d68:	bf00      	nop
 8004d6a:	e0a1      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a64      	ldr	r2, [pc, #400]	; (8004f04 <UART_SetConfig+0x304>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d120      	bne.n	8004db8 <UART_SetConfig+0x1b8>
 8004d76:	4b61      	ldr	r3, [pc, #388]	; (8004efc <UART_SetConfig+0x2fc>)
 8004d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d80:	2b10      	cmp	r3, #16
 8004d82:	d00f      	beq.n	8004da4 <UART_SetConfig+0x1a4>
 8004d84:	2b10      	cmp	r3, #16
 8004d86:	d802      	bhi.n	8004d8e <UART_SetConfig+0x18e>
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d005      	beq.n	8004d98 <UART_SetConfig+0x198>
 8004d8c:	e010      	b.n	8004db0 <UART_SetConfig+0x1b0>
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	d005      	beq.n	8004d9e <UART_SetConfig+0x19e>
 8004d92:	2b30      	cmp	r3, #48	; 0x30
 8004d94:	d009      	beq.n	8004daa <UART_SetConfig+0x1aa>
 8004d96:	e00b      	b.n	8004db0 <UART_SetConfig+0x1b0>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	76fb      	strb	r3, [r7, #27]
 8004d9c:	e088      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	76fb      	strb	r3, [r7, #27]
 8004da2:	e085      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004da4:	2304      	movs	r3, #4
 8004da6:	76fb      	strb	r3, [r7, #27]
 8004da8:	e082      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004daa:	2308      	movs	r3, #8
 8004dac:	76fb      	strb	r3, [r7, #27]
 8004dae:	e07f      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004db0:	2310      	movs	r3, #16
 8004db2:	76fb      	strb	r3, [r7, #27]
 8004db4:	bf00      	nop
 8004db6:	e07b      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a52      	ldr	r2, [pc, #328]	; (8004f08 <UART_SetConfig+0x308>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d120      	bne.n	8004e04 <UART_SetConfig+0x204>
 8004dc2:	4b4e      	ldr	r3, [pc, #312]	; (8004efc <UART_SetConfig+0x2fc>)
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dcc:	2b40      	cmp	r3, #64	; 0x40
 8004dce:	d00f      	beq.n	8004df0 <UART_SetConfig+0x1f0>
 8004dd0:	2b40      	cmp	r3, #64	; 0x40
 8004dd2:	d802      	bhi.n	8004dda <UART_SetConfig+0x1da>
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <UART_SetConfig+0x1e4>
 8004dd8:	e010      	b.n	8004dfc <UART_SetConfig+0x1fc>
 8004dda:	2b80      	cmp	r3, #128	; 0x80
 8004ddc:	d005      	beq.n	8004dea <UART_SetConfig+0x1ea>
 8004dde:	2bc0      	cmp	r3, #192	; 0xc0
 8004de0:	d009      	beq.n	8004df6 <UART_SetConfig+0x1f6>
 8004de2:	e00b      	b.n	8004dfc <UART_SetConfig+0x1fc>
 8004de4:	2300      	movs	r3, #0
 8004de6:	76fb      	strb	r3, [r7, #27]
 8004de8:	e062      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004dea:	2302      	movs	r3, #2
 8004dec:	76fb      	strb	r3, [r7, #27]
 8004dee:	e05f      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004df0:	2304      	movs	r3, #4
 8004df2:	76fb      	strb	r3, [r7, #27]
 8004df4:	e05c      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004df6:	2308      	movs	r3, #8
 8004df8:	76fb      	strb	r3, [r7, #27]
 8004dfa:	e059      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004dfc:	2310      	movs	r3, #16
 8004dfe:	76fb      	strb	r3, [r7, #27]
 8004e00:	bf00      	nop
 8004e02:	e055      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a40      	ldr	r2, [pc, #256]	; (8004f0c <UART_SetConfig+0x30c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d124      	bne.n	8004e58 <UART_SetConfig+0x258>
 8004e0e:	4b3b      	ldr	r3, [pc, #236]	; (8004efc <UART_SetConfig+0x2fc>)
 8004e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e1c:	d012      	beq.n	8004e44 <UART_SetConfig+0x244>
 8004e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e22:	d802      	bhi.n	8004e2a <UART_SetConfig+0x22a>
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d007      	beq.n	8004e38 <UART_SetConfig+0x238>
 8004e28:	e012      	b.n	8004e50 <UART_SetConfig+0x250>
 8004e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e2e:	d006      	beq.n	8004e3e <UART_SetConfig+0x23e>
 8004e30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e34:	d009      	beq.n	8004e4a <UART_SetConfig+0x24a>
 8004e36:	e00b      	b.n	8004e50 <UART_SetConfig+0x250>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	76fb      	strb	r3, [r7, #27]
 8004e3c:	e038      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	76fb      	strb	r3, [r7, #27]
 8004e42:	e035      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004e44:	2304      	movs	r3, #4
 8004e46:	76fb      	strb	r3, [r7, #27]
 8004e48:	e032      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004e4a:	2308      	movs	r3, #8
 8004e4c:	76fb      	strb	r3, [r7, #27]
 8004e4e:	e02f      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004e50:	2310      	movs	r3, #16
 8004e52:	76fb      	strb	r3, [r7, #27]
 8004e54:	bf00      	nop
 8004e56:	e02b      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a25      	ldr	r2, [pc, #148]	; (8004ef4 <UART_SetConfig+0x2f4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d124      	bne.n	8004eac <UART_SetConfig+0x2ac>
 8004e62:	4b26      	ldr	r3, [pc, #152]	; (8004efc <UART_SetConfig+0x2fc>)
 8004e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e70:	d012      	beq.n	8004e98 <UART_SetConfig+0x298>
 8004e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e76:	d802      	bhi.n	8004e7e <UART_SetConfig+0x27e>
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d007      	beq.n	8004e8c <UART_SetConfig+0x28c>
 8004e7c:	e012      	b.n	8004ea4 <UART_SetConfig+0x2a4>
 8004e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e82:	d006      	beq.n	8004e92 <UART_SetConfig+0x292>
 8004e84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e88:	d009      	beq.n	8004e9e <UART_SetConfig+0x29e>
 8004e8a:	e00b      	b.n	8004ea4 <UART_SetConfig+0x2a4>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	76fb      	strb	r3, [r7, #27]
 8004e90:	e00e      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004e92:	2302      	movs	r3, #2
 8004e94:	76fb      	strb	r3, [r7, #27]
 8004e96:	e00b      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004e98:	2304      	movs	r3, #4
 8004e9a:	76fb      	strb	r3, [r7, #27]
 8004e9c:	e008      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004e9e:	2308      	movs	r3, #8
 8004ea0:	76fb      	strb	r3, [r7, #27]
 8004ea2:	e005      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004ea4:	2310      	movs	r3, #16
 8004ea6:	76fb      	strb	r3, [r7, #27]
 8004ea8:	bf00      	nop
 8004eaa:	e001      	b.n	8004eb0 <UART_SetConfig+0x2b0>
 8004eac:	2310      	movs	r3, #16
 8004eae:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a0f      	ldr	r2, [pc, #60]	; (8004ef4 <UART_SetConfig+0x2f4>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	f040 842d 	bne.w	8005716 <UART_SetConfig+0xb16>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ebc:	7efb      	ldrb	r3, [r7, #27]
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	f200 816b 	bhi.w	800519a <UART_SetConfig+0x59a>
 8004ec4:	a201      	add	r2, pc, #4	; (adr r2, 8004ecc <UART_SetConfig+0x2cc>)
 8004ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eca:	bf00      	nop
 8004ecc:	08004f11 	.word	0x08004f11
 8004ed0:	0800519b 	.word	0x0800519b
 8004ed4:	08004fb3 	.word	0x08004fb3
 8004ed8:	0800519b 	.word	0x0800519b
 8004edc:	0800504b 	.word	0x0800504b
 8004ee0:	0800519b 	.word	0x0800519b
 8004ee4:	0800519b 	.word	0x0800519b
 8004ee8:	0800519b 	.word	0x0800519b
 8004eec:	080050ed 	.word	0x080050ed
 8004ef0:	cfff69f3 	.word	0xcfff69f3
 8004ef4:	40008000 	.word	0x40008000
 8004ef8:	40013800 	.word	0x40013800
 8004efc:	40021000 	.word	0x40021000
 8004f00:	40004400 	.word	0x40004400
 8004f04:	40004800 	.word	0x40004800
 8004f08:	40004c00 	.word	0x40004c00
 8004f0c:	40005000 	.word	0x40005000
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004f10:	f7fe fa3e 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 8004f14:	4602      	mov	r2, r0
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d044      	beq.n	8004fa8 <UART_SetConfig+0x3a8>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d03e      	beq.n	8004fa4 <UART_SetConfig+0x3a4>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d038      	beq.n	8004fa0 <UART_SetConfig+0x3a0>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d032      	beq.n	8004f9c <UART_SetConfig+0x39c>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d02c      	beq.n	8004f98 <UART_SetConfig+0x398>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	2b05      	cmp	r3, #5
 8004f44:	d026      	beq.n	8004f94 <UART_SetConfig+0x394>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	2b06      	cmp	r3, #6
 8004f4c:	d020      	beq.n	8004f90 <UART_SetConfig+0x390>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	2b07      	cmp	r3, #7
 8004f54:	d01a      	beq.n	8004f8c <UART_SetConfig+0x38c>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d014      	beq.n	8004f88 <UART_SetConfig+0x388>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	2b09      	cmp	r3, #9
 8004f64:	d00e      	beq.n	8004f84 <UART_SetConfig+0x384>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	2b0a      	cmp	r3, #10
 8004f6c:	d008      	beq.n	8004f80 <UART_SetConfig+0x380>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	2b0b      	cmp	r3, #11
 8004f74:	d102      	bne.n	8004f7c <UART_SetConfig+0x37c>
 8004f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f7a:	e016      	b.n	8004faa <UART_SetConfig+0x3aa>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e014      	b.n	8004faa <UART_SetConfig+0x3aa>
 8004f80:	2380      	movs	r3, #128	; 0x80
 8004f82:	e012      	b.n	8004faa <UART_SetConfig+0x3aa>
 8004f84:	2340      	movs	r3, #64	; 0x40
 8004f86:	e010      	b.n	8004faa <UART_SetConfig+0x3aa>
 8004f88:	2320      	movs	r3, #32
 8004f8a:	e00e      	b.n	8004faa <UART_SetConfig+0x3aa>
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	e00c      	b.n	8004faa <UART_SetConfig+0x3aa>
 8004f90:	230c      	movs	r3, #12
 8004f92:	e00a      	b.n	8004faa <UART_SetConfig+0x3aa>
 8004f94:	230a      	movs	r3, #10
 8004f96:	e008      	b.n	8004faa <UART_SetConfig+0x3aa>
 8004f98:	2308      	movs	r3, #8
 8004f9a:	e006      	b.n	8004faa <UART_SetConfig+0x3aa>
 8004f9c:	2306      	movs	r3, #6
 8004f9e:	e004      	b.n	8004faa <UART_SetConfig+0x3aa>
 8004fa0:	2304      	movs	r3, #4
 8004fa2:	e002      	b.n	8004faa <UART_SetConfig+0x3aa>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e000      	b.n	8004faa <UART_SetConfig+0x3aa>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fae:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8004fb0:	e0f6      	b.n	80051a0 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d044      	beq.n	8005044 <UART_SetConfig+0x444>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d03e      	beq.n	8005040 <UART_SetConfig+0x440>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d038      	beq.n	800503c <UART_SetConfig+0x43c>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d032      	beq.n	8005038 <UART_SetConfig+0x438>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d02c      	beq.n	8005034 <UART_SetConfig+0x434>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	2b05      	cmp	r3, #5
 8004fe0:	d026      	beq.n	8005030 <UART_SetConfig+0x430>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	2b06      	cmp	r3, #6
 8004fe8:	d020      	beq.n	800502c <UART_SetConfig+0x42c>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	2b07      	cmp	r3, #7
 8004ff0:	d01a      	beq.n	8005028 <UART_SetConfig+0x428>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	2b08      	cmp	r3, #8
 8004ff8:	d014      	beq.n	8005024 <UART_SetConfig+0x424>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	2b09      	cmp	r3, #9
 8005000:	d00e      	beq.n	8005020 <UART_SetConfig+0x420>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	2b0a      	cmp	r3, #10
 8005008:	d008      	beq.n	800501c <UART_SetConfig+0x41c>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	2b0b      	cmp	r3, #11
 8005010:	d102      	bne.n	8005018 <UART_SetConfig+0x418>
 8005012:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005016:	e016      	b.n	8005046 <UART_SetConfig+0x446>
 8005018:	4ba1      	ldr	r3, [pc, #644]	; (80052a0 <UART_SetConfig+0x6a0>)
 800501a:	e014      	b.n	8005046 <UART_SetConfig+0x446>
 800501c:	4ba1      	ldr	r3, [pc, #644]	; (80052a4 <UART_SetConfig+0x6a4>)
 800501e:	e012      	b.n	8005046 <UART_SetConfig+0x446>
 8005020:	4ba1      	ldr	r3, [pc, #644]	; (80052a8 <UART_SetConfig+0x6a8>)
 8005022:	e010      	b.n	8005046 <UART_SetConfig+0x446>
 8005024:	4ba1      	ldr	r3, [pc, #644]	; (80052ac <UART_SetConfig+0x6ac>)
 8005026:	e00e      	b.n	8005046 <UART_SetConfig+0x446>
 8005028:	4ba1      	ldr	r3, [pc, #644]	; (80052b0 <UART_SetConfig+0x6b0>)
 800502a:	e00c      	b.n	8005046 <UART_SetConfig+0x446>
 800502c:	4ba1      	ldr	r3, [pc, #644]	; (80052b4 <UART_SetConfig+0x6b4>)
 800502e:	e00a      	b.n	8005046 <UART_SetConfig+0x446>
 8005030:	4ba1      	ldr	r3, [pc, #644]	; (80052b8 <UART_SetConfig+0x6b8>)
 8005032:	e008      	b.n	8005046 <UART_SetConfig+0x446>
 8005034:	4ba1      	ldr	r3, [pc, #644]	; (80052bc <UART_SetConfig+0x6bc>)
 8005036:	e006      	b.n	8005046 <UART_SetConfig+0x446>
 8005038:	4ba1      	ldr	r3, [pc, #644]	; (80052c0 <UART_SetConfig+0x6c0>)
 800503a:	e004      	b.n	8005046 <UART_SetConfig+0x446>
 800503c:	4ba1      	ldr	r3, [pc, #644]	; (80052c4 <UART_SetConfig+0x6c4>)
 800503e:	e002      	b.n	8005046 <UART_SetConfig+0x446>
 8005040:	4ba1      	ldr	r3, [pc, #644]	; (80052c8 <UART_SetConfig+0x6c8>)
 8005042:	e000      	b.n	8005046 <UART_SetConfig+0x446>
 8005044:	4b96      	ldr	r3, [pc, #600]	; (80052a0 <UART_SetConfig+0x6a0>)
 8005046:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8005048:	e0aa      	b.n	80051a0 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800504a:	f7fe f90b 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 800504e:	4602      	mov	r2, r0
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	2b00      	cmp	r3, #0
 8005056:	d044      	beq.n	80050e2 <UART_SetConfig+0x4e2>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	2b01      	cmp	r3, #1
 800505e:	d03e      	beq.n	80050de <UART_SetConfig+0x4de>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005064:	2b02      	cmp	r3, #2
 8005066:	d038      	beq.n	80050da <UART_SetConfig+0x4da>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	2b03      	cmp	r3, #3
 800506e:	d032      	beq.n	80050d6 <UART_SetConfig+0x4d6>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	2b04      	cmp	r3, #4
 8005076:	d02c      	beq.n	80050d2 <UART_SetConfig+0x4d2>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	2b05      	cmp	r3, #5
 800507e:	d026      	beq.n	80050ce <UART_SetConfig+0x4ce>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	2b06      	cmp	r3, #6
 8005086:	d020      	beq.n	80050ca <UART_SetConfig+0x4ca>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	2b07      	cmp	r3, #7
 800508e:	d01a      	beq.n	80050c6 <UART_SetConfig+0x4c6>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	2b08      	cmp	r3, #8
 8005096:	d014      	beq.n	80050c2 <UART_SetConfig+0x4c2>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	2b09      	cmp	r3, #9
 800509e:	d00e      	beq.n	80050be <UART_SetConfig+0x4be>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	2b0a      	cmp	r3, #10
 80050a6:	d008      	beq.n	80050ba <UART_SetConfig+0x4ba>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	2b0b      	cmp	r3, #11
 80050ae:	d102      	bne.n	80050b6 <UART_SetConfig+0x4b6>
 80050b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050b4:	e016      	b.n	80050e4 <UART_SetConfig+0x4e4>
 80050b6:	2301      	movs	r3, #1
 80050b8:	e014      	b.n	80050e4 <UART_SetConfig+0x4e4>
 80050ba:	2380      	movs	r3, #128	; 0x80
 80050bc:	e012      	b.n	80050e4 <UART_SetConfig+0x4e4>
 80050be:	2340      	movs	r3, #64	; 0x40
 80050c0:	e010      	b.n	80050e4 <UART_SetConfig+0x4e4>
 80050c2:	2320      	movs	r3, #32
 80050c4:	e00e      	b.n	80050e4 <UART_SetConfig+0x4e4>
 80050c6:	2310      	movs	r3, #16
 80050c8:	e00c      	b.n	80050e4 <UART_SetConfig+0x4e4>
 80050ca:	230c      	movs	r3, #12
 80050cc:	e00a      	b.n	80050e4 <UART_SetConfig+0x4e4>
 80050ce:	230a      	movs	r3, #10
 80050d0:	e008      	b.n	80050e4 <UART_SetConfig+0x4e4>
 80050d2:	2308      	movs	r3, #8
 80050d4:	e006      	b.n	80050e4 <UART_SetConfig+0x4e4>
 80050d6:	2306      	movs	r3, #6
 80050d8:	e004      	b.n	80050e4 <UART_SetConfig+0x4e4>
 80050da:	2304      	movs	r3, #4
 80050dc:	e002      	b.n	80050e4 <UART_SetConfig+0x4e4>
 80050de:	2302      	movs	r3, #2
 80050e0:	e000      	b.n	80050e4 <UART_SetConfig+0x4e4>
 80050e2:	2301      	movs	r3, #1
 80050e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e8:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 80050ea:	e059      	b.n	80051a0 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d04e      	beq.n	8005192 <UART_SetConfig+0x592>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d047      	beq.n	800518c <UART_SetConfig+0x58c>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	2b02      	cmp	r3, #2
 8005102:	d040      	beq.n	8005186 <UART_SetConfig+0x586>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	2b03      	cmp	r3, #3
 800510a:	d039      	beq.n	8005180 <UART_SetConfig+0x580>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	2b04      	cmp	r3, #4
 8005112:	d032      	beq.n	800517a <UART_SetConfig+0x57a>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	2b05      	cmp	r3, #5
 800511a:	d02b      	beq.n	8005174 <UART_SetConfig+0x574>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	2b06      	cmp	r3, #6
 8005122:	d024      	beq.n	800516e <UART_SetConfig+0x56e>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	2b07      	cmp	r3, #7
 800512a:	d01d      	beq.n	8005168 <UART_SetConfig+0x568>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	2b08      	cmp	r3, #8
 8005132:	d016      	beq.n	8005162 <UART_SetConfig+0x562>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	2b09      	cmp	r3, #9
 800513a:	d00f      	beq.n	800515c <UART_SetConfig+0x55c>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	2b0a      	cmp	r3, #10
 8005142:	d008      	beq.n	8005156 <UART_SetConfig+0x556>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	2b0b      	cmp	r3, #11
 800514a:	d101      	bne.n	8005150 <UART_SetConfig+0x550>
 800514c:	2380      	movs	r3, #128	; 0x80
 800514e:	e022      	b.n	8005196 <UART_SetConfig+0x596>
 8005150:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005154:	e01f      	b.n	8005196 <UART_SetConfig+0x596>
 8005156:	f44f 7380 	mov.w	r3, #256	; 0x100
 800515a:	e01c      	b.n	8005196 <UART_SetConfig+0x596>
 800515c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005160:	e019      	b.n	8005196 <UART_SetConfig+0x596>
 8005162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005166:	e016      	b.n	8005196 <UART_SetConfig+0x596>
 8005168:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800516c:	e013      	b.n	8005196 <UART_SetConfig+0x596>
 800516e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005172:	e010      	b.n	8005196 <UART_SetConfig+0x596>
 8005174:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005178:	e00d      	b.n	8005196 <UART_SetConfig+0x596>
 800517a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800517e:	e00a      	b.n	8005196 <UART_SetConfig+0x596>
 8005180:	f241 5355 	movw	r3, #5461	; 0x1555
 8005184:	e007      	b.n	8005196 <UART_SetConfig+0x596>
 8005186:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800518a:	e004      	b.n	8005196 <UART_SetConfig+0x596>
 800518c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005190:	e001      	b.n	8005196 <UART_SetConfig+0x596>
 8005192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005196:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8005198:	e002      	b.n	80051a0 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	74fb      	strb	r3, [r7, #19]
        break;
 800519e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 86c2 	beq.w	8005f2c <UART_SetConfig+0x132c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	4613      	mov	r3, r2
 80051ae:	005b      	lsls	r3, r3, #1
 80051b0:	4413      	add	r3, r2
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d305      	bcc.n	80051c4 <UART_SetConfig+0x5c4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d903      	bls.n	80051cc <UART_SetConfig+0x5cc>
      {
        ret = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	74fb      	strb	r3, [r7, #19]
 80051c8:	f000 beb0 	b.w	8005f2c <UART_SetConfig+0x132c>
      }
      else
      {
        switch (clocksource)
 80051cc:	7efb      	ldrb	r3, [r7, #27]
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	f200 828c 	bhi.w	80056ec <UART_SetConfig+0xaec>
 80051d4:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <UART_SetConfig+0x5dc>)
 80051d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051da:	bf00      	nop
 80051dc:	08005201 	.word	0x08005201
 80051e0:	080056ed 	.word	0x080056ed
 80051e4:	0800536b 	.word	0x0800536b
 80051e8:	080056ed 	.word	0x080056ed
 80051ec:	08005461 	.word	0x08005461
 80051f0:	080056ed 	.word	0x080056ed
 80051f4:	080056ed 	.word	0x080056ed
 80051f8:	080056ed 	.word	0x080056ed
 80051fc:	0800559d 	.word	0x0800559d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005200:	f7fe f8c6 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 8005204:	4603      	mov	r3, r0
 8005206:	4618      	mov	r0, r3
 8005208:	f04f 0100 	mov.w	r1, #0
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	2b00      	cmp	r3, #0
 8005212:	d07e      	beq.n	8005312 <UART_SetConfig+0x712>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	2b01      	cmp	r3, #1
 800521a:	d075      	beq.n	8005308 <UART_SetConfig+0x708>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	2b02      	cmp	r3, #2
 8005222:	d06c      	beq.n	80052fe <UART_SetConfig+0x6fe>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	2b03      	cmp	r3, #3
 800522a:	d063      	beq.n	80052f4 <UART_SetConfig+0x6f4>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	2b04      	cmp	r3, #4
 8005232:	d05a      	beq.n	80052ea <UART_SetConfig+0x6ea>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	2b05      	cmp	r3, #5
 800523a:	d051      	beq.n	80052e0 <UART_SetConfig+0x6e0>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	2b06      	cmp	r3, #6
 8005242:	d048      	beq.n	80052d6 <UART_SetConfig+0x6d6>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	2b07      	cmp	r3, #7
 800524a:	d03f      	beq.n	80052cc <UART_SetConfig+0x6cc>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	2b08      	cmp	r3, #8
 8005252:	d01f      	beq.n	8005294 <UART_SetConfig+0x694>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	2b09      	cmp	r3, #9
 800525a:	d016      	beq.n	800528a <UART_SetConfig+0x68a>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	2b0a      	cmp	r3, #10
 8005262:	d00d      	beq.n	8005280 <UART_SetConfig+0x680>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	2b0b      	cmp	r3, #11
 800526a:	d104      	bne.n	8005276 <UART_SetConfig+0x676>
 800526c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005270:	f04f 0400 	mov.w	r4, #0
 8005274:	e051      	b.n	800531a <UART_SetConfig+0x71a>
 8005276:	f04f 0301 	mov.w	r3, #1
 800527a:	f04f 0400 	mov.w	r4, #0
 800527e:	e04c      	b.n	800531a <UART_SetConfig+0x71a>
 8005280:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005284:	f04f 0400 	mov.w	r4, #0
 8005288:	e047      	b.n	800531a <UART_SetConfig+0x71a>
 800528a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800528e:	f04f 0400 	mov.w	r4, #0
 8005292:	e042      	b.n	800531a <UART_SetConfig+0x71a>
 8005294:	f04f 0320 	mov.w	r3, #32
 8005298:	f04f 0400 	mov.w	r4, #0
 800529c:	e03d      	b.n	800531a <UART_SetConfig+0x71a>
 800529e:	bf00      	nop
 80052a0:	00f42400 	.word	0x00f42400
 80052a4:	0001e848 	.word	0x0001e848
 80052a8:	0003d090 	.word	0x0003d090
 80052ac:	0007a120 	.word	0x0007a120
 80052b0:	000f4240 	.word	0x000f4240
 80052b4:	00145855 	.word	0x00145855
 80052b8:	00186a00 	.word	0x00186a00
 80052bc:	001e8480 	.word	0x001e8480
 80052c0:	0028b0aa 	.word	0x0028b0aa
 80052c4:	003d0900 	.word	0x003d0900
 80052c8:	007a1200 	.word	0x007a1200
 80052cc:	f04f 0310 	mov.w	r3, #16
 80052d0:	f04f 0400 	mov.w	r4, #0
 80052d4:	e021      	b.n	800531a <UART_SetConfig+0x71a>
 80052d6:	f04f 030c 	mov.w	r3, #12
 80052da:	f04f 0400 	mov.w	r4, #0
 80052de:	e01c      	b.n	800531a <UART_SetConfig+0x71a>
 80052e0:	f04f 030a 	mov.w	r3, #10
 80052e4:	f04f 0400 	mov.w	r4, #0
 80052e8:	e017      	b.n	800531a <UART_SetConfig+0x71a>
 80052ea:	f04f 0308 	mov.w	r3, #8
 80052ee:	f04f 0400 	mov.w	r4, #0
 80052f2:	e012      	b.n	800531a <UART_SetConfig+0x71a>
 80052f4:	f04f 0306 	mov.w	r3, #6
 80052f8:	f04f 0400 	mov.w	r4, #0
 80052fc:	e00d      	b.n	800531a <UART_SetConfig+0x71a>
 80052fe:	f04f 0304 	mov.w	r3, #4
 8005302:	f04f 0400 	mov.w	r4, #0
 8005306:	e008      	b.n	800531a <UART_SetConfig+0x71a>
 8005308:	f04f 0302 	mov.w	r3, #2
 800530c:	f04f 0400 	mov.w	r4, #0
 8005310:	e003      	b.n	800531a <UART_SetConfig+0x71a>
 8005312:	f04f 0301 	mov.w	r3, #1
 8005316:	f04f 0400 	mov.w	r4, #0
 800531a:	461a      	mov	r2, r3
 800531c:	4623      	mov	r3, r4
 800531e:	f7fa ffbf 	bl	80002a0 <__aeabi_uldivmod>
 8005322:	4603      	mov	r3, r0
 8005324:	460c      	mov	r4, r1
 8005326:	4619      	mov	r1, r3
 8005328:	4622      	mov	r2, r4
 800532a:	f04f 0300 	mov.w	r3, #0
 800532e:	f04f 0400 	mov.w	r4, #0
 8005332:	0214      	lsls	r4, r2, #8
 8005334:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005338:	020b      	lsls	r3, r1, #8
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6852      	ldr	r2, [r2, #4]
 800533e:	0852      	lsrs	r2, r2, #1
 8005340:	4611      	mov	r1, r2
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	eb13 0b01 	adds.w	fp, r3, r1
 800534a:	eb44 0c02 	adc.w	ip, r4, r2
 800534e:	4658      	mov	r0, fp
 8005350:	4661      	mov	r1, ip
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f04f 0400 	mov.w	r4, #0
 800535a:	461a      	mov	r2, r3
 800535c:	4623      	mov	r3, r4
 800535e:	f7fa ff9f 	bl	80002a0 <__aeabi_uldivmod>
 8005362:	4603      	mov	r3, r0
 8005364:	460c      	mov	r4, r1
 8005366:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8005368:	e1c3      	b.n	80056f2 <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	2b00      	cmp	r3, #0
 8005370:	d05b      	beq.n	800542a <UART_SetConfig+0x82a>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	2b01      	cmp	r3, #1
 8005378:	d053      	beq.n	8005422 <UART_SetConfig+0x822>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	2b02      	cmp	r3, #2
 8005380:	d04b      	beq.n	800541a <UART_SetConfig+0x81a>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	2b03      	cmp	r3, #3
 8005388:	d043      	beq.n	8005412 <UART_SetConfig+0x812>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	2b04      	cmp	r3, #4
 8005390:	d03b      	beq.n	800540a <UART_SetConfig+0x80a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	2b05      	cmp	r3, #5
 8005398:	d033      	beq.n	8005402 <UART_SetConfig+0x802>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	2b06      	cmp	r3, #6
 80053a0:	d02b      	beq.n	80053fa <UART_SetConfig+0x7fa>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	2b07      	cmp	r3, #7
 80053a8:	d023      	beq.n	80053f2 <UART_SetConfig+0x7f2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d01b      	beq.n	80053ea <UART_SetConfig+0x7ea>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	2b09      	cmp	r3, #9
 80053b8:	d013      	beq.n	80053e2 <UART_SetConfig+0x7e2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	2b0a      	cmp	r3, #10
 80053c0:	d00b      	beq.n	80053da <UART_SetConfig+0x7da>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	2b0b      	cmp	r3, #11
 80053c8:	d103      	bne.n	80053d2 <UART_SetConfig+0x7d2>
 80053ca:	4bad      	ldr	r3, [pc, #692]	; (8005680 <UART_SetConfig+0xa80>)
 80053cc:	f04f 0400 	mov.w	r4, #0
 80053d0:	e02e      	b.n	8005430 <UART_SetConfig+0x830>
 80053d2:	4bac      	ldr	r3, [pc, #688]	; (8005684 <UART_SetConfig+0xa84>)
 80053d4:	f04f 0400 	mov.w	r4, #0
 80053d8:	e02a      	b.n	8005430 <UART_SetConfig+0x830>
 80053da:	4bab      	ldr	r3, [pc, #684]	; (8005688 <UART_SetConfig+0xa88>)
 80053dc:	f04f 0400 	mov.w	r4, #0
 80053e0:	e026      	b.n	8005430 <UART_SetConfig+0x830>
 80053e2:	4baa      	ldr	r3, [pc, #680]	; (800568c <UART_SetConfig+0xa8c>)
 80053e4:	f04f 0400 	mov.w	r4, #0
 80053e8:	e022      	b.n	8005430 <UART_SetConfig+0x830>
 80053ea:	4ba9      	ldr	r3, [pc, #676]	; (8005690 <UART_SetConfig+0xa90>)
 80053ec:	f04f 0400 	mov.w	r4, #0
 80053f0:	e01e      	b.n	8005430 <UART_SetConfig+0x830>
 80053f2:	4ba8      	ldr	r3, [pc, #672]	; (8005694 <UART_SetConfig+0xa94>)
 80053f4:	f04f 0400 	mov.w	r4, #0
 80053f8:	e01a      	b.n	8005430 <UART_SetConfig+0x830>
 80053fa:	a49d      	add	r4, pc, #628	; (adr r4, 8005670 <UART_SetConfig+0xa70>)
 80053fc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005400:	e016      	b.n	8005430 <UART_SetConfig+0x830>
 8005402:	4ba5      	ldr	r3, [pc, #660]	; (8005698 <UART_SetConfig+0xa98>)
 8005404:	f04f 0400 	mov.w	r4, #0
 8005408:	e012      	b.n	8005430 <UART_SetConfig+0x830>
 800540a:	4ba4      	ldr	r3, [pc, #656]	; (800569c <UART_SetConfig+0xa9c>)
 800540c:	f04f 0400 	mov.w	r4, #0
 8005410:	e00e      	b.n	8005430 <UART_SetConfig+0x830>
 8005412:	a499      	add	r4, pc, #612	; (adr r4, 8005678 <UART_SetConfig+0xa78>)
 8005414:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005418:	e00a      	b.n	8005430 <UART_SetConfig+0x830>
 800541a:	4ba1      	ldr	r3, [pc, #644]	; (80056a0 <UART_SetConfig+0xaa0>)
 800541c:	f04f 0400 	mov.w	r4, #0
 8005420:	e006      	b.n	8005430 <UART_SetConfig+0x830>
 8005422:	4ba0      	ldr	r3, [pc, #640]	; (80056a4 <UART_SetConfig+0xaa4>)
 8005424:	f04f 0400 	mov.w	r4, #0
 8005428:	e002      	b.n	8005430 <UART_SetConfig+0x830>
 800542a:	4b96      	ldr	r3, [pc, #600]	; (8005684 <UART_SetConfig+0xa84>)
 800542c:	f04f 0400 	mov.w	r4, #0
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	6852      	ldr	r2, [r2, #4]
 8005434:	0852      	lsrs	r2, r2, #1
 8005436:	4611      	mov	r1, r2
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	eb13 0b01 	adds.w	fp, r3, r1
 8005440:	eb44 0c02 	adc.w	ip, r4, r2
 8005444:	4658      	mov	r0, fp
 8005446:	4661      	mov	r1, ip
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f04f 0400 	mov.w	r4, #0
 8005450:	461a      	mov	r2, r3
 8005452:	4623      	mov	r3, r4
 8005454:	f7fa ff24 	bl	80002a0 <__aeabi_uldivmod>
 8005458:	4603      	mov	r3, r0
 800545a:	460c      	mov	r4, r1
 800545c:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800545e:	e148      	b.n	80056f2 <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005460:	f7fd ff00 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8005464:	4603      	mov	r3, r0
 8005466:	4618      	mov	r0, r3
 8005468:	f04f 0100 	mov.w	r1, #0
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	2b00      	cmp	r3, #0
 8005472:	d067      	beq.n	8005544 <UART_SetConfig+0x944>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	2b01      	cmp	r3, #1
 800547a:	d05e      	beq.n	800553a <UART_SetConfig+0x93a>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	2b02      	cmp	r3, #2
 8005482:	d055      	beq.n	8005530 <UART_SetConfig+0x930>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	2b03      	cmp	r3, #3
 800548a:	d04c      	beq.n	8005526 <UART_SetConfig+0x926>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	2b04      	cmp	r3, #4
 8005492:	d043      	beq.n	800551c <UART_SetConfig+0x91c>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	2b05      	cmp	r3, #5
 800549a:	d03a      	beq.n	8005512 <UART_SetConfig+0x912>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	2b06      	cmp	r3, #6
 80054a2:	d031      	beq.n	8005508 <UART_SetConfig+0x908>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	2b07      	cmp	r3, #7
 80054aa:	d028      	beq.n	80054fe <UART_SetConfig+0x8fe>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d01f      	beq.n	80054f4 <UART_SetConfig+0x8f4>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	2b09      	cmp	r3, #9
 80054ba:	d016      	beq.n	80054ea <UART_SetConfig+0x8ea>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	2b0a      	cmp	r3, #10
 80054c2:	d00d      	beq.n	80054e0 <UART_SetConfig+0x8e0>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	2b0b      	cmp	r3, #11
 80054ca:	d104      	bne.n	80054d6 <UART_SetConfig+0x8d6>
 80054cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054d0:	f04f 0400 	mov.w	r4, #0
 80054d4:	e03a      	b.n	800554c <UART_SetConfig+0x94c>
 80054d6:	f04f 0301 	mov.w	r3, #1
 80054da:	f04f 0400 	mov.w	r4, #0
 80054de:	e035      	b.n	800554c <UART_SetConfig+0x94c>
 80054e0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80054e4:	f04f 0400 	mov.w	r4, #0
 80054e8:	e030      	b.n	800554c <UART_SetConfig+0x94c>
 80054ea:	f04f 0340 	mov.w	r3, #64	; 0x40
 80054ee:	f04f 0400 	mov.w	r4, #0
 80054f2:	e02b      	b.n	800554c <UART_SetConfig+0x94c>
 80054f4:	f04f 0320 	mov.w	r3, #32
 80054f8:	f04f 0400 	mov.w	r4, #0
 80054fc:	e026      	b.n	800554c <UART_SetConfig+0x94c>
 80054fe:	f04f 0310 	mov.w	r3, #16
 8005502:	f04f 0400 	mov.w	r4, #0
 8005506:	e021      	b.n	800554c <UART_SetConfig+0x94c>
 8005508:	f04f 030c 	mov.w	r3, #12
 800550c:	f04f 0400 	mov.w	r4, #0
 8005510:	e01c      	b.n	800554c <UART_SetConfig+0x94c>
 8005512:	f04f 030a 	mov.w	r3, #10
 8005516:	f04f 0400 	mov.w	r4, #0
 800551a:	e017      	b.n	800554c <UART_SetConfig+0x94c>
 800551c:	f04f 0308 	mov.w	r3, #8
 8005520:	f04f 0400 	mov.w	r4, #0
 8005524:	e012      	b.n	800554c <UART_SetConfig+0x94c>
 8005526:	f04f 0306 	mov.w	r3, #6
 800552a:	f04f 0400 	mov.w	r4, #0
 800552e:	e00d      	b.n	800554c <UART_SetConfig+0x94c>
 8005530:	f04f 0304 	mov.w	r3, #4
 8005534:	f04f 0400 	mov.w	r4, #0
 8005538:	e008      	b.n	800554c <UART_SetConfig+0x94c>
 800553a:	f04f 0302 	mov.w	r3, #2
 800553e:	f04f 0400 	mov.w	r4, #0
 8005542:	e003      	b.n	800554c <UART_SetConfig+0x94c>
 8005544:	f04f 0301 	mov.w	r3, #1
 8005548:	f04f 0400 	mov.w	r4, #0
 800554c:	461a      	mov	r2, r3
 800554e:	4623      	mov	r3, r4
 8005550:	f7fa fea6 	bl	80002a0 <__aeabi_uldivmod>
 8005554:	4603      	mov	r3, r0
 8005556:	460c      	mov	r4, r1
 8005558:	4619      	mov	r1, r3
 800555a:	4622      	mov	r2, r4
 800555c:	f04f 0300 	mov.w	r3, #0
 8005560:	f04f 0400 	mov.w	r4, #0
 8005564:	0214      	lsls	r4, r2, #8
 8005566:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800556a:	020b      	lsls	r3, r1, #8
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	6852      	ldr	r2, [r2, #4]
 8005570:	0852      	lsrs	r2, r2, #1
 8005572:	4611      	mov	r1, r2
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	eb13 0b01 	adds.w	fp, r3, r1
 800557c:	eb44 0c02 	adc.w	ip, r4, r2
 8005580:	4658      	mov	r0, fp
 8005582:	4661      	mov	r1, ip
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f04f 0400 	mov.w	r4, #0
 800558c:	461a      	mov	r2, r3
 800558e:	4623      	mov	r3, r4
 8005590:	f7fa fe86 	bl	80002a0 <__aeabi_uldivmod>
 8005594:	4603      	mov	r3, r0
 8005596:	460c      	mov	r4, r1
 8005598:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800559a:	e0aa      	b.n	80056f2 <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 8087 	beq.w	80056b4 <UART_SetConfig+0xab4>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d05b      	beq.n	8005666 <UART_SetConfig+0xa66>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d052      	beq.n	800565c <UART_SetConfig+0xa5c>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d04a      	beq.n	8005654 <UART_SetConfig+0xa54>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d041      	beq.n	800564a <UART_SetConfig+0xa4a>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ca:	2b05      	cmp	r3, #5
 80055cc:	d039      	beq.n	8005642 <UART_SetConfig+0xa42>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	2b06      	cmp	r3, #6
 80055d4:	d031      	beq.n	800563a <UART_SetConfig+0xa3a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	2b07      	cmp	r3, #7
 80055dc:	d028      	beq.n	8005630 <UART_SetConfig+0xa30>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	2b08      	cmp	r3, #8
 80055e4:	d01f      	beq.n	8005626 <UART_SetConfig+0xa26>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	2b09      	cmp	r3, #9
 80055ec:	d016      	beq.n	800561c <UART_SetConfig+0xa1c>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	2b0a      	cmp	r3, #10
 80055f4:	d00d      	beq.n	8005612 <UART_SetConfig+0xa12>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	2b0b      	cmp	r3, #11
 80055fc:	d104      	bne.n	8005608 <UART_SetConfig+0xa08>
 80055fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005602:	f04f 0400 	mov.w	r4, #0
 8005606:	e059      	b.n	80056bc <UART_SetConfig+0xabc>
 8005608:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800560c:	f04f 0400 	mov.w	r4, #0
 8005610:	e054      	b.n	80056bc <UART_SetConfig+0xabc>
 8005612:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005616:	f04f 0400 	mov.w	r4, #0
 800561a:	e04f      	b.n	80056bc <UART_SetConfig+0xabc>
 800561c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005620:	f04f 0400 	mov.w	r4, #0
 8005624:	e04a      	b.n	80056bc <UART_SetConfig+0xabc>
 8005626:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800562a:	f04f 0400 	mov.w	r4, #0
 800562e:	e045      	b.n	80056bc <UART_SetConfig+0xabc>
 8005630:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005634:	f04f 0400 	mov.w	r4, #0
 8005638:	e040      	b.n	80056bc <UART_SetConfig+0xabc>
 800563a:	4b1b      	ldr	r3, [pc, #108]	; (80056a8 <UART_SetConfig+0xaa8>)
 800563c:	f04f 0400 	mov.w	r4, #0
 8005640:	e03c      	b.n	80056bc <UART_SetConfig+0xabc>
 8005642:	4b1a      	ldr	r3, [pc, #104]	; (80056ac <UART_SetConfig+0xaac>)
 8005644:	f04f 0400 	mov.w	r4, #0
 8005648:	e038      	b.n	80056bc <UART_SetConfig+0xabc>
 800564a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800564e:	f04f 0400 	mov.w	r4, #0
 8005652:	e033      	b.n	80056bc <UART_SetConfig+0xabc>
 8005654:	4b16      	ldr	r3, [pc, #88]	; (80056b0 <UART_SetConfig+0xab0>)
 8005656:	f04f 0400 	mov.w	r4, #0
 800565a:	e02f      	b.n	80056bc <UART_SetConfig+0xabc>
 800565c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005660:	f04f 0400 	mov.w	r4, #0
 8005664:	e02a      	b.n	80056bc <UART_SetConfig+0xabc>
 8005666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800566a:	f04f 0400 	mov.w	r4, #0
 800566e:	e025      	b.n	80056bc <UART_SetConfig+0xabc>
 8005670:	14585500 	.word	0x14585500
 8005674:	00000000 	.word	0x00000000
 8005678:	28b0aa00 	.word	0x28b0aa00
 800567c:	00000000 	.word	0x00000000
 8005680:	00f42400 	.word	0x00f42400
 8005684:	f4240000 	.word	0xf4240000
 8005688:	01e84800 	.word	0x01e84800
 800568c:	03d09000 	.word	0x03d09000
 8005690:	07a12000 	.word	0x07a12000
 8005694:	0f424000 	.word	0x0f424000
 8005698:	186a0000 	.word	0x186a0000
 800569c:	1e848000 	.word	0x1e848000
 80056a0:	3d090000 	.word	0x3d090000
 80056a4:	7a120000 	.word	0x7a120000
 80056a8:	000aaa00 	.word	0x000aaa00
 80056ac:	000ccc00 	.word	0x000ccc00
 80056b0:	00155500 	.word	0x00155500
 80056b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80056b8:	f04f 0400 	mov.w	r4, #0
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6852      	ldr	r2, [r2, #4]
 80056c0:	0852      	lsrs	r2, r2, #1
 80056c2:	4611      	mov	r1, r2
 80056c4:	f04f 0200 	mov.w	r2, #0
 80056c8:	eb13 0b01 	adds.w	fp, r3, r1
 80056cc:	eb44 0c02 	adc.w	ip, r4, r2
 80056d0:	4658      	mov	r0, fp
 80056d2:	4661      	mov	r1, ip
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f04f 0400 	mov.w	r4, #0
 80056dc:	461a      	mov	r2, r3
 80056de:	4623      	mov	r3, r4
 80056e0:	f7fa fdde 	bl	80002a0 <__aeabi_uldivmod>
 80056e4:	4603      	mov	r3, r0
 80056e6:	460c      	mov	r4, r1
 80056e8:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 80056ea:	e002      	b.n	80056f2 <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	74fb      	strb	r3, [r7, #19]
            break;
 80056f0:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056f8:	d309      	bcc.n	800570e <UART_SetConfig+0xb0e>
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005700:	d205      	bcs.n	800570e <UART_SetConfig+0xb0e>
        {
          huart->Instance->BRR = usartdiv;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	60da      	str	r2, [r3, #12]
 800570a:	f000 bc0f 	b.w	8005f2c <UART_SetConfig+0x132c>
        }
        else
        {
          ret = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	74fb      	strb	r3, [r7, #19]
 8005712:	f000 bc0b 	b.w	8005f2c <UART_SetConfig+0x132c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800571e:	f040 81ff 	bne.w	8005b20 <UART_SetConfig+0xf20>
  {
    switch (clocksource)
 8005722:	7efb      	ldrb	r3, [r7, #27]
 8005724:	2b08      	cmp	r3, #8
 8005726:	f200 81db 	bhi.w	8005ae0 <UART_SetConfig+0xee0>
 800572a:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <UART_SetConfig+0xb30>)
 800572c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005730:	08005755 	.word	0x08005755
 8005734:	0800580b 	.word	0x0800580b
 8005738:	080058c1 	.word	0x080058c1
 800573c:	08005ae1 	.word	0x08005ae1
 8005740:	08005969 	.word	0x08005969
 8005744:	08005ae1 	.word	0x08005ae1
 8005748:	08005ae1 	.word	0x08005ae1
 800574c:	08005ae1 	.word	0x08005ae1
 8005750:	08005a1f 	.word	0x08005a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005754:	f7fd fe1c 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 8005758:	4602      	mov	r2, r0
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	2b00      	cmp	r3, #0
 8005760:	d044      	beq.n	80057ec <UART_SetConfig+0xbec>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	2b01      	cmp	r3, #1
 8005768:	d03e      	beq.n	80057e8 <UART_SetConfig+0xbe8>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	2b02      	cmp	r3, #2
 8005770:	d038      	beq.n	80057e4 <UART_SetConfig+0xbe4>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	2b03      	cmp	r3, #3
 8005778:	d032      	beq.n	80057e0 <UART_SetConfig+0xbe0>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	2b04      	cmp	r3, #4
 8005780:	d02c      	beq.n	80057dc <UART_SetConfig+0xbdc>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	2b05      	cmp	r3, #5
 8005788:	d026      	beq.n	80057d8 <UART_SetConfig+0xbd8>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	2b06      	cmp	r3, #6
 8005790:	d020      	beq.n	80057d4 <UART_SetConfig+0xbd4>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	2b07      	cmp	r3, #7
 8005798:	d01a      	beq.n	80057d0 <UART_SetConfig+0xbd0>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	2b08      	cmp	r3, #8
 80057a0:	d014      	beq.n	80057cc <UART_SetConfig+0xbcc>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	2b09      	cmp	r3, #9
 80057a8:	d00e      	beq.n	80057c8 <UART_SetConfig+0xbc8>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	2b0a      	cmp	r3, #10
 80057b0:	d008      	beq.n	80057c4 <UART_SetConfig+0xbc4>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	2b0b      	cmp	r3, #11
 80057b8:	d102      	bne.n	80057c0 <UART_SetConfig+0xbc0>
 80057ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057be:	e016      	b.n	80057ee <UART_SetConfig+0xbee>
 80057c0:	2301      	movs	r3, #1
 80057c2:	e014      	b.n	80057ee <UART_SetConfig+0xbee>
 80057c4:	2380      	movs	r3, #128	; 0x80
 80057c6:	e012      	b.n	80057ee <UART_SetConfig+0xbee>
 80057c8:	2340      	movs	r3, #64	; 0x40
 80057ca:	e010      	b.n	80057ee <UART_SetConfig+0xbee>
 80057cc:	2320      	movs	r3, #32
 80057ce:	e00e      	b.n	80057ee <UART_SetConfig+0xbee>
 80057d0:	2310      	movs	r3, #16
 80057d2:	e00c      	b.n	80057ee <UART_SetConfig+0xbee>
 80057d4:	230c      	movs	r3, #12
 80057d6:	e00a      	b.n	80057ee <UART_SetConfig+0xbee>
 80057d8:	230a      	movs	r3, #10
 80057da:	e008      	b.n	80057ee <UART_SetConfig+0xbee>
 80057dc:	2308      	movs	r3, #8
 80057de:	e006      	b.n	80057ee <UART_SetConfig+0xbee>
 80057e0:	2306      	movs	r3, #6
 80057e2:	e004      	b.n	80057ee <UART_SetConfig+0xbee>
 80057e4:	2304      	movs	r3, #4
 80057e6:	e002      	b.n	80057ee <UART_SetConfig+0xbee>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e000      	b.n	80057ee <UART_SetConfig+0xbee>
 80057ec:	2301      	movs	r3, #1
 80057ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f2:	005a      	lsls	r2, r3, #1
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	085b      	lsrs	r3, r3, #1
 80057fa:	441a      	add	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	fbb2 f3f3 	udiv	r3, r2, r3
 8005804:	b29b      	uxth	r3, r3
 8005806:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005808:	e16d      	b.n	8005ae6 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800580a:	f7fd fdd7 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 800580e:	4602      	mov	r2, r0
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	2b00      	cmp	r3, #0
 8005816:	d044      	beq.n	80058a2 <UART_SetConfig+0xca2>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	2b01      	cmp	r3, #1
 800581e:	d03e      	beq.n	800589e <UART_SetConfig+0xc9e>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	2b02      	cmp	r3, #2
 8005826:	d038      	beq.n	800589a <UART_SetConfig+0xc9a>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	2b03      	cmp	r3, #3
 800582e:	d032      	beq.n	8005896 <UART_SetConfig+0xc96>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	2b04      	cmp	r3, #4
 8005836:	d02c      	beq.n	8005892 <UART_SetConfig+0xc92>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	2b05      	cmp	r3, #5
 800583e:	d026      	beq.n	800588e <UART_SetConfig+0xc8e>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	2b06      	cmp	r3, #6
 8005846:	d020      	beq.n	800588a <UART_SetConfig+0xc8a>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	2b07      	cmp	r3, #7
 800584e:	d01a      	beq.n	8005886 <UART_SetConfig+0xc86>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	2b08      	cmp	r3, #8
 8005856:	d014      	beq.n	8005882 <UART_SetConfig+0xc82>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	2b09      	cmp	r3, #9
 800585e:	d00e      	beq.n	800587e <UART_SetConfig+0xc7e>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	2b0a      	cmp	r3, #10
 8005866:	d008      	beq.n	800587a <UART_SetConfig+0xc7a>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	2b0b      	cmp	r3, #11
 800586e:	d102      	bne.n	8005876 <UART_SetConfig+0xc76>
 8005870:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005874:	e016      	b.n	80058a4 <UART_SetConfig+0xca4>
 8005876:	2301      	movs	r3, #1
 8005878:	e014      	b.n	80058a4 <UART_SetConfig+0xca4>
 800587a:	2380      	movs	r3, #128	; 0x80
 800587c:	e012      	b.n	80058a4 <UART_SetConfig+0xca4>
 800587e:	2340      	movs	r3, #64	; 0x40
 8005880:	e010      	b.n	80058a4 <UART_SetConfig+0xca4>
 8005882:	2320      	movs	r3, #32
 8005884:	e00e      	b.n	80058a4 <UART_SetConfig+0xca4>
 8005886:	2310      	movs	r3, #16
 8005888:	e00c      	b.n	80058a4 <UART_SetConfig+0xca4>
 800588a:	230c      	movs	r3, #12
 800588c:	e00a      	b.n	80058a4 <UART_SetConfig+0xca4>
 800588e:	230a      	movs	r3, #10
 8005890:	e008      	b.n	80058a4 <UART_SetConfig+0xca4>
 8005892:	2308      	movs	r3, #8
 8005894:	e006      	b.n	80058a4 <UART_SetConfig+0xca4>
 8005896:	2306      	movs	r3, #6
 8005898:	e004      	b.n	80058a4 <UART_SetConfig+0xca4>
 800589a:	2304      	movs	r3, #4
 800589c:	e002      	b.n	80058a4 <UART_SetConfig+0xca4>
 800589e:	2302      	movs	r3, #2
 80058a0:	e000      	b.n	80058a4 <UART_SetConfig+0xca4>
 80058a2:	2301      	movs	r3, #1
 80058a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a8:	005a      	lsls	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	085b      	lsrs	r3, r3, #1
 80058b0:	441a      	add	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80058be:	e112      	b.n	8005ae6 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d043      	beq.n	8005950 <UART_SetConfig+0xd50>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d03d      	beq.n	800594c <UART_SetConfig+0xd4c>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d037      	beq.n	8005948 <UART_SetConfig+0xd48>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	2b03      	cmp	r3, #3
 80058de:	d031      	beq.n	8005944 <UART_SetConfig+0xd44>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	d02b      	beq.n	8005940 <UART_SetConfig+0xd40>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	2b05      	cmp	r3, #5
 80058ee:	d025      	beq.n	800593c <UART_SetConfig+0xd3c>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	2b06      	cmp	r3, #6
 80058f6:	d01f      	beq.n	8005938 <UART_SetConfig+0xd38>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	2b07      	cmp	r3, #7
 80058fe:	d019      	beq.n	8005934 <UART_SetConfig+0xd34>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	2b08      	cmp	r3, #8
 8005906:	d013      	beq.n	8005930 <UART_SetConfig+0xd30>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	2b09      	cmp	r3, #9
 800590e:	d00d      	beq.n	800592c <UART_SetConfig+0xd2c>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	2b0a      	cmp	r3, #10
 8005916:	d007      	beq.n	8005928 <UART_SetConfig+0xd28>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	2b0b      	cmp	r3, #11
 800591e:	d101      	bne.n	8005924 <UART_SetConfig+0xd24>
 8005920:	4b8c      	ldr	r3, [pc, #560]	; (8005b54 <UART_SetConfig+0xf54>)
 8005922:	e016      	b.n	8005952 <UART_SetConfig+0xd52>
 8005924:	4b8c      	ldr	r3, [pc, #560]	; (8005b58 <UART_SetConfig+0xf58>)
 8005926:	e014      	b.n	8005952 <UART_SetConfig+0xd52>
 8005928:	4b8c      	ldr	r3, [pc, #560]	; (8005b5c <UART_SetConfig+0xf5c>)
 800592a:	e012      	b.n	8005952 <UART_SetConfig+0xd52>
 800592c:	4b8c      	ldr	r3, [pc, #560]	; (8005b60 <UART_SetConfig+0xf60>)
 800592e:	e010      	b.n	8005952 <UART_SetConfig+0xd52>
 8005930:	4b8c      	ldr	r3, [pc, #560]	; (8005b64 <UART_SetConfig+0xf64>)
 8005932:	e00e      	b.n	8005952 <UART_SetConfig+0xd52>
 8005934:	4b8c      	ldr	r3, [pc, #560]	; (8005b68 <UART_SetConfig+0xf68>)
 8005936:	e00c      	b.n	8005952 <UART_SetConfig+0xd52>
 8005938:	4b8c      	ldr	r3, [pc, #560]	; (8005b6c <UART_SetConfig+0xf6c>)
 800593a:	e00a      	b.n	8005952 <UART_SetConfig+0xd52>
 800593c:	4b8c      	ldr	r3, [pc, #560]	; (8005b70 <UART_SetConfig+0xf70>)
 800593e:	e008      	b.n	8005952 <UART_SetConfig+0xd52>
 8005940:	4b8c      	ldr	r3, [pc, #560]	; (8005b74 <UART_SetConfig+0xf74>)
 8005942:	e006      	b.n	8005952 <UART_SetConfig+0xd52>
 8005944:	4b8c      	ldr	r3, [pc, #560]	; (8005b78 <UART_SetConfig+0xf78>)
 8005946:	e004      	b.n	8005952 <UART_SetConfig+0xd52>
 8005948:	4b8c      	ldr	r3, [pc, #560]	; (8005b7c <UART_SetConfig+0xf7c>)
 800594a:	e002      	b.n	8005952 <UART_SetConfig+0xd52>
 800594c:	4b8c      	ldr	r3, [pc, #560]	; (8005b80 <UART_SetConfig+0xf80>)
 800594e:	e000      	b.n	8005952 <UART_SetConfig+0xd52>
 8005950:	4b81      	ldr	r3, [pc, #516]	; (8005b58 <UART_SetConfig+0xf58>)
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	6852      	ldr	r2, [r2, #4]
 8005956:	0852      	lsrs	r2, r2, #1
 8005958:	441a      	add	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005962:	b29b      	uxth	r3, r3
 8005964:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005966:	e0be      	b.n	8005ae6 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005968:	f7fd fc7c 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 800596c:	4602      	mov	r2, r0
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	2b00      	cmp	r3, #0
 8005974:	d044      	beq.n	8005a00 <UART_SetConfig+0xe00>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	2b01      	cmp	r3, #1
 800597c:	d03e      	beq.n	80059fc <UART_SetConfig+0xdfc>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	2b02      	cmp	r3, #2
 8005984:	d038      	beq.n	80059f8 <UART_SetConfig+0xdf8>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	2b03      	cmp	r3, #3
 800598c:	d032      	beq.n	80059f4 <UART_SetConfig+0xdf4>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	2b04      	cmp	r3, #4
 8005994:	d02c      	beq.n	80059f0 <UART_SetConfig+0xdf0>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	2b05      	cmp	r3, #5
 800599c:	d026      	beq.n	80059ec <UART_SetConfig+0xdec>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	2b06      	cmp	r3, #6
 80059a4:	d020      	beq.n	80059e8 <UART_SetConfig+0xde8>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	2b07      	cmp	r3, #7
 80059ac:	d01a      	beq.n	80059e4 <UART_SetConfig+0xde4>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	2b08      	cmp	r3, #8
 80059b4:	d014      	beq.n	80059e0 <UART_SetConfig+0xde0>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	2b09      	cmp	r3, #9
 80059bc:	d00e      	beq.n	80059dc <UART_SetConfig+0xddc>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	2b0a      	cmp	r3, #10
 80059c4:	d008      	beq.n	80059d8 <UART_SetConfig+0xdd8>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	2b0b      	cmp	r3, #11
 80059cc:	d102      	bne.n	80059d4 <UART_SetConfig+0xdd4>
 80059ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059d2:	e016      	b.n	8005a02 <UART_SetConfig+0xe02>
 80059d4:	2301      	movs	r3, #1
 80059d6:	e014      	b.n	8005a02 <UART_SetConfig+0xe02>
 80059d8:	2380      	movs	r3, #128	; 0x80
 80059da:	e012      	b.n	8005a02 <UART_SetConfig+0xe02>
 80059dc:	2340      	movs	r3, #64	; 0x40
 80059de:	e010      	b.n	8005a02 <UART_SetConfig+0xe02>
 80059e0:	2320      	movs	r3, #32
 80059e2:	e00e      	b.n	8005a02 <UART_SetConfig+0xe02>
 80059e4:	2310      	movs	r3, #16
 80059e6:	e00c      	b.n	8005a02 <UART_SetConfig+0xe02>
 80059e8:	230c      	movs	r3, #12
 80059ea:	e00a      	b.n	8005a02 <UART_SetConfig+0xe02>
 80059ec:	230a      	movs	r3, #10
 80059ee:	e008      	b.n	8005a02 <UART_SetConfig+0xe02>
 80059f0:	2308      	movs	r3, #8
 80059f2:	e006      	b.n	8005a02 <UART_SetConfig+0xe02>
 80059f4:	2306      	movs	r3, #6
 80059f6:	e004      	b.n	8005a02 <UART_SetConfig+0xe02>
 80059f8:	2304      	movs	r3, #4
 80059fa:	e002      	b.n	8005a02 <UART_SetConfig+0xe02>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e000      	b.n	8005a02 <UART_SetConfig+0xe02>
 8005a00:	2301      	movs	r3, #1
 8005a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a06:	005a      	lsls	r2, r3, #1
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	085b      	lsrs	r3, r3, #1
 8005a0e:	441a      	add	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a1c:	e063      	b.n	8005ae6 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d04f      	beq.n	8005ac6 <UART_SetConfig+0xec6>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d048      	beq.n	8005ac0 <UART_SetConfig+0xec0>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d041      	beq.n	8005aba <UART_SetConfig+0xeba>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3a:	2b03      	cmp	r3, #3
 8005a3c:	d03a      	beq.n	8005ab4 <UART_SetConfig+0xeb4>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	2b04      	cmp	r3, #4
 8005a44:	d033      	beq.n	8005aae <UART_SetConfig+0xeae>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	2b05      	cmp	r3, #5
 8005a4c:	d02c      	beq.n	8005aa8 <UART_SetConfig+0xea8>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	2b06      	cmp	r3, #6
 8005a54:	d025      	beq.n	8005aa2 <UART_SetConfig+0xea2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	2b07      	cmp	r3, #7
 8005a5c:	d01e      	beq.n	8005a9c <UART_SetConfig+0xe9c>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	2b08      	cmp	r3, #8
 8005a64:	d017      	beq.n	8005a96 <UART_SetConfig+0xe96>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	2b09      	cmp	r3, #9
 8005a6c:	d010      	beq.n	8005a90 <UART_SetConfig+0xe90>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	2b0a      	cmp	r3, #10
 8005a74:	d009      	beq.n	8005a8a <UART_SetConfig+0xe8a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	2b0b      	cmp	r3, #11
 8005a7c:	d102      	bne.n	8005a84 <UART_SetConfig+0xe84>
 8005a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a82:	e022      	b.n	8005aca <UART_SetConfig+0xeca>
 8005a84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a88:	e01f      	b.n	8005aca <UART_SetConfig+0xeca>
 8005a8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a8e:	e01c      	b.n	8005aca <UART_SetConfig+0xeca>
 8005a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a94:	e019      	b.n	8005aca <UART_SetConfig+0xeca>
 8005a96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a9a:	e016      	b.n	8005aca <UART_SetConfig+0xeca>
 8005a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aa0:	e013      	b.n	8005aca <UART_SetConfig+0xeca>
 8005aa2:	f241 5354 	movw	r3, #5460	; 0x1554
 8005aa6:	e010      	b.n	8005aca <UART_SetConfig+0xeca>
 8005aa8:	f641 1398 	movw	r3, #6552	; 0x1998
 8005aac:	e00d      	b.n	8005aca <UART_SetConfig+0xeca>
 8005aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ab2:	e00a      	b.n	8005aca <UART_SetConfig+0xeca>
 8005ab4:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005ab8:	e007      	b.n	8005aca <UART_SetConfig+0xeca>
 8005aba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005abe:	e004      	b.n	8005aca <UART_SetConfig+0xeca>
 8005ac0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ac4:	e001      	b.n	8005aca <UART_SetConfig+0xeca>
 8005ac6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6852      	ldr	r2, [r2, #4]
 8005ace:	0852      	lsrs	r2, r2, #1
 8005ad0:	441a      	add	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ade:	e002      	b.n	8005ae6 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	74fb      	strb	r3, [r7, #19]
        break;
 8005ae4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2b0f      	cmp	r3, #15
 8005aea:	d916      	bls.n	8005b1a <UART_SetConfig+0xf1a>
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af2:	d212      	bcs.n	8005b1a <UART_SetConfig+0xf1a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	f023 030f 	bic.w	r3, r3, #15
 8005afc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	085b      	lsrs	r3, r3, #1
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	f003 0307 	and.w	r3, r3, #7
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	897b      	ldrh	r3, [r7, #10]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	897a      	ldrh	r2, [r7, #10]
 8005b16:	60da      	str	r2, [r3, #12]
 8005b18:	e208      	b.n	8005f2c <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	74fb      	strb	r3, [r7, #19]
 8005b1e:	e205      	b.n	8005f2c <UART_SetConfig+0x132c>
    }
  }
  else
  {
    switch (clocksource)
 8005b20:	7efb      	ldrb	r3, [r7, #27]
 8005b22:	2b08      	cmp	r3, #8
 8005b24:	f200 81f1 	bhi.w	8005f0a <UART_SetConfig+0x130a>
 8005b28:	a201      	add	r2, pc, #4	; (adr r2, 8005b30 <UART_SetConfig+0xf30>)
 8005b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2e:	bf00      	nop
 8005b30:	08005b85 	.word	0x08005b85
 8005b34:	08005c39 	.word	0x08005c39
 8005b38:	08005ced 	.word	0x08005ced
 8005b3c:	08005f0b 	.word	0x08005f0b
 8005b40:	08005d97 	.word	0x08005d97
 8005b44:	08005f0b 	.word	0x08005f0b
 8005b48:	08005f0b 	.word	0x08005f0b
 8005b4c:	08005f0b 	.word	0x08005f0b
 8005b50:	08005e4b 	.word	0x08005e4b
 8005b54:	0001e848 	.word	0x0001e848
 8005b58:	01e84800 	.word	0x01e84800
 8005b5c:	0003d090 	.word	0x0003d090
 8005b60:	0007a120 	.word	0x0007a120
 8005b64:	000f4240 	.word	0x000f4240
 8005b68:	001e8480 	.word	0x001e8480
 8005b6c:	0028b0aa 	.word	0x0028b0aa
 8005b70:	0030d400 	.word	0x0030d400
 8005b74:	003d0900 	.word	0x003d0900
 8005b78:	00516154 	.word	0x00516154
 8005b7c:	007a1200 	.word	0x007a1200
 8005b80:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b84:	f7fd fc04 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d044      	beq.n	8005c1c <UART_SetConfig+0x101c>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d03e      	beq.n	8005c18 <UART_SetConfig+0x1018>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d038      	beq.n	8005c14 <UART_SetConfig+0x1014>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	2b03      	cmp	r3, #3
 8005ba8:	d032      	beq.n	8005c10 <UART_SetConfig+0x1010>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	d02c      	beq.n	8005c0c <UART_SetConfig+0x100c>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	2b05      	cmp	r3, #5
 8005bb8:	d026      	beq.n	8005c08 <UART_SetConfig+0x1008>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	2b06      	cmp	r3, #6
 8005bc0:	d020      	beq.n	8005c04 <UART_SetConfig+0x1004>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	2b07      	cmp	r3, #7
 8005bc8:	d01a      	beq.n	8005c00 <UART_SetConfig+0x1000>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bce:	2b08      	cmp	r3, #8
 8005bd0:	d014      	beq.n	8005bfc <UART_SetConfig+0xffc>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	2b09      	cmp	r3, #9
 8005bd8:	d00e      	beq.n	8005bf8 <UART_SetConfig+0xff8>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	2b0a      	cmp	r3, #10
 8005be0:	d008      	beq.n	8005bf4 <UART_SetConfig+0xff4>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	2b0b      	cmp	r3, #11
 8005be8:	d102      	bne.n	8005bf0 <UART_SetConfig+0xff0>
 8005bea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bee:	e016      	b.n	8005c1e <UART_SetConfig+0x101e>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e014      	b.n	8005c1e <UART_SetConfig+0x101e>
 8005bf4:	2380      	movs	r3, #128	; 0x80
 8005bf6:	e012      	b.n	8005c1e <UART_SetConfig+0x101e>
 8005bf8:	2340      	movs	r3, #64	; 0x40
 8005bfa:	e010      	b.n	8005c1e <UART_SetConfig+0x101e>
 8005bfc:	2320      	movs	r3, #32
 8005bfe:	e00e      	b.n	8005c1e <UART_SetConfig+0x101e>
 8005c00:	2310      	movs	r3, #16
 8005c02:	e00c      	b.n	8005c1e <UART_SetConfig+0x101e>
 8005c04:	230c      	movs	r3, #12
 8005c06:	e00a      	b.n	8005c1e <UART_SetConfig+0x101e>
 8005c08:	230a      	movs	r3, #10
 8005c0a:	e008      	b.n	8005c1e <UART_SetConfig+0x101e>
 8005c0c:	2308      	movs	r3, #8
 8005c0e:	e006      	b.n	8005c1e <UART_SetConfig+0x101e>
 8005c10:	2306      	movs	r3, #6
 8005c12:	e004      	b.n	8005c1e <UART_SetConfig+0x101e>
 8005c14:	2304      	movs	r3, #4
 8005c16:	e002      	b.n	8005c1e <UART_SetConfig+0x101e>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e000      	b.n	8005c1e <UART_SetConfig+0x101e>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	085b      	lsrs	r3, r3, #1
 8005c28:	441a      	add	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c36:	e16b      	b.n	8005f10 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c38:	f7fd fbc0 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d044      	beq.n	8005cd0 <UART_SetConfig+0x10d0>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d03e      	beq.n	8005ccc <UART_SetConfig+0x10cc>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d038      	beq.n	8005cc8 <UART_SetConfig+0x10c8>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d032      	beq.n	8005cc4 <UART_SetConfig+0x10c4>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	d02c      	beq.n	8005cc0 <UART_SetConfig+0x10c0>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	2b05      	cmp	r3, #5
 8005c6c:	d026      	beq.n	8005cbc <UART_SetConfig+0x10bc>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	2b06      	cmp	r3, #6
 8005c74:	d020      	beq.n	8005cb8 <UART_SetConfig+0x10b8>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	2b07      	cmp	r3, #7
 8005c7c:	d01a      	beq.n	8005cb4 <UART_SetConfig+0x10b4>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	2b08      	cmp	r3, #8
 8005c84:	d014      	beq.n	8005cb0 <UART_SetConfig+0x10b0>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	2b09      	cmp	r3, #9
 8005c8c:	d00e      	beq.n	8005cac <UART_SetConfig+0x10ac>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c92:	2b0a      	cmp	r3, #10
 8005c94:	d008      	beq.n	8005ca8 <UART_SetConfig+0x10a8>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	2b0b      	cmp	r3, #11
 8005c9c:	d102      	bne.n	8005ca4 <UART_SetConfig+0x10a4>
 8005c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ca2:	e016      	b.n	8005cd2 <UART_SetConfig+0x10d2>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e014      	b.n	8005cd2 <UART_SetConfig+0x10d2>
 8005ca8:	2380      	movs	r3, #128	; 0x80
 8005caa:	e012      	b.n	8005cd2 <UART_SetConfig+0x10d2>
 8005cac:	2340      	movs	r3, #64	; 0x40
 8005cae:	e010      	b.n	8005cd2 <UART_SetConfig+0x10d2>
 8005cb0:	2320      	movs	r3, #32
 8005cb2:	e00e      	b.n	8005cd2 <UART_SetConfig+0x10d2>
 8005cb4:	2310      	movs	r3, #16
 8005cb6:	e00c      	b.n	8005cd2 <UART_SetConfig+0x10d2>
 8005cb8:	230c      	movs	r3, #12
 8005cba:	e00a      	b.n	8005cd2 <UART_SetConfig+0x10d2>
 8005cbc:	230a      	movs	r3, #10
 8005cbe:	e008      	b.n	8005cd2 <UART_SetConfig+0x10d2>
 8005cc0:	2308      	movs	r3, #8
 8005cc2:	e006      	b.n	8005cd2 <UART_SetConfig+0x10d2>
 8005cc4:	2306      	movs	r3, #6
 8005cc6:	e004      	b.n	8005cd2 <UART_SetConfig+0x10d2>
 8005cc8:	2304      	movs	r3, #4
 8005cca:	e002      	b.n	8005cd2 <UART_SetConfig+0x10d2>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	e000      	b.n	8005cd2 <UART_SetConfig+0x10d2>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	085b      	lsrs	r3, r3, #1
 8005cdc:	441a      	add	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005cea:	e111      	b.n	8005f10 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d044      	beq.n	8005d7e <UART_SetConfig+0x117e>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d03e      	beq.n	8005d7a <UART_SetConfig+0x117a>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d038      	beq.n	8005d76 <UART_SetConfig+0x1176>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	2b03      	cmp	r3, #3
 8005d0a:	d032      	beq.n	8005d72 <UART_SetConfig+0x1172>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	2b04      	cmp	r3, #4
 8005d12:	d02c      	beq.n	8005d6e <UART_SetConfig+0x116e>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	2b05      	cmp	r3, #5
 8005d1a:	d026      	beq.n	8005d6a <UART_SetConfig+0x116a>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	2b06      	cmp	r3, #6
 8005d22:	d020      	beq.n	8005d66 <UART_SetConfig+0x1166>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	2b07      	cmp	r3, #7
 8005d2a:	d01a      	beq.n	8005d62 <UART_SetConfig+0x1162>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	d014      	beq.n	8005d5e <UART_SetConfig+0x115e>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	2b09      	cmp	r3, #9
 8005d3a:	d00e      	beq.n	8005d5a <UART_SetConfig+0x115a>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	2b0a      	cmp	r3, #10
 8005d42:	d008      	beq.n	8005d56 <UART_SetConfig+0x1156>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	2b0b      	cmp	r3, #11
 8005d4a:	d102      	bne.n	8005d52 <UART_SetConfig+0x1152>
 8005d4c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005d50:	e016      	b.n	8005d80 <UART_SetConfig+0x1180>
 8005d52:	4b80      	ldr	r3, [pc, #512]	; (8005f54 <UART_SetConfig+0x1354>)
 8005d54:	e014      	b.n	8005d80 <UART_SetConfig+0x1180>
 8005d56:	4b80      	ldr	r3, [pc, #512]	; (8005f58 <UART_SetConfig+0x1358>)
 8005d58:	e012      	b.n	8005d80 <UART_SetConfig+0x1180>
 8005d5a:	4b80      	ldr	r3, [pc, #512]	; (8005f5c <UART_SetConfig+0x135c>)
 8005d5c:	e010      	b.n	8005d80 <UART_SetConfig+0x1180>
 8005d5e:	4b80      	ldr	r3, [pc, #512]	; (8005f60 <UART_SetConfig+0x1360>)
 8005d60:	e00e      	b.n	8005d80 <UART_SetConfig+0x1180>
 8005d62:	4b80      	ldr	r3, [pc, #512]	; (8005f64 <UART_SetConfig+0x1364>)
 8005d64:	e00c      	b.n	8005d80 <UART_SetConfig+0x1180>
 8005d66:	4b80      	ldr	r3, [pc, #512]	; (8005f68 <UART_SetConfig+0x1368>)
 8005d68:	e00a      	b.n	8005d80 <UART_SetConfig+0x1180>
 8005d6a:	4b80      	ldr	r3, [pc, #512]	; (8005f6c <UART_SetConfig+0x136c>)
 8005d6c:	e008      	b.n	8005d80 <UART_SetConfig+0x1180>
 8005d6e:	4b80      	ldr	r3, [pc, #512]	; (8005f70 <UART_SetConfig+0x1370>)
 8005d70:	e006      	b.n	8005d80 <UART_SetConfig+0x1180>
 8005d72:	4b80      	ldr	r3, [pc, #512]	; (8005f74 <UART_SetConfig+0x1374>)
 8005d74:	e004      	b.n	8005d80 <UART_SetConfig+0x1180>
 8005d76:	4b80      	ldr	r3, [pc, #512]	; (8005f78 <UART_SetConfig+0x1378>)
 8005d78:	e002      	b.n	8005d80 <UART_SetConfig+0x1180>
 8005d7a:	4b80      	ldr	r3, [pc, #512]	; (8005f7c <UART_SetConfig+0x137c>)
 8005d7c:	e000      	b.n	8005d80 <UART_SetConfig+0x1180>
 8005d7e:	4b75      	ldr	r3, [pc, #468]	; (8005f54 <UART_SetConfig+0x1354>)
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6852      	ldr	r2, [r2, #4]
 8005d84:	0852      	lsrs	r2, r2, #1
 8005d86:	441a      	add	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005d94:	e0bc      	b.n	8005f10 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d96:	f7fd fa65 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d044      	beq.n	8005e2e <UART_SetConfig+0x122e>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d03e      	beq.n	8005e2a <UART_SetConfig+0x122a>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d038      	beq.n	8005e26 <UART_SetConfig+0x1226>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	2b03      	cmp	r3, #3
 8005dba:	d032      	beq.n	8005e22 <UART_SetConfig+0x1222>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d02c      	beq.n	8005e1e <UART_SetConfig+0x121e>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	2b05      	cmp	r3, #5
 8005dca:	d026      	beq.n	8005e1a <UART_SetConfig+0x121a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	2b06      	cmp	r3, #6
 8005dd2:	d020      	beq.n	8005e16 <UART_SetConfig+0x1216>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	2b07      	cmp	r3, #7
 8005dda:	d01a      	beq.n	8005e12 <UART_SetConfig+0x1212>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d014      	beq.n	8005e0e <UART_SetConfig+0x120e>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	2b09      	cmp	r3, #9
 8005dea:	d00e      	beq.n	8005e0a <UART_SetConfig+0x120a>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	2b0a      	cmp	r3, #10
 8005df2:	d008      	beq.n	8005e06 <UART_SetConfig+0x1206>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	2b0b      	cmp	r3, #11
 8005dfa:	d102      	bne.n	8005e02 <UART_SetConfig+0x1202>
 8005dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e00:	e016      	b.n	8005e30 <UART_SetConfig+0x1230>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e014      	b.n	8005e30 <UART_SetConfig+0x1230>
 8005e06:	2380      	movs	r3, #128	; 0x80
 8005e08:	e012      	b.n	8005e30 <UART_SetConfig+0x1230>
 8005e0a:	2340      	movs	r3, #64	; 0x40
 8005e0c:	e010      	b.n	8005e30 <UART_SetConfig+0x1230>
 8005e0e:	2320      	movs	r3, #32
 8005e10:	e00e      	b.n	8005e30 <UART_SetConfig+0x1230>
 8005e12:	2310      	movs	r3, #16
 8005e14:	e00c      	b.n	8005e30 <UART_SetConfig+0x1230>
 8005e16:	230c      	movs	r3, #12
 8005e18:	e00a      	b.n	8005e30 <UART_SetConfig+0x1230>
 8005e1a:	230a      	movs	r3, #10
 8005e1c:	e008      	b.n	8005e30 <UART_SetConfig+0x1230>
 8005e1e:	2308      	movs	r3, #8
 8005e20:	e006      	b.n	8005e30 <UART_SetConfig+0x1230>
 8005e22:	2306      	movs	r3, #6
 8005e24:	e004      	b.n	8005e30 <UART_SetConfig+0x1230>
 8005e26:	2304      	movs	r3, #4
 8005e28:	e002      	b.n	8005e30 <UART_SetConfig+0x1230>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e000      	b.n	8005e30 <UART_SetConfig+0x1230>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	085b      	lsrs	r3, r3, #1
 8005e3a:	441a      	add	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e48:	e062      	b.n	8005f10 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d04e      	beq.n	8005ef0 <UART_SetConfig+0x12f0>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d047      	beq.n	8005eea <UART_SetConfig+0x12ea>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d040      	beq.n	8005ee4 <UART_SetConfig+0x12e4>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d039      	beq.n	8005ede <UART_SetConfig+0x12de>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d032      	beq.n	8005ed8 <UART_SetConfig+0x12d8>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e76:	2b05      	cmp	r3, #5
 8005e78:	d02b      	beq.n	8005ed2 <UART_SetConfig+0x12d2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	2b06      	cmp	r3, #6
 8005e80:	d024      	beq.n	8005ecc <UART_SetConfig+0x12cc>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	2b07      	cmp	r3, #7
 8005e88:	d01d      	beq.n	8005ec6 <UART_SetConfig+0x12c6>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	2b08      	cmp	r3, #8
 8005e90:	d016      	beq.n	8005ec0 <UART_SetConfig+0x12c0>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	2b09      	cmp	r3, #9
 8005e98:	d00f      	beq.n	8005eba <UART_SetConfig+0x12ba>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	2b0a      	cmp	r3, #10
 8005ea0:	d008      	beq.n	8005eb4 <UART_SetConfig+0x12b4>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	2b0b      	cmp	r3, #11
 8005ea8:	d101      	bne.n	8005eae <UART_SetConfig+0x12ae>
 8005eaa:	2380      	movs	r3, #128	; 0x80
 8005eac:	e022      	b.n	8005ef4 <UART_SetConfig+0x12f4>
 8005eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eb2:	e01f      	b.n	8005ef4 <UART_SetConfig+0x12f4>
 8005eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005eb8:	e01c      	b.n	8005ef4 <UART_SetConfig+0x12f4>
 8005eba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ebe:	e019      	b.n	8005ef4 <UART_SetConfig+0x12f4>
 8005ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ec4:	e016      	b.n	8005ef4 <UART_SetConfig+0x12f4>
 8005ec6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005eca:	e013      	b.n	8005ef4 <UART_SetConfig+0x12f4>
 8005ecc:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005ed0:	e010      	b.n	8005ef4 <UART_SetConfig+0x12f4>
 8005ed2:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005ed6:	e00d      	b.n	8005ef4 <UART_SetConfig+0x12f4>
 8005ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005edc:	e00a      	b.n	8005ef4 <UART_SetConfig+0x12f4>
 8005ede:	f241 5355 	movw	r3, #5461	; 0x1555
 8005ee2:	e007      	b.n	8005ef4 <UART_SetConfig+0x12f4>
 8005ee4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ee8:	e004      	b.n	8005ef4 <UART_SetConfig+0x12f4>
 8005eea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005eee:	e001      	b.n	8005ef4 <UART_SetConfig+0x12f4>
 8005ef0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6852      	ldr	r2, [r2, #4]
 8005ef8:	0852      	lsrs	r2, r2, #1
 8005efa:	441a      	add	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f08:	e002      	b.n	8005f10 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	74fb      	strb	r3, [r7, #19]
        break;
 8005f0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2b0f      	cmp	r3, #15
 8005f14:	d908      	bls.n	8005f28 <UART_SetConfig+0x1328>
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f1c:	d204      	bcs.n	8005f28 <UART_SetConfig+0x1328>
    {
      huart->Instance->BRR = usartdiv;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	60da      	str	r2, [r3, #12]
 8005f26:	e001      	b.n	8005f2c <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	74fb      	strb	r3, [r7, #19]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005f48:	7cfb      	ldrb	r3, [r7, #19]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3720      	adds	r7, #32
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005f54:	00f42400 	.word	0x00f42400
 8005f58:	0001e848 	.word	0x0001e848
 8005f5c:	0003d090 	.word	0x0003d090
 8005f60:	0007a120 	.word	0x0007a120
 8005f64:	000f4240 	.word	0x000f4240
 8005f68:	00145855 	.word	0x00145855
 8005f6c:	00186a00 	.word	0x00186a00
 8005f70:	001e8480 	.word	0x001e8480
 8005f74:	0028b0aa 	.word	0x0028b0aa
 8005f78:	003d0900 	.word	0x003d0900
 8005f7c:	007a1200 	.word	0x007a1200

08005f80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00a      	beq.n	8005faa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00a      	beq.n	8005fcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00a      	beq.n	8005fee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff2:	f003 0308 	and.w	r3, r3, #8
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006036:	f003 0320 	and.w	r3, r3, #32
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605c:	2b00      	cmp	r3, #0
 800605e:	d01a      	beq.n	8006096 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800607e:	d10a      	bne.n	8006096 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00a      	beq.n	80060b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	605a      	str	r2, [r3, #4]
  }
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af02      	add	r7, sp, #8
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80060d4:	f7fb fe1c 	bl	8001d10 <HAL_GetTick>
 80060d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0308 	and.w	r3, r3, #8
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	d10e      	bne.n	8006106 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f82c 	bl	8006154 <UART_WaitOnFlagUntilTimeout>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e022      	b.n	800614c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0304 	and.w	r3, r3, #4
 8006110:	2b04      	cmp	r3, #4
 8006112:	d10e      	bne.n	8006132 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006114:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f816 	bl	8006154 <UART_WaitOnFlagUntilTimeout>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e00c      	b.n	800614c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2220      	movs	r2, #32
 8006136:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2220      	movs	r2, #32
 800613e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	603b      	str	r3, [r7, #0]
 8006160:	4613      	mov	r3, r2
 8006162:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006164:	e02c      	b.n	80061c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616c:	d028      	beq.n	80061c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800616e:	f7fb fdcf 	bl	8001d10 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	429a      	cmp	r2, r3
 800617c:	d302      	bcc.n	8006184 <UART_WaitOnFlagUntilTimeout+0x30>
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d11d      	bne.n	80061c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006192:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689a      	ldr	r2, [r3, #8]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0201 	bic.w	r2, r2, #1
 80061a2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2220      	movs	r2, #32
 80061a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2220      	movs	r2, #32
 80061b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e00f      	b.n	80061e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	69da      	ldr	r2, [r3, #28]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	4013      	ands	r3, r2
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	bf0c      	ite	eq
 80061d0:	2301      	moveq	r3, #1
 80061d2:	2300      	movne	r3, #0
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	461a      	mov	r2, r3
 80061d8:	79fb      	ldrb	r3, [r7, #7]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d0c3      	beq.n	8006166 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <__errno>:
 80061e8:	4b01      	ldr	r3, [pc, #4]	; (80061f0 <__errno+0x8>)
 80061ea:	6818      	ldr	r0, [r3, #0]
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	20000014 	.word	0x20000014

080061f4 <__libc_init_array>:
 80061f4:	b570      	push	{r4, r5, r6, lr}
 80061f6:	4e0d      	ldr	r6, [pc, #52]	; (800622c <__libc_init_array+0x38>)
 80061f8:	4c0d      	ldr	r4, [pc, #52]	; (8006230 <__libc_init_array+0x3c>)
 80061fa:	1ba4      	subs	r4, r4, r6
 80061fc:	10a4      	asrs	r4, r4, #2
 80061fe:	2500      	movs	r5, #0
 8006200:	42a5      	cmp	r5, r4
 8006202:	d109      	bne.n	8006218 <__libc_init_array+0x24>
 8006204:	4e0b      	ldr	r6, [pc, #44]	; (8006234 <__libc_init_array+0x40>)
 8006206:	4c0c      	ldr	r4, [pc, #48]	; (8006238 <__libc_init_array+0x44>)
 8006208:	f000 ff68 	bl	80070dc <_init>
 800620c:	1ba4      	subs	r4, r4, r6
 800620e:	10a4      	asrs	r4, r4, #2
 8006210:	2500      	movs	r5, #0
 8006212:	42a5      	cmp	r5, r4
 8006214:	d105      	bne.n	8006222 <__libc_init_array+0x2e>
 8006216:	bd70      	pop	{r4, r5, r6, pc}
 8006218:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800621c:	4798      	blx	r3
 800621e:	3501      	adds	r5, #1
 8006220:	e7ee      	b.n	8006200 <__libc_init_array+0xc>
 8006222:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006226:	4798      	blx	r3
 8006228:	3501      	adds	r5, #1
 800622a:	e7f2      	b.n	8006212 <__libc_init_array+0x1e>
 800622c:	08081ad8 	.word	0x08081ad8
 8006230:	08081ad8 	.word	0x08081ad8
 8006234:	08081ad8 	.word	0x08081ad8
 8006238:	08081adc 	.word	0x08081adc

0800623c <memset>:
 800623c:	4402      	add	r2, r0
 800623e:	4603      	mov	r3, r0
 8006240:	4293      	cmp	r3, r2
 8006242:	d100      	bne.n	8006246 <memset+0xa>
 8006244:	4770      	bx	lr
 8006246:	f803 1b01 	strb.w	r1, [r3], #1
 800624a:	e7f9      	b.n	8006240 <memset+0x4>

0800624c <iprintf>:
 800624c:	b40f      	push	{r0, r1, r2, r3}
 800624e:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <iprintf+0x2c>)
 8006250:	b513      	push	{r0, r1, r4, lr}
 8006252:	681c      	ldr	r4, [r3, #0]
 8006254:	b124      	cbz	r4, 8006260 <iprintf+0x14>
 8006256:	69a3      	ldr	r3, [r4, #24]
 8006258:	b913      	cbnz	r3, 8006260 <iprintf+0x14>
 800625a:	4620      	mov	r0, r4
 800625c:	f000 fa22 	bl	80066a4 <__sinit>
 8006260:	ab05      	add	r3, sp, #20
 8006262:	9a04      	ldr	r2, [sp, #16]
 8006264:	68a1      	ldr	r1, [r4, #8]
 8006266:	9301      	str	r3, [sp, #4]
 8006268:	4620      	mov	r0, r4
 800626a:	f000 fbdb 	bl	8006a24 <_vfiprintf_r>
 800626e:	b002      	add	sp, #8
 8006270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006274:	b004      	add	sp, #16
 8006276:	4770      	bx	lr
 8006278:	20000014 	.word	0x20000014

0800627c <_puts_r>:
 800627c:	b570      	push	{r4, r5, r6, lr}
 800627e:	460e      	mov	r6, r1
 8006280:	4605      	mov	r5, r0
 8006282:	b118      	cbz	r0, 800628c <_puts_r+0x10>
 8006284:	6983      	ldr	r3, [r0, #24]
 8006286:	b90b      	cbnz	r3, 800628c <_puts_r+0x10>
 8006288:	f000 fa0c 	bl	80066a4 <__sinit>
 800628c:	69ab      	ldr	r3, [r5, #24]
 800628e:	68ac      	ldr	r4, [r5, #8]
 8006290:	b913      	cbnz	r3, 8006298 <_puts_r+0x1c>
 8006292:	4628      	mov	r0, r5
 8006294:	f000 fa06 	bl	80066a4 <__sinit>
 8006298:	4b23      	ldr	r3, [pc, #140]	; (8006328 <_puts_r+0xac>)
 800629a:	429c      	cmp	r4, r3
 800629c:	d117      	bne.n	80062ce <_puts_r+0x52>
 800629e:	686c      	ldr	r4, [r5, #4]
 80062a0:	89a3      	ldrh	r3, [r4, #12]
 80062a2:	071b      	lsls	r3, r3, #28
 80062a4:	d51d      	bpl.n	80062e2 <_puts_r+0x66>
 80062a6:	6923      	ldr	r3, [r4, #16]
 80062a8:	b1db      	cbz	r3, 80062e2 <_puts_r+0x66>
 80062aa:	3e01      	subs	r6, #1
 80062ac:	68a3      	ldr	r3, [r4, #8]
 80062ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80062b2:	3b01      	subs	r3, #1
 80062b4:	60a3      	str	r3, [r4, #8]
 80062b6:	b9e9      	cbnz	r1, 80062f4 <_puts_r+0x78>
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	da2e      	bge.n	800631a <_puts_r+0x9e>
 80062bc:	4622      	mov	r2, r4
 80062be:	210a      	movs	r1, #10
 80062c0:	4628      	mov	r0, r5
 80062c2:	f000 f83f 	bl	8006344 <__swbuf_r>
 80062c6:	3001      	adds	r0, #1
 80062c8:	d011      	beq.n	80062ee <_puts_r+0x72>
 80062ca:	200a      	movs	r0, #10
 80062cc:	e011      	b.n	80062f2 <_puts_r+0x76>
 80062ce:	4b17      	ldr	r3, [pc, #92]	; (800632c <_puts_r+0xb0>)
 80062d0:	429c      	cmp	r4, r3
 80062d2:	d101      	bne.n	80062d8 <_puts_r+0x5c>
 80062d4:	68ac      	ldr	r4, [r5, #8]
 80062d6:	e7e3      	b.n	80062a0 <_puts_r+0x24>
 80062d8:	4b15      	ldr	r3, [pc, #84]	; (8006330 <_puts_r+0xb4>)
 80062da:	429c      	cmp	r4, r3
 80062dc:	bf08      	it	eq
 80062de:	68ec      	ldreq	r4, [r5, #12]
 80062e0:	e7de      	b.n	80062a0 <_puts_r+0x24>
 80062e2:	4621      	mov	r1, r4
 80062e4:	4628      	mov	r0, r5
 80062e6:	f000 f87f 	bl	80063e8 <__swsetup_r>
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d0dd      	beq.n	80062aa <_puts_r+0x2e>
 80062ee:	f04f 30ff 	mov.w	r0, #4294967295
 80062f2:	bd70      	pop	{r4, r5, r6, pc}
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	da04      	bge.n	8006302 <_puts_r+0x86>
 80062f8:	69a2      	ldr	r2, [r4, #24]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	dc06      	bgt.n	800630c <_puts_r+0x90>
 80062fe:	290a      	cmp	r1, #10
 8006300:	d004      	beq.n	800630c <_puts_r+0x90>
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	6022      	str	r2, [r4, #0]
 8006308:	7019      	strb	r1, [r3, #0]
 800630a:	e7cf      	b.n	80062ac <_puts_r+0x30>
 800630c:	4622      	mov	r2, r4
 800630e:	4628      	mov	r0, r5
 8006310:	f000 f818 	bl	8006344 <__swbuf_r>
 8006314:	3001      	adds	r0, #1
 8006316:	d1c9      	bne.n	80062ac <_puts_r+0x30>
 8006318:	e7e9      	b.n	80062ee <_puts_r+0x72>
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	200a      	movs	r0, #10
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	6022      	str	r2, [r4, #0]
 8006322:	7018      	strb	r0, [r3, #0]
 8006324:	e7e5      	b.n	80062f2 <_puts_r+0x76>
 8006326:	bf00      	nop
 8006328:	08081a5c 	.word	0x08081a5c
 800632c:	08081a7c 	.word	0x08081a7c
 8006330:	08081a3c 	.word	0x08081a3c

08006334 <puts>:
 8006334:	4b02      	ldr	r3, [pc, #8]	; (8006340 <puts+0xc>)
 8006336:	4601      	mov	r1, r0
 8006338:	6818      	ldr	r0, [r3, #0]
 800633a:	f7ff bf9f 	b.w	800627c <_puts_r>
 800633e:	bf00      	nop
 8006340:	20000014 	.word	0x20000014

08006344 <__swbuf_r>:
 8006344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006346:	460e      	mov	r6, r1
 8006348:	4614      	mov	r4, r2
 800634a:	4605      	mov	r5, r0
 800634c:	b118      	cbz	r0, 8006356 <__swbuf_r+0x12>
 800634e:	6983      	ldr	r3, [r0, #24]
 8006350:	b90b      	cbnz	r3, 8006356 <__swbuf_r+0x12>
 8006352:	f000 f9a7 	bl	80066a4 <__sinit>
 8006356:	4b21      	ldr	r3, [pc, #132]	; (80063dc <__swbuf_r+0x98>)
 8006358:	429c      	cmp	r4, r3
 800635a:	d12a      	bne.n	80063b2 <__swbuf_r+0x6e>
 800635c:	686c      	ldr	r4, [r5, #4]
 800635e:	69a3      	ldr	r3, [r4, #24]
 8006360:	60a3      	str	r3, [r4, #8]
 8006362:	89a3      	ldrh	r3, [r4, #12]
 8006364:	071a      	lsls	r2, r3, #28
 8006366:	d52e      	bpl.n	80063c6 <__swbuf_r+0x82>
 8006368:	6923      	ldr	r3, [r4, #16]
 800636a:	b363      	cbz	r3, 80063c6 <__swbuf_r+0x82>
 800636c:	6923      	ldr	r3, [r4, #16]
 800636e:	6820      	ldr	r0, [r4, #0]
 8006370:	1ac0      	subs	r0, r0, r3
 8006372:	6963      	ldr	r3, [r4, #20]
 8006374:	b2f6      	uxtb	r6, r6
 8006376:	4283      	cmp	r3, r0
 8006378:	4637      	mov	r7, r6
 800637a:	dc04      	bgt.n	8006386 <__swbuf_r+0x42>
 800637c:	4621      	mov	r1, r4
 800637e:	4628      	mov	r0, r5
 8006380:	f000 f926 	bl	80065d0 <_fflush_r>
 8006384:	bb28      	cbnz	r0, 80063d2 <__swbuf_r+0x8e>
 8006386:	68a3      	ldr	r3, [r4, #8]
 8006388:	3b01      	subs	r3, #1
 800638a:	60a3      	str	r3, [r4, #8]
 800638c:	6823      	ldr	r3, [r4, #0]
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	6022      	str	r2, [r4, #0]
 8006392:	701e      	strb	r6, [r3, #0]
 8006394:	6963      	ldr	r3, [r4, #20]
 8006396:	3001      	adds	r0, #1
 8006398:	4283      	cmp	r3, r0
 800639a:	d004      	beq.n	80063a6 <__swbuf_r+0x62>
 800639c:	89a3      	ldrh	r3, [r4, #12]
 800639e:	07db      	lsls	r3, r3, #31
 80063a0:	d519      	bpl.n	80063d6 <__swbuf_r+0x92>
 80063a2:	2e0a      	cmp	r6, #10
 80063a4:	d117      	bne.n	80063d6 <__swbuf_r+0x92>
 80063a6:	4621      	mov	r1, r4
 80063a8:	4628      	mov	r0, r5
 80063aa:	f000 f911 	bl	80065d0 <_fflush_r>
 80063ae:	b190      	cbz	r0, 80063d6 <__swbuf_r+0x92>
 80063b0:	e00f      	b.n	80063d2 <__swbuf_r+0x8e>
 80063b2:	4b0b      	ldr	r3, [pc, #44]	; (80063e0 <__swbuf_r+0x9c>)
 80063b4:	429c      	cmp	r4, r3
 80063b6:	d101      	bne.n	80063bc <__swbuf_r+0x78>
 80063b8:	68ac      	ldr	r4, [r5, #8]
 80063ba:	e7d0      	b.n	800635e <__swbuf_r+0x1a>
 80063bc:	4b09      	ldr	r3, [pc, #36]	; (80063e4 <__swbuf_r+0xa0>)
 80063be:	429c      	cmp	r4, r3
 80063c0:	bf08      	it	eq
 80063c2:	68ec      	ldreq	r4, [r5, #12]
 80063c4:	e7cb      	b.n	800635e <__swbuf_r+0x1a>
 80063c6:	4621      	mov	r1, r4
 80063c8:	4628      	mov	r0, r5
 80063ca:	f000 f80d 	bl	80063e8 <__swsetup_r>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	d0cc      	beq.n	800636c <__swbuf_r+0x28>
 80063d2:	f04f 37ff 	mov.w	r7, #4294967295
 80063d6:	4638      	mov	r0, r7
 80063d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063da:	bf00      	nop
 80063dc:	08081a5c 	.word	0x08081a5c
 80063e0:	08081a7c 	.word	0x08081a7c
 80063e4:	08081a3c 	.word	0x08081a3c

080063e8 <__swsetup_r>:
 80063e8:	4b32      	ldr	r3, [pc, #200]	; (80064b4 <__swsetup_r+0xcc>)
 80063ea:	b570      	push	{r4, r5, r6, lr}
 80063ec:	681d      	ldr	r5, [r3, #0]
 80063ee:	4606      	mov	r6, r0
 80063f0:	460c      	mov	r4, r1
 80063f2:	b125      	cbz	r5, 80063fe <__swsetup_r+0x16>
 80063f4:	69ab      	ldr	r3, [r5, #24]
 80063f6:	b913      	cbnz	r3, 80063fe <__swsetup_r+0x16>
 80063f8:	4628      	mov	r0, r5
 80063fa:	f000 f953 	bl	80066a4 <__sinit>
 80063fe:	4b2e      	ldr	r3, [pc, #184]	; (80064b8 <__swsetup_r+0xd0>)
 8006400:	429c      	cmp	r4, r3
 8006402:	d10f      	bne.n	8006424 <__swsetup_r+0x3c>
 8006404:	686c      	ldr	r4, [r5, #4]
 8006406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800640a:	b29a      	uxth	r2, r3
 800640c:	0715      	lsls	r5, r2, #28
 800640e:	d42c      	bmi.n	800646a <__swsetup_r+0x82>
 8006410:	06d0      	lsls	r0, r2, #27
 8006412:	d411      	bmi.n	8006438 <__swsetup_r+0x50>
 8006414:	2209      	movs	r2, #9
 8006416:	6032      	str	r2, [r6, #0]
 8006418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800641c:	81a3      	strh	r3, [r4, #12]
 800641e:	f04f 30ff 	mov.w	r0, #4294967295
 8006422:	e03e      	b.n	80064a2 <__swsetup_r+0xba>
 8006424:	4b25      	ldr	r3, [pc, #148]	; (80064bc <__swsetup_r+0xd4>)
 8006426:	429c      	cmp	r4, r3
 8006428:	d101      	bne.n	800642e <__swsetup_r+0x46>
 800642a:	68ac      	ldr	r4, [r5, #8]
 800642c:	e7eb      	b.n	8006406 <__swsetup_r+0x1e>
 800642e:	4b24      	ldr	r3, [pc, #144]	; (80064c0 <__swsetup_r+0xd8>)
 8006430:	429c      	cmp	r4, r3
 8006432:	bf08      	it	eq
 8006434:	68ec      	ldreq	r4, [r5, #12]
 8006436:	e7e6      	b.n	8006406 <__swsetup_r+0x1e>
 8006438:	0751      	lsls	r1, r2, #29
 800643a:	d512      	bpl.n	8006462 <__swsetup_r+0x7a>
 800643c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800643e:	b141      	cbz	r1, 8006452 <__swsetup_r+0x6a>
 8006440:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006444:	4299      	cmp	r1, r3
 8006446:	d002      	beq.n	800644e <__swsetup_r+0x66>
 8006448:	4630      	mov	r0, r6
 800644a:	f000 fa19 	bl	8006880 <_free_r>
 800644e:	2300      	movs	r3, #0
 8006450:	6363      	str	r3, [r4, #52]	; 0x34
 8006452:	89a3      	ldrh	r3, [r4, #12]
 8006454:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006458:	81a3      	strh	r3, [r4, #12]
 800645a:	2300      	movs	r3, #0
 800645c:	6063      	str	r3, [r4, #4]
 800645e:	6923      	ldr	r3, [r4, #16]
 8006460:	6023      	str	r3, [r4, #0]
 8006462:	89a3      	ldrh	r3, [r4, #12]
 8006464:	f043 0308 	orr.w	r3, r3, #8
 8006468:	81a3      	strh	r3, [r4, #12]
 800646a:	6923      	ldr	r3, [r4, #16]
 800646c:	b94b      	cbnz	r3, 8006482 <__swsetup_r+0x9a>
 800646e:	89a3      	ldrh	r3, [r4, #12]
 8006470:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006478:	d003      	beq.n	8006482 <__swsetup_r+0x9a>
 800647a:	4621      	mov	r1, r4
 800647c:	4630      	mov	r0, r6
 800647e:	f000 f9bf 	bl	8006800 <__smakebuf_r>
 8006482:	89a2      	ldrh	r2, [r4, #12]
 8006484:	f012 0301 	ands.w	r3, r2, #1
 8006488:	d00c      	beq.n	80064a4 <__swsetup_r+0xbc>
 800648a:	2300      	movs	r3, #0
 800648c:	60a3      	str	r3, [r4, #8]
 800648e:	6963      	ldr	r3, [r4, #20]
 8006490:	425b      	negs	r3, r3
 8006492:	61a3      	str	r3, [r4, #24]
 8006494:	6923      	ldr	r3, [r4, #16]
 8006496:	b953      	cbnz	r3, 80064ae <__swsetup_r+0xc6>
 8006498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800649c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80064a0:	d1ba      	bne.n	8006418 <__swsetup_r+0x30>
 80064a2:	bd70      	pop	{r4, r5, r6, pc}
 80064a4:	0792      	lsls	r2, r2, #30
 80064a6:	bf58      	it	pl
 80064a8:	6963      	ldrpl	r3, [r4, #20]
 80064aa:	60a3      	str	r3, [r4, #8]
 80064ac:	e7f2      	b.n	8006494 <__swsetup_r+0xac>
 80064ae:	2000      	movs	r0, #0
 80064b0:	e7f7      	b.n	80064a2 <__swsetup_r+0xba>
 80064b2:	bf00      	nop
 80064b4:	20000014 	.word	0x20000014
 80064b8:	08081a5c 	.word	0x08081a5c
 80064bc:	08081a7c 	.word	0x08081a7c
 80064c0:	08081a3c 	.word	0x08081a3c

080064c4 <__sflush_r>:
 80064c4:	898a      	ldrh	r2, [r1, #12]
 80064c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ca:	4605      	mov	r5, r0
 80064cc:	0710      	lsls	r0, r2, #28
 80064ce:	460c      	mov	r4, r1
 80064d0:	d458      	bmi.n	8006584 <__sflush_r+0xc0>
 80064d2:	684b      	ldr	r3, [r1, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	dc05      	bgt.n	80064e4 <__sflush_r+0x20>
 80064d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80064da:	2b00      	cmp	r3, #0
 80064dc:	dc02      	bgt.n	80064e4 <__sflush_r+0x20>
 80064de:	2000      	movs	r0, #0
 80064e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064e6:	2e00      	cmp	r6, #0
 80064e8:	d0f9      	beq.n	80064de <__sflush_r+0x1a>
 80064ea:	2300      	movs	r3, #0
 80064ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064f0:	682f      	ldr	r7, [r5, #0]
 80064f2:	6a21      	ldr	r1, [r4, #32]
 80064f4:	602b      	str	r3, [r5, #0]
 80064f6:	d032      	beq.n	800655e <__sflush_r+0x9a>
 80064f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064fa:	89a3      	ldrh	r3, [r4, #12]
 80064fc:	075a      	lsls	r2, r3, #29
 80064fe:	d505      	bpl.n	800650c <__sflush_r+0x48>
 8006500:	6863      	ldr	r3, [r4, #4]
 8006502:	1ac0      	subs	r0, r0, r3
 8006504:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006506:	b10b      	cbz	r3, 800650c <__sflush_r+0x48>
 8006508:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800650a:	1ac0      	subs	r0, r0, r3
 800650c:	2300      	movs	r3, #0
 800650e:	4602      	mov	r2, r0
 8006510:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006512:	6a21      	ldr	r1, [r4, #32]
 8006514:	4628      	mov	r0, r5
 8006516:	47b0      	blx	r6
 8006518:	1c43      	adds	r3, r0, #1
 800651a:	89a3      	ldrh	r3, [r4, #12]
 800651c:	d106      	bne.n	800652c <__sflush_r+0x68>
 800651e:	6829      	ldr	r1, [r5, #0]
 8006520:	291d      	cmp	r1, #29
 8006522:	d848      	bhi.n	80065b6 <__sflush_r+0xf2>
 8006524:	4a29      	ldr	r2, [pc, #164]	; (80065cc <__sflush_r+0x108>)
 8006526:	40ca      	lsrs	r2, r1
 8006528:	07d6      	lsls	r6, r2, #31
 800652a:	d544      	bpl.n	80065b6 <__sflush_r+0xf2>
 800652c:	2200      	movs	r2, #0
 800652e:	6062      	str	r2, [r4, #4]
 8006530:	04d9      	lsls	r1, r3, #19
 8006532:	6922      	ldr	r2, [r4, #16]
 8006534:	6022      	str	r2, [r4, #0]
 8006536:	d504      	bpl.n	8006542 <__sflush_r+0x7e>
 8006538:	1c42      	adds	r2, r0, #1
 800653a:	d101      	bne.n	8006540 <__sflush_r+0x7c>
 800653c:	682b      	ldr	r3, [r5, #0]
 800653e:	b903      	cbnz	r3, 8006542 <__sflush_r+0x7e>
 8006540:	6560      	str	r0, [r4, #84]	; 0x54
 8006542:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006544:	602f      	str	r7, [r5, #0]
 8006546:	2900      	cmp	r1, #0
 8006548:	d0c9      	beq.n	80064de <__sflush_r+0x1a>
 800654a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800654e:	4299      	cmp	r1, r3
 8006550:	d002      	beq.n	8006558 <__sflush_r+0x94>
 8006552:	4628      	mov	r0, r5
 8006554:	f000 f994 	bl	8006880 <_free_r>
 8006558:	2000      	movs	r0, #0
 800655a:	6360      	str	r0, [r4, #52]	; 0x34
 800655c:	e7c0      	b.n	80064e0 <__sflush_r+0x1c>
 800655e:	2301      	movs	r3, #1
 8006560:	4628      	mov	r0, r5
 8006562:	47b0      	blx	r6
 8006564:	1c41      	adds	r1, r0, #1
 8006566:	d1c8      	bne.n	80064fa <__sflush_r+0x36>
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d0c5      	beq.n	80064fa <__sflush_r+0x36>
 800656e:	2b1d      	cmp	r3, #29
 8006570:	d001      	beq.n	8006576 <__sflush_r+0xb2>
 8006572:	2b16      	cmp	r3, #22
 8006574:	d101      	bne.n	800657a <__sflush_r+0xb6>
 8006576:	602f      	str	r7, [r5, #0]
 8006578:	e7b1      	b.n	80064de <__sflush_r+0x1a>
 800657a:	89a3      	ldrh	r3, [r4, #12]
 800657c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006580:	81a3      	strh	r3, [r4, #12]
 8006582:	e7ad      	b.n	80064e0 <__sflush_r+0x1c>
 8006584:	690f      	ldr	r7, [r1, #16]
 8006586:	2f00      	cmp	r7, #0
 8006588:	d0a9      	beq.n	80064de <__sflush_r+0x1a>
 800658a:	0793      	lsls	r3, r2, #30
 800658c:	680e      	ldr	r6, [r1, #0]
 800658e:	bf08      	it	eq
 8006590:	694b      	ldreq	r3, [r1, #20]
 8006592:	600f      	str	r7, [r1, #0]
 8006594:	bf18      	it	ne
 8006596:	2300      	movne	r3, #0
 8006598:	eba6 0807 	sub.w	r8, r6, r7
 800659c:	608b      	str	r3, [r1, #8]
 800659e:	f1b8 0f00 	cmp.w	r8, #0
 80065a2:	dd9c      	ble.n	80064de <__sflush_r+0x1a>
 80065a4:	4643      	mov	r3, r8
 80065a6:	463a      	mov	r2, r7
 80065a8:	6a21      	ldr	r1, [r4, #32]
 80065aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80065ac:	4628      	mov	r0, r5
 80065ae:	47b0      	blx	r6
 80065b0:	2800      	cmp	r0, #0
 80065b2:	dc06      	bgt.n	80065c2 <__sflush_r+0xfe>
 80065b4:	89a3      	ldrh	r3, [r4, #12]
 80065b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065ba:	81a3      	strh	r3, [r4, #12]
 80065bc:	f04f 30ff 	mov.w	r0, #4294967295
 80065c0:	e78e      	b.n	80064e0 <__sflush_r+0x1c>
 80065c2:	4407      	add	r7, r0
 80065c4:	eba8 0800 	sub.w	r8, r8, r0
 80065c8:	e7e9      	b.n	800659e <__sflush_r+0xda>
 80065ca:	bf00      	nop
 80065cc:	20400001 	.word	0x20400001

080065d0 <_fflush_r>:
 80065d0:	b538      	push	{r3, r4, r5, lr}
 80065d2:	690b      	ldr	r3, [r1, #16]
 80065d4:	4605      	mov	r5, r0
 80065d6:	460c      	mov	r4, r1
 80065d8:	b1db      	cbz	r3, 8006612 <_fflush_r+0x42>
 80065da:	b118      	cbz	r0, 80065e4 <_fflush_r+0x14>
 80065dc:	6983      	ldr	r3, [r0, #24]
 80065de:	b90b      	cbnz	r3, 80065e4 <_fflush_r+0x14>
 80065e0:	f000 f860 	bl	80066a4 <__sinit>
 80065e4:	4b0c      	ldr	r3, [pc, #48]	; (8006618 <_fflush_r+0x48>)
 80065e6:	429c      	cmp	r4, r3
 80065e8:	d109      	bne.n	80065fe <_fflush_r+0x2e>
 80065ea:	686c      	ldr	r4, [r5, #4]
 80065ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065f0:	b17b      	cbz	r3, 8006612 <_fflush_r+0x42>
 80065f2:	4621      	mov	r1, r4
 80065f4:	4628      	mov	r0, r5
 80065f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065fa:	f7ff bf63 	b.w	80064c4 <__sflush_r>
 80065fe:	4b07      	ldr	r3, [pc, #28]	; (800661c <_fflush_r+0x4c>)
 8006600:	429c      	cmp	r4, r3
 8006602:	d101      	bne.n	8006608 <_fflush_r+0x38>
 8006604:	68ac      	ldr	r4, [r5, #8]
 8006606:	e7f1      	b.n	80065ec <_fflush_r+0x1c>
 8006608:	4b05      	ldr	r3, [pc, #20]	; (8006620 <_fflush_r+0x50>)
 800660a:	429c      	cmp	r4, r3
 800660c:	bf08      	it	eq
 800660e:	68ec      	ldreq	r4, [r5, #12]
 8006610:	e7ec      	b.n	80065ec <_fflush_r+0x1c>
 8006612:	2000      	movs	r0, #0
 8006614:	bd38      	pop	{r3, r4, r5, pc}
 8006616:	bf00      	nop
 8006618:	08081a5c 	.word	0x08081a5c
 800661c:	08081a7c 	.word	0x08081a7c
 8006620:	08081a3c 	.word	0x08081a3c

08006624 <std>:
 8006624:	2300      	movs	r3, #0
 8006626:	b510      	push	{r4, lr}
 8006628:	4604      	mov	r4, r0
 800662a:	e9c0 3300 	strd	r3, r3, [r0]
 800662e:	6083      	str	r3, [r0, #8]
 8006630:	8181      	strh	r1, [r0, #12]
 8006632:	6643      	str	r3, [r0, #100]	; 0x64
 8006634:	81c2      	strh	r2, [r0, #14]
 8006636:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800663a:	6183      	str	r3, [r0, #24]
 800663c:	4619      	mov	r1, r3
 800663e:	2208      	movs	r2, #8
 8006640:	305c      	adds	r0, #92	; 0x5c
 8006642:	f7ff fdfb 	bl	800623c <memset>
 8006646:	4b05      	ldr	r3, [pc, #20]	; (800665c <std+0x38>)
 8006648:	6263      	str	r3, [r4, #36]	; 0x24
 800664a:	4b05      	ldr	r3, [pc, #20]	; (8006660 <std+0x3c>)
 800664c:	62a3      	str	r3, [r4, #40]	; 0x28
 800664e:	4b05      	ldr	r3, [pc, #20]	; (8006664 <std+0x40>)
 8006650:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006652:	4b05      	ldr	r3, [pc, #20]	; (8006668 <std+0x44>)
 8006654:	6224      	str	r4, [r4, #32]
 8006656:	6323      	str	r3, [r4, #48]	; 0x30
 8006658:	bd10      	pop	{r4, pc}
 800665a:	bf00      	nop
 800665c:	08006f81 	.word	0x08006f81
 8006660:	08006fa3 	.word	0x08006fa3
 8006664:	08006fdb 	.word	0x08006fdb
 8006668:	08006fff 	.word	0x08006fff

0800666c <_cleanup_r>:
 800666c:	4901      	ldr	r1, [pc, #4]	; (8006674 <_cleanup_r+0x8>)
 800666e:	f000 b885 	b.w	800677c <_fwalk_reent>
 8006672:	bf00      	nop
 8006674:	080065d1 	.word	0x080065d1

08006678 <__sfmoreglue>:
 8006678:	b570      	push	{r4, r5, r6, lr}
 800667a:	1e4a      	subs	r2, r1, #1
 800667c:	2568      	movs	r5, #104	; 0x68
 800667e:	4355      	muls	r5, r2
 8006680:	460e      	mov	r6, r1
 8006682:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006686:	f000 f949 	bl	800691c <_malloc_r>
 800668a:	4604      	mov	r4, r0
 800668c:	b140      	cbz	r0, 80066a0 <__sfmoreglue+0x28>
 800668e:	2100      	movs	r1, #0
 8006690:	e9c0 1600 	strd	r1, r6, [r0]
 8006694:	300c      	adds	r0, #12
 8006696:	60a0      	str	r0, [r4, #8]
 8006698:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800669c:	f7ff fdce 	bl	800623c <memset>
 80066a0:	4620      	mov	r0, r4
 80066a2:	bd70      	pop	{r4, r5, r6, pc}

080066a4 <__sinit>:
 80066a4:	6983      	ldr	r3, [r0, #24]
 80066a6:	b510      	push	{r4, lr}
 80066a8:	4604      	mov	r4, r0
 80066aa:	bb33      	cbnz	r3, 80066fa <__sinit+0x56>
 80066ac:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80066b0:	6503      	str	r3, [r0, #80]	; 0x50
 80066b2:	4b12      	ldr	r3, [pc, #72]	; (80066fc <__sinit+0x58>)
 80066b4:	4a12      	ldr	r2, [pc, #72]	; (8006700 <__sinit+0x5c>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6282      	str	r2, [r0, #40]	; 0x28
 80066ba:	4298      	cmp	r0, r3
 80066bc:	bf04      	itt	eq
 80066be:	2301      	moveq	r3, #1
 80066c0:	6183      	streq	r3, [r0, #24]
 80066c2:	f000 f81f 	bl	8006704 <__sfp>
 80066c6:	6060      	str	r0, [r4, #4]
 80066c8:	4620      	mov	r0, r4
 80066ca:	f000 f81b 	bl	8006704 <__sfp>
 80066ce:	60a0      	str	r0, [r4, #8]
 80066d0:	4620      	mov	r0, r4
 80066d2:	f000 f817 	bl	8006704 <__sfp>
 80066d6:	2200      	movs	r2, #0
 80066d8:	60e0      	str	r0, [r4, #12]
 80066da:	2104      	movs	r1, #4
 80066dc:	6860      	ldr	r0, [r4, #4]
 80066de:	f7ff ffa1 	bl	8006624 <std>
 80066e2:	2201      	movs	r2, #1
 80066e4:	2109      	movs	r1, #9
 80066e6:	68a0      	ldr	r0, [r4, #8]
 80066e8:	f7ff ff9c 	bl	8006624 <std>
 80066ec:	2202      	movs	r2, #2
 80066ee:	2112      	movs	r1, #18
 80066f0:	68e0      	ldr	r0, [r4, #12]
 80066f2:	f7ff ff97 	bl	8006624 <std>
 80066f6:	2301      	movs	r3, #1
 80066f8:	61a3      	str	r3, [r4, #24]
 80066fa:	bd10      	pop	{r4, pc}
 80066fc:	08081a38 	.word	0x08081a38
 8006700:	0800666d 	.word	0x0800666d

08006704 <__sfp>:
 8006704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006706:	4b1b      	ldr	r3, [pc, #108]	; (8006774 <__sfp+0x70>)
 8006708:	681e      	ldr	r6, [r3, #0]
 800670a:	69b3      	ldr	r3, [r6, #24]
 800670c:	4607      	mov	r7, r0
 800670e:	b913      	cbnz	r3, 8006716 <__sfp+0x12>
 8006710:	4630      	mov	r0, r6
 8006712:	f7ff ffc7 	bl	80066a4 <__sinit>
 8006716:	3648      	adds	r6, #72	; 0x48
 8006718:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800671c:	3b01      	subs	r3, #1
 800671e:	d503      	bpl.n	8006728 <__sfp+0x24>
 8006720:	6833      	ldr	r3, [r6, #0]
 8006722:	b133      	cbz	r3, 8006732 <__sfp+0x2e>
 8006724:	6836      	ldr	r6, [r6, #0]
 8006726:	e7f7      	b.n	8006718 <__sfp+0x14>
 8006728:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800672c:	b16d      	cbz	r5, 800674a <__sfp+0x46>
 800672e:	3468      	adds	r4, #104	; 0x68
 8006730:	e7f4      	b.n	800671c <__sfp+0x18>
 8006732:	2104      	movs	r1, #4
 8006734:	4638      	mov	r0, r7
 8006736:	f7ff ff9f 	bl	8006678 <__sfmoreglue>
 800673a:	6030      	str	r0, [r6, #0]
 800673c:	2800      	cmp	r0, #0
 800673e:	d1f1      	bne.n	8006724 <__sfp+0x20>
 8006740:	230c      	movs	r3, #12
 8006742:	603b      	str	r3, [r7, #0]
 8006744:	4604      	mov	r4, r0
 8006746:	4620      	mov	r0, r4
 8006748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800674a:	4b0b      	ldr	r3, [pc, #44]	; (8006778 <__sfp+0x74>)
 800674c:	6665      	str	r5, [r4, #100]	; 0x64
 800674e:	e9c4 5500 	strd	r5, r5, [r4]
 8006752:	60a5      	str	r5, [r4, #8]
 8006754:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006758:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800675c:	2208      	movs	r2, #8
 800675e:	4629      	mov	r1, r5
 8006760:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006764:	f7ff fd6a 	bl	800623c <memset>
 8006768:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800676c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006770:	e7e9      	b.n	8006746 <__sfp+0x42>
 8006772:	bf00      	nop
 8006774:	08081a38 	.word	0x08081a38
 8006778:	ffff0001 	.word	0xffff0001

0800677c <_fwalk_reent>:
 800677c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006780:	4680      	mov	r8, r0
 8006782:	4689      	mov	r9, r1
 8006784:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006788:	2600      	movs	r6, #0
 800678a:	b914      	cbnz	r4, 8006792 <_fwalk_reent+0x16>
 800678c:	4630      	mov	r0, r6
 800678e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006792:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006796:	3f01      	subs	r7, #1
 8006798:	d501      	bpl.n	800679e <_fwalk_reent+0x22>
 800679a:	6824      	ldr	r4, [r4, #0]
 800679c:	e7f5      	b.n	800678a <_fwalk_reent+0xe>
 800679e:	89ab      	ldrh	r3, [r5, #12]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d907      	bls.n	80067b4 <_fwalk_reent+0x38>
 80067a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067a8:	3301      	adds	r3, #1
 80067aa:	d003      	beq.n	80067b4 <_fwalk_reent+0x38>
 80067ac:	4629      	mov	r1, r5
 80067ae:	4640      	mov	r0, r8
 80067b0:	47c8      	blx	r9
 80067b2:	4306      	orrs	r6, r0
 80067b4:	3568      	adds	r5, #104	; 0x68
 80067b6:	e7ee      	b.n	8006796 <_fwalk_reent+0x1a>

080067b8 <__swhatbuf_r>:
 80067b8:	b570      	push	{r4, r5, r6, lr}
 80067ba:	460e      	mov	r6, r1
 80067bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067c0:	2900      	cmp	r1, #0
 80067c2:	b096      	sub	sp, #88	; 0x58
 80067c4:	4614      	mov	r4, r2
 80067c6:	461d      	mov	r5, r3
 80067c8:	da07      	bge.n	80067da <__swhatbuf_r+0x22>
 80067ca:	2300      	movs	r3, #0
 80067cc:	602b      	str	r3, [r5, #0]
 80067ce:	89b3      	ldrh	r3, [r6, #12]
 80067d0:	061a      	lsls	r2, r3, #24
 80067d2:	d410      	bmi.n	80067f6 <__swhatbuf_r+0x3e>
 80067d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067d8:	e00e      	b.n	80067f8 <__swhatbuf_r+0x40>
 80067da:	466a      	mov	r2, sp
 80067dc:	f000 fc36 	bl	800704c <_fstat_r>
 80067e0:	2800      	cmp	r0, #0
 80067e2:	dbf2      	blt.n	80067ca <__swhatbuf_r+0x12>
 80067e4:	9a01      	ldr	r2, [sp, #4]
 80067e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067ee:	425a      	negs	r2, r3
 80067f0:	415a      	adcs	r2, r3
 80067f2:	602a      	str	r2, [r5, #0]
 80067f4:	e7ee      	b.n	80067d4 <__swhatbuf_r+0x1c>
 80067f6:	2340      	movs	r3, #64	; 0x40
 80067f8:	2000      	movs	r0, #0
 80067fa:	6023      	str	r3, [r4, #0]
 80067fc:	b016      	add	sp, #88	; 0x58
 80067fe:	bd70      	pop	{r4, r5, r6, pc}

08006800 <__smakebuf_r>:
 8006800:	898b      	ldrh	r3, [r1, #12]
 8006802:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006804:	079d      	lsls	r5, r3, #30
 8006806:	4606      	mov	r6, r0
 8006808:	460c      	mov	r4, r1
 800680a:	d507      	bpl.n	800681c <__smakebuf_r+0x1c>
 800680c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006810:	6023      	str	r3, [r4, #0]
 8006812:	6123      	str	r3, [r4, #16]
 8006814:	2301      	movs	r3, #1
 8006816:	6163      	str	r3, [r4, #20]
 8006818:	b002      	add	sp, #8
 800681a:	bd70      	pop	{r4, r5, r6, pc}
 800681c:	ab01      	add	r3, sp, #4
 800681e:	466a      	mov	r2, sp
 8006820:	f7ff ffca 	bl	80067b8 <__swhatbuf_r>
 8006824:	9900      	ldr	r1, [sp, #0]
 8006826:	4605      	mov	r5, r0
 8006828:	4630      	mov	r0, r6
 800682a:	f000 f877 	bl	800691c <_malloc_r>
 800682e:	b948      	cbnz	r0, 8006844 <__smakebuf_r+0x44>
 8006830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006834:	059a      	lsls	r2, r3, #22
 8006836:	d4ef      	bmi.n	8006818 <__smakebuf_r+0x18>
 8006838:	f023 0303 	bic.w	r3, r3, #3
 800683c:	f043 0302 	orr.w	r3, r3, #2
 8006840:	81a3      	strh	r3, [r4, #12]
 8006842:	e7e3      	b.n	800680c <__smakebuf_r+0xc>
 8006844:	4b0d      	ldr	r3, [pc, #52]	; (800687c <__smakebuf_r+0x7c>)
 8006846:	62b3      	str	r3, [r6, #40]	; 0x28
 8006848:	89a3      	ldrh	r3, [r4, #12]
 800684a:	6020      	str	r0, [r4, #0]
 800684c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006850:	81a3      	strh	r3, [r4, #12]
 8006852:	9b00      	ldr	r3, [sp, #0]
 8006854:	6163      	str	r3, [r4, #20]
 8006856:	9b01      	ldr	r3, [sp, #4]
 8006858:	6120      	str	r0, [r4, #16]
 800685a:	b15b      	cbz	r3, 8006874 <__smakebuf_r+0x74>
 800685c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006860:	4630      	mov	r0, r6
 8006862:	f000 fc05 	bl	8007070 <_isatty_r>
 8006866:	b128      	cbz	r0, 8006874 <__smakebuf_r+0x74>
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	f023 0303 	bic.w	r3, r3, #3
 800686e:	f043 0301 	orr.w	r3, r3, #1
 8006872:	81a3      	strh	r3, [r4, #12]
 8006874:	89a3      	ldrh	r3, [r4, #12]
 8006876:	431d      	orrs	r5, r3
 8006878:	81a5      	strh	r5, [r4, #12]
 800687a:	e7cd      	b.n	8006818 <__smakebuf_r+0x18>
 800687c:	0800666d 	.word	0x0800666d

08006880 <_free_r>:
 8006880:	b538      	push	{r3, r4, r5, lr}
 8006882:	4605      	mov	r5, r0
 8006884:	2900      	cmp	r1, #0
 8006886:	d045      	beq.n	8006914 <_free_r+0x94>
 8006888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800688c:	1f0c      	subs	r4, r1, #4
 800688e:	2b00      	cmp	r3, #0
 8006890:	bfb8      	it	lt
 8006892:	18e4      	addlt	r4, r4, r3
 8006894:	f000 fc0e 	bl	80070b4 <__malloc_lock>
 8006898:	4a1f      	ldr	r2, [pc, #124]	; (8006918 <_free_r+0x98>)
 800689a:	6813      	ldr	r3, [r2, #0]
 800689c:	4610      	mov	r0, r2
 800689e:	b933      	cbnz	r3, 80068ae <_free_r+0x2e>
 80068a0:	6063      	str	r3, [r4, #4]
 80068a2:	6014      	str	r4, [r2, #0]
 80068a4:	4628      	mov	r0, r5
 80068a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068aa:	f000 bc04 	b.w	80070b6 <__malloc_unlock>
 80068ae:	42a3      	cmp	r3, r4
 80068b0:	d90c      	bls.n	80068cc <_free_r+0x4c>
 80068b2:	6821      	ldr	r1, [r4, #0]
 80068b4:	1862      	adds	r2, r4, r1
 80068b6:	4293      	cmp	r3, r2
 80068b8:	bf04      	itt	eq
 80068ba:	681a      	ldreq	r2, [r3, #0]
 80068bc:	685b      	ldreq	r3, [r3, #4]
 80068be:	6063      	str	r3, [r4, #4]
 80068c0:	bf04      	itt	eq
 80068c2:	1852      	addeq	r2, r2, r1
 80068c4:	6022      	streq	r2, [r4, #0]
 80068c6:	6004      	str	r4, [r0, #0]
 80068c8:	e7ec      	b.n	80068a4 <_free_r+0x24>
 80068ca:	4613      	mov	r3, r2
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	b10a      	cbz	r2, 80068d4 <_free_r+0x54>
 80068d0:	42a2      	cmp	r2, r4
 80068d2:	d9fa      	bls.n	80068ca <_free_r+0x4a>
 80068d4:	6819      	ldr	r1, [r3, #0]
 80068d6:	1858      	adds	r0, r3, r1
 80068d8:	42a0      	cmp	r0, r4
 80068da:	d10b      	bne.n	80068f4 <_free_r+0x74>
 80068dc:	6820      	ldr	r0, [r4, #0]
 80068de:	4401      	add	r1, r0
 80068e0:	1858      	adds	r0, r3, r1
 80068e2:	4282      	cmp	r2, r0
 80068e4:	6019      	str	r1, [r3, #0]
 80068e6:	d1dd      	bne.n	80068a4 <_free_r+0x24>
 80068e8:	6810      	ldr	r0, [r2, #0]
 80068ea:	6852      	ldr	r2, [r2, #4]
 80068ec:	605a      	str	r2, [r3, #4]
 80068ee:	4401      	add	r1, r0
 80068f0:	6019      	str	r1, [r3, #0]
 80068f2:	e7d7      	b.n	80068a4 <_free_r+0x24>
 80068f4:	d902      	bls.n	80068fc <_free_r+0x7c>
 80068f6:	230c      	movs	r3, #12
 80068f8:	602b      	str	r3, [r5, #0]
 80068fa:	e7d3      	b.n	80068a4 <_free_r+0x24>
 80068fc:	6820      	ldr	r0, [r4, #0]
 80068fe:	1821      	adds	r1, r4, r0
 8006900:	428a      	cmp	r2, r1
 8006902:	bf04      	itt	eq
 8006904:	6811      	ldreq	r1, [r2, #0]
 8006906:	6852      	ldreq	r2, [r2, #4]
 8006908:	6062      	str	r2, [r4, #4]
 800690a:	bf04      	itt	eq
 800690c:	1809      	addeq	r1, r1, r0
 800690e:	6021      	streq	r1, [r4, #0]
 8006910:	605c      	str	r4, [r3, #4]
 8006912:	e7c7      	b.n	80068a4 <_free_r+0x24>
 8006914:	bd38      	pop	{r3, r4, r5, pc}
 8006916:	bf00      	nop
 8006918:	20000098 	.word	0x20000098

0800691c <_malloc_r>:
 800691c:	b570      	push	{r4, r5, r6, lr}
 800691e:	1ccd      	adds	r5, r1, #3
 8006920:	f025 0503 	bic.w	r5, r5, #3
 8006924:	3508      	adds	r5, #8
 8006926:	2d0c      	cmp	r5, #12
 8006928:	bf38      	it	cc
 800692a:	250c      	movcc	r5, #12
 800692c:	2d00      	cmp	r5, #0
 800692e:	4606      	mov	r6, r0
 8006930:	db01      	blt.n	8006936 <_malloc_r+0x1a>
 8006932:	42a9      	cmp	r1, r5
 8006934:	d903      	bls.n	800693e <_malloc_r+0x22>
 8006936:	230c      	movs	r3, #12
 8006938:	6033      	str	r3, [r6, #0]
 800693a:	2000      	movs	r0, #0
 800693c:	bd70      	pop	{r4, r5, r6, pc}
 800693e:	f000 fbb9 	bl	80070b4 <__malloc_lock>
 8006942:	4a21      	ldr	r2, [pc, #132]	; (80069c8 <_malloc_r+0xac>)
 8006944:	6814      	ldr	r4, [r2, #0]
 8006946:	4621      	mov	r1, r4
 8006948:	b991      	cbnz	r1, 8006970 <_malloc_r+0x54>
 800694a:	4c20      	ldr	r4, [pc, #128]	; (80069cc <_malloc_r+0xb0>)
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	b91b      	cbnz	r3, 8006958 <_malloc_r+0x3c>
 8006950:	4630      	mov	r0, r6
 8006952:	f000 fb05 	bl	8006f60 <_sbrk_r>
 8006956:	6020      	str	r0, [r4, #0]
 8006958:	4629      	mov	r1, r5
 800695a:	4630      	mov	r0, r6
 800695c:	f000 fb00 	bl	8006f60 <_sbrk_r>
 8006960:	1c43      	adds	r3, r0, #1
 8006962:	d124      	bne.n	80069ae <_malloc_r+0x92>
 8006964:	230c      	movs	r3, #12
 8006966:	6033      	str	r3, [r6, #0]
 8006968:	4630      	mov	r0, r6
 800696a:	f000 fba4 	bl	80070b6 <__malloc_unlock>
 800696e:	e7e4      	b.n	800693a <_malloc_r+0x1e>
 8006970:	680b      	ldr	r3, [r1, #0]
 8006972:	1b5b      	subs	r3, r3, r5
 8006974:	d418      	bmi.n	80069a8 <_malloc_r+0x8c>
 8006976:	2b0b      	cmp	r3, #11
 8006978:	d90f      	bls.n	800699a <_malloc_r+0x7e>
 800697a:	600b      	str	r3, [r1, #0]
 800697c:	50cd      	str	r5, [r1, r3]
 800697e:	18cc      	adds	r4, r1, r3
 8006980:	4630      	mov	r0, r6
 8006982:	f000 fb98 	bl	80070b6 <__malloc_unlock>
 8006986:	f104 000b 	add.w	r0, r4, #11
 800698a:	1d23      	adds	r3, r4, #4
 800698c:	f020 0007 	bic.w	r0, r0, #7
 8006990:	1ac3      	subs	r3, r0, r3
 8006992:	d0d3      	beq.n	800693c <_malloc_r+0x20>
 8006994:	425a      	negs	r2, r3
 8006996:	50e2      	str	r2, [r4, r3]
 8006998:	e7d0      	b.n	800693c <_malloc_r+0x20>
 800699a:	428c      	cmp	r4, r1
 800699c:	684b      	ldr	r3, [r1, #4]
 800699e:	bf16      	itet	ne
 80069a0:	6063      	strne	r3, [r4, #4]
 80069a2:	6013      	streq	r3, [r2, #0]
 80069a4:	460c      	movne	r4, r1
 80069a6:	e7eb      	b.n	8006980 <_malloc_r+0x64>
 80069a8:	460c      	mov	r4, r1
 80069aa:	6849      	ldr	r1, [r1, #4]
 80069ac:	e7cc      	b.n	8006948 <_malloc_r+0x2c>
 80069ae:	1cc4      	adds	r4, r0, #3
 80069b0:	f024 0403 	bic.w	r4, r4, #3
 80069b4:	42a0      	cmp	r0, r4
 80069b6:	d005      	beq.n	80069c4 <_malloc_r+0xa8>
 80069b8:	1a21      	subs	r1, r4, r0
 80069ba:	4630      	mov	r0, r6
 80069bc:	f000 fad0 	bl	8006f60 <_sbrk_r>
 80069c0:	3001      	adds	r0, #1
 80069c2:	d0cf      	beq.n	8006964 <_malloc_r+0x48>
 80069c4:	6025      	str	r5, [r4, #0]
 80069c6:	e7db      	b.n	8006980 <_malloc_r+0x64>
 80069c8:	20000098 	.word	0x20000098
 80069cc:	2000009c 	.word	0x2000009c

080069d0 <__sfputc_r>:
 80069d0:	6893      	ldr	r3, [r2, #8]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	b410      	push	{r4}
 80069d8:	6093      	str	r3, [r2, #8]
 80069da:	da08      	bge.n	80069ee <__sfputc_r+0x1e>
 80069dc:	6994      	ldr	r4, [r2, #24]
 80069de:	42a3      	cmp	r3, r4
 80069e0:	db01      	blt.n	80069e6 <__sfputc_r+0x16>
 80069e2:	290a      	cmp	r1, #10
 80069e4:	d103      	bne.n	80069ee <__sfputc_r+0x1e>
 80069e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069ea:	f7ff bcab 	b.w	8006344 <__swbuf_r>
 80069ee:	6813      	ldr	r3, [r2, #0]
 80069f0:	1c58      	adds	r0, r3, #1
 80069f2:	6010      	str	r0, [r2, #0]
 80069f4:	7019      	strb	r1, [r3, #0]
 80069f6:	4608      	mov	r0, r1
 80069f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <__sfputs_r>:
 80069fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a00:	4606      	mov	r6, r0
 8006a02:	460f      	mov	r7, r1
 8006a04:	4614      	mov	r4, r2
 8006a06:	18d5      	adds	r5, r2, r3
 8006a08:	42ac      	cmp	r4, r5
 8006a0a:	d101      	bne.n	8006a10 <__sfputs_r+0x12>
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	e007      	b.n	8006a20 <__sfputs_r+0x22>
 8006a10:	463a      	mov	r2, r7
 8006a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a16:	4630      	mov	r0, r6
 8006a18:	f7ff ffda 	bl	80069d0 <__sfputc_r>
 8006a1c:	1c43      	adds	r3, r0, #1
 8006a1e:	d1f3      	bne.n	8006a08 <__sfputs_r+0xa>
 8006a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a24 <_vfiprintf_r>:
 8006a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a28:	460c      	mov	r4, r1
 8006a2a:	b09d      	sub	sp, #116	; 0x74
 8006a2c:	4617      	mov	r7, r2
 8006a2e:	461d      	mov	r5, r3
 8006a30:	4606      	mov	r6, r0
 8006a32:	b118      	cbz	r0, 8006a3c <_vfiprintf_r+0x18>
 8006a34:	6983      	ldr	r3, [r0, #24]
 8006a36:	b90b      	cbnz	r3, 8006a3c <_vfiprintf_r+0x18>
 8006a38:	f7ff fe34 	bl	80066a4 <__sinit>
 8006a3c:	4b7c      	ldr	r3, [pc, #496]	; (8006c30 <_vfiprintf_r+0x20c>)
 8006a3e:	429c      	cmp	r4, r3
 8006a40:	d158      	bne.n	8006af4 <_vfiprintf_r+0xd0>
 8006a42:	6874      	ldr	r4, [r6, #4]
 8006a44:	89a3      	ldrh	r3, [r4, #12]
 8006a46:	0718      	lsls	r0, r3, #28
 8006a48:	d55e      	bpl.n	8006b08 <_vfiprintf_r+0xe4>
 8006a4a:	6923      	ldr	r3, [r4, #16]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d05b      	beq.n	8006b08 <_vfiprintf_r+0xe4>
 8006a50:	2300      	movs	r3, #0
 8006a52:	9309      	str	r3, [sp, #36]	; 0x24
 8006a54:	2320      	movs	r3, #32
 8006a56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a5a:	2330      	movs	r3, #48	; 0x30
 8006a5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a60:	9503      	str	r5, [sp, #12]
 8006a62:	f04f 0b01 	mov.w	fp, #1
 8006a66:	46b8      	mov	r8, r7
 8006a68:	4645      	mov	r5, r8
 8006a6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006a6e:	b10b      	cbz	r3, 8006a74 <_vfiprintf_r+0x50>
 8006a70:	2b25      	cmp	r3, #37	; 0x25
 8006a72:	d154      	bne.n	8006b1e <_vfiprintf_r+0xfa>
 8006a74:	ebb8 0a07 	subs.w	sl, r8, r7
 8006a78:	d00b      	beq.n	8006a92 <_vfiprintf_r+0x6e>
 8006a7a:	4653      	mov	r3, sl
 8006a7c:	463a      	mov	r2, r7
 8006a7e:	4621      	mov	r1, r4
 8006a80:	4630      	mov	r0, r6
 8006a82:	f7ff ffbc 	bl	80069fe <__sfputs_r>
 8006a86:	3001      	adds	r0, #1
 8006a88:	f000 80c2 	beq.w	8006c10 <_vfiprintf_r+0x1ec>
 8006a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a8e:	4453      	add	r3, sl
 8006a90:	9309      	str	r3, [sp, #36]	; 0x24
 8006a92:	f898 3000 	ldrb.w	r3, [r8]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f000 80ba 	beq.w	8006c10 <_vfiprintf_r+0x1ec>
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006aa6:	9304      	str	r3, [sp, #16]
 8006aa8:	9307      	str	r3, [sp, #28]
 8006aaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006aae:	931a      	str	r3, [sp, #104]	; 0x68
 8006ab0:	46a8      	mov	r8, r5
 8006ab2:	2205      	movs	r2, #5
 8006ab4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006ab8:	485e      	ldr	r0, [pc, #376]	; (8006c34 <_vfiprintf_r+0x210>)
 8006aba:	f7f9 fba1 	bl	8000200 <memchr>
 8006abe:	9b04      	ldr	r3, [sp, #16]
 8006ac0:	bb78      	cbnz	r0, 8006b22 <_vfiprintf_r+0xfe>
 8006ac2:	06d9      	lsls	r1, r3, #27
 8006ac4:	bf44      	itt	mi
 8006ac6:	2220      	movmi	r2, #32
 8006ac8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006acc:	071a      	lsls	r2, r3, #28
 8006ace:	bf44      	itt	mi
 8006ad0:	222b      	movmi	r2, #43	; 0x2b
 8006ad2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ad6:	782a      	ldrb	r2, [r5, #0]
 8006ad8:	2a2a      	cmp	r2, #42	; 0x2a
 8006ada:	d02a      	beq.n	8006b32 <_vfiprintf_r+0x10e>
 8006adc:	9a07      	ldr	r2, [sp, #28]
 8006ade:	46a8      	mov	r8, r5
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	250a      	movs	r5, #10
 8006ae4:	4641      	mov	r1, r8
 8006ae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006aea:	3b30      	subs	r3, #48	; 0x30
 8006aec:	2b09      	cmp	r3, #9
 8006aee:	d969      	bls.n	8006bc4 <_vfiprintf_r+0x1a0>
 8006af0:	b360      	cbz	r0, 8006b4c <_vfiprintf_r+0x128>
 8006af2:	e024      	b.n	8006b3e <_vfiprintf_r+0x11a>
 8006af4:	4b50      	ldr	r3, [pc, #320]	; (8006c38 <_vfiprintf_r+0x214>)
 8006af6:	429c      	cmp	r4, r3
 8006af8:	d101      	bne.n	8006afe <_vfiprintf_r+0xda>
 8006afa:	68b4      	ldr	r4, [r6, #8]
 8006afc:	e7a2      	b.n	8006a44 <_vfiprintf_r+0x20>
 8006afe:	4b4f      	ldr	r3, [pc, #316]	; (8006c3c <_vfiprintf_r+0x218>)
 8006b00:	429c      	cmp	r4, r3
 8006b02:	bf08      	it	eq
 8006b04:	68f4      	ldreq	r4, [r6, #12]
 8006b06:	e79d      	b.n	8006a44 <_vfiprintf_r+0x20>
 8006b08:	4621      	mov	r1, r4
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	f7ff fc6c 	bl	80063e8 <__swsetup_r>
 8006b10:	2800      	cmp	r0, #0
 8006b12:	d09d      	beq.n	8006a50 <_vfiprintf_r+0x2c>
 8006b14:	f04f 30ff 	mov.w	r0, #4294967295
 8006b18:	b01d      	add	sp, #116	; 0x74
 8006b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b1e:	46a8      	mov	r8, r5
 8006b20:	e7a2      	b.n	8006a68 <_vfiprintf_r+0x44>
 8006b22:	4a44      	ldr	r2, [pc, #272]	; (8006c34 <_vfiprintf_r+0x210>)
 8006b24:	1a80      	subs	r0, r0, r2
 8006b26:	fa0b f000 	lsl.w	r0, fp, r0
 8006b2a:	4318      	orrs	r0, r3
 8006b2c:	9004      	str	r0, [sp, #16]
 8006b2e:	4645      	mov	r5, r8
 8006b30:	e7be      	b.n	8006ab0 <_vfiprintf_r+0x8c>
 8006b32:	9a03      	ldr	r2, [sp, #12]
 8006b34:	1d11      	adds	r1, r2, #4
 8006b36:	6812      	ldr	r2, [r2, #0]
 8006b38:	9103      	str	r1, [sp, #12]
 8006b3a:	2a00      	cmp	r2, #0
 8006b3c:	db01      	blt.n	8006b42 <_vfiprintf_r+0x11e>
 8006b3e:	9207      	str	r2, [sp, #28]
 8006b40:	e004      	b.n	8006b4c <_vfiprintf_r+0x128>
 8006b42:	4252      	negs	r2, r2
 8006b44:	f043 0302 	orr.w	r3, r3, #2
 8006b48:	9207      	str	r2, [sp, #28]
 8006b4a:	9304      	str	r3, [sp, #16]
 8006b4c:	f898 3000 	ldrb.w	r3, [r8]
 8006b50:	2b2e      	cmp	r3, #46	; 0x2e
 8006b52:	d10e      	bne.n	8006b72 <_vfiprintf_r+0x14e>
 8006b54:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006b58:	2b2a      	cmp	r3, #42	; 0x2a
 8006b5a:	d138      	bne.n	8006bce <_vfiprintf_r+0x1aa>
 8006b5c:	9b03      	ldr	r3, [sp, #12]
 8006b5e:	1d1a      	adds	r2, r3, #4
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	9203      	str	r2, [sp, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	bfb8      	it	lt
 8006b68:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b6c:	f108 0802 	add.w	r8, r8, #2
 8006b70:	9305      	str	r3, [sp, #20]
 8006b72:	4d33      	ldr	r5, [pc, #204]	; (8006c40 <_vfiprintf_r+0x21c>)
 8006b74:	f898 1000 	ldrb.w	r1, [r8]
 8006b78:	2203      	movs	r2, #3
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	f7f9 fb40 	bl	8000200 <memchr>
 8006b80:	b140      	cbz	r0, 8006b94 <_vfiprintf_r+0x170>
 8006b82:	2340      	movs	r3, #64	; 0x40
 8006b84:	1b40      	subs	r0, r0, r5
 8006b86:	fa03 f000 	lsl.w	r0, r3, r0
 8006b8a:	9b04      	ldr	r3, [sp, #16]
 8006b8c:	4303      	orrs	r3, r0
 8006b8e:	f108 0801 	add.w	r8, r8, #1
 8006b92:	9304      	str	r3, [sp, #16]
 8006b94:	f898 1000 	ldrb.w	r1, [r8]
 8006b98:	482a      	ldr	r0, [pc, #168]	; (8006c44 <_vfiprintf_r+0x220>)
 8006b9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b9e:	2206      	movs	r2, #6
 8006ba0:	f108 0701 	add.w	r7, r8, #1
 8006ba4:	f7f9 fb2c 	bl	8000200 <memchr>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	d037      	beq.n	8006c1c <_vfiprintf_r+0x1f8>
 8006bac:	4b26      	ldr	r3, [pc, #152]	; (8006c48 <_vfiprintf_r+0x224>)
 8006bae:	bb1b      	cbnz	r3, 8006bf8 <_vfiprintf_r+0x1d4>
 8006bb0:	9b03      	ldr	r3, [sp, #12]
 8006bb2:	3307      	adds	r3, #7
 8006bb4:	f023 0307 	bic.w	r3, r3, #7
 8006bb8:	3308      	adds	r3, #8
 8006bba:	9303      	str	r3, [sp, #12]
 8006bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bbe:	444b      	add	r3, r9
 8006bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc2:	e750      	b.n	8006a66 <_vfiprintf_r+0x42>
 8006bc4:	fb05 3202 	mla	r2, r5, r2, r3
 8006bc8:	2001      	movs	r0, #1
 8006bca:	4688      	mov	r8, r1
 8006bcc:	e78a      	b.n	8006ae4 <_vfiprintf_r+0xc0>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	f108 0801 	add.w	r8, r8, #1
 8006bd4:	9305      	str	r3, [sp, #20]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	250a      	movs	r5, #10
 8006bda:	4640      	mov	r0, r8
 8006bdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006be0:	3a30      	subs	r2, #48	; 0x30
 8006be2:	2a09      	cmp	r2, #9
 8006be4:	d903      	bls.n	8006bee <_vfiprintf_r+0x1ca>
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d0c3      	beq.n	8006b72 <_vfiprintf_r+0x14e>
 8006bea:	9105      	str	r1, [sp, #20]
 8006bec:	e7c1      	b.n	8006b72 <_vfiprintf_r+0x14e>
 8006bee:	fb05 2101 	mla	r1, r5, r1, r2
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	4680      	mov	r8, r0
 8006bf6:	e7f0      	b.n	8006bda <_vfiprintf_r+0x1b6>
 8006bf8:	ab03      	add	r3, sp, #12
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	4622      	mov	r2, r4
 8006bfe:	4b13      	ldr	r3, [pc, #76]	; (8006c4c <_vfiprintf_r+0x228>)
 8006c00:	a904      	add	r1, sp, #16
 8006c02:	4630      	mov	r0, r6
 8006c04:	f3af 8000 	nop.w
 8006c08:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006c0c:	4681      	mov	r9, r0
 8006c0e:	d1d5      	bne.n	8006bbc <_vfiprintf_r+0x198>
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	065b      	lsls	r3, r3, #25
 8006c14:	f53f af7e 	bmi.w	8006b14 <_vfiprintf_r+0xf0>
 8006c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c1a:	e77d      	b.n	8006b18 <_vfiprintf_r+0xf4>
 8006c1c:	ab03      	add	r3, sp, #12
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	4622      	mov	r2, r4
 8006c22:	4b0a      	ldr	r3, [pc, #40]	; (8006c4c <_vfiprintf_r+0x228>)
 8006c24:	a904      	add	r1, sp, #16
 8006c26:	4630      	mov	r0, r6
 8006c28:	f000 f888 	bl	8006d3c <_printf_i>
 8006c2c:	e7ec      	b.n	8006c08 <_vfiprintf_r+0x1e4>
 8006c2e:	bf00      	nop
 8006c30:	08081a5c 	.word	0x08081a5c
 8006c34:	08081a9c 	.word	0x08081a9c
 8006c38:	08081a7c 	.word	0x08081a7c
 8006c3c:	08081a3c 	.word	0x08081a3c
 8006c40:	08081aa2 	.word	0x08081aa2
 8006c44:	08081aa6 	.word	0x08081aa6
 8006c48:	00000000 	.word	0x00000000
 8006c4c:	080069ff 	.word	0x080069ff

08006c50 <_printf_common>:
 8006c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c54:	4691      	mov	r9, r2
 8006c56:	461f      	mov	r7, r3
 8006c58:	688a      	ldr	r2, [r1, #8]
 8006c5a:	690b      	ldr	r3, [r1, #16]
 8006c5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c60:	4293      	cmp	r3, r2
 8006c62:	bfb8      	it	lt
 8006c64:	4613      	movlt	r3, r2
 8006c66:	f8c9 3000 	str.w	r3, [r9]
 8006c6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c6e:	4606      	mov	r6, r0
 8006c70:	460c      	mov	r4, r1
 8006c72:	b112      	cbz	r2, 8006c7a <_printf_common+0x2a>
 8006c74:	3301      	adds	r3, #1
 8006c76:	f8c9 3000 	str.w	r3, [r9]
 8006c7a:	6823      	ldr	r3, [r4, #0]
 8006c7c:	0699      	lsls	r1, r3, #26
 8006c7e:	bf42      	ittt	mi
 8006c80:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006c84:	3302      	addmi	r3, #2
 8006c86:	f8c9 3000 	strmi.w	r3, [r9]
 8006c8a:	6825      	ldr	r5, [r4, #0]
 8006c8c:	f015 0506 	ands.w	r5, r5, #6
 8006c90:	d107      	bne.n	8006ca2 <_printf_common+0x52>
 8006c92:	f104 0a19 	add.w	sl, r4, #25
 8006c96:	68e3      	ldr	r3, [r4, #12]
 8006c98:	f8d9 2000 	ldr.w	r2, [r9]
 8006c9c:	1a9b      	subs	r3, r3, r2
 8006c9e:	42ab      	cmp	r3, r5
 8006ca0:	dc28      	bgt.n	8006cf4 <_printf_common+0xa4>
 8006ca2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006ca6:	6822      	ldr	r2, [r4, #0]
 8006ca8:	3300      	adds	r3, #0
 8006caa:	bf18      	it	ne
 8006cac:	2301      	movne	r3, #1
 8006cae:	0692      	lsls	r2, r2, #26
 8006cb0:	d42d      	bmi.n	8006d0e <_printf_common+0xbe>
 8006cb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cb6:	4639      	mov	r1, r7
 8006cb8:	4630      	mov	r0, r6
 8006cba:	47c0      	blx	r8
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	d020      	beq.n	8006d02 <_printf_common+0xb2>
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	68e5      	ldr	r5, [r4, #12]
 8006cc4:	f8d9 2000 	ldr.w	r2, [r9]
 8006cc8:	f003 0306 	and.w	r3, r3, #6
 8006ccc:	2b04      	cmp	r3, #4
 8006cce:	bf08      	it	eq
 8006cd0:	1aad      	subeq	r5, r5, r2
 8006cd2:	68a3      	ldr	r3, [r4, #8]
 8006cd4:	6922      	ldr	r2, [r4, #16]
 8006cd6:	bf0c      	ite	eq
 8006cd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cdc:	2500      	movne	r5, #0
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	bfc4      	itt	gt
 8006ce2:	1a9b      	subgt	r3, r3, r2
 8006ce4:	18ed      	addgt	r5, r5, r3
 8006ce6:	f04f 0900 	mov.w	r9, #0
 8006cea:	341a      	adds	r4, #26
 8006cec:	454d      	cmp	r5, r9
 8006cee:	d11a      	bne.n	8006d26 <_printf_common+0xd6>
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	e008      	b.n	8006d06 <_printf_common+0xb6>
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	4652      	mov	r2, sl
 8006cf8:	4639      	mov	r1, r7
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	47c0      	blx	r8
 8006cfe:	3001      	adds	r0, #1
 8006d00:	d103      	bne.n	8006d0a <_printf_common+0xba>
 8006d02:	f04f 30ff 	mov.w	r0, #4294967295
 8006d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d0a:	3501      	adds	r5, #1
 8006d0c:	e7c3      	b.n	8006c96 <_printf_common+0x46>
 8006d0e:	18e1      	adds	r1, r4, r3
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	2030      	movs	r0, #48	; 0x30
 8006d14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d18:	4422      	add	r2, r4
 8006d1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d22:	3302      	adds	r3, #2
 8006d24:	e7c5      	b.n	8006cb2 <_printf_common+0x62>
 8006d26:	2301      	movs	r3, #1
 8006d28:	4622      	mov	r2, r4
 8006d2a:	4639      	mov	r1, r7
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	47c0      	blx	r8
 8006d30:	3001      	adds	r0, #1
 8006d32:	d0e6      	beq.n	8006d02 <_printf_common+0xb2>
 8006d34:	f109 0901 	add.w	r9, r9, #1
 8006d38:	e7d8      	b.n	8006cec <_printf_common+0x9c>
	...

08006d3c <_printf_i>:
 8006d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d40:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006d44:	460c      	mov	r4, r1
 8006d46:	7e09      	ldrb	r1, [r1, #24]
 8006d48:	b085      	sub	sp, #20
 8006d4a:	296e      	cmp	r1, #110	; 0x6e
 8006d4c:	4617      	mov	r7, r2
 8006d4e:	4606      	mov	r6, r0
 8006d50:	4698      	mov	r8, r3
 8006d52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d54:	f000 80b3 	beq.w	8006ebe <_printf_i+0x182>
 8006d58:	d822      	bhi.n	8006da0 <_printf_i+0x64>
 8006d5a:	2963      	cmp	r1, #99	; 0x63
 8006d5c:	d036      	beq.n	8006dcc <_printf_i+0x90>
 8006d5e:	d80a      	bhi.n	8006d76 <_printf_i+0x3a>
 8006d60:	2900      	cmp	r1, #0
 8006d62:	f000 80b9 	beq.w	8006ed8 <_printf_i+0x19c>
 8006d66:	2958      	cmp	r1, #88	; 0x58
 8006d68:	f000 8083 	beq.w	8006e72 <_printf_i+0x136>
 8006d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d70:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006d74:	e032      	b.n	8006ddc <_printf_i+0xa0>
 8006d76:	2964      	cmp	r1, #100	; 0x64
 8006d78:	d001      	beq.n	8006d7e <_printf_i+0x42>
 8006d7a:	2969      	cmp	r1, #105	; 0x69
 8006d7c:	d1f6      	bne.n	8006d6c <_printf_i+0x30>
 8006d7e:	6820      	ldr	r0, [r4, #0]
 8006d80:	6813      	ldr	r3, [r2, #0]
 8006d82:	0605      	lsls	r5, r0, #24
 8006d84:	f103 0104 	add.w	r1, r3, #4
 8006d88:	d52a      	bpl.n	8006de0 <_printf_i+0xa4>
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6011      	str	r1, [r2, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	da03      	bge.n	8006d9a <_printf_i+0x5e>
 8006d92:	222d      	movs	r2, #45	; 0x2d
 8006d94:	425b      	negs	r3, r3
 8006d96:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006d9a:	486f      	ldr	r0, [pc, #444]	; (8006f58 <_printf_i+0x21c>)
 8006d9c:	220a      	movs	r2, #10
 8006d9e:	e039      	b.n	8006e14 <_printf_i+0xd8>
 8006da0:	2973      	cmp	r1, #115	; 0x73
 8006da2:	f000 809d 	beq.w	8006ee0 <_printf_i+0x1a4>
 8006da6:	d808      	bhi.n	8006dba <_printf_i+0x7e>
 8006da8:	296f      	cmp	r1, #111	; 0x6f
 8006daa:	d020      	beq.n	8006dee <_printf_i+0xb2>
 8006dac:	2970      	cmp	r1, #112	; 0x70
 8006dae:	d1dd      	bne.n	8006d6c <_printf_i+0x30>
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	f043 0320 	orr.w	r3, r3, #32
 8006db6:	6023      	str	r3, [r4, #0]
 8006db8:	e003      	b.n	8006dc2 <_printf_i+0x86>
 8006dba:	2975      	cmp	r1, #117	; 0x75
 8006dbc:	d017      	beq.n	8006dee <_printf_i+0xb2>
 8006dbe:	2978      	cmp	r1, #120	; 0x78
 8006dc0:	d1d4      	bne.n	8006d6c <_printf_i+0x30>
 8006dc2:	2378      	movs	r3, #120	; 0x78
 8006dc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006dc8:	4864      	ldr	r0, [pc, #400]	; (8006f5c <_printf_i+0x220>)
 8006dca:	e055      	b.n	8006e78 <_printf_i+0x13c>
 8006dcc:	6813      	ldr	r3, [r2, #0]
 8006dce:	1d19      	adds	r1, r3, #4
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6011      	str	r1, [r2, #0]
 8006dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e08c      	b.n	8006efa <_printf_i+0x1be>
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	6011      	str	r1, [r2, #0]
 8006de4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006de8:	bf18      	it	ne
 8006dea:	b21b      	sxthne	r3, r3
 8006dec:	e7cf      	b.n	8006d8e <_printf_i+0x52>
 8006dee:	6813      	ldr	r3, [r2, #0]
 8006df0:	6825      	ldr	r5, [r4, #0]
 8006df2:	1d18      	adds	r0, r3, #4
 8006df4:	6010      	str	r0, [r2, #0]
 8006df6:	0628      	lsls	r0, r5, #24
 8006df8:	d501      	bpl.n	8006dfe <_printf_i+0xc2>
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	e002      	b.n	8006e04 <_printf_i+0xc8>
 8006dfe:	0668      	lsls	r0, r5, #25
 8006e00:	d5fb      	bpl.n	8006dfa <_printf_i+0xbe>
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	4854      	ldr	r0, [pc, #336]	; (8006f58 <_printf_i+0x21c>)
 8006e06:	296f      	cmp	r1, #111	; 0x6f
 8006e08:	bf14      	ite	ne
 8006e0a:	220a      	movne	r2, #10
 8006e0c:	2208      	moveq	r2, #8
 8006e0e:	2100      	movs	r1, #0
 8006e10:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e14:	6865      	ldr	r5, [r4, #4]
 8006e16:	60a5      	str	r5, [r4, #8]
 8006e18:	2d00      	cmp	r5, #0
 8006e1a:	f2c0 8095 	blt.w	8006f48 <_printf_i+0x20c>
 8006e1e:	6821      	ldr	r1, [r4, #0]
 8006e20:	f021 0104 	bic.w	r1, r1, #4
 8006e24:	6021      	str	r1, [r4, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d13d      	bne.n	8006ea6 <_printf_i+0x16a>
 8006e2a:	2d00      	cmp	r5, #0
 8006e2c:	f040 808e 	bne.w	8006f4c <_printf_i+0x210>
 8006e30:	4665      	mov	r5, ip
 8006e32:	2a08      	cmp	r2, #8
 8006e34:	d10b      	bne.n	8006e4e <_printf_i+0x112>
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	07db      	lsls	r3, r3, #31
 8006e3a:	d508      	bpl.n	8006e4e <_printf_i+0x112>
 8006e3c:	6923      	ldr	r3, [r4, #16]
 8006e3e:	6862      	ldr	r2, [r4, #4]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	bfde      	ittt	le
 8006e44:	2330      	movle	r3, #48	; 0x30
 8006e46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e4e:	ebac 0305 	sub.w	r3, ip, r5
 8006e52:	6123      	str	r3, [r4, #16]
 8006e54:	f8cd 8000 	str.w	r8, [sp]
 8006e58:	463b      	mov	r3, r7
 8006e5a:	aa03      	add	r2, sp, #12
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	4630      	mov	r0, r6
 8006e60:	f7ff fef6 	bl	8006c50 <_printf_common>
 8006e64:	3001      	adds	r0, #1
 8006e66:	d14d      	bne.n	8006f04 <_printf_i+0x1c8>
 8006e68:	f04f 30ff 	mov.w	r0, #4294967295
 8006e6c:	b005      	add	sp, #20
 8006e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e72:	4839      	ldr	r0, [pc, #228]	; (8006f58 <_printf_i+0x21c>)
 8006e74:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006e78:	6813      	ldr	r3, [r2, #0]
 8006e7a:	6821      	ldr	r1, [r4, #0]
 8006e7c:	1d1d      	adds	r5, r3, #4
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6015      	str	r5, [r2, #0]
 8006e82:	060a      	lsls	r2, r1, #24
 8006e84:	d50b      	bpl.n	8006e9e <_printf_i+0x162>
 8006e86:	07ca      	lsls	r2, r1, #31
 8006e88:	bf44      	itt	mi
 8006e8a:	f041 0120 	orrmi.w	r1, r1, #32
 8006e8e:	6021      	strmi	r1, [r4, #0]
 8006e90:	b91b      	cbnz	r3, 8006e9a <_printf_i+0x15e>
 8006e92:	6822      	ldr	r2, [r4, #0]
 8006e94:	f022 0220 	bic.w	r2, r2, #32
 8006e98:	6022      	str	r2, [r4, #0]
 8006e9a:	2210      	movs	r2, #16
 8006e9c:	e7b7      	b.n	8006e0e <_printf_i+0xd2>
 8006e9e:	064d      	lsls	r5, r1, #25
 8006ea0:	bf48      	it	mi
 8006ea2:	b29b      	uxthmi	r3, r3
 8006ea4:	e7ef      	b.n	8006e86 <_printf_i+0x14a>
 8006ea6:	4665      	mov	r5, ip
 8006ea8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006eac:	fb02 3311 	mls	r3, r2, r1, r3
 8006eb0:	5cc3      	ldrb	r3, [r0, r3]
 8006eb2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	2900      	cmp	r1, #0
 8006eba:	d1f5      	bne.n	8006ea8 <_printf_i+0x16c>
 8006ebc:	e7b9      	b.n	8006e32 <_printf_i+0xf6>
 8006ebe:	6813      	ldr	r3, [r2, #0]
 8006ec0:	6825      	ldr	r5, [r4, #0]
 8006ec2:	6961      	ldr	r1, [r4, #20]
 8006ec4:	1d18      	adds	r0, r3, #4
 8006ec6:	6010      	str	r0, [r2, #0]
 8006ec8:	0628      	lsls	r0, r5, #24
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	d501      	bpl.n	8006ed2 <_printf_i+0x196>
 8006ece:	6019      	str	r1, [r3, #0]
 8006ed0:	e002      	b.n	8006ed8 <_printf_i+0x19c>
 8006ed2:	066a      	lsls	r2, r5, #25
 8006ed4:	d5fb      	bpl.n	8006ece <_printf_i+0x192>
 8006ed6:	8019      	strh	r1, [r3, #0]
 8006ed8:	2300      	movs	r3, #0
 8006eda:	6123      	str	r3, [r4, #16]
 8006edc:	4665      	mov	r5, ip
 8006ede:	e7b9      	b.n	8006e54 <_printf_i+0x118>
 8006ee0:	6813      	ldr	r3, [r2, #0]
 8006ee2:	1d19      	adds	r1, r3, #4
 8006ee4:	6011      	str	r1, [r2, #0]
 8006ee6:	681d      	ldr	r5, [r3, #0]
 8006ee8:	6862      	ldr	r2, [r4, #4]
 8006eea:	2100      	movs	r1, #0
 8006eec:	4628      	mov	r0, r5
 8006eee:	f7f9 f987 	bl	8000200 <memchr>
 8006ef2:	b108      	cbz	r0, 8006ef8 <_printf_i+0x1bc>
 8006ef4:	1b40      	subs	r0, r0, r5
 8006ef6:	6060      	str	r0, [r4, #4]
 8006ef8:	6863      	ldr	r3, [r4, #4]
 8006efa:	6123      	str	r3, [r4, #16]
 8006efc:	2300      	movs	r3, #0
 8006efe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f02:	e7a7      	b.n	8006e54 <_printf_i+0x118>
 8006f04:	6923      	ldr	r3, [r4, #16]
 8006f06:	462a      	mov	r2, r5
 8006f08:	4639      	mov	r1, r7
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	47c0      	blx	r8
 8006f0e:	3001      	adds	r0, #1
 8006f10:	d0aa      	beq.n	8006e68 <_printf_i+0x12c>
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	079b      	lsls	r3, r3, #30
 8006f16:	d413      	bmi.n	8006f40 <_printf_i+0x204>
 8006f18:	68e0      	ldr	r0, [r4, #12]
 8006f1a:	9b03      	ldr	r3, [sp, #12]
 8006f1c:	4298      	cmp	r0, r3
 8006f1e:	bfb8      	it	lt
 8006f20:	4618      	movlt	r0, r3
 8006f22:	e7a3      	b.n	8006e6c <_printf_i+0x130>
 8006f24:	2301      	movs	r3, #1
 8006f26:	464a      	mov	r2, r9
 8006f28:	4639      	mov	r1, r7
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	47c0      	blx	r8
 8006f2e:	3001      	adds	r0, #1
 8006f30:	d09a      	beq.n	8006e68 <_printf_i+0x12c>
 8006f32:	3501      	adds	r5, #1
 8006f34:	68e3      	ldr	r3, [r4, #12]
 8006f36:	9a03      	ldr	r2, [sp, #12]
 8006f38:	1a9b      	subs	r3, r3, r2
 8006f3a:	42ab      	cmp	r3, r5
 8006f3c:	dcf2      	bgt.n	8006f24 <_printf_i+0x1e8>
 8006f3e:	e7eb      	b.n	8006f18 <_printf_i+0x1dc>
 8006f40:	2500      	movs	r5, #0
 8006f42:	f104 0919 	add.w	r9, r4, #25
 8006f46:	e7f5      	b.n	8006f34 <_printf_i+0x1f8>
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1ac      	bne.n	8006ea6 <_printf_i+0x16a>
 8006f4c:	7803      	ldrb	r3, [r0, #0]
 8006f4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f56:	e76c      	b.n	8006e32 <_printf_i+0xf6>
 8006f58:	08081aad 	.word	0x08081aad
 8006f5c:	08081abe 	.word	0x08081abe

08006f60 <_sbrk_r>:
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	4c06      	ldr	r4, [pc, #24]	; (8006f7c <_sbrk_r+0x1c>)
 8006f64:	2300      	movs	r3, #0
 8006f66:	4605      	mov	r5, r0
 8006f68:	4608      	mov	r0, r1
 8006f6a:	6023      	str	r3, [r4, #0]
 8006f6c:	f7fa fd12 	bl	8001994 <_sbrk>
 8006f70:	1c43      	adds	r3, r0, #1
 8006f72:	d102      	bne.n	8006f7a <_sbrk_r+0x1a>
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	b103      	cbz	r3, 8006f7a <_sbrk_r+0x1a>
 8006f78:	602b      	str	r3, [r5, #0]
 8006f7a:	bd38      	pop	{r3, r4, r5, pc}
 8006f7c:	20000298 	.word	0x20000298

08006f80 <__sread>:
 8006f80:	b510      	push	{r4, lr}
 8006f82:	460c      	mov	r4, r1
 8006f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f88:	f000 f896 	bl	80070b8 <_read_r>
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	bfab      	itete	ge
 8006f90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f92:	89a3      	ldrhlt	r3, [r4, #12]
 8006f94:	181b      	addge	r3, r3, r0
 8006f96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f9a:	bfac      	ite	ge
 8006f9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f9e:	81a3      	strhlt	r3, [r4, #12]
 8006fa0:	bd10      	pop	{r4, pc}

08006fa2 <__swrite>:
 8006fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fa6:	461f      	mov	r7, r3
 8006fa8:	898b      	ldrh	r3, [r1, #12]
 8006faa:	05db      	lsls	r3, r3, #23
 8006fac:	4605      	mov	r5, r0
 8006fae:	460c      	mov	r4, r1
 8006fb0:	4616      	mov	r6, r2
 8006fb2:	d505      	bpl.n	8006fc0 <__swrite+0x1e>
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fbc:	f000 f868 	bl	8007090 <_lseek_r>
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fca:	81a3      	strh	r3, [r4, #12]
 8006fcc:	4632      	mov	r2, r6
 8006fce:	463b      	mov	r3, r7
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fd6:	f000 b817 	b.w	8007008 <_write_r>

08006fda <__sseek>:
 8006fda:	b510      	push	{r4, lr}
 8006fdc:	460c      	mov	r4, r1
 8006fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe2:	f000 f855 	bl	8007090 <_lseek_r>
 8006fe6:	1c43      	adds	r3, r0, #1
 8006fe8:	89a3      	ldrh	r3, [r4, #12]
 8006fea:	bf15      	itete	ne
 8006fec:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ff6:	81a3      	strheq	r3, [r4, #12]
 8006ff8:	bf18      	it	ne
 8006ffa:	81a3      	strhne	r3, [r4, #12]
 8006ffc:	bd10      	pop	{r4, pc}

08006ffe <__sclose>:
 8006ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007002:	f000 b813 	b.w	800702c <_close_r>
	...

08007008 <_write_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	4c07      	ldr	r4, [pc, #28]	; (8007028 <_write_r+0x20>)
 800700c:	4605      	mov	r5, r0
 800700e:	4608      	mov	r0, r1
 8007010:	4611      	mov	r1, r2
 8007012:	2200      	movs	r2, #0
 8007014:	6022      	str	r2, [r4, #0]
 8007016:	461a      	mov	r2, r3
 8007018:	f7fa fc6b 	bl	80018f2 <_write>
 800701c:	1c43      	adds	r3, r0, #1
 800701e:	d102      	bne.n	8007026 <_write_r+0x1e>
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	b103      	cbz	r3, 8007026 <_write_r+0x1e>
 8007024:	602b      	str	r3, [r5, #0]
 8007026:	bd38      	pop	{r3, r4, r5, pc}
 8007028:	20000298 	.word	0x20000298

0800702c <_close_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	4c06      	ldr	r4, [pc, #24]	; (8007048 <_close_r+0x1c>)
 8007030:	2300      	movs	r3, #0
 8007032:	4605      	mov	r5, r0
 8007034:	4608      	mov	r0, r1
 8007036:	6023      	str	r3, [r4, #0]
 8007038:	f7fa fc77 	bl	800192a <_close>
 800703c:	1c43      	adds	r3, r0, #1
 800703e:	d102      	bne.n	8007046 <_close_r+0x1a>
 8007040:	6823      	ldr	r3, [r4, #0]
 8007042:	b103      	cbz	r3, 8007046 <_close_r+0x1a>
 8007044:	602b      	str	r3, [r5, #0]
 8007046:	bd38      	pop	{r3, r4, r5, pc}
 8007048:	20000298 	.word	0x20000298

0800704c <_fstat_r>:
 800704c:	b538      	push	{r3, r4, r5, lr}
 800704e:	4c07      	ldr	r4, [pc, #28]	; (800706c <_fstat_r+0x20>)
 8007050:	2300      	movs	r3, #0
 8007052:	4605      	mov	r5, r0
 8007054:	4608      	mov	r0, r1
 8007056:	4611      	mov	r1, r2
 8007058:	6023      	str	r3, [r4, #0]
 800705a:	f7fa fc72 	bl	8001942 <_fstat>
 800705e:	1c43      	adds	r3, r0, #1
 8007060:	d102      	bne.n	8007068 <_fstat_r+0x1c>
 8007062:	6823      	ldr	r3, [r4, #0]
 8007064:	b103      	cbz	r3, 8007068 <_fstat_r+0x1c>
 8007066:	602b      	str	r3, [r5, #0]
 8007068:	bd38      	pop	{r3, r4, r5, pc}
 800706a:	bf00      	nop
 800706c:	20000298 	.word	0x20000298

08007070 <_isatty_r>:
 8007070:	b538      	push	{r3, r4, r5, lr}
 8007072:	4c06      	ldr	r4, [pc, #24]	; (800708c <_isatty_r+0x1c>)
 8007074:	2300      	movs	r3, #0
 8007076:	4605      	mov	r5, r0
 8007078:	4608      	mov	r0, r1
 800707a:	6023      	str	r3, [r4, #0]
 800707c:	f7fa fc71 	bl	8001962 <_isatty>
 8007080:	1c43      	adds	r3, r0, #1
 8007082:	d102      	bne.n	800708a <_isatty_r+0x1a>
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	b103      	cbz	r3, 800708a <_isatty_r+0x1a>
 8007088:	602b      	str	r3, [r5, #0]
 800708a:	bd38      	pop	{r3, r4, r5, pc}
 800708c:	20000298 	.word	0x20000298

08007090 <_lseek_r>:
 8007090:	b538      	push	{r3, r4, r5, lr}
 8007092:	4c07      	ldr	r4, [pc, #28]	; (80070b0 <_lseek_r+0x20>)
 8007094:	4605      	mov	r5, r0
 8007096:	4608      	mov	r0, r1
 8007098:	4611      	mov	r1, r2
 800709a:	2200      	movs	r2, #0
 800709c:	6022      	str	r2, [r4, #0]
 800709e:	461a      	mov	r2, r3
 80070a0:	f7fa fc6a 	bl	8001978 <_lseek>
 80070a4:	1c43      	adds	r3, r0, #1
 80070a6:	d102      	bne.n	80070ae <_lseek_r+0x1e>
 80070a8:	6823      	ldr	r3, [r4, #0]
 80070aa:	b103      	cbz	r3, 80070ae <_lseek_r+0x1e>
 80070ac:	602b      	str	r3, [r5, #0]
 80070ae:	bd38      	pop	{r3, r4, r5, pc}
 80070b0:	20000298 	.word	0x20000298

080070b4 <__malloc_lock>:
 80070b4:	4770      	bx	lr

080070b6 <__malloc_unlock>:
 80070b6:	4770      	bx	lr

080070b8 <_read_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4c07      	ldr	r4, [pc, #28]	; (80070d8 <_read_r+0x20>)
 80070bc:	4605      	mov	r5, r0
 80070be:	4608      	mov	r0, r1
 80070c0:	4611      	mov	r1, r2
 80070c2:	2200      	movs	r2, #0
 80070c4:	6022      	str	r2, [r4, #0]
 80070c6:	461a      	mov	r2, r3
 80070c8:	f7fa fbf6 	bl	80018b8 <_read>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	d102      	bne.n	80070d6 <_read_r+0x1e>
 80070d0:	6823      	ldr	r3, [r4, #0]
 80070d2:	b103      	cbz	r3, 80070d6 <_read_r+0x1e>
 80070d4:	602b      	str	r3, [r5, #0]
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
 80070d8:	20000298 	.word	0x20000298

080070dc <_init>:
 80070dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070de:	bf00      	nop
 80070e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070e2:	bc08      	pop	{r3}
 80070e4:	469e      	mov	lr, r3
 80070e6:	4770      	bx	lr

080070e8 <_fini>:
 80070e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ea:	bf00      	nop
 80070ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ee:	bc08      	pop	{r3}
 80070f0:	469e      	mov	lr, r3
 80070f2:	4770      	bx	lr
