
EpdSpi_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c20  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000f1ca4  08003de0  08003de0  00013de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080f5a84  080f5a84  00110070  2**0
                  CONTENTS
  4 .ARM          00000000  080f5a84  080f5a84  00110070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080f5a84  080f5a84  00110070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080f5a84  080f5a84  00105a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080f5a88  080f5a88  00105a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080f5a8c  00110000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00078e58  20000070  080f5afc  00110070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20078ec8  080f5afc  00118ec8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00110070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6cd  00000000  00000000  001100a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dfb  00000000  00000000  0011c76d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f0  00000000  00000000  0011e568  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e0  00000000  00000000  0011ef58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000296cf  00000000  00000000  0011f838  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008e3a  00000000  00000000  00148f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fb2aa  00000000  00000000  00151d41  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0024cfeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d10  00000000  00000000  0024d068  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08003dc8 	.word	0x08003dc8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	08003dc8 	.word	0x08003dc8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <LCDWaitForReady>:

//-----------------------------------------------------------
//Host controller function 1---Wait for host data Bus Ready
//-----------------------------------------------------------
void LCDWaitForReady()
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0

	//while(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET )

	uint8_t ulData = HAL_GPIO_ReadPin(EPD_HRDY_GPIO_Port, EPD_HRDY_Pin);
 80002a6:	2120      	movs	r1, #32
 80002a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ac:	f001 f988 	bl	80015c0 <HAL_GPIO_ReadPin>
 80002b0:	4603      	mov	r3, r0
 80002b2:	71fb      	strb	r3, [r7, #7]
	while(ulData == 0)
 80002b4:	e006      	b.n	80002c4 <LCDWaitForReady+0x24>
	{
		ulData = HAL_GPIO_ReadPin(EPD_HRDY_GPIO_Port, EPD_HRDY_Pin);
 80002b6:	2120      	movs	r1, #32
 80002b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002bc:	f001 f980 	bl	80015c0 <HAL_GPIO_ReadPin>
 80002c0:	4603      	mov	r3, r0
 80002c2:	71fb      	strb	r3, [r7, #7]
	while(ulData == 0)
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d0f5      	beq.n	80002b6 <LCDWaitForReady+0x16>
	}
}
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <LCDWriteCmdCode>:

//-----------------------------------------------------------
//Host controller function 2---Write command code to host data Bus
//-----------------------------------------------------------
void LCDWriteCmdCode(uint16_t usCmdCode)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	80fb      	strh	r3, [r7, #6]
	//uint16_t wPreamble = 0x6000;


	//uint8_t wPreamble[2] = {0x00, 0x60};
	//uint8_t wDat[2] = {usCmdCode, usCmdCode>>8};
	uint8_t dat[4]={0x00, 0x60, usCmdCode, usCmdCode>>8};
 80002de:	2300      	movs	r3, #0
 80002e0:	733b      	strb	r3, [r7, #12]
 80002e2:	2360      	movs	r3, #96	; 0x60
 80002e4:	737b      	strb	r3, [r7, #13]
 80002e6:	88fb      	ldrh	r3, [r7, #6]
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	73bb      	strb	r3, [r7, #14]
 80002ec:	88fb      	ldrh	r3, [r7, #6]
 80002ee:	0a1b      	lsrs	r3, r3, #8
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	73fb      	strb	r3, [r7, #15]
	LCDWaitForReady();
 80002f6:	f7ff ffd3 	bl	80002a0 <LCDWaitForReady>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2101      	movs	r1, #1
 80002fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000302:	f001 f975 	bl	80015f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, dat, 2, HAL_MAX_DELAY);
 8000306:	f107 010c 	add.w	r1, r7, #12
 800030a:	f04f 33ff 	mov.w	r3, #4294967295
 800030e:	2202      	movs	r2, #2
 8000310:	4806      	ldr	r0, [pc, #24]	; (800032c <LCDWriteCmdCode+0x58>)
 8000312:	f002 f949 	bl	80025a8 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
	//LCDWaitForReady();
	//HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000316:	2201      	movs	r2, #1
 8000318:	2101      	movs	r1, #1
 800031a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800031e:	f001 f967 	bl	80015f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &CmdMsb, 1, HAL_MAX_DELAY);
	HAL_SPI_Transmit(&hspi1, &CmdLsb, 1, HAL_MAX_DELAY);

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
*/
}
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20078e5c 	.word	0x20078e5c

08000330 <LCDWriteData>:

//-----------------------------------------------------------
//Host controller function 3---Write Data to host data Bus
//-----------------------------------------------------------
void LCDWriteData(uint16_t usData)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	80fb      	strh	r3, [r7, #6]

	uint8_t dat[4]={ 0x00, 0x00, (uint8_t)usData,(uint8_t)( usData>>8)};
 800033a:	2300      	movs	r3, #0
 800033c:	733b      	strb	r3, [r7, #12]
 800033e:	2300      	movs	r3, #0
 8000340:	737b      	strb	r3, [r7, #13]
 8000342:	88fb      	ldrh	r3, [r7, #6]
 8000344:	b2db      	uxtb	r3, r3
 8000346:	73bb      	strb	r3, [r7, #14]
 8000348:	88fb      	ldrh	r3, [r7, #6]
 800034a:	0a1b      	lsrs	r3, r3, #8
 800034c:	b29b      	uxth	r3, r3
 800034e:	b2db      	uxtb	r3, r3
 8000350:	73fb      	strb	r3, [r7, #15]
	//uint8_t wPreamble[2] = {0x00, 0x00};
	//uint8_t wDat[2] = { (uint8_t)usData,(uint8_t)( usData>>8)};
	LCDWaitForReady();
 8000352:	f7ff ffa5 	bl	80002a0 <LCDWaitForReady>

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	2101      	movs	r1, #1
 800035a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035e:	f001 f947 	bl	80015f0 <HAL_GPIO_WritePin>
	//HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
	HAL_SPI_Transmit(&hspi1, dat, 2, HAL_MAX_DELAY);
 8000362:	f107 010c 	add.w	r1, r7, #12
 8000366:	f04f 33ff 	mov.w	r3, #4294967295
 800036a:	2202      	movs	r2, #2
 800036c:	4806      	ldr	r0, [pc, #24]	; (8000388 <LCDWriteData+0x58>)
 800036e:	f002 f91b 	bl	80025a8 <HAL_SPI_Transmit>
	//LCDWaitForReady();
	//HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000372:	2201      	movs	r2, #1
 8000374:	2101      	movs	r1, #1
 8000376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800037a:	f001 f939 	bl	80015f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &DatLsb, 1, HAL_MAX_DELAY);

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 800037e:	bf00      	nop
 8000380:	3710      	adds	r7, #16
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	20078e5c 	.word	0x20078e5c

0800038c <LCDWriteNData>:

void LCDWriteNData(uint16_t* pwBuf, uint32_t ulSizeWordCnt)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b086      	sub	sp, #24
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
	uint32_t i;


	uint8_t wPreamble[2] = {0x00, 0x00};
 8000396:	2300      	movs	r3, #0
 8000398:	743b      	strb	r3, [r7, #16]
 800039a:	2300      	movs	r3, #0
 800039c:	747b      	strb	r3, [r7, #17]
	uint8_t wDat[2];
	LCDWaitForReady();
 800039e:	f7ff ff7f 	bl	80002a0 <LCDWaitForReady>

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2101      	movs	r1, #1
 80003a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003aa:	f001 f921 	bl	80015f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 80003ae:	f107 0110 	add.w	r1, r7, #16
 80003b2:	f04f 33ff 	mov.w	r3, #4294967295
 80003b6:	2201      	movs	r2, #1
 80003b8:	4818      	ldr	r0, [pc, #96]	; (800041c <LCDWriteNData+0x90>)
 80003ba:	f002 f8f5 	bl	80025a8 <HAL_SPI_Transmit>
	LCDWaitForReady();
 80003be:	f7ff ff6f 	bl	80002a0 <LCDWaitForReady>
	for(i=0;i<ulSizeWordCnt;i++)
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]
 80003c6:	e01a      	b.n	80003fe <LCDWriteNData+0x72>
		{
		wDat[0]=pwBuf[i];
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	005b      	lsls	r3, r3, #1
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	4413      	add	r3, r2
 80003d0:	881b      	ldrh	r3, [r3, #0]
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	733b      	strb	r3, [r7, #12]
		wDat[1]=pwBuf[i]>>8;
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	687a      	ldr	r2, [r7, #4]
 80003dc:	4413      	add	r3, r2
 80003de:	881b      	ldrh	r3, [r3, #0]
 80003e0:	0a1b      	lsrs	r3, r3, #8
 80003e2:	b29b      	uxth	r3, r3
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	737b      	strb	r3, [r7, #13]
		HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
 80003e8:	f107 010c 	add.w	r1, r7, #12
 80003ec:	f04f 33ff 	mov.w	r3, #4294967295
 80003f0:	2201      	movs	r2, #1
 80003f2:	480a      	ldr	r0, [pc, #40]	; (800041c <LCDWriteNData+0x90>)
 80003f4:	f002 f8d8 	bl	80025a8 <HAL_SPI_Transmit>
	for(i=0;i<ulSizeWordCnt;i++)
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	3301      	adds	r3, #1
 80003fc:	617b      	str	r3, [r7, #20]
 80003fe:	697a      	ldr	r2, [r7, #20]
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	429a      	cmp	r2, r3
 8000404:	d3e0      	bcc.n	80003c8 <LCDWriteNData+0x3c>
		}

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000406:	2201      	movs	r2, #1
 8000408:	2101      	movs	r1, #1
 800040a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800040e:	f001 f8ef 	bl	80015f0 <HAL_GPIO_WritePin>
	}

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 8000412:	bf00      	nop
 8000414:	3718      	adds	r7, #24
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20078e5c 	.word	0x20078e5c

08000420 <LCDReadData>:

//-----------------------------------------------------------
//Host controller function 4---Read Data from host data Bus
//-----------------------------------------------------------
uint16_t LCDReadData()
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af02      	add	r7, sp, #8

	uint8_t wRLsb[2];
	uint16_t wRData;
	uint8_t wdummy[2] = {0};
 8000426:	2300      	movs	r3, #0
 8000428:	813b      	strh	r3, [r7, #8]
	uint8_t rdummy[2] = {0};
 800042a:	2300      	movs	r3, #0
 800042c:	80bb      	strh	r3, [r7, #4]
	uint8_t wPreamble[2] = {0x00, 0x10};
 800042e:	2300      	movs	r3, #0
 8000430:	703b      	strb	r3, [r7, #0]
 8000432:	2310      	movs	r3, #16
 8000434:	707b      	strb	r3, [r7, #1]

	LCDWaitForReady();
 8000436:	f7ff ff33 	bl	80002a0 <LCDWaitForReady>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2101      	movs	r1, #1
 800043e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000442:	f001 f8d5 	bl	80015f0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 8000446:	4639      	mov	r1, r7
 8000448:	f04f 33ff 	mov.w	r3, #4294967295
 800044c:	2201      	movs	r2, #1
 800044e:	4818      	ldr	r0, [pc, #96]	; (80004b0 <LCDReadData+0x90>)
 8000450:	f002 f8aa 	bl	80025a8 <HAL_SPI_Transmit>
	LCDWaitForReady();
 8000454:	f7ff ff24 	bl	80002a0 <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, rdummy, 1,HAL_MAX_DELAY);
 8000458:	1d3a      	adds	r2, r7, #4
 800045a:	f107 0108 	add.w	r1, r7, #8
 800045e:	f04f 33ff 	mov.w	r3, #4294967295
 8000462:	9300      	str	r3, [sp, #0]
 8000464:	2301      	movs	r3, #1
 8000466:	4812      	ldr	r0, [pc, #72]	; (80004b0 <LCDReadData+0x90>)
 8000468:	f002 fa04 	bl	8002874 <HAL_SPI_TransmitReceive>

	LCDWaitForReady();
 800046c:	f7ff ff18 	bl	80002a0 <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, wRLsb, 1,HAL_MAX_DELAY);
 8000470:	f107 020c 	add.w	r2, r7, #12
 8000474:	f107 0108 	add.w	r1, r7, #8
 8000478:	f04f 33ff 	mov.w	r3, #4294967295
 800047c:	9300      	str	r3, [sp, #0]
 800047e:	2301      	movs	r3, #1
 8000480:	480b      	ldr	r0, [pc, #44]	; (80004b0 <LCDReadData+0x90>)
 8000482:	f002 f9f7 	bl	8002874 <HAL_SPI_TransmitReceive>

	wRData = wRLsb[1]<<8;
 8000486:	7b7b      	ldrb	r3, [r7, #13]
 8000488:	b29b      	uxth	r3, r3
 800048a:	021b      	lsls	r3, r3, #8
 800048c:	81fb      	strh	r3, [r7, #14]
	wRData |= wRLsb[0];
 800048e:	7b3b      	ldrb	r3, [r7, #12]
 8000490:	b29a      	uxth	r2, r3
 8000492:	89fb      	ldrh	r3, [r7, #14]
 8000494:	4313      	orrs	r3, r2
 8000496:	81fb      	strh	r3, [r7, #14]
	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000498:	2201      	movs	r2, #1
 800049a:	2101      	movs	r1, #1
 800049c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a0:	f001 f8a6 	bl	80015f0 <HAL_GPIO_WritePin>

	return wRData;
 80004a4:	89fb      	ldrh	r3, [r7, #14]
	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);

	return wRData;
	*/
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3710      	adds	r7, #16
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	20078e5c 	.word	0x20078e5c

080004b4 <LCDReadNData>:

//-----------------------------------------------------------
//  Read Burst N words Data
//-----------------------------------------------------------
void LCDReadNData(uint16_t* pwBuf, uint32_t ulSizeWordCnt)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08a      	sub	sp, #40	; 0x28
 80004b8:	af02      	add	r7, sp, #8
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]

	uint32_t i;

	uint8_t wRLsb[2];
	//uint16_t wRData;
	uint8_t wdummy[2] = {0};
 80004be:	2300      	movs	r3, #0
 80004c0:	82bb      	strh	r3, [r7, #20]
	uint8_t rdummy[2] = {0};
 80004c2:	2300      	movs	r3, #0
 80004c4:	823b      	strh	r3, [r7, #16]
	uint8_t wPreamble[2] = {0x00, 0x10};
 80004c6:	2300      	movs	r3, #0
 80004c8:	733b      	strb	r3, [r7, #12]
 80004ca:	2310      	movs	r3, #16
 80004cc:	737b      	strb	r3, [r7, #13]
	LCDWaitForReady();
 80004ce:	f7ff fee7 	bl	80002a0 <LCDWaitForReady>

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2101      	movs	r1, #1
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004da:	f001 f889 	bl	80015f0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 80004de:	f107 010c 	add.w	r1, r7, #12
 80004e2:	f04f 33ff 	mov.w	r3, #4294967295
 80004e6:	2201      	movs	r2, #1
 80004e8:	4823      	ldr	r0, [pc, #140]	; (8000578 <LCDReadNData+0xc4>)
 80004ea:	f002 f85d 	bl	80025a8 <HAL_SPI_Transmit>

	LCDWaitForReady();
 80004ee:	f7ff fed7 	bl	80002a0 <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, rdummy, 1,HAL_MAX_DELAY);
 80004f2:	f107 0210 	add.w	r2, r7, #16
 80004f6:	f107 0114 	add.w	r1, r7, #20
 80004fa:	f04f 33ff 	mov.w	r3, #4294967295
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	2301      	movs	r3, #1
 8000502:	481d      	ldr	r0, [pc, #116]	; (8000578 <LCDReadNData+0xc4>)
 8000504:	f002 f9b6 	bl	8002874 <HAL_SPI_TransmitReceive>

	LCDWaitForReady();
 8000508:	f7ff feca 	bl	80002a0 <LCDWaitForReady>

		for(i=0;i<ulSizeWordCnt;i++)
 800050c:	2300      	movs	r3, #0
 800050e:	61fb      	str	r3, [r7, #28]
 8000510:	e024      	b.n	800055c <LCDReadNData+0xa8>
		{
			HAL_SPI_TransmitReceive(&hspi1, wdummy, wRLsb, 1,HAL_MAX_DELAY);
 8000512:	f107 0218 	add.w	r2, r7, #24
 8000516:	f107 0114 	add.w	r1, r7, #20
 800051a:	f04f 33ff 	mov.w	r3, #4294967295
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	2301      	movs	r3, #1
 8000522:	4815      	ldr	r0, [pc, #84]	; (8000578 <LCDReadNData+0xc4>)
 8000524:	f002 f9a6 	bl	8002874 <HAL_SPI_TransmitReceive>
			pwBuf[i] = wRLsb[1]<<8;
 8000528:	7e7b      	ldrb	r3, [r7, #25]
 800052a:	b29a      	uxth	r2, r3
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	6879      	ldr	r1, [r7, #4]
 8000532:	440b      	add	r3, r1
 8000534:	0212      	lsls	r2, r2, #8
 8000536:	b292      	uxth	r2, r2
 8000538:	801a      	strh	r2, [r3, #0]
			pwBuf[i] |= wRLsb[0];
 800053a:	69fb      	ldr	r3, [r7, #28]
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	4413      	add	r3, r2
 8000542:	8819      	ldrh	r1, [r3, #0]
 8000544:	7e3b      	ldrb	r3, [r7, #24]
 8000546:	b29a      	uxth	r2, r3
 8000548:	69fb      	ldr	r3, [r7, #28]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	4403      	add	r3, r0
 8000550:	430a      	orrs	r2, r1
 8000552:	b292      	uxth	r2, r2
 8000554:	801a      	strh	r2, [r3, #0]
		for(i=0;i<ulSizeWordCnt;i++)
 8000556:	69fb      	ldr	r3, [r7, #28]
 8000558:	3301      	adds	r3, #1
 800055a:	61fb      	str	r3, [r7, #28]
 800055c:	69fa      	ldr	r2, [r7, #28]
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	429a      	cmp	r2, r3
 8000562:	d3d6      	bcc.n	8000512 <LCDReadNData+0x5e>
		}

		HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2101      	movs	r1, #1
 8000568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056c:	f001 f840 	bl	80015f0 <HAL_GPIO_WritePin>
	}

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 8000570:	bf00      	nop
 8000572:	3720      	adds	r7, #32
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20078e5c 	.word	0x20078e5c

0800057c <LCDSendCmdArg>:

//-----------------------------------------------------------
//Host controller function 5---Write command to host data Bus with aruments
//-----------------------------------------------------------
void LCDSendCmdArg(uint16_t usCmdCode,uint16_t* pArg, uint16_t usNumArg)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	6039      	str	r1, [r7, #0]
 8000586:	80fb      	strh	r3, [r7, #6]
 8000588:	4613      	mov	r3, r2
 800058a:	80bb      	strh	r3, [r7, #4]
     uint16_t i;
     //Send Cmd code
     LCDWriteCmdCode(usCmdCode);
 800058c:	88fb      	ldrh	r3, [r7, #6]
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff fea0 	bl	80002d4 <LCDWriteCmdCode>
     //Send Data
     for(i=0;i<usNumArg;i++)
 8000594:	2300      	movs	r3, #0
 8000596:	81fb      	strh	r3, [r7, #14]
 8000598:	e00a      	b.n	80005b0 <LCDSendCmdArg+0x34>
     {
         LCDWriteData(pArg[i]);
 800059a:	89fb      	ldrh	r3, [r7, #14]
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	683a      	ldr	r2, [r7, #0]
 80005a0:	4413      	add	r3, r2
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fec3 	bl	8000330 <LCDWriteData>
     for(i=0;i<usNumArg;i++)
 80005aa:	89fb      	ldrh	r3, [r7, #14]
 80005ac:	3301      	adds	r3, #1
 80005ae:	81fb      	strh	r3, [r7, #14]
 80005b0:	89fa      	ldrh	r2, [r7, #14]
 80005b2:	88bb      	ldrh	r3, [r7, #4]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d3f0      	bcc.n	800059a <LCDSendCmdArg+0x1e>
     }
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <IT8951ReadReg>:

//-----------------------------------------------------------
//Host Cmd 4---REG_RD
//-----------------------------------------------------------
uint16_t IT8951ReadReg(uint16_t usRegAddr)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	80fb      	strh	r3, [r7, #6]
	uint16_t usData;

	//Send Cmd and Register Address
	LCDWriteCmdCode(IT8951_TCON_REG_RD);
 80005ca:	2010      	movs	r0, #16
 80005cc:	f7ff fe82 	bl	80002d4 <LCDWriteCmdCode>
	LCDWriteData(usRegAddr);
 80005d0:	88fb      	ldrh	r3, [r7, #6]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff feac 	bl	8000330 <LCDWriteData>
	//Read data from Host Data bus
	usData = LCDReadData();
 80005d8:	f7ff ff22 	bl	8000420 <LCDReadData>
 80005dc:	4603      	mov	r3, r0
 80005de:	81fb      	strh	r3, [r7, #14]
	return usData;
 80005e0:	89fb      	ldrh	r3, [r7, #14]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <IT8951WriteReg>:
//-----------------------------------------------------------
//Host Cmd 5---REG_WR
//-----------------------------------------------------------
void IT8951WriteReg(uint16_t usRegAddr,uint16_t usValue)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b082      	sub	sp, #8
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	4603      	mov	r3, r0
 80005f2:	460a      	mov	r2, r1
 80005f4:	80fb      	strh	r3, [r7, #6]
 80005f6:	4613      	mov	r3, r2
 80005f8:	80bb      	strh	r3, [r7, #4]
	//Send Cmd , Register Address and Write Value
	LCDWriteCmdCode(IT8951_TCON_REG_WR);
 80005fa:	2011      	movs	r0, #17
 80005fc:	f7ff fe6a 	bl	80002d4 <LCDWriteCmdCode>
	LCDWriteData(usRegAddr);
 8000600:	88fb      	ldrh	r3, [r7, #6]
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff fe94 	bl	8000330 <LCDWriteData>
	LCDWriteData(usValue);
 8000608:	88bb      	ldrh	r3, [r7, #4]
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff fe90 	bl	8000330 <LCDWriteData>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <IT8951LoadImgAreaStart>:
}
//-----------------------------------------------------------
//Host Cmd 11---LD_IMG_AREA
//-----------------------------------------------------------
void IT8951LoadImgAreaStart(IT8951LdImgInfo* pstLdImgInfo ,IT8951AreaImgInfo* pstAreaImgInfo)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
    uint16_t usArg[5];
    //Setting Argument for Load image start
    usArg[0] = (pstLdImgInfo->usEndianType << 8 )
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	021b      	lsls	r3, r3, #8
    |(pstLdImgInfo->usPixelFormat << 4)
 8000628:	b21a      	sxth	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	885b      	ldrh	r3, [r3, #2]
 800062e:	011b      	lsls	r3, r3, #4
 8000630:	b21b      	sxth	r3, r3
 8000632:	4313      	orrs	r3, r2
 8000634:	b21a      	sxth	r2, r3
    |(pstLdImgInfo->usRotate);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	889b      	ldrh	r3, [r3, #4]
 800063a:	b21b      	sxth	r3, r3
 800063c:	4313      	orrs	r3, r2
 800063e:	b21b      	sxth	r3, r3
 8000640:	b29b      	uxth	r3, r3
    usArg[0] = (pstLdImgInfo->usEndianType << 8 )
 8000642:	81bb      	strh	r3, [r7, #12]
    usArg[1] = pstAreaImgInfo->usX;
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	81fb      	strh	r3, [r7, #14]
    usArg[2] = pstAreaImgInfo->usY;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	885b      	ldrh	r3, [r3, #2]
 800064e:	823b      	strh	r3, [r7, #16]
    usArg[3] = pstAreaImgInfo->usWidth;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	889b      	ldrh	r3, [r3, #4]
 8000654:	827b      	strh	r3, [r7, #18]
    usArg[4] = pstAreaImgInfo->usHeight;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	88db      	ldrh	r3, [r3, #6]
 800065a:	82bb      	strh	r3, [r7, #20]
    //Send Cmd and Args
    LCDSendCmdArg(IT8951_TCON_LD_IMG_AREA , usArg , 5);
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2205      	movs	r2, #5
 8000662:	4619      	mov	r1, r3
 8000664:	2021      	movs	r0, #33	; 0x21
 8000666:	f7ff ff89 	bl	800057c <LCDSendCmdArg>
}
 800066a:	bf00      	nop
 800066c:	3718      	adds	r7, #24
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <IT8951LoadImgEnd>:
//-----------------------------------------------------------
//Host Cmd 12---LD_IMG_END
//-----------------------------------------------------------
void IT8951LoadImgEnd(void)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	af00      	add	r7, sp, #0
    LCDWriteCmdCode(IT8951_TCON_LD_IMG_END);
 8000676:	2022      	movs	r0, #34	; 0x22
 8000678:	f7ff fe2c 	bl	80002d4 <LCDWriteCmdCode>
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}

08000680 <GetIT8951SystemInfo>:

void GetIT8951SystemInfo(void* pBuf)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	uint16_t* pusWord = (uint16_t*)pBuf;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	60fb      	str	r3, [r7, #12]
	IT8951DevInfo* pstDevInfo;

	//Send I80 CMD
	LCDWriteCmdCode(USDEF_I80_CMD_GET_DEV_INFO);
 800068c:	f240 3002 	movw	r0, #770	; 0x302
 8000690:	f7ff fe20 	bl	80002d4 <LCDWriteCmdCode>

	//Burst Read Request for SPI interface only
	LCDReadNData(pusWord, sizeof(IT8951DevInfo)/2);//Polling HRDY for each words(2-bytes) if possible
 8000694:	2114      	movs	r1, #20
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f7ff ff0c 	bl	80004b4 <LCDReadNData>

	//Show Device information of IT8951
	pstDevInfo = (IT8951DevInfo*)pBuf;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	60bb      	str	r3, [r7, #8]
	printf("Panel(W,H) = (%d,%d)\r\n",
	pstDevInfo->usPanelW, pstDevInfo->usPanelH );
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	881b      	ldrh	r3, [r3, #0]
	printf("Panel(W,H) = (%d,%d)\r\n",
 80006a4:	4619      	mov	r1, r3
	pstDevInfo->usPanelW, pstDevInfo->usPanelH );
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	885b      	ldrh	r3, [r3, #2]
	printf("Panel(W,H) = (%d,%d)\r\n",
 80006aa:	461a      	mov	r2, r3
 80006ac:	480e      	ldr	r0, [pc, #56]	; (80006e8 <GetIT8951SystemInfo+0x68>)
 80006ae:	f002 fc43 	bl	8002f38 <iprintf>
	printf("Image Buffer Address = %X\r\n",
	pstDevInfo->usImgBufAddrL | (pstDevInfo->usImgBufAddrH << 16));
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	889b      	ldrh	r3, [r3, #4]
 80006b6:	461a      	mov	r2, r3
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	88db      	ldrh	r3, [r3, #6]
 80006bc:	041b      	lsls	r3, r3, #16
	printf("Image Buffer Address = %X\r\n",
 80006be:	4313      	orrs	r3, r2
 80006c0:	4619      	mov	r1, r3
 80006c2:	480a      	ldr	r0, [pc, #40]	; (80006ec <GetIT8951SystemInfo+0x6c>)
 80006c4:	f002 fc38 	bl	8002f38 <iprintf>
	//Show Firmware and LUT Version
	printf("FW Version = %s\r\n", (uint8_t*)pstDevInfo->usFWVersion);
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	3308      	adds	r3, #8
 80006cc:	4619      	mov	r1, r3
 80006ce:	4808      	ldr	r0, [pc, #32]	; (80006f0 <GetIT8951SystemInfo+0x70>)
 80006d0:	f002 fc32 	bl	8002f38 <iprintf>
	printf("LUT Version = %s\r\n", (uint8_t*)pstDevInfo->usLUTVersion);
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	3318      	adds	r3, #24
 80006d8:	4619      	mov	r1, r3
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <GetIT8951SystemInfo+0x74>)
 80006dc:	f002 fc2c 	bl	8002f38 <iprintf>
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	08003de0 	.word	0x08003de0
 80006ec:	08003df8 	.word	0x08003df8
 80006f0:	08003e14 	.word	0x08003e14
 80006f4:	08003e28 	.word	0x08003e28

080006f8 <IT8951SetImgBufBaseAddr>:

//-----------------------------------------------------------
//Initial function 2---Set Image buffer base address
//-----------------------------------------------------------
void IT8951SetImgBufBaseAddr(uint32_t ulImgBufAddr)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	uint16_t usWordH = (uint16_t)((ulImgBufAddr >> 16) & 0x0000FFFF);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	0c1b      	lsrs	r3, r3, #16
 8000704:	81fb      	strh	r3, [r7, #14]
	uint16_t usWordL = (uint16_t)( ulImgBufAddr & 0x0000FFFF);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	81bb      	strh	r3, [r7, #12]
	//Write LISAR Reg
	IT8951WriteReg(LISAR + 2 ,usWordH);
 800070a:	89fb      	ldrh	r3, [r7, #14]
 800070c:	4619      	mov	r1, r3
 800070e:	f240 200a 	movw	r0, #522	; 0x20a
 8000712:	f7ff ff6a 	bl	80005ea <IT8951WriteReg>
	IT8951WriteReg(LISAR ,usWordL);
 8000716:	89bb      	ldrh	r3, [r7, #12]
 8000718:	4619      	mov	r1, r3
 800071a:	f44f 7002 	mov.w	r0, #520	; 0x208
 800071e:	f7ff ff64 	bl	80005ea <IT8951WriteReg>
}
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <IT8951WaitForDisplayReady>:
//-----------------------------------------------------------
//Display function 1---Wait for LUT Engine Finish
//                     Polling Display Engine Ready by LUTNo
//-----------------------------------------------------------
void IT8951WaitForDisplayReady()
{
 800072a:	b580      	push	{r7, lr}
 800072c:	af00      	add	r7, sp, #0
	//Check IT8951 Register LUTAFSR => NonZero Busy, 0 - Free
	while(IT8951ReadReg(LUTAFSR));
 800072e:	bf00      	nop
 8000730:	f241 2024 	movw	r0, #4644	; 0x1224
 8000734:	f7ff ff44 	bl	80005c0 <IT8951ReadReg>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d1f8      	bne.n	8000730 <IT8951WaitForDisplayReady+0x6>
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}

08000742 <IT8951HostAreaPackedPixelWrite>:

//-----------------------------------------------------------
//Display function 2---Load Image Area process
//-----------------------------------------------------------
void IT8951HostAreaPackedPixelWrite(IT8951LdImgInfo* pstLdImgInfo,IT8951AreaImgInfo* pstAreaImgInfo)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	b084      	sub	sp, #16
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
 800074a:	6039      	str	r1, [r7, #0]
	//uint32_t i,j;
	//Source buffer address of Host
	uint16_t* pusFrameBuf = (uint16_t*)pstLdImgInfo->ulStartFBAddr;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	60fb      	str	r3, [r7, #12]

	//Set Image buffer(IT8951) Base address
	IT8951SetImgBufBaseAddr(pstLdImgInfo->ulImgBufBaseAddr);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	68db      	ldr	r3, [r3, #12]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ffce 	bl	80006f8 <IT8951SetImgBufBaseAddr>
	//Send Load Image start Cmd
	IT8951LoadImgAreaStart(pstLdImgInfo , pstAreaImgInfo);
 800075c:	6839      	ldr	r1, [r7, #0]
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f7ff ff5a 	bl	8000618 <IT8951LoadImgAreaStart>
	//Host Write Data
	LCDWriteNData(pusFrameBuf, (pstAreaImgInfo->usHeight*pstAreaImgInfo->usWidth/2));
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	88db      	ldrh	r3, [r3, #6]
 8000768:	461a      	mov	r2, r3
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	889b      	ldrh	r3, [r3, #4]
 800076e:	fb03 f302 	mul.w	r3, r3, r2
 8000772:	0fda      	lsrs	r2, r3, #31
 8000774:	4413      	add	r3, r2
 8000776:	105b      	asrs	r3, r3, #1
 8000778:	4619      	mov	r1, r3
 800077a:	68f8      	ldr	r0, [r7, #12]
 800077c:	f7ff fe06 	bl	800038c <LCDWriteNData>
					LCDWriteData(*pusFrameBuf);
					pusFrameBuf++;
			}
	}*/
	//Send Load Img End Command
	IT8951LoadImgEnd();
 8000780:	f7ff ff77 	bl	8000672 <IT8951LoadImgEnd>
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <IT8951DisplayArea>:

//-----------------------------------------------------------
//Display functions 3---Application for Display panel Area
//-----------------------------------------------------------
void IT8951DisplayArea(uint16_t usX, uint16_t usY, uint16_t usW, uint16_t usH, uint16_t usDpyMode)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4604      	mov	r4, r0
 8000794:	4608      	mov	r0, r1
 8000796:	4611      	mov	r1, r2
 8000798:	461a      	mov	r2, r3
 800079a:	4623      	mov	r3, r4
 800079c:	80fb      	strh	r3, [r7, #6]
 800079e:	4603      	mov	r3, r0
 80007a0:	80bb      	strh	r3, [r7, #4]
 80007a2:	460b      	mov	r3, r1
 80007a4:	807b      	strh	r3, [r7, #2]
 80007a6:	4613      	mov	r3, r2
 80007a8:	803b      	strh	r3, [r7, #0]
	//Send I80 Display Command (User defined command of IT8951)
	LCDWriteCmdCode(USDEF_I80_CMD_DPY_AREA); //0x0034
 80007aa:	2034      	movs	r0, #52	; 0x34
 80007ac:	f7ff fd92 	bl	80002d4 <LCDWriteCmdCode>
	//Write arguments
	LCDWriteData(usX);
 80007b0:	88fb      	ldrh	r3, [r7, #6]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff fdbc 	bl	8000330 <LCDWriteData>
	LCDWriteData(usY);
 80007b8:	88bb      	ldrh	r3, [r7, #4]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fdb8 	bl	8000330 <LCDWriteData>
	LCDWriteData(usW);
 80007c0:	887b      	ldrh	r3, [r7, #2]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fdb4 	bl	8000330 <LCDWriteData>
	LCDWriteData(usH);
 80007c8:	883b      	ldrh	r3, [r7, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fdb0 	bl	8000330 <LCDWriteData>
	LCDWriteData(usDpyMode);
 80007d0:	8b3b      	ldrh	r3, [r7, #24]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fdac 	bl	8000330 <LCDWriteData>
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd90      	pop	{r4, r7, pc}

080007e0 <IT8951_Init>:

//-----------------------------------------------------------
//Test function 1---Software Initial
//-----------------------------------------------------------
uint8_t IT8951_Init()
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	//bcm2835_gpio_fsel(CS, BCM2835_GPIO_FSEL_OUTP);
	//bcm2835_gpio_fsel(HRDY, BCM2835_GPIO_FSEL_INPT);
	//bcm2835_gpio_fsel(RESET, BCM2835_GPIO_FSEL_OUTP);

	//bcm2835_gpio_write(CS, HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2101      	movs	r1, #1
 80007e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ec:	f000 ff00 	bl	80015f0 <HAL_GPIO_WritePin>

	printf("****** IT8951 ******\n");
 80007f0:	4812      	ldr	r0, [pc, #72]	; (800083c <IT8951_Init+0x5c>)
 80007f2:	f002 fc15 	bl	8003020 <puts>

	//bcm2835_gpio_write(RESET, LOW);
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2110      	movs	r1, #16
 80007fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fe:	f000 fef7 	bl	80015f0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000802:	2064      	movs	r0, #100	; 0x64
 8000804:	f000 fc42 	bl	800108c <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2110      	movs	r1, #16
 800080c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000810:	f000 feee 	bl	80015f0 <HAL_GPIO_WritePin>
	//bcm2835_gpio_write(RESET, HIGH);

	//Get Device Info
	GetIT8951SystemInfo(&gstI80DevInfo);
 8000814:	480a      	ldr	r0, [pc, #40]	; (8000840 <IT8951_Init+0x60>)
 8000816:	f7ff ff33 	bl	8000680 <GetIT8951SystemInfo>
//	{
//		perror("malloc error!\n");
//		return 1;
//	}

 	gulImgBufAddr = gstI80DevInfo.usImgBufAddrL | (gstI80DevInfo.usImgBufAddrH << 16);
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <IT8951_Init+0x60>)
 800081c:	889b      	ldrh	r3, [r3, #4]
 800081e:	461a      	mov	r2, r3
 8000820:	4b07      	ldr	r3, [pc, #28]	; (8000840 <IT8951_Init+0x60>)
 8000822:	88db      	ldrh	r3, [r3, #6]
 8000824:	041b      	lsls	r3, r3, #16
 8000826:	4313      	orrs	r3, r2
 8000828:	461a      	mov	r2, r3
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <IT8951_Init+0x64>)
 800082c:	601a      	str	r2, [r3, #0]

 	//Set to Enable I80 Packed mode
 	IT8951WriteReg(I80CPCR, 0x0001);
 800082e:	2101      	movs	r1, #1
 8000830:	2004      	movs	r0, #4
 8000832:	f7ff feda 	bl	80005ea <IT8951WriteReg>

	return 0;
 8000836:	2300      	movs	r3, #0
}
 8000838:	4618      	mov	r0, r3
 800083a:	bd80      	pop	{r7, pc}
 800083c:	08003e3c 	.word	0x08003e3c
 8000840:	20078e30 	.word	0x20078e30
 8000844:	20078e58 	.word	0x20078e58

08000848 <IT8951DisplayExample3>:
	IT8951DisplayArea(0,0, gstI80DevInfo.usPanelW, gstI80DevInfo.usPanelH, 2);
}

extern const unsigned char kal[];
void IT8951DisplayExample3()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af02      	add	r7, sp, #8
//	for (i = 0;i < 1200*825;i++)
//	{
	//gpFrameBuf[i] = pic[i];
//	}

	IT8951WaitForDisplayReady();
 800084e:	f7ff ff6c 	bl	800072a <IT8951WaitForDisplayReady>

	//Setting Load image information
	stLdImgInfo.ulStartFBAddr    = (uint32_t)kal;
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <IT8951DisplayExample3+0x60>)
 8000854:	613b      	str	r3, [r7, #16]
	stLdImgInfo.usEndianType     = IT8951_LDIMG_L_ENDIAN;
 8000856:	2300      	movs	r3, #0
 8000858:	813b      	strh	r3, [r7, #8]
	stLdImgInfo.usPixelFormat    = IT8951_8BPP;
 800085a:	2303      	movs	r3, #3
 800085c:	817b      	strh	r3, [r7, #10]
	stLdImgInfo.usRotate         = IT8951_ROTATE_0;
 800085e:	2300      	movs	r3, #0
 8000860:	81bb      	strh	r3, [r7, #12]
	stLdImgInfo.ulImgBufBaseAddr = gulImgBufAddr;
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <IT8951DisplayExample3+0x64>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	617b      	str	r3, [r7, #20]
	//Set Load Area
	stAreaImgInfo.usX      = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	803b      	strh	r3, [r7, #0]
	stAreaImgInfo.usY      = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	807b      	strh	r3, [r7, #2]
	stAreaImgInfo.usWidth  = gstI80DevInfo.usPanelW;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <IT8951DisplayExample3+0x68>)
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	80bb      	strh	r3, [r7, #4]
 	stAreaImgInfo.usHeight = gstI80DevInfo.usPanelH;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <IT8951DisplayExample3+0x68>)
 8000878:	885b      	ldrh	r3, [r3, #2]
 800087a:	80fb      	strh	r3, [r7, #6]

	//Load Image from Host to IT8951 Image Buffer
	IT8951HostAreaPackedPixelWrite(&stLdImgInfo, &stAreaImgInfo);//Display function 2
 800087c:	463a      	mov	r2, r7
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff5c 	bl	8000742 <IT8951HostAreaPackedPixelWrite>
	//Display Area ?V (x,y,w,h) with mode 2 for fast gray clear mode - depends on current waveform
	IT8951DisplayArea(0,0, gstI80DevInfo.usPanelW, gstI80DevInfo.usPanelH, 2);
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <IT8951DisplayExample3+0x68>)
 800088c:	881a      	ldrh	r2, [r3, #0]
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <IT8951DisplayExample3+0x68>)
 8000890:	8859      	ldrh	r1, [r3, #2]
 8000892:	2302      	movs	r3, #2
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	460b      	mov	r3, r1
 8000898:	2100      	movs	r1, #0
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff ff76 	bl	800078c <IT8951DisplayArea>
	//IT8951Sleep();
}
 80008a0:	bf00      	nop
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	08003e7c 	.word	0x08003e7c
 80008ac:	20078e58 	.word	0x20078e58
 80008b0:	20078e30 	.word	0x20078e30

080008b4 <IT8951DisplayExample4>:
//extern const unsigned char kal1[];
void IT8951DisplayExample4()
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af02      	add	r7, sp, #8
	IT8951LdImgInfo stLdImgInfo;
	IT8951AreaImgInfo stAreaImgInfo;
	//uint32_t i;
	//uint8_t pic[495000];
	memset(gpFrameBuf, 0xFF, 495000);
 80008ba:	4a19      	ldr	r2, [pc, #100]	; (8000920 <IT8951DisplayExample4+0x6c>)
 80008bc:	21ff      	movs	r1, #255	; 0xff
 80008be:	4819      	ldr	r0, [pc, #100]	; (8000924 <IT8951DisplayExample4+0x70>)
 80008c0:	f002 fb32 	bl	8002f28 <memset>
//	for (i = 0;i < 495000;i++)
//	{
//		pic[i] = kal1[i];
//	}

	IT8951WaitForDisplayReady();
 80008c4:	f7ff ff31 	bl	800072a <IT8951WaitForDisplayReady>

	//Setting Load image information
	stLdImgInfo.ulStartFBAddr    = (uint32_t)gpFrameBuf;
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <IT8951DisplayExample4+0x70>)
 80008ca:	613b      	str	r3, [r7, #16]
	stLdImgInfo.usEndianType     = IT8951_LDIMG_L_ENDIAN;
 80008cc:	2300      	movs	r3, #0
 80008ce:	813b      	strh	r3, [r7, #8]
	stLdImgInfo.usPixelFormat    = IT8951_4BPP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	817b      	strh	r3, [r7, #10]
	stLdImgInfo.usRotate         = IT8951_ROTATE_0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	81bb      	strh	r3, [r7, #12]
	stLdImgInfo.ulImgBufBaseAddr = gulImgBufAddr;
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <IT8951DisplayExample4+0x74>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	617b      	str	r3, [r7, #20]
	//Set Load Area
	stAreaImgInfo.usX      = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	803b      	strh	r3, [r7, #0]
	stAreaImgInfo.usY      = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	807b      	strh	r3, [r7, #2]
	stAreaImgInfo.usWidth  = gstI80DevInfo.usPanelW;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <IT8951DisplayExample4+0x78>)
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	80bb      	strh	r3, [r7, #4]
 	stAreaImgInfo.usHeight = gstI80DevInfo.usPanelH;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <IT8951DisplayExample4+0x78>)
 80008ee:	885b      	ldrh	r3, [r3, #2]
 80008f0:	80fb      	strh	r3, [r7, #6]

	//Load Image from Host to IT8951 Image Buffer
	IT8951HostAreaPackedPixelWrite(&stLdImgInfo, &stAreaImgInfo);//Display function 2
 80008f2:	463a      	mov	r2, r7
 80008f4:	f107 0308 	add.w	r3, r7, #8
 80008f8:	4611      	mov	r1, r2
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ff21 	bl	8000742 <IT8951HostAreaPackedPixelWrite>
	//Display Area ?V (x,y,w,h) with mode 2 for fast gray clear mode - depends on current waveform
	IT8951DisplayArea(0,0, gstI80DevInfo.usPanelW, gstI80DevInfo.usPanelH, 2);
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <IT8951DisplayExample4+0x78>)
 8000902:	881a      	ldrh	r2, [r3, #0]
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <IT8951DisplayExample4+0x78>)
 8000906:	8859      	ldrh	r1, [r3, #2]
 8000908:	2302      	movs	r3, #2
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	460b      	mov	r3, r1
 800090e:	2100      	movs	r1, #0
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff ff3b 	bl	800078c <IT8951DisplayArea>
	//IT8951Sleep();
}
 8000916:	bf00      	nop
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	00078d98 	.word	0x00078d98
 8000924:	2000008c 	.word	0x2000008c
 8000928:	20078e58 	.word	0x20078e58
 800092c:	20078e30 	.word	0x20078e30

08000930 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08c      	sub	sp, #48	; 0x30
 8000934:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000946:	4b79      	ldr	r3, [pc, #484]	; (8000b2c <MX_GPIO_Init+0x1fc>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	4a78      	ldr	r2, [pc, #480]	; (8000b2c <MX_GPIO_Init+0x1fc>)
 800094c:	f043 0304 	orr.w	r3, r3, #4
 8000950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000952:	4b76      	ldr	r3, [pc, #472]	; (8000b2c <MX_GPIO_Init+0x1fc>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	f003 0304 	and.w	r3, r3, #4
 800095a:	61bb      	str	r3, [r7, #24]
 800095c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095e:	4b73      	ldr	r3, [pc, #460]	; (8000b2c <MX_GPIO_Init+0x1fc>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	4a72      	ldr	r2, [pc, #456]	; (8000b2c <MX_GPIO_Init+0x1fc>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096a:	4b70      	ldr	r3, [pc, #448]	; (8000b2c <MX_GPIO_Init+0x1fc>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b6d      	ldr	r3, [pc, #436]	; (8000b2c <MX_GPIO_Init+0x1fc>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	4a6c      	ldr	r2, [pc, #432]	; (8000b2c <MX_GPIO_Init+0x1fc>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4b6a      	ldr	r3, [pc, #424]	; (8000b2c <MX_GPIO_Init+0x1fc>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b67      	ldr	r3, [pc, #412]	; (8000b2c <MX_GPIO_Init+0x1fc>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	4a66      	ldr	r2, [pc, #408]	; (8000b2c <MX_GPIO_Init+0x1fc>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099a:	4b64      	ldr	r3, [pc, #400]	; (8000b2c <MX_GPIO_Init+0x1fc>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a6:	4b61      	ldr	r3, [pc, #388]	; (8000b2c <MX_GPIO_Init+0x1fc>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4a60      	ldr	r2, [pc, #384]	; (8000b2c <MX_GPIO_Init+0x1fc>)
 80009ac:	f043 0308 	orr.w	r3, r3, #8
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4b5e      	ldr	r3, [pc, #376]	; (8000b2c <MX_GPIO_Init+0x1fc>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0308 	and.w	r3, r3, #8
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009be:	4b5b      	ldr	r3, [pc, #364]	; (8000b2c <MX_GPIO_Init+0x1fc>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	4a5a      	ldr	r2, [pc, #360]	; (8000b2c <MX_GPIO_Init+0x1fc>)
 80009c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ca:	4b58      	ldr	r3, [pc, #352]	; (8000b2c <MX_GPIO_Init+0x1fc>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80009d6:	f000 fee7 	bl	80017a8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EPD_CS_Pin|EPD_RST_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2111      	movs	r1, #17
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f000 fe05 	bl	80015f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80009ec:	4850      	ldr	r0, [pc, #320]	; (8000b30 <MX_GPIO_Init+0x200>)
 80009ee:	f000 fdff 	bl	80015f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2140      	movs	r1, #64	; 0x40
 80009f6:	484f      	ldr	r0, [pc, #316]	; (8000b34 <MX_GPIO_Init+0x204>)
 80009f8:	f000 fdfa 	bl	80015f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a02:	4b4d      	ldr	r3, [pc, #308]	; (8000b38 <MX_GPIO_Init+0x208>)
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	484a      	ldr	r0, [pc, #296]	; (8000b3c <MX_GPIO_Init+0x20c>)
 8000a12:	f000 fc43 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_RST_Pin;
 8000a16:	2311      	movs	r3, #17
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a30:	f000 fc34 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_HRDY_Pin;
 8000a34:	2320      	movs	r3, #32
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EPD_HRDY_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4a:	f000 fc27 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000a4e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	4832      	ldr	r0, [pc, #200]	; (8000b30 <MX_GPIO_Init+0x200>)
 8000a68:	f000 fc18 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a7e:	2307      	movs	r3, #7
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	482d      	ldr	r0, [pc, #180]	; (8000b40 <MX_GPIO_Init+0x210>)
 8000a8a:	f000 fc07 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a8e:	2320      	movs	r3, #32
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4824      	ldr	r0, [pc, #144]	; (8000b34 <MX_GPIO_Init+0x204>)
 8000aa2:	f000 fbfb 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aa6:	2340      	movs	r3, #64	; 0x40
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	481d      	ldr	r0, [pc, #116]	; (8000b34 <MX_GPIO_Init+0x204>)
 8000abe:	f000 fbed 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000ac2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	4815      	ldr	r0, [pc, #84]	; (8000b34 <MX_GPIO_Init+0x204>)
 8000ae0:	f000 fbdc 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ae4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af2:	2303      	movs	r3, #3
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000af6:	230a      	movs	r3, #10
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b04:	f000 fbca 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f000 fbbc 	bl	800129c <HAL_GPIO_Init>

}
 8000b24:	bf00      	nop
 8000b26:	3730      	adds	r7, #48	; 0x30
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	48000400 	.word	0x48000400
 8000b34:	48001800 	.word	0x48001800
 8000b38:	10110000 	.word	0x10110000
 8000b3c:	48000800 	.word	0x48000800
 8000b40:	48000c00 	.word	0x48000c00

08000b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b48:	f000 fa2f 	bl	8000faa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4c:	f000 f80b 	bl	8000b66 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b50:	f7ff feee 	bl	8000930 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b54:	f000 f85e 	bl	8000c14 <MX_SPI1_Init>
  IT8951_Init();
 8000b58:	f7ff fe42 	bl	80007e0 <IT8951_Init>
//	IT8951DisplayBox(0, 800, 1200,25, 0xf0);
  /* USER CODE BEGIN 2 */
  //IT8951DisplayExample3();
 while(1)
 {
	 IT8951DisplayExample3();
 8000b5c:	f7ff fe74 	bl	8000848 <IT8951DisplayExample3>
	 IT8951DisplayExample4();
 8000b60:	f7ff fea8 	bl	80008b4 <IT8951DisplayExample4>
	 IT8951DisplayExample3();
 8000b64:	e7fa      	b.n	8000b5c <main+0x18>

08000b66 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b096      	sub	sp, #88	; 0x58
 8000b6a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2244      	movs	r2, #68	; 0x44
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f002 f9d7 	bl	8002f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f000 fd69 	bl	8001660 <HAL_PWREx_ControlVoltageScaling>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000b94:	f000 f837 	bl	8000c06 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba2:	2340      	movs	r3, #64	; 0x40
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000baa:	2302      	movs	r3, #2
 8000bac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 28;
 8000bb2:	231c      	movs	r3, #28
 8000bb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 fdfe 	bl	80017c8 <HAL_RCC_OscConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000bd2:	f000 f818 	bl	8000c06 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd6:	230f      	movs	r3, #15
 8000bd8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bea:	463b      	mov	r3, r7
 8000bec:	2105      	movs	r1, #5
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f001 f9d8 	bl	8001fa4 <HAL_RCC_ClockConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bfa:	f000 f804 	bl	8000c06 <Error_Handler>
  }
}
 8000bfe:	bf00      	nop
 8000c00:	3758      	adds	r7, #88	; 0x58
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000c18:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c1a:	4a1c      	ldr	r2, [pc, #112]	; (8000c8c <MX_SPI1_Init+0x78>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c2e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000c32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c46:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c4a:	2228      	movs	r2, #40	; 0x28
 8000c4c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c62:	2207      	movs	r2, #7
 8000c64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c6e:	2208      	movs	r2, #8
 8000c70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_SPI1_Init+0x74>)
 8000c74:	f001 fc0e 	bl	8002494 <HAL_SPI_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c7e:	f7ff ffc2 	bl	8000c06 <Error_Handler>
  }

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20078e5c 	.word	0x20078e5c
 8000c8c:	40013000 	.word	0x40013000

08000c90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a17      	ldr	r2, [pc, #92]	; (8000d0c <HAL_SPI_MspInit+0x7c>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d128      	bne.n	8000d04 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cb2:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <HAL_SPI_MspInit+0x80>)
 8000cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb6:	4a16      	ldr	r2, [pc, #88]	; (8000d10 <HAL_SPI_MspInit+0x80>)
 8000cb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cbc:	6613      	str	r3, [r2, #96]	; 0x60
 8000cbe:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <HAL_SPI_MspInit+0x80>)
 8000cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_SPI_MspInit+0x80>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	4a10      	ldr	r2, [pc, #64]	; (8000d10 <HAL_SPI_MspInit+0x80>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_SPI_MspInit+0x80>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000ce2:	23c2      	movs	r3, #194	; 0xc2
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cf2:	2305      	movs	r3, #5
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d00:	f000 facc 	bl	800129c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d04:	bf00      	nop
 8000d06:	3728      	adds	r7, #40	; 0x28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40013000 	.word	0x40013000
 8000d10:	40021000 	.word	0x40021000

08000d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <HAL_MspInit+0x44>)
 8000d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <HAL_MspInit+0x44>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6613      	str	r3, [r2, #96]	; 0x60
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <HAL_MspInit+0x44>)
 8000d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_MspInit+0x44>)
 8000d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <HAL_MspInit+0x44>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_MspInit+0x44>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40021000 	.word	0x40021000

08000d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <HardFault_Handler+0x4>

08000d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <MemManage_Handler+0x4>

08000d76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <BusFault_Handler+0x4>

08000d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <UsageFault_Handler+0x4>

08000d82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db0:	f000 f94e 	bl	8001050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	e00a      	b.n	8000de0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dca:	f3af 8000 	nop.w
 8000dce:	4601      	mov	r1, r0
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	60ba      	str	r2, [r7, #8]
 8000dd6:	b2ca      	uxtb	r2, r1
 8000dd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697a      	ldr	r2, [r7, #20]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	dbf0      	blt.n	8000dca <_read+0x12>
	}

return len;
 8000de8:	687b      	ldr	r3, [r7, #4]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	60f8      	str	r0, [r7, #12]
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	e009      	b.n	8000e18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	1c5a      	adds	r2, r3, #1
 8000e08:	60ba      	str	r2, [r7, #8]
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	3301      	adds	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	dbf1      	blt.n	8000e04 <_write+0x12>
	}
	return len;
 8000e20:	687b      	ldr	r3, [r7, #4]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <_close>:

int _close(int file)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
	return -1;
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e52:	605a      	str	r2, [r3, #4]
	return 0;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <_isatty>:

int _isatty(int file)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
	return 1;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
	return 0;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <_sbrk+0x50>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d102      	bne.n	8000eaa <_sbrk+0x16>
		heap_end = &end;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <_sbrk+0x50>)
 8000ea6:	4a10      	ldr	r2, [pc, #64]	; (8000ee8 <_sbrk+0x54>)
 8000ea8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <_sbrk+0x50>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <_sbrk+0x50>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	466a      	mov	r2, sp
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d907      	bls.n	8000ece <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000ebe:	f002 f809 	bl	8002ed4 <__errno>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	230c      	movs	r3, #12
 8000ec6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ecc:	e006      	b.n	8000edc <_sbrk+0x48>
	}

	heap_end += incr;
 8000ece:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <_sbrk+0x50>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4a03      	ldr	r2, [pc, #12]	; (8000ee4 <_sbrk+0x50>)
 8000ed8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000eda:	68fb      	ldr	r3, [r7, #12]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20078e24 	.word	0x20078e24
 8000ee8:	20078ec8 	.word	0x20078ec8

08000eec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <SystemInit+0x64>)
 8000ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef6:	4a16      	ldr	r2, [pc, #88]	; (8000f50 <SystemInit+0x64>)
 8000ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <SystemInit+0x68>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a13      	ldr	r2, [pc, #76]	; (8000f54 <SystemInit+0x68>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <SystemInit+0x68>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <SystemInit+0x68>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <SystemInit+0x68>)
 8000f18:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f1c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f20:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <SystemInit+0x68>)
 8000f24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f28:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <SystemInit+0x68>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a09      	ldr	r2, [pc, #36]	; (8000f54 <SystemInit+0x68>)
 8000f30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f34:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <SystemInit+0x68>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <SystemInit+0x64>)
 8000f3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f42:	609a      	str	r2, [r3, #8]
#endif
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00
 8000f54:	40021000 	.word	0x40021000

08000f58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f90 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f5e:	e003      	b.n	8000f68 <LoopCopyDataInit>

08000f60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f66:	3104      	adds	r1, #4

08000f68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f70:	d3f6      	bcc.n	8000f60 <CopyDataInit>
	ldr	r2, =_sbss
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f74:	e002      	b.n	8000f7c <LoopFillZerobss>

08000f76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f78:	f842 3b04 	str.w	r3, [r2], #4

08000f7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <LoopForever+0x16>)
	cmp	r2, r3
 8000f7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f80:	d3f9      	bcc.n	8000f76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f82:	f7ff ffb3 	bl	8000eec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f001 ffab 	bl	8002ee0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f8a:	f7ff fddb 	bl	8000b44 <main>

08000f8e <LoopForever>:

LoopForever:
    b LoopForever
 8000f8e:	e7fe      	b.n	8000f8e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f90:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000f94:	080f5a8c 	.word	0x080f5a8c
	ldr	r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f9c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000fa0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000fa4:	20078ec8 	.word	0x20078ec8

08000fa8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC1_IRQHandler>

08000faa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 f93d 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f000 f80e 	bl	8000fdc <HAL_InitTick>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d002      	beq.n	8000fcc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	71fb      	strb	r3, [r7, #7]
 8000fca:	e001      	b.n	8000fd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fcc:	f7ff fea2 	bl	8000d14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <HAL_InitTick+0x68>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d022      	beq.n	8001036 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_InitTick+0x6c>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <HAL_InitTick+0x68>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ffc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001000:	fbb2 f3f3 	udiv	r3, r2, r3
 8001004:	4618      	mov	r0, r3
 8001006:	f000 f93c 	bl	8001282 <HAL_SYSTICK_Config>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d10f      	bne.n	8001030 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b0f      	cmp	r3, #15
 8001014:	d809      	bhi.n	800102a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001016:	2200      	movs	r2, #0
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	f04f 30ff 	mov.w	r0, #4294967295
 800101e:	f000 f914 	bl	800124a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <HAL_InitTick+0x70>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	e007      	b.n	800103a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	e004      	b.n	800103a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	73fb      	strb	r3, [r7, #15]
 8001034:	e001      	b.n	800103a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800103a:	7bfb      	ldrb	r3, [r7, #15]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000008 	.word	0x20000008
 8001048:	20000000 	.word	0x20000000
 800104c:	20000004 	.word	0x20000004

08001050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_IncTick+0x1c>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <HAL_IncTick+0x20>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4413      	add	r3, r2
 800105e:	4a03      	ldr	r2, [pc, #12]	; (800106c <HAL_IncTick+0x1c>)
 8001060:	6013      	str	r3, [r2, #0]
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	20078ec0 	.word	0x20078ec0
 8001070:	20000008 	.word	0x20000008

08001074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <HAL_GetTick+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20078ec0 	.word	0x20078ec0

0800108c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001094:	f7ff ffee 	bl	8001074 <HAL_GetTick>
 8001098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a4:	d004      	beq.n	80010b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_Delay+0x40>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010b0:	bf00      	nop
 80010b2:	f7ff ffdf 	bl	8001074 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d8f7      	bhi.n	80010b2 <HAL_Delay+0x26>
  {
  }
}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000008 	.word	0x20000008

080010d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ec:	4013      	ands	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001102:	4a04      	ldr	r2, [pc, #16]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	60d3      	str	r3, [r2, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <__NVIC_GetPriorityGrouping+0x18>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	f003 0307 	and.w	r3, r3, #7
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
         );
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff47 	bl	80010d0 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800125c:	f7ff ff5c 	bl	8001118 <__NVIC_GetPriorityGrouping>
 8001260:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	68b9      	ldr	r1, [r7, #8]
 8001266:	6978      	ldr	r0, [r7, #20]
 8001268:	f7ff ff8e 	bl	8001188 <NVIC_EncodePriority>
 800126c:	4602      	mov	r2, r0
 800126e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff5d 	bl	8001134 <__NVIC_SetPriority>
}
 800127a:	bf00      	nop
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ffb0 	bl	80011f0 <SysTick_Config>
 8001290:	4603      	mov	r3, r0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800129c:	b480      	push	{r7}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012aa:	e166      	b.n	800157a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	2101      	movs	r1, #1
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	fa01 f303 	lsl.w	r3, r1, r3
 80012b8:	4013      	ands	r3, r2
 80012ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 8158 	beq.w	8001574 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x38>
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b12      	cmp	r3, #18
 80012d2:	d123      	bne.n	800131c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	08da      	lsrs	r2, r3, #3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3208      	adds	r2, #8
 80012dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	220f      	movs	r2, #15
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	691a      	ldr	r2, [r3, #16]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	08da      	lsrs	r2, r3, #3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3208      	adds	r2, #8
 8001316:	6939      	ldr	r1, [r7, #16]
 8001318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0203 	and.w	r2, r3, #3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d00b      	beq.n	8001370 <HAL_GPIO_Init+0xd4>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d007      	beq.n	8001370 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001364:	2b11      	cmp	r3, #17
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b12      	cmp	r3, #18
 800136e:	d130      	bne.n	80013d2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	2203      	movs	r2, #3
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013a6:	2201      	movs	r2, #1
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	f003 0201 	and.w	r2, r3, #1
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	2203      	movs	r2, #3
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 80b2 	beq.w	8001574 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001410:	4b61      	ldr	r3, [pc, #388]	; (8001598 <HAL_GPIO_Init+0x2fc>)
 8001412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001414:	4a60      	ldr	r2, [pc, #384]	; (8001598 <HAL_GPIO_Init+0x2fc>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6613      	str	r3, [r2, #96]	; 0x60
 800141c:	4b5e      	ldr	r3, [pc, #376]	; (8001598 <HAL_GPIO_Init+0x2fc>)
 800141e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001428:	4a5c      	ldr	r2, [pc, #368]	; (800159c <HAL_GPIO_Init+0x300>)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	3302      	adds	r3, #2
 8001430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001434:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	220f      	movs	r2, #15
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001452:	d02b      	beq.n	80014ac <HAL_GPIO_Init+0x210>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a52      	ldr	r2, [pc, #328]	; (80015a0 <HAL_GPIO_Init+0x304>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d025      	beq.n	80014a8 <HAL_GPIO_Init+0x20c>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a51      	ldr	r2, [pc, #324]	; (80015a4 <HAL_GPIO_Init+0x308>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d01f      	beq.n	80014a4 <HAL_GPIO_Init+0x208>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a50      	ldr	r2, [pc, #320]	; (80015a8 <HAL_GPIO_Init+0x30c>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d019      	beq.n	80014a0 <HAL_GPIO_Init+0x204>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a4f      	ldr	r2, [pc, #316]	; (80015ac <HAL_GPIO_Init+0x310>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d013      	beq.n	800149c <HAL_GPIO_Init+0x200>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a4e      	ldr	r2, [pc, #312]	; (80015b0 <HAL_GPIO_Init+0x314>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d00d      	beq.n	8001498 <HAL_GPIO_Init+0x1fc>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a4d      	ldr	r2, [pc, #308]	; (80015b4 <HAL_GPIO_Init+0x318>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d007      	beq.n	8001494 <HAL_GPIO_Init+0x1f8>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a4c      	ldr	r2, [pc, #304]	; (80015b8 <HAL_GPIO_Init+0x31c>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d101      	bne.n	8001490 <HAL_GPIO_Init+0x1f4>
 800148c:	2307      	movs	r3, #7
 800148e:	e00e      	b.n	80014ae <HAL_GPIO_Init+0x212>
 8001490:	2308      	movs	r3, #8
 8001492:	e00c      	b.n	80014ae <HAL_GPIO_Init+0x212>
 8001494:	2306      	movs	r3, #6
 8001496:	e00a      	b.n	80014ae <HAL_GPIO_Init+0x212>
 8001498:	2305      	movs	r3, #5
 800149a:	e008      	b.n	80014ae <HAL_GPIO_Init+0x212>
 800149c:	2304      	movs	r3, #4
 800149e:	e006      	b.n	80014ae <HAL_GPIO_Init+0x212>
 80014a0:	2303      	movs	r3, #3
 80014a2:	e004      	b.n	80014ae <HAL_GPIO_Init+0x212>
 80014a4:	2302      	movs	r3, #2
 80014a6:	e002      	b.n	80014ae <HAL_GPIO_Init+0x212>
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <HAL_GPIO_Init+0x212>
 80014ac:	2300      	movs	r3, #0
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	f002 0203 	and.w	r2, r2, #3
 80014b4:	0092      	lsls	r2, r2, #2
 80014b6:	4093      	lsls	r3, r2
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014be:	4937      	ldr	r1, [pc, #220]	; (800159c <HAL_GPIO_Init+0x300>)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	089b      	lsrs	r3, r3, #2
 80014c4:	3302      	adds	r3, #2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014cc:	4b3b      	ldr	r3, [pc, #236]	; (80015bc <HAL_GPIO_Init+0x320>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014f0:	4a32      	ldr	r2, [pc, #200]	; (80015bc <HAL_GPIO_Init+0x320>)
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80014f6:	4b31      	ldr	r3, [pc, #196]	; (80015bc <HAL_GPIO_Init+0x320>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	43db      	mvns	r3, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4013      	ands	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800151a:	4a28      	ldr	r2, [pc, #160]	; (80015bc <HAL_GPIO_Init+0x320>)
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001520:	4b26      	ldr	r3, [pc, #152]	; (80015bc <HAL_GPIO_Init+0x320>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	43db      	mvns	r3, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001544:	4a1d      	ldr	r2, [pc, #116]	; (80015bc <HAL_GPIO_Init+0x320>)
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <HAL_GPIO_Init+0x320>)
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	43db      	mvns	r3, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800156e:	4a13      	ldr	r2, [pc, #76]	; (80015bc <HAL_GPIO_Init+0x320>)
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	3301      	adds	r3, #1
 8001578:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	fa22 f303 	lsr.w	r3, r2, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	f47f ae91 	bne.w	80012ac <HAL_GPIO_Init+0x10>
  }
}
 800158a:	bf00      	nop
 800158c:	371c      	adds	r7, #28
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000
 800159c:	40010000 	.word	0x40010000
 80015a0:	48000400 	.word	0x48000400
 80015a4:	48000800 	.word	0x48000800
 80015a8:	48000c00 	.word	0x48000c00
 80015ac:	48001000 	.word	0x48001000
 80015b0:	48001400 	.word	0x48001400
 80015b4:	48001800 	.word	0x48001800
 80015b8:	48001c00 	.word	0x48001c00
 80015bc:	40010400 	.word	0x40010400

080015c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691a      	ldr	r2, [r3, #16]
 80015d0:	887b      	ldrh	r3, [r7, #2]
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d002      	beq.n	80015de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015d8:	2301      	movs	r3, #1
 80015da:	73fb      	strb	r3, [r7, #15]
 80015dc:	e001      	b.n	80015e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	807b      	strh	r3, [r7, #2]
 80015fc:	4613      	mov	r3, r2
 80015fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001600:	787b      	ldrb	r3, [r7, #1]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001606:	887a      	ldrh	r2, [r7, #2]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800160c:	e002      	b.n	8001614 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800160e:	887a      	ldrh	r2, [r7, #2]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800162c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001630:	d102      	bne.n	8001638 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001636:	e00b      	b.n	8001650 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_PWREx_GetVoltageRange+0x3c>)
 800163a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800163e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001646:	d102      	bne.n	800164e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001648:	f44f 7300 	mov.w	r3, #512	; 0x200
 800164c:	e000      	b.n	8001650 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800164e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40007000 	.word	0x40007000

08001660 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d141      	bne.n	80016f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800166e:	4b4b      	ldr	r3, [pc, #300]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800167a:	d131      	bne.n	80016e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800167c:	4b47      	ldr	r3, [pc, #284]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001682:	4a46      	ldr	r2, [pc, #280]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001688:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800168c:	4b43      	ldr	r3, [pc, #268]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001694:	4a41      	ldr	r2, [pc, #260]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800169a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800169c:	4b40      	ldr	r3, [pc, #256]	; (80017a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2232      	movs	r2, #50	; 0x32
 80016a2:	fb02 f303 	mul.w	r3, r2, r3
 80016a6:	4a3f      	ldr	r2, [pc, #252]	; (80017a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016a8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ac:	0c9b      	lsrs	r3, r3, #18
 80016ae:	3301      	adds	r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016b2:	e002      	b.n	80016ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016ba:	4b38      	ldr	r3, [pc, #224]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c6:	d102      	bne.n	80016ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f2      	bne.n	80016b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ce:	4b33      	ldr	r3, [pc, #204]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016da:	d158      	bne.n	800178e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e057      	b.n	8001790 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016e0:	4b2e      	ldr	r3, [pc, #184]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016e6:	4a2d      	ldr	r2, [pc, #180]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016f0:	e04d      	b.n	800178e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016f8:	d141      	bne.n	800177e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016fa:	4b28      	ldr	r3, [pc, #160]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001706:	d131      	bne.n	800176c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001708:	4b24      	ldr	r3, [pc, #144]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800170a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800170e:	4a23      	ldr	r2, [pc, #140]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001714:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001718:	4b20      	ldr	r3, [pc, #128]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001720:	4a1e      	ldr	r2, [pc, #120]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001726:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001728:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2232      	movs	r2, #50	; 0x32
 800172e:	fb02 f303 	mul.w	r3, r2, r3
 8001732:	4a1c      	ldr	r2, [pc, #112]	; (80017a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001734:	fba2 2303 	umull	r2, r3, r2, r3
 8001738:	0c9b      	lsrs	r3, r3, #18
 800173a:	3301      	adds	r3, #1
 800173c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800173e:	e002      	b.n	8001746 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	3b01      	subs	r3, #1
 8001744:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001752:	d102      	bne.n	800175a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f2      	bne.n	8001740 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001766:	d112      	bne.n	800178e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e011      	b.n	8001790 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800176e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001778:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800177c:	e007      	b.n	800178e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001786:	4a05      	ldr	r2, [pc, #20]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001788:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800178c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	40007000 	.word	0x40007000
 80017a0:	20000000 	.word	0x20000000
 80017a4:	431bde83 	.word	0x431bde83

080017a8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80017b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017b6:	6053      	str	r3, [r2, #4]
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40007000 	.word	0x40007000

080017c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e3db      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017da:	4ba4      	ldr	r3, [pc, #656]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e4:	4ba1      	ldr	r3, [pc, #644]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 80e1 	beq.w	80019be <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d007      	beq.n	8001812 <HAL_RCC_OscConfig+0x4a>
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	2b0c      	cmp	r3, #12
 8001806:	f040 8088 	bne.w	800191a <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	2b01      	cmp	r3, #1
 800180e:	f040 8084 	bne.w	800191a <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001812:	4b96      	ldr	r3, [pc, #600]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d005      	beq.n	800182a <HAL_RCC_OscConfig+0x62>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e3b3      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1a      	ldr	r2, [r3, #32]
 800182e:	4b8f      	ldr	r3, [pc, #572]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d004      	beq.n	8001844 <HAL_RCC_OscConfig+0x7c>
 800183a:	4b8c      	ldr	r3, [pc, #560]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001842:	e005      	b.n	8001850 <HAL_RCC_OscConfig+0x88>
 8001844:	4b89      	ldr	r3, [pc, #548]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 8001846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800184a:	091b      	lsrs	r3, r3, #4
 800184c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001850:	4293      	cmp	r3, r2
 8001852:	d223      	bcs.n	800189c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	4618      	mov	r0, r3
 800185a:	f000 fd59 	bl	8002310 <RCC_SetFlashLatencyFromMSIRange>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e394      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001868:	4b80      	ldr	r3, [pc, #512]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a7f      	ldr	r2, [pc, #508]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 800186e:	f043 0308 	orr.w	r3, r3, #8
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b7d      	ldr	r3, [pc, #500]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	497a      	ldr	r1, [pc, #488]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001886:	4b79      	ldr	r3, [pc, #484]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	4975      	ldr	r1, [pc, #468]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 8001896:	4313      	orrs	r3, r2
 8001898:	604b      	str	r3, [r1, #4]
 800189a:	e022      	b.n	80018e2 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800189c:	4b73      	ldr	r3, [pc, #460]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a72      	ldr	r2, [pc, #456]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 80018a2:	f043 0308 	orr.w	r3, r3, #8
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	4b70      	ldr	r3, [pc, #448]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	496d      	ldr	r1, [pc, #436]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ba:	4b6c      	ldr	r3, [pc, #432]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	4968      	ldr	r1, [pc, #416]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 fd1c 	bl	8002310 <RCC_SetFlashLatencyFromMSIRange>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e357      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018e2:	f000 fc8b 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 80018e6:	4601      	mov	r1, r0
 80018e8:	4b60      	ldr	r3, [pc, #384]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	091b      	lsrs	r3, r3, #4
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	4a5f      	ldr	r2, [pc, #380]	; (8001a70 <HAL_RCC_OscConfig+0x2a8>)
 80018f4:	5cd3      	ldrb	r3, [r2, r3]
 80018f6:	f003 031f 	and.w	r3, r3, #31
 80018fa:	fa21 f303 	lsr.w	r3, r1, r3
 80018fe:	4a5d      	ldr	r2, [pc, #372]	; (8001a74 <HAL_RCC_OscConfig+0x2ac>)
 8001900:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001902:	4b5d      	ldr	r3, [pc, #372]	; (8001a78 <HAL_RCC_OscConfig+0x2b0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fb68 	bl	8000fdc <HAL_InitTick>
 800190c:	4603      	mov	r3, r0
 800190e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d052      	beq.n	80019bc <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	e33b      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d032      	beq.n	8001988 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001922:	4b52      	ldr	r3, [pc, #328]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a51      	ldr	r2, [pc, #324]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800192e:	f7ff fba1 	bl	8001074 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001936:	f7ff fb9d 	bl	8001074 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e324      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001948:	4b48      	ldr	r3, [pc, #288]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001954:	4b45      	ldr	r3, [pc, #276]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a44      	ldr	r2, [pc, #272]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 800195a:	f043 0308 	orr.w	r3, r3, #8
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	4b42      	ldr	r3, [pc, #264]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	493f      	ldr	r1, [pc, #252]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 800196e:	4313      	orrs	r3, r2
 8001970:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001972:	4b3e      	ldr	r3, [pc, #248]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	493a      	ldr	r1, [pc, #232]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 8001982:	4313      	orrs	r3, r2
 8001984:	604b      	str	r3, [r1, #4]
 8001986:	e01a      	b.n	80019be <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001988:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a37      	ldr	r2, [pc, #220]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 800198e:	f023 0301 	bic.w	r3, r3, #1
 8001992:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001994:	f7ff fb6e 	bl	8001074 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800199c:	f7ff fb6a 	bl	8001074 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e2f1      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019ae:	4b2f      	ldr	r3, [pc, #188]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x1d4>
 80019ba:	e000      	b.n	80019be <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d074      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d005      	beq.n	80019dc <HAL_RCC_OscConfig+0x214>
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	2b0c      	cmp	r3, #12
 80019d4:	d10e      	bne.n	80019f4 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d10b      	bne.n	80019f4 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019dc:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d064      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x2ea>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d160      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e2ce      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fc:	d106      	bne.n	8001a0c <HAL_RCC_OscConfig+0x244>
 80019fe:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a1a      	ldr	r2, [pc, #104]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 8001a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e01d      	b.n	8001a48 <HAL_RCC_OscConfig+0x280>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x268>
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a14      	ldr	r2, [pc, #80]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 8001a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a11      	ldr	r2, [pc, #68]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 8001a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e00b      	b.n	8001a48 <HAL_RCC_OscConfig+0x280>
 8001a30:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 8001a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <HAL_RCC_OscConfig+0x2a4>)
 8001a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d01c      	beq.n	8001a8a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff fb10 	bl	8001074 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a56:	e011      	b.n	8001a7c <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a58:	f7ff fb0c 	bl	8001074 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b64      	cmp	r3, #100	; 0x64
 8001a64:	d90a      	bls.n	8001a7c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e293      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	080f59ac 	.word	0x080f59ac
 8001a74:	20000000 	.word	0x20000000
 8001a78:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a7c:	4bae      	ldr	r3, [pc, #696]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0e7      	beq.n	8001a58 <HAL_RCC_OscConfig+0x290>
 8001a88:	e014      	b.n	8001ab4 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8a:	f7ff faf3 	bl	8001074 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a92:	f7ff faef 	bl	8001074 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b64      	cmp	r3, #100	; 0x64
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e276      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aa4:	4ba4      	ldr	r3, [pc, #656]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f0      	bne.n	8001a92 <HAL_RCC_OscConfig+0x2ca>
 8001ab0:	e000      	b.n	8001ab4 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d060      	beq.n	8001b82 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d005      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x30a>
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	2b0c      	cmp	r3, #12
 8001aca:	d119      	bne.n	8001b00 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d116      	bne.n	8001b00 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad2:	4b99      	ldr	r3, [pc, #612]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d005      	beq.n	8001aea <HAL_RCC_OscConfig+0x322>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e253      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aea:	4b93      	ldr	r3, [pc, #588]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	061b      	lsls	r3, r3, #24
 8001af8:	498f      	ldr	r1, [pc, #572]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001afe:	e040      	b.n	8001b82 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d023      	beq.n	8001b50 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b08:	4b8b      	ldr	r3, [pc, #556]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a8a      	ldr	r2, [pc, #552]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b14:	f7ff faae 	bl	8001074 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b1c:	f7ff faaa 	bl	8001074 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e231      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b2e:	4b82      	ldr	r3, [pc, #520]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3a:	4b7f      	ldr	r3, [pc, #508]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	061b      	lsls	r3, r3, #24
 8001b48:	497b      	ldr	r1, [pc, #492]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	604b      	str	r3, [r1, #4]
 8001b4e:	e018      	b.n	8001b82 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b50:	4b79      	ldr	r3, [pc, #484]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a78      	ldr	r2, [pc, #480]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001b56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fa8a 	bl	8001074 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b64:	f7ff fa86 	bl	8001074 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e20d      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b76:	4b70      	ldr	r3, [pc, #448]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d03c      	beq.n	8001c08 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d01c      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b96:	4b68      	ldr	r3, [pc, #416]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b9c:	4a66      	ldr	r2, [pc, #408]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba6:	f7ff fa65 	bl	8001074 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bae:	f7ff fa61 	bl	8001074 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e1e8      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bc0:	4b5d      	ldr	r3, [pc, #372]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0ef      	beq.n	8001bae <HAL_RCC_OscConfig+0x3e6>
 8001bce:	e01b      	b.n	8001c08 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd0:	4b59      	ldr	r3, [pc, #356]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd6:	4a58      	ldr	r2, [pc, #352]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001bd8:	f023 0301 	bic.w	r3, r3, #1
 8001bdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be0:	f7ff fa48 	bl	8001074 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be8:	f7ff fa44 	bl	8001074 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e1cb      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bfa:	4b4f      	ldr	r3, [pc, #316]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1ef      	bne.n	8001be8 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80a5 	beq.w	8001d60 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c1a:	4b47      	ldr	r3, [pc, #284]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10d      	bne.n	8001c42 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	4b44      	ldr	r3, [pc, #272]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2a:	4a43      	ldr	r2, [pc, #268]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c30:	6593      	str	r3, [r2, #88]	; 0x58
 8001c32:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c42:	4b3e      	ldr	r3, [pc, #248]	; (8001d3c <HAL_RCC_OscConfig+0x574>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d118      	bne.n	8001c80 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c4e:	4b3b      	ldr	r3, [pc, #236]	; (8001d3c <HAL_RCC_OscConfig+0x574>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a3a      	ldr	r2, [pc, #232]	; (8001d3c <HAL_RCC_OscConfig+0x574>)
 8001c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5a:	f7ff fa0b 	bl	8001074 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c62:	f7ff fa07 	bl	8001074 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e18e      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c74:	4b31      	ldr	r3, [pc, #196]	; (8001d3c <HAL_RCC_OscConfig+0x574>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d108      	bne.n	8001c9a <HAL_RCC_OscConfig+0x4d2>
 8001c88:	4b2b      	ldr	r3, [pc, #172]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8e:	4a2a      	ldr	r2, [pc, #168]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c98:	e024      	b.n	8001ce4 <HAL_RCC_OscConfig+0x51c>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b05      	cmp	r3, #5
 8001ca0:	d110      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x4fc>
 8001ca2:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca8:	4a23      	ldr	r2, [pc, #140]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001caa:	f043 0304 	orr.w	r3, r3, #4
 8001cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb2:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb8:	4a1f      	ldr	r2, [pc, #124]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cc2:	e00f      	b.n	8001ce4 <HAL_RCC_OscConfig+0x51c>
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cca:	4a1b      	ldr	r2, [pc, #108]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cd4:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cda:	4a17      	ldr	r2, [pc, #92]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001cdc:	f023 0304 	bic.w	r3, r3, #4
 8001ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d016      	beq.n	8001d1a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cec:	f7ff f9c2 	bl	8001074 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf4:	f7ff f9be 	bl	8001074 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e143      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_RCC_OscConfig+0x570>)
 8001d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0ed      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x52c>
 8001d18:	e019      	b.n	8001d4e <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1a:	f7ff f9ab 	bl	8001074 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d20:	e00e      	b.n	8001d40 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d22:	f7ff f9a7 	bl	8001074 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d905      	bls.n	8001d40 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e12c      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d40:	4b96      	ldr	r3, [pc, #600]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1e9      	bne.n	8001d22 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d4e:	7ffb      	ldrb	r3, [r7, #31]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d105      	bne.n	8001d60 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d54:	4b91      	ldr	r3, [pc, #580]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d58:	4a90      	ldr	r2, [pc, #576]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0320 	and.w	r3, r3, #32
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d03c      	beq.n	8001de6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d01c      	beq.n	8001dae <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d74:	4b89      	ldr	r3, [pc, #548]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001d76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7a:	4a88      	ldr	r2, [pc, #544]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d84:	f7ff f976 	bl	8001074 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d8c:	f7ff f972 	bl	8001074 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e0f9      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d9e:	4b7f      	ldr	r3, [pc, #508]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001da0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0ef      	beq.n	8001d8c <HAL_RCC_OscConfig+0x5c4>
 8001dac:	e01b      	b.n	8001de6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dae:	4b7b      	ldr	r3, [pc, #492]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001db0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db4:	4a79      	ldr	r2, [pc, #484]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001db6:	f023 0301 	bic.w	r3, r3, #1
 8001dba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbe:	f7ff f959 	bl	8001074 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dc6:	f7ff f955 	bl	8001074 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e0dc      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dd8:	4b70      	ldr	r3, [pc, #448]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1ef      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 80d0 	beq.w	8001f90 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2b0c      	cmp	r3, #12
 8001df4:	f000 808d 	beq.w	8001f12 <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d15a      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e00:	4b66      	ldr	r3, [pc, #408]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a65      	ldr	r2, [pc, #404]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7ff f932 	bl	8001074 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e14:	f7ff f92e 	bl	8001074 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e0b5      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e26:	4b5d      	ldr	r3, [pc, #372]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e32:	4b5a      	ldr	r3, [pc, #360]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	4b5a      	ldr	r3, [pc, #360]	; (8001fa0 <HAL_RCC_OscConfig+0x7d8>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e42:	3a01      	subs	r2, #1
 8001e44:	0112      	lsls	r2, r2, #4
 8001e46:	4311      	orrs	r1, r2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e4c:	0212      	lsls	r2, r2, #8
 8001e4e:	4311      	orrs	r1, r2
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e54:	0852      	lsrs	r2, r2, #1
 8001e56:	3a01      	subs	r2, #1
 8001e58:	0552      	lsls	r2, r2, #21
 8001e5a:	4311      	orrs	r1, r2
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e60:	0852      	lsrs	r2, r2, #1
 8001e62:	3a01      	subs	r2, #1
 8001e64:	0652      	lsls	r2, r2, #25
 8001e66:	4311      	orrs	r1, r2
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e6c:	06d2      	lsls	r2, r2, #27
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	494a      	ldr	r1, [pc, #296]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e76:	4b49      	ldr	r3, [pc, #292]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a48      	ldr	r2, [pc, #288]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001e7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e80:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e82:	4b46      	ldr	r3, [pc, #280]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	4a45      	ldr	r2, [pc, #276]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001e88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e8c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8e:	f7ff f8f1 	bl	8001074 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e96:	f7ff f8ed 	bl	8001074 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e074      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea8:	4b3c      	ldr	r3, [pc, #240]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x6ce>
 8001eb4:	e06c      	b.n	8001f90 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb6:	4b39      	ldr	r3, [pc, #228]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a38      	ldr	r2, [pc, #224]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001ebc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ec0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001ec2:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d105      	bne.n	8001eda <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ece:	4b33      	ldr	r3, [pc, #204]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	4a32      	ldr	r2, [pc, #200]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001ed4:	f023 0303 	bic.w	r3, r3, #3
 8001ed8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001eda:	4b30      	ldr	r3, [pc, #192]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	4a2f      	ldr	r2, [pc, #188]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001ee0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7ff f8c3 	bl	8001074 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7ff f8bf 	bl	8001074 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e046      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f04:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f0      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x72a>
 8001f10:	e03e      	b.n	8001f90 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e039      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001f1e:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <HAL_RCC_OscConfig+0x7d4>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f003 0203 	and.w	r2, r3, #3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d12c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d123      	bne.n	8001f8c <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f4e:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d11b      	bne.n	8001f8c <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5e:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d113      	bne.n	8001f8c <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6e:	085b      	lsrs	r3, r3, #1
 8001f70:	3b01      	subs	r3, #1
 8001f72:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d109      	bne.n	8001f8c <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	085b      	lsrs	r3, r3, #1
 8001f84:	3b01      	subs	r3, #1
 8001f86:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d001      	beq.n	8001f90 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e000      	b.n	8001f92 <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3720      	adds	r7, #32
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	019d800c 	.word	0x019d800c

08001fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e10f      	b.n	80021dc <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fbc:	4b89      	ldr	r3, [pc, #548]	; (80021e4 <HAL_RCC_ClockConfig+0x240>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d910      	bls.n	8001fec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fca:	4b86      	ldr	r3, [pc, #536]	; (80021e4 <HAL_RCC_ClockConfig+0x240>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 020f 	bic.w	r2, r3, #15
 8001fd2:	4984      	ldr	r1, [pc, #528]	; (80021e4 <HAL_RCC_ClockConfig+0x240>)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fda:	4b82      	ldr	r3, [pc, #520]	; (80021e4 <HAL_RCC_ClockConfig+0x240>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0f7      	b.n	80021dc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 8089 	beq.w	800210c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d133      	bne.n	800206a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002002:	4b79      	ldr	r3, [pc, #484]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0e4      	b.n	80021dc <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002012:	f000 f9d7 	bl	80023c4 <RCC_GetSysClockFreqFromPLLSource>
 8002016:	4602      	mov	r2, r0
 8002018:	4b74      	ldr	r3, [pc, #464]	; (80021ec <HAL_RCC_ClockConfig+0x248>)
 800201a:	429a      	cmp	r2, r3
 800201c:	d955      	bls.n	80020ca <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800201e:	4b72      	ldr	r3, [pc, #456]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10a      	bne.n	8002040 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800202a:	4b6f      	ldr	r3, [pc, #444]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002032:	4a6d      	ldr	r2, [pc, #436]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8002034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002038:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	e044      	b.n	80020ca <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d03e      	beq.n	80020ca <HAL_RCC_ClockConfig+0x126>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d13a      	bne.n	80020ca <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002054:	4b64      	ldr	r3, [pc, #400]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800205c:	4a62      	ldr	r2, [pc, #392]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 800205e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002062:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	e02f      	b.n	80020ca <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002072:	4b5d      	ldr	r3, [pc, #372]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d115      	bne.n	80020aa <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e0ac      	b.n	80021dc <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d107      	bne.n	800209a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800208a:	4b57      	ldr	r3, [pc, #348]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d109      	bne.n	80020aa <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e0a0      	b.n	80021dc <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800209a:	4b53      	ldr	r3, [pc, #332]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e098      	b.n	80021dc <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80020aa:	f000 f8a7 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 80020ae:	4602      	mov	r2, r0
 80020b0:	4b4e      	ldr	r3, [pc, #312]	; (80021ec <HAL_RCC_ClockConfig+0x248>)
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d909      	bls.n	80020ca <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80020b6:	4b4c      	ldr	r3, [pc, #304]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020be:	4a4a      	ldr	r2, [pc, #296]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 80020c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80020c6:	2380      	movs	r3, #128	; 0x80
 80020c8:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020ca:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f023 0203 	bic.w	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4944      	ldr	r1, [pc, #272]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020dc:	f7fe ffca 	bl	8001074 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e4:	f7fe ffc6 	bl	8001074 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e070      	b.n	80021dc <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	4b3b      	ldr	r3, [pc, #236]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 020c 	and.w	r2, r3, #12
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	429a      	cmp	r2, r3
 800210a:	d1eb      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d009      	beq.n	800212c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002118:	4b33      	ldr	r3, [pc, #204]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	4930      	ldr	r1, [pc, #192]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8002126:	4313      	orrs	r3, r2
 8002128:	608b      	str	r3, [r1, #8]
 800212a:	e008      	b.n	800213e <HAL_RCC_ClockConfig+0x19a>
  }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	2b80      	cmp	r3, #128	; 0x80
 8002130:	d105      	bne.n	800213e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002132:	4b2d      	ldr	r3, [pc, #180]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	4a2c      	ldr	r2, [pc, #176]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8002138:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800213c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800213e:	4b29      	ldr	r3, [pc, #164]	; (80021e4 <HAL_RCC_ClockConfig+0x240>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d210      	bcs.n	800216e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214c:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <HAL_RCC_ClockConfig+0x240>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f023 020f 	bic.w	r2, r3, #15
 8002154:	4923      	ldr	r1, [pc, #140]	; (80021e4 <HAL_RCC_ClockConfig+0x240>)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	4313      	orrs	r3, r2
 800215a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800215c:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <HAL_RCC_ClockConfig+0x240>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 030f 	and.w	r3, r3, #15
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d001      	beq.n	800216e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e036      	b.n	80021dc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	2b00      	cmp	r3, #0
 8002178:	d008      	beq.n	800218c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800217a:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	4918      	ldr	r1, [pc, #96]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 8002188:	4313      	orrs	r3, r2
 800218a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	2b00      	cmp	r3, #0
 8002196:	d009      	beq.n	80021ac <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002198:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4910      	ldr	r1, [pc, #64]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021ac:	f000 f826 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 80021b0:	4601      	mov	r1, r0
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <HAL_RCC_ClockConfig+0x244>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	091b      	lsrs	r3, r3, #4
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	4a0c      	ldr	r2, [pc, #48]	; (80021f0 <HAL_RCC_ClockConfig+0x24c>)
 80021be:	5cd3      	ldrb	r3, [r2, r3]
 80021c0:	f003 031f 	and.w	r3, r3, #31
 80021c4:	fa21 f303 	lsr.w	r3, r1, r3
 80021c8:	4a0a      	ldr	r2, [pc, #40]	; (80021f4 <HAL_RCC_ClockConfig+0x250>)
 80021ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021cc:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <HAL_RCC_ClockConfig+0x254>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe ff03 	bl	8000fdc <HAL_InitTick>
 80021d6:	4603      	mov	r3, r0
 80021d8:	73fb      	strb	r3, [r7, #15]

  return status;
 80021da:	7bfb      	ldrb	r3, [r7, #15]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40022000 	.word	0x40022000
 80021e8:	40021000 	.word	0x40021000
 80021ec:	04c4b400 	.word	0x04c4b400
 80021f0:	080f59ac 	.word	0x080f59ac
 80021f4:	20000000 	.word	0x20000000
 80021f8:	20000004 	.word	0x20000004

080021fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800220a:	4b3d      	ldr	r3, [pc, #244]	; (8002300 <HAL_RCC_GetSysClockFreq+0x104>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002214:	4b3a      	ldr	r3, [pc, #232]	; (8002300 <HAL_RCC_GetSysClockFreq+0x104>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_RCC_GetSysClockFreq+0x34>
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d121      	bne.n	800226e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d11e      	bne.n	800226e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002230:	4b33      	ldr	r3, [pc, #204]	; (8002300 <HAL_RCC_GetSysClockFreq+0x104>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d107      	bne.n	800224c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800223c:	4b30      	ldr	r3, [pc, #192]	; (8002300 <HAL_RCC_GetSysClockFreq+0x104>)
 800223e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002242:	0a1b      	lsrs	r3, r3, #8
 8002244:	f003 030f 	and.w	r3, r3, #15
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	e005      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800224c:	4b2c      	ldr	r3, [pc, #176]	; (8002300 <HAL_RCC_GetSysClockFreq+0x104>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002258:	4a2a      	ldr	r2, [pc, #168]	; (8002304 <HAL_RCC_GetSysClockFreq+0x108>)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002260:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10d      	bne.n	8002284 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800226c:	e00a      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2b04      	cmp	r3, #4
 8002272:	d102      	bne.n	800227a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002274:	4b24      	ldr	r3, [pc, #144]	; (8002308 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002276:	61bb      	str	r3, [r7, #24]
 8002278:	e004      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	2b08      	cmp	r3, #8
 800227e:	d101      	bne.n	8002284 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002280:	4b22      	ldr	r3, [pc, #136]	; (800230c <HAL_RCC_GetSysClockFreq+0x110>)
 8002282:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2b0c      	cmp	r3, #12
 8002288:	d133      	bne.n	80022f2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800228a:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <HAL_RCC_GetSysClockFreq+0x104>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d002      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0xa4>
 800229a:	2b03      	cmp	r3, #3
 800229c:	d003      	beq.n	80022a6 <HAL_RCC_GetSysClockFreq+0xaa>
 800229e:	e005      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022a0:	4b19      	ldr	r3, [pc, #100]	; (8002308 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022a2:	617b      	str	r3, [r7, #20]
      break;
 80022a4:	e005      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022a6:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_RCC_GetSysClockFreq+0x110>)
 80022a8:	617b      	str	r3, [r7, #20]
      break;
 80022aa:	e002      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	617b      	str	r3, [r7, #20]
      break;
 80022b0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <HAL_RCC_GetSysClockFreq+0x104>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	091b      	lsrs	r3, r3, #4
 80022b8:	f003 030f 	and.w	r3, r3, #15
 80022bc:	3301      	adds	r3, #1
 80022be:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022c0:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <HAL_RCC_GetSysClockFreq+0x104>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	fb02 f203 	mul.w	r2, r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_RCC_GetSysClockFreq+0x104>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	0e5b      	lsrs	r3, r3, #25
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	3301      	adds	r3, #1
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022f2:	69bb      	ldr	r3, [r7, #24]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3724      	adds	r7, #36	; 0x24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	40021000 	.word	0x40021000
 8002304:	080f59bc 	.word	0x080f59bc
 8002308:	00f42400 	.word	0x00f42400
 800230c:	007a1200 	.word	0x007a1200

08002310 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002318:	2300      	movs	r3, #0
 800231a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800231c:	4b27      	ldr	r3, [pc, #156]	; (80023bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800231e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002328:	f7ff f97a 	bl	8001620 <HAL_PWREx_GetVoltageRange>
 800232c:	6178      	str	r0, [r7, #20]
 800232e:	e014      	b.n	800235a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002330:	4b22      	ldr	r3, [pc, #136]	; (80023bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002334:	4a21      	ldr	r2, [pc, #132]	; (80023bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233a:	6593      	str	r3, [r2, #88]	; 0x58
 800233c:	4b1f      	ldr	r3, [pc, #124]	; (80023bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800233e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002348:	f7ff f96a 	bl	8001620 <HAL_PWREx_GetVoltageRange>
 800234c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800234e:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002352:	4a1a      	ldr	r2, [pc, #104]	; (80023bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002358:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002360:	d10b      	bne.n	800237a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b80      	cmp	r3, #128	; 0x80
 8002366:	d913      	bls.n	8002390 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2ba0      	cmp	r3, #160	; 0xa0
 800236c:	d902      	bls.n	8002374 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800236e:	2302      	movs	r3, #2
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	e00d      	b.n	8002390 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002374:	2301      	movs	r3, #1
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	e00a      	b.n	8002390 <RCC_SetFlashLatencyFromMSIRange+0x80>
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b7f      	cmp	r3, #127	; 0x7f
 800237e:	d902      	bls.n	8002386 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002380:	2302      	movs	r3, #2
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	e004      	b.n	8002390 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b70      	cmp	r3, #112	; 0x70
 800238a:	d101      	bne.n	8002390 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800238c:	2301      	movs	r3, #1
 800238e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f023 020f 	bic.w	r2, r3, #15
 8002398:	4909      	ldr	r1, [pc, #36]	; (80023c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023a0:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d001      	beq.n	80023b2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000
 80023c0:	40022000 	.word	0x40022000

080023c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80023ce:	4b2d      	ldr	r3, [pc, #180]	; (8002484 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d118      	bne.n	800240c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023da:	4b2a      	ldr	r3, [pc, #168]	; (8002484 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d107      	bne.n	80023f6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023e6:	4b27      	ldr	r3, [pc, #156]	; (8002484 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80023e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ec:	0a1b      	lsrs	r3, r3, #8
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	e005      	b.n	8002402 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023f6:	4b23      	ldr	r3, [pc, #140]	; (8002484 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	091b      	lsrs	r3, r3, #4
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002402:	4a21      	ldr	r2, [pc, #132]	; (8002488 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800240c:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d002      	beq.n	8002422 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 800241c:	2b03      	cmp	r3, #3
 800241e:	d003      	beq.n	8002428 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002420:	e005      	b.n	800242e <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002422:	4b1a      	ldr	r3, [pc, #104]	; (800248c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002424:	613b      	str	r3, [r7, #16]
    break;
 8002426:	e005      	b.n	8002434 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002428:	4b19      	ldr	r3, [pc, #100]	; (8002490 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800242a:	613b      	str	r3, [r7, #16]
    break;
 800242c:	e002      	b.n	8002434 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	613b      	str	r3, [r7, #16]
    break;
 8002432:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002434:	4b13      	ldr	r3, [pc, #76]	; (8002484 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	3301      	adds	r3, #1
 8002440:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002442:	4b10      	ldr	r3, [pc, #64]	; (8002484 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	0a1b      	lsrs	r3, r3, #8
 8002448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	fb02 f203 	mul.w	r2, r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	fbb2 f3f3 	udiv	r3, r2, r3
 8002458:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	0e5b      	lsrs	r3, r3, #25
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	3301      	adds	r3, #1
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002474:	683b      	ldr	r3, [r7, #0]
}
 8002476:	4618      	mov	r0, r3
 8002478:	371c      	adds	r7, #28
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
 8002488:	080f59bc 	.word	0x080f59bc
 800248c:	00f42400 	.word	0x00f42400
 8002490:	007a1200 	.word	0x007a1200

08002494 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e07c      	b.n	80025a0 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d106      	bne.n	80024c6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7fe fbe5 	bl	8000c90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2202      	movs	r2, #2
 80024ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024dc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024e6:	d902      	bls.n	80024ee <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	e002      	b.n	80024f4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80024ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80024fc:	d007      	beq.n	800250e <HAL_SPI_Init+0x7a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002506:	d002      	beq.n	800250e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10b      	bne.n	800252e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800251e:	d903      	bls.n	8002528 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2202      	movs	r2, #2
 8002524:	631a      	str	r2, [r3, #48]	; 0x30
 8002526:	e002      	b.n	800252e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	ea42 0103 	orr.w	r1, r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	0c1b      	lsrs	r3, r3, #16
 800256e:	f003 0204 	and.w	r2, r3, #4
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257c:	431a      	orrs	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	ea42 0103 	orr.w	r1, r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	430a      	orrs	r2, r1
 800258e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_SPI_Transmit+0x22>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e150      	b.n	800286c <HAL_SPI_Transmit+0x2c4>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025d2:	f7fe fd4f 	bl	8001074 <HAL_GetTick>
 80025d6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d002      	beq.n	80025ee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80025e8:	2302      	movs	r3, #2
 80025ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025ec:	e135      	b.n	800285a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <HAL_SPI_Transmit+0x52>
 80025f4:	88fb      	ldrh	r3, [r7, #6]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d102      	bne.n	8002600 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025fe:	e12c      	b.n	800285a <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2203      	movs	r2, #3
 8002604:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	88fa      	ldrh	r2, [r7, #6]
 8002618:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	88fa      	ldrh	r2, [r7, #6]
 800261e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800264a:	d107      	bne.n	800265c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800265a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002666:	2b40      	cmp	r3, #64	; 0x40
 8002668:	d007      	beq.n	800267a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002678:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002682:	d94b      	bls.n	800271c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d002      	beq.n	8002692 <HAL_SPI_Transmit+0xea>
 800268c:	8afb      	ldrh	r3, [r7, #22]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d13e      	bne.n	8002710 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002696:	881a      	ldrh	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a2:	1c9a      	adds	r2, r3, #2
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026b6:	e02b      	b.n	8002710 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d112      	bne.n	80026ec <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ca:	881a      	ldrh	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d6:	1c9a      	adds	r2, r3, #2
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026ea:	e011      	b.n	8002710 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026ec:	f7fe fcc2 	bl	8001074 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d803      	bhi.n	8002704 <HAL_SPI_Transmit+0x15c>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002702:	d102      	bne.n	800270a <HAL_SPI_Transmit+0x162>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d102      	bne.n	8002710 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800270e:	e0a4      	b.n	800285a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002714:	b29b      	uxth	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1ce      	bne.n	80026b8 <HAL_SPI_Transmit+0x110>
 800271a:	e07c      	b.n	8002816 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <HAL_SPI_Transmit+0x182>
 8002724:	8afb      	ldrh	r3, [r7, #22]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d170      	bne.n	800280c <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800272e:	b29b      	uxth	r3, r3
 8002730:	2b01      	cmp	r3, #1
 8002732:	d912      	bls.n	800275a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002738:	881a      	ldrh	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002744:	1c9a      	adds	r2, r3, #2
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800274e:	b29b      	uxth	r3, r3
 8002750:	3b02      	subs	r3, #2
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002758:	e058      	b.n	800280c <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	330c      	adds	r3, #12
 8002764:	7812      	ldrb	r2, [r2, #0]
 8002766:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002776:	b29b      	uxth	r3, r3
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002780:	e044      	b.n	800280c <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b02      	cmp	r3, #2
 800278e:	d12b      	bne.n	80027e8 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b01      	cmp	r3, #1
 8002798:	d912      	bls.n	80027c0 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279e:	881a      	ldrh	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027aa:	1c9a      	adds	r2, r3, #2
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	3b02      	subs	r3, #2
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027be:	e025      	b.n	800280c <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	330c      	adds	r3, #12
 80027ca:	7812      	ldrb	r2, [r2, #0]
 80027cc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027dc:	b29b      	uxth	r3, r3
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027e6:	e011      	b.n	800280c <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027e8:	f7fe fc44 	bl	8001074 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d803      	bhi.n	8002800 <HAL_SPI_Transmit+0x258>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fe:	d102      	bne.n	8002806 <HAL_SPI_Transmit+0x25e>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d102      	bne.n	800280c <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	77fb      	strb	r3, [r7, #31]
          goto error;
 800280a:	e026      	b.n	800285a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002810:	b29b      	uxth	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1b5      	bne.n	8002782 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	6839      	ldr	r1, [r7, #0]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 fb14 	bl	8002e48 <SPI_EndRxTxTransaction>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2220      	movs	r2, #32
 800282a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10a      	bne.n	800284a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002834:	2300      	movs	r3, #0
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	77fb      	strb	r3, [r7, #31]
 8002856:	e000      	b.n	800285a <HAL_SPI_Transmit+0x2b2>
  }

error:
 8002858:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800286a:	7ffb      	ldrb	r3, [r7, #31]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3720      	adds	r7, #32
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	; 0x28
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002882:	2301      	movs	r3, #1
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_SPI_TransmitReceive+0x26>
 8002896:	2302      	movs	r3, #2
 8002898:	e1fb      	b.n	8002c92 <HAL_SPI_TransmitReceive+0x41e>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028a2:	f7fe fbe7 	bl	8001074 <HAL_GetTick>
 80028a6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028ae:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80028b6:	887b      	ldrh	r3, [r7, #2]
 80028b8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80028ba:	887b      	ldrh	r3, [r7, #2]
 80028bc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028be:	7efb      	ldrb	r3, [r7, #27]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d00e      	beq.n	80028e2 <HAL_SPI_TransmitReceive+0x6e>
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028ca:	d106      	bne.n	80028da <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d102      	bne.n	80028da <HAL_SPI_TransmitReceive+0x66>
 80028d4:	7efb      	ldrb	r3, [r7, #27]
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d003      	beq.n	80028e2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80028da:	2302      	movs	r3, #2
 80028dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80028e0:	e1cd      	b.n	8002c7e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_SPI_TransmitReceive+0x80>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d002      	beq.n	80028f4 <HAL_SPI_TransmitReceive+0x80>
 80028ee:	887b      	ldrh	r3, [r7, #2]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d103      	bne.n	80028fc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80028fa:	e1c0      	b.n	8002c7e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b04      	cmp	r3, #4
 8002906:	d003      	beq.n	8002910 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2205      	movs	r2, #5
 800290c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	887a      	ldrh	r2, [r7, #2]
 8002920:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	887a      	ldrh	r2, [r7, #2]
 8002928:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	887a      	ldrh	r2, [r7, #2]
 8002936:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	887a      	ldrh	r2, [r7, #2]
 800293c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002952:	d802      	bhi.n	800295a <HAL_SPI_TransmitReceive+0xe6>
 8002954:	8a3b      	ldrh	r3, [r7, #16]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d908      	bls.n	800296c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	e007      	b.n	800297c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800297a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002986:	2b40      	cmp	r3, #64	; 0x40
 8002988:	d007      	beq.n	800299a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002998:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029a2:	d97c      	bls.n	8002a9e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <HAL_SPI_TransmitReceive+0x13e>
 80029ac:	8a7b      	ldrh	r3, [r7, #18]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d169      	bne.n	8002a86 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b6:	881a      	ldrh	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c2:	1c9a      	adds	r2, r3, #2
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	3b01      	subs	r3, #1
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029d6:	e056      	b.n	8002a86 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d11b      	bne.n	8002a1e <HAL_SPI_TransmitReceive+0x1aa>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d016      	beq.n	8002a1e <HAL_SPI_TransmitReceive+0x1aa>
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d113      	bne.n	8002a1e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fa:	881a      	ldrh	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a06:	1c9a      	adds	r2, r3, #2
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d11c      	bne.n	8002a66 <HAL_SPI_TransmitReceive+0x1f2>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d016      	beq.n	8002a66 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	b292      	uxth	r2, r2
 8002a44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	1c9a      	adds	r2, r3, #2
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a62:	2301      	movs	r3, #1
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a66:	f7fe fb05 	bl	8001074 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d807      	bhi.n	8002a86 <HAL_SPI_TransmitReceive+0x212>
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d003      	beq.n	8002a86 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002a84:	e0fb      	b.n	8002c7e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1a3      	bne.n	80029d8 <HAL_SPI_TransmitReceive+0x164>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d19d      	bne.n	80029d8 <HAL_SPI_TransmitReceive+0x164>
 8002a9c:	e0df      	b.n	8002c5e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_SPI_TransmitReceive+0x23a>
 8002aa6:	8a7b      	ldrh	r3, [r7, #18]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	f040 80cb 	bne.w	8002c44 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d912      	bls.n	8002ade <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abc:	881a      	ldrh	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac8:	1c9a      	adds	r2, r3, #2
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b02      	subs	r3, #2
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002adc:	e0b2      	b.n	8002c44 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	330c      	adds	r3, #12
 8002ae8:	7812      	ldrb	r2, [r2, #0]
 8002aea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b04:	e09e      	b.n	8002c44 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d134      	bne.n	8002b7e <HAL_SPI_TransmitReceive+0x30a>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d02f      	beq.n	8002b7e <HAL_SPI_TransmitReceive+0x30a>
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d12c      	bne.n	8002b7e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d912      	bls.n	8002b54 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b32:	881a      	ldrh	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3e:	1c9a      	adds	r2, r3, #2
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b02      	subs	r3, #2
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b52:	e012      	b.n	8002b7a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	330c      	adds	r3, #12
 8002b5e:	7812      	ldrb	r2, [r2, #0]
 8002b60:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d148      	bne.n	8002c1e <HAL_SPI_TransmitReceive+0x3aa>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d042      	beq.n	8002c1e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d923      	bls.n	8002bec <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	b292      	uxth	r2, r2
 8002bb0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	1c9a      	adds	r2, r3, #2
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b02      	subs	r3, #2
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d81f      	bhi.n	8002c1a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	e016      	b.n	8002c1a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f103 020c 	add.w	r2, r3, #12
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	7812      	ldrb	r2, [r2, #0]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c1e:	f7fe fa29 	bl	8001074 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d803      	bhi.n	8002c36 <HAL_SPI_TransmitReceive+0x3c2>
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c34:	d102      	bne.n	8002c3c <HAL_SPI_TransmitReceive+0x3c8>
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d103      	bne.n	8002c44 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002c42:	e01c      	b.n	8002c7e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f47f af5b 	bne.w	8002b06 <HAL_SPI_TransmitReceive+0x292>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f47f af54 	bne.w	8002b06 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f8f0 	bl	8002e48 <SPI_EndRxTxTransaction>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d006      	beq.n	8002c7c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	661a      	str	r2, [r3, #96]	; 0x60
 8002c7a:	e000      	b.n	8002c7e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002c7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002c8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3728      	adds	r7, #40	; 0x28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002caa:	e04c      	b.n	8002d46 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb2:	d048      	beq.n	8002d46 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002cb4:	f7fe f9de 	bl	8001074 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d902      	bls.n	8002cca <SPI_WaitFlagStateUntilTimeout+0x30>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d13d      	bne.n	8002d46 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ce2:	d111      	bne.n	8002d08 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cec:	d004      	beq.n	8002cf8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf6:	d107      	bne.n	8002d08 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d10:	d10f      	bne.n	8002d32 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e00f      	b.n	8002d66 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	bf0c      	ite	eq
 8002d56:	2301      	moveq	r3, #1
 8002d58:	2300      	movne	r3, #0
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d1a3      	bne.n	8002cac <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
 8002d7a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002d7c:	e057      	b.n	8002e2e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002d84:	d106      	bne.n	8002d94 <SPI_WaitFifoStateUntilTimeout+0x26>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d103      	bne.n	8002d94 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	330c      	adds	r3, #12
 8002d92:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9a:	d048      	beq.n	8002e2e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002d9c:	f7fe f96a 	bl	8001074 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d902      	bls.n	8002db2 <SPI_WaitFifoStateUntilTimeout+0x44>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d13d      	bne.n	8002e2e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002dc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dca:	d111      	bne.n	8002df0 <SPI_WaitFifoStateUntilTimeout+0x82>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd4:	d004      	beq.n	8002de0 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dde:	d107      	bne.n	8002df0 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df8:	d10f      	bne.n	8002e1a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e008      	b.n	8002e40 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4013      	ands	r3, r2
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d19f      	bne.n	8002d7e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f7ff ff84 	bl	8002d6e <SPI_WaitFifoStateUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d007      	beq.n	8002e7c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e70:	f043 0220 	orr.w	r2, r3, #32
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e027      	b.n	8002ecc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2200      	movs	r2, #0
 8002e84:	2180      	movs	r1, #128	; 0x80
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f7ff ff07 	bl	8002c9a <SPI_WaitFlagStateUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e96:	f043 0220 	orr.w	r2, r3, #32
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e014      	b.n	8002ecc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f7ff ff5d 	bl	8002d6e <SPI_WaitFifoStateUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d007      	beq.n	8002eca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ebe:	f043 0220 	orr.w	r2, r3, #32
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e000      	b.n	8002ecc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <__errno>:
 8002ed4:	4b01      	ldr	r3, [pc, #4]	; (8002edc <__errno+0x8>)
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	2000000c 	.word	0x2000000c

08002ee0 <__libc_init_array>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	4e0d      	ldr	r6, [pc, #52]	; (8002f18 <__libc_init_array+0x38>)
 8002ee4:	4c0d      	ldr	r4, [pc, #52]	; (8002f1c <__libc_init_array+0x3c>)
 8002ee6:	1ba4      	subs	r4, r4, r6
 8002ee8:	10a4      	asrs	r4, r4, #2
 8002eea:	2500      	movs	r5, #0
 8002eec:	42a5      	cmp	r5, r4
 8002eee:	d109      	bne.n	8002f04 <__libc_init_array+0x24>
 8002ef0:	4e0b      	ldr	r6, [pc, #44]	; (8002f20 <__libc_init_array+0x40>)
 8002ef2:	4c0c      	ldr	r4, [pc, #48]	; (8002f24 <__libc_init_array+0x44>)
 8002ef4:	f000 ff68 	bl	8003dc8 <_init>
 8002ef8:	1ba4      	subs	r4, r4, r6
 8002efa:	10a4      	asrs	r4, r4, #2
 8002efc:	2500      	movs	r5, #0
 8002efe:	42a5      	cmp	r5, r4
 8002f00:	d105      	bne.n	8002f0e <__libc_init_array+0x2e>
 8002f02:	bd70      	pop	{r4, r5, r6, pc}
 8002f04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f08:	4798      	blx	r3
 8002f0a:	3501      	adds	r5, #1
 8002f0c:	e7ee      	b.n	8002eec <__libc_init_array+0xc>
 8002f0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f12:	4798      	blx	r3
 8002f14:	3501      	adds	r5, #1
 8002f16:	e7f2      	b.n	8002efe <__libc_init_array+0x1e>
 8002f18:	080f5a84 	.word	0x080f5a84
 8002f1c:	080f5a84 	.word	0x080f5a84
 8002f20:	080f5a84 	.word	0x080f5a84
 8002f24:	080f5a88 	.word	0x080f5a88

08002f28 <memset>:
 8002f28:	4402      	add	r2, r0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d100      	bne.n	8002f32 <memset+0xa>
 8002f30:	4770      	bx	lr
 8002f32:	f803 1b01 	strb.w	r1, [r3], #1
 8002f36:	e7f9      	b.n	8002f2c <memset+0x4>

08002f38 <iprintf>:
 8002f38:	b40f      	push	{r0, r1, r2, r3}
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <iprintf+0x2c>)
 8002f3c:	b513      	push	{r0, r1, r4, lr}
 8002f3e:	681c      	ldr	r4, [r3, #0]
 8002f40:	b124      	cbz	r4, 8002f4c <iprintf+0x14>
 8002f42:	69a3      	ldr	r3, [r4, #24]
 8002f44:	b913      	cbnz	r3, 8002f4c <iprintf+0x14>
 8002f46:	4620      	mov	r0, r4
 8002f48:	f000 fa22 	bl	8003390 <__sinit>
 8002f4c:	ab05      	add	r3, sp, #20
 8002f4e:	9a04      	ldr	r2, [sp, #16]
 8002f50:	68a1      	ldr	r1, [r4, #8]
 8002f52:	9301      	str	r3, [sp, #4]
 8002f54:	4620      	mov	r0, r4
 8002f56:	f000 fbdb 	bl	8003710 <_vfiprintf_r>
 8002f5a:	b002      	add	sp, #8
 8002f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f60:	b004      	add	sp, #16
 8002f62:	4770      	bx	lr
 8002f64:	2000000c 	.word	0x2000000c

08002f68 <_puts_r>:
 8002f68:	b570      	push	{r4, r5, r6, lr}
 8002f6a:	460e      	mov	r6, r1
 8002f6c:	4605      	mov	r5, r0
 8002f6e:	b118      	cbz	r0, 8002f78 <_puts_r+0x10>
 8002f70:	6983      	ldr	r3, [r0, #24]
 8002f72:	b90b      	cbnz	r3, 8002f78 <_puts_r+0x10>
 8002f74:	f000 fa0c 	bl	8003390 <__sinit>
 8002f78:	69ab      	ldr	r3, [r5, #24]
 8002f7a:	68ac      	ldr	r4, [r5, #8]
 8002f7c:	b913      	cbnz	r3, 8002f84 <_puts_r+0x1c>
 8002f7e:	4628      	mov	r0, r5
 8002f80:	f000 fa06 	bl	8003390 <__sinit>
 8002f84:	4b23      	ldr	r3, [pc, #140]	; (8003014 <_puts_r+0xac>)
 8002f86:	429c      	cmp	r4, r3
 8002f88:	d117      	bne.n	8002fba <_puts_r+0x52>
 8002f8a:	686c      	ldr	r4, [r5, #4]
 8002f8c:	89a3      	ldrh	r3, [r4, #12]
 8002f8e:	071b      	lsls	r3, r3, #28
 8002f90:	d51d      	bpl.n	8002fce <_puts_r+0x66>
 8002f92:	6923      	ldr	r3, [r4, #16]
 8002f94:	b1db      	cbz	r3, 8002fce <_puts_r+0x66>
 8002f96:	3e01      	subs	r6, #1
 8002f98:	68a3      	ldr	r3, [r4, #8]
 8002f9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	60a3      	str	r3, [r4, #8]
 8002fa2:	b9e9      	cbnz	r1, 8002fe0 <_puts_r+0x78>
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	da2e      	bge.n	8003006 <_puts_r+0x9e>
 8002fa8:	4622      	mov	r2, r4
 8002faa:	210a      	movs	r1, #10
 8002fac:	4628      	mov	r0, r5
 8002fae:	f000 f83f 	bl	8003030 <__swbuf_r>
 8002fb2:	3001      	adds	r0, #1
 8002fb4:	d011      	beq.n	8002fda <_puts_r+0x72>
 8002fb6:	200a      	movs	r0, #10
 8002fb8:	e011      	b.n	8002fde <_puts_r+0x76>
 8002fba:	4b17      	ldr	r3, [pc, #92]	; (8003018 <_puts_r+0xb0>)
 8002fbc:	429c      	cmp	r4, r3
 8002fbe:	d101      	bne.n	8002fc4 <_puts_r+0x5c>
 8002fc0:	68ac      	ldr	r4, [r5, #8]
 8002fc2:	e7e3      	b.n	8002f8c <_puts_r+0x24>
 8002fc4:	4b15      	ldr	r3, [pc, #84]	; (800301c <_puts_r+0xb4>)
 8002fc6:	429c      	cmp	r4, r3
 8002fc8:	bf08      	it	eq
 8002fca:	68ec      	ldreq	r4, [r5, #12]
 8002fcc:	e7de      	b.n	8002f8c <_puts_r+0x24>
 8002fce:	4621      	mov	r1, r4
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	f000 f87f 	bl	80030d4 <__swsetup_r>
 8002fd6:	2800      	cmp	r0, #0
 8002fd8:	d0dd      	beq.n	8002f96 <_puts_r+0x2e>
 8002fda:	f04f 30ff 	mov.w	r0, #4294967295
 8002fde:	bd70      	pop	{r4, r5, r6, pc}
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	da04      	bge.n	8002fee <_puts_r+0x86>
 8002fe4:	69a2      	ldr	r2, [r4, #24]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	dc06      	bgt.n	8002ff8 <_puts_r+0x90>
 8002fea:	290a      	cmp	r1, #10
 8002fec:	d004      	beq.n	8002ff8 <_puts_r+0x90>
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	6022      	str	r2, [r4, #0]
 8002ff4:	7019      	strb	r1, [r3, #0]
 8002ff6:	e7cf      	b.n	8002f98 <_puts_r+0x30>
 8002ff8:	4622      	mov	r2, r4
 8002ffa:	4628      	mov	r0, r5
 8002ffc:	f000 f818 	bl	8003030 <__swbuf_r>
 8003000:	3001      	adds	r0, #1
 8003002:	d1c9      	bne.n	8002f98 <_puts_r+0x30>
 8003004:	e7e9      	b.n	8002fda <_puts_r+0x72>
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	200a      	movs	r0, #10
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	6022      	str	r2, [r4, #0]
 800300e:	7018      	strb	r0, [r3, #0]
 8003010:	e7e5      	b.n	8002fde <_puts_r+0x76>
 8003012:	bf00      	nop
 8003014:	080f5a10 	.word	0x080f5a10
 8003018:	080f5a30 	.word	0x080f5a30
 800301c:	080f59f0 	.word	0x080f59f0

08003020 <puts>:
 8003020:	4b02      	ldr	r3, [pc, #8]	; (800302c <puts+0xc>)
 8003022:	4601      	mov	r1, r0
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	f7ff bf9f 	b.w	8002f68 <_puts_r>
 800302a:	bf00      	nop
 800302c:	2000000c 	.word	0x2000000c

08003030 <__swbuf_r>:
 8003030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003032:	460e      	mov	r6, r1
 8003034:	4614      	mov	r4, r2
 8003036:	4605      	mov	r5, r0
 8003038:	b118      	cbz	r0, 8003042 <__swbuf_r+0x12>
 800303a:	6983      	ldr	r3, [r0, #24]
 800303c:	b90b      	cbnz	r3, 8003042 <__swbuf_r+0x12>
 800303e:	f000 f9a7 	bl	8003390 <__sinit>
 8003042:	4b21      	ldr	r3, [pc, #132]	; (80030c8 <__swbuf_r+0x98>)
 8003044:	429c      	cmp	r4, r3
 8003046:	d12a      	bne.n	800309e <__swbuf_r+0x6e>
 8003048:	686c      	ldr	r4, [r5, #4]
 800304a:	69a3      	ldr	r3, [r4, #24]
 800304c:	60a3      	str	r3, [r4, #8]
 800304e:	89a3      	ldrh	r3, [r4, #12]
 8003050:	071a      	lsls	r2, r3, #28
 8003052:	d52e      	bpl.n	80030b2 <__swbuf_r+0x82>
 8003054:	6923      	ldr	r3, [r4, #16]
 8003056:	b363      	cbz	r3, 80030b2 <__swbuf_r+0x82>
 8003058:	6923      	ldr	r3, [r4, #16]
 800305a:	6820      	ldr	r0, [r4, #0]
 800305c:	1ac0      	subs	r0, r0, r3
 800305e:	6963      	ldr	r3, [r4, #20]
 8003060:	b2f6      	uxtb	r6, r6
 8003062:	4283      	cmp	r3, r0
 8003064:	4637      	mov	r7, r6
 8003066:	dc04      	bgt.n	8003072 <__swbuf_r+0x42>
 8003068:	4621      	mov	r1, r4
 800306a:	4628      	mov	r0, r5
 800306c:	f000 f926 	bl	80032bc <_fflush_r>
 8003070:	bb28      	cbnz	r0, 80030be <__swbuf_r+0x8e>
 8003072:	68a3      	ldr	r3, [r4, #8]
 8003074:	3b01      	subs	r3, #1
 8003076:	60a3      	str	r3, [r4, #8]
 8003078:	6823      	ldr	r3, [r4, #0]
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	6022      	str	r2, [r4, #0]
 800307e:	701e      	strb	r6, [r3, #0]
 8003080:	6963      	ldr	r3, [r4, #20]
 8003082:	3001      	adds	r0, #1
 8003084:	4283      	cmp	r3, r0
 8003086:	d004      	beq.n	8003092 <__swbuf_r+0x62>
 8003088:	89a3      	ldrh	r3, [r4, #12]
 800308a:	07db      	lsls	r3, r3, #31
 800308c:	d519      	bpl.n	80030c2 <__swbuf_r+0x92>
 800308e:	2e0a      	cmp	r6, #10
 8003090:	d117      	bne.n	80030c2 <__swbuf_r+0x92>
 8003092:	4621      	mov	r1, r4
 8003094:	4628      	mov	r0, r5
 8003096:	f000 f911 	bl	80032bc <_fflush_r>
 800309a:	b190      	cbz	r0, 80030c2 <__swbuf_r+0x92>
 800309c:	e00f      	b.n	80030be <__swbuf_r+0x8e>
 800309e:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <__swbuf_r+0x9c>)
 80030a0:	429c      	cmp	r4, r3
 80030a2:	d101      	bne.n	80030a8 <__swbuf_r+0x78>
 80030a4:	68ac      	ldr	r4, [r5, #8]
 80030a6:	e7d0      	b.n	800304a <__swbuf_r+0x1a>
 80030a8:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <__swbuf_r+0xa0>)
 80030aa:	429c      	cmp	r4, r3
 80030ac:	bf08      	it	eq
 80030ae:	68ec      	ldreq	r4, [r5, #12]
 80030b0:	e7cb      	b.n	800304a <__swbuf_r+0x1a>
 80030b2:	4621      	mov	r1, r4
 80030b4:	4628      	mov	r0, r5
 80030b6:	f000 f80d 	bl	80030d4 <__swsetup_r>
 80030ba:	2800      	cmp	r0, #0
 80030bc:	d0cc      	beq.n	8003058 <__swbuf_r+0x28>
 80030be:	f04f 37ff 	mov.w	r7, #4294967295
 80030c2:	4638      	mov	r0, r7
 80030c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030c6:	bf00      	nop
 80030c8:	080f5a10 	.word	0x080f5a10
 80030cc:	080f5a30 	.word	0x080f5a30
 80030d0:	080f59f0 	.word	0x080f59f0

080030d4 <__swsetup_r>:
 80030d4:	4b32      	ldr	r3, [pc, #200]	; (80031a0 <__swsetup_r+0xcc>)
 80030d6:	b570      	push	{r4, r5, r6, lr}
 80030d8:	681d      	ldr	r5, [r3, #0]
 80030da:	4606      	mov	r6, r0
 80030dc:	460c      	mov	r4, r1
 80030de:	b125      	cbz	r5, 80030ea <__swsetup_r+0x16>
 80030e0:	69ab      	ldr	r3, [r5, #24]
 80030e2:	b913      	cbnz	r3, 80030ea <__swsetup_r+0x16>
 80030e4:	4628      	mov	r0, r5
 80030e6:	f000 f953 	bl	8003390 <__sinit>
 80030ea:	4b2e      	ldr	r3, [pc, #184]	; (80031a4 <__swsetup_r+0xd0>)
 80030ec:	429c      	cmp	r4, r3
 80030ee:	d10f      	bne.n	8003110 <__swsetup_r+0x3c>
 80030f0:	686c      	ldr	r4, [r5, #4]
 80030f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	0715      	lsls	r5, r2, #28
 80030fa:	d42c      	bmi.n	8003156 <__swsetup_r+0x82>
 80030fc:	06d0      	lsls	r0, r2, #27
 80030fe:	d411      	bmi.n	8003124 <__swsetup_r+0x50>
 8003100:	2209      	movs	r2, #9
 8003102:	6032      	str	r2, [r6, #0]
 8003104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003108:	81a3      	strh	r3, [r4, #12]
 800310a:	f04f 30ff 	mov.w	r0, #4294967295
 800310e:	e03e      	b.n	800318e <__swsetup_r+0xba>
 8003110:	4b25      	ldr	r3, [pc, #148]	; (80031a8 <__swsetup_r+0xd4>)
 8003112:	429c      	cmp	r4, r3
 8003114:	d101      	bne.n	800311a <__swsetup_r+0x46>
 8003116:	68ac      	ldr	r4, [r5, #8]
 8003118:	e7eb      	b.n	80030f2 <__swsetup_r+0x1e>
 800311a:	4b24      	ldr	r3, [pc, #144]	; (80031ac <__swsetup_r+0xd8>)
 800311c:	429c      	cmp	r4, r3
 800311e:	bf08      	it	eq
 8003120:	68ec      	ldreq	r4, [r5, #12]
 8003122:	e7e6      	b.n	80030f2 <__swsetup_r+0x1e>
 8003124:	0751      	lsls	r1, r2, #29
 8003126:	d512      	bpl.n	800314e <__swsetup_r+0x7a>
 8003128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800312a:	b141      	cbz	r1, 800313e <__swsetup_r+0x6a>
 800312c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003130:	4299      	cmp	r1, r3
 8003132:	d002      	beq.n	800313a <__swsetup_r+0x66>
 8003134:	4630      	mov	r0, r6
 8003136:	f000 fa19 	bl	800356c <_free_r>
 800313a:	2300      	movs	r3, #0
 800313c:	6363      	str	r3, [r4, #52]	; 0x34
 800313e:	89a3      	ldrh	r3, [r4, #12]
 8003140:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003144:	81a3      	strh	r3, [r4, #12]
 8003146:	2300      	movs	r3, #0
 8003148:	6063      	str	r3, [r4, #4]
 800314a:	6923      	ldr	r3, [r4, #16]
 800314c:	6023      	str	r3, [r4, #0]
 800314e:	89a3      	ldrh	r3, [r4, #12]
 8003150:	f043 0308 	orr.w	r3, r3, #8
 8003154:	81a3      	strh	r3, [r4, #12]
 8003156:	6923      	ldr	r3, [r4, #16]
 8003158:	b94b      	cbnz	r3, 800316e <__swsetup_r+0x9a>
 800315a:	89a3      	ldrh	r3, [r4, #12]
 800315c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003164:	d003      	beq.n	800316e <__swsetup_r+0x9a>
 8003166:	4621      	mov	r1, r4
 8003168:	4630      	mov	r0, r6
 800316a:	f000 f9bf 	bl	80034ec <__smakebuf_r>
 800316e:	89a2      	ldrh	r2, [r4, #12]
 8003170:	f012 0301 	ands.w	r3, r2, #1
 8003174:	d00c      	beq.n	8003190 <__swsetup_r+0xbc>
 8003176:	2300      	movs	r3, #0
 8003178:	60a3      	str	r3, [r4, #8]
 800317a:	6963      	ldr	r3, [r4, #20]
 800317c:	425b      	negs	r3, r3
 800317e:	61a3      	str	r3, [r4, #24]
 8003180:	6923      	ldr	r3, [r4, #16]
 8003182:	b953      	cbnz	r3, 800319a <__swsetup_r+0xc6>
 8003184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003188:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800318c:	d1ba      	bne.n	8003104 <__swsetup_r+0x30>
 800318e:	bd70      	pop	{r4, r5, r6, pc}
 8003190:	0792      	lsls	r2, r2, #30
 8003192:	bf58      	it	pl
 8003194:	6963      	ldrpl	r3, [r4, #20]
 8003196:	60a3      	str	r3, [r4, #8]
 8003198:	e7f2      	b.n	8003180 <__swsetup_r+0xac>
 800319a:	2000      	movs	r0, #0
 800319c:	e7f7      	b.n	800318e <__swsetup_r+0xba>
 800319e:	bf00      	nop
 80031a0:	2000000c 	.word	0x2000000c
 80031a4:	080f5a10 	.word	0x080f5a10
 80031a8:	080f5a30 	.word	0x080f5a30
 80031ac:	080f59f0 	.word	0x080f59f0

080031b0 <__sflush_r>:
 80031b0:	898a      	ldrh	r2, [r1, #12]
 80031b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031b6:	4605      	mov	r5, r0
 80031b8:	0710      	lsls	r0, r2, #28
 80031ba:	460c      	mov	r4, r1
 80031bc:	d458      	bmi.n	8003270 <__sflush_r+0xc0>
 80031be:	684b      	ldr	r3, [r1, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	dc05      	bgt.n	80031d0 <__sflush_r+0x20>
 80031c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	dc02      	bgt.n	80031d0 <__sflush_r+0x20>
 80031ca:	2000      	movs	r0, #0
 80031cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031d2:	2e00      	cmp	r6, #0
 80031d4:	d0f9      	beq.n	80031ca <__sflush_r+0x1a>
 80031d6:	2300      	movs	r3, #0
 80031d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80031dc:	682f      	ldr	r7, [r5, #0]
 80031de:	6a21      	ldr	r1, [r4, #32]
 80031e0:	602b      	str	r3, [r5, #0]
 80031e2:	d032      	beq.n	800324a <__sflush_r+0x9a>
 80031e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031e6:	89a3      	ldrh	r3, [r4, #12]
 80031e8:	075a      	lsls	r2, r3, #29
 80031ea:	d505      	bpl.n	80031f8 <__sflush_r+0x48>
 80031ec:	6863      	ldr	r3, [r4, #4]
 80031ee:	1ac0      	subs	r0, r0, r3
 80031f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031f2:	b10b      	cbz	r3, 80031f8 <__sflush_r+0x48>
 80031f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031f6:	1ac0      	subs	r0, r0, r3
 80031f8:	2300      	movs	r3, #0
 80031fa:	4602      	mov	r2, r0
 80031fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031fe:	6a21      	ldr	r1, [r4, #32]
 8003200:	4628      	mov	r0, r5
 8003202:	47b0      	blx	r6
 8003204:	1c43      	adds	r3, r0, #1
 8003206:	89a3      	ldrh	r3, [r4, #12]
 8003208:	d106      	bne.n	8003218 <__sflush_r+0x68>
 800320a:	6829      	ldr	r1, [r5, #0]
 800320c:	291d      	cmp	r1, #29
 800320e:	d848      	bhi.n	80032a2 <__sflush_r+0xf2>
 8003210:	4a29      	ldr	r2, [pc, #164]	; (80032b8 <__sflush_r+0x108>)
 8003212:	40ca      	lsrs	r2, r1
 8003214:	07d6      	lsls	r6, r2, #31
 8003216:	d544      	bpl.n	80032a2 <__sflush_r+0xf2>
 8003218:	2200      	movs	r2, #0
 800321a:	6062      	str	r2, [r4, #4]
 800321c:	04d9      	lsls	r1, r3, #19
 800321e:	6922      	ldr	r2, [r4, #16]
 8003220:	6022      	str	r2, [r4, #0]
 8003222:	d504      	bpl.n	800322e <__sflush_r+0x7e>
 8003224:	1c42      	adds	r2, r0, #1
 8003226:	d101      	bne.n	800322c <__sflush_r+0x7c>
 8003228:	682b      	ldr	r3, [r5, #0]
 800322a:	b903      	cbnz	r3, 800322e <__sflush_r+0x7e>
 800322c:	6560      	str	r0, [r4, #84]	; 0x54
 800322e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003230:	602f      	str	r7, [r5, #0]
 8003232:	2900      	cmp	r1, #0
 8003234:	d0c9      	beq.n	80031ca <__sflush_r+0x1a>
 8003236:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800323a:	4299      	cmp	r1, r3
 800323c:	d002      	beq.n	8003244 <__sflush_r+0x94>
 800323e:	4628      	mov	r0, r5
 8003240:	f000 f994 	bl	800356c <_free_r>
 8003244:	2000      	movs	r0, #0
 8003246:	6360      	str	r0, [r4, #52]	; 0x34
 8003248:	e7c0      	b.n	80031cc <__sflush_r+0x1c>
 800324a:	2301      	movs	r3, #1
 800324c:	4628      	mov	r0, r5
 800324e:	47b0      	blx	r6
 8003250:	1c41      	adds	r1, r0, #1
 8003252:	d1c8      	bne.n	80031e6 <__sflush_r+0x36>
 8003254:	682b      	ldr	r3, [r5, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0c5      	beq.n	80031e6 <__sflush_r+0x36>
 800325a:	2b1d      	cmp	r3, #29
 800325c:	d001      	beq.n	8003262 <__sflush_r+0xb2>
 800325e:	2b16      	cmp	r3, #22
 8003260:	d101      	bne.n	8003266 <__sflush_r+0xb6>
 8003262:	602f      	str	r7, [r5, #0]
 8003264:	e7b1      	b.n	80031ca <__sflush_r+0x1a>
 8003266:	89a3      	ldrh	r3, [r4, #12]
 8003268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800326c:	81a3      	strh	r3, [r4, #12]
 800326e:	e7ad      	b.n	80031cc <__sflush_r+0x1c>
 8003270:	690f      	ldr	r7, [r1, #16]
 8003272:	2f00      	cmp	r7, #0
 8003274:	d0a9      	beq.n	80031ca <__sflush_r+0x1a>
 8003276:	0793      	lsls	r3, r2, #30
 8003278:	680e      	ldr	r6, [r1, #0]
 800327a:	bf08      	it	eq
 800327c:	694b      	ldreq	r3, [r1, #20]
 800327e:	600f      	str	r7, [r1, #0]
 8003280:	bf18      	it	ne
 8003282:	2300      	movne	r3, #0
 8003284:	eba6 0807 	sub.w	r8, r6, r7
 8003288:	608b      	str	r3, [r1, #8]
 800328a:	f1b8 0f00 	cmp.w	r8, #0
 800328e:	dd9c      	ble.n	80031ca <__sflush_r+0x1a>
 8003290:	4643      	mov	r3, r8
 8003292:	463a      	mov	r2, r7
 8003294:	6a21      	ldr	r1, [r4, #32]
 8003296:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003298:	4628      	mov	r0, r5
 800329a:	47b0      	blx	r6
 800329c:	2800      	cmp	r0, #0
 800329e:	dc06      	bgt.n	80032ae <__sflush_r+0xfe>
 80032a0:	89a3      	ldrh	r3, [r4, #12]
 80032a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032a6:	81a3      	strh	r3, [r4, #12]
 80032a8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ac:	e78e      	b.n	80031cc <__sflush_r+0x1c>
 80032ae:	4407      	add	r7, r0
 80032b0:	eba8 0800 	sub.w	r8, r8, r0
 80032b4:	e7e9      	b.n	800328a <__sflush_r+0xda>
 80032b6:	bf00      	nop
 80032b8:	20400001 	.word	0x20400001

080032bc <_fflush_r>:
 80032bc:	b538      	push	{r3, r4, r5, lr}
 80032be:	690b      	ldr	r3, [r1, #16]
 80032c0:	4605      	mov	r5, r0
 80032c2:	460c      	mov	r4, r1
 80032c4:	b1db      	cbz	r3, 80032fe <_fflush_r+0x42>
 80032c6:	b118      	cbz	r0, 80032d0 <_fflush_r+0x14>
 80032c8:	6983      	ldr	r3, [r0, #24]
 80032ca:	b90b      	cbnz	r3, 80032d0 <_fflush_r+0x14>
 80032cc:	f000 f860 	bl	8003390 <__sinit>
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <_fflush_r+0x48>)
 80032d2:	429c      	cmp	r4, r3
 80032d4:	d109      	bne.n	80032ea <_fflush_r+0x2e>
 80032d6:	686c      	ldr	r4, [r5, #4]
 80032d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032dc:	b17b      	cbz	r3, 80032fe <_fflush_r+0x42>
 80032de:	4621      	mov	r1, r4
 80032e0:	4628      	mov	r0, r5
 80032e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032e6:	f7ff bf63 	b.w	80031b0 <__sflush_r>
 80032ea:	4b07      	ldr	r3, [pc, #28]	; (8003308 <_fflush_r+0x4c>)
 80032ec:	429c      	cmp	r4, r3
 80032ee:	d101      	bne.n	80032f4 <_fflush_r+0x38>
 80032f0:	68ac      	ldr	r4, [r5, #8]
 80032f2:	e7f1      	b.n	80032d8 <_fflush_r+0x1c>
 80032f4:	4b05      	ldr	r3, [pc, #20]	; (800330c <_fflush_r+0x50>)
 80032f6:	429c      	cmp	r4, r3
 80032f8:	bf08      	it	eq
 80032fa:	68ec      	ldreq	r4, [r5, #12]
 80032fc:	e7ec      	b.n	80032d8 <_fflush_r+0x1c>
 80032fe:	2000      	movs	r0, #0
 8003300:	bd38      	pop	{r3, r4, r5, pc}
 8003302:	bf00      	nop
 8003304:	080f5a10 	.word	0x080f5a10
 8003308:	080f5a30 	.word	0x080f5a30
 800330c:	080f59f0 	.word	0x080f59f0

08003310 <std>:
 8003310:	2300      	movs	r3, #0
 8003312:	b510      	push	{r4, lr}
 8003314:	4604      	mov	r4, r0
 8003316:	e9c0 3300 	strd	r3, r3, [r0]
 800331a:	6083      	str	r3, [r0, #8]
 800331c:	8181      	strh	r1, [r0, #12]
 800331e:	6643      	str	r3, [r0, #100]	; 0x64
 8003320:	81c2      	strh	r2, [r0, #14]
 8003322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003326:	6183      	str	r3, [r0, #24]
 8003328:	4619      	mov	r1, r3
 800332a:	2208      	movs	r2, #8
 800332c:	305c      	adds	r0, #92	; 0x5c
 800332e:	f7ff fdfb 	bl	8002f28 <memset>
 8003332:	4b05      	ldr	r3, [pc, #20]	; (8003348 <std+0x38>)
 8003334:	6263      	str	r3, [r4, #36]	; 0x24
 8003336:	4b05      	ldr	r3, [pc, #20]	; (800334c <std+0x3c>)
 8003338:	62a3      	str	r3, [r4, #40]	; 0x28
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <std+0x40>)
 800333c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800333e:	4b05      	ldr	r3, [pc, #20]	; (8003354 <std+0x44>)
 8003340:	6224      	str	r4, [r4, #32]
 8003342:	6323      	str	r3, [r4, #48]	; 0x30
 8003344:	bd10      	pop	{r4, pc}
 8003346:	bf00      	nop
 8003348:	08003c6d 	.word	0x08003c6d
 800334c:	08003c8f 	.word	0x08003c8f
 8003350:	08003cc7 	.word	0x08003cc7
 8003354:	08003ceb 	.word	0x08003ceb

08003358 <_cleanup_r>:
 8003358:	4901      	ldr	r1, [pc, #4]	; (8003360 <_cleanup_r+0x8>)
 800335a:	f000 b885 	b.w	8003468 <_fwalk_reent>
 800335e:	bf00      	nop
 8003360:	080032bd 	.word	0x080032bd

08003364 <__sfmoreglue>:
 8003364:	b570      	push	{r4, r5, r6, lr}
 8003366:	1e4a      	subs	r2, r1, #1
 8003368:	2568      	movs	r5, #104	; 0x68
 800336a:	4355      	muls	r5, r2
 800336c:	460e      	mov	r6, r1
 800336e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003372:	f000 f949 	bl	8003608 <_malloc_r>
 8003376:	4604      	mov	r4, r0
 8003378:	b140      	cbz	r0, 800338c <__sfmoreglue+0x28>
 800337a:	2100      	movs	r1, #0
 800337c:	e9c0 1600 	strd	r1, r6, [r0]
 8003380:	300c      	adds	r0, #12
 8003382:	60a0      	str	r0, [r4, #8]
 8003384:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003388:	f7ff fdce 	bl	8002f28 <memset>
 800338c:	4620      	mov	r0, r4
 800338e:	bd70      	pop	{r4, r5, r6, pc}

08003390 <__sinit>:
 8003390:	6983      	ldr	r3, [r0, #24]
 8003392:	b510      	push	{r4, lr}
 8003394:	4604      	mov	r4, r0
 8003396:	bb33      	cbnz	r3, 80033e6 <__sinit+0x56>
 8003398:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800339c:	6503      	str	r3, [r0, #80]	; 0x50
 800339e:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <__sinit+0x58>)
 80033a0:	4a12      	ldr	r2, [pc, #72]	; (80033ec <__sinit+0x5c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6282      	str	r2, [r0, #40]	; 0x28
 80033a6:	4298      	cmp	r0, r3
 80033a8:	bf04      	itt	eq
 80033aa:	2301      	moveq	r3, #1
 80033ac:	6183      	streq	r3, [r0, #24]
 80033ae:	f000 f81f 	bl	80033f0 <__sfp>
 80033b2:	6060      	str	r0, [r4, #4]
 80033b4:	4620      	mov	r0, r4
 80033b6:	f000 f81b 	bl	80033f0 <__sfp>
 80033ba:	60a0      	str	r0, [r4, #8]
 80033bc:	4620      	mov	r0, r4
 80033be:	f000 f817 	bl	80033f0 <__sfp>
 80033c2:	2200      	movs	r2, #0
 80033c4:	60e0      	str	r0, [r4, #12]
 80033c6:	2104      	movs	r1, #4
 80033c8:	6860      	ldr	r0, [r4, #4]
 80033ca:	f7ff ffa1 	bl	8003310 <std>
 80033ce:	2201      	movs	r2, #1
 80033d0:	2109      	movs	r1, #9
 80033d2:	68a0      	ldr	r0, [r4, #8]
 80033d4:	f7ff ff9c 	bl	8003310 <std>
 80033d8:	2202      	movs	r2, #2
 80033da:	2112      	movs	r1, #18
 80033dc:	68e0      	ldr	r0, [r4, #12]
 80033de:	f7ff ff97 	bl	8003310 <std>
 80033e2:	2301      	movs	r3, #1
 80033e4:	61a3      	str	r3, [r4, #24]
 80033e6:	bd10      	pop	{r4, pc}
 80033e8:	080f59ec 	.word	0x080f59ec
 80033ec:	08003359 	.word	0x08003359

080033f0 <__sfp>:
 80033f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f2:	4b1b      	ldr	r3, [pc, #108]	; (8003460 <__sfp+0x70>)
 80033f4:	681e      	ldr	r6, [r3, #0]
 80033f6:	69b3      	ldr	r3, [r6, #24]
 80033f8:	4607      	mov	r7, r0
 80033fa:	b913      	cbnz	r3, 8003402 <__sfp+0x12>
 80033fc:	4630      	mov	r0, r6
 80033fe:	f7ff ffc7 	bl	8003390 <__sinit>
 8003402:	3648      	adds	r6, #72	; 0x48
 8003404:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003408:	3b01      	subs	r3, #1
 800340a:	d503      	bpl.n	8003414 <__sfp+0x24>
 800340c:	6833      	ldr	r3, [r6, #0]
 800340e:	b133      	cbz	r3, 800341e <__sfp+0x2e>
 8003410:	6836      	ldr	r6, [r6, #0]
 8003412:	e7f7      	b.n	8003404 <__sfp+0x14>
 8003414:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003418:	b16d      	cbz	r5, 8003436 <__sfp+0x46>
 800341a:	3468      	adds	r4, #104	; 0x68
 800341c:	e7f4      	b.n	8003408 <__sfp+0x18>
 800341e:	2104      	movs	r1, #4
 8003420:	4638      	mov	r0, r7
 8003422:	f7ff ff9f 	bl	8003364 <__sfmoreglue>
 8003426:	6030      	str	r0, [r6, #0]
 8003428:	2800      	cmp	r0, #0
 800342a:	d1f1      	bne.n	8003410 <__sfp+0x20>
 800342c:	230c      	movs	r3, #12
 800342e:	603b      	str	r3, [r7, #0]
 8003430:	4604      	mov	r4, r0
 8003432:	4620      	mov	r0, r4
 8003434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003436:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <__sfp+0x74>)
 8003438:	6665      	str	r5, [r4, #100]	; 0x64
 800343a:	e9c4 5500 	strd	r5, r5, [r4]
 800343e:	60a5      	str	r5, [r4, #8]
 8003440:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003444:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003448:	2208      	movs	r2, #8
 800344a:	4629      	mov	r1, r5
 800344c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003450:	f7ff fd6a 	bl	8002f28 <memset>
 8003454:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003458:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800345c:	e7e9      	b.n	8003432 <__sfp+0x42>
 800345e:	bf00      	nop
 8003460:	080f59ec 	.word	0x080f59ec
 8003464:	ffff0001 	.word	0xffff0001

08003468 <_fwalk_reent>:
 8003468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800346c:	4680      	mov	r8, r0
 800346e:	4689      	mov	r9, r1
 8003470:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003474:	2600      	movs	r6, #0
 8003476:	b914      	cbnz	r4, 800347e <_fwalk_reent+0x16>
 8003478:	4630      	mov	r0, r6
 800347a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800347e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003482:	3f01      	subs	r7, #1
 8003484:	d501      	bpl.n	800348a <_fwalk_reent+0x22>
 8003486:	6824      	ldr	r4, [r4, #0]
 8003488:	e7f5      	b.n	8003476 <_fwalk_reent+0xe>
 800348a:	89ab      	ldrh	r3, [r5, #12]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d907      	bls.n	80034a0 <_fwalk_reent+0x38>
 8003490:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003494:	3301      	adds	r3, #1
 8003496:	d003      	beq.n	80034a0 <_fwalk_reent+0x38>
 8003498:	4629      	mov	r1, r5
 800349a:	4640      	mov	r0, r8
 800349c:	47c8      	blx	r9
 800349e:	4306      	orrs	r6, r0
 80034a0:	3568      	adds	r5, #104	; 0x68
 80034a2:	e7ee      	b.n	8003482 <_fwalk_reent+0x1a>

080034a4 <__swhatbuf_r>:
 80034a4:	b570      	push	{r4, r5, r6, lr}
 80034a6:	460e      	mov	r6, r1
 80034a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ac:	2900      	cmp	r1, #0
 80034ae:	b096      	sub	sp, #88	; 0x58
 80034b0:	4614      	mov	r4, r2
 80034b2:	461d      	mov	r5, r3
 80034b4:	da07      	bge.n	80034c6 <__swhatbuf_r+0x22>
 80034b6:	2300      	movs	r3, #0
 80034b8:	602b      	str	r3, [r5, #0]
 80034ba:	89b3      	ldrh	r3, [r6, #12]
 80034bc:	061a      	lsls	r2, r3, #24
 80034be:	d410      	bmi.n	80034e2 <__swhatbuf_r+0x3e>
 80034c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034c4:	e00e      	b.n	80034e4 <__swhatbuf_r+0x40>
 80034c6:	466a      	mov	r2, sp
 80034c8:	f000 fc36 	bl	8003d38 <_fstat_r>
 80034cc:	2800      	cmp	r0, #0
 80034ce:	dbf2      	blt.n	80034b6 <__swhatbuf_r+0x12>
 80034d0:	9a01      	ldr	r2, [sp, #4]
 80034d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80034d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80034da:	425a      	negs	r2, r3
 80034dc:	415a      	adcs	r2, r3
 80034de:	602a      	str	r2, [r5, #0]
 80034e0:	e7ee      	b.n	80034c0 <__swhatbuf_r+0x1c>
 80034e2:	2340      	movs	r3, #64	; 0x40
 80034e4:	2000      	movs	r0, #0
 80034e6:	6023      	str	r3, [r4, #0]
 80034e8:	b016      	add	sp, #88	; 0x58
 80034ea:	bd70      	pop	{r4, r5, r6, pc}

080034ec <__smakebuf_r>:
 80034ec:	898b      	ldrh	r3, [r1, #12]
 80034ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80034f0:	079d      	lsls	r5, r3, #30
 80034f2:	4606      	mov	r6, r0
 80034f4:	460c      	mov	r4, r1
 80034f6:	d507      	bpl.n	8003508 <__smakebuf_r+0x1c>
 80034f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80034fc:	6023      	str	r3, [r4, #0]
 80034fe:	6123      	str	r3, [r4, #16]
 8003500:	2301      	movs	r3, #1
 8003502:	6163      	str	r3, [r4, #20]
 8003504:	b002      	add	sp, #8
 8003506:	bd70      	pop	{r4, r5, r6, pc}
 8003508:	ab01      	add	r3, sp, #4
 800350a:	466a      	mov	r2, sp
 800350c:	f7ff ffca 	bl	80034a4 <__swhatbuf_r>
 8003510:	9900      	ldr	r1, [sp, #0]
 8003512:	4605      	mov	r5, r0
 8003514:	4630      	mov	r0, r6
 8003516:	f000 f877 	bl	8003608 <_malloc_r>
 800351a:	b948      	cbnz	r0, 8003530 <__smakebuf_r+0x44>
 800351c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003520:	059a      	lsls	r2, r3, #22
 8003522:	d4ef      	bmi.n	8003504 <__smakebuf_r+0x18>
 8003524:	f023 0303 	bic.w	r3, r3, #3
 8003528:	f043 0302 	orr.w	r3, r3, #2
 800352c:	81a3      	strh	r3, [r4, #12]
 800352e:	e7e3      	b.n	80034f8 <__smakebuf_r+0xc>
 8003530:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <__smakebuf_r+0x7c>)
 8003532:	62b3      	str	r3, [r6, #40]	; 0x28
 8003534:	89a3      	ldrh	r3, [r4, #12]
 8003536:	6020      	str	r0, [r4, #0]
 8003538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800353c:	81a3      	strh	r3, [r4, #12]
 800353e:	9b00      	ldr	r3, [sp, #0]
 8003540:	6163      	str	r3, [r4, #20]
 8003542:	9b01      	ldr	r3, [sp, #4]
 8003544:	6120      	str	r0, [r4, #16]
 8003546:	b15b      	cbz	r3, 8003560 <__smakebuf_r+0x74>
 8003548:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800354c:	4630      	mov	r0, r6
 800354e:	f000 fc05 	bl	8003d5c <_isatty_r>
 8003552:	b128      	cbz	r0, 8003560 <__smakebuf_r+0x74>
 8003554:	89a3      	ldrh	r3, [r4, #12]
 8003556:	f023 0303 	bic.w	r3, r3, #3
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	81a3      	strh	r3, [r4, #12]
 8003560:	89a3      	ldrh	r3, [r4, #12]
 8003562:	431d      	orrs	r5, r3
 8003564:	81a5      	strh	r5, [r4, #12]
 8003566:	e7cd      	b.n	8003504 <__smakebuf_r+0x18>
 8003568:	08003359 	.word	0x08003359

0800356c <_free_r>:
 800356c:	b538      	push	{r3, r4, r5, lr}
 800356e:	4605      	mov	r5, r0
 8003570:	2900      	cmp	r1, #0
 8003572:	d045      	beq.n	8003600 <_free_r+0x94>
 8003574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003578:	1f0c      	subs	r4, r1, #4
 800357a:	2b00      	cmp	r3, #0
 800357c:	bfb8      	it	lt
 800357e:	18e4      	addlt	r4, r4, r3
 8003580:	f000 fc0e 	bl	8003da0 <__malloc_lock>
 8003584:	4a1f      	ldr	r2, [pc, #124]	; (8003604 <_free_r+0x98>)
 8003586:	6813      	ldr	r3, [r2, #0]
 8003588:	4610      	mov	r0, r2
 800358a:	b933      	cbnz	r3, 800359a <_free_r+0x2e>
 800358c:	6063      	str	r3, [r4, #4]
 800358e:	6014      	str	r4, [r2, #0]
 8003590:	4628      	mov	r0, r5
 8003592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003596:	f000 bc04 	b.w	8003da2 <__malloc_unlock>
 800359a:	42a3      	cmp	r3, r4
 800359c:	d90c      	bls.n	80035b8 <_free_r+0x4c>
 800359e:	6821      	ldr	r1, [r4, #0]
 80035a0:	1862      	adds	r2, r4, r1
 80035a2:	4293      	cmp	r3, r2
 80035a4:	bf04      	itt	eq
 80035a6:	681a      	ldreq	r2, [r3, #0]
 80035a8:	685b      	ldreq	r3, [r3, #4]
 80035aa:	6063      	str	r3, [r4, #4]
 80035ac:	bf04      	itt	eq
 80035ae:	1852      	addeq	r2, r2, r1
 80035b0:	6022      	streq	r2, [r4, #0]
 80035b2:	6004      	str	r4, [r0, #0]
 80035b4:	e7ec      	b.n	8003590 <_free_r+0x24>
 80035b6:	4613      	mov	r3, r2
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	b10a      	cbz	r2, 80035c0 <_free_r+0x54>
 80035bc:	42a2      	cmp	r2, r4
 80035be:	d9fa      	bls.n	80035b6 <_free_r+0x4a>
 80035c0:	6819      	ldr	r1, [r3, #0]
 80035c2:	1858      	adds	r0, r3, r1
 80035c4:	42a0      	cmp	r0, r4
 80035c6:	d10b      	bne.n	80035e0 <_free_r+0x74>
 80035c8:	6820      	ldr	r0, [r4, #0]
 80035ca:	4401      	add	r1, r0
 80035cc:	1858      	adds	r0, r3, r1
 80035ce:	4282      	cmp	r2, r0
 80035d0:	6019      	str	r1, [r3, #0]
 80035d2:	d1dd      	bne.n	8003590 <_free_r+0x24>
 80035d4:	6810      	ldr	r0, [r2, #0]
 80035d6:	6852      	ldr	r2, [r2, #4]
 80035d8:	605a      	str	r2, [r3, #4]
 80035da:	4401      	add	r1, r0
 80035dc:	6019      	str	r1, [r3, #0]
 80035de:	e7d7      	b.n	8003590 <_free_r+0x24>
 80035e0:	d902      	bls.n	80035e8 <_free_r+0x7c>
 80035e2:	230c      	movs	r3, #12
 80035e4:	602b      	str	r3, [r5, #0]
 80035e6:	e7d3      	b.n	8003590 <_free_r+0x24>
 80035e8:	6820      	ldr	r0, [r4, #0]
 80035ea:	1821      	adds	r1, r4, r0
 80035ec:	428a      	cmp	r2, r1
 80035ee:	bf04      	itt	eq
 80035f0:	6811      	ldreq	r1, [r2, #0]
 80035f2:	6852      	ldreq	r2, [r2, #4]
 80035f4:	6062      	str	r2, [r4, #4]
 80035f6:	bf04      	itt	eq
 80035f8:	1809      	addeq	r1, r1, r0
 80035fa:	6021      	streq	r1, [r4, #0]
 80035fc:	605c      	str	r4, [r3, #4]
 80035fe:	e7c7      	b.n	8003590 <_free_r+0x24>
 8003600:	bd38      	pop	{r3, r4, r5, pc}
 8003602:	bf00      	nop
 8003604:	20078e28 	.word	0x20078e28

08003608 <_malloc_r>:
 8003608:	b570      	push	{r4, r5, r6, lr}
 800360a:	1ccd      	adds	r5, r1, #3
 800360c:	f025 0503 	bic.w	r5, r5, #3
 8003610:	3508      	adds	r5, #8
 8003612:	2d0c      	cmp	r5, #12
 8003614:	bf38      	it	cc
 8003616:	250c      	movcc	r5, #12
 8003618:	2d00      	cmp	r5, #0
 800361a:	4606      	mov	r6, r0
 800361c:	db01      	blt.n	8003622 <_malloc_r+0x1a>
 800361e:	42a9      	cmp	r1, r5
 8003620:	d903      	bls.n	800362a <_malloc_r+0x22>
 8003622:	230c      	movs	r3, #12
 8003624:	6033      	str	r3, [r6, #0]
 8003626:	2000      	movs	r0, #0
 8003628:	bd70      	pop	{r4, r5, r6, pc}
 800362a:	f000 fbb9 	bl	8003da0 <__malloc_lock>
 800362e:	4a21      	ldr	r2, [pc, #132]	; (80036b4 <_malloc_r+0xac>)
 8003630:	6814      	ldr	r4, [r2, #0]
 8003632:	4621      	mov	r1, r4
 8003634:	b991      	cbnz	r1, 800365c <_malloc_r+0x54>
 8003636:	4c20      	ldr	r4, [pc, #128]	; (80036b8 <_malloc_r+0xb0>)
 8003638:	6823      	ldr	r3, [r4, #0]
 800363a:	b91b      	cbnz	r3, 8003644 <_malloc_r+0x3c>
 800363c:	4630      	mov	r0, r6
 800363e:	f000 fb05 	bl	8003c4c <_sbrk_r>
 8003642:	6020      	str	r0, [r4, #0]
 8003644:	4629      	mov	r1, r5
 8003646:	4630      	mov	r0, r6
 8003648:	f000 fb00 	bl	8003c4c <_sbrk_r>
 800364c:	1c43      	adds	r3, r0, #1
 800364e:	d124      	bne.n	800369a <_malloc_r+0x92>
 8003650:	230c      	movs	r3, #12
 8003652:	6033      	str	r3, [r6, #0]
 8003654:	4630      	mov	r0, r6
 8003656:	f000 fba4 	bl	8003da2 <__malloc_unlock>
 800365a:	e7e4      	b.n	8003626 <_malloc_r+0x1e>
 800365c:	680b      	ldr	r3, [r1, #0]
 800365e:	1b5b      	subs	r3, r3, r5
 8003660:	d418      	bmi.n	8003694 <_malloc_r+0x8c>
 8003662:	2b0b      	cmp	r3, #11
 8003664:	d90f      	bls.n	8003686 <_malloc_r+0x7e>
 8003666:	600b      	str	r3, [r1, #0]
 8003668:	50cd      	str	r5, [r1, r3]
 800366a:	18cc      	adds	r4, r1, r3
 800366c:	4630      	mov	r0, r6
 800366e:	f000 fb98 	bl	8003da2 <__malloc_unlock>
 8003672:	f104 000b 	add.w	r0, r4, #11
 8003676:	1d23      	adds	r3, r4, #4
 8003678:	f020 0007 	bic.w	r0, r0, #7
 800367c:	1ac3      	subs	r3, r0, r3
 800367e:	d0d3      	beq.n	8003628 <_malloc_r+0x20>
 8003680:	425a      	negs	r2, r3
 8003682:	50e2      	str	r2, [r4, r3]
 8003684:	e7d0      	b.n	8003628 <_malloc_r+0x20>
 8003686:	428c      	cmp	r4, r1
 8003688:	684b      	ldr	r3, [r1, #4]
 800368a:	bf16      	itet	ne
 800368c:	6063      	strne	r3, [r4, #4]
 800368e:	6013      	streq	r3, [r2, #0]
 8003690:	460c      	movne	r4, r1
 8003692:	e7eb      	b.n	800366c <_malloc_r+0x64>
 8003694:	460c      	mov	r4, r1
 8003696:	6849      	ldr	r1, [r1, #4]
 8003698:	e7cc      	b.n	8003634 <_malloc_r+0x2c>
 800369a:	1cc4      	adds	r4, r0, #3
 800369c:	f024 0403 	bic.w	r4, r4, #3
 80036a0:	42a0      	cmp	r0, r4
 80036a2:	d005      	beq.n	80036b0 <_malloc_r+0xa8>
 80036a4:	1a21      	subs	r1, r4, r0
 80036a6:	4630      	mov	r0, r6
 80036a8:	f000 fad0 	bl	8003c4c <_sbrk_r>
 80036ac:	3001      	adds	r0, #1
 80036ae:	d0cf      	beq.n	8003650 <_malloc_r+0x48>
 80036b0:	6025      	str	r5, [r4, #0]
 80036b2:	e7db      	b.n	800366c <_malloc_r+0x64>
 80036b4:	20078e28 	.word	0x20078e28
 80036b8:	20078e2c 	.word	0x20078e2c

080036bc <__sfputc_r>:
 80036bc:	6893      	ldr	r3, [r2, #8]
 80036be:	3b01      	subs	r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	b410      	push	{r4}
 80036c4:	6093      	str	r3, [r2, #8]
 80036c6:	da08      	bge.n	80036da <__sfputc_r+0x1e>
 80036c8:	6994      	ldr	r4, [r2, #24]
 80036ca:	42a3      	cmp	r3, r4
 80036cc:	db01      	blt.n	80036d2 <__sfputc_r+0x16>
 80036ce:	290a      	cmp	r1, #10
 80036d0:	d103      	bne.n	80036da <__sfputc_r+0x1e>
 80036d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036d6:	f7ff bcab 	b.w	8003030 <__swbuf_r>
 80036da:	6813      	ldr	r3, [r2, #0]
 80036dc:	1c58      	adds	r0, r3, #1
 80036de:	6010      	str	r0, [r2, #0]
 80036e0:	7019      	strb	r1, [r3, #0]
 80036e2:	4608      	mov	r0, r1
 80036e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <__sfputs_r>:
 80036ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ec:	4606      	mov	r6, r0
 80036ee:	460f      	mov	r7, r1
 80036f0:	4614      	mov	r4, r2
 80036f2:	18d5      	adds	r5, r2, r3
 80036f4:	42ac      	cmp	r4, r5
 80036f6:	d101      	bne.n	80036fc <__sfputs_r+0x12>
 80036f8:	2000      	movs	r0, #0
 80036fa:	e007      	b.n	800370c <__sfputs_r+0x22>
 80036fc:	463a      	mov	r2, r7
 80036fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003702:	4630      	mov	r0, r6
 8003704:	f7ff ffda 	bl	80036bc <__sfputc_r>
 8003708:	1c43      	adds	r3, r0, #1
 800370a:	d1f3      	bne.n	80036f4 <__sfputs_r+0xa>
 800370c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003710 <_vfiprintf_r>:
 8003710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003714:	460c      	mov	r4, r1
 8003716:	b09d      	sub	sp, #116	; 0x74
 8003718:	4617      	mov	r7, r2
 800371a:	461d      	mov	r5, r3
 800371c:	4606      	mov	r6, r0
 800371e:	b118      	cbz	r0, 8003728 <_vfiprintf_r+0x18>
 8003720:	6983      	ldr	r3, [r0, #24]
 8003722:	b90b      	cbnz	r3, 8003728 <_vfiprintf_r+0x18>
 8003724:	f7ff fe34 	bl	8003390 <__sinit>
 8003728:	4b7c      	ldr	r3, [pc, #496]	; (800391c <_vfiprintf_r+0x20c>)
 800372a:	429c      	cmp	r4, r3
 800372c:	d158      	bne.n	80037e0 <_vfiprintf_r+0xd0>
 800372e:	6874      	ldr	r4, [r6, #4]
 8003730:	89a3      	ldrh	r3, [r4, #12]
 8003732:	0718      	lsls	r0, r3, #28
 8003734:	d55e      	bpl.n	80037f4 <_vfiprintf_r+0xe4>
 8003736:	6923      	ldr	r3, [r4, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d05b      	beq.n	80037f4 <_vfiprintf_r+0xe4>
 800373c:	2300      	movs	r3, #0
 800373e:	9309      	str	r3, [sp, #36]	; 0x24
 8003740:	2320      	movs	r3, #32
 8003742:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003746:	2330      	movs	r3, #48	; 0x30
 8003748:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800374c:	9503      	str	r5, [sp, #12]
 800374e:	f04f 0b01 	mov.w	fp, #1
 8003752:	46b8      	mov	r8, r7
 8003754:	4645      	mov	r5, r8
 8003756:	f815 3b01 	ldrb.w	r3, [r5], #1
 800375a:	b10b      	cbz	r3, 8003760 <_vfiprintf_r+0x50>
 800375c:	2b25      	cmp	r3, #37	; 0x25
 800375e:	d154      	bne.n	800380a <_vfiprintf_r+0xfa>
 8003760:	ebb8 0a07 	subs.w	sl, r8, r7
 8003764:	d00b      	beq.n	800377e <_vfiprintf_r+0x6e>
 8003766:	4653      	mov	r3, sl
 8003768:	463a      	mov	r2, r7
 800376a:	4621      	mov	r1, r4
 800376c:	4630      	mov	r0, r6
 800376e:	f7ff ffbc 	bl	80036ea <__sfputs_r>
 8003772:	3001      	adds	r0, #1
 8003774:	f000 80c2 	beq.w	80038fc <_vfiprintf_r+0x1ec>
 8003778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800377a:	4453      	add	r3, sl
 800377c:	9309      	str	r3, [sp, #36]	; 0x24
 800377e:	f898 3000 	ldrb.w	r3, [r8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80ba 	beq.w	80038fc <_vfiprintf_r+0x1ec>
 8003788:	2300      	movs	r3, #0
 800378a:	f04f 32ff 	mov.w	r2, #4294967295
 800378e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003792:	9304      	str	r3, [sp, #16]
 8003794:	9307      	str	r3, [sp, #28]
 8003796:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800379a:	931a      	str	r3, [sp, #104]	; 0x68
 800379c:	46a8      	mov	r8, r5
 800379e:	2205      	movs	r2, #5
 80037a0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80037a4:	485e      	ldr	r0, [pc, #376]	; (8003920 <_vfiprintf_r+0x210>)
 80037a6:	f7fc fd2b 	bl	8000200 <memchr>
 80037aa:	9b04      	ldr	r3, [sp, #16]
 80037ac:	bb78      	cbnz	r0, 800380e <_vfiprintf_r+0xfe>
 80037ae:	06d9      	lsls	r1, r3, #27
 80037b0:	bf44      	itt	mi
 80037b2:	2220      	movmi	r2, #32
 80037b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80037b8:	071a      	lsls	r2, r3, #28
 80037ba:	bf44      	itt	mi
 80037bc:	222b      	movmi	r2, #43	; 0x2b
 80037be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80037c2:	782a      	ldrb	r2, [r5, #0]
 80037c4:	2a2a      	cmp	r2, #42	; 0x2a
 80037c6:	d02a      	beq.n	800381e <_vfiprintf_r+0x10e>
 80037c8:	9a07      	ldr	r2, [sp, #28]
 80037ca:	46a8      	mov	r8, r5
 80037cc:	2000      	movs	r0, #0
 80037ce:	250a      	movs	r5, #10
 80037d0:	4641      	mov	r1, r8
 80037d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037d6:	3b30      	subs	r3, #48	; 0x30
 80037d8:	2b09      	cmp	r3, #9
 80037da:	d969      	bls.n	80038b0 <_vfiprintf_r+0x1a0>
 80037dc:	b360      	cbz	r0, 8003838 <_vfiprintf_r+0x128>
 80037de:	e024      	b.n	800382a <_vfiprintf_r+0x11a>
 80037e0:	4b50      	ldr	r3, [pc, #320]	; (8003924 <_vfiprintf_r+0x214>)
 80037e2:	429c      	cmp	r4, r3
 80037e4:	d101      	bne.n	80037ea <_vfiprintf_r+0xda>
 80037e6:	68b4      	ldr	r4, [r6, #8]
 80037e8:	e7a2      	b.n	8003730 <_vfiprintf_r+0x20>
 80037ea:	4b4f      	ldr	r3, [pc, #316]	; (8003928 <_vfiprintf_r+0x218>)
 80037ec:	429c      	cmp	r4, r3
 80037ee:	bf08      	it	eq
 80037f0:	68f4      	ldreq	r4, [r6, #12]
 80037f2:	e79d      	b.n	8003730 <_vfiprintf_r+0x20>
 80037f4:	4621      	mov	r1, r4
 80037f6:	4630      	mov	r0, r6
 80037f8:	f7ff fc6c 	bl	80030d4 <__swsetup_r>
 80037fc:	2800      	cmp	r0, #0
 80037fe:	d09d      	beq.n	800373c <_vfiprintf_r+0x2c>
 8003800:	f04f 30ff 	mov.w	r0, #4294967295
 8003804:	b01d      	add	sp, #116	; 0x74
 8003806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800380a:	46a8      	mov	r8, r5
 800380c:	e7a2      	b.n	8003754 <_vfiprintf_r+0x44>
 800380e:	4a44      	ldr	r2, [pc, #272]	; (8003920 <_vfiprintf_r+0x210>)
 8003810:	1a80      	subs	r0, r0, r2
 8003812:	fa0b f000 	lsl.w	r0, fp, r0
 8003816:	4318      	orrs	r0, r3
 8003818:	9004      	str	r0, [sp, #16]
 800381a:	4645      	mov	r5, r8
 800381c:	e7be      	b.n	800379c <_vfiprintf_r+0x8c>
 800381e:	9a03      	ldr	r2, [sp, #12]
 8003820:	1d11      	adds	r1, r2, #4
 8003822:	6812      	ldr	r2, [r2, #0]
 8003824:	9103      	str	r1, [sp, #12]
 8003826:	2a00      	cmp	r2, #0
 8003828:	db01      	blt.n	800382e <_vfiprintf_r+0x11e>
 800382a:	9207      	str	r2, [sp, #28]
 800382c:	e004      	b.n	8003838 <_vfiprintf_r+0x128>
 800382e:	4252      	negs	r2, r2
 8003830:	f043 0302 	orr.w	r3, r3, #2
 8003834:	9207      	str	r2, [sp, #28]
 8003836:	9304      	str	r3, [sp, #16]
 8003838:	f898 3000 	ldrb.w	r3, [r8]
 800383c:	2b2e      	cmp	r3, #46	; 0x2e
 800383e:	d10e      	bne.n	800385e <_vfiprintf_r+0x14e>
 8003840:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003844:	2b2a      	cmp	r3, #42	; 0x2a
 8003846:	d138      	bne.n	80038ba <_vfiprintf_r+0x1aa>
 8003848:	9b03      	ldr	r3, [sp, #12]
 800384a:	1d1a      	adds	r2, r3, #4
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	9203      	str	r2, [sp, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	bfb8      	it	lt
 8003854:	f04f 33ff 	movlt.w	r3, #4294967295
 8003858:	f108 0802 	add.w	r8, r8, #2
 800385c:	9305      	str	r3, [sp, #20]
 800385e:	4d33      	ldr	r5, [pc, #204]	; (800392c <_vfiprintf_r+0x21c>)
 8003860:	f898 1000 	ldrb.w	r1, [r8]
 8003864:	2203      	movs	r2, #3
 8003866:	4628      	mov	r0, r5
 8003868:	f7fc fcca 	bl	8000200 <memchr>
 800386c:	b140      	cbz	r0, 8003880 <_vfiprintf_r+0x170>
 800386e:	2340      	movs	r3, #64	; 0x40
 8003870:	1b40      	subs	r0, r0, r5
 8003872:	fa03 f000 	lsl.w	r0, r3, r0
 8003876:	9b04      	ldr	r3, [sp, #16]
 8003878:	4303      	orrs	r3, r0
 800387a:	f108 0801 	add.w	r8, r8, #1
 800387e:	9304      	str	r3, [sp, #16]
 8003880:	f898 1000 	ldrb.w	r1, [r8]
 8003884:	482a      	ldr	r0, [pc, #168]	; (8003930 <_vfiprintf_r+0x220>)
 8003886:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800388a:	2206      	movs	r2, #6
 800388c:	f108 0701 	add.w	r7, r8, #1
 8003890:	f7fc fcb6 	bl	8000200 <memchr>
 8003894:	2800      	cmp	r0, #0
 8003896:	d037      	beq.n	8003908 <_vfiprintf_r+0x1f8>
 8003898:	4b26      	ldr	r3, [pc, #152]	; (8003934 <_vfiprintf_r+0x224>)
 800389a:	bb1b      	cbnz	r3, 80038e4 <_vfiprintf_r+0x1d4>
 800389c:	9b03      	ldr	r3, [sp, #12]
 800389e:	3307      	adds	r3, #7
 80038a0:	f023 0307 	bic.w	r3, r3, #7
 80038a4:	3308      	adds	r3, #8
 80038a6:	9303      	str	r3, [sp, #12]
 80038a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038aa:	444b      	add	r3, r9
 80038ac:	9309      	str	r3, [sp, #36]	; 0x24
 80038ae:	e750      	b.n	8003752 <_vfiprintf_r+0x42>
 80038b0:	fb05 3202 	mla	r2, r5, r2, r3
 80038b4:	2001      	movs	r0, #1
 80038b6:	4688      	mov	r8, r1
 80038b8:	e78a      	b.n	80037d0 <_vfiprintf_r+0xc0>
 80038ba:	2300      	movs	r3, #0
 80038bc:	f108 0801 	add.w	r8, r8, #1
 80038c0:	9305      	str	r3, [sp, #20]
 80038c2:	4619      	mov	r1, r3
 80038c4:	250a      	movs	r5, #10
 80038c6:	4640      	mov	r0, r8
 80038c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038cc:	3a30      	subs	r2, #48	; 0x30
 80038ce:	2a09      	cmp	r2, #9
 80038d0:	d903      	bls.n	80038da <_vfiprintf_r+0x1ca>
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0c3      	beq.n	800385e <_vfiprintf_r+0x14e>
 80038d6:	9105      	str	r1, [sp, #20]
 80038d8:	e7c1      	b.n	800385e <_vfiprintf_r+0x14e>
 80038da:	fb05 2101 	mla	r1, r5, r1, r2
 80038de:	2301      	movs	r3, #1
 80038e0:	4680      	mov	r8, r0
 80038e2:	e7f0      	b.n	80038c6 <_vfiprintf_r+0x1b6>
 80038e4:	ab03      	add	r3, sp, #12
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	4622      	mov	r2, r4
 80038ea:	4b13      	ldr	r3, [pc, #76]	; (8003938 <_vfiprintf_r+0x228>)
 80038ec:	a904      	add	r1, sp, #16
 80038ee:	4630      	mov	r0, r6
 80038f0:	f3af 8000 	nop.w
 80038f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80038f8:	4681      	mov	r9, r0
 80038fa:	d1d5      	bne.n	80038a8 <_vfiprintf_r+0x198>
 80038fc:	89a3      	ldrh	r3, [r4, #12]
 80038fe:	065b      	lsls	r3, r3, #25
 8003900:	f53f af7e 	bmi.w	8003800 <_vfiprintf_r+0xf0>
 8003904:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003906:	e77d      	b.n	8003804 <_vfiprintf_r+0xf4>
 8003908:	ab03      	add	r3, sp, #12
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	4622      	mov	r2, r4
 800390e:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <_vfiprintf_r+0x228>)
 8003910:	a904      	add	r1, sp, #16
 8003912:	4630      	mov	r0, r6
 8003914:	f000 f888 	bl	8003a28 <_printf_i>
 8003918:	e7ec      	b.n	80038f4 <_vfiprintf_r+0x1e4>
 800391a:	bf00      	nop
 800391c:	080f5a10 	.word	0x080f5a10
 8003920:	080f5a50 	.word	0x080f5a50
 8003924:	080f5a30 	.word	0x080f5a30
 8003928:	080f59f0 	.word	0x080f59f0
 800392c:	080f5a56 	.word	0x080f5a56
 8003930:	080f5a5a 	.word	0x080f5a5a
 8003934:	00000000 	.word	0x00000000
 8003938:	080036eb 	.word	0x080036eb

0800393c <_printf_common>:
 800393c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003940:	4691      	mov	r9, r2
 8003942:	461f      	mov	r7, r3
 8003944:	688a      	ldr	r2, [r1, #8]
 8003946:	690b      	ldr	r3, [r1, #16]
 8003948:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800394c:	4293      	cmp	r3, r2
 800394e:	bfb8      	it	lt
 8003950:	4613      	movlt	r3, r2
 8003952:	f8c9 3000 	str.w	r3, [r9]
 8003956:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800395a:	4606      	mov	r6, r0
 800395c:	460c      	mov	r4, r1
 800395e:	b112      	cbz	r2, 8003966 <_printf_common+0x2a>
 8003960:	3301      	adds	r3, #1
 8003962:	f8c9 3000 	str.w	r3, [r9]
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	0699      	lsls	r1, r3, #26
 800396a:	bf42      	ittt	mi
 800396c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003970:	3302      	addmi	r3, #2
 8003972:	f8c9 3000 	strmi.w	r3, [r9]
 8003976:	6825      	ldr	r5, [r4, #0]
 8003978:	f015 0506 	ands.w	r5, r5, #6
 800397c:	d107      	bne.n	800398e <_printf_common+0x52>
 800397e:	f104 0a19 	add.w	sl, r4, #25
 8003982:	68e3      	ldr	r3, [r4, #12]
 8003984:	f8d9 2000 	ldr.w	r2, [r9]
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	42ab      	cmp	r3, r5
 800398c:	dc28      	bgt.n	80039e0 <_printf_common+0xa4>
 800398e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003992:	6822      	ldr	r2, [r4, #0]
 8003994:	3300      	adds	r3, #0
 8003996:	bf18      	it	ne
 8003998:	2301      	movne	r3, #1
 800399a:	0692      	lsls	r2, r2, #26
 800399c:	d42d      	bmi.n	80039fa <_printf_common+0xbe>
 800399e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039a2:	4639      	mov	r1, r7
 80039a4:	4630      	mov	r0, r6
 80039a6:	47c0      	blx	r8
 80039a8:	3001      	adds	r0, #1
 80039aa:	d020      	beq.n	80039ee <_printf_common+0xb2>
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	68e5      	ldr	r5, [r4, #12]
 80039b0:	f8d9 2000 	ldr.w	r2, [r9]
 80039b4:	f003 0306 	and.w	r3, r3, #6
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	bf08      	it	eq
 80039bc:	1aad      	subeq	r5, r5, r2
 80039be:	68a3      	ldr	r3, [r4, #8]
 80039c0:	6922      	ldr	r2, [r4, #16]
 80039c2:	bf0c      	ite	eq
 80039c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039c8:	2500      	movne	r5, #0
 80039ca:	4293      	cmp	r3, r2
 80039cc:	bfc4      	itt	gt
 80039ce:	1a9b      	subgt	r3, r3, r2
 80039d0:	18ed      	addgt	r5, r5, r3
 80039d2:	f04f 0900 	mov.w	r9, #0
 80039d6:	341a      	adds	r4, #26
 80039d8:	454d      	cmp	r5, r9
 80039da:	d11a      	bne.n	8003a12 <_printf_common+0xd6>
 80039dc:	2000      	movs	r0, #0
 80039de:	e008      	b.n	80039f2 <_printf_common+0xb6>
 80039e0:	2301      	movs	r3, #1
 80039e2:	4652      	mov	r2, sl
 80039e4:	4639      	mov	r1, r7
 80039e6:	4630      	mov	r0, r6
 80039e8:	47c0      	blx	r8
 80039ea:	3001      	adds	r0, #1
 80039ec:	d103      	bne.n	80039f6 <_printf_common+0xba>
 80039ee:	f04f 30ff 	mov.w	r0, #4294967295
 80039f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039f6:	3501      	adds	r5, #1
 80039f8:	e7c3      	b.n	8003982 <_printf_common+0x46>
 80039fa:	18e1      	adds	r1, r4, r3
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	2030      	movs	r0, #48	; 0x30
 8003a00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a04:	4422      	add	r2, r4
 8003a06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a0e:	3302      	adds	r3, #2
 8003a10:	e7c5      	b.n	800399e <_printf_common+0x62>
 8003a12:	2301      	movs	r3, #1
 8003a14:	4622      	mov	r2, r4
 8003a16:	4639      	mov	r1, r7
 8003a18:	4630      	mov	r0, r6
 8003a1a:	47c0      	blx	r8
 8003a1c:	3001      	adds	r0, #1
 8003a1e:	d0e6      	beq.n	80039ee <_printf_common+0xb2>
 8003a20:	f109 0901 	add.w	r9, r9, #1
 8003a24:	e7d8      	b.n	80039d8 <_printf_common+0x9c>
	...

08003a28 <_printf_i>:
 8003a28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003a30:	460c      	mov	r4, r1
 8003a32:	7e09      	ldrb	r1, [r1, #24]
 8003a34:	b085      	sub	sp, #20
 8003a36:	296e      	cmp	r1, #110	; 0x6e
 8003a38:	4617      	mov	r7, r2
 8003a3a:	4606      	mov	r6, r0
 8003a3c:	4698      	mov	r8, r3
 8003a3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003a40:	f000 80b3 	beq.w	8003baa <_printf_i+0x182>
 8003a44:	d822      	bhi.n	8003a8c <_printf_i+0x64>
 8003a46:	2963      	cmp	r1, #99	; 0x63
 8003a48:	d036      	beq.n	8003ab8 <_printf_i+0x90>
 8003a4a:	d80a      	bhi.n	8003a62 <_printf_i+0x3a>
 8003a4c:	2900      	cmp	r1, #0
 8003a4e:	f000 80b9 	beq.w	8003bc4 <_printf_i+0x19c>
 8003a52:	2958      	cmp	r1, #88	; 0x58
 8003a54:	f000 8083 	beq.w	8003b5e <_printf_i+0x136>
 8003a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003a60:	e032      	b.n	8003ac8 <_printf_i+0xa0>
 8003a62:	2964      	cmp	r1, #100	; 0x64
 8003a64:	d001      	beq.n	8003a6a <_printf_i+0x42>
 8003a66:	2969      	cmp	r1, #105	; 0x69
 8003a68:	d1f6      	bne.n	8003a58 <_printf_i+0x30>
 8003a6a:	6820      	ldr	r0, [r4, #0]
 8003a6c:	6813      	ldr	r3, [r2, #0]
 8003a6e:	0605      	lsls	r5, r0, #24
 8003a70:	f103 0104 	add.w	r1, r3, #4
 8003a74:	d52a      	bpl.n	8003acc <_printf_i+0xa4>
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6011      	str	r1, [r2, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	da03      	bge.n	8003a86 <_printf_i+0x5e>
 8003a7e:	222d      	movs	r2, #45	; 0x2d
 8003a80:	425b      	negs	r3, r3
 8003a82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003a86:	486f      	ldr	r0, [pc, #444]	; (8003c44 <_printf_i+0x21c>)
 8003a88:	220a      	movs	r2, #10
 8003a8a:	e039      	b.n	8003b00 <_printf_i+0xd8>
 8003a8c:	2973      	cmp	r1, #115	; 0x73
 8003a8e:	f000 809d 	beq.w	8003bcc <_printf_i+0x1a4>
 8003a92:	d808      	bhi.n	8003aa6 <_printf_i+0x7e>
 8003a94:	296f      	cmp	r1, #111	; 0x6f
 8003a96:	d020      	beq.n	8003ada <_printf_i+0xb2>
 8003a98:	2970      	cmp	r1, #112	; 0x70
 8003a9a:	d1dd      	bne.n	8003a58 <_printf_i+0x30>
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	f043 0320 	orr.w	r3, r3, #32
 8003aa2:	6023      	str	r3, [r4, #0]
 8003aa4:	e003      	b.n	8003aae <_printf_i+0x86>
 8003aa6:	2975      	cmp	r1, #117	; 0x75
 8003aa8:	d017      	beq.n	8003ada <_printf_i+0xb2>
 8003aaa:	2978      	cmp	r1, #120	; 0x78
 8003aac:	d1d4      	bne.n	8003a58 <_printf_i+0x30>
 8003aae:	2378      	movs	r3, #120	; 0x78
 8003ab0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ab4:	4864      	ldr	r0, [pc, #400]	; (8003c48 <_printf_i+0x220>)
 8003ab6:	e055      	b.n	8003b64 <_printf_i+0x13c>
 8003ab8:	6813      	ldr	r3, [r2, #0]
 8003aba:	1d19      	adds	r1, r3, #4
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6011      	str	r1, [r2, #0]
 8003ac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ac4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e08c      	b.n	8003be6 <_printf_i+0x1be>
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6011      	str	r1, [r2, #0]
 8003ad0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ad4:	bf18      	it	ne
 8003ad6:	b21b      	sxthne	r3, r3
 8003ad8:	e7cf      	b.n	8003a7a <_printf_i+0x52>
 8003ada:	6813      	ldr	r3, [r2, #0]
 8003adc:	6825      	ldr	r5, [r4, #0]
 8003ade:	1d18      	adds	r0, r3, #4
 8003ae0:	6010      	str	r0, [r2, #0]
 8003ae2:	0628      	lsls	r0, r5, #24
 8003ae4:	d501      	bpl.n	8003aea <_printf_i+0xc2>
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	e002      	b.n	8003af0 <_printf_i+0xc8>
 8003aea:	0668      	lsls	r0, r5, #25
 8003aec:	d5fb      	bpl.n	8003ae6 <_printf_i+0xbe>
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	4854      	ldr	r0, [pc, #336]	; (8003c44 <_printf_i+0x21c>)
 8003af2:	296f      	cmp	r1, #111	; 0x6f
 8003af4:	bf14      	ite	ne
 8003af6:	220a      	movne	r2, #10
 8003af8:	2208      	moveq	r2, #8
 8003afa:	2100      	movs	r1, #0
 8003afc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b00:	6865      	ldr	r5, [r4, #4]
 8003b02:	60a5      	str	r5, [r4, #8]
 8003b04:	2d00      	cmp	r5, #0
 8003b06:	f2c0 8095 	blt.w	8003c34 <_printf_i+0x20c>
 8003b0a:	6821      	ldr	r1, [r4, #0]
 8003b0c:	f021 0104 	bic.w	r1, r1, #4
 8003b10:	6021      	str	r1, [r4, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d13d      	bne.n	8003b92 <_printf_i+0x16a>
 8003b16:	2d00      	cmp	r5, #0
 8003b18:	f040 808e 	bne.w	8003c38 <_printf_i+0x210>
 8003b1c:	4665      	mov	r5, ip
 8003b1e:	2a08      	cmp	r2, #8
 8003b20:	d10b      	bne.n	8003b3a <_printf_i+0x112>
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	07db      	lsls	r3, r3, #31
 8003b26:	d508      	bpl.n	8003b3a <_printf_i+0x112>
 8003b28:	6923      	ldr	r3, [r4, #16]
 8003b2a:	6862      	ldr	r2, [r4, #4]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	bfde      	ittt	le
 8003b30:	2330      	movle	r3, #48	; 0x30
 8003b32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b3a:	ebac 0305 	sub.w	r3, ip, r5
 8003b3e:	6123      	str	r3, [r4, #16]
 8003b40:	f8cd 8000 	str.w	r8, [sp]
 8003b44:	463b      	mov	r3, r7
 8003b46:	aa03      	add	r2, sp, #12
 8003b48:	4621      	mov	r1, r4
 8003b4a:	4630      	mov	r0, r6
 8003b4c:	f7ff fef6 	bl	800393c <_printf_common>
 8003b50:	3001      	adds	r0, #1
 8003b52:	d14d      	bne.n	8003bf0 <_printf_i+0x1c8>
 8003b54:	f04f 30ff 	mov.w	r0, #4294967295
 8003b58:	b005      	add	sp, #20
 8003b5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b5e:	4839      	ldr	r0, [pc, #228]	; (8003c44 <_printf_i+0x21c>)
 8003b60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003b64:	6813      	ldr	r3, [r2, #0]
 8003b66:	6821      	ldr	r1, [r4, #0]
 8003b68:	1d1d      	adds	r5, r3, #4
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6015      	str	r5, [r2, #0]
 8003b6e:	060a      	lsls	r2, r1, #24
 8003b70:	d50b      	bpl.n	8003b8a <_printf_i+0x162>
 8003b72:	07ca      	lsls	r2, r1, #31
 8003b74:	bf44      	itt	mi
 8003b76:	f041 0120 	orrmi.w	r1, r1, #32
 8003b7a:	6021      	strmi	r1, [r4, #0]
 8003b7c:	b91b      	cbnz	r3, 8003b86 <_printf_i+0x15e>
 8003b7e:	6822      	ldr	r2, [r4, #0]
 8003b80:	f022 0220 	bic.w	r2, r2, #32
 8003b84:	6022      	str	r2, [r4, #0]
 8003b86:	2210      	movs	r2, #16
 8003b88:	e7b7      	b.n	8003afa <_printf_i+0xd2>
 8003b8a:	064d      	lsls	r5, r1, #25
 8003b8c:	bf48      	it	mi
 8003b8e:	b29b      	uxthmi	r3, r3
 8003b90:	e7ef      	b.n	8003b72 <_printf_i+0x14a>
 8003b92:	4665      	mov	r5, ip
 8003b94:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b98:	fb02 3311 	mls	r3, r2, r1, r3
 8003b9c:	5cc3      	ldrb	r3, [r0, r3]
 8003b9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	2900      	cmp	r1, #0
 8003ba6:	d1f5      	bne.n	8003b94 <_printf_i+0x16c>
 8003ba8:	e7b9      	b.n	8003b1e <_printf_i+0xf6>
 8003baa:	6813      	ldr	r3, [r2, #0]
 8003bac:	6825      	ldr	r5, [r4, #0]
 8003bae:	6961      	ldr	r1, [r4, #20]
 8003bb0:	1d18      	adds	r0, r3, #4
 8003bb2:	6010      	str	r0, [r2, #0]
 8003bb4:	0628      	lsls	r0, r5, #24
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	d501      	bpl.n	8003bbe <_printf_i+0x196>
 8003bba:	6019      	str	r1, [r3, #0]
 8003bbc:	e002      	b.n	8003bc4 <_printf_i+0x19c>
 8003bbe:	066a      	lsls	r2, r5, #25
 8003bc0:	d5fb      	bpl.n	8003bba <_printf_i+0x192>
 8003bc2:	8019      	strh	r1, [r3, #0]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	6123      	str	r3, [r4, #16]
 8003bc8:	4665      	mov	r5, ip
 8003bca:	e7b9      	b.n	8003b40 <_printf_i+0x118>
 8003bcc:	6813      	ldr	r3, [r2, #0]
 8003bce:	1d19      	adds	r1, r3, #4
 8003bd0:	6011      	str	r1, [r2, #0]
 8003bd2:	681d      	ldr	r5, [r3, #0]
 8003bd4:	6862      	ldr	r2, [r4, #4]
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	4628      	mov	r0, r5
 8003bda:	f7fc fb11 	bl	8000200 <memchr>
 8003bde:	b108      	cbz	r0, 8003be4 <_printf_i+0x1bc>
 8003be0:	1b40      	subs	r0, r0, r5
 8003be2:	6060      	str	r0, [r4, #4]
 8003be4:	6863      	ldr	r3, [r4, #4]
 8003be6:	6123      	str	r3, [r4, #16]
 8003be8:	2300      	movs	r3, #0
 8003bea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bee:	e7a7      	b.n	8003b40 <_printf_i+0x118>
 8003bf0:	6923      	ldr	r3, [r4, #16]
 8003bf2:	462a      	mov	r2, r5
 8003bf4:	4639      	mov	r1, r7
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	47c0      	blx	r8
 8003bfa:	3001      	adds	r0, #1
 8003bfc:	d0aa      	beq.n	8003b54 <_printf_i+0x12c>
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	079b      	lsls	r3, r3, #30
 8003c02:	d413      	bmi.n	8003c2c <_printf_i+0x204>
 8003c04:	68e0      	ldr	r0, [r4, #12]
 8003c06:	9b03      	ldr	r3, [sp, #12]
 8003c08:	4298      	cmp	r0, r3
 8003c0a:	bfb8      	it	lt
 8003c0c:	4618      	movlt	r0, r3
 8003c0e:	e7a3      	b.n	8003b58 <_printf_i+0x130>
 8003c10:	2301      	movs	r3, #1
 8003c12:	464a      	mov	r2, r9
 8003c14:	4639      	mov	r1, r7
 8003c16:	4630      	mov	r0, r6
 8003c18:	47c0      	blx	r8
 8003c1a:	3001      	adds	r0, #1
 8003c1c:	d09a      	beq.n	8003b54 <_printf_i+0x12c>
 8003c1e:	3501      	adds	r5, #1
 8003c20:	68e3      	ldr	r3, [r4, #12]
 8003c22:	9a03      	ldr	r2, [sp, #12]
 8003c24:	1a9b      	subs	r3, r3, r2
 8003c26:	42ab      	cmp	r3, r5
 8003c28:	dcf2      	bgt.n	8003c10 <_printf_i+0x1e8>
 8003c2a:	e7eb      	b.n	8003c04 <_printf_i+0x1dc>
 8003c2c:	2500      	movs	r5, #0
 8003c2e:	f104 0919 	add.w	r9, r4, #25
 8003c32:	e7f5      	b.n	8003c20 <_printf_i+0x1f8>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1ac      	bne.n	8003b92 <_printf_i+0x16a>
 8003c38:	7803      	ldrb	r3, [r0, #0]
 8003c3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c42:	e76c      	b.n	8003b1e <_printf_i+0xf6>
 8003c44:	080f5a61 	.word	0x080f5a61
 8003c48:	080f5a72 	.word	0x080f5a72

08003c4c <_sbrk_r>:
 8003c4c:	b538      	push	{r3, r4, r5, lr}
 8003c4e:	4c06      	ldr	r4, [pc, #24]	; (8003c68 <_sbrk_r+0x1c>)
 8003c50:	2300      	movs	r3, #0
 8003c52:	4605      	mov	r5, r0
 8003c54:	4608      	mov	r0, r1
 8003c56:	6023      	str	r3, [r4, #0]
 8003c58:	f7fd f91c 	bl	8000e94 <_sbrk>
 8003c5c:	1c43      	adds	r3, r0, #1
 8003c5e:	d102      	bne.n	8003c66 <_sbrk_r+0x1a>
 8003c60:	6823      	ldr	r3, [r4, #0]
 8003c62:	b103      	cbz	r3, 8003c66 <_sbrk_r+0x1a>
 8003c64:	602b      	str	r3, [r5, #0]
 8003c66:	bd38      	pop	{r3, r4, r5, pc}
 8003c68:	20078ec4 	.word	0x20078ec4

08003c6c <__sread>:
 8003c6c:	b510      	push	{r4, lr}
 8003c6e:	460c      	mov	r4, r1
 8003c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c74:	f000 f896 	bl	8003da4 <_read_r>
 8003c78:	2800      	cmp	r0, #0
 8003c7a:	bfab      	itete	ge
 8003c7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c7e:	89a3      	ldrhlt	r3, [r4, #12]
 8003c80:	181b      	addge	r3, r3, r0
 8003c82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c86:	bfac      	ite	ge
 8003c88:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c8a:	81a3      	strhlt	r3, [r4, #12]
 8003c8c:	bd10      	pop	{r4, pc}

08003c8e <__swrite>:
 8003c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c92:	461f      	mov	r7, r3
 8003c94:	898b      	ldrh	r3, [r1, #12]
 8003c96:	05db      	lsls	r3, r3, #23
 8003c98:	4605      	mov	r5, r0
 8003c9a:	460c      	mov	r4, r1
 8003c9c:	4616      	mov	r6, r2
 8003c9e:	d505      	bpl.n	8003cac <__swrite+0x1e>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ca8:	f000 f868 	bl	8003d7c <_lseek_r>
 8003cac:	89a3      	ldrh	r3, [r4, #12]
 8003cae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cb6:	81a3      	strh	r3, [r4, #12]
 8003cb8:	4632      	mov	r2, r6
 8003cba:	463b      	mov	r3, r7
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc2:	f000 b817 	b.w	8003cf4 <_write_r>

08003cc6 <__sseek>:
 8003cc6:	b510      	push	{r4, lr}
 8003cc8:	460c      	mov	r4, r1
 8003cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cce:	f000 f855 	bl	8003d7c <_lseek_r>
 8003cd2:	1c43      	adds	r3, r0, #1
 8003cd4:	89a3      	ldrh	r3, [r4, #12]
 8003cd6:	bf15      	itete	ne
 8003cd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003cda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003cde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ce2:	81a3      	strheq	r3, [r4, #12]
 8003ce4:	bf18      	it	ne
 8003ce6:	81a3      	strhne	r3, [r4, #12]
 8003ce8:	bd10      	pop	{r4, pc}

08003cea <__sclose>:
 8003cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cee:	f000 b813 	b.w	8003d18 <_close_r>
	...

08003cf4 <_write_r>:
 8003cf4:	b538      	push	{r3, r4, r5, lr}
 8003cf6:	4c07      	ldr	r4, [pc, #28]	; (8003d14 <_write_r+0x20>)
 8003cf8:	4605      	mov	r5, r0
 8003cfa:	4608      	mov	r0, r1
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	2200      	movs	r2, #0
 8003d00:	6022      	str	r2, [r4, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	f7fd f875 	bl	8000df2 <_write>
 8003d08:	1c43      	adds	r3, r0, #1
 8003d0a:	d102      	bne.n	8003d12 <_write_r+0x1e>
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	b103      	cbz	r3, 8003d12 <_write_r+0x1e>
 8003d10:	602b      	str	r3, [r5, #0]
 8003d12:	bd38      	pop	{r3, r4, r5, pc}
 8003d14:	20078ec4 	.word	0x20078ec4

08003d18 <_close_r>:
 8003d18:	b538      	push	{r3, r4, r5, lr}
 8003d1a:	4c06      	ldr	r4, [pc, #24]	; (8003d34 <_close_r+0x1c>)
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	4605      	mov	r5, r0
 8003d20:	4608      	mov	r0, r1
 8003d22:	6023      	str	r3, [r4, #0]
 8003d24:	f7fd f881 	bl	8000e2a <_close>
 8003d28:	1c43      	adds	r3, r0, #1
 8003d2a:	d102      	bne.n	8003d32 <_close_r+0x1a>
 8003d2c:	6823      	ldr	r3, [r4, #0]
 8003d2e:	b103      	cbz	r3, 8003d32 <_close_r+0x1a>
 8003d30:	602b      	str	r3, [r5, #0]
 8003d32:	bd38      	pop	{r3, r4, r5, pc}
 8003d34:	20078ec4 	.word	0x20078ec4

08003d38 <_fstat_r>:
 8003d38:	b538      	push	{r3, r4, r5, lr}
 8003d3a:	4c07      	ldr	r4, [pc, #28]	; (8003d58 <_fstat_r+0x20>)
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	4605      	mov	r5, r0
 8003d40:	4608      	mov	r0, r1
 8003d42:	4611      	mov	r1, r2
 8003d44:	6023      	str	r3, [r4, #0]
 8003d46:	f7fd f87c 	bl	8000e42 <_fstat>
 8003d4a:	1c43      	adds	r3, r0, #1
 8003d4c:	d102      	bne.n	8003d54 <_fstat_r+0x1c>
 8003d4e:	6823      	ldr	r3, [r4, #0]
 8003d50:	b103      	cbz	r3, 8003d54 <_fstat_r+0x1c>
 8003d52:	602b      	str	r3, [r5, #0]
 8003d54:	bd38      	pop	{r3, r4, r5, pc}
 8003d56:	bf00      	nop
 8003d58:	20078ec4 	.word	0x20078ec4

08003d5c <_isatty_r>:
 8003d5c:	b538      	push	{r3, r4, r5, lr}
 8003d5e:	4c06      	ldr	r4, [pc, #24]	; (8003d78 <_isatty_r+0x1c>)
 8003d60:	2300      	movs	r3, #0
 8003d62:	4605      	mov	r5, r0
 8003d64:	4608      	mov	r0, r1
 8003d66:	6023      	str	r3, [r4, #0]
 8003d68:	f7fd f87b 	bl	8000e62 <_isatty>
 8003d6c:	1c43      	adds	r3, r0, #1
 8003d6e:	d102      	bne.n	8003d76 <_isatty_r+0x1a>
 8003d70:	6823      	ldr	r3, [r4, #0]
 8003d72:	b103      	cbz	r3, 8003d76 <_isatty_r+0x1a>
 8003d74:	602b      	str	r3, [r5, #0]
 8003d76:	bd38      	pop	{r3, r4, r5, pc}
 8003d78:	20078ec4 	.word	0x20078ec4

08003d7c <_lseek_r>:
 8003d7c:	b538      	push	{r3, r4, r5, lr}
 8003d7e:	4c07      	ldr	r4, [pc, #28]	; (8003d9c <_lseek_r+0x20>)
 8003d80:	4605      	mov	r5, r0
 8003d82:	4608      	mov	r0, r1
 8003d84:	4611      	mov	r1, r2
 8003d86:	2200      	movs	r2, #0
 8003d88:	6022      	str	r2, [r4, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f7fd f874 	bl	8000e78 <_lseek>
 8003d90:	1c43      	adds	r3, r0, #1
 8003d92:	d102      	bne.n	8003d9a <_lseek_r+0x1e>
 8003d94:	6823      	ldr	r3, [r4, #0]
 8003d96:	b103      	cbz	r3, 8003d9a <_lseek_r+0x1e>
 8003d98:	602b      	str	r3, [r5, #0]
 8003d9a:	bd38      	pop	{r3, r4, r5, pc}
 8003d9c:	20078ec4 	.word	0x20078ec4

08003da0 <__malloc_lock>:
 8003da0:	4770      	bx	lr

08003da2 <__malloc_unlock>:
 8003da2:	4770      	bx	lr

08003da4 <_read_r>:
 8003da4:	b538      	push	{r3, r4, r5, lr}
 8003da6:	4c07      	ldr	r4, [pc, #28]	; (8003dc4 <_read_r+0x20>)
 8003da8:	4605      	mov	r5, r0
 8003daa:	4608      	mov	r0, r1
 8003dac:	4611      	mov	r1, r2
 8003dae:	2200      	movs	r2, #0
 8003db0:	6022      	str	r2, [r4, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	f7fd f800 	bl	8000db8 <_read>
 8003db8:	1c43      	adds	r3, r0, #1
 8003dba:	d102      	bne.n	8003dc2 <_read_r+0x1e>
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	b103      	cbz	r3, 8003dc2 <_read_r+0x1e>
 8003dc0:	602b      	str	r3, [r5, #0]
 8003dc2:	bd38      	pop	{r3, r4, r5, pc}
 8003dc4:	20078ec4 	.word	0x20078ec4

08003dc8 <_init>:
 8003dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dca:	bf00      	nop
 8003dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dce:	bc08      	pop	{r3}
 8003dd0:	469e      	mov	lr, r3
 8003dd2:	4770      	bx	lr

08003dd4 <_fini>:
 8003dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd6:	bf00      	nop
 8003dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dda:	bc08      	pop	{r3}
 8003ddc:	469e      	mov	lr, r3
 8003dde:	4770      	bx	lr
