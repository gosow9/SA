
EpdSpi_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007004  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0007a9e4  080071c4  080071c4  000171c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08081ba8  08081ba8  000a0078  2**0
                  CONTENTS
  4 .ARM          00000008  08081ba8  08081ba8  00091ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08081bb0  08081bb0  000a0078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08081bb0  08081bb0  00091bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08081bb4  08081bb4  00091bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08081bb8  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000078  08081c30  000a0078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08081c30  000a029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000a0078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141df  00000000  00000000  000a00a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b65  00000000  00000000  000b4287  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee8  00000000  00000000  000b6df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d50  00000000  00000000  000b7cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b2f7  00000000  00000000  000b8a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e638  00000000  00000000  000e3d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00102b26  00000000  00000000  000f2357  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f4e7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041b8  00000000  00000000  001f4ef8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000078 	.word	0x20000078
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080071ac 	.word	0x080071ac

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	080071ac 	.word	0x080071ac

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <LCDWaitForReady>:

//-----------------------------------------------------------
//Host controller function 1---Wait for host data Bus Ready
//-----------------------------------------------------------
void LCDWaitForReady()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0

	//while(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET )

	uint8_t ulData = HAL_GPIO_ReadPin(EPD_HRDY_GPIO_Port, EPD_HRDY_Pin);
 80005a6:	2120      	movs	r1, #32
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ac:	f002 f80c 	bl	80025c8 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	71fb      	strb	r3, [r7, #7]
	while(ulData == 0)
 80005b4:	e006      	b.n	80005c4 <LCDWaitForReady+0x24>
	{
		ulData = HAL_GPIO_ReadPin(EPD_HRDY_GPIO_Port, EPD_HRDY_Pin);
 80005b6:	2120      	movs	r1, #32
 80005b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005bc:	f002 f804 	bl	80025c8 <HAL_GPIO_ReadPin>
 80005c0:	4603      	mov	r3, r0
 80005c2:	71fb      	strb	r3, [r7, #7]
	while(ulData == 0)
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f5      	beq.n	80005b6 <LCDWaitForReady+0x16>
	}
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <LCDWriteCmdCode>:

//-----------------------------------------------------------
//Host controller function 2---Write command code to host data Bus
//-----------------------------------------------------------
void LCDWriteCmdCode(uint16_t usCmdCode)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	80fb      	strh	r3, [r7, #6]
	//uint16_t wPreamble = 0x6000;


	//uint8_t wPreamble[2] = {0x00, 0x60};
	//uint8_t wDat[2] = {usCmdCode, usCmdCode>>8};
	uint8_t dat[4]={0x00, 0x60, usCmdCode, usCmdCode>>8};
 80005de:	2300      	movs	r3, #0
 80005e0:	733b      	strb	r3, [r7, #12]
 80005e2:	2360      	movs	r3, #96	; 0x60
 80005e4:	737b      	strb	r3, [r7, #13]
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	73bb      	strb	r3, [r7, #14]
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	73fb      	strb	r3, [r7, #15]
	LCDWaitForReady();
 80005f6:	f7ff ffd3 	bl	80005a0 <LCDWaitForReady>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2101      	movs	r1, #1
 80005fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000602:	f001 fff9 	bl	80025f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, dat, 2, HAL_MAX_DELAY);
 8000606:	f107 010c 	add.w	r1, r7, #12
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	2202      	movs	r2, #2
 8000610:	4806      	ldr	r0, [pc, #24]	; (800062c <LCDWriteCmdCode+0x58>)
 8000612:	f003 fd0d 	bl	8004030 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
	//LCDWaitForReady();
	//HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000616:	2201      	movs	r2, #1
 8000618:	2101      	movs	r1, #1
 800061a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061e:	f001 ffeb 	bl	80025f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &CmdMsb, 1, HAL_MAX_DELAY);
	HAL_SPI_Transmit(&hspi1, &CmdLsb, 1, HAL_MAX_DELAY);

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
*/
}
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	200000e4 	.word	0x200000e4

08000630 <LCDWriteData>:

//-----------------------------------------------------------
//Host controller function 3---Write Data to host data Bus
//-----------------------------------------------------------
void LCDWriteData(uint16_t usData)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	80fb      	strh	r3, [r7, #6]

	uint8_t dat[4]={ 0x00, 0x00, (uint8_t)usData,(uint8_t)( usData>>8)};
 800063a:	2300      	movs	r3, #0
 800063c:	733b      	strb	r3, [r7, #12]
 800063e:	2300      	movs	r3, #0
 8000640:	737b      	strb	r3, [r7, #13]
 8000642:	88fb      	ldrh	r3, [r7, #6]
 8000644:	b2db      	uxtb	r3, r3
 8000646:	73bb      	strb	r3, [r7, #14]
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	0a1b      	lsrs	r3, r3, #8
 800064c:	b29b      	uxth	r3, r3
 800064e:	b2db      	uxtb	r3, r3
 8000650:	73fb      	strb	r3, [r7, #15]
	//uint8_t wPreamble[2] = {0x00, 0x00};
	//uint8_t wDat[2] = { (uint8_t)usData,(uint8_t)( usData>>8)};
	LCDWaitForReady();
 8000652:	f7ff ffa5 	bl	80005a0 <LCDWaitForReady>

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2101      	movs	r1, #1
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f001 ffcb 	bl	80025f8 <HAL_GPIO_WritePin>
	//HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
	HAL_SPI_Transmit(&hspi1, dat, 2, HAL_MAX_DELAY);
 8000662:	f107 010c 	add.w	r1, r7, #12
 8000666:	f04f 33ff 	mov.w	r3, #4294967295
 800066a:	2202      	movs	r2, #2
 800066c:	4806      	ldr	r0, [pc, #24]	; (8000688 <LCDWriteData+0x58>)
 800066e:	f003 fcdf 	bl	8004030 <HAL_SPI_Transmit>
	//LCDWaitForReady();
	//HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000672:	2201      	movs	r2, #1
 8000674:	2101      	movs	r1, #1
 8000676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067a:	f001 ffbd 	bl	80025f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &DatLsb, 1, HAL_MAX_DELAY);

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	200000e4 	.word	0x200000e4

0800068c <LCDWriteNData>:

void LCDWriteNData(uint16_t* pwBuf, uint32_t ulSizeWordCnt)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
	uint32_t i;


	uint8_t wPreamble[2] = {0x00, 0x00};
 8000696:	2300      	movs	r3, #0
 8000698:	743b      	strb	r3, [r7, #16]
 800069a:	2300      	movs	r3, #0
 800069c:	747b      	strb	r3, [r7, #17]
	uint8_t wDat[2];
	LCDWaitForReady();
 800069e:	f7ff ff7f 	bl	80005a0 <LCDWaitForReady>

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2101      	movs	r1, #1
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f001 ffa5 	bl	80025f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 80006ae:	f107 0110 	add.w	r1, r7, #16
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	2201      	movs	r2, #1
 80006b8:	4818      	ldr	r0, [pc, #96]	; (800071c <LCDWriteNData+0x90>)
 80006ba:	f003 fcb9 	bl	8004030 <HAL_SPI_Transmit>
	LCDWaitForReady();
 80006be:	f7ff ff6f 	bl	80005a0 <LCDWaitForReady>
	for(i=0;i<ulSizeWordCnt;i++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
 80006c6:	e01a      	b.n	80006fe <LCDWriteNData+0x72>
		{
		wDat[0]=pwBuf[i];
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	4413      	add	r3, r2
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	733b      	strb	r3, [r7, #12]
		wDat[1]=pwBuf[i]>>8;
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	0a1b      	lsrs	r3, r3, #8
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	737b      	strb	r3, [r7, #13]
		HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
 80006e8:	f107 010c 	add.w	r1, r7, #12
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
 80006f0:	2201      	movs	r2, #1
 80006f2:	480a      	ldr	r0, [pc, #40]	; (800071c <LCDWriteNData+0x90>)
 80006f4:	f003 fc9c 	bl	8004030 <HAL_SPI_Transmit>
	for(i=0;i<ulSizeWordCnt;i++)
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	3301      	adds	r3, #1
 80006fc:	617b      	str	r3, [r7, #20]
 80006fe:	697a      	ldr	r2, [r7, #20]
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	429a      	cmp	r2, r3
 8000704:	d3e0      	bcc.n	80006c8 <LCDWriteNData+0x3c>
		}

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000706:	2201      	movs	r2, #1
 8000708:	2101      	movs	r1, #1
 800070a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070e:	f001 ff73 	bl	80025f8 <HAL_GPIO_WritePin>
	}

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 8000712:	bf00      	nop
 8000714:	3718      	adds	r7, #24
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200000e4 	.word	0x200000e4

08000720 <LCDReadData>:

//-----------------------------------------------------------
//Host controller function 4---Read Data from host data Bus
//-----------------------------------------------------------
uint16_t LCDReadData()
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af02      	add	r7, sp, #8

	uint8_t wRLsb[2];
	uint16_t wRData;
	uint8_t wdummy[2] = {0};
 8000726:	2300      	movs	r3, #0
 8000728:	813b      	strh	r3, [r7, #8]
	uint8_t rdummy[2] = {0};
 800072a:	2300      	movs	r3, #0
 800072c:	80bb      	strh	r3, [r7, #4]
	uint8_t wPreamble[2] = {0x00, 0x10};
 800072e:	2300      	movs	r3, #0
 8000730:	703b      	strb	r3, [r7, #0]
 8000732:	2310      	movs	r3, #16
 8000734:	707b      	strb	r3, [r7, #1]

	LCDWaitForReady();
 8000736:	f7ff ff33 	bl	80005a0 <LCDWaitForReady>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2101      	movs	r1, #1
 800073e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000742:	f001 ff59 	bl	80025f8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 8000746:	4639      	mov	r1, r7
 8000748:	f04f 33ff 	mov.w	r3, #4294967295
 800074c:	2201      	movs	r2, #1
 800074e:	4818      	ldr	r0, [pc, #96]	; (80007b0 <LCDReadData+0x90>)
 8000750:	f003 fc6e 	bl	8004030 <HAL_SPI_Transmit>
	LCDWaitForReady();
 8000754:	f7ff ff24 	bl	80005a0 <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, rdummy, 1,HAL_MAX_DELAY);
 8000758:	1d3a      	adds	r2, r7, #4
 800075a:	f107 0108 	add.w	r1, r7, #8
 800075e:	f04f 33ff 	mov.w	r3, #4294967295
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	2301      	movs	r3, #1
 8000766:	4812      	ldr	r0, [pc, #72]	; (80007b0 <LCDReadData+0x90>)
 8000768:	f003 fdc8 	bl	80042fc <HAL_SPI_TransmitReceive>

	LCDWaitForReady();
 800076c:	f7ff ff18 	bl	80005a0 <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, wRLsb, 1,HAL_MAX_DELAY);
 8000770:	f107 020c 	add.w	r2, r7, #12
 8000774:	f107 0108 	add.w	r1, r7, #8
 8000778:	f04f 33ff 	mov.w	r3, #4294967295
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	2301      	movs	r3, #1
 8000780:	480b      	ldr	r0, [pc, #44]	; (80007b0 <LCDReadData+0x90>)
 8000782:	f003 fdbb 	bl	80042fc <HAL_SPI_TransmitReceive>

	wRData = wRLsb[1]<<8;
 8000786:	7b7b      	ldrb	r3, [r7, #13]
 8000788:	b29b      	uxth	r3, r3
 800078a:	021b      	lsls	r3, r3, #8
 800078c:	81fb      	strh	r3, [r7, #14]
	wRData |= wRLsb[0];
 800078e:	7b3b      	ldrb	r3, [r7, #12]
 8000790:	b29a      	uxth	r2, r3
 8000792:	89fb      	ldrh	r3, [r7, #14]
 8000794:	4313      	orrs	r3, r2
 8000796:	81fb      	strh	r3, [r7, #14]
	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000798:	2201      	movs	r2, #1
 800079a:	2101      	movs	r1, #1
 800079c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a0:	f001 ff2a 	bl	80025f8 <HAL_GPIO_WritePin>

	return wRData;
 80007a4:	89fb      	ldrh	r3, [r7, #14]
	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);

	return wRData;
	*/
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000e4 	.word	0x200000e4

080007b4 <LCDReadNData>:

//-----------------------------------------------------------
//  Read Burst N words Data
//-----------------------------------------------------------
void LCDReadNData(uint16_t* pwBuf, uint32_t ulSizeWordCnt)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af02      	add	r7, sp, #8
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]

	uint32_t i;

	uint8_t wRLsb[2];
	//uint16_t wRData;
	uint8_t wdummy[2] = {0};
 80007be:	2300      	movs	r3, #0
 80007c0:	82bb      	strh	r3, [r7, #20]
	uint8_t rdummy[2] = {0};
 80007c2:	2300      	movs	r3, #0
 80007c4:	823b      	strh	r3, [r7, #16]
	uint8_t wPreamble[2] = {0x00, 0x10};
 80007c6:	2300      	movs	r3, #0
 80007c8:	733b      	strb	r3, [r7, #12]
 80007ca:	2310      	movs	r3, #16
 80007cc:	737b      	strb	r3, [r7, #13]
	LCDWaitForReady();
 80007ce:	f7ff fee7 	bl	80005a0 <LCDWaitForReady>

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2101      	movs	r1, #1
 80007d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007da:	f001 ff0d 	bl	80025f8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 80007de:	f107 010c 	add.w	r1, r7, #12
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
 80007e6:	2201      	movs	r2, #1
 80007e8:	4823      	ldr	r0, [pc, #140]	; (8000878 <LCDReadNData+0xc4>)
 80007ea:	f003 fc21 	bl	8004030 <HAL_SPI_Transmit>

	LCDWaitForReady();
 80007ee:	f7ff fed7 	bl	80005a0 <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, rdummy, 1,HAL_MAX_DELAY);
 80007f2:	f107 0210 	add.w	r2, r7, #16
 80007f6:	f107 0114 	add.w	r1, r7, #20
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	2301      	movs	r3, #1
 8000802:	481d      	ldr	r0, [pc, #116]	; (8000878 <LCDReadNData+0xc4>)
 8000804:	f003 fd7a 	bl	80042fc <HAL_SPI_TransmitReceive>

	LCDWaitForReady();
 8000808:	f7ff feca 	bl	80005a0 <LCDWaitForReady>

		for(i=0;i<ulSizeWordCnt;i++)
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
 8000810:	e024      	b.n	800085c <LCDReadNData+0xa8>
		{
			HAL_SPI_TransmitReceive(&hspi1, wdummy, wRLsb, 1,HAL_MAX_DELAY);
 8000812:	f107 0218 	add.w	r2, r7, #24
 8000816:	f107 0114 	add.w	r1, r7, #20
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2301      	movs	r3, #1
 8000822:	4815      	ldr	r0, [pc, #84]	; (8000878 <LCDReadNData+0xc4>)
 8000824:	f003 fd6a 	bl	80042fc <HAL_SPI_TransmitReceive>
			pwBuf[i] = wRLsb[1]<<8;
 8000828:	7e7b      	ldrb	r3, [r7, #25]
 800082a:	b29a      	uxth	r2, r3
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	6879      	ldr	r1, [r7, #4]
 8000832:	440b      	add	r3, r1
 8000834:	0212      	lsls	r2, r2, #8
 8000836:	b292      	uxth	r2, r2
 8000838:	801a      	strh	r2, [r3, #0]
			pwBuf[i] |= wRLsb[0];
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	8819      	ldrh	r1, [r3, #0]
 8000844:	7e3b      	ldrb	r3, [r7, #24]
 8000846:	b29a      	uxth	r2, r3
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	4403      	add	r3, r0
 8000850:	430a      	orrs	r2, r1
 8000852:	b292      	uxth	r2, r2
 8000854:	801a      	strh	r2, [r3, #0]
		for(i=0;i<ulSizeWordCnt;i++)
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3301      	adds	r3, #1
 800085a:	61fb      	str	r3, [r7, #28]
 800085c:	69fa      	ldr	r2, [r7, #28]
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	429a      	cmp	r2, r3
 8000862:	d3d6      	bcc.n	8000812 <LCDReadNData+0x5e>
		}

		HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000864:	2201      	movs	r2, #1
 8000866:	2101      	movs	r1, #1
 8000868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086c:	f001 fec4 	bl	80025f8 <HAL_GPIO_WritePin>
	}

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 8000870:	bf00      	nop
 8000872:	3720      	adds	r7, #32
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200000e4 	.word	0x200000e4

0800087c <LCDSendCmdArg>:

//-----------------------------------------------------------
//Host controller function 5---Write command to host data Bus with aruments
//-----------------------------------------------------------
void LCDSendCmdArg(uint16_t usCmdCode,uint16_t* pArg, uint16_t usNumArg)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	6039      	str	r1, [r7, #0]
 8000886:	80fb      	strh	r3, [r7, #6]
 8000888:	4613      	mov	r3, r2
 800088a:	80bb      	strh	r3, [r7, #4]
     uint16_t i;
     //Send Cmd code
     LCDWriteCmdCode(usCmdCode);
 800088c:	88fb      	ldrh	r3, [r7, #6]
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fea0 	bl	80005d4 <LCDWriteCmdCode>
     //Send Data
     for(i=0;i<usNumArg;i++)
 8000894:	2300      	movs	r3, #0
 8000896:	81fb      	strh	r3, [r7, #14]
 8000898:	e00a      	b.n	80008b0 <LCDSendCmdArg+0x34>
     {
         LCDWriteData(pArg[i]);
 800089a:	89fb      	ldrh	r3, [r7, #14]
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	683a      	ldr	r2, [r7, #0]
 80008a0:	4413      	add	r3, r2
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fec3 	bl	8000630 <LCDWriteData>
     for(i=0;i<usNumArg;i++)
 80008aa:	89fb      	ldrh	r3, [r7, #14]
 80008ac:	3301      	adds	r3, #1
 80008ae:	81fb      	strh	r3, [r7, #14]
 80008b0:	89fa      	ldrh	r2, [r7, #14]
 80008b2:	88bb      	ldrh	r3, [r7, #4]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d3f0      	bcc.n	800089a <LCDSendCmdArg+0x1e>
     }
}
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <IT8951ReadReg>:

//-----------------------------------------------------------
//Host Cmd 4---REG_RD
//-----------------------------------------------------------
uint16_t IT8951ReadReg(uint16_t usRegAddr)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	80fb      	strh	r3, [r7, #6]
	uint16_t usData;

	//Send Cmd and Register Address
	LCDWriteCmdCode(IT8951_TCON_REG_RD);
 80008ca:	2010      	movs	r0, #16
 80008cc:	f7ff fe82 	bl	80005d4 <LCDWriteCmdCode>
	LCDWriteData(usRegAddr);
 80008d0:	88fb      	ldrh	r3, [r7, #6]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff feac 	bl	8000630 <LCDWriteData>
	//Read data from Host Data bus
	usData = LCDReadData();
 80008d8:	f7ff ff22 	bl	8000720 <LCDReadData>
 80008dc:	4603      	mov	r3, r0
 80008de:	81fb      	strh	r3, [r7, #14]
	return usData;
 80008e0:	89fb      	ldrh	r3, [r7, #14]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <IT8951WriteReg>:
//-----------------------------------------------------------
//Host Cmd 5---REG_WR
//-----------------------------------------------------------
void IT8951WriteReg(uint16_t usRegAddr,uint16_t usValue)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	460a      	mov	r2, r1
 80008f4:	80fb      	strh	r3, [r7, #6]
 80008f6:	4613      	mov	r3, r2
 80008f8:	80bb      	strh	r3, [r7, #4]
	//Send Cmd , Register Address and Write Value
	LCDWriteCmdCode(IT8951_TCON_REG_WR);
 80008fa:	2011      	movs	r0, #17
 80008fc:	f7ff fe6a 	bl	80005d4 <LCDWriteCmdCode>
	LCDWriteData(usRegAddr);
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fe94 	bl	8000630 <LCDWriteData>
	LCDWriteData(usValue);
 8000908:	88bb      	ldrh	r3, [r7, #4]
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fe90 	bl	8000630 <LCDWriteData>
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <IT8951LoadImgAreaStart>:
}
//-----------------------------------------------------------
//Host Cmd 11---LD_IMG_AREA
//-----------------------------------------------------------
void IT8951LoadImgAreaStart(IT8951LdImgInfo* pstLdImgInfo ,IT8951AreaImgInfo* pstAreaImgInfo)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
    uint16_t usArg[5];
    //Setting Argument for Load image start
    usArg[0] = (pstLdImgInfo->usEndianType << 8 )
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	021b      	lsls	r3, r3, #8
    |(pstLdImgInfo->usPixelFormat << 4)
 8000928:	b21a      	sxth	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	885b      	ldrh	r3, [r3, #2]
 800092e:	011b      	lsls	r3, r3, #4
 8000930:	b21b      	sxth	r3, r3
 8000932:	4313      	orrs	r3, r2
 8000934:	b21a      	sxth	r2, r3
    |(pstLdImgInfo->usRotate);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	889b      	ldrh	r3, [r3, #4]
 800093a:	b21b      	sxth	r3, r3
 800093c:	4313      	orrs	r3, r2
 800093e:	b21b      	sxth	r3, r3
 8000940:	b29b      	uxth	r3, r3
    usArg[0] = (pstLdImgInfo->usEndianType << 8 )
 8000942:	81bb      	strh	r3, [r7, #12]
    usArg[1] = pstAreaImgInfo->usX;
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	81fb      	strh	r3, [r7, #14]
    usArg[2] = pstAreaImgInfo->usY;
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	885b      	ldrh	r3, [r3, #2]
 800094e:	823b      	strh	r3, [r7, #16]
    usArg[3] = pstAreaImgInfo->usWidth;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	889b      	ldrh	r3, [r3, #4]
 8000954:	827b      	strh	r3, [r7, #18]
    usArg[4] = pstAreaImgInfo->usHeight;
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	88db      	ldrh	r3, [r3, #6]
 800095a:	82bb      	strh	r3, [r7, #20]
    //Send Cmd and Args
    LCDSendCmdArg(IT8951_TCON_LD_IMG_AREA , usArg , 5);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	2205      	movs	r2, #5
 8000962:	4619      	mov	r1, r3
 8000964:	2021      	movs	r0, #33	; 0x21
 8000966:	f7ff ff89 	bl	800087c <LCDSendCmdArg>
}
 800096a:	bf00      	nop
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <IT8951LoadImgEnd>:
//-----------------------------------------------------------
//Host Cmd 12---LD_IMG_END
//-----------------------------------------------------------
void IT8951LoadImgEnd(void)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	af00      	add	r7, sp, #0
    LCDWriteCmdCode(IT8951_TCON_LD_IMG_END);
 8000976:	2022      	movs	r0, #34	; 0x22
 8000978:	f7ff fe2c 	bl	80005d4 <LCDWriteCmdCode>
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}

08000980 <GetIT8951SystemInfo>:

void GetIT8951SystemInfo(void* pBuf)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	uint16_t* pusWord = (uint16_t*)pBuf;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	60fb      	str	r3, [r7, #12]
	IT8951DevInfo* pstDevInfo;

	//Send I80 CMD
	LCDWriteCmdCode(USDEF_I80_CMD_GET_DEV_INFO);
 800098c:	f240 3002 	movw	r0, #770	; 0x302
 8000990:	f7ff fe20 	bl	80005d4 <LCDWriteCmdCode>

	//Burst Read Request for SPI interface only
	LCDReadNData(pusWord, sizeof(IT8951DevInfo)/2);//Polling HRDY for each words(2-bytes) if possible
 8000994:	2114      	movs	r1, #20
 8000996:	68f8      	ldr	r0, [r7, #12]
 8000998:	f7ff ff0c 	bl	80007b4 <LCDReadNData>

	//Show Device information of IT8951
	pstDevInfo = (IT8951DevInfo*)pBuf;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	60bb      	str	r3, [r7, #8]
	printf("Panel(W,H) = (%d,%d)\r\n",
	pstDevInfo->usPanelW, pstDevInfo->usPanelH );
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	881b      	ldrh	r3, [r3, #0]
	printf("Panel(W,H) = (%d,%d)\r\n",
 80009a4:	4619      	mov	r1, r3
	pstDevInfo->usPanelW, pstDevInfo->usPanelH );
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	885b      	ldrh	r3, [r3, #2]
	printf("Panel(W,H) = (%d,%d)\r\n",
 80009aa:	461a      	mov	r2, r3
 80009ac:	480e      	ldr	r0, [pc, #56]	; (80009e8 <GetIT8951SystemInfo+0x68>)
 80009ae:	f005 fcb5 	bl	800631c <iprintf>
	printf("Image Buffer Address = %X\r\n",
	pstDevInfo->usImgBufAddrL | (pstDevInfo->usImgBufAddrH << 16));
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	889b      	ldrh	r3, [r3, #4]
 80009b6:	461a      	mov	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	88db      	ldrh	r3, [r3, #6]
 80009bc:	041b      	lsls	r3, r3, #16
	printf("Image Buffer Address = %X\r\n",
 80009be:	4313      	orrs	r3, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	480a      	ldr	r0, [pc, #40]	; (80009ec <GetIT8951SystemInfo+0x6c>)
 80009c4:	f005 fcaa 	bl	800631c <iprintf>
	//Show Firmware and LUT Version
	printf("FW Version = %s\r\n", (uint8_t*)pstDevInfo->usFWVersion);
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	3308      	adds	r3, #8
 80009cc:	4619      	mov	r1, r3
 80009ce:	4808      	ldr	r0, [pc, #32]	; (80009f0 <GetIT8951SystemInfo+0x70>)
 80009d0:	f005 fca4 	bl	800631c <iprintf>
	printf("LUT Version = %s\r\n", (uint8_t*)pstDevInfo->usLUTVersion);
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	3318      	adds	r3, #24
 80009d8:	4619      	mov	r1, r3
 80009da:	4806      	ldr	r0, [pc, #24]	; (80009f4 <GetIT8951SystemInfo+0x74>)
 80009dc:	f005 fc9e 	bl	800631c <iprintf>
}
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	080071c4 	.word	0x080071c4
 80009ec:	080071dc 	.word	0x080071dc
 80009f0:	080071f8 	.word	0x080071f8
 80009f4:	0800720c 	.word	0x0800720c

080009f8 <IT8951SetImgBufBaseAddr>:

//-----------------------------------------------------------
//Initial function 2---Set Image buffer base address
//-----------------------------------------------------------
void IT8951SetImgBufBaseAddr(uint32_t ulImgBufAddr)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	uint16_t usWordH = (uint16_t)((ulImgBufAddr >> 16) & 0x0000FFFF);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	0c1b      	lsrs	r3, r3, #16
 8000a04:	81fb      	strh	r3, [r7, #14]
	uint16_t usWordL = (uint16_t)( ulImgBufAddr & 0x0000FFFF);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	81bb      	strh	r3, [r7, #12]
	//Write LISAR Reg
	IT8951WriteReg(LISAR + 2 ,usWordH);
 8000a0a:	89fb      	ldrh	r3, [r7, #14]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f240 200a 	movw	r0, #522	; 0x20a
 8000a12:	f7ff ff6a 	bl	80008ea <IT8951WriteReg>
	IT8951WriteReg(LISAR ,usWordL);
 8000a16:	89bb      	ldrh	r3, [r7, #12]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f44f 7002 	mov.w	r0, #520	; 0x208
 8000a1e:	f7ff ff64 	bl	80008ea <IT8951WriteReg>
}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <IT8951WaitForDisplayReady>:
//-----------------------------------------------------------
//Display function 1---Wait for LUT Engine Finish
//                     Polling Display Engine Ready by LUTNo
//-----------------------------------------------------------
void IT8951WaitForDisplayReady()
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	af00      	add	r7, sp, #0
	//Check IT8951 Register LUTAFSR => NonZero Busy, 0 - Free
	while(IT8951ReadReg(LUTAFSR));
 8000a2e:	bf00      	nop
 8000a30:	f241 2024 	movw	r0, #4644	; 0x1224
 8000a34:	f7ff ff44 	bl	80008c0 <IT8951ReadReg>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d1f8      	bne.n	8000a30 <IT8951WaitForDisplayReady+0x6>
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <IT8951HostAreaPackedPixelWrite>:

//-----------------------------------------------------------
//Display function 2---Load Image Area process
//-----------------------------------------------------------
void IT8951HostAreaPackedPixelWrite(IT8951LdImgInfo* pstLdImgInfo,IT8951AreaImgInfo* pstAreaImgInfo)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b084      	sub	sp, #16
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
 8000a4a:	6039      	str	r1, [r7, #0]
	//uint32_t i,j;
	//Source buffer address of Host
	uint16_t* pusFrameBuf = (uint16_t*)pstLdImgInfo->ulStartFBAddr;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	60fb      	str	r3, [r7, #12]

	//Set Image buffer(IT8951) Base address
	IT8951SetImgBufBaseAddr(pstLdImgInfo->ulImgBufBaseAddr);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff ffce 	bl	80009f8 <IT8951SetImgBufBaseAddr>
	//Send Load Image start Cmd
	IT8951LoadImgAreaStart(pstLdImgInfo , pstAreaImgInfo);
 8000a5c:	6839      	ldr	r1, [r7, #0]
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff ff5a 	bl	8000918 <IT8951LoadImgAreaStart>
	//Host Write Data
	LCDWriteNData(pusFrameBuf, (pstAreaImgInfo->usHeight*pstAreaImgInfo->usWidth/2));
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	88db      	ldrh	r3, [r3, #6]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	889b      	ldrh	r3, [r3, #4]
 8000a6e:	fb03 f302 	mul.w	r3, r3, r2
 8000a72:	0fda      	lsrs	r2, r3, #31
 8000a74:	4413      	add	r3, r2
 8000a76:	105b      	asrs	r3, r3, #1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	68f8      	ldr	r0, [r7, #12]
 8000a7c:	f7ff fe06 	bl	800068c <LCDWriteNData>
					LCDWriteData(*pusFrameBuf);
					pusFrameBuf++;
			}
	}*/
	//Send Load Img End Command
	IT8951LoadImgEnd();
 8000a80:	f7ff ff77 	bl	8000972 <IT8951LoadImgEnd>
}
 8000a84:	bf00      	nop
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <IT8951DisplayArea>:

//-----------------------------------------------------------
//Display functions 3---Application for Display panel Area
//-----------------------------------------------------------
void IT8951DisplayArea(uint16_t usX, uint16_t usY, uint16_t usW, uint16_t usH, uint16_t usDpyMode)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4604      	mov	r4, r0
 8000a94:	4608      	mov	r0, r1
 8000a96:	4611      	mov	r1, r2
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4623      	mov	r3, r4
 8000a9c:	80fb      	strh	r3, [r7, #6]
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	80bb      	strh	r3, [r7, #4]
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	807b      	strh	r3, [r7, #2]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	803b      	strh	r3, [r7, #0]
	//Send I80 Display Command (User defined command of IT8951)
	LCDWriteCmdCode(USDEF_I80_CMD_DPY_AREA); //0x0034
 8000aaa:	2034      	movs	r0, #52	; 0x34
 8000aac:	f7ff fd92 	bl	80005d4 <LCDWriteCmdCode>
	//Write arguments
	LCDWriteData(usX);
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fdbc 	bl	8000630 <LCDWriteData>
	LCDWriteData(usY);
 8000ab8:	88bb      	ldrh	r3, [r7, #4]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fdb8 	bl	8000630 <LCDWriteData>
	LCDWriteData(usW);
 8000ac0:	887b      	ldrh	r3, [r7, #2]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fdb4 	bl	8000630 <LCDWriteData>
	LCDWriteData(usH);
 8000ac8:	883b      	ldrh	r3, [r7, #0]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fdb0 	bl	8000630 <LCDWriteData>
	LCDWriteData(usDpyMode);
 8000ad0:	8b3b      	ldrh	r3, [r7, #24]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fdac 	bl	8000630 <LCDWriteData>
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd90      	pop	{r4, r7, pc}

08000ae0 <IT8951_Init>:

//-----------------------------------------------------------
//Test function 1---Software Initial
//-----------------------------------------------------------
uint8_t IT8951_Init()
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	//bcm2835_gpio_fsel(CS, BCM2835_GPIO_FSEL_OUTP);
	//bcm2835_gpio_fsel(HRDY, BCM2835_GPIO_FSEL_INPT);
	//bcm2835_gpio_fsel(RESET, BCM2835_GPIO_FSEL_OUTP);

	//bcm2835_gpio_write(CS, HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aec:	f001 fd84 	bl	80025f8 <HAL_GPIO_WritePin>

	printf("****** IT8951 ******\n");
 8000af0:	4812      	ldr	r0, [pc, #72]	; (8000b3c <IT8951_Init+0x5c>)
 8000af2:	f005 fc87 	bl	8006404 <puts>

	//bcm2835_gpio_write(RESET, LOW);
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2110      	movs	r1, #16
 8000afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afe:	f001 fd7b 	bl	80025f8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000b02:	2064      	movs	r0, #100	; 0x64
 8000b04:	f001 f8e0 	bl	8001cc8 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2110      	movs	r1, #16
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b10:	f001 fd72 	bl	80025f8 <HAL_GPIO_WritePin>
	//bcm2835_gpio_write(RESET, HIGH);

	//Get Device Info
	GetIT8951SystemInfo(&gstI80DevInfo);
 8000b14:	480a      	ldr	r0, [pc, #40]	; (8000b40 <IT8951_Init+0x60>)
 8000b16:	f7ff ff33 	bl	8000980 <GetIT8951SystemInfo>
//	{
//		perror("malloc error!\n");
//		return 1;
//	}

 	gulImgBufAddr = gstI80DevInfo.usImgBufAddrL | (gstI80DevInfo.usImgBufAddrH << 16);
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <IT8951_Init+0x60>)
 8000b1c:	889b      	ldrh	r3, [r3, #4]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <IT8951_Init+0x60>)
 8000b22:	88db      	ldrh	r3, [r3, #6]
 8000b24:	041b      	lsls	r3, r3, #16
 8000b26:	4313      	orrs	r3, r2
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <IT8951_Init+0x64>)
 8000b2c:	601a      	str	r2, [r3, #0]

 	//Set to Enable I80 Packed mode
 	IT8951WriteReg(I80CPCR, 0x0001);
 8000b2e:	2101      	movs	r1, #1
 8000b30:	2004      	movs	r0, #4
 8000b32:	f7ff feda 	bl	80008ea <IT8951WriteReg>

	return 0;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	08007220 	.word	0x08007220
 8000b40:	200000a0 	.word	0x200000a0
 8000b44:	200000c8 	.word	0x200000c8

08000b48 <EpdDriverLoadTemplate>:



extern const unsigned char Kalender[];
void EpdDriverLoadTemplate()
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af02      	add	r7, sp, #8
	IT8951LdImgInfo stLdImgInfo;
	IT8951AreaImgInfo stAreaImgInfo;
	IT8951WaitForDisplayReady();
 8000b4e:	f7ff ff6c 	bl	8000a2a <IT8951WaitForDisplayReady>

	//Setting Load image information
	stLdImgInfo.ulStartFBAddr    = (uint32_t)Kalender;
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <EpdDriverLoadTemplate+0x60>)
 8000b54:	613b      	str	r3, [r7, #16]
	stLdImgInfo.usEndianType     = IT8951_LDIMG_L_ENDIAN;
 8000b56:	2300      	movs	r3, #0
 8000b58:	813b      	strh	r3, [r7, #8]
	stLdImgInfo.usPixelFormat    = IT8951_4BPP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	817b      	strh	r3, [r7, #10]
	stLdImgInfo.usRotate         = IT8951_ROTATE_0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	81bb      	strh	r3, [r7, #12]
	stLdImgInfo.ulImgBufBaseAddr = gulImgBufAddr;
 8000b62:	4b12      	ldr	r3, [pc, #72]	; (8000bac <EpdDriverLoadTemplate+0x64>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	617b      	str	r3, [r7, #20]
	//Set Load Area
	stAreaImgInfo.usX      = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	803b      	strh	r3, [r7, #0]
	stAreaImgInfo.usY      = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	807b      	strh	r3, [r7, #2]
	stAreaImgInfo.usWidth  = gstI80DevInfo.usPanelW;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <EpdDriverLoadTemplate+0x68>)
 8000b72:	881b      	ldrh	r3, [r3, #0]
 8000b74:	80bb      	strh	r3, [r7, #4]
 	stAreaImgInfo.usHeight = gstI80DevInfo.usPanelH;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <EpdDriverLoadTemplate+0x68>)
 8000b78:	885b      	ldrh	r3, [r3, #2]
 8000b7a:	80fb      	strh	r3, [r7, #6]

	//Load Image from Host to IT8951 Image Buffer
	IT8951HostAreaPackedPixelWrite(&stLdImgInfo, &stAreaImgInfo);//Display function 2
 8000b7c:	463a      	mov	r2, r7
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	4611      	mov	r1, r2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff5c 	bl	8000a42 <IT8951HostAreaPackedPixelWrite>
	//Display Area ?V (x,y,w,h) with mode 2 for fast gray clear mode - depends on current waveform
	IT8951DisplayArea(0,0, gstI80DevInfo.usPanelW, gstI80DevInfo.usPanelH, 2);
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <EpdDriverLoadTemplate+0x68>)
 8000b8c:	881a      	ldrh	r2, [r3, #0]
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <EpdDriverLoadTemplate+0x68>)
 8000b90:	8859      	ldrh	r1, [r3, #2]
 8000b92:	2302      	movs	r3, #2
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	460b      	mov	r3, r1
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f7ff ff76 	bl	8000a8c <IT8951DisplayArea>
	//IT8951Sleep();
}
 8000ba0:	bf00      	nop
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	08007278 	.word	0x08007278
 8000bac:	200000c8 	.word	0x200000c8
 8000bb0:	200000a0 	.word	0x200000a0

08000bb4 <EpdDriverDrawBox>:


void EpdDriverDrawBox(uint8_t* buffer, uint16_t usX, uint16_t usY, uint16_t usWidth, uint16_t usHeight)
{
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b08d      	sub	sp, #52	; 0x34
 8000bb8:	af02      	add	r7, sp, #8
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	817b      	strh	r3, [r7, #10]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	813b      	strh	r3, [r7, #8]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	80fb      	strh	r3, [r7, #6]
	IT8951LdImgInfo stLdImgInfo;
	IT8951AreaImgInfo stAreaImgInfo;
	IT8951WaitForDisplayReady();
 8000bce:	f7ff ff2c 	bl	8000a2a <IT8951WaitForDisplayReady>

	//Setting Load image information
	stLdImgInfo.ulStartFBAddr    = (uint32_t)buffer;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	623b      	str	r3, [r7, #32]
	stLdImgInfo.usEndianType     = IT8951_LDIMG_L_ENDIAN;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	833b      	strh	r3, [r7, #24]
	stLdImgInfo.usPixelFormat    = IT8951_8BPP;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	837b      	strh	r3, [r7, #26]
	stLdImgInfo.usRotate         = IT8951_ROTATE_0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	83bb      	strh	r3, [r7, #28]
	stLdImgInfo.ulImgBufBaseAddr = gulImgBufAddr;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <EpdDriverDrawBox+0x70>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
	//Set Load Area
	stAreaImgInfo.usX      = usX;
 8000be8:	897b      	ldrh	r3, [r7, #10]
 8000bea:	823b      	strh	r3, [r7, #16]
	stAreaImgInfo.usY      = usY;
 8000bec:	893b      	ldrh	r3, [r7, #8]
 8000bee:	827b      	strh	r3, [r7, #18]
	stAreaImgInfo.usWidth  = usWidth;
 8000bf0:	88fb      	ldrh	r3, [r7, #6]
 8000bf2:	82bb      	strh	r3, [r7, #20]
 	stAreaImgInfo.usHeight = usHeight;
 8000bf4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000bf6:	82fb      	strh	r3, [r7, #22]

	//Load Image from Host to IT8951 Image Buffer
	IT8951HostAreaPackedPixelWrite(&stLdImgInfo, &stAreaImgInfo);//Display function 2
 8000bf8:	f107 0210 	add.w	r2, r7, #16
 8000bfc:	f107 0318 	add.w	r3, r7, #24
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ff1d 	bl	8000a42 <IT8951HostAreaPackedPixelWrite>
	//Display Area ?V (x,y,w,h) with mode 2 for fast gray clear mode - depends on current waveform
	IT8951DisplayArea(stAreaImgInfo.usX,stAreaImgInfo.usY, stAreaImgInfo.usWidth, stAreaImgInfo.usHeight, 2);
 8000c08:	8a38      	ldrh	r0, [r7, #16]
 8000c0a:	8a79      	ldrh	r1, [r7, #18]
 8000c0c:	8aba      	ldrh	r2, [r7, #20]
 8000c0e:	8afc      	ldrh	r4, [r7, #22]
 8000c10:	2302      	movs	r3, #2
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	4623      	mov	r3, r4
 8000c16:	f7ff ff39 	bl	8000a8c <IT8951DisplayArea>
	//IT8951Sleep();
}
 8000c1a:	bf00      	nop
 8000c1c:	372c      	adds	r7, #44	; 0x2c
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd90      	pop	{r4, r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200000c8 	.word	0x200000c8

08000c28 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(uint8_t *image, uint16_t Width, uint16_t Height, uint16_t Rotate, uint16_t Color)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	4608      	mov	r0, r1
 8000c32:	4611      	mov	r1, r2
 8000c34:	461a      	mov	r2, r3
 8000c36:	4603      	mov	r3, r0
 8000c38:	817b      	strh	r3, [r7, #10]
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	813b      	strh	r3, [r7, #8]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <Paint_NewImage+0x84>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8000c48:	4a18      	ldr	r2, [pc, #96]	; (8000cac <Paint_NewImage+0x84>)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 8000c4e:	4a17      	ldr	r2, [pc, #92]	; (8000cac <Paint_NewImage+0x84>)
 8000c50:	897b      	ldrh	r3, [r7, #10]
 8000c52:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000c54:	4a15      	ldr	r2, [pc, #84]	; (8000cac <Paint_NewImage+0x84>)
 8000c56:	893b      	ldrh	r3, [r7, #8]
 8000c58:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8000c5a:	4a14      	ldr	r2, [pc, #80]	; (8000cac <Paint_NewImage+0x84>)
 8000c5c:	8b3b      	ldrh	r3, [r7, #24]
 8000c5e:	8193      	strh	r3, [r2, #12]
    //Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
    Paint.WidthByte = Width;
 8000c60:	4a12      	ldr	r2, [pc, #72]	; (8000cac <Paint_NewImage+0x84>)
 8000c62:	897b      	ldrh	r3, [r7, #10]
 8000c64:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8000c66:	4a11      	ldr	r2, [pc, #68]	; (8000cac <Paint_NewImage+0x84>)
 8000c68:	893b      	ldrh	r3, [r7, #8]
 8000c6a:	8293      	strh	r3, [r2, #20]
    //printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
    //printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 8000c6c:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <Paint_NewImage+0x84>)
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <Paint_NewImage+0x84>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000c78:	88fb      	ldrh	r3, [r7, #6]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d002      	beq.n	8000c84 <Paint_NewImage+0x5c>
 8000c7e:	88fb      	ldrh	r3, [r7, #6]
 8000c80:	2bb4      	cmp	r3, #180	; 0xb4
 8000c82:	d106      	bne.n	8000c92 <Paint_NewImage+0x6a>
        Paint.Width = Width;
 8000c84:	4a09      	ldr	r2, [pc, #36]	; (8000cac <Paint_NewImage+0x84>)
 8000c86:	897b      	ldrh	r3, [r7, #10]
 8000c88:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000c8a:	4a08      	ldr	r2, [pc, #32]	; (8000cac <Paint_NewImage+0x84>)
 8000c8c:	893b      	ldrh	r3, [r7, #8]
 8000c8e:	80d3      	strh	r3, [r2, #6]
 8000c90:	e005      	b.n	8000c9e <Paint_NewImage+0x76>
    } else {
        Paint.Width = Height;
 8000c92:	4a06      	ldr	r2, [pc, #24]	; (8000cac <Paint_NewImage+0x84>)
 8000c94:	893b      	ldrh	r3, [r7, #8]
 8000c96:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <Paint_NewImage+0x84>)
 8000c9a:	897b      	ldrh	r3, [r7, #10]
 8000c9c:	80d3      	strh	r3, [r2, #6]
    }
}
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	200000cc 	.word	0x200000cc

08000cb0 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	80fb      	strh	r3, [r7, #6]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	80bb      	strh	r3, [r7, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000cc2:	4b50      	ldr	r3, [pc, #320]	; (8000e04 <Paint_SetPixel+0x154>)
 8000cc4:	889b      	ldrh	r3, [r3, #4]
 8000cc6:	88fa      	ldrh	r2, [r7, #6]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	f200 8091 	bhi.w	8000df0 <Paint_SetPixel+0x140>
 8000cce:	4b4d      	ldr	r3, [pc, #308]	; (8000e04 <Paint_SetPixel+0x154>)
 8000cd0:	88db      	ldrh	r3, [r3, #6]
 8000cd2:	88ba      	ldrh	r2, [r7, #4]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	f200 808b 	bhi.w	8000df0 <Paint_SetPixel+0x140>
//        Debug("Exceeding display boundaries\r\n");
        return;
    }      
    uint16_t X, Y;

    switch(Paint.Rotate) {
 8000cda:	4b4a      	ldr	r3, [pc, #296]	; (8000e04 <Paint_SetPixel+0x154>)
 8000cdc:	89db      	ldrh	r3, [r3, #14]
 8000cde:	2b5a      	cmp	r3, #90	; 0x5a
 8000ce0:	d00f      	beq.n	8000d02 <Paint_SetPixel+0x52>
 8000ce2:	2b5a      	cmp	r3, #90	; 0x5a
 8000ce4:	dc02      	bgt.n	8000cec <Paint_SetPixel+0x3c>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d006      	beq.n	8000cf8 <Paint_SetPixel+0x48>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
		
    default:
        return;
 8000cea:	e086      	b.n	8000dfa <Paint_SetPixel+0x14a>
    switch(Paint.Rotate) {
 8000cec:	2bb4      	cmp	r3, #180	; 0xb4
 8000cee:	d012      	beq.n	8000d16 <Paint_SetPixel+0x66>
 8000cf0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000cf4:	d01e      	beq.n	8000d34 <Paint_SetPixel+0x84>
        return;
 8000cf6:	e080      	b.n	8000dfa <Paint_SetPixel+0x14a>
        X = Xpoint;
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 8000cfc:	88bb      	ldrh	r3, [r7, #4]
 8000cfe:	81bb      	strh	r3, [r7, #12]
        break;
 8000d00:	e022      	b.n	8000d48 <Paint_SetPixel+0x98>
        X = Paint.WidthMemory - Ypoint - 1;
 8000d02:	4b40      	ldr	r3, [pc, #256]	; (8000e04 <Paint_SetPixel+0x154>)
 8000d04:	891a      	ldrh	r2, [r3, #8]
 8000d06:	88bb      	ldrh	r3, [r7, #4]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8000d10:	88fb      	ldrh	r3, [r7, #6]
 8000d12:	81bb      	strh	r3, [r7, #12]
        break;
 8000d14:	e018      	b.n	8000d48 <Paint_SetPixel+0x98>
        X = Paint.WidthMemory - Xpoint - 1;
 8000d16:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <Paint_SetPixel+0x154>)
 8000d18:	891a      	ldrh	r2, [r3, #8]
 8000d1a:	88fb      	ldrh	r3, [r7, #6]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	3b01      	subs	r3, #1
 8000d22:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8000d24:	4b37      	ldr	r3, [pc, #220]	; (8000e04 <Paint_SetPixel+0x154>)
 8000d26:	895a      	ldrh	r2, [r3, #10]
 8000d28:	88bb      	ldrh	r3, [r7, #4]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	81bb      	strh	r3, [r7, #12]
        break;
 8000d32:	e009      	b.n	8000d48 <Paint_SetPixel+0x98>
        X = Ypoint;
 8000d34:	88bb      	ldrh	r3, [r7, #4]
 8000d36:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8000d38:	4b32      	ldr	r3, [pc, #200]	; (8000e04 <Paint_SetPixel+0x154>)
 8000d3a:	895a      	ldrh	r2, [r3, #10]
 8000d3c:	88fb      	ldrh	r3, [r7, #6]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	3b01      	subs	r3, #1
 8000d44:	81bb      	strh	r3, [r7, #12]
        break;
 8000d46:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8000d48:	4b2e      	ldr	r3, [pc, #184]	; (8000e04 <Paint_SetPixel+0x154>)
 8000d4a:	8a1b      	ldrh	r3, [r3, #16]
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	d851      	bhi.n	8000df4 <Paint_SetPixel+0x144>
 8000d50:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <Paint_SetPixel+0xa8>)
 8000d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d56:	bf00      	nop
 8000d58:	08000da7 	.word	0x08000da7
 8000d5c:	08000d69 	.word	0x08000d69
 8000d60:	08000d79 	.word	0x08000d79
 8000d64:	08000d89 	.word	0x08000d89
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8000d68:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <Paint_SetPixel+0x154>)
 8000d6a:	891a      	ldrh	r2, [r3, #8]
 8000d6c:	89fb      	ldrh	r3, [r7, #14]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	3b01      	subs	r3, #1
 8000d74:	81fb      	strh	r3, [r7, #14]
        break;
 8000d76:	e017      	b.n	8000da8 <Paint_SetPixel+0xf8>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8000d78:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <Paint_SetPixel+0x154>)
 8000d7a:	895a      	ldrh	r2, [r3, #10]
 8000d7c:	89bb      	ldrh	r3, [r7, #12]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	3b01      	subs	r3, #1
 8000d84:	81bb      	strh	r3, [r7, #12]
        break;
 8000d86:	e00f      	b.n	8000da8 <Paint_SetPixel+0xf8>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8000d88:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <Paint_SetPixel+0x154>)
 8000d8a:	891a      	ldrh	r2, [r3, #8]
 8000d8c:	89fb      	ldrh	r3, [r7, #14]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	3b01      	subs	r3, #1
 8000d94:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8000d96:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <Paint_SetPixel+0x154>)
 8000d98:	895a      	ldrh	r2, [r3, #10]
 8000d9a:	89bb      	ldrh	r3, [r7, #12]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	3b01      	subs	r3, #1
 8000da2:	81bb      	strh	r3, [r7, #12]
        break;
 8000da4:	e000      	b.n	8000da8 <Paint_SetPixel+0xf8>
        break;
 8000da6:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <Paint_SetPixel+0x154>)
 8000daa:	891b      	ldrh	r3, [r3, #8]
 8000dac:	89fa      	ldrh	r2, [r7, #14]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d822      	bhi.n	8000df8 <Paint_SetPixel+0x148>
 8000db2:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <Paint_SetPixel+0x154>)
 8000db4:	895b      	ldrh	r3, [r3, #10]
 8000db6:	89ba      	ldrh	r2, [r7, #12]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d81d      	bhi.n	8000df8 <Paint_SetPixel+0x148>
//        Debug("Exceeding display boundaries\r\n");
        return;
    }
    
   // uint32_t Addr = X / 8 + Y * Paint.WidthByte;
    uint32_t Addr = X + Y * Paint.WidthByte;
 8000dbc:	89fa      	ldrh	r2, [r7, #14]
 8000dbe:	89bb      	ldrh	r3, [r7, #12]
 8000dc0:	4910      	ldr	r1, [pc, #64]	; (8000e04 <Paint_SetPixel+0x154>)
 8000dc2:	8a49      	ldrh	r1, [r1, #18]
 8000dc4:	fb01 f303 	mul.w	r3, r1, r3
 8000dc8:	4413      	add	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
   // uint8_t Rdata = Paint.Image[Addr];
    if(Color == BLACK)
 8000dcc:	887b      	ldrh	r3, [r7, #2]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d106      	bne.n	8000de0 <Paint_SetPixel+0x130>
        //Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
    	Paint.Image[Addr] = BLACK;
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <Paint_SetPixel+0x154>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	4413      	add	r3, r2
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
 8000dde:	e00c      	b.n	8000dfa <Paint_SetPixel+0x14a>
    else
        //Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
    	Paint.Image[Addr] = Color;
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <Paint_SetPixel+0x154>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	4413      	add	r3, r2
 8000de8:	887a      	ldrh	r2, [r7, #2]
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	701a      	strb	r2, [r3, #0]
 8000dee:	e004      	b.n	8000dfa <Paint_SetPixel+0x14a>
        return;
 8000df0:	bf00      	nop
 8000df2:	e002      	b.n	8000dfa <Paint_SetPixel+0x14a>
        return;
 8000df4:	bf00      	nop
 8000df6:	e000      	b.n	8000dfa <Paint_SetPixel+0x14a>
        return;
 8000df8:	bf00      	nop
}
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	200000cc 	.word	0x200000cc

08000e08 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(uint8_t Color)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
    for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000e12:	2300      	movs	r3, #0
 8000e14:	81fb      	strh	r3, [r7, #14]
 8000e16:	e01b      	b.n	8000e50 <Paint_Clear+0x48>
        for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000e18:	2300      	movs	r3, #0
 8000e1a:	81bb      	strh	r3, [r7, #12]
 8000e1c:	e010      	b.n	8000e40 <Paint_Clear+0x38>
            uint32_t Addr = X + Y*Paint.WidthByte;
 8000e1e:	89ba      	ldrh	r2, [r7, #12]
 8000e20:	89fb      	ldrh	r3, [r7, #14]
 8000e22:	4911      	ldr	r1, [pc, #68]	; (8000e68 <Paint_Clear+0x60>)
 8000e24:	8a49      	ldrh	r1, [r1, #18]
 8000e26:	fb01 f303 	mul.w	r3, r1, r3
 8000e2a:	4413      	add	r3, r2
 8000e2c:	60bb      	str	r3, [r7, #8]
            Paint.Image[Addr] = Color;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <Paint_Clear+0x60>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	4413      	add	r3, r2
 8000e36:	79fa      	ldrb	r2, [r7, #7]
 8000e38:	701a      	strb	r2, [r3, #0]
        for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000e3a:	89bb      	ldrh	r3, [r7, #12]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	81bb      	strh	r3, [r7, #12]
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <Paint_Clear+0x60>)
 8000e42:	8a5b      	ldrh	r3, [r3, #18]
 8000e44:	89ba      	ldrh	r2, [r7, #12]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d3e9      	bcc.n	8000e1e <Paint_Clear+0x16>
    for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000e4a:	89fb      	ldrh	r3, [r7, #14]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	81fb      	strh	r3, [r7, #14]
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <Paint_Clear+0x60>)
 8000e52:	8a9b      	ldrh	r3, [r3, #20]
 8000e54:	89fa      	ldrh	r2, [r7, #14]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d3de      	bcc.n	8000e18 <Paint_Clear+0x10>
        }
    }
}
 8000e5a:	bf00      	nop
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	200000cc 	.word	0x200000cc

08000e6c <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(uint16_t Xpoint, uint16_t Ypoint, const char Acsii_Char,
                    sFONT* Font, uint8_t Color_Background, uint8_t Color_Foreground)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	4603      	mov	r3, r0
 8000e76:	81fb      	strh	r3, [r7, #14]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	81bb      	strh	r3, [r7, #12]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	72fb      	strb	r3, [r7, #11]
    uint16_t Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000e80:	4b4f      	ldr	r3, [pc, #316]	; (8000fc0 <Paint_DrawChar+0x154>)
 8000e82:	889b      	ldrh	r3, [r3, #4]
 8000e84:	89fa      	ldrh	r2, [r7, #14]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	f200 8096 	bhi.w	8000fb8 <Paint_DrawChar+0x14c>
 8000e8c:	4b4c      	ldr	r3, [pc, #304]	; (8000fc0 <Paint_DrawChar+0x154>)
 8000e8e:	88db      	ldrh	r3, [r3, #6]
 8000e90:	89ba      	ldrh	r2, [r7, #12]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	f200 8090 	bhi.w	8000fb8 <Paint_DrawChar+0x14c>
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8000e98:	7afb      	ldrb	r3, [r7, #11]
 8000e9a:	3b20      	subs	r3, #32
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	88d2      	ldrh	r2, [r2, #6]
 8000ea0:	fb02 f303 	mul.w	r3, r2, r3
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	8892      	ldrh	r2, [r2, #4]
 8000ea8:	08d2      	lsrs	r2, r2, #3
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	4611      	mov	r1, r2
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	8892      	ldrh	r2, [r2, #4]
 8000eb2:	f002 0207 	and.w	r2, r2, #7
 8000eb6:	b292      	uxth	r2, r2
 8000eb8:	2a00      	cmp	r2, #0
 8000eba:	bf14      	ite	ne
 8000ebc:	2201      	movne	r2, #1
 8000ebe:	2200      	moveq	r2, #0
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	440a      	add	r2, r1
 8000ec4:	fb02 f303 	mul.w	r3, r2, r3
 8000ec8:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	83fb      	strh	r3, [r7, #30]
 8000ed8:	e068      	b.n	8000fac <Paint_DrawChar+0x140>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000eda:	2300      	movs	r3, #0
 8000edc:	83bb      	strh	r3, [r7, #28]
 8000ede:	e053      	b.n	8000f88 <Paint_DrawChar+0x11c>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8000ee0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ee4:	2bff      	cmp	r3, #255	; 0xff
 8000ee6:	d11a      	bne.n	8000f1e <Paint_DrawChar+0xb2>
                //if (*ptr & (0x80 >> (Column % 8)))
                if (*ptr & (0x80 >> (Column % 8)))
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	8bbb      	ldrh	r3, [r7, #28]
 8000ef0:	f003 0307 	and.w	r3, r3, #7
 8000ef4:	2280      	movs	r2, #128	; 0x80
 8000ef6:	fa42 f303 	asr.w	r3, r2, r3
 8000efa:	400b      	ands	r3, r1
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d037      	beq.n	8000f70 <Paint_DrawChar+0x104>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000f00:	89fa      	ldrh	r2, [r7, #14]
 8000f02:	8bbb      	ldrh	r3, [r7, #28]
 8000f04:	4413      	add	r3, r2
 8000f06:	b298      	uxth	r0, r3
 8000f08:	89ba      	ldrh	r2, [r7, #12]
 8000f0a:	8bfb      	ldrh	r3, [r7, #30]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000f14:	b292      	uxth	r2, r2
 8000f16:	4619      	mov	r1, r3
 8000f18:	f7ff feca 	bl	8000cb0 <Paint_SetPixel>
 8000f1c:	e028      	b.n	8000f70 <Paint_DrawChar+0x104>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column%8))) {
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	4619      	mov	r1, r3
 8000f24:	8bbb      	ldrh	r3, [r7, #28]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	2280      	movs	r2, #128	; 0x80
 8000f2c:	fa42 f303 	asr.w	r3, r2, r3
 8000f30:	400b      	ands	r3, r1
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00e      	beq.n	8000f54 <Paint_DrawChar+0xe8>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000f36:	89fa      	ldrh	r2, [r7, #14]
 8000f38:	8bbb      	ldrh	r3, [r7, #28]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	b298      	uxth	r0, r3
 8000f3e:	89ba      	ldrh	r2, [r7, #12]
 8000f40:	8bfb      	ldrh	r3, [r7, #30]
 8000f42:	4413      	add	r3, r2
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000f4a:	b292      	uxth	r2, r2
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f7ff feaf 	bl	8000cb0 <Paint_SetPixel>
 8000f52:	e00d      	b.n	8000f70 <Paint_DrawChar+0x104>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8000f54:	89fa      	ldrh	r2, [r7, #14]
 8000f56:	8bbb      	ldrh	r3, [r7, #28]
 8000f58:	4413      	add	r3, r2
 8000f5a:	b298      	uxth	r0, r3
 8000f5c:	89ba      	ldrh	r2, [r7, #12]
 8000f5e:	8bfb      	ldrh	r3, [r7, #30]
 8000f60:	4413      	add	r3, r2
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000f68:	b292      	uxth	r2, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f7ff fea0 	bl	8000cb0 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8000f70:	8bbb      	ldrh	r3, [r7, #28]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	2b07      	cmp	r3, #7
 8000f7a:	d102      	bne.n	8000f82 <Paint_DrawChar+0x116>
                ptr++;
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000f82:	8bbb      	ldrh	r3, [r7, #28]
 8000f84:	3301      	adds	r3, #1
 8000f86:	83bb      	strh	r3, [r7, #28]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	889b      	ldrh	r3, [r3, #4]
 8000f8c:	8bba      	ldrh	r2, [r7, #28]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d3a6      	bcc.n	8000ee0 <Paint_DrawChar+0x74>
        }// Write a line
        if (Font->Width % 8 != 0)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	889b      	ldrh	r3, [r3, #4]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d002      	beq.n	8000fa6 <Paint_DrawChar+0x13a>
            ptr++;
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000fa6:	8bfb      	ldrh	r3, [r7, #30]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	83fb      	strh	r3, [r7, #30]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	88db      	ldrh	r3, [r3, #6]
 8000fb0:	8bfa      	ldrh	r2, [r7, #30]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d391      	bcc.n	8000eda <Paint_DrawChar+0x6e>
 8000fb6:	e000      	b.n	8000fba <Paint_DrawChar+0x14e>
        return;
 8000fb8:	bf00      	nop
    }// Write all
}
 8000fba:	3720      	adds	r7, #32
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200000cc 	.word	0x200000cc

08000fc4 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(uint16_t Xstart, uint16_t Ystart, const char * pString,
                         sFONT* Font, uint8_t Color_Background, uint8_t Color_Foreground )
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	60ba      	str	r2, [r7, #8]
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	4603      	mov	r3, r0
 8000fd0:	81fb      	strh	r3, [r7, #14]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	81bb      	strh	r3, [r7, #12]
    uint16_t Xpoint = Xstart;
 8000fd6:	89fb      	ldrh	r3, [r7, #14]
 8000fd8:	82fb      	strh	r3, [r7, #22]
    uint16_t Ypoint = Ystart;
 8000fda:	89bb      	ldrh	r3, [r7, #12]
 8000fdc:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8000fde:	4b22      	ldr	r3, [pc, #136]	; (8001068 <Paint_DrawString_EN+0xa4>)
 8000fe0:	889b      	ldrh	r3, [r3, #4]
 8000fe2:	89fa      	ldrh	r2, [r7, #14]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d83a      	bhi.n	800105e <Paint_DrawString_EN+0x9a>
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <Paint_DrawString_EN+0xa4>)
 8000fea:	88db      	ldrh	r3, [r3, #6]
 8000fec:	89ba      	ldrh	r2, [r7, #12]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d835      	bhi.n	800105e <Paint_DrawString_EN+0x9a>
//        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
        return;
    }

    while (* pString != '\0') {
 8000ff2:	e02f      	b.n	8001054 <Paint_DrawString_EN+0x90>
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8000ff4:	8afb      	ldrh	r3, [r7, #22]
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	8892      	ldrh	r2, [r2, #4]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a1a      	ldr	r2, [pc, #104]	; (8001068 <Paint_DrawString_EN+0xa4>)
 8000ffe:	8892      	ldrh	r2, [r2, #4]
 8001000:	4293      	cmp	r3, r2
 8001002:	dd06      	ble.n	8001012 <Paint_DrawString_EN+0x4e>
            Xpoint = Xstart;
 8001004:	89fb      	ldrh	r3, [r7, #14]
 8001006:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	88da      	ldrh	r2, [r3, #6]
 800100c:	8abb      	ldrh	r3, [r7, #20]
 800100e:	4413      	add	r3, r2
 8001010:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8001012:	8abb      	ldrh	r3, [r7, #20]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	88d2      	ldrh	r2, [r2, #6]
 8001018:	4413      	add	r3, r2
 800101a:	4a13      	ldr	r2, [pc, #76]	; (8001068 <Paint_DrawString_EN+0xa4>)
 800101c:	88d2      	ldrh	r2, [r2, #6]
 800101e:	4293      	cmp	r3, r2
 8001020:	dd03      	ble.n	800102a <Paint_DrawString_EN+0x66>
            Xpoint = Xstart;
 8001022:	89fb      	ldrh	r3, [r7, #14]
 8001024:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8001026:	89bb      	ldrh	r3, [r7, #12]
 8001028:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	781a      	ldrb	r2, [r3, #0]
 800102e:	8ab9      	ldrh	r1, [r7, #20]
 8001030:	8af8      	ldrh	r0, [r7, #22]
 8001032:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	f897 3020 	ldrb.w	r3, [r7, #32]
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f7ff ff14 	bl	8000e6c <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	3301      	adds	r3, #1
 8001048:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	889a      	ldrh	r2, [r3, #4]
 800104e:	8afb      	ldrh	r3, [r7, #22]
 8001050:	4413      	add	r3, r2
 8001052:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1cb      	bne.n	8000ff4 <Paint_DrawString_EN+0x30>
 800105c:	e000      	b.n	8001060 <Paint_DrawString_EN+0x9c>
        return;
 800105e:	bf00      	nop
    }
}
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200000cc 	.word	0x200000cc

0800106c <DrawCalenderField>:




void DrawCalenderField(uint8_t place, char* fach, char* dozent)
{
 800106c:	b5b0      	push	{r4, r5, r7, lr}
 800106e:	b08c      	sub	sp, #48	; 0x30
 8001070:	af02      	add	r7, sp, #8
 8001072:	4603      	mov	r3, r0
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	73fb      	strb	r3, [r7, #15]
 800107a:	466b      	mov	r3, sp
 800107c:	461d      	mov	r5, r3
	CalCellInfo cal;
	cal.imBufsize= 17336;
 800107e:	f244 33b8 	movw	r3, #17336	; 0x43b8
 8001082:	61fb      	str	r3, [r7, #28]
	uint8_t frameBuf[cal.imBufsize];
 8001084:	69f8      	ldr	r0, [r7, #28]
 8001086:	4603      	mov	r3, r0
 8001088:	3b01      	subs	r3, #1
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
 800108c:	4601      	mov	r1, r0
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	f04f 0400 	mov.w	r4, #0
 800109a:	00d4      	lsls	r4, r2, #3
 800109c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80010a0:	00cb      	lsls	r3, r1, #3
 80010a2:	4601      	mov	r1, r0
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	f04f 0400 	mov.w	r4, #0
 80010b0:	00d4      	lsls	r4, r2, #3
 80010b2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80010b6:	00cb      	lsls	r3, r1, #3
 80010b8:	1dc3      	adds	r3, r0, #7
 80010ba:	08db      	lsrs	r3, r3, #3
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	ebad 0d03 	sub.w	sp, sp, r3
 80010c2:	ab02      	add	r3, sp, #8
 80010c4:	3300      	adds	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
	cal.place = place;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	743b      	strb	r3, [r7, #16]
	if(cal.place%5!=0)
 80010cc:	7c3a      	ldrb	r2, [r7, #16]
 80010ce:	4b4b      	ldr	r3, [pc, #300]	; (80011fc <DrawCalenderField+0x190>)
 80010d0:	fba3 1302 	umull	r1, r3, r3, r2
 80010d4:	0899      	lsrs	r1, r3, #2
 80010d6:	460b      	mov	r3, r1
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	440b      	add	r3, r1
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d019      	beq.n	8001118 <DrawCalenderField+0xac>
		cal.posX = 202 + (cal.place%5-1) * 200;
 80010e4:	7c3a      	ldrb	r2, [r7, #16]
 80010e6:	4b45      	ldr	r3, [pc, #276]	; (80011fc <DrawCalenderField+0x190>)
 80010e8:	fba3 1302 	umull	r1, r3, r3, r2
 80010ec:	0899      	lsrs	r1, r3, #2
 80010ee:	460b      	mov	r3, r1
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	3b01      	subs	r3, #1
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	461a      	mov	r2, r3
 80010fe:	0092      	lsls	r2, r2, #2
 8001100:	4413      	add	r3, r2
 8001102:	461a      	mov	r2, r3
 8001104:	0091      	lsls	r1, r2, #2
 8001106:	461a      	mov	r2, r3
 8001108:	460b      	mov	r3, r1
 800110a:	4413      	add	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	b29b      	uxth	r3, r3
 8001110:	33ca      	adds	r3, #202	; 0xca
 8001112:	b29b      	uxth	r3, r3
 8001114:	827b      	strh	r3, [r7, #18]
 8001116:	e002      	b.n	800111e <DrawCalenderField+0xb2>
	else
		cal.posX = 1002;
 8001118:	f240 33ea 	movw	r3, #1002	; 0x3ea
 800111c:	827b      	strh	r3, [r7, #18]

	if(cal.place%5!=0)
 800111e:	7c3a      	ldrb	r2, [r7, #16]
 8001120:	4b36      	ldr	r3, [pc, #216]	; (80011fc <DrawCalenderField+0x190>)
 8001122:	fba3 1302 	umull	r1, r3, r3, r2
 8001126:	0899      	lsrs	r1, r3, #2
 8001128:	460b      	mov	r3, r1
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	440b      	add	r3, r1
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d012      	beq.n	800115c <DrawCalenderField+0xf0>
	cal.posY = cal.place/5 *90 +195;
 8001136:	7c3b      	ldrb	r3, [r7, #16]
 8001138:	4a30      	ldr	r2, [pc, #192]	; (80011fc <DrawCalenderField+0x190>)
 800113a:	fba2 2303 	umull	r2, r3, r2, r3
 800113e:	089b      	lsrs	r3, r3, #2
 8001140:	b2db      	uxtb	r3, r3
 8001142:	b29b      	uxth	r3, r3
 8001144:	461a      	mov	r2, r3
 8001146:	0052      	lsls	r2, r2, #1
 8001148:	4413      	add	r3, r2
 800114a:	461a      	mov	r2, r3
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	b29b      	uxth	r3, r3
 8001154:	33c3      	adds	r3, #195	; 0xc3
 8001156:	b29b      	uxth	r3, r3
 8001158:	82bb      	strh	r3, [r7, #20]
 800115a:	e012      	b.n	8001182 <DrawCalenderField+0x116>
	else
		cal.posY = (cal.place/5 - 1) *90 +195;
 800115c:	7c3b      	ldrb	r3, [r7, #16]
 800115e:	4a27      	ldr	r2, [pc, #156]	; (80011fc <DrawCalenderField+0x190>)
 8001160:	fba2 2303 	umull	r2, r3, r2, r3
 8001164:	089b      	lsrs	r3, r3, #2
 8001166:	b2db      	uxtb	r3, r3
 8001168:	3b01      	subs	r3, #1
 800116a:	b29b      	uxth	r3, r3
 800116c:	461a      	mov	r2, r3
 800116e:	0052      	lsls	r2, r2, #1
 8001170:	4413      	add	r3, r2
 8001172:	461a      	mov	r2, r3
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	b29b      	uxth	r3, r3
 800117c:	33c3      	adds	r3, #195	; 0xc3
 800117e:	b29b      	uxth	r3, r3
 8001180:	82bb      	strh	r3, [r7, #20]

	if(cal.place/5%2 != 0)
 8001182:	7c3b      	ldrb	r3, [r7, #16]
 8001184:	4a1d      	ldr	r2, [pc, #116]	; (80011fc <DrawCalenderField+0x190>)
 8001186:	fba2 2303 	umull	r2, r3, r2, r3
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	b2db      	uxtb	r3, r3
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <DrawCalenderField+0x132>
		cal.color = KALBRIGHT;
 8001198:	23e0      	movs	r3, #224	; 0xe0
 800119a:	747b      	strb	r3, [r7, #17]
 800119c:	e001      	b.n	80011a2 <DrawCalenderField+0x136>
	else
		cal.color = KALDARK;
 800119e:	23dd      	movs	r3, #221	; 0xdd
 80011a0:	747b      	strb	r3, [r7, #17]
	Paint_NewImage(frameBuf, 196, 88, 0, 0xff);
 80011a2:	6a38      	ldr	r0, [r7, #32]
 80011a4:	23ff      	movs	r3, #255	; 0xff
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2300      	movs	r3, #0
 80011aa:	2258      	movs	r2, #88	; 0x58
 80011ac:	21c4      	movs	r1, #196	; 0xc4
 80011ae:	f7ff fd3b 	bl	8000c28 <Paint_NewImage>
	Paint_Clear(cal.color);
 80011b2:	7c7b      	ldrb	r3, [r7, #17]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fe27 	bl	8000e08 <Paint_Clear>
	Paint_DrawString_EN(5, 20, fach, &Font24, cal.color, 0x44 );
 80011ba:	7c7b      	ldrb	r3, [r7, #17]
 80011bc:	2244      	movs	r2, #68	; 0x44
 80011be:	9201      	str	r2, [sp, #4]
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <DrawCalenderField+0x194>)
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	2114      	movs	r1, #20
 80011c8:	2005      	movs	r0, #5
 80011ca:	f7ff fefb 	bl	8000fc4 <Paint_DrawString_EN>
	Paint_DrawString_EN(5, 50, dozent, &Font24, cal.color, 0x66 );
 80011ce:	7c7b      	ldrb	r3, [r7, #17]
 80011d0:	2266      	movs	r2, #102	; 0x66
 80011d2:	9201      	str	r2, [sp, #4]
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <DrawCalenderField+0x194>)
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	2132      	movs	r1, #50	; 0x32
 80011dc:	2005      	movs	r0, #5
 80011de:	f7ff fef1 	bl	8000fc4 <Paint_DrawString_EN>
	//EpdDriverDrawBox(frameBuf, 202, 195, 196, 88);
	EpdDriverDrawBox(frameBuf, cal.posX, cal.posY, 196, 88);
 80011e2:	6a38      	ldr	r0, [r7, #32]
 80011e4:	8a79      	ldrh	r1, [r7, #18]
 80011e6:	8aba      	ldrh	r2, [r7, #20]
 80011e8:	2358      	movs	r3, #88	; 0x58
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	23c4      	movs	r3, #196	; 0xc4
 80011ee:	f7ff fce1 	bl	8000bb4 <EpdDriverDrawBox>
 80011f2:	46ad      	mov	sp, r5
}
 80011f4:	bf00      	nop
 80011f6:	3728      	adds	r7, #40	; 0x28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bdb0      	pop	{r4, r5, r7, pc}
 80011fc:	cccccccd 	.word	0xcccccccd
 8001200:	20000000 	.word	0x20000000

08001204 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <MX_DMA_Init+0x60>)
 800120c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800120e:	4a15      	ldr	r2, [pc, #84]	; (8001264 <MX_DMA_Init+0x60>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	6493      	str	r3, [r2, #72]	; 0x48
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <MX_DMA_Init+0x60>)
 8001218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <MX_DMA_Init+0x60>)
 8001224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001226:	4a0f      	ldr	r2, [pc, #60]	; (8001264 <MX_DMA_Init+0x60>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6493      	str	r3, [r2, #72]	; 0x48
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <MX_DMA_Init+0x60>)
 8001230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2100      	movs	r1, #0
 800123e:	200b      	movs	r0, #11
 8001240:	f000 fe3f 	bl	8001ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001244:	200b      	movs	r0, #11
 8001246:	f000 fe58 	bl	8001efa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	200c      	movs	r0, #12
 8001250:	f000 fe37 	bl	8001ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001254:	200c      	movs	r0, #12
 8001256:	f000 fe50 	bl	8001efa <HAL_NVIC_EnableIRQ>

}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000

08001268 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08c      	sub	sp, #48	; 0x30
 800126c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	4b79      	ldr	r3, [pc, #484]	; (8001464 <MX_GPIO_Init+0x1fc>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a78      	ldr	r2, [pc, #480]	; (8001464 <MX_GPIO_Init+0x1fc>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b76      	ldr	r3, [pc, #472]	; (8001464 <MX_GPIO_Init+0x1fc>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	61bb      	str	r3, [r7, #24]
 8001294:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001296:	4b73      	ldr	r3, [pc, #460]	; (8001464 <MX_GPIO_Init+0x1fc>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	4a72      	ldr	r2, [pc, #456]	; (8001464 <MX_GPIO_Init+0x1fc>)
 800129c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a2:	4b70      	ldr	r3, [pc, #448]	; (8001464 <MX_GPIO_Init+0x1fc>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	4b6d      	ldr	r3, [pc, #436]	; (8001464 <MX_GPIO_Init+0x1fc>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4a6c      	ldr	r2, [pc, #432]	; (8001464 <MX_GPIO_Init+0x1fc>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4b6a      	ldr	r3, [pc, #424]	; (8001464 <MX_GPIO_Init+0x1fc>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	4b67      	ldr	r3, [pc, #412]	; (8001464 <MX_GPIO_Init+0x1fc>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	4a66      	ldr	r2, [pc, #408]	; (8001464 <MX_GPIO_Init+0x1fc>)
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d2:	4b64      	ldr	r3, [pc, #400]	; (8001464 <MX_GPIO_Init+0x1fc>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012de:	4b61      	ldr	r3, [pc, #388]	; (8001464 <MX_GPIO_Init+0x1fc>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	4a60      	ldr	r2, [pc, #384]	; (8001464 <MX_GPIO_Init+0x1fc>)
 80012e4:	f043 0308 	orr.w	r3, r3, #8
 80012e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ea:	4b5e      	ldr	r3, [pc, #376]	; (8001464 <MX_GPIO_Init+0x1fc>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012f6:	4b5b      	ldr	r3, [pc, #364]	; (8001464 <MX_GPIO_Init+0x1fc>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	4a5a      	ldr	r2, [pc, #360]	; (8001464 <MX_GPIO_Init+0x1fc>)
 80012fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001302:	4b58      	ldr	r3, [pc, #352]	; (8001464 <MX_GPIO_Init+0x1fc>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800130e:	f001 fa4f 	bl	80027b0 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EPD_CS_Pin|EPD_RST_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	2111      	movs	r1, #17
 8001316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131a:	f001 f96d 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001324:	4850      	ldr	r0, [pc, #320]	; (8001468 <MX_GPIO_Init+0x200>)
 8001326:	f001 f967 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	2140      	movs	r1, #64	; 0x40
 800132e:	484f      	ldr	r0, [pc, #316]	; (800146c <MX_GPIO_Init+0x204>)
 8001330:	f001 f962 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800133a:	4b4d      	ldr	r3, [pc, #308]	; (8001470 <MX_GPIO_Init+0x208>)
 800133c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	4619      	mov	r1, r3
 8001348:	484a      	ldr	r0, [pc, #296]	; (8001474 <MX_GPIO_Init+0x20c>)
 800134a:	f000 ffab 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_RST_Pin;
 800134e:	2311      	movs	r3, #17
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	4619      	mov	r1, r3
 8001364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001368:	f000 ff9c 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_HRDY_Pin;
 800136c:	2320      	movs	r3, #32
 800136e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EPD_HRDY_GPIO_Port, &GPIO_InitStruct);
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4619      	mov	r1, r3
 800137e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001382:	f000 ff8f 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001386:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	4619      	mov	r1, r3
 800139e:	4832      	ldr	r0, [pc, #200]	; (8001468 <MX_GPIO_Init+0x200>)
 80013a0:	f000 ff80 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013b6:	2307      	movs	r3, #7
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	4619      	mov	r1, r3
 80013c0:	482d      	ldr	r0, [pc, #180]	; (8001478 <MX_GPIO_Init+0x210>)
 80013c2:	f000 ff6f 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013c6:	2320      	movs	r3, #32
 80013c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4619      	mov	r1, r3
 80013d8:	4824      	ldr	r0, [pc, #144]	; (800146c <MX_GPIO_Init+0x204>)
 80013da:	f000 ff63 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013de:	2340      	movs	r3, #64	; 0x40
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4619      	mov	r1, r3
 80013f4:	481d      	ldr	r0, [pc, #116]	; (800146c <MX_GPIO_Init+0x204>)
 80013f6:	f000 ff55 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80013fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800140c:	2308      	movs	r3, #8
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	4619      	mov	r1, r3
 8001416:	4815      	ldr	r0, [pc, #84]	; (800146c <MX_GPIO_Init+0x204>)
 8001418:	f000 ff44 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800141c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	2303      	movs	r3, #3
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800142e:	230a      	movs	r3, #10
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	4619      	mov	r1, r3
 8001438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143c:	f000 ff32 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	4619      	mov	r1, r3
 8001454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001458:	f000 ff24 	bl	80022a4 <HAL_GPIO_Init>

}
 800145c:	bf00      	nop
 800145e:	3730      	adds	r7, #48	; 0x30
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40021000 	.word	0x40021000
 8001468:	48000400 	.word	0x48000400
 800146c:	48001800 	.word	0x48001800
 8001470:	10110000 	.word	0x10110000
 8001474:	48000800 	.word	0x48000800
 8001478:	48000c00 	.word	0x48000c00

0800147c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8001482:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001484:	f000 fbaf 	bl	8001be6 <HAL_Init>

  /* USER CODE BEGIN Init */

 // char tex[]={'H','A','L','L','O','\0'};
  char * fach = "WsComm v1";
 8001488:	4b3e      	ldr	r3, [pc, #248]	; (8001584 <main+0x108>)
 800148a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
  char * doz = "MAH";
 800148e:	4b3e      	ldr	r3, [pc, #248]	; (8001588 <main+0x10c>)
 8001490:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
  uint8_t* trans = "Ready";
 8001494:	4b3d      	ldr	r3, [pc, #244]	; (800158c <main+0x110>)
 8001496:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
  uint8_t rxBuf[1024];
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800149a:	f000 f87b 	bl	8001594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800149e:	f7ff fee3 	bl	8001268 <MX_GPIO_Init>
  MX_SPI1_Init();
 80014a2:	f000 f8f3 	bl	800168c <MX_SPI1_Init>
  MX_DMA_Init();
 80014a6:	f7ff fead 	bl	8001204 <MX_DMA_Init>
  MX_UART4_Init();
 80014aa:	f000 faa5 	bl	80019f8 <MX_UART4_Init>
  HAL_UART_MspInit(&huart4);
 80014ae:	4838      	ldr	r0, [pc, #224]	; (8001590 <main+0x114>)
 80014b0:	f000 fad2 	bl	8001a58 <HAL_UART_MspInit>
  /* USER CODE BEGIN 2 */
  IT8951_Init();
 80014b4:	f7ff fb14 	bl	8000ae0 <IT8951_Init>
	//IT8951DisplayBox(0, 200, 100,25, 0xf0);
  /* USER CODE BEGIN 2 */
  //IT8951DisplayExample3();
//  EpdDriverLoadTemplate();
//
 DrawCalenderField(1, fach, doz);
 80014b8:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 80014bc:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 80014c0:	2001      	movs	r0, #1
 80014c2:	f7ff fdd3 	bl	800106c <DrawCalenderField>
 DrawCalenderField(2, fach, doz);
 80014c6:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 80014ca:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 80014ce:	2002      	movs	r0, #2
 80014d0:	f7ff fdcc 	bl	800106c <DrawCalenderField>
 DrawCalenderField(3, fach, doz);
 80014d4:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 80014d8:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 80014dc:	2003      	movs	r0, #3
 80014de:	f7ff fdc5 	bl	800106c <DrawCalenderField>
 DrawCalenderField(7, fach, doz);
 80014e2:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 80014e6:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 80014ea:	2007      	movs	r0, #7
 80014ec:	f7ff fdbe 	bl	800106c <DrawCalenderField>
  //Paint_DrawChar(50, 50, 'B',&Font20, KALDARK, 0x00);
//  Paint_Clear(KALDARK);
  //Paint_DrawChar(10, 10, 'A',&Font12, KALDARK, 0x00);
  //Paint_DrawChar(50, 50, 'B',&Font20, KALDARK, 0x00);

 HAL_UART_Transmit(&huart4, trans, 6, HAL_MAX_DELAY);
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295
 80014f4:	2206      	movs	r2, #6
 80014f6:	f8d7 1404 	ldr.w	r1, [r7, #1028]	; 0x404
 80014fa:	4825      	ldr	r0, [pc, #148]	; (8001590 <main+0x114>)
 80014fc:	f003 fa7e 	bl	80049fc <HAL_UART_Transmit>
 while(1)
 {
	 //IT8951DisplayExample3();
	 //IT8951DisplayExample4();

	 HAL_UART_Receive(&huart4, rxBuf, 2,HAL_MAX_DELAY);
 8001500:	1d39      	adds	r1, r7, #4
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	2202      	movs	r2, #2
 8001508:	4821      	ldr	r0, [pc, #132]	; (8001590 <main+0x114>)
 800150a:	f003 fb0e 	bl	8004b2a <HAL_UART_Receive>
	 if(rxBuf[0]=='t'|rxBuf[0]=='T')
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b74      	cmp	r3, #116	; 0x74
 8001514:	bf0c      	ite	eq
 8001516:	2301      	moveq	r3, #1
 8001518:	2300      	movne	r3, #0
 800151a:	b2da      	uxtb	r2, r3
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b54      	cmp	r3, #84	; 0x54
 8001522:	bf0c      	ite	eq
 8001524:	2301      	moveq	r3, #1
 8001526:	2300      	movne	r3, #0
 8001528:	b2db      	uxtb	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d009      	beq.n	8001546 <main+0xca>
	 {
		 EpdDriverLoadTemplate();
 8001532:	f7ff fb09 	bl	8000b48 <EpdDriverLoadTemplate>
		 HAL_UART_Transmit(&huart4, trans, 6, HAL_MAX_DELAY);
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	2206      	movs	r2, #6
 800153c:	f8d7 1404 	ldr.w	r1, [r7, #1028]	; 0x404
 8001540:	4813      	ldr	r0, [pc, #76]	; (8001590 <main+0x114>)
 8001542:	f003 fa5b 	bl	80049fc <HAL_UART_Transmit>
	 }
	 if(rxBuf[0]=='r')
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b72      	cmp	r3, #114	; 0x72
 800154c:	d1d8      	bne.n	8001500 <main+0x84>
	 {
		 HAL_UART_Transmit(&huart4, trans, 6, HAL_MAX_DELAY);
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
 8001552:	2206      	movs	r2, #6
 8001554:	f8d7 1404 	ldr.w	r1, [r7, #1028]	; 0x404
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <main+0x114>)
 800155a:	f003 fa4f 	bl	80049fc <HAL_UART_Transmit>
		 HAL_UART_Receive(&huart4, rxBuf, 2,HAL_MAX_DELAY);
 800155e:	1d39      	adds	r1, r7, #4
 8001560:	f04f 33ff 	mov.w	r3, #4294967295
 8001564:	2202      	movs	r2, #2
 8001566:	480a      	ldr	r0, [pc, #40]	; (8001590 <main+0x114>)
 8001568:	f003 fadf 	bl	8004b2a <HAL_UART_Receive>
		 DrawCalenderField((uint8_t*)rxBuf[0]-48, fach, doz);
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	3b30      	subs	r3, #48	; 0x30
 8001572:	b2db      	uxtb	r3, r3
 8001574:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8001578:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fd75 	bl	800106c <DrawCalenderField>
	 HAL_UART_Receive(&huart4, rxBuf, 2,HAL_MAX_DELAY);
 8001582:	e7bd      	b.n	8001500 <main+0x84>
 8001584:	08007260 	.word	0x08007260
 8001588:	0800726c 	.word	0x0800726c
 800158c:	08007270 	.word	0x08007270
 8001590:	200001a8 	.word	0x200001a8

08001594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b0bc      	sub	sp, #240	; 0xf0
 8001598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800159e:	2244      	movs	r2, #68	; 0x44
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f004 feb2 	bl	800630c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	2294      	movs	r2, #148	; 0x94
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f004 fea4 	bl	800630c <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80015c4:	2000      	movs	r0, #0
 80015c6:	f001 f84f 	bl	8002668 <HAL_PWREx_ControlVoltageScaling>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <SystemClock_Config+0x40>
  {
    Error_Handler();
 80015d0:	f000 f854 	bl	800167c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015d4:	2302      	movs	r3, #2
 80015d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015e2:	2340      	movs	r3, #64	; 0x40
 80015e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e8:	2302      	movs	r3, #2
 80015ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015ee:	2302      	movs	r3, #2
 80015f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 80015f4:	2302      	movs	r3, #2
 80015f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 28;
 80015fa:	231c      	movs	r3, #28
 80015fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001600:	2302      	movs	r3, #2
 8001602:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001606:	2302      	movs	r3, #2
 8001608:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800160c:	2302      	movs	r3, #2
 800160e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001612:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001616:	4618      	mov	r0, r3
 8001618:	f001 f8da 	bl	80027d0 <HAL_RCC_OscConfig>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001622:	f000 f82b 	bl	800167c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001626:	230f      	movs	r3, #15
 8001628:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800162c:	2303      	movs	r3, #3
 800162e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001632:	2300      	movs	r3, #0
 8001634:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001644:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001648:	2105      	movs	r1, #5
 800164a:	4618      	mov	r0, r3
 800164c:	f001 fcae 	bl	8002fac <HAL_RCC_ClockConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001656:	f000 f811 	bl	800167c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800165a:	2308      	movs	r3, #8
 800165c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800165e:	2300      	movs	r3, #0
 8001660:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	4618      	mov	r0, r3
 8001666:	f001 ff51 	bl	800350c <HAL_RCCEx_PeriphCLKConfig>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001670:	f000 f804 	bl	800167c <Error_Handler>
  }
}
 8001674:	bf00      	nop
 8001676:	37f0      	adds	r7, #240	; 0xf0
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <MX_SPI1_Init+0x74>)
 8001692:	4a1c      	ldr	r2, [pc, #112]	; (8001704 <MX_SPI1_Init+0x78>)
 8001694:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001696:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <MX_SPI1_Init+0x74>)
 8001698:	f44f 7282 	mov.w	r2, #260	; 0x104
 800169c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <MX_SPI1_Init+0x74>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016a4:	4b16      	ldr	r3, [pc, #88]	; (8001700 <MX_SPI1_Init+0x74>)
 80016a6:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80016aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <MX_SPI1_Init+0x74>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016b2:	4b13      	ldr	r3, [pc, #76]	; (8001700 <MX_SPI1_Init+0x74>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_SPI1_Init+0x74>)
 80016ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_SPI1_Init+0x74>)
 80016c2:	2218      	movs	r2, #24
 80016c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_SPI1_Init+0x74>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_SPI1_Init+0x74>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <MX_SPI1_Init+0x74>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_SPI1_Init+0x74>)
 80016da:	2207      	movs	r2, #7
 80016dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <MX_SPI1_Init+0x74>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_SPI1_Init+0x74>)
 80016e6:	2208      	movs	r2, #8
 80016e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_SPI1_Init+0x74>)
 80016ec:	f002 fc16 	bl	8003f1c <HAL_SPI_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80016f6:	f7ff ffc1 	bl	800167c <Error_Handler>
  }

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200000e4 	.word	0x200000e4
 8001704:	40013000 	.word	0x40013000

08001708 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a17      	ldr	r2, [pc, #92]	; (8001784 <HAL_SPI_MspInit+0x7c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d128      	bne.n	800177c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <HAL_SPI_MspInit+0x80>)
 800172c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172e:	4a16      	ldr	r2, [pc, #88]	; (8001788 <HAL_SPI_MspInit+0x80>)
 8001730:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001734:	6613      	str	r3, [r2, #96]	; 0x60
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <HAL_SPI_MspInit+0x80>)
 8001738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <HAL_SPI_MspInit+0x80>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	4a10      	ldr	r2, [pc, #64]	; (8001788 <HAL_SPI_MspInit+0x80>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <HAL_SPI_MspInit+0x80>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800175a:	23c2      	movs	r3, #194	; 0xc2
 800175c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800176a:	2305      	movs	r3, #5
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001778:	f000 fd94 	bl	80022a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800177c:	bf00      	nop
 800177e:	3728      	adds	r7, #40	; 0x28
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40013000 	.word	0x40013000
 8001788:	40021000 	.word	0x40021000

0800178c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <HAL_MspInit+0x44>)
 8001794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001796:	4a0e      	ldr	r2, [pc, #56]	; (80017d0 <HAL_MspInit+0x44>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6613      	str	r3, [r2, #96]	; 0x60
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <HAL_MspInit+0x44>)
 80017a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_MspInit+0x44>)
 80017ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ae:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <HAL_MspInit+0x44>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	6593      	str	r3, [r2, #88]	; 0x58
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_MspInit+0x44>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000

080017d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <HardFault_Handler+0x4>

080017e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <MemManage_Handler+0x4>

080017ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <BusFault_Handler+0x4>

080017f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <UsageFault_Handler+0x4>

080017fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001828:	f000 fa30 	bl	8001c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}

08001830 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <DMA1_Channel1_IRQHandler+0x10>)
 8001836:	f000 fc23 	bl	8002080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000148 	.word	0x20000148

08001844 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <DMA1_Channel2_IRQHandler+0x10>)
 800184a:	f000 fc19 	bl	8002080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000234 	.word	0x20000234

08001858 <_read>:
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	e00a      	b.n	8001880 <_read+0x28>
 800186a:	f3af 8000 	nop.w
 800186e:	4601      	mov	r1, r0
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	60ba      	str	r2, [r7, #8]
 8001876:	b2ca      	uxtb	r2, r1
 8001878:	701a      	strb	r2, [r3, #0]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	3301      	adds	r3, #1
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	429a      	cmp	r2, r3
 8001886:	dbf0      	blt.n	800186a <_read+0x12>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <_write>:
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	e009      	b.n	80018b8 <_write+0x26>
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	60ba      	str	r2, [r7, #8]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f3af 8000 	nop.w
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3301      	adds	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	dbf1      	blt.n	80018a4 <_write+0x12>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_close>:
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <_fstat>:
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	6039      	str	r1, [r7, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	2300      	movs	r3, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <_isatty>:
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	2301      	movs	r3, #1
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_lseek>:
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	2300      	movs	r3, #0
 8001926:	4618      	mov	r0, r3
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <_sbrk>:
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <_sbrk+0x50>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d102      	bne.n	800194a <_sbrk+0x16>
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <_sbrk+0x50>)
 8001946:	4a10      	ldr	r2, [pc, #64]	; (8001988 <_sbrk+0x54>)
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <_sbrk+0x50>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <_sbrk+0x50>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4413      	add	r3, r2
 8001958:	466a      	mov	r2, sp
 800195a:	4293      	cmp	r3, r2
 800195c:	d907      	bls.n	800196e <_sbrk+0x3a>
 800195e:	f004 fcab 	bl	80062b8 <__errno>
 8001962:	4602      	mov	r2, r0
 8001964:	230c      	movs	r3, #12
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	f04f 33ff 	mov.w	r3, #4294967295
 800196c:	e006      	b.n	800197c <_sbrk+0x48>
 800196e:	4b05      	ldr	r3, [pc, #20]	; (8001984 <_sbrk+0x50>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	4a03      	ldr	r2, [pc, #12]	; (8001984 <_sbrk+0x50>)
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000094 	.word	0x20000094
 8001988:	200002a0 	.word	0x200002a0

0800198c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001990:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <SystemInit+0x64>)
 8001992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001996:	4a16      	ldr	r2, [pc, #88]	; (80019f0 <SystemInit+0x64>)
 8001998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800199c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <SystemInit+0x68>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a13      	ldr	r2, [pc, #76]	; (80019f4 <SystemInit+0x68>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <SystemInit+0x68>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <SystemInit+0x68>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <SystemInit+0x68>)
 80019b8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80019bc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80019c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <SystemInit+0x68>)
 80019c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019c8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <SystemInit+0x68>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <SystemInit+0x68>)
 80019d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <SystemInit+0x68>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <SystemInit+0x64>)
 80019de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019e2:	609a      	str	r2, [r3, #8]
#endif
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00
 80019f4:	40021000 	.word	0x40021000

080019f8 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80019fc:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <MX_UART4_Init+0x58>)
 80019fe:	4a15      	ldr	r2, [pc, #84]	; (8001a54 <MX_UART4_Init+0x5c>)
 8001a00:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001a02:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <MX_UART4_Init+0x58>)
 8001a04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a08:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_UART4_Init+0x58>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <MX_UART4_Init+0x58>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <MX_UART4_Init+0x58>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <MX_UART4_Init+0x58>)
 8001a1e:	220c      	movs	r2, #12
 8001a20:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <MX_UART4_Init+0x58>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <MX_UART4_Init+0x58>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <MX_UART4_Init+0x58>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <MX_UART4_Init+0x58>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a3a:	4805      	ldr	r0, [pc, #20]	; (8001a50 <MX_UART4_Init+0x58>)
 8001a3c:	f002 ff8e 	bl	800495c <HAL_UART_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001a46:	f7ff fe19 	bl	800167c <Error_Handler>
  }

}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200001a8 	.word	0x200001a8
 8001a54:	40004c00 	.word	0x40004c00

08001a58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a40      	ldr	r2, [pc, #256]	; (8001b78 <HAL_UART_MspInit+0x120>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d17a      	bne.n	8001b70 <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a7a:	4b40      	ldr	r3, [pc, #256]	; (8001b7c <HAL_UART_MspInit+0x124>)
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7e:	4a3f      	ldr	r2, [pc, #252]	; (8001b7c <HAL_UART_MspInit+0x124>)
 8001a80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a84:	6593      	str	r3, [r2, #88]	; 0x58
 8001a86:	4b3d      	ldr	r3, [pc, #244]	; (8001b7c <HAL_UART_MspInit+0x124>)
 8001a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a92:	4b3a      	ldr	r3, [pc, #232]	; (8001b7c <HAL_UART_MspInit+0x124>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	4a39      	ldr	r2, [pc, #228]	; (8001b7c <HAL_UART_MspInit+0x124>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9e:	4b37      	ldr	r3, [pc, #220]	; (8001b7c <HAL_UART_MspInit+0x124>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001aaa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001abc:	2308      	movs	r3, #8
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	482e      	ldr	r0, [pc, #184]	; (8001b80 <HAL_UART_MspInit+0x128>)
 8001ac8:	f000 fbec 	bl	80022a4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Channel1;
 8001acc:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <HAL_UART_MspInit+0x12c>)
 8001ace:	4a2e      	ldr	r2, [pc, #184]	; (8001b88 <HAL_UART_MspInit+0x130>)
 8001ad0:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001ad2:	4b2c      	ldr	r3, [pc, #176]	; (8001b84 <HAL_UART_MspInit+0x12c>)
 8001ad4:	221e      	movs	r2, #30
 8001ad6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ad8:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <HAL_UART_MspInit+0x12c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ade:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <HAL_UART_MspInit+0x12c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ae4:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <HAL_UART_MspInit+0x12c>)
 8001ae6:	2280      	movs	r2, #128	; 0x80
 8001ae8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aea:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <HAL_UART_MspInit+0x12c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001af0:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <HAL_UART_MspInit+0x12c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001af6:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <HAL_UART_MspInit+0x12c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001afc:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <HAL_UART_MspInit+0x12c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001b02:	4820      	ldr	r0, [pc, #128]	; (8001b84 <HAL_UART_MspInit+0x12c>)
 8001b04:	f000 fa14 	bl	8001f30 <HAL_DMA_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8001b0e:	f7ff fdb5 	bl	800167c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a1b      	ldr	r2, [pc, #108]	; (8001b84 <HAL_UART_MspInit+0x12c>)
 8001b16:	679a      	str	r2, [r3, #120]	; 0x78
 8001b18:	4a1a      	ldr	r2, [pc, #104]	; (8001b84 <HAL_UART_MspInit+0x12c>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Channel2;
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <HAL_UART_MspInit+0x134>)
 8001b20:	4a1b      	ldr	r2, [pc, #108]	; (8001b90 <HAL_UART_MspInit+0x138>)
 8001b22:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001b24:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <HAL_UART_MspInit+0x134>)
 8001b26:	221f      	movs	r2, #31
 8001b28:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b2a:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_UART_MspInit+0x134>)
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b30:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <HAL_UART_MspInit+0x134>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HAL_UART_MspInit+0x134>)
 8001b38:	2280      	movs	r2, #128	; 0x80
 8001b3a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b3c:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <HAL_UART_MspInit+0x134>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_UART_MspInit+0x134>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001b48:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <HAL_UART_MspInit+0x134>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <HAL_UART_MspInit+0x134>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001b54:	480d      	ldr	r0, [pc, #52]	; (8001b8c <HAL_UART_MspInit+0x134>)
 8001b56:	f000 f9eb 	bl	8001f30 <HAL_DMA_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001b60:	f7ff fd8c 	bl	800167c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <HAL_UART_MspInit+0x134>)
 8001b68:	675a      	str	r2, [r3, #116]	; 0x74
 8001b6a:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <HAL_UART_MspInit+0x134>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001b70:	bf00      	nop
 8001b72:	3728      	adds	r7, #40	; 0x28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40004c00 	.word	0x40004c00
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	48000800 	.word	0x48000800
 8001b84:	20000148 	.word	0x20000148
 8001b88:	40020008 	.word	0x40020008
 8001b8c:	20000234 	.word	0x20000234
 8001b90:	4002001c 	.word	0x4002001c

08001b94 <Reset_Handler>:
 8001b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bcc <LoopForever+0x2>
 8001b98:	2100      	movs	r1, #0
 8001b9a:	e003      	b.n	8001ba4 <LoopCopyDataInit>

08001b9c <CopyDataInit>:
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <LoopForever+0x6>)
 8001b9e:	585b      	ldr	r3, [r3, r1]
 8001ba0:	5043      	str	r3, [r0, r1]
 8001ba2:	3104      	adds	r1, #4

08001ba4 <LoopCopyDataInit>:
 8001ba4:	480b      	ldr	r0, [pc, #44]	; (8001bd4 <LoopForever+0xa>)
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <LoopForever+0xe>)
 8001ba8:	1842      	adds	r2, r0, r1
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d3f6      	bcc.n	8001b9c <CopyDataInit>
 8001bae:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <LoopForever+0x12>)
 8001bb0:	e002      	b.n	8001bb8 <LoopFillZerobss>

08001bb2 <FillZerobss>:
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f842 3b04 	str.w	r3, [r2], #4

08001bb8 <LoopFillZerobss>:
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <LoopForever+0x16>)
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d3f9      	bcc.n	8001bb2 <FillZerobss>
 8001bbe:	f7ff fee5 	bl	800198c <SystemInit>
 8001bc2:	f004 fb7f 	bl	80062c4 <__libc_init_array>
 8001bc6:	f7ff fc59 	bl	800147c <main>

08001bca <LoopForever>:
 8001bca:	e7fe      	b.n	8001bca <LoopForever>
 8001bcc:	200a0000 	.word	0x200a0000
 8001bd0:	08081bb8 	.word	0x08081bb8
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	20000078 	.word	0x20000078
 8001bdc:	20000078 	.word	0x20000078
 8001be0:	2000029c 	.word	0x2000029c

08001be4 <ADC1_IRQHandler>:
 8001be4:	e7fe      	b.n	8001be4 <ADC1_IRQHandler>

08001be6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf0:	2003      	movs	r0, #3
 8001bf2:	f000 f95b 	bl	8001eac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f000 f80e 	bl	8001c18 <HAL_InitTick>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	71fb      	strb	r3, [r7, #7]
 8001c06:	e001      	b.n	8001c0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c08:	f7ff fdc0 	bl	800178c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c24:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <HAL_InitTick+0x68>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d022      	beq.n	8001c72 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c2c:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_InitTick+0x6c>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <HAL_InitTick+0x68>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c38:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c40:	4618      	mov	r0, r3
 8001c42:	f000 f968 	bl	8001f16 <HAL_SYSTICK_Config>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10f      	bne.n	8001c6c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b0f      	cmp	r3, #15
 8001c50:	d809      	bhi.n	8001c66 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c52:	2200      	movs	r2, #0
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5a:	f000 f932 	bl	8001ec2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <HAL_InitTick+0x70>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	e007      	b.n	8001c76 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	73fb      	strb	r3, [r7, #15]
 8001c6a:	e004      	b.n	8001c76 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	73fb      	strb	r3, [r7, #15]
 8001c70:	e001      	b.n	8001c76 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000010 	.word	0x20000010
 8001c84:	20000008 	.word	0x20000008
 8001c88:	2000000c 	.word	0x2000000c

08001c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_IncTick+0x1c>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_IncTick+0x20>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a03      	ldr	r2, [pc, #12]	; (8001ca8 <HAL_IncTick+0x1c>)
 8001c9c:	6013      	str	r3, [r2, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	20000294 	.word	0x20000294
 8001cac:	20000010 	.word	0x20000010

08001cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <HAL_GetTick+0x14>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000294 	.word	0x20000294

08001cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd0:	f7ff ffee 	bl	8001cb0 <HAL_GetTick>
 8001cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce0:	d004      	beq.n	8001cec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_Delay+0x40>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4413      	add	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cec:	bf00      	nop
 8001cee:	f7ff ffdf 	bl	8001cb0 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d8f7      	bhi.n	8001cee <HAL_Delay+0x26>
  {
  }
}
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000010 	.word	0x20000010

08001d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3e:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	60d3      	str	r3, [r2, #12]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <__NVIC_GetPriorityGrouping+0x18>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	f003 0307 	and.w	r3, r3, #7
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	db0b      	blt.n	8001d9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	f003 021f 	and.w	r2, r3, #31
 8001d88:	4907      	ldr	r1, [pc, #28]	; (8001da8 <__NVIC_EnableIRQ+0x38>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	2001      	movs	r0, #1
 8001d92:	fa00 f202 	lsl.w	r2, r0, r2
 8001d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000e100 	.word	0xe000e100

08001dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	6039      	str	r1, [r7, #0]
 8001db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	db0a      	blt.n	8001dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	490c      	ldr	r1, [pc, #48]	; (8001df8 <__NVIC_SetPriority+0x4c>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	0112      	lsls	r2, r2, #4
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	440b      	add	r3, r1
 8001dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd4:	e00a      	b.n	8001dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4908      	ldr	r1, [pc, #32]	; (8001dfc <__NVIC_SetPriority+0x50>)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	3b04      	subs	r3, #4
 8001de4:	0112      	lsls	r2, r2, #4
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	440b      	add	r3, r1
 8001dea:	761a      	strb	r2, [r3, #24]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000e100 	.word	0xe000e100
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	; 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f1c3 0307 	rsb	r3, r3, #7
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	bf28      	it	cs
 8001e1e:	2304      	movcs	r3, #4
 8001e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3304      	adds	r3, #4
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d902      	bls.n	8001e30 <NVIC_EncodePriority+0x30>
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3b03      	subs	r3, #3
 8001e2e:	e000      	b.n	8001e32 <NVIC_EncodePriority+0x32>
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	f04f 32ff 	mov.w	r2, #4294967295
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	401a      	ands	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e48:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	43d9      	mvns	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	4313      	orrs	r3, r2
         );
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3724      	adds	r7, #36	; 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e78:	d301      	bcc.n	8001e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00f      	b.n	8001e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <SysTick_Config+0x40>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e86:	210f      	movs	r1, #15
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	f7ff ff8e 	bl	8001dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <SysTick_Config+0x40>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e96:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <SysTick_Config+0x40>)
 8001e98:	2207      	movs	r2, #7
 8001e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	e000e010 	.word	0xe000e010

08001eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ff29 	bl	8001d0c <__NVIC_SetPriorityGrouping>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed4:	f7ff ff3e 	bl	8001d54 <__NVIC_GetPriorityGrouping>
 8001ed8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68b9      	ldr	r1, [r7, #8]
 8001ede:	6978      	ldr	r0, [r7, #20]
 8001ee0:	f7ff ff8e 	bl	8001e00 <NVIC_EncodePriority>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff5d 	bl	8001dac <__NVIC_SetPriority>
}
 8001ef2:	bf00      	nop
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	4603      	mov	r3, r0
 8001f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff31 	bl	8001d70 <__NVIC_EnableIRQ>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff ffa2 	bl	8001e68 <SysTick_Config>
 8001f24:	4603      	mov	r3, r0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e08d      	b.n	800205e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	4b47      	ldr	r3, [pc, #284]	; (8002068 <HAL_DMA_Init+0x138>)
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d80f      	bhi.n	8001f6e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	4b45      	ldr	r3, [pc, #276]	; (800206c <HAL_DMA_Init+0x13c>)
 8001f56:	4413      	add	r3, r2
 8001f58:	4a45      	ldr	r2, [pc, #276]	; (8002070 <HAL_DMA_Init+0x140>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	091b      	lsrs	r3, r3, #4
 8001f60:	009a      	lsls	r2, r3, #2
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a42      	ldr	r2, [pc, #264]	; (8002074 <HAL_DMA_Init+0x144>)
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40
 8001f6c:	e00e      	b.n	8001f8c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	4b40      	ldr	r3, [pc, #256]	; (8002078 <HAL_DMA_Init+0x148>)
 8001f76:	4413      	add	r3, r2
 8001f78:	4a3d      	ldr	r2, [pc, #244]	; (8002070 <HAL_DMA_Init+0x140>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	091b      	lsrs	r3, r3, #4
 8001f80:	009a      	lsls	r2, r3, #2
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a3c      	ldr	r2, [pc, #240]	; (800207c <HAL_DMA_Init+0x14c>)
 8001f8a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001fb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f8fe 	bl	80021e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fec:	d102      	bne.n	8001ff4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002008:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d010      	beq.n	8002034 <HAL_DMA_Init+0x104>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b04      	cmp	r3, #4
 8002018:	d80c      	bhi.n	8002034 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f91e 	bl	800225c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	e008      	b.n	8002046 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40020407 	.word	0x40020407
 800206c:	bffdfff8 	.word	0xbffdfff8
 8002070:	cccccccd 	.word	0xcccccccd
 8002074:	40020000 	.word	0x40020000
 8002078:	bffdfbf8 	.word	0xbffdfbf8
 800207c:	40020400 	.word	0x40020400

08002080 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209c:	f003 031c 	and.w	r3, r3, #28
 80020a0:	2204      	movs	r2, #4
 80020a2:	409a      	lsls	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d026      	beq.n	80020fa <HAL_DMA_IRQHandler+0x7a>
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d021      	beq.n	80020fa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d107      	bne.n	80020d4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0204 	bic.w	r2, r2, #4
 80020d2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d8:	f003 021c 	and.w	r2, r3, #28
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	2104      	movs	r1, #4
 80020e2:	fa01 f202 	lsl.w	r2, r1, r2
 80020e6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d071      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80020f8:	e06c      	b.n	80021d4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	f003 031c 	and.w	r3, r3, #28
 8002102:	2202      	movs	r2, #2
 8002104:	409a      	lsls	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d02e      	beq.n	800216c <HAL_DMA_IRQHandler+0xec>
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d029      	beq.n	800216c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10b      	bne.n	800213e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 020a 	bic.w	r2, r2, #10
 8002134:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f003 021c 	and.w	r2, r3, #28
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	2102      	movs	r1, #2
 800214c:	fa01 f202 	lsl.w	r2, r1, r2
 8002150:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215e:	2b00      	cmp	r3, #0
 8002160:	d038      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800216a:	e033      	b.n	80021d4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002170:	f003 031c 	and.w	r3, r3, #28
 8002174:	2208      	movs	r2, #8
 8002176:	409a      	lsls	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4013      	ands	r3, r2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d02a      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x156>
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d025      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 020e 	bic.w	r2, r2, #14
 8002198:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	f003 021c 	and.w	r2, r3, #28
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	2101      	movs	r1, #1
 80021a8:	fa01 f202 	lsl.w	r2, r1, r2
 80021ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d004      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
}
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b17      	ldr	r3, [pc, #92]	; (800224c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d80a      	bhi.n	800220a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f8:	089b      	lsrs	r3, r3, #2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002200:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6493      	str	r3, [r2, #72]	; 0x48
 8002208:	e007      	b.n	800221a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	089b      	lsrs	r3, r3, #2
 8002210:	009a      	lsls	r2, r3, #2
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002214:	4413      	add	r3, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	3b08      	subs	r3, #8
 8002222:	4a0c      	ldr	r2, [pc, #48]	; (8002254 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002224:	fba2 2303 	umull	r2, r3, r2, r3
 8002228:	091b      	lsrs	r3, r3, #4
 800222a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002230:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1CU);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f003 031c 	and.w	r3, r3, #28
 8002238:	2201      	movs	r2, #1
 800223a:	409a      	lsls	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	40020407 	.word	0x40020407
 8002250:	4002081c 	.word	0x4002081c
 8002254:	cccccccd 	.word	0xcccccccd
 8002258:	40020880 	.word	0x40020880

0800225c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	461a      	mov	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a08      	ldr	r2, [pc, #32]	; (80022a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800227e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	3b01      	subs	r3, #1
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	2201      	movs	r2, #1
 800228a:	409a      	lsls	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	1000823f 	.word	0x1000823f
 80022a0:	40020940 	.word	0x40020940

080022a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b2:	e166      	b.n	8002582 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	2101      	movs	r1, #1
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	fa01 f303 	lsl.w	r3, r1, r3
 80022c0:	4013      	ands	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8158 	beq.w	800257c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d003      	beq.n	80022dc <HAL_GPIO_Init+0x38>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b12      	cmp	r3, #18
 80022da:	d123      	bne.n	8002324 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	08da      	lsrs	r2, r3, #3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3208      	adds	r2, #8
 80022e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	220f      	movs	r2, #15
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4013      	ands	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	08da      	lsrs	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3208      	adds	r2, #8
 800231e:	6939      	ldr	r1, [r7, #16]
 8002320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	2203      	movs	r2, #3
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4013      	ands	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0203 	and.w	r2, r3, #3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4313      	orrs	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d00b      	beq.n	8002378 <HAL_GPIO_Init+0xd4>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b02      	cmp	r3, #2
 8002366:	d007      	beq.n	8002378 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800236c:	2b11      	cmp	r3, #17
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b12      	cmp	r3, #18
 8002376:	d130      	bne.n	80023da <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	2203      	movs	r2, #3
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023ae:	2201      	movs	r2, #1
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	091b      	lsrs	r3, r3, #4
 80023c4:	f003 0201 	and.w	r2, r3, #1
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	2203      	movs	r2, #3
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 80b2 	beq.w	800257c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002418:	4b61      	ldr	r3, [pc, #388]	; (80025a0 <HAL_GPIO_Init+0x2fc>)
 800241a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241c:	4a60      	ldr	r2, [pc, #384]	; (80025a0 <HAL_GPIO_Init+0x2fc>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6613      	str	r3, [r2, #96]	; 0x60
 8002424:	4b5e      	ldr	r3, [pc, #376]	; (80025a0 <HAL_GPIO_Init+0x2fc>)
 8002426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002430:	4a5c      	ldr	r2, [pc, #368]	; (80025a4 <HAL_GPIO_Init+0x300>)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	089b      	lsrs	r3, r3, #2
 8002436:	3302      	adds	r3, #2
 8002438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	220f      	movs	r2, #15
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800245a:	d02b      	beq.n	80024b4 <HAL_GPIO_Init+0x210>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a52      	ldr	r2, [pc, #328]	; (80025a8 <HAL_GPIO_Init+0x304>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d025      	beq.n	80024b0 <HAL_GPIO_Init+0x20c>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a51      	ldr	r2, [pc, #324]	; (80025ac <HAL_GPIO_Init+0x308>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d01f      	beq.n	80024ac <HAL_GPIO_Init+0x208>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a50      	ldr	r2, [pc, #320]	; (80025b0 <HAL_GPIO_Init+0x30c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d019      	beq.n	80024a8 <HAL_GPIO_Init+0x204>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a4f      	ldr	r2, [pc, #316]	; (80025b4 <HAL_GPIO_Init+0x310>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d013      	beq.n	80024a4 <HAL_GPIO_Init+0x200>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a4e      	ldr	r2, [pc, #312]	; (80025b8 <HAL_GPIO_Init+0x314>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d00d      	beq.n	80024a0 <HAL_GPIO_Init+0x1fc>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a4d      	ldr	r2, [pc, #308]	; (80025bc <HAL_GPIO_Init+0x318>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d007      	beq.n	800249c <HAL_GPIO_Init+0x1f8>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a4c      	ldr	r2, [pc, #304]	; (80025c0 <HAL_GPIO_Init+0x31c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d101      	bne.n	8002498 <HAL_GPIO_Init+0x1f4>
 8002494:	2307      	movs	r3, #7
 8002496:	e00e      	b.n	80024b6 <HAL_GPIO_Init+0x212>
 8002498:	2308      	movs	r3, #8
 800249a:	e00c      	b.n	80024b6 <HAL_GPIO_Init+0x212>
 800249c:	2306      	movs	r3, #6
 800249e:	e00a      	b.n	80024b6 <HAL_GPIO_Init+0x212>
 80024a0:	2305      	movs	r3, #5
 80024a2:	e008      	b.n	80024b6 <HAL_GPIO_Init+0x212>
 80024a4:	2304      	movs	r3, #4
 80024a6:	e006      	b.n	80024b6 <HAL_GPIO_Init+0x212>
 80024a8:	2303      	movs	r3, #3
 80024aa:	e004      	b.n	80024b6 <HAL_GPIO_Init+0x212>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e002      	b.n	80024b6 <HAL_GPIO_Init+0x212>
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <HAL_GPIO_Init+0x212>
 80024b4:	2300      	movs	r3, #0
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	f002 0203 	and.w	r2, r2, #3
 80024bc:	0092      	lsls	r2, r2, #2
 80024be:	4093      	lsls	r3, r2
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024c6:	4937      	ldr	r1, [pc, #220]	; (80025a4 <HAL_GPIO_Init+0x300>)
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	089b      	lsrs	r3, r3, #2
 80024cc:	3302      	adds	r3, #2
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024d4:	4b3b      	ldr	r3, [pc, #236]	; (80025c4 <HAL_GPIO_Init+0x320>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	43db      	mvns	r3, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024f8:	4a32      	ldr	r2, [pc, #200]	; (80025c4 <HAL_GPIO_Init+0x320>)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80024fe:	4b31      	ldr	r3, [pc, #196]	; (80025c4 <HAL_GPIO_Init+0x320>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	43db      	mvns	r3, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002522:	4a28      	ldr	r2, [pc, #160]	; (80025c4 <HAL_GPIO_Init+0x320>)
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002528:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <HAL_GPIO_Init+0x320>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	43db      	mvns	r3, r3
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800254c:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <HAL_GPIO_Init+0x320>)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002552:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <HAL_GPIO_Init+0x320>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	43db      	mvns	r3, r3
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4013      	ands	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002576:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <HAL_GPIO_Init+0x320>)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	3301      	adds	r3, #1
 8002580:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	f47f ae91 	bne.w	80022b4 <HAL_GPIO_Init+0x10>
  }
}
 8002592:	bf00      	nop
 8002594:	371c      	adds	r7, #28
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40010000 	.word	0x40010000
 80025a8:	48000400 	.word	0x48000400
 80025ac:	48000800 	.word	0x48000800
 80025b0:	48000c00 	.word	0x48000c00
 80025b4:	48001000 	.word	0x48001000
 80025b8:	48001400 	.word	0x48001400
 80025bc:	48001800 	.word	0x48001800
 80025c0:	48001c00 	.word	0x48001c00
 80025c4:	40010400 	.word	0x40010400

080025c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	887b      	ldrh	r3, [r7, #2]
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
 80025e4:	e001      	b.n	80025ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025e6:	2300      	movs	r3, #0
 80025e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
 8002604:	4613      	mov	r3, r2
 8002606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002608:	787b      	ldrb	r3, [r7, #1]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800260e:	887a      	ldrh	r2, [r7, #2]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002614:	e002      	b.n	800261c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002616:	887a      	ldrh	r2, [r7, #2]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800262c:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <HAL_PWREx_GetVoltageRange+0x3c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002638:	d102      	bne.n	8002640 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800263a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800263e:	e00b      	b.n	8002658 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800264e:	d102      	bne.n	8002656 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002650:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002654:	e000      	b.n	8002658 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002656:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002658:	4618      	mov	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40007000 	.word	0x40007000

08002668 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d141      	bne.n	80026fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002676:	4b4b      	ldr	r3, [pc, #300]	; (80027a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800267e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002682:	d131      	bne.n	80026e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002684:	4b47      	ldr	r3, [pc, #284]	; (80027a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800268a:	4a46      	ldr	r2, [pc, #280]	; (80027a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800268c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002690:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002694:	4b43      	ldr	r3, [pc, #268]	; (80027a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800269c:	4a41      	ldr	r2, [pc, #260]	; (80027a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80026a4:	4b40      	ldr	r3, [pc, #256]	; (80027a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2232      	movs	r2, #50	; 0x32
 80026aa:	fb02 f303 	mul.w	r3, r2, r3
 80026ae:	4a3f      	ldr	r2, [pc, #252]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026b0:	fba2 2303 	umull	r2, r3, r2, r3
 80026b4:	0c9b      	lsrs	r3, r3, #18
 80026b6:	3301      	adds	r3, #1
 80026b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026ba:	e002      	b.n	80026c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	3b01      	subs	r3, #1
 80026c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026c2:	4b38      	ldr	r3, [pc, #224]	; (80027a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ce:	d102      	bne.n	80026d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f2      	bne.n	80026bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026d6:	4b33      	ldr	r3, [pc, #204]	; (80027a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e2:	d158      	bne.n	8002796 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e057      	b.n	8002798 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026e8:	4b2e      	ldr	r3, [pc, #184]	; (80027a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ee:	4a2d      	ldr	r2, [pc, #180]	; (80027a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80026f8:	e04d      	b.n	8002796 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002700:	d141      	bne.n	8002786 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002702:	4b28      	ldr	r3, [pc, #160]	; (80027a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800270a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270e:	d131      	bne.n	8002774 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002710:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002716:	4a23      	ldr	r2, [pc, #140]	; (80027a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002720:	4b20      	ldr	r3, [pc, #128]	; (80027a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002728:	4a1e      	ldr	r2, [pc, #120]	; (80027a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800272a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800272e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002730:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2232      	movs	r2, #50	; 0x32
 8002736:	fb02 f303 	mul.w	r3, r2, r3
 800273a:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800273c:	fba2 2303 	umull	r2, r3, r2, r3
 8002740:	0c9b      	lsrs	r3, r3, #18
 8002742:	3301      	adds	r3, #1
 8002744:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002746:	e002      	b.n	800274e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	3b01      	subs	r3, #1
 800274c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800275a:	d102      	bne.n	8002762 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f2      	bne.n	8002748 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002762:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800276e:	d112      	bne.n	8002796 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e011      	b.n	8002798 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800277a:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800277c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002780:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002784:	e007      	b.n	8002796 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002786:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800278e:	4a05      	ldr	r2, [pc, #20]	; (80027a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002790:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002794:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	40007000 	.word	0x40007000
 80027a8:	20000008 	.word	0x20000008
 80027ac:	431bde83 	.word	0x431bde83

080027b0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <HAL_PWREx_EnableVddIO2+0x1c>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	4a04      	ldr	r2, [pc, #16]	; (80027cc <HAL_PWREx_EnableVddIO2+0x1c>)
 80027ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027be:	6053      	str	r3, [r2, #4]
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40007000 	.word	0x40007000

080027d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e3db      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027e2:	4ba4      	ldr	r3, [pc, #656]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 030c 	and.w	r3, r3, #12
 80027ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027ec:	4ba1      	ldr	r3, [pc, #644]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0310 	and.w	r3, r3, #16
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 80e1 	beq.w	80029c6 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d007      	beq.n	800281a <HAL_RCC_OscConfig+0x4a>
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	2b0c      	cmp	r3, #12
 800280e:	f040 8088 	bne.w	8002922 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2b01      	cmp	r3, #1
 8002816:	f040 8084 	bne.w	8002922 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800281a:	4b96      	ldr	r3, [pc, #600]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <HAL_RCC_OscConfig+0x62>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e3b3      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1a      	ldr	r2, [r3, #32]
 8002836:	4b8f      	ldr	r3, [pc, #572]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d004      	beq.n	800284c <HAL_RCC_OscConfig+0x7c>
 8002842:	4b8c      	ldr	r3, [pc, #560]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800284a:	e005      	b.n	8002858 <HAL_RCC_OscConfig+0x88>
 800284c:	4b89      	ldr	r3, [pc, #548]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 800284e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002852:	091b      	lsrs	r3, r3, #4
 8002854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002858:	4293      	cmp	r3, r2
 800285a:	d223      	bcs.n	80028a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	4618      	mov	r0, r3
 8002862:	f000 fd91 	bl	8003388 <RCC_SetFlashLatencyFromMSIRange>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e394      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002870:	4b80      	ldr	r3, [pc, #512]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a7f      	ldr	r2, [pc, #508]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 8002876:	f043 0308 	orr.w	r3, r3, #8
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	4b7d      	ldr	r3, [pc, #500]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	497a      	ldr	r1, [pc, #488]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800288e:	4b79      	ldr	r3, [pc, #484]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	4975      	ldr	r1, [pc, #468]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
 80028a2:	e022      	b.n	80028ea <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028a4:	4b73      	ldr	r3, [pc, #460]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a72      	ldr	r2, [pc, #456]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 80028aa:	f043 0308 	orr.w	r3, r3, #8
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	4b70      	ldr	r3, [pc, #448]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	496d      	ldr	r1, [pc, #436]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028c2:	4b6c      	ldr	r3, [pc, #432]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	021b      	lsls	r3, r3, #8
 80028d0:	4968      	ldr	r1, [pc, #416]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fd54 	bl	8003388 <RCC_SetFlashLatencyFromMSIRange>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e357      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028ea:	f000 fc8b 	bl	8003204 <HAL_RCC_GetSysClockFreq>
 80028ee:	4601      	mov	r1, r0
 80028f0:	4b60      	ldr	r3, [pc, #384]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	4a5f      	ldr	r2, [pc, #380]	; (8002a78 <HAL_RCC_OscConfig+0x2a8>)
 80028fc:	5cd3      	ldrb	r3, [r2, r3]
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	fa21 f303 	lsr.w	r3, r1, r3
 8002906:	4a5d      	ldr	r2, [pc, #372]	; (8002a7c <HAL_RCC_OscConfig+0x2ac>)
 8002908:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800290a:	4b5d      	ldr	r3, [pc, #372]	; (8002a80 <HAL_RCC_OscConfig+0x2b0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff f982 	bl	8001c18 <HAL_InitTick>
 8002914:	4603      	mov	r3, r0
 8002916:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d052      	beq.n	80029c4 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	e33b      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d032      	beq.n	8002990 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800292a:	4b52      	ldr	r3, [pc, #328]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a51      	ldr	r2, [pc, #324]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002936:	f7ff f9bb 	bl	8001cb0 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800293e:	f7ff f9b7 	bl	8001cb0 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e324      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002950:	4b48      	ldr	r3, [pc, #288]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800295c:	4b45      	ldr	r3, [pc, #276]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a44      	ldr	r2, [pc, #272]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 8002962:	f043 0308 	orr.w	r3, r3, #8
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b42      	ldr	r3, [pc, #264]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	493f      	ldr	r1, [pc, #252]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800297a:	4b3e      	ldr	r3, [pc, #248]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	493a      	ldr	r1, [pc, #232]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 800298a:	4313      	orrs	r3, r2
 800298c:	604b      	str	r3, [r1, #4]
 800298e:	e01a      	b.n	80029c6 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002990:	4b38      	ldr	r3, [pc, #224]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a37      	ldr	r2, [pc, #220]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 8002996:	f023 0301 	bic.w	r3, r3, #1
 800299a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800299c:	f7ff f988 	bl	8001cb0 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029a4:	f7ff f984 	bl	8001cb0 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e2f1      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029b6:	4b2f      	ldr	r3, [pc, #188]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x1d4>
 80029c2:	e000      	b.n	80029c6 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d074      	beq.n	8002abc <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_OscConfig+0x214>
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2b0c      	cmp	r3, #12
 80029dc:	d10e      	bne.n	80029fc <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d10b      	bne.n	80029fc <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e4:	4b23      	ldr	r3, [pc, #140]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d064      	beq.n	8002aba <HAL_RCC_OscConfig+0x2ea>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d160      	bne.n	8002aba <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e2ce      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a04:	d106      	bne.n	8002a14 <HAL_RCC_OscConfig+0x244>
 8002a06:	4b1b      	ldr	r3, [pc, #108]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1a      	ldr	r2, [pc, #104]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e01d      	b.n	8002a50 <HAL_RCC_OscConfig+0x280>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCC_OscConfig+0x268>
 8002a1e:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a14      	ldr	r2, [pc, #80]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 8002a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a11      	ldr	r2, [pc, #68]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 8002a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e00b      	b.n	8002a50 <HAL_RCC_OscConfig+0x280>
 8002a38:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a0d      	ldr	r2, [pc, #52]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 8002a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <HAL_RCC_OscConfig+0x2a4>)
 8002a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01c      	beq.n	8002a92 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a58:	f7ff f92a 	bl	8001cb0 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a5e:	e011      	b.n	8002a84 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a60:	f7ff f926 	bl	8001cb0 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b64      	cmp	r3, #100	; 0x64
 8002a6c:	d90a      	bls.n	8002a84 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e293      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000
 8002a78:	08081ac8 	.word	0x08081ac8
 8002a7c:	20000008 	.word	0x20000008
 8002a80:	2000000c 	.word	0x2000000c
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a84:	4bae      	ldr	r3, [pc, #696]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0e7      	beq.n	8002a60 <HAL_RCC_OscConfig+0x290>
 8002a90:	e014      	b.n	8002abc <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a92:	f7ff f90d 	bl	8001cb0 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a9a:	f7ff f909 	bl	8001cb0 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b64      	cmp	r3, #100	; 0x64
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e276      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aac:	4ba4      	ldr	r3, [pc, #656]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1f0      	bne.n	8002a9a <HAL_RCC_OscConfig+0x2ca>
 8002ab8:	e000      	b.n	8002abc <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d060      	beq.n	8002b8a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d005      	beq.n	8002ada <HAL_RCC_OscConfig+0x30a>
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	2b0c      	cmp	r3, #12
 8002ad2:	d119      	bne.n	8002b08 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d116      	bne.n	8002b08 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ada:	4b99      	ldr	r3, [pc, #612]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d005      	beq.n	8002af2 <HAL_RCC_OscConfig+0x322>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e253      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af2:	4b93      	ldr	r3, [pc, #588]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	061b      	lsls	r3, r3, #24
 8002b00:	498f      	ldr	r1, [pc, #572]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b06:	e040      	b.n	8002b8a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d023      	beq.n	8002b58 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b10:	4b8b      	ldr	r3, [pc, #556]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a8a      	ldr	r2, [pc, #552]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7ff f8c8 	bl	8001cb0 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b24:	f7ff f8c4 	bl	8001cb0 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e231      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b36:	4b82      	ldr	r3, [pc, #520]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b42:	4b7f      	ldr	r3, [pc, #508]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	061b      	lsls	r3, r3, #24
 8002b50:	497b      	ldr	r1, [pc, #492]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	604b      	str	r3, [r1, #4]
 8002b56:	e018      	b.n	8002b8a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b58:	4b79      	ldr	r3, [pc, #484]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a78      	ldr	r2, [pc, #480]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002b5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b64:	f7ff f8a4 	bl	8001cb0 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b6c:	f7ff f8a0 	bl	8001cb0 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e20d      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b7e:	4b70      	ldr	r3, [pc, #448]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d03c      	beq.n	8002c10 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d01c      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b9e:	4b68      	ldr	r3, [pc, #416]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba4:	4a66      	ldr	r2, [pc, #408]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bae:	f7ff f87f 	bl	8001cb0 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb6:	f7ff f87b 	bl	8001cb0 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e1e8      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bc8:	4b5d      	ldr	r3, [pc, #372]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0ef      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x3e6>
 8002bd6:	e01b      	b.n	8002c10 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bd8:	4b59      	ldr	r3, [pc, #356]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bde:	4a58      	ldr	r2, [pc, #352]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7ff f862 	bl	8001cb0 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf0:	f7ff f85e 	bl	8001cb0 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e1cb      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c02:	4b4f      	ldr	r3, [pc, #316]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1ef      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80a5 	beq.w	8002d68 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c22:	4b47      	ldr	r3, [pc, #284]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10d      	bne.n	8002c4a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2e:	4b44      	ldr	r3, [pc, #272]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c32:	4a43      	ldr	r2, [pc, #268]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c38:	6593      	str	r3, [r2, #88]	; 0x58
 8002c3a:	4b41      	ldr	r3, [pc, #260]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c46:	2301      	movs	r3, #1
 8002c48:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c4a:	4b3e      	ldr	r3, [pc, #248]	; (8002d44 <HAL_RCC_OscConfig+0x574>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d118      	bne.n	8002c88 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c56:	4b3b      	ldr	r3, [pc, #236]	; (8002d44 <HAL_RCC_OscConfig+0x574>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a3a      	ldr	r2, [pc, #232]	; (8002d44 <HAL_RCC_OscConfig+0x574>)
 8002c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c62:	f7ff f825 	bl	8001cb0 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6a:	f7ff f821 	bl	8001cb0 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e18e      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c7c:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <HAL_RCC_OscConfig+0x574>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0f0      	beq.n	8002c6a <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d108      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x4d2>
 8002c90:	4b2b      	ldr	r3, [pc, #172]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c96:	4a2a      	ldr	r2, [pc, #168]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ca0:	e024      	b.n	8002cec <HAL_RCC_OscConfig+0x51c>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b05      	cmp	r3, #5
 8002ca8:	d110      	bne.n	8002ccc <HAL_RCC_OscConfig+0x4fc>
 8002caa:	4b25      	ldr	r3, [pc, #148]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb0:	4a23      	ldr	r2, [pc, #140]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002cb2:	f043 0304 	orr.w	r3, r3, #4
 8002cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cba:	4b21      	ldr	r3, [pc, #132]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc0:	4a1f      	ldr	r2, [pc, #124]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cca:	e00f      	b.n	8002cec <HAL_RCC_OscConfig+0x51c>
 8002ccc:	4b1c      	ldr	r3, [pc, #112]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd2:	4a1b      	ldr	r2, [pc, #108]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002cd4:	f023 0301 	bic.w	r3, r3, #1
 8002cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cdc:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce2:	4a17      	ldr	r2, [pc, #92]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002ce4:	f023 0304 	bic.w	r3, r3, #4
 8002ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d016      	beq.n	8002d22 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf4:	f7fe ffdc 	bl	8001cb0 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cfa:	e00a      	b.n	8002d12 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfc:	f7fe ffd8 	bl	8001cb0 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e143      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d12:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <HAL_RCC_OscConfig+0x570>)
 8002d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0ed      	beq.n	8002cfc <HAL_RCC_OscConfig+0x52c>
 8002d20:	e019      	b.n	8002d56 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d22:	f7fe ffc5 	bl	8001cb0 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d28:	e00e      	b.n	8002d48 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7fe ffc1 	bl	8001cb0 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d905      	bls.n	8002d48 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e12c      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
 8002d40:	40021000 	.word	0x40021000
 8002d44:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d48:	4b96      	ldr	r3, [pc, #600]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1e9      	bne.n	8002d2a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d56:	7ffb      	ldrb	r3, [r7, #31]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d105      	bne.n	8002d68 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d5c:	4b91      	ldr	r3, [pc, #580]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d60:	4a90      	ldr	r2, [pc, #576]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d03c      	beq.n	8002dee <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d01c      	beq.n	8002db6 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d7c:	4b89      	ldr	r3, [pc, #548]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002d7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d82:	4a88      	ldr	r2, [pc, #544]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8c:	f7fe ff90 	bl	8001cb0 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d94:	f7fe ff8c 	bl	8001cb0 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e0f9      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002da6:	4b7f      	ldr	r3, [pc, #508]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002da8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0ef      	beq.n	8002d94 <HAL_RCC_OscConfig+0x5c4>
 8002db4:	e01b      	b.n	8002dee <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002db6:	4b7b      	ldr	r3, [pc, #492]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002db8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dbc:	4a79      	ldr	r2, [pc, #484]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002dbe:	f023 0301 	bic.w	r3, r3, #1
 8002dc2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc6:	f7fe ff73 	bl	8001cb0 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dce:	f7fe ff6f 	bl	8001cb0 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e0dc      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002de0:	4b70      	ldr	r3, [pc, #448]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002de2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1ef      	bne.n	8002dce <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 80d0 	beq.w	8002f98 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	2b0c      	cmp	r3, #12
 8002dfc:	f000 808d 	beq.w	8002f1a <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d15a      	bne.n	8002ebe <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e08:	4b66      	ldr	r3, [pc, #408]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a65      	ldr	r2, [pc, #404]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002e0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe ff4c 	bl	8001cb0 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7fe ff48 	bl	8001cb0 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e0b5      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e2e:	4b5d      	ldr	r3, [pc, #372]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e3a:	4b5a      	ldr	r3, [pc, #360]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	4b5a      	ldr	r3, [pc, #360]	; (8002fa8 <HAL_RCC_OscConfig+0x7d8>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e4a:	3a01      	subs	r2, #1
 8002e4c:	0112      	lsls	r2, r2, #4
 8002e4e:	4311      	orrs	r1, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e54:	0212      	lsls	r2, r2, #8
 8002e56:	4311      	orrs	r1, r2
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e5c:	0852      	lsrs	r2, r2, #1
 8002e5e:	3a01      	subs	r2, #1
 8002e60:	0552      	lsls	r2, r2, #21
 8002e62:	4311      	orrs	r1, r2
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e68:	0852      	lsrs	r2, r2, #1
 8002e6a:	3a01      	subs	r2, #1
 8002e6c:	0652      	lsls	r2, r2, #25
 8002e6e:	4311      	orrs	r1, r2
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e74:	06d2      	lsls	r2, r2, #27
 8002e76:	430a      	orrs	r2, r1
 8002e78:	494a      	ldr	r1, [pc, #296]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e7e:	4b49      	ldr	r3, [pc, #292]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a48      	ldr	r2, [pc, #288]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002e84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e88:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e8a:	4b46      	ldr	r3, [pc, #280]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	4a45      	ldr	r2, [pc, #276]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002e90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e94:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e96:	f7fe ff0b 	bl	8001cb0 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9e:	f7fe ff07 	bl	8001cb0 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e074      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb0:	4b3c      	ldr	r3, [pc, #240]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x6ce>
 8002ebc:	e06c      	b.n	8002f98 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ebe:	4b39      	ldr	r3, [pc, #228]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a38      	ldr	r2, [pc, #224]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002ec4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ec8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002eca:	4b36      	ldr	r3, [pc, #216]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d105      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ed6:	4b33      	ldr	r3, [pc, #204]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	4a32      	ldr	r2, [pc, #200]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002edc:	f023 0303 	bic.w	r3, r3, #3
 8002ee0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ee2:	4b30      	ldr	r3, [pc, #192]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	4a2f      	ldr	r2, [pc, #188]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002ee8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef2:	f7fe fedd 	bl	8001cb0 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efa:	f7fe fed9 	bl	8001cb0 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e046      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f0c:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f0      	bne.n	8002efa <HAL_RCC_OscConfig+0x72a>
 8002f18:	e03e      	b.n	8002f98 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e039      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002f26:	4b1f      	ldr	r3, [pc, #124]	; (8002fa4 <HAL_RCC_OscConfig+0x7d4>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f003 0203 	and.w	r2, r3, #3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d12c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	3b01      	subs	r3, #1
 8002f46:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d123      	bne.n	8002f94 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f56:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d11b      	bne.n	8002f94 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f66:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d113      	bne.n	8002f94 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f76:	085b      	lsrs	r3, r3, #1
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d109      	bne.n	8002f94 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	085b      	lsrs	r3, r3, #1
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3720      	adds	r7, #32
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	019d800c 	.word	0x019d800c

08002fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e10f      	b.n	80031e4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc4:	4b89      	ldr	r3, [pc, #548]	; (80031ec <HAL_RCC_ClockConfig+0x240>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d910      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd2:	4b86      	ldr	r3, [pc, #536]	; (80031ec <HAL_RCC_ClockConfig+0x240>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 020f 	bic.w	r2, r3, #15
 8002fda:	4984      	ldr	r1, [pc, #528]	; (80031ec <HAL_RCC_ClockConfig+0x240>)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe2:	4b82      	ldr	r3, [pc, #520]	; (80031ec <HAL_RCC_ClockConfig+0x240>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0f7      	b.n	80031e4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 8089 	beq.w	8003114 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b03      	cmp	r3, #3
 8003008:	d133      	bne.n	8003072 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800300a:	4b79      	ldr	r3, [pc, #484]	; (80031f0 <HAL_RCC_ClockConfig+0x244>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e0e4      	b.n	80031e4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800301a:	f000 fa0f 	bl	800343c <RCC_GetSysClockFreqFromPLLSource>
 800301e:	4602      	mov	r2, r0
 8003020:	4b74      	ldr	r3, [pc, #464]	; (80031f4 <HAL_RCC_ClockConfig+0x248>)
 8003022:	429a      	cmp	r2, r3
 8003024:	d955      	bls.n	80030d2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003026:	4b72      	ldr	r3, [pc, #456]	; (80031f0 <HAL_RCC_ClockConfig+0x244>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10a      	bne.n	8003048 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003032:	4b6f      	ldr	r3, [pc, #444]	; (80031f0 <HAL_RCC_ClockConfig+0x244>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800303a:	4a6d      	ldr	r2, [pc, #436]	; (80031f0 <HAL_RCC_ClockConfig+0x244>)
 800303c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003040:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	e044      	b.n	80030d2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d03e      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x126>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d13a      	bne.n	80030d2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800305c:	4b64      	ldr	r3, [pc, #400]	; (80031f0 <HAL_RCC_ClockConfig+0x244>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003064:	4a62      	ldr	r2, [pc, #392]	; (80031f0 <HAL_RCC_ClockConfig+0x244>)
 8003066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800306a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	e02f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d107      	bne.n	800308a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800307a:	4b5d      	ldr	r3, [pc, #372]	; (80031f0 <HAL_RCC_ClockConfig+0x244>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d115      	bne.n	80030b2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e0ac      	b.n	80031e4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d107      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003092:	4b57      	ldr	r3, [pc, #348]	; (80031f0 <HAL_RCC_ClockConfig+0x244>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d109      	bne.n	80030b2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e0a0      	b.n	80031e4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030a2:	4b53      	ldr	r3, [pc, #332]	; (80031f0 <HAL_RCC_ClockConfig+0x244>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e098      	b.n	80031e4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80030b2:	f000 f8a7 	bl	8003204 <HAL_RCC_GetSysClockFreq>
 80030b6:	4602      	mov	r2, r0
 80030b8:	4b4e      	ldr	r3, [pc, #312]	; (80031f4 <HAL_RCC_ClockConfig+0x248>)
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d909      	bls.n	80030d2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030be:	4b4c      	ldr	r3, [pc, #304]	; (80031f0 <HAL_RCC_ClockConfig+0x244>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030c6:	4a4a      	ldr	r2, [pc, #296]	; (80031f0 <HAL_RCC_ClockConfig+0x244>)
 80030c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80030ce:	2380      	movs	r3, #128	; 0x80
 80030d0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030d2:	4b47      	ldr	r3, [pc, #284]	; (80031f0 <HAL_RCC_ClockConfig+0x244>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f023 0203 	bic.w	r2, r3, #3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	4944      	ldr	r1, [pc, #272]	; (80031f0 <HAL_RCC_ClockConfig+0x244>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e4:	f7fe fde4 	bl	8001cb0 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ea:	e00a      	b.n	8003102 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ec:	f7fe fde0 	bl	8001cb0 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e070      	b.n	80031e4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003102:	4b3b      	ldr	r3, [pc, #236]	; (80031f0 <HAL_RCC_ClockConfig+0x244>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 020c 	and.w	r2, r3, #12
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	429a      	cmp	r2, r3
 8003112:	d1eb      	bne.n	80030ec <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d009      	beq.n	8003134 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003120:	4b33      	ldr	r3, [pc, #204]	; (80031f0 <HAL_RCC_ClockConfig+0x244>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	4930      	ldr	r1, [pc, #192]	; (80031f0 <HAL_RCC_ClockConfig+0x244>)
 800312e:	4313      	orrs	r3, r2
 8003130:	608b      	str	r3, [r1, #8]
 8003132:	e008      	b.n	8003146 <HAL_RCC_ClockConfig+0x19a>
  }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	2b80      	cmp	r3, #128	; 0x80
 8003138:	d105      	bne.n	8003146 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800313a:	4b2d      	ldr	r3, [pc, #180]	; (80031f0 <HAL_RCC_ClockConfig+0x244>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	4a2c      	ldr	r2, [pc, #176]	; (80031f0 <HAL_RCC_ClockConfig+0x244>)
 8003140:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003144:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003146:	4b29      	ldr	r3, [pc, #164]	; (80031ec <HAL_RCC_ClockConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d210      	bcs.n	8003176 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003154:	4b25      	ldr	r3, [pc, #148]	; (80031ec <HAL_RCC_ClockConfig+0x240>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f023 020f 	bic.w	r2, r3, #15
 800315c:	4923      	ldr	r1, [pc, #140]	; (80031ec <HAL_RCC_ClockConfig+0x240>)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	4313      	orrs	r3, r2
 8003162:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003164:	4b21      	ldr	r3, [pc, #132]	; (80031ec <HAL_RCC_ClockConfig+0x240>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d001      	beq.n	8003176 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e036      	b.n	80031e4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b00      	cmp	r3, #0
 8003180:	d008      	beq.n	8003194 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003182:	4b1b      	ldr	r3, [pc, #108]	; (80031f0 <HAL_RCC_ClockConfig+0x244>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	4918      	ldr	r1, [pc, #96]	; (80031f0 <HAL_RCC_ClockConfig+0x244>)
 8003190:	4313      	orrs	r3, r2
 8003192:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b00      	cmp	r3, #0
 800319e:	d009      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031a0:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <HAL_RCC_ClockConfig+0x244>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4910      	ldr	r1, [pc, #64]	; (80031f0 <HAL_RCC_ClockConfig+0x244>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031b4:	f000 f826 	bl	8003204 <HAL_RCC_GetSysClockFreq>
 80031b8:	4601      	mov	r1, r0
 80031ba:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <HAL_RCC_ClockConfig+0x244>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	091b      	lsrs	r3, r3, #4
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	4a0c      	ldr	r2, [pc, #48]	; (80031f8 <HAL_RCC_ClockConfig+0x24c>)
 80031c6:	5cd3      	ldrb	r3, [r2, r3]
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	fa21 f303 	lsr.w	r3, r1, r3
 80031d0:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <HAL_RCC_ClockConfig+0x250>)
 80031d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031d4:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <HAL_RCC_ClockConfig+0x254>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fe fd1d 	bl	8001c18 <HAL_InitTick>
 80031de:	4603      	mov	r3, r0
 80031e0:	73fb      	strb	r3, [r7, #15]

  return status;
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40022000 	.word	0x40022000
 80031f0:	40021000 	.word	0x40021000
 80031f4:	04c4b400 	.word	0x04c4b400
 80031f8:	08081ac8 	.word	0x08081ac8
 80031fc:	20000008 	.word	0x20000008
 8003200:	2000000c 	.word	0x2000000c

08003204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003204:	b480      	push	{r7}
 8003206:	b089      	sub	sp, #36	; 0x24
 8003208:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	2300      	movs	r3, #0
 8003210:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003212:	4b3d      	ldr	r3, [pc, #244]	; (8003308 <HAL_RCC_GetSysClockFreq+0x104>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800321c:	4b3a      	ldr	r3, [pc, #232]	; (8003308 <HAL_RCC_GetSysClockFreq+0x104>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0x34>
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	2b0c      	cmp	r3, #12
 8003230:	d121      	bne.n	8003276 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d11e      	bne.n	8003276 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003238:	4b33      	ldr	r3, [pc, #204]	; (8003308 <HAL_RCC_GetSysClockFreq+0x104>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b00      	cmp	r3, #0
 8003242:	d107      	bne.n	8003254 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003244:	4b30      	ldr	r3, [pc, #192]	; (8003308 <HAL_RCC_GetSysClockFreq+0x104>)
 8003246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800324a:	0a1b      	lsrs	r3, r3, #8
 800324c:	f003 030f 	and.w	r3, r3, #15
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	e005      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003254:	4b2c      	ldr	r3, [pc, #176]	; (8003308 <HAL_RCC_GetSysClockFreq+0x104>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003260:	4a2a      	ldr	r2, [pc, #168]	; (800330c <HAL_RCC_GetSysClockFreq+0x108>)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003268:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10d      	bne.n	800328c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003274:	e00a      	b.n	800328c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	2b04      	cmp	r3, #4
 800327a:	d102      	bne.n	8003282 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800327c:	4b24      	ldr	r3, [pc, #144]	; (8003310 <HAL_RCC_GetSysClockFreq+0x10c>)
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	e004      	b.n	800328c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	2b08      	cmp	r3, #8
 8003286:	d101      	bne.n	800328c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003288:	4b22      	ldr	r3, [pc, #136]	; (8003314 <HAL_RCC_GetSysClockFreq+0x110>)
 800328a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	2b0c      	cmp	r3, #12
 8003290:	d133      	bne.n	80032fa <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003292:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <HAL_RCC_GetSysClockFreq+0x104>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d002      	beq.n	80032a8 <HAL_RCC_GetSysClockFreq+0xa4>
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d003      	beq.n	80032ae <HAL_RCC_GetSysClockFreq+0xaa>
 80032a6:	e005      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032a8:	4b19      	ldr	r3, [pc, #100]	; (8003310 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032aa:	617b      	str	r3, [r7, #20]
      break;
 80032ac:	e005      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032ae:	4b19      	ldr	r3, [pc, #100]	; (8003314 <HAL_RCC_GetSysClockFreq+0x110>)
 80032b0:	617b      	str	r3, [r7, #20]
      break;
 80032b2:	e002      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	617b      	str	r3, [r7, #20]
      break;
 80032b8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032ba:	4b13      	ldr	r3, [pc, #76]	; (8003308 <HAL_RCC_GetSysClockFreq+0x104>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	091b      	lsrs	r3, r3, #4
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	3301      	adds	r3, #1
 80032c6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032c8:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <HAL_RCC_GetSysClockFreq+0x104>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	0a1b      	lsrs	r3, r3, #8
 80032ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	fb02 f203 	mul.w	r2, r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	fbb2 f3f3 	udiv	r3, r2, r3
 80032de:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032e0:	4b09      	ldr	r3, [pc, #36]	; (8003308 <HAL_RCC_GetSysClockFreq+0x104>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	0e5b      	lsrs	r3, r3, #25
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	3301      	adds	r3, #1
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032fa:	69bb      	ldr	r3, [r7, #24]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3724      	adds	r7, #36	; 0x24
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	40021000 	.word	0x40021000
 800330c:	08081ae0 	.word	0x08081ae0
 8003310:	00f42400 	.word	0x00f42400
 8003314:	007a1200 	.word	0x007a1200

08003318 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_RCC_GetHCLKFreq+0x14>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	20000008 	.word	0x20000008

08003330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003334:	f7ff fff0 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8003338:	4601      	mov	r1, r0
 800333a:	4b06      	ldr	r3, [pc, #24]	; (8003354 <HAL_RCC_GetPCLK1Freq+0x24>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4a04      	ldr	r2, [pc, #16]	; (8003358 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003346:	5cd3      	ldrb	r3, [r2, r3]
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003350:	4618      	mov	r0, r3
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40021000 	.word	0x40021000
 8003358:	08081ad8 	.word	0x08081ad8

0800335c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003360:	f7ff ffda 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8003364:	4601      	mov	r1, r0
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	0adb      	lsrs	r3, r3, #11
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	4a04      	ldr	r2, [pc, #16]	; (8003384 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003372:	5cd3      	ldrb	r3, [r2, r3]
 8003374:	f003 031f 	and.w	r3, r3, #31
 8003378:	fa21 f303 	lsr.w	r3, r1, r3
}
 800337c:	4618      	mov	r0, r3
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40021000 	.word	0x40021000
 8003384:	08081ad8 	.word	0x08081ad8

08003388 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003390:	2300      	movs	r3, #0
 8003392:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003394:	4b27      	ldr	r3, [pc, #156]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033a0:	f7ff f942 	bl	8002628 <HAL_PWREx_GetVoltageRange>
 80033a4:	6178      	str	r0, [r7, #20]
 80033a6:	e014      	b.n	80033d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033a8:	4b22      	ldr	r3, [pc, #136]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	4a21      	ldr	r2, [pc, #132]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b2:	6593      	str	r3, [r2, #88]	; 0x58
 80033b4:	4b1f      	ldr	r3, [pc, #124]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033c0:	f7ff f932 	bl	8002628 <HAL_PWREx_GetVoltageRange>
 80033c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033c6:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ca:	4a1a      	ldr	r2, [pc, #104]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d8:	d10b      	bne.n	80033f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b80      	cmp	r3, #128	; 0x80
 80033de:	d913      	bls.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2ba0      	cmp	r3, #160	; 0xa0
 80033e4:	d902      	bls.n	80033ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033e6:	2302      	movs	r3, #2
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	e00d      	b.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033ec:	2301      	movs	r3, #1
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	e00a      	b.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x80>
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b7f      	cmp	r3, #127	; 0x7f
 80033f6:	d902      	bls.n	80033fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80033f8:	2302      	movs	r3, #2
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	e004      	b.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b70      	cmp	r3, #112	; 0x70
 8003402:	d101      	bne.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003404:	2301      	movs	r3, #1
 8003406:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003408:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f023 020f 	bic.w	r2, r3, #15
 8003410:	4909      	ldr	r1, [pc, #36]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003418:	4b07      	ldr	r3, [pc, #28]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 030f 	and.w	r3, r3, #15
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	429a      	cmp	r2, r3
 8003424:	d001      	beq.n	800342a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40021000 	.word	0x40021000
 8003438:	40022000 	.word	0x40022000

0800343c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003442:	2300      	movs	r3, #0
 8003444:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003446:	4b2d      	ldr	r3, [pc, #180]	; (80034fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	2b01      	cmp	r3, #1
 8003450:	d118      	bne.n	8003484 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003452:	4b2a      	ldr	r3, [pc, #168]	; (80034fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d107      	bne.n	800346e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800345e:	4b27      	ldr	r3, [pc, #156]	; (80034fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003464:	0a1b      	lsrs	r3, r3, #8
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	e005      	b.n	800347a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800346e:	4b23      	ldr	r3, [pc, #140]	; (80034fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	091b      	lsrs	r3, r3, #4
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800347a:	4a21      	ldr	r2, [pc, #132]	; (8003500 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003482:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003484:	4b1d      	ldr	r3, [pc, #116]	; (80034fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d002      	beq.n	800349a <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003494:	2b03      	cmp	r3, #3
 8003496:	d003      	beq.n	80034a0 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003498:	e005      	b.n	80034a6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800349a:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800349c:	613b      	str	r3, [r7, #16]
    break;
 800349e:	e005      	b.n	80034ac <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80034a0:	4b19      	ldr	r3, [pc, #100]	; (8003508 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80034a2:	613b      	str	r3, [r7, #16]
    break;
 80034a4:	e002      	b.n	80034ac <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	613b      	str	r3, [r7, #16]
    break;
 80034aa:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034ac:	4b13      	ldr	r3, [pc, #76]	; (80034fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	091b      	lsrs	r3, r3, #4
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	3301      	adds	r3, #1
 80034b8:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034ba:	4b10      	ldr	r3, [pc, #64]	; (80034fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	0a1b      	lsrs	r3, r3, #8
 80034c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	fb02 f203 	mul.w	r2, r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d0:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034d2:	4b0a      	ldr	r3, [pc, #40]	; (80034fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	0e5b      	lsrs	r3, r3, #25
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	3301      	adds	r3, #1
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ea:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80034ec:	683b      	ldr	r3, [r7, #0]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	371c      	adds	r7, #28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40021000 	.word	0x40021000
 8003500:	08081ae0 	.word	0x08081ae0
 8003504:	00f42400 	.word	0x00f42400
 8003508:	007a1200 	.word	0x007a1200

0800350c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003514:	2300      	movs	r3, #0
 8003516:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003518:	2300      	movs	r3, #0
 800351a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003524:	2b00      	cmp	r3, #0
 8003526:	d03d      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800352c:	2b40      	cmp	r3, #64	; 0x40
 800352e:	d00b      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003530:	2b40      	cmp	r3, #64	; 0x40
 8003532:	d804      	bhi.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00e      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003538:	2b20      	cmp	r3, #32
 800353a:	d015      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800353c:	e01d      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800353e:	2b60      	cmp	r3, #96	; 0x60
 8003540:	d01e      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003542:	2b80      	cmp	r3, #128	; 0x80
 8003544:	d01c      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003546:	e018      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003548:	4b86      	ldr	r3, [pc, #536]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4a85      	ldr	r2, [pc, #532]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800354e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003552:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003554:	e015      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3304      	adds	r3, #4
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fafd 	bl	8003b5c <RCCEx_PLLSAI1_Config>
 8003562:	4603      	mov	r3, r0
 8003564:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003566:	e00c      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3320      	adds	r3, #32
 800356c:	2100      	movs	r1, #0
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fbe4 	bl	8003d3c <RCCEx_PLLSAI2_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003578:	e003      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	74fb      	strb	r3, [r7, #19]
      break;
 800357e:	e000      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003580:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003582:	7cfb      	ldrb	r3, [r7, #19]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10b      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003588:	4b76      	ldr	r3, [pc, #472]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800358a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800358e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003596:	4973      	ldr	r1, [pc, #460]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800359e:	e001      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a0:	7cfb      	ldrb	r3, [r7, #19]
 80035a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d042      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b8:	d00f      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xce>
 80035ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035be:	d805      	bhi.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d011      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80035c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c8:	d017      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xee>
 80035ca:	e01f      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x100>
 80035cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035d0:	d01f      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d6:	d01c      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035d8:	e018      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035da:	4b62      	ldr	r3, [pc, #392]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	4a61      	ldr	r2, [pc, #388]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035e6:	e015      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3304      	adds	r3, #4
 80035ec:	2100      	movs	r1, #0
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fab4 	bl	8003b5c <RCCEx_PLLSAI1_Config>
 80035f4:	4603      	mov	r3, r0
 80035f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035f8:	e00c      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3320      	adds	r3, #32
 80035fe:	2100      	movs	r1, #0
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fb9b 	bl	8003d3c <RCCEx_PLLSAI2_Config>
 8003606:	4603      	mov	r3, r0
 8003608:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800360a:	e003      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	74fb      	strb	r3, [r7, #19]
      break;
 8003610:	e000      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003612:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003614:	7cfb      	ldrb	r3, [r7, #19]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10b      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800361a:	4b52      	ldr	r3, [pc, #328]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800361c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003620:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	494e      	ldr	r1, [pc, #312]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003630:	e001      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003632:	7cfb      	ldrb	r3, [r7, #19]
 8003634:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 809f 	beq.w	8003782 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003644:	2300      	movs	r3, #0
 8003646:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003648:	4b46      	ldr	r3, [pc, #280]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800364a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003658:	2300      	movs	r3, #0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00d      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800365e:	4b41      	ldr	r3, [pc, #260]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003662:	4a40      	ldr	r2, [pc, #256]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003668:	6593      	str	r3, [r2, #88]	; 0x58
 800366a:	4b3e      	ldr	r3, [pc, #248]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800366c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003676:	2301      	movs	r3, #1
 8003678:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800367a:	4b3b      	ldr	r3, [pc, #236]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a3a      	ldr	r2, [pc, #232]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003684:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003686:	f7fe fb13 	bl	8001cb0 <HAL_GetTick>
 800368a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800368c:	e009      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368e:	f7fe fb0f 	bl	8001cb0 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d902      	bls.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	74fb      	strb	r3, [r7, #19]
        break;
 80036a0:	e005      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036a2:	4b31      	ldr	r3, [pc, #196]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0ef      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 80036ae:	7cfb      	ldrb	r3, [r7, #19]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d15b      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036b4:	4b2b      	ldr	r3, [pc, #172]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036be:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d01f      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d019      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036d2:	4b24      	ldr	r3, [pc, #144]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036de:	4b21      	ldr	r3, [pc, #132]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e4:	4a1f      	ldr	r2, [pc, #124]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036ee:	4b1d      	ldr	r3, [pc, #116]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f4:	4a1b      	ldr	r2, [pc, #108]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036fe:	4a19      	ldr	r2, [pc, #100]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d016      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003710:	f7fe face 	bl	8001cb0 <HAL_GetTick>
 8003714:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003716:	e00b      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003718:	f7fe faca 	bl	8001cb0 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	f241 3288 	movw	r2, #5000	; 0x1388
 8003726:	4293      	cmp	r3, r2
 8003728:	d902      	bls.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	74fb      	strb	r3, [r7, #19]
            break;
 800372e:	e006      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003730:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0ec      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800373e:	7cfb      	ldrb	r3, [r7, #19]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10c      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003744:	4b07      	ldr	r3, [pc, #28]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003754:	4903      	ldr	r1, [pc, #12]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800375c:	e008      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	74bb      	strb	r3, [r7, #18]
 8003762:	e005      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003764:	40021000 	.word	0x40021000
 8003768:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800376c:	7cfb      	ldrb	r3, [r7, #19]
 800376e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003770:	7c7b      	ldrb	r3, [r7, #17]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d105      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003776:	4ba0      	ldr	r3, [pc, #640]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377a:	4a9f      	ldr	r2, [pc, #636]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003780:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800378e:	4b9a      	ldr	r3, [pc, #616]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003794:	f023 0203 	bic.w	r2, r3, #3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379c:	4996      	ldr	r1, [pc, #600]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00a      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037b0:	4b91      	ldr	r3, [pc, #580]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b6:	f023 020c 	bic.w	r2, r3, #12
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	498e      	ldr	r1, [pc, #568]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037d2:	4b89      	ldr	r3, [pc, #548]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e0:	4985      	ldr	r1, [pc, #532]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00a      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037f4:	4b80      	ldr	r3, [pc, #512]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003802:	497d      	ldr	r1, [pc, #500]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003804:	4313      	orrs	r3, r2
 8003806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00a      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003816:	4b78      	ldr	r3, [pc, #480]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003824:	4974      	ldr	r1, [pc, #464]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0320 	and.w	r3, r3, #32
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00a      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003838:	4b6f      	ldr	r3, [pc, #444]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003846:	496c      	ldr	r1, [pc, #432]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003848:	4313      	orrs	r3, r2
 800384a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800385a:	4b67      	ldr	r3, [pc, #412]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003860:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003868:	4963      	ldr	r1, [pc, #396]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386a:	4313      	orrs	r3, r2
 800386c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00a      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800387c:	4b5e      	ldr	r3, [pc, #376]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003882:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800388a:	495b      	ldr	r1, [pc, #364]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388c:	4313      	orrs	r3, r2
 800388e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800389e:	4b56      	ldr	r3, [pc, #344]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ac:	4952      	ldr	r1, [pc, #328]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00a      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038c0:	4b4d      	ldr	r3, [pc, #308]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ce:	494a      	ldr	r1, [pc, #296]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038e2:	4b45      	ldr	r3, [pc, #276]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f0:	4941      	ldr	r1, [pc, #260]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00a      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003904:	4b3c      	ldr	r3, [pc, #240]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003906:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800390a:	f023 0203 	bic.w	r2, r3, #3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003912:	4939      	ldr	r1, [pc, #228]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d028      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003926:	4b34      	ldr	r3, [pc, #208]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003934:	4930      	ldr	r1, [pc, #192]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003940:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003944:	d106      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003946:	4b2c      	ldr	r3, [pc, #176]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	4a2b      	ldr	r2, [pc, #172]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800394c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003950:	60d3      	str	r3, [r2, #12]
 8003952:	e011      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003958:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800395c:	d10c      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3304      	adds	r3, #4
 8003962:	2101      	movs	r1, #1
 8003964:	4618      	mov	r0, r3
 8003966:	f000 f8f9 	bl	8003b5c <RCCEx_PLLSAI1_Config>
 800396a:	4603      	mov	r3, r0
 800396c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800396e:	7cfb      	ldrb	r3, [r7, #19]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003974:	7cfb      	ldrb	r3, [r7, #19]
 8003976:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d04d      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800398c:	d108      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800398e:	4b1a      	ldr	r3, [pc, #104]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003990:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003994:	4a18      	ldr	r2, [pc, #96]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800399a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800399e:	e012      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80039a0:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039a6:	4a14      	ldr	r2, [pc, #80]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039ac:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80039b0:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039be:	490e      	ldr	r1, [pc, #56]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039ce:	d106      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039d0:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4a08      	ldr	r2, [pc, #32]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039da:	60d3      	str	r3, [r2, #12]
 80039dc:	e020      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039e6:	d109      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039e8:	4b03      	ldr	r3, [pc, #12]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	4a02      	ldr	r2, [pc, #8]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f2:	60d3      	str	r3, [r2, #12]
 80039f4:	e014      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 f8a5 	bl	8003b5c <RCCEx_PLLSAI1_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a16:	7cfb      	ldrb	r3, [r7, #19]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a1c:	7cfb      	ldrb	r3, [r7, #19]
 8003a1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d028      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a2c:	4b4a      	ldr	r3, [pc, #296]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a3a:	4947      	ldr	r1, [pc, #284]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a4a:	d106      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a4c:	4b42      	ldr	r3, [pc, #264]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4a41      	ldr	r2, [pc, #260]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a56:	60d3      	str	r3, [r2, #12]
 8003a58:	e011      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a62:	d10c      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3304      	adds	r3, #4
 8003a68:	2101      	movs	r1, #1
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 f876 	bl	8003b5c <RCCEx_PLLSAI1_Config>
 8003a70:	4603      	mov	r3, r0
 8003a72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a74:	7cfb      	ldrb	r3, [r7, #19]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003a7a:	7cfb      	ldrb	r3, [r7, #19]
 8003a7c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d01e      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a8a:	4b33      	ldr	r3, [pc, #204]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a9a:	492f      	ldr	r1, [pc, #188]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aac:	d10c      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	2102      	movs	r1, #2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 f851 	bl	8003b5c <RCCEx_PLLSAI1_Config>
 8003aba:	4603      	mov	r3, r0
 8003abc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003abe:	7cfb      	ldrb	r3, [r7, #19]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003ac4:	7cfb      	ldrb	r3, [r7, #19]
 8003ac6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00b      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ad4:	4b20      	ldr	r3, [pc, #128]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ad6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ada:	f023 0204 	bic.w	r2, r3, #4
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae4:	491c      	ldr	r1, [pc, #112]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00b      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003af8:	4b17      	ldr	r3, [pc, #92]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003afa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003afe:	f023 0218 	bic.w	r2, r3, #24
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b08:	4913      	ldr	r1, [pc, #76]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d017      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003b1c:	4b0e      	ldr	r3, [pc, #56]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b2c:	490a      	ldr	r1, [pc, #40]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b3e:	d105      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b40:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4a04      	ldr	r2, [pc, #16]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b4a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000

08003b5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b6a:	4b70      	ldr	r3, [pc, #448]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00e      	beq.n	8003b94 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b76:	4b6d      	ldr	r3, [pc, #436]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f003 0203 	and.w	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d103      	bne.n	8003b8e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
       ||
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d13f      	bne.n	8003c0e <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	73fb      	strb	r3, [r7, #15]
 8003b92:	e03c      	b.n	8003c0e <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d00c      	beq.n	8003bb6 <RCCEx_PLLSAI1_Config+0x5a>
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d013      	beq.n	8003bc8 <RCCEx_PLLSAI1_Config+0x6c>
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d120      	bne.n	8003be6 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ba4:	4b61      	ldr	r3, [pc, #388]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d11d      	bne.n	8003bec <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bb4:	e01a      	b.n	8003bec <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bb6:	4b5d      	ldr	r3, [pc, #372]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d116      	bne.n	8003bf0 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bc6:	e013      	b.n	8003bf0 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bc8:	4b58      	ldr	r3, [pc, #352]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10f      	bne.n	8003bf4 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bd4:	4b55      	ldr	r3, [pc, #340]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d109      	bne.n	8003bf4 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003be4:	e006      	b.n	8003bf4 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
      break;
 8003bea:	e004      	b.n	8003bf6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003bec:	bf00      	nop
 8003bee:	e002      	b.n	8003bf6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003bf0:	bf00      	nop
 8003bf2:	e000      	b.n	8003bf6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003bf4:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d108      	bne.n	8003c0e <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003bfc:	4b4b      	ldr	r3, [pc, #300]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f023 0203 	bic.w	r2, r3, #3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4948      	ldr	r1, [pc, #288]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f040 8086 	bne.w	8003d22 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c16:	4b45      	ldr	r3, [pc, #276]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a44      	ldr	r2, [pc, #272]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c22:	f7fe f845 	bl	8001cb0 <HAL_GetTick>
 8003c26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c28:	e009      	b.n	8003c3e <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c2a:	f7fe f841 	bl	8001cb0 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d902      	bls.n	8003c3e <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	73fb      	strb	r3, [r7, #15]
        break;
 8003c3c:	e005      	b.n	8003c4a <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c3e:	4b3b      	ldr	r3, [pc, #236]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1ef      	bne.n	8003c2a <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d168      	bne.n	8003d22 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d113      	bne.n	8003c7e <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c56:	4b35      	ldr	r3, [pc, #212]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c58:	691a      	ldr	r2, [r3, #16]
 8003c5a:	4b35      	ldr	r3, [pc, #212]	; (8003d30 <RCCEx_PLLSAI1_Config+0x1d4>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6892      	ldr	r2, [r2, #8]
 8003c62:	0211      	lsls	r1, r2, #8
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	68d2      	ldr	r2, [r2, #12]
 8003c68:	06d2      	lsls	r2, r2, #27
 8003c6a:	4311      	orrs	r1, r2
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6852      	ldr	r2, [r2, #4]
 8003c70:	3a01      	subs	r2, #1
 8003c72:	0112      	lsls	r2, r2, #4
 8003c74:	430a      	orrs	r2, r1
 8003c76:	492d      	ldr	r1, [pc, #180]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	610b      	str	r3, [r1, #16]
 8003c7c:	e02d      	b.n	8003cda <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d115      	bne.n	8003cb0 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c84:	4b29      	ldr	r3, [pc, #164]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c86:	691a      	ldr	r2, [r3, #16]
 8003c88:	4b2a      	ldr	r3, [pc, #168]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6892      	ldr	r2, [r2, #8]
 8003c90:	0211      	lsls	r1, r2, #8
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6912      	ldr	r2, [r2, #16]
 8003c96:	0852      	lsrs	r2, r2, #1
 8003c98:	3a01      	subs	r2, #1
 8003c9a:	0552      	lsls	r2, r2, #21
 8003c9c:	4311      	orrs	r1, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6852      	ldr	r2, [r2, #4]
 8003ca2:	3a01      	subs	r2, #1
 8003ca4:	0112      	lsls	r2, r2, #4
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	4920      	ldr	r1, [pc, #128]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	610b      	str	r3, [r1, #16]
 8003cae:	e014      	b.n	8003cda <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cb0:	4b1e      	ldr	r3, [pc, #120]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	4b20      	ldr	r3, [pc, #128]	; (8003d38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6892      	ldr	r2, [r2, #8]
 8003cbc:	0211      	lsls	r1, r2, #8
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6952      	ldr	r2, [r2, #20]
 8003cc2:	0852      	lsrs	r2, r2, #1
 8003cc4:	3a01      	subs	r2, #1
 8003cc6:	0652      	lsls	r2, r2, #25
 8003cc8:	4311      	orrs	r1, r2
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6852      	ldr	r2, [r2, #4]
 8003cce:	3a01      	subs	r2, #1
 8003cd0:	0112      	lsls	r2, r2, #4
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	4915      	ldr	r1, [pc, #84]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003cda:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a13      	ldr	r2, [pc, #76]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ce0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ce4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce6:	f7fd ffe3 	bl	8001cb0 <HAL_GetTick>
 8003cea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cec:	e009      	b.n	8003d02 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cee:	f7fd ffdf 	bl	8001cb0 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d902      	bls.n	8003d02 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	73fb      	strb	r3, [r7, #15]
          break;
 8003d00:	e005      	b.n	8003d0e <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d02:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0ef      	beq.n	8003cee <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d106      	bne.n	8003d22 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d16:	691a      	ldr	r2, [r3, #16]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	4903      	ldr	r1, [pc, #12]	; (8003d2c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	07ff800f 	.word	0x07ff800f
 8003d34:	ff9f800f 	.word	0xff9f800f
 8003d38:	f9ff800f 	.word	0xf9ff800f

08003d3c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d4a:	4b70      	ldr	r3, [pc, #448]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00e      	beq.n	8003d74 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d56:	4b6d      	ldr	r3, [pc, #436]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f003 0203 	and.w	r2, r3, #3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d103      	bne.n	8003d6e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
       ||
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d13f      	bne.n	8003dee <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	73fb      	strb	r3, [r7, #15]
 8003d72:	e03c      	b.n	8003dee <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d00c      	beq.n	8003d96 <RCCEx_PLLSAI2_Config+0x5a>
 8003d7c:	2b03      	cmp	r3, #3
 8003d7e:	d013      	beq.n	8003da8 <RCCEx_PLLSAI2_Config+0x6c>
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d120      	bne.n	8003dc6 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d84:	4b61      	ldr	r3, [pc, #388]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d11d      	bne.n	8003dcc <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d94:	e01a      	b.n	8003dcc <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d96:	4b5d      	ldr	r3, [pc, #372]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d116      	bne.n	8003dd0 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da6:	e013      	b.n	8003dd0 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003da8:	4b58      	ldr	r3, [pc, #352]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10f      	bne.n	8003dd4 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003db4:	4b55      	ldr	r3, [pc, #340]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d109      	bne.n	8003dd4 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dc4:	e006      	b.n	8003dd4 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8003dca:	e004      	b.n	8003dd6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003dcc:	bf00      	nop
 8003dce:	e002      	b.n	8003dd6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003dd0:	bf00      	nop
 8003dd2:	e000      	b.n	8003dd6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003dd4:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d108      	bne.n	8003dee <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003ddc:	4b4b      	ldr	r3, [pc, #300]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f023 0203 	bic.w	r2, r3, #3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4948      	ldr	r1, [pc, #288]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f040 8086 	bne.w	8003f02 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003df6:	4b45      	ldr	r3, [pc, #276]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a44      	ldr	r2, [pc, #272]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e02:	f7fd ff55 	bl	8001cb0 <HAL_GetTick>
 8003e06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e08:	e009      	b.n	8003e1e <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e0a:	f7fd ff51 	bl	8001cb0 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d902      	bls.n	8003e1e <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	73fb      	strb	r3, [r7, #15]
        break;
 8003e1c:	e005      	b.n	8003e2a <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e1e:	4b3b      	ldr	r3, [pc, #236]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1ef      	bne.n	8003e0a <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d168      	bne.n	8003f02 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d113      	bne.n	8003e5e <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e36:	4b35      	ldr	r3, [pc, #212]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e38:	695a      	ldr	r2, [r3, #20]
 8003e3a:	4b35      	ldr	r3, [pc, #212]	; (8003f10 <RCCEx_PLLSAI2_Config+0x1d4>)
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6892      	ldr	r2, [r2, #8]
 8003e42:	0211      	lsls	r1, r2, #8
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	68d2      	ldr	r2, [r2, #12]
 8003e48:	06d2      	lsls	r2, r2, #27
 8003e4a:	4311      	orrs	r1, r2
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6852      	ldr	r2, [r2, #4]
 8003e50:	3a01      	subs	r2, #1
 8003e52:	0112      	lsls	r2, r2, #4
 8003e54:	430a      	orrs	r2, r1
 8003e56:	492d      	ldr	r1, [pc, #180]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	614b      	str	r3, [r1, #20]
 8003e5c:	e02d      	b.n	8003eba <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d115      	bne.n	8003e90 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e64:	4b29      	ldr	r3, [pc, #164]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e66:	695a      	ldr	r2, [r3, #20]
 8003e68:	4b2a      	ldr	r3, [pc, #168]	; (8003f14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6892      	ldr	r2, [r2, #8]
 8003e70:	0211      	lsls	r1, r2, #8
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6912      	ldr	r2, [r2, #16]
 8003e76:	0852      	lsrs	r2, r2, #1
 8003e78:	3a01      	subs	r2, #1
 8003e7a:	0552      	lsls	r2, r2, #21
 8003e7c:	4311      	orrs	r1, r2
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6852      	ldr	r2, [r2, #4]
 8003e82:	3a01      	subs	r2, #1
 8003e84:	0112      	lsls	r2, r2, #4
 8003e86:	430a      	orrs	r2, r1
 8003e88:	4920      	ldr	r1, [pc, #128]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	614b      	str	r3, [r1, #20]
 8003e8e:	e014      	b.n	8003eba <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e90:	4b1e      	ldr	r3, [pc, #120]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e92:	695a      	ldr	r2, [r3, #20]
 8003e94:	4b20      	ldr	r3, [pc, #128]	; (8003f18 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6892      	ldr	r2, [r2, #8]
 8003e9c:	0211      	lsls	r1, r2, #8
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6952      	ldr	r2, [r2, #20]
 8003ea2:	0852      	lsrs	r2, r2, #1
 8003ea4:	3a01      	subs	r2, #1
 8003ea6:	0652      	lsls	r2, r2, #25
 8003ea8:	4311      	orrs	r1, r2
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6852      	ldr	r2, [r2, #4]
 8003eae:	3a01      	subs	r2, #1
 8003eb0:	0112      	lsls	r2, r2, #4
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	4915      	ldr	r1, [pc, #84]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003eba:	4b14      	ldr	r3, [pc, #80]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a13      	ldr	r2, [pc, #76]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec6:	f7fd fef3 	bl	8001cb0 <HAL_GetTick>
 8003eca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ecc:	e009      	b.n	8003ee2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ece:	f7fd feef 	bl	8001cb0 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d902      	bls.n	8003ee2 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	73fb      	strb	r3, [r7, #15]
          break;
 8003ee0:	e005      	b.n	8003eee <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ee2:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0ef      	beq.n	8003ece <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d106      	bne.n	8003f02 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ef6:	695a      	ldr	r2, [r3, #20]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	4903      	ldr	r1, [pc, #12]	; (8003f0c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	07ff800f 	.word	0x07ff800f
 8003f14:	ff9f800f 	.word	0xff9f800f
 8003f18:	f9ff800f 	.word	0xf9ff800f

08003f1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e07c      	b.n	8004028 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d106      	bne.n	8003f4e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7fd fbdd 	bl	8001708 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2202      	movs	r2, #2
 8003f52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f64:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f6e:	d902      	bls.n	8003f76 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f70:	2300      	movs	r3, #0
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	e002      	b.n	8003f7c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f7a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f84:	d007      	beq.n	8003f96 <HAL_SPI_Init+0x7a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f8e:	d002      	beq.n	8003f96 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10b      	bne.n	8003fb6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fa6:	d903      	bls.n	8003fb0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	631a      	str	r2, [r3, #48]	; 0x30
 8003fae:	e002      	b.n	8003fb6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	ea42 0103 	orr.w	r1, r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	0c1b      	lsrs	r3, r3, #16
 8003ff6:	f003 0204 	and.w	r2, r3, #4
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	ea42 0103 	orr.w	r1, r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	430a      	orrs	r2, r1
 8004016:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	4613      	mov	r3, r2
 800403e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_SPI_Transmit+0x22>
 800404e:	2302      	movs	r3, #2
 8004050:	e150      	b.n	80042f4 <HAL_SPI_Transmit+0x2c4>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800405a:	f7fd fe29 	bl	8001cb0 <HAL_GetTick>
 800405e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004060:	88fb      	ldrh	r3, [r7, #6]
 8004062:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b01      	cmp	r3, #1
 800406e:	d002      	beq.n	8004076 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004070:	2302      	movs	r3, #2
 8004072:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004074:	e135      	b.n	80042e2 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <HAL_SPI_Transmit+0x52>
 800407c:	88fb      	ldrh	r3, [r7, #6]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d102      	bne.n	8004088 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004086:	e12c      	b.n	80042e2 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2203      	movs	r2, #3
 800408c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	88fa      	ldrh	r2, [r7, #6]
 80040a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	88fa      	ldrh	r2, [r7, #6]
 80040a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d2:	d107      	bne.n	80040e4 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ee:	2b40      	cmp	r3, #64	; 0x40
 80040f0:	d007      	beq.n	8004102 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004100:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800410a:	d94b      	bls.n	80041a4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <HAL_SPI_Transmit+0xea>
 8004114:	8afb      	ldrh	r3, [r7, #22]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d13e      	bne.n	8004198 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	881a      	ldrh	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412a:	1c9a      	adds	r2, r3, #2
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800413e:	e02b      	b.n	8004198 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b02      	cmp	r3, #2
 800414c:	d112      	bne.n	8004174 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	881a      	ldrh	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415e:	1c9a      	adds	r2, r3, #2
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004168:	b29b      	uxth	r3, r3
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004172:	e011      	b.n	8004198 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004174:	f7fd fd9c 	bl	8001cb0 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d803      	bhi.n	800418c <HAL_SPI_Transmit+0x15c>
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418a:	d102      	bne.n	8004192 <HAL_SPI_Transmit+0x162>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d102      	bne.n	8004198 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004196:	e0a4      	b.n	80042e2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1ce      	bne.n	8004140 <HAL_SPI_Transmit+0x110>
 80041a2:	e07c      	b.n	800429e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d002      	beq.n	80041b2 <HAL_SPI_Transmit+0x182>
 80041ac:	8afb      	ldrh	r3, [r7, #22]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d170      	bne.n	8004294 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d912      	bls.n	80041e2 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	881a      	ldrh	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041cc:	1c9a      	adds	r2, r3, #2
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b02      	subs	r3, #2
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041e0:	e058      	b.n	8004294 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	330c      	adds	r3, #12
 80041ec:	7812      	ldrb	r2, [r2, #0]
 80041ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004208:	e044      	b.n	8004294 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b02      	cmp	r3, #2
 8004216:	d12b      	bne.n	8004270 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b01      	cmp	r3, #1
 8004220:	d912      	bls.n	8004248 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004226:	881a      	ldrh	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	1c9a      	adds	r2, r3, #2
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b02      	subs	r3, #2
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004246:	e025      	b.n	8004294 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	330c      	adds	r3, #12
 8004252:	7812      	ldrb	r2, [r2, #0]
 8004254:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004264:	b29b      	uxth	r3, r3
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800426e:	e011      	b.n	8004294 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004270:	f7fd fd1e 	bl	8001cb0 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d803      	bhi.n	8004288 <HAL_SPI_Transmit+0x258>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004286:	d102      	bne.n	800428e <HAL_SPI_Transmit+0x25e>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d102      	bne.n	8004294 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004292:	e026      	b.n	80042e2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1b5      	bne.n	800420a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	6839      	ldr	r1, [r7, #0]
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 fb14 	bl	80048d0 <SPI_EndRxTxTransaction>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2220      	movs	r2, #32
 80042b2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10a      	bne.n	80042d2 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042bc:	2300      	movs	r3, #0
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	77fb      	strb	r3, [r7, #31]
 80042de:	e000      	b.n	80042e2 <HAL_SPI_Transmit+0x2b2>
  }

error:
 80042e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80042f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3720      	adds	r7, #32
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08a      	sub	sp, #40	; 0x28
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
 8004308:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800430a:	2301      	movs	r3, #1
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <HAL_SPI_TransmitReceive+0x26>
 800431e:	2302      	movs	r3, #2
 8004320:	e1fb      	b.n	800471a <HAL_SPI_TransmitReceive+0x41e>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800432a:	f7fd fcc1 	bl	8001cb0 <HAL_GetTick>
 800432e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004336:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800433e:	887b      	ldrh	r3, [r7, #2]
 8004340:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004342:	887b      	ldrh	r3, [r7, #2]
 8004344:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004346:	7efb      	ldrb	r3, [r7, #27]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d00e      	beq.n	800436a <HAL_SPI_TransmitReceive+0x6e>
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004352:	d106      	bne.n	8004362 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d102      	bne.n	8004362 <HAL_SPI_TransmitReceive+0x66>
 800435c:	7efb      	ldrb	r3, [r7, #27]
 800435e:	2b04      	cmp	r3, #4
 8004360:	d003      	beq.n	800436a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004362:	2302      	movs	r3, #2
 8004364:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004368:	e1cd      	b.n	8004706 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d005      	beq.n	800437c <HAL_SPI_TransmitReceive+0x80>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <HAL_SPI_TransmitReceive+0x80>
 8004376:	887b      	ldrh	r3, [r7, #2]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d103      	bne.n	8004384 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004382:	e1c0      	b.n	8004706 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b04      	cmp	r3, #4
 800438e:	d003      	beq.n	8004398 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2205      	movs	r2, #5
 8004394:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	887a      	ldrh	r2, [r7, #2]
 80043a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	887a      	ldrh	r2, [r7, #2]
 80043b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	887a      	ldrh	r2, [r7, #2]
 80043be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	887a      	ldrh	r2, [r7, #2]
 80043c4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043da:	d802      	bhi.n	80043e2 <HAL_SPI_TransmitReceive+0xe6>
 80043dc:	8a3b      	ldrh	r3, [r7, #16]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d908      	bls.n	80043f4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043f0:	605a      	str	r2, [r3, #4]
 80043f2:	e007      	b.n	8004404 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004402:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440e:	2b40      	cmp	r3, #64	; 0x40
 8004410:	d007      	beq.n	8004422 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004420:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800442a:	d97c      	bls.n	8004526 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <HAL_SPI_TransmitReceive+0x13e>
 8004434:	8a7b      	ldrh	r3, [r7, #18]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d169      	bne.n	800450e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443e:	881a      	ldrh	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	1c9a      	adds	r2, r3, #2
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004454:	b29b      	uxth	r3, r3
 8004456:	3b01      	subs	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800445e:	e056      	b.n	800450e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b02      	cmp	r3, #2
 800446c:	d11b      	bne.n	80044a6 <HAL_SPI_TransmitReceive+0x1aa>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004472:	b29b      	uxth	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d016      	beq.n	80044a6 <HAL_SPI_TransmitReceive+0x1aa>
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	2b01      	cmp	r3, #1
 800447c:	d113      	bne.n	80044a6 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004482:	881a      	ldrh	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448e:	1c9a      	adds	r2, r3, #2
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b01      	subs	r3, #1
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d11c      	bne.n	80044ee <HAL_SPI_TransmitReceive+0x1f2>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d016      	beq.n	80044ee <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	b292      	uxth	r2, r2
 80044cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	1c9a      	adds	r2, r3, #2
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044ea:	2301      	movs	r3, #1
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80044ee:	f7fd fbdf 	bl	8001cb0 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d807      	bhi.n	800450e <HAL_SPI_TransmitReceive+0x212>
 80044fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004504:	d003      	beq.n	800450e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800450c:	e0fb      	b.n	8004706 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004512:	b29b      	uxth	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1a3      	bne.n	8004460 <HAL_SPI_TransmitReceive+0x164>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800451e:	b29b      	uxth	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d19d      	bne.n	8004460 <HAL_SPI_TransmitReceive+0x164>
 8004524:	e0df      	b.n	80046e6 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_SPI_TransmitReceive+0x23a>
 800452e:	8a7b      	ldrh	r3, [r7, #18]
 8004530:	2b01      	cmp	r3, #1
 8004532:	f040 80cb 	bne.w	80046cc <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b01      	cmp	r3, #1
 800453e:	d912      	bls.n	8004566 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	881a      	ldrh	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	1c9a      	adds	r2, r3, #2
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800455a:	b29b      	uxth	r3, r3
 800455c:	3b02      	subs	r3, #2
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004564:	e0b2      	b.n	80046cc <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	330c      	adds	r3, #12
 8004570:	7812      	ldrb	r2, [r2, #0]
 8004572:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800458c:	e09e      	b.n	80046cc <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b02      	cmp	r3, #2
 800459a:	d134      	bne.n	8004606 <HAL_SPI_TransmitReceive+0x30a>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d02f      	beq.n	8004606 <HAL_SPI_TransmitReceive+0x30a>
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d12c      	bne.n	8004606 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d912      	bls.n	80045dc <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	881a      	ldrh	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c6:	1c9a      	adds	r2, r3, #2
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b02      	subs	r3, #2
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045da:	e012      	b.n	8004602 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	330c      	adds	r3, #12
 80045e6:	7812      	ldrb	r2, [r2, #0]
 80045e8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b01      	cmp	r3, #1
 8004612:	d148      	bne.n	80046a6 <HAL_SPI_TransmitReceive+0x3aa>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800461a:	b29b      	uxth	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d042      	beq.n	80046a6 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004626:	b29b      	uxth	r3, r3
 8004628:	2b01      	cmp	r3, #1
 800462a:	d923      	bls.n	8004674 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	b292      	uxth	r2, r2
 8004638:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	1c9a      	adds	r2, r3, #2
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b02      	subs	r3, #2
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b01      	cmp	r3, #1
 8004660:	d81f      	bhi.n	80046a2 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004670:	605a      	str	r2, [r3, #4]
 8004672:	e016      	b.n	80046a2 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f103 020c 	add.w	r2, r3, #12
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	7812      	ldrb	r2, [r2, #0]
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046a2:	2301      	movs	r3, #1
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046a6:	f7fd fb03 	bl	8001cb0 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d803      	bhi.n	80046be <HAL_SPI_TransmitReceive+0x3c2>
 80046b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046bc:	d102      	bne.n	80046c4 <HAL_SPI_TransmitReceive+0x3c8>
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d103      	bne.n	80046cc <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80046ca:	e01c      	b.n	8004706 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f47f af5b 	bne.w	800458e <HAL_SPI_TransmitReceive+0x292>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f47f af54 	bne.w	800458e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046e6:	69fa      	ldr	r2, [r7, #28]
 80046e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 f8f0 	bl	80048d0 <SPI_EndRxTxTransaction>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d006      	beq.n	8004704 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2220      	movs	r2, #32
 8004700:	661a      	str	r2, [r3, #96]	; 0x60
 8004702:	e000      	b.n	8004706 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004704:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004716:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800471a:	4618      	mov	r0, r3
 800471c:	3728      	adds	r7, #40	; 0x28
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	60f8      	str	r0, [r7, #12]
 800472a:	60b9      	str	r1, [r7, #8]
 800472c:	603b      	str	r3, [r7, #0]
 800472e:	4613      	mov	r3, r2
 8004730:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004732:	e04c      	b.n	80047ce <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473a:	d048      	beq.n	80047ce <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800473c:	f7fd fab8 	bl	8001cb0 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d902      	bls.n	8004752 <SPI_WaitFlagStateUntilTimeout+0x30>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d13d      	bne.n	80047ce <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004760:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800476a:	d111      	bne.n	8004790 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004774:	d004      	beq.n	8004780 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800477e:	d107      	bne.n	8004790 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800478e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004798:	d10f      	bne.n	80047ba <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e00f      	b.n	80047ee <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4013      	ands	r3, r2
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	429a      	cmp	r2, r3
 80047dc:	bf0c      	ite	eq
 80047de:	2301      	moveq	r3, #1
 80047e0:	2300      	movne	r3, #0
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	461a      	mov	r2, r3
 80047e6:	79fb      	ldrb	r3, [r7, #7]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d1a3      	bne.n	8004734 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b084      	sub	sp, #16
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	607a      	str	r2, [r7, #4]
 8004802:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004804:	e057      	b.n	80048b6 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800480c:	d106      	bne.n	800481c <SPI_WaitFifoStateUntilTimeout+0x26>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d103      	bne.n	800481c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	330c      	adds	r3, #12
 800481a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004822:	d048      	beq.n	80048b6 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004824:	f7fd fa44 	bl	8001cb0 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d902      	bls.n	800483a <SPI_WaitFifoStateUntilTimeout+0x44>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d13d      	bne.n	80048b6 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004848:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004852:	d111      	bne.n	8004878 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800485c:	d004      	beq.n	8004868 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004866:	d107      	bne.n	8004878 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004876:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004880:	d10f      	bne.n	80048a2 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e008      	b.n	80048c8 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	4013      	ands	r3, r2
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d19f      	bne.n	8004806 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af02      	add	r7, sp, #8
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f7ff ff84 	bl	80047f6 <SPI_WaitFifoStateUntilTimeout>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d007      	beq.n	8004904 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f8:	f043 0220 	orr.w	r2, r3, #32
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e027      	b.n	8004954 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2200      	movs	r2, #0
 800490c:	2180      	movs	r1, #128	; 0x80
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f7ff ff07 	bl	8004722 <SPI_WaitFlagStateUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d007      	beq.n	800492a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491e:	f043 0220 	orr.w	r2, r3, #32
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e014      	b.n	8004954 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2200      	movs	r2, #0
 8004932:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f7ff ff5d 	bl	80047f6 <SPI_WaitFifoStateUntilTimeout>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d007      	beq.n	8004952 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004946:	f043 0220 	orr.w	r2, r3, #32
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e000      	b.n	8004954 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e042      	b.n	80049f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004974:	2b00      	cmp	r3, #0
 8004976:	d106      	bne.n	8004986 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7fd f869 	bl	8001a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2224      	movs	r2, #36	; 0x24
 800498a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0201 	bic.w	r2, r2, #1
 800499c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f996 	bl	8004cd0 <UART_SetConfig>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d101      	bne.n	80049ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e022      	b.n	80049f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f001 fb4a 	bl	8006050 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689a      	ldr	r2, [r3, #8]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0201 	orr.w	r2, r2, #1
 80049ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f001 fbd1 	bl	8006194 <UART_CheckIdleState>
 80049f2:	4603      	mov	r3, r0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b08a      	sub	sp, #40	; 0x28
 8004a00:	af02      	add	r7, sp, #8
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	603b      	str	r3, [r7, #0]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a12:	2b20      	cmp	r3, #32
 8004a14:	f040 8084 	bne.w	8004b20 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <HAL_UART_Transmit+0x28>
 8004a1e:	88fb      	ldrh	r3, [r7, #6]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e07c      	b.n	8004b22 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d101      	bne.n	8004a36 <HAL_UART_Transmit+0x3a>
 8004a32:	2302      	movs	r3, #2
 8004a34:	e075      	b.n	8004b22 <HAL_UART_Transmit+0x126>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2221      	movs	r2, #33	; 0x21
 8004a4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004a4e:	f7fd f92f 	bl	8001cb0 <HAL_GetTick>
 8004a52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	88fa      	ldrh	r2, [r7, #6]
 8004a58:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	88fa      	ldrh	r2, [r7, #6]
 8004a60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6c:	d108      	bne.n	8004a80 <HAL_UART_Transmit+0x84>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d104      	bne.n	8004a80 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	61bb      	str	r3, [r7, #24]
 8004a7e:	e003      	b.n	8004a88 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a88:	e02d      	b.n	8004ae6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2200      	movs	r2, #0
 8004a92:	2180      	movs	r1, #128	; 0x80
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f001 fbc5 	bl	8006224 <UART_WaitOnFlagUntilTimeout>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e03e      	b.n	8004b22 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10b      	bne.n	8004ac2 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	881a      	ldrh	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ab6:	b292      	uxth	r2, r2
 8004ab8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	3302      	adds	r3, #2
 8004abe:	61bb      	str	r3, [r7, #24]
 8004ac0:	e008      	b.n	8004ad4 <HAL_UART_Transmit+0xd8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	781a      	ldrb	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	b292      	uxth	r2, r2
 8004acc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1cb      	bne.n	8004a8a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2200      	movs	r2, #0
 8004afa:	2140      	movs	r1, #64	; 0x40
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f001 fb91 	bl	8006224 <UART_WaitOnFlagUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <HAL_UART_Transmit+0x110>
    {
      return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e00a      	b.n	8004b22 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	e000      	b.n	8004b22 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004b20:	2302      	movs	r3, #2
  }
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3720      	adds	r7, #32
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b08a      	sub	sp, #40	; 0x28
 8004b2e:	af02      	add	r7, sp, #8
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	603b      	str	r3, [r7, #0]
 8004b36:	4613      	mov	r3, r2
 8004b38:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	f040 80be 	bne.w	8004cc2 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_UART_Receive+0x28>
 8004b4c:	88fb      	ldrh	r3, [r7, #6]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e0b6      	b.n	8004cc4 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_UART_Receive+0x3a>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e0af      	b.n	8004cc4 <HAL_UART_Receive+0x19a>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2222      	movs	r2, #34	; 0x22
 8004b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004b7c:	f7fd f898 	bl	8001cb0 <HAL_GetTick>
 8004b80:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	88fa      	ldrh	r2, [r7, #6]
 8004b86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	88fa      	ldrh	r2, [r7, #6]
 8004b8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9a:	d10e      	bne.n	8004bba <HAL_UART_Receive+0x90>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d105      	bne.n	8004bb0 <HAL_UART_Receive+0x86>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004baa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004bae:	e02d      	b.n	8004c0c <HAL_UART_Receive+0xe2>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	22ff      	movs	r2, #255	; 0xff
 8004bb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004bb8:	e028      	b.n	8004c0c <HAL_UART_Receive+0xe2>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10d      	bne.n	8004bde <HAL_UART_Receive+0xb4>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d104      	bne.n	8004bd4 <HAL_UART_Receive+0xaa>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	22ff      	movs	r2, #255	; 0xff
 8004bce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004bd2:	e01b      	b.n	8004c0c <HAL_UART_Receive+0xe2>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	227f      	movs	r2, #127	; 0x7f
 8004bd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004bdc:	e016      	b.n	8004c0c <HAL_UART_Receive+0xe2>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004be6:	d10d      	bne.n	8004c04 <HAL_UART_Receive+0xda>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d104      	bne.n	8004bfa <HAL_UART_Receive+0xd0>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	227f      	movs	r2, #127	; 0x7f
 8004bf4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004bf8:	e008      	b.n	8004c0c <HAL_UART_Receive+0xe2>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	223f      	movs	r2, #63	; 0x3f
 8004bfe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c02:	e003      	b.n	8004c0c <HAL_UART_Receive+0xe2>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004c12:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c1c:	d108      	bne.n	8004c30 <HAL_UART_Receive+0x106>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d104      	bne.n	8004c30 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 8004c26:	2300      	movs	r3, #0
 8004c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	61bb      	str	r3, [r7, #24]
 8004c2e:	e003      	b.n	8004c38 <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c34:	2300      	movs	r3, #0
 8004c36:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004c38:	e033      	b.n	8004ca2 <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2200      	movs	r2, #0
 8004c42:	2120      	movs	r1, #32
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f001 faed 	bl	8006224 <UART_WaitOnFlagUntilTimeout>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <HAL_UART_Receive+0x12a>
      {
        return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e037      	b.n	8004cc4 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10c      	bne.n	8004c74 <HAL_UART_Receive+0x14a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	8a7b      	ldrh	r3, [r7, #18]
 8004c64:	4013      	ands	r3, r2
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	3302      	adds	r3, #2
 8004c70:	61bb      	str	r3, [r7, #24]
 8004c72:	e00d      	b.n	8004c90 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	8a7b      	ldrh	r3, [r7, #18]
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	4013      	ands	r3, r2
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1c5      	bne.n	8004c3a <HAL_UART_Receive+0x110>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_UNLOCK(huart);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e000      	b.n	8004cc4 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004cc2:	2302      	movs	r3, #2
  }
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3720      	adds	r7, #32
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	0000      	movs	r0, r0
	...

08004cd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cd0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004cd4:	b088      	sub	sp, #32
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d02:	69fa      	ldr	r2, [r7, #28]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	4bac      	ldr	r3, [pc, #688]	; (8004fc0 <UART_SetConfig+0x2f0>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6812      	ldr	r2, [r2, #0]
 8004d16:	69f9      	ldr	r1, [r7, #28]
 8004d18:	430b      	orrs	r3, r1
 8004d1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4aa1      	ldr	r2, [pc, #644]	; (8004fc4 <UART_SetConfig+0x2f4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d004      	beq.n	8004d4c <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	69fa      	ldr	r2, [r7, #28]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004d56:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6812      	ldr	r2, [r2, #0]
 8004d5e:	69f9      	ldr	r1, [r7, #28]
 8004d60:	430b      	orrs	r3, r1
 8004d62:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6a:	f023 010f 	bic.w	r1, r3, #15
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a92      	ldr	r2, [pc, #584]	; (8004fc8 <UART_SetConfig+0x2f8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d121      	bne.n	8004dc8 <UART_SetConfig+0xf8>
 8004d84:	4b91      	ldr	r3, [pc, #580]	; (8004fcc <UART_SetConfig+0x2fc>)
 8004d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d816      	bhi.n	8004dc0 <UART_SetConfig+0xf0>
 8004d92:	a201      	add	r2, pc, #4	; (adr r2, 8004d98 <UART_SetConfig+0xc8>)
 8004d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d98:	08004da9 	.word	0x08004da9
 8004d9c:	08004db5 	.word	0x08004db5
 8004da0:	08004daf 	.word	0x08004daf
 8004da4:	08004dbb 	.word	0x08004dbb
 8004da8:	2301      	movs	r3, #1
 8004daa:	76fb      	strb	r3, [r7, #27]
 8004dac:	e0e8      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004dae:	2302      	movs	r3, #2
 8004db0:	76fb      	strb	r3, [r7, #27]
 8004db2:	e0e5      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004db4:	2304      	movs	r3, #4
 8004db6:	76fb      	strb	r3, [r7, #27]
 8004db8:	e0e2      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004dba:	2308      	movs	r3, #8
 8004dbc:	76fb      	strb	r3, [r7, #27]
 8004dbe:	e0df      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004dc0:	2310      	movs	r3, #16
 8004dc2:	76fb      	strb	r3, [r7, #27]
 8004dc4:	bf00      	nop
 8004dc6:	e0db      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a80      	ldr	r2, [pc, #512]	; (8004fd0 <UART_SetConfig+0x300>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d134      	bne.n	8004e3c <UART_SetConfig+0x16c>
 8004dd2:	4b7e      	ldr	r3, [pc, #504]	; (8004fcc <UART_SetConfig+0x2fc>)
 8004dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd8:	f003 030c 	and.w	r3, r3, #12
 8004ddc:	2b0c      	cmp	r3, #12
 8004dde:	d829      	bhi.n	8004e34 <UART_SetConfig+0x164>
 8004de0:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <UART_SetConfig+0x118>)
 8004de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de6:	bf00      	nop
 8004de8:	08004e1d 	.word	0x08004e1d
 8004dec:	08004e35 	.word	0x08004e35
 8004df0:	08004e35 	.word	0x08004e35
 8004df4:	08004e35 	.word	0x08004e35
 8004df8:	08004e29 	.word	0x08004e29
 8004dfc:	08004e35 	.word	0x08004e35
 8004e00:	08004e35 	.word	0x08004e35
 8004e04:	08004e35 	.word	0x08004e35
 8004e08:	08004e23 	.word	0x08004e23
 8004e0c:	08004e35 	.word	0x08004e35
 8004e10:	08004e35 	.word	0x08004e35
 8004e14:	08004e35 	.word	0x08004e35
 8004e18:	08004e2f 	.word	0x08004e2f
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	76fb      	strb	r3, [r7, #27]
 8004e20:	e0ae      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004e22:	2302      	movs	r3, #2
 8004e24:	76fb      	strb	r3, [r7, #27]
 8004e26:	e0ab      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004e28:	2304      	movs	r3, #4
 8004e2a:	76fb      	strb	r3, [r7, #27]
 8004e2c:	e0a8      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004e2e:	2308      	movs	r3, #8
 8004e30:	76fb      	strb	r3, [r7, #27]
 8004e32:	e0a5      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004e34:	2310      	movs	r3, #16
 8004e36:	76fb      	strb	r3, [r7, #27]
 8004e38:	bf00      	nop
 8004e3a:	e0a1      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a64      	ldr	r2, [pc, #400]	; (8004fd4 <UART_SetConfig+0x304>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d120      	bne.n	8004e88 <UART_SetConfig+0x1b8>
 8004e46:	4b61      	ldr	r3, [pc, #388]	; (8004fcc <UART_SetConfig+0x2fc>)
 8004e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e50:	2b10      	cmp	r3, #16
 8004e52:	d00f      	beq.n	8004e74 <UART_SetConfig+0x1a4>
 8004e54:	2b10      	cmp	r3, #16
 8004e56:	d802      	bhi.n	8004e5e <UART_SetConfig+0x18e>
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d005      	beq.n	8004e68 <UART_SetConfig+0x198>
 8004e5c:	e010      	b.n	8004e80 <UART_SetConfig+0x1b0>
 8004e5e:	2b20      	cmp	r3, #32
 8004e60:	d005      	beq.n	8004e6e <UART_SetConfig+0x19e>
 8004e62:	2b30      	cmp	r3, #48	; 0x30
 8004e64:	d009      	beq.n	8004e7a <UART_SetConfig+0x1aa>
 8004e66:	e00b      	b.n	8004e80 <UART_SetConfig+0x1b0>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	76fb      	strb	r3, [r7, #27]
 8004e6c:	e088      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	76fb      	strb	r3, [r7, #27]
 8004e72:	e085      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004e74:	2304      	movs	r3, #4
 8004e76:	76fb      	strb	r3, [r7, #27]
 8004e78:	e082      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004e7a:	2308      	movs	r3, #8
 8004e7c:	76fb      	strb	r3, [r7, #27]
 8004e7e:	e07f      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004e80:	2310      	movs	r3, #16
 8004e82:	76fb      	strb	r3, [r7, #27]
 8004e84:	bf00      	nop
 8004e86:	e07b      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a52      	ldr	r2, [pc, #328]	; (8004fd8 <UART_SetConfig+0x308>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d120      	bne.n	8004ed4 <UART_SetConfig+0x204>
 8004e92:	4b4e      	ldr	r3, [pc, #312]	; (8004fcc <UART_SetConfig+0x2fc>)
 8004e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e9c:	2b40      	cmp	r3, #64	; 0x40
 8004e9e:	d00f      	beq.n	8004ec0 <UART_SetConfig+0x1f0>
 8004ea0:	2b40      	cmp	r3, #64	; 0x40
 8004ea2:	d802      	bhi.n	8004eaa <UART_SetConfig+0x1da>
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <UART_SetConfig+0x1e4>
 8004ea8:	e010      	b.n	8004ecc <UART_SetConfig+0x1fc>
 8004eaa:	2b80      	cmp	r3, #128	; 0x80
 8004eac:	d005      	beq.n	8004eba <UART_SetConfig+0x1ea>
 8004eae:	2bc0      	cmp	r3, #192	; 0xc0
 8004eb0:	d009      	beq.n	8004ec6 <UART_SetConfig+0x1f6>
 8004eb2:	e00b      	b.n	8004ecc <UART_SetConfig+0x1fc>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	76fb      	strb	r3, [r7, #27]
 8004eb8:	e062      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	76fb      	strb	r3, [r7, #27]
 8004ebe:	e05f      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004ec0:	2304      	movs	r3, #4
 8004ec2:	76fb      	strb	r3, [r7, #27]
 8004ec4:	e05c      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004ec6:	2308      	movs	r3, #8
 8004ec8:	76fb      	strb	r3, [r7, #27]
 8004eca:	e059      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004ecc:	2310      	movs	r3, #16
 8004ece:	76fb      	strb	r3, [r7, #27]
 8004ed0:	bf00      	nop
 8004ed2:	e055      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a40      	ldr	r2, [pc, #256]	; (8004fdc <UART_SetConfig+0x30c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d124      	bne.n	8004f28 <UART_SetConfig+0x258>
 8004ede:	4b3b      	ldr	r3, [pc, #236]	; (8004fcc <UART_SetConfig+0x2fc>)
 8004ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eec:	d012      	beq.n	8004f14 <UART_SetConfig+0x244>
 8004eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef2:	d802      	bhi.n	8004efa <UART_SetConfig+0x22a>
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d007      	beq.n	8004f08 <UART_SetConfig+0x238>
 8004ef8:	e012      	b.n	8004f20 <UART_SetConfig+0x250>
 8004efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004efe:	d006      	beq.n	8004f0e <UART_SetConfig+0x23e>
 8004f00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f04:	d009      	beq.n	8004f1a <UART_SetConfig+0x24a>
 8004f06:	e00b      	b.n	8004f20 <UART_SetConfig+0x250>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	76fb      	strb	r3, [r7, #27]
 8004f0c:	e038      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004f0e:	2302      	movs	r3, #2
 8004f10:	76fb      	strb	r3, [r7, #27]
 8004f12:	e035      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004f14:	2304      	movs	r3, #4
 8004f16:	76fb      	strb	r3, [r7, #27]
 8004f18:	e032      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004f1a:	2308      	movs	r3, #8
 8004f1c:	76fb      	strb	r3, [r7, #27]
 8004f1e:	e02f      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004f20:	2310      	movs	r3, #16
 8004f22:	76fb      	strb	r3, [r7, #27]
 8004f24:	bf00      	nop
 8004f26:	e02b      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a25      	ldr	r2, [pc, #148]	; (8004fc4 <UART_SetConfig+0x2f4>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d124      	bne.n	8004f7c <UART_SetConfig+0x2ac>
 8004f32:	4b26      	ldr	r3, [pc, #152]	; (8004fcc <UART_SetConfig+0x2fc>)
 8004f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f40:	d012      	beq.n	8004f68 <UART_SetConfig+0x298>
 8004f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f46:	d802      	bhi.n	8004f4e <UART_SetConfig+0x27e>
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d007      	beq.n	8004f5c <UART_SetConfig+0x28c>
 8004f4c:	e012      	b.n	8004f74 <UART_SetConfig+0x2a4>
 8004f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f52:	d006      	beq.n	8004f62 <UART_SetConfig+0x292>
 8004f54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f58:	d009      	beq.n	8004f6e <UART_SetConfig+0x29e>
 8004f5a:	e00b      	b.n	8004f74 <UART_SetConfig+0x2a4>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	76fb      	strb	r3, [r7, #27]
 8004f60:	e00e      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004f62:	2302      	movs	r3, #2
 8004f64:	76fb      	strb	r3, [r7, #27]
 8004f66:	e00b      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004f68:	2304      	movs	r3, #4
 8004f6a:	76fb      	strb	r3, [r7, #27]
 8004f6c:	e008      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004f6e:	2308      	movs	r3, #8
 8004f70:	76fb      	strb	r3, [r7, #27]
 8004f72:	e005      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004f74:	2310      	movs	r3, #16
 8004f76:	76fb      	strb	r3, [r7, #27]
 8004f78:	bf00      	nop
 8004f7a:	e001      	b.n	8004f80 <UART_SetConfig+0x2b0>
 8004f7c:	2310      	movs	r3, #16
 8004f7e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a0f      	ldr	r2, [pc, #60]	; (8004fc4 <UART_SetConfig+0x2f4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	f040 842d 	bne.w	80057e6 <UART_SetConfig+0xb16>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f8c:	7efb      	ldrb	r3, [r7, #27]
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	f200 816b 	bhi.w	800526a <UART_SetConfig+0x59a>
 8004f94:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <UART_SetConfig+0x2cc>)
 8004f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9a:	bf00      	nop
 8004f9c:	08004fe1 	.word	0x08004fe1
 8004fa0:	0800526b 	.word	0x0800526b
 8004fa4:	08005083 	.word	0x08005083
 8004fa8:	0800526b 	.word	0x0800526b
 8004fac:	0800511b 	.word	0x0800511b
 8004fb0:	0800526b 	.word	0x0800526b
 8004fb4:	0800526b 	.word	0x0800526b
 8004fb8:	0800526b 	.word	0x0800526b
 8004fbc:	080051bd 	.word	0x080051bd
 8004fc0:	cfff69f3 	.word	0xcfff69f3
 8004fc4:	40008000 	.word	0x40008000
 8004fc8:	40013800 	.word	0x40013800
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	40004400 	.word	0x40004400
 8004fd4:	40004800 	.word	0x40004800
 8004fd8:	40004c00 	.word	0x40004c00
 8004fdc:	40005000 	.word	0x40005000
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004fe0:	f7fe f9a6 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d044      	beq.n	8005078 <UART_SetConfig+0x3a8>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d03e      	beq.n	8005074 <UART_SetConfig+0x3a4>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d038      	beq.n	8005070 <UART_SetConfig+0x3a0>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	2b03      	cmp	r3, #3
 8005004:	d032      	beq.n	800506c <UART_SetConfig+0x39c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	2b04      	cmp	r3, #4
 800500c:	d02c      	beq.n	8005068 <UART_SetConfig+0x398>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	2b05      	cmp	r3, #5
 8005014:	d026      	beq.n	8005064 <UART_SetConfig+0x394>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	2b06      	cmp	r3, #6
 800501c:	d020      	beq.n	8005060 <UART_SetConfig+0x390>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	2b07      	cmp	r3, #7
 8005024:	d01a      	beq.n	800505c <UART_SetConfig+0x38c>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	2b08      	cmp	r3, #8
 800502c:	d014      	beq.n	8005058 <UART_SetConfig+0x388>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	2b09      	cmp	r3, #9
 8005034:	d00e      	beq.n	8005054 <UART_SetConfig+0x384>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	2b0a      	cmp	r3, #10
 800503c:	d008      	beq.n	8005050 <UART_SetConfig+0x380>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	2b0b      	cmp	r3, #11
 8005044:	d102      	bne.n	800504c <UART_SetConfig+0x37c>
 8005046:	f44f 7380 	mov.w	r3, #256	; 0x100
 800504a:	e016      	b.n	800507a <UART_SetConfig+0x3aa>
 800504c:	2301      	movs	r3, #1
 800504e:	e014      	b.n	800507a <UART_SetConfig+0x3aa>
 8005050:	2380      	movs	r3, #128	; 0x80
 8005052:	e012      	b.n	800507a <UART_SetConfig+0x3aa>
 8005054:	2340      	movs	r3, #64	; 0x40
 8005056:	e010      	b.n	800507a <UART_SetConfig+0x3aa>
 8005058:	2320      	movs	r3, #32
 800505a:	e00e      	b.n	800507a <UART_SetConfig+0x3aa>
 800505c:	2310      	movs	r3, #16
 800505e:	e00c      	b.n	800507a <UART_SetConfig+0x3aa>
 8005060:	230c      	movs	r3, #12
 8005062:	e00a      	b.n	800507a <UART_SetConfig+0x3aa>
 8005064:	230a      	movs	r3, #10
 8005066:	e008      	b.n	800507a <UART_SetConfig+0x3aa>
 8005068:	2308      	movs	r3, #8
 800506a:	e006      	b.n	800507a <UART_SetConfig+0x3aa>
 800506c:	2306      	movs	r3, #6
 800506e:	e004      	b.n	800507a <UART_SetConfig+0x3aa>
 8005070:	2304      	movs	r3, #4
 8005072:	e002      	b.n	800507a <UART_SetConfig+0x3aa>
 8005074:	2302      	movs	r3, #2
 8005076:	e000      	b.n	800507a <UART_SetConfig+0x3aa>
 8005078:	2301      	movs	r3, #1
 800507a:	fbb2 f3f3 	udiv	r3, r2, r3
 800507e:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8005080:	e0f6      	b.n	8005270 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	2b00      	cmp	r3, #0
 8005088:	d044      	beq.n	8005114 <UART_SetConfig+0x444>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	2b01      	cmp	r3, #1
 8005090:	d03e      	beq.n	8005110 <UART_SetConfig+0x440>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	2b02      	cmp	r3, #2
 8005098:	d038      	beq.n	800510c <UART_SetConfig+0x43c>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d032      	beq.n	8005108 <UART_SetConfig+0x438>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d02c      	beq.n	8005104 <UART_SetConfig+0x434>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	2b05      	cmp	r3, #5
 80050b0:	d026      	beq.n	8005100 <UART_SetConfig+0x430>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	2b06      	cmp	r3, #6
 80050b8:	d020      	beq.n	80050fc <UART_SetConfig+0x42c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	2b07      	cmp	r3, #7
 80050c0:	d01a      	beq.n	80050f8 <UART_SetConfig+0x428>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d014      	beq.n	80050f4 <UART_SetConfig+0x424>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	2b09      	cmp	r3, #9
 80050d0:	d00e      	beq.n	80050f0 <UART_SetConfig+0x420>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	2b0a      	cmp	r3, #10
 80050d8:	d008      	beq.n	80050ec <UART_SetConfig+0x41c>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	2b0b      	cmp	r3, #11
 80050e0:	d102      	bne.n	80050e8 <UART_SetConfig+0x418>
 80050e2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80050e6:	e016      	b.n	8005116 <UART_SetConfig+0x446>
 80050e8:	4ba1      	ldr	r3, [pc, #644]	; (8005370 <UART_SetConfig+0x6a0>)
 80050ea:	e014      	b.n	8005116 <UART_SetConfig+0x446>
 80050ec:	4ba1      	ldr	r3, [pc, #644]	; (8005374 <UART_SetConfig+0x6a4>)
 80050ee:	e012      	b.n	8005116 <UART_SetConfig+0x446>
 80050f0:	4ba1      	ldr	r3, [pc, #644]	; (8005378 <UART_SetConfig+0x6a8>)
 80050f2:	e010      	b.n	8005116 <UART_SetConfig+0x446>
 80050f4:	4ba1      	ldr	r3, [pc, #644]	; (800537c <UART_SetConfig+0x6ac>)
 80050f6:	e00e      	b.n	8005116 <UART_SetConfig+0x446>
 80050f8:	4ba1      	ldr	r3, [pc, #644]	; (8005380 <UART_SetConfig+0x6b0>)
 80050fa:	e00c      	b.n	8005116 <UART_SetConfig+0x446>
 80050fc:	4ba1      	ldr	r3, [pc, #644]	; (8005384 <UART_SetConfig+0x6b4>)
 80050fe:	e00a      	b.n	8005116 <UART_SetConfig+0x446>
 8005100:	4ba1      	ldr	r3, [pc, #644]	; (8005388 <UART_SetConfig+0x6b8>)
 8005102:	e008      	b.n	8005116 <UART_SetConfig+0x446>
 8005104:	4ba1      	ldr	r3, [pc, #644]	; (800538c <UART_SetConfig+0x6bc>)
 8005106:	e006      	b.n	8005116 <UART_SetConfig+0x446>
 8005108:	4ba1      	ldr	r3, [pc, #644]	; (8005390 <UART_SetConfig+0x6c0>)
 800510a:	e004      	b.n	8005116 <UART_SetConfig+0x446>
 800510c:	4ba1      	ldr	r3, [pc, #644]	; (8005394 <UART_SetConfig+0x6c4>)
 800510e:	e002      	b.n	8005116 <UART_SetConfig+0x446>
 8005110:	4ba1      	ldr	r3, [pc, #644]	; (8005398 <UART_SetConfig+0x6c8>)
 8005112:	e000      	b.n	8005116 <UART_SetConfig+0x446>
 8005114:	4b96      	ldr	r3, [pc, #600]	; (8005370 <UART_SetConfig+0x6a0>)
 8005116:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8005118:	e0aa      	b.n	8005270 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800511a:	f7fe f873 	bl	8003204 <HAL_RCC_GetSysClockFreq>
 800511e:	4602      	mov	r2, r0
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	2b00      	cmp	r3, #0
 8005126:	d044      	beq.n	80051b2 <UART_SetConfig+0x4e2>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	2b01      	cmp	r3, #1
 800512e:	d03e      	beq.n	80051ae <UART_SetConfig+0x4de>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	2b02      	cmp	r3, #2
 8005136:	d038      	beq.n	80051aa <UART_SetConfig+0x4da>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	2b03      	cmp	r3, #3
 800513e:	d032      	beq.n	80051a6 <UART_SetConfig+0x4d6>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	2b04      	cmp	r3, #4
 8005146:	d02c      	beq.n	80051a2 <UART_SetConfig+0x4d2>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	2b05      	cmp	r3, #5
 800514e:	d026      	beq.n	800519e <UART_SetConfig+0x4ce>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	2b06      	cmp	r3, #6
 8005156:	d020      	beq.n	800519a <UART_SetConfig+0x4ca>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	2b07      	cmp	r3, #7
 800515e:	d01a      	beq.n	8005196 <UART_SetConfig+0x4c6>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	2b08      	cmp	r3, #8
 8005166:	d014      	beq.n	8005192 <UART_SetConfig+0x4c2>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	2b09      	cmp	r3, #9
 800516e:	d00e      	beq.n	800518e <UART_SetConfig+0x4be>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	2b0a      	cmp	r3, #10
 8005176:	d008      	beq.n	800518a <UART_SetConfig+0x4ba>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	2b0b      	cmp	r3, #11
 800517e:	d102      	bne.n	8005186 <UART_SetConfig+0x4b6>
 8005180:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005184:	e016      	b.n	80051b4 <UART_SetConfig+0x4e4>
 8005186:	2301      	movs	r3, #1
 8005188:	e014      	b.n	80051b4 <UART_SetConfig+0x4e4>
 800518a:	2380      	movs	r3, #128	; 0x80
 800518c:	e012      	b.n	80051b4 <UART_SetConfig+0x4e4>
 800518e:	2340      	movs	r3, #64	; 0x40
 8005190:	e010      	b.n	80051b4 <UART_SetConfig+0x4e4>
 8005192:	2320      	movs	r3, #32
 8005194:	e00e      	b.n	80051b4 <UART_SetConfig+0x4e4>
 8005196:	2310      	movs	r3, #16
 8005198:	e00c      	b.n	80051b4 <UART_SetConfig+0x4e4>
 800519a:	230c      	movs	r3, #12
 800519c:	e00a      	b.n	80051b4 <UART_SetConfig+0x4e4>
 800519e:	230a      	movs	r3, #10
 80051a0:	e008      	b.n	80051b4 <UART_SetConfig+0x4e4>
 80051a2:	2308      	movs	r3, #8
 80051a4:	e006      	b.n	80051b4 <UART_SetConfig+0x4e4>
 80051a6:	2306      	movs	r3, #6
 80051a8:	e004      	b.n	80051b4 <UART_SetConfig+0x4e4>
 80051aa:	2304      	movs	r3, #4
 80051ac:	e002      	b.n	80051b4 <UART_SetConfig+0x4e4>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e000      	b.n	80051b4 <UART_SetConfig+0x4e4>
 80051b2:	2301      	movs	r3, #1
 80051b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b8:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 80051ba:	e059      	b.n	8005270 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d04e      	beq.n	8005262 <UART_SetConfig+0x592>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d047      	beq.n	800525c <UART_SetConfig+0x58c>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d040      	beq.n	8005256 <UART_SetConfig+0x586>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	2b03      	cmp	r3, #3
 80051da:	d039      	beq.n	8005250 <UART_SetConfig+0x580>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	d032      	beq.n	800524a <UART_SetConfig+0x57a>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	2b05      	cmp	r3, #5
 80051ea:	d02b      	beq.n	8005244 <UART_SetConfig+0x574>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	2b06      	cmp	r3, #6
 80051f2:	d024      	beq.n	800523e <UART_SetConfig+0x56e>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	2b07      	cmp	r3, #7
 80051fa:	d01d      	beq.n	8005238 <UART_SetConfig+0x568>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	2b08      	cmp	r3, #8
 8005202:	d016      	beq.n	8005232 <UART_SetConfig+0x562>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	2b09      	cmp	r3, #9
 800520a:	d00f      	beq.n	800522c <UART_SetConfig+0x55c>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	2b0a      	cmp	r3, #10
 8005212:	d008      	beq.n	8005226 <UART_SetConfig+0x556>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	2b0b      	cmp	r3, #11
 800521a:	d101      	bne.n	8005220 <UART_SetConfig+0x550>
 800521c:	2380      	movs	r3, #128	; 0x80
 800521e:	e022      	b.n	8005266 <UART_SetConfig+0x596>
 8005220:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005224:	e01f      	b.n	8005266 <UART_SetConfig+0x596>
 8005226:	f44f 7380 	mov.w	r3, #256	; 0x100
 800522a:	e01c      	b.n	8005266 <UART_SetConfig+0x596>
 800522c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005230:	e019      	b.n	8005266 <UART_SetConfig+0x596>
 8005232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005236:	e016      	b.n	8005266 <UART_SetConfig+0x596>
 8005238:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800523c:	e013      	b.n	8005266 <UART_SetConfig+0x596>
 800523e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005242:	e010      	b.n	8005266 <UART_SetConfig+0x596>
 8005244:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005248:	e00d      	b.n	8005266 <UART_SetConfig+0x596>
 800524a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800524e:	e00a      	b.n	8005266 <UART_SetConfig+0x596>
 8005250:	f241 5355 	movw	r3, #5461	; 0x1555
 8005254:	e007      	b.n	8005266 <UART_SetConfig+0x596>
 8005256:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800525a:	e004      	b.n	8005266 <UART_SetConfig+0x596>
 800525c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005260:	e001      	b.n	8005266 <UART_SetConfig+0x596>
 8005262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005266:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8005268:	e002      	b.n	8005270 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	74fb      	strb	r3, [r7, #19]
        break;
 800526e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 86c2 	beq.w	8005ffc <UART_SetConfig+0x132c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	4613      	mov	r3, r2
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	4413      	add	r3, r2
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	429a      	cmp	r2, r3
 8005286:	d305      	bcc.n	8005294 <UART_SetConfig+0x5c4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	429a      	cmp	r2, r3
 8005292:	d903      	bls.n	800529c <UART_SetConfig+0x5cc>
      {
        ret = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	74fb      	strb	r3, [r7, #19]
 8005298:	f000 beb0 	b.w	8005ffc <UART_SetConfig+0x132c>
      }
      else
      {
        switch (clocksource)
 800529c:	7efb      	ldrb	r3, [r7, #27]
 800529e:	2b08      	cmp	r3, #8
 80052a0:	f200 828c 	bhi.w	80057bc <UART_SetConfig+0xaec>
 80052a4:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <UART_SetConfig+0x5dc>)
 80052a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052aa:	bf00      	nop
 80052ac:	080052d1 	.word	0x080052d1
 80052b0:	080057bd 	.word	0x080057bd
 80052b4:	0800543b 	.word	0x0800543b
 80052b8:	080057bd 	.word	0x080057bd
 80052bc:	08005531 	.word	0x08005531
 80052c0:	080057bd 	.word	0x080057bd
 80052c4:	080057bd 	.word	0x080057bd
 80052c8:	080057bd 	.word	0x080057bd
 80052cc:	0800566d 	.word	0x0800566d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052d0:	f7fe f82e 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 80052d4:	4603      	mov	r3, r0
 80052d6:	4618      	mov	r0, r3
 80052d8:	f04f 0100 	mov.w	r1, #0
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d07e      	beq.n	80053e2 <UART_SetConfig+0x712>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d075      	beq.n	80053d8 <UART_SetConfig+0x708>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d06c      	beq.n	80053ce <UART_SetConfig+0x6fe>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d063      	beq.n	80053c4 <UART_SetConfig+0x6f4>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	2b04      	cmp	r3, #4
 8005302:	d05a      	beq.n	80053ba <UART_SetConfig+0x6ea>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	2b05      	cmp	r3, #5
 800530a:	d051      	beq.n	80053b0 <UART_SetConfig+0x6e0>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	2b06      	cmp	r3, #6
 8005312:	d048      	beq.n	80053a6 <UART_SetConfig+0x6d6>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	2b07      	cmp	r3, #7
 800531a:	d03f      	beq.n	800539c <UART_SetConfig+0x6cc>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	2b08      	cmp	r3, #8
 8005322:	d01f      	beq.n	8005364 <UART_SetConfig+0x694>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	2b09      	cmp	r3, #9
 800532a:	d016      	beq.n	800535a <UART_SetConfig+0x68a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	2b0a      	cmp	r3, #10
 8005332:	d00d      	beq.n	8005350 <UART_SetConfig+0x680>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	2b0b      	cmp	r3, #11
 800533a:	d104      	bne.n	8005346 <UART_SetConfig+0x676>
 800533c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005340:	f04f 0400 	mov.w	r4, #0
 8005344:	e051      	b.n	80053ea <UART_SetConfig+0x71a>
 8005346:	f04f 0301 	mov.w	r3, #1
 800534a:	f04f 0400 	mov.w	r4, #0
 800534e:	e04c      	b.n	80053ea <UART_SetConfig+0x71a>
 8005350:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005354:	f04f 0400 	mov.w	r4, #0
 8005358:	e047      	b.n	80053ea <UART_SetConfig+0x71a>
 800535a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800535e:	f04f 0400 	mov.w	r4, #0
 8005362:	e042      	b.n	80053ea <UART_SetConfig+0x71a>
 8005364:	f04f 0320 	mov.w	r3, #32
 8005368:	f04f 0400 	mov.w	r4, #0
 800536c:	e03d      	b.n	80053ea <UART_SetConfig+0x71a>
 800536e:	bf00      	nop
 8005370:	00f42400 	.word	0x00f42400
 8005374:	0001e848 	.word	0x0001e848
 8005378:	0003d090 	.word	0x0003d090
 800537c:	0007a120 	.word	0x0007a120
 8005380:	000f4240 	.word	0x000f4240
 8005384:	00145855 	.word	0x00145855
 8005388:	00186a00 	.word	0x00186a00
 800538c:	001e8480 	.word	0x001e8480
 8005390:	0028b0aa 	.word	0x0028b0aa
 8005394:	003d0900 	.word	0x003d0900
 8005398:	007a1200 	.word	0x007a1200
 800539c:	f04f 0310 	mov.w	r3, #16
 80053a0:	f04f 0400 	mov.w	r4, #0
 80053a4:	e021      	b.n	80053ea <UART_SetConfig+0x71a>
 80053a6:	f04f 030c 	mov.w	r3, #12
 80053aa:	f04f 0400 	mov.w	r4, #0
 80053ae:	e01c      	b.n	80053ea <UART_SetConfig+0x71a>
 80053b0:	f04f 030a 	mov.w	r3, #10
 80053b4:	f04f 0400 	mov.w	r4, #0
 80053b8:	e017      	b.n	80053ea <UART_SetConfig+0x71a>
 80053ba:	f04f 0308 	mov.w	r3, #8
 80053be:	f04f 0400 	mov.w	r4, #0
 80053c2:	e012      	b.n	80053ea <UART_SetConfig+0x71a>
 80053c4:	f04f 0306 	mov.w	r3, #6
 80053c8:	f04f 0400 	mov.w	r4, #0
 80053cc:	e00d      	b.n	80053ea <UART_SetConfig+0x71a>
 80053ce:	f04f 0304 	mov.w	r3, #4
 80053d2:	f04f 0400 	mov.w	r4, #0
 80053d6:	e008      	b.n	80053ea <UART_SetConfig+0x71a>
 80053d8:	f04f 0302 	mov.w	r3, #2
 80053dc:	f04f 0400 	mov.w	r4, #0
 80053e0:	e003      	b.n	80053ea <UART_SetConfig+0x71a>
 80053e2:	f04f 0301 	mov.w	r3, #1
 80053e6:	f04f 0400 	mov.w	r4, #0
 80053ea:	461a      	mov	r2, r3
 80053ec:	4623      	mov	r3, r4
 80053ee:	f7fa ff57 	bl	80002a0 <__aeabi_uldivmod>
 80053f2:	4603      	mov	r3, r0
 80053f4:	460c      	mov	r4, r1
 80053f6:	4619      	mov	r1, r3
 80053f8:	4622      	mov	r2, r4
 80053fa:	f04f 0300 	mov.w	r3, #0
 80053fe:	f04f 0400 	mov.w	r4, #0
 8005402:	0214      	lsls	r4, r2, #8
 8005404:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005408:	020b      	lsls	r3, r1, #8
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	6852      	ldr	r2, [r2, #4]
 800540e:	0852      	lsrs	r2, r2, #1
 8005410:	4611      	mov	r1, r2
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	eb13 0b01 	adds.w	fp, r3, r1
 800541a:	eb44 0c02 	adc.w	ip, r4, r2
 800541e:	4658      	mov	r0, fp
 8005420:	4661      	mov	r1, ip
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f04f 0400 	mov.w	r4, #0
 800542a:	461a      	mov	r2, r3
 800542c:	4623      	mov	r3, r4
 800542e:	f7fa ff37 	bl	80002a0 <__aeabi_uldivmod>
 8005432:	4603      	mov	r3, r0
 8005434:	460c      	mov	r4, r1
 8005436:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8005438:	e1c3      	b.n	80057c2 <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	2b00      	cmp	r3, #0
 8005440:	d05b      	beq.n	80054fa <UART_SetConfig+0x82a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	2b01      	cmp	r3, #1
 8005448:	d053      	beq.n	80054f2 <UART_SetConfig+0x822>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	2b02      	cmp	r3, #2
 8005450:	d04b      	beq.n	80054ea <UART_SetConfig+0x81a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	2b03      	cmp	r3, #3
 8005458:	d043      	beq.n	80054e2 <UART_SetConfig+0x812>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	2b04      	cmp	r3, #4
 8005460:	d03b      	beq.n	80054da <UART_SetConfig+0x80a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	2b05      	cmp	r3, #5
 8005468:	d033      	beq.n	80054d2 <UART_SetConfig+0x802>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	2b06      	cmp	r3, #6
 8005470:	d02b      	beq.n	80054ca <UART_SetConfig+0x7fa>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	2b07      	cmp	r3, #7
 8005478:	d023      	beq.n	80054c2 <UART_SetConfig+0x7f2>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	2b08      	cmp	r3, #8
 8005480:	d01b      	beq.n	80054ba <UART_SetConfig+0x7ea>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	2b09      	cmp	r3, #9
 8005488:	d013      	beq.n	80054b2 <UART_SetConfig+0x7e2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	2b0a      	cmp	r3, #10
 8005490:	d00b      	beq.n	80054aa <UART_SetConfig+0x7da>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	2b0b      	cmp	r3, #11
 8005498:	d103      	bne.n	80054a2 <UART_SetConfig+0x7d2>
 800549a:	4bad      	ldr	r3, [pc, #692]	; (8005750 <UART_SetConfig+0xa80>)
 800549c:	f04f 0400 	mov.w	r4, #0
 80054a0:	e02e      	b.n	8005500 <UART_SetConfig+0x830>
 80054a2:	4bac      	ldr	r3, [pc, #688]	; (8005754 <UART_SetConfig+0xa84>)
 80054a4:	f04f 0400 	mov.w	r4, #0
 80054a8:	e02a      	b.n	8005500 <UART_SetConfig+0x830>
 80054aa:	4bab      	ldr	r3, [pc, #684]	; (8005758 <UART_SetConfig+0xa88>)
 80054ac:	f04f 0400 	mov.w	r4, #0
 80054b0:	e026      	b.n	8005500 <UART_SetConfig+0x830>
 80054b2:	4baa      	ldr	r3, [pc, #680]	; (800575c <UART_SetConfig+0xa8c>)
 80054b4:	f04f 0400 	mov.w	r4, #0
 80054b8:	e022      	b.n	8005500 <UART_SetConfig+0x830>
 80054ba:	4ba9      	ldr	r3, [pc, #676]	; (8005760 <UART_SetConfig+0xa90>)
 80054bc:	f04f 0400 	mov.w	r4, #0
 80054c0:	e01e      	b.n	8005500 <UART_SetConfig+0x830>
 80054c2:	4ba8      	ldr	r3, [pc, #672]	; (8005764 <UART_SetConfig+0xa94>)
 80054c4:	f04f 0400 	mov.w	r4, #0
 80054c8:	e01a      	b.n	8005500 <UART_SetConfig+0x830>
 80054ca:	a49d      	add	r4, pc, #628	; (adr r4, 8005740 <UART_SetConfig+0xa70>)
 80054cc:	e9d4 3400 	ldrd	r3, r4, [r4]
 80054d0:	e016      	b.n	8005500 <UART_SetConfig+0x830>
 80054d2:	4ba5      	ldr	r3, [pc, #660]	; (8005768 <UART_SetConfig+0xa98>)
 80054d4:	f04f 0400 	mov.w	r4, #0
 80054d8:	e012      	b.n	8005500 <UART_SetConfig+0x830>
 80054da:	4ba4      	ldr	r3, [pc, #656]	; (800576c <UART_SetConfig+0xa9c>)
 80054dc:	f04f 0400 	mov.w	r4, #0
 80054e0:	e00e      	b.n	8005500 <UART_SetConfig+0x830>
 80054e2:	a499      	add	r4, pc, #612	; (adr r4, 8005748 <UART_SetConfig+0xa78>)
 80054e4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80054e8:	e00a      	b.n	8005500 <UART_SetConfig+0x830>
 80054ea:	4ba1      	ldr	r3, [pc, #644]	; (8005770 <UART_SetConfig+0xaa0>)
 80054ec:	f04f 0400 	mov.w	r4, #0
 80054f0:	e006      	b.n	8005500 <UART_SetConfig+0x830>
 80054f2:	4ba0      	ldr	r3, [pc, #640]	; (8005774 <UART_SetConfig+0xaa4>)
 80054f4:	f04f 0400 	mov.w	r4, #0
 80054f8:	e002      	b.n	8005500 <UART_SetConfig+0x830>
 80054fa:	4b96      	ldr	r3, [pc, #600]	; (8005754 <UART_SetConfig+0xa84>)
 80054fc:	f04f 0400 	mov.w	r4, #0
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6852      	ldr	r2, [r2, #4]
 8005504:	0852      	lsrs	r2, r2, #1
 8005506:	4611      	mov	r1, r2
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	eb13 0b01 	adds.w	fp, r3, r1
 8005510:	eb44 0c02 	adc.w	ip, r4, r2
 8005514:	4658      	mov	r0, fp
 8005516:	4661      	mov	r1, ip
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f04f 0400 	mov.w	r4, #0
 8005520:	461a      	mov	r2, r3
 8005522:	4623      	mov	r3, r4
 8005524:	f7fa febc 	bl	80002a0 <__aeabi_uldivmod>
 8005528:	4603      	mov	r3, r0
 800552a:	460c      	mov	r4, r1
 800552c:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800552e:	e148      	b.n	80057c2 <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005530:	f7fd fe68 	bl	8003204 <HAL_RCC_GetSysClockFreq>
 8005534:	4603      	mov	r3, r0
 8005536:	4618      	mov	r0, r3
 8005538:	f04f 0100 	mov.w	r1, #0
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	2b00      	cmp	r3, #0
 8005542:	d067      	beq.n	8005614 <UART_SetConfig+0x944>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	2b01      	cmp	r3, #1
 800554a:	d05e      	beq.n	800560a <UART_SetConfig+0x93a>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	2b02      	cmp	r3, #2
 8005552:	d055      	beq.n	8005600 <UART_SetConfig+0x930>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	2b03      	cmp	r3, #3
 800555a:	d04c      	beq.n	80055f6 <UART_SetConfig+0x926>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	2b04      	cmp	r3, #4
 8005562:	d043      	beq.n	80055ec <UART_SetConfig+0x91c>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	2b05      	cmp	r3, #5
 800556a:	d03a      	beq.n	80055e2 <UART_SetConfig+0x912>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	2b06      	cmp	r3, #6
 8005572:	d031      	beq.n	80055d8 <UART_SetConfig+0x908>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	2b07      	cmp	r3, #7
 800557a:	d028      	beq.n	80055ce <UART_SetConfig+0x8fe>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	2b08      	cmp	r3, #8
 8005582:	d01f      	beq.n	80055c4 <UART_SetConfig+0x8f4>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	2b09      	cmp	r3, #9
 800558a:	d016      	beq.n	80055ba <UART_SetConfig+0x8ea>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	2b0a      	cmp	r3, #10
 8005592:	d00d      	beq.n	80055b0 <UART_SetConfig+0x8e0>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	2b0b      	cmp	r3, #11
 800559a:	d104      	bne.n	80055a6 <UART_SetConfig+0x8d6>
 800559c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055a0:	f04f 0400 	mov.w	r4, #0
 80055a4:	e03a      	b.n	800561c <UART_SetConfig+0x94c>
 80055a6:	f04f 0301 	mov.w	r3, #1
 80055aa:	f04f 0400 	mov.w	r4, #0
 80055ae:	e035      	b.n	800561c <UART_SetConfig+0x94c>
 80055b0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80055b4:	f04f 0400 	mov.w	r4, #0
 80055b8:	e030      	b.n	800561c <UART_SetConfig+0x94c>
 80055ba:	f04f 0340 	mov.w	r3, #64	; 0x40
 80055be:	f04f 0400 	mov.w	r4, #0
 80055c2:	e02b      	b.n	800561c <UART_SetConfig+0x94c>
 80055c4:	f04f 0320 	mov.w	r3, #32
 80055c8:	f04f 0400 	mov.w	r4, #0
 80055cc:	e026      	b.n	800561c <UART_SetConfig+0x94c>
 80055ce:	f04f 0310 	mov.w	r3, #16
 80055d2:	f04f 0400 	mov.w	r4, #0
 80055d6:	e021      	b.n	800561c <UART_SetConfig+0x94c>
 80055d8:	f04f 030c 	mov.w	r3, #12
 80055dc:	f04f 0400 	mov.w	r4, #0
 80055e0:	e01c      	b.n	800561c <UART_SetConfig+0x94c>
 80055e2:	f04f 030a 	mov.w	r3, #10
 80055e6:	f04f 0400 	mov.w	r4, #0
 80055ea:	e017      	b.n	800561c <UART_SetConfig+0x94c>
 80055ec:	f04f 0308 	mov.w	r3, #8
 80055f0:	f04f 0400 	mov.w	r4, #0
 80055f4:	e012      	b.n	800561c <UART_SetConfig+0x94c>
 80055f6:	f04f 0306 	mov.w	r3, #6
 80055fa:	f04f 0400 	mov.w	r4, #0
 80055fe:	e00d      	b.n	800561c <UART_SetConfig+0x94c>
 8005600:	f04f 0304 	mov.w	r3, #4
 8005604:	f04f 0400 	mov.w	r4, #0
 8005608:	e008      	b.n	800561c <UART_SetConfig+0x94c>
 800560a:	f04f 0302 	mov.w	r3, #2
 800560e:	f04f 0400 	mov.w	r4, #0
 8005612:	e003      	b.n	800561c <UART_SetConfig+0x94c>
 8005614:	f04f 0301 	mov.w	r3, #1
 8005618:	f04f 0400 	mov.w	r4, #0
 800561c:	461a      	mov	r2, r3
 800561e:	4623      	mov	r3, r4
 8005620:	f7fa fe3e 	bl	80002a0 <__aeabi_uldivmod>
 8005624:	4603      	mov	r3, r0
 8005626:	460c      	mov	r4, r1
 8005628:	4619      	mov	r1, r3
 800562a:	4622      	mov	r2, r4
 800562c:	f04f 0300 	mov.w	r3, #0
 8005630:	f04f 0400 	mov.w	r4, #0
 8005634:	0214      	lsls	r4, r2, #8
 8005636:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800563a:	020b      	lsls	r3, r1, #8
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6852      	ldr	r2, [r2, #4]
 8005640:	0852      	lsrs	r2, r2, #1
 8005642:	4611      	mov	r1, r2
 8005644:	f04f 0200 	mov.w	r2, #0
 8005648:	eb13 0b01 	adds.w	fp, r3, r1
 800564c:	eb44 0c02 	adc.w	ip, r4, r2
 8005650:	4658      	mov	r0, fp
 8005652:	4661      	mov	r1, ip
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f04f 0400 	mov.w	r4, #0
 800565c:	461a      	mov	r2, r3
 800565e:	4623      	mov	r3, r4
 8005660:	f7fa fe1e 	bl	80002a0 <__aeabi_uldivmod>
 8005664:	4603      	mov	r3, r0
 8005666:	460c      	mov	r4, r1
 8005668:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800566a:	e0aa      	b.n	80057c2 <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 8087 	beq.w	8005784 <UART_SetConfig+0xab4>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	2b01      	cmp	r3, #1
 800567c:	d05b      	beq.n	8005736 <UART_SetConfig+0xa66>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	2b02      	cmp	r3, #2
 8005684:	d052      	beq.n	800572c <UART_SetConfig+0xa5c>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568a:	2b03      	cmp	r3, #3
 800568c:	d04a      	beq.n	8005724 <UART_SetConfig+0xa54>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005692:	2b04      	cmp	r3, #4
 8005694:	d041      	beq.n	800571a <UART_SetConfig+0xa4a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	2b05      	cmp	r3, #5
 800569c:	d039      	beq.n	8005712 <UART_SetConfig+0xa42>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	2b06      	cmp	r3, #6
 80056a4:	d031      	beq.n	800570a <UART_SetConfig+0xa3a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	2b07      	cmp	r3, #7
 80056ac:	d028      	beq.n	8005700 <UART_SetConfig+0xa30>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	2b08      	cmp	r3, #8
 80056b4:	d01f      	beq.n	80056f6 <UART_SetConfig+0xa26>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	2b09      	cmp	r3, #9
 80056bc:	d016      	beq.n	80056ec <UART_SetConfig+0xa1c>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	2b0a      	cmp	r3, #10
 80056c4:	d00d      	beq.n	80056e2 <UART_SetConfig+0xa12>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	2b0b      	cmp	r3, #11
 80056cc:	d104      	bne.n	80056d8 <UART_SetConfig+0xa08>
 80056ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056d2:	f04f 0400 	mov.w	r4, #0
 80056d6:	e059      	b.n	800578c <UART_SetConfig+0xabc>
 80056d8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80056dc:	f04f 0400 	mov.w	r4, #0
 80056e0:	e054      	b.n	800578c <UART_SetConfig+0xabc>
 80056e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056e6:	f04f 0400 	mov.w	r4, #0
 80056ea:	e04f      	b.n	800578c <UART_SetConfig+0xabc>
 80056ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056f0:	f04f 0400 	mov.w	r4, #0
 80056f4:	e04a      	b.n	800578c <UART_SetConfig+0xabc>
 80056f6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80056fa:	f04f 0400 	mov.w	r4, #0
 80056fe:	e045      	b.n	800578c <UART_SetConfig+0xabc>
 8005700:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005704:	f04f 0400 	mov.w	r4, #0
 8005708:	e040      	b.n	800578c <UART_SetConfig+0xabc>
 800570a:	4b1b      	ldr	r3, [pc, #108]	; (8005778 <UART_SetConfig+0xaa8>)
 800570c:	f04f 0400 	mov.w	r4, #0
 8005710:	e03c      	b.n	800578c <UART_SetConfig+0xabc>
 8005712:	4b1a      	ldr	r3, [pc, #104]	; (800577c <UART_SetConfig+0xaac>)
 8005714:	f04f 0400 	mov.w	r4, #0
 8005718:	e038      	b.n	800578c <UART_SetConfig+0xabc>
 800571a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800571e:	f04f 0400 	mov.w	r4, #0
 8005722:	e033      	b.n	800578c <UART_SetConfig+0xabc>
 8005724:	4b16      	ldr	r3, [pc, #88]	; (8005780 <UART_SetConfig+0xab0>)
 8005726:	f04f 0400 	mov.w	r4, #0
 800572a:	e02f      	b.n	800578c <UART_SetConfig+0xabc>
 800572c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005730:	f04f 0400 	mov.w	r4, #0
 8005734:	e02a      	b.n	800578c <UART_SetConfig+0xabc>
 8005736:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800573a:	f04f 0400 	mov.w	r4, #0
 800573e:	e025      	b.n	800578c <UART_SetConfig+0xabc>
 8005740:	14585500 	.word	0x14585500
 8005744:	00000000 	.word	0x00000000
 8005748:	28b0aa00 	.word	0x28b0aa00
 800574c:	00000000 	.word	0x00000000
 8005750:	00f42400 	.word	0x00f42400
 8005754:	f4240000 	.word	0xf4240000
 8005758:	01e84800 	.word	0x01e84800
 800575c:	03d09000 	.word	0x03d09000
 8005760:	07a12000 	.word	0x07a12000
 8005764:	0f424000 	.word	0x0f424000
 8005768:	186a0000 	.word	0x186a0000
 800576c:	1e848000 	.word	0x1e848000
 8005770:	3d090000 	.word	0x3d090000
 8005774:	7a120000 	.word	0x7a120000
 8005778:	000aaa00 	.word	0x000aaa00
 800577c:	000ccc00 	.word	0x000ccc00
 8005780:	00155500 	.word	0x00155500
 8005784:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005788:	f04f 0400 	mov.w	r4, #0
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	6852      	ldr	r2, [r2, #4]
 8005790:	0852      	lsrs	r2, r2, #1
 8005792:	4611      	mov	r1, r2
 8005794:	f04f 0200 	mov.w	r2, #0
 8005798:	eb13 0b01 	adds.w	fp, r3, r1
 800579c:	eb44 0c02 	adc.w	ip, r4, r2
 80057a0:	4658      	mov	r0, fp
 80057a2:	4661      	mov	r1, ip
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f04f 0400 	mov.w	r4, #0
 80057ac:	461a      	mov	r2, r3
 80057ae:	4623      	mov	r3, r4
 80057b0:	f7fa fd76 	bl	80002a0 <__aeabi_uldivmod>
 80057b4:	4603      	mov	r3, r0
 80057b6:	460c      	mov	r4, r1
 80057b8:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 80057ba:	e002      	b.n	80057c2 <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	74fb      	strb	r3, [r7, #19]
            break;
 80057c0:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057c8:	d309      	bcc.n	80057de <UART_SetConfig+0xb0e>
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057d0:	d205      	bcs.n	80057de <UART_SetConfig+0xb0e>
        {
          huart->Instance->BRR = usartdiv;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	60da      	str	r2, [r3, #12]
 80057da:	f000 bc0f 	b.w	8005ffc <UART_SetConfig+0x132c>
        }
        else
        {
          ret = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	74fb      	strb	r3, [r7, #19]
 80057e2:	f000 bc0b 	b.w	8005ffc <UART_SetConfig+0x132c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ee:	f040 81ff 	bne.w	8005bf0 <UART_SetConfig+0xf20>
  {
    switch (clocksource)
 80057f2:	7efb      	ldrb	r3, [r7, #27]
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	f200 81db 	bhi.w	8005bb0 <UART_SetConfig+0xee0>
 80057fa:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <UART_SetConfig+0xb30>)
 80057fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005800:	08005825 	.word	0x08005825
 8005804:	080058db 	.word	0x080058db
 8005808:	08005991 	.word	0x08005991
 800580c:	08005bb1 	.word	0x08005bb1
 8005810:	08005a39 	.word	0x08005a39
 8005814:	08005bb1 	.word	0x08005bb1
 8005818:	08005bb1 	.word	0x08005bb1
 800581c:	08005bb1 	.word	0x08005bb1
 8005820:	08005aef 	.word	0x08005aef
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005824:	f7fd fd84 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 8005828:	4602      	mov	r2, r0
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582e:	2b00      	cmp	r3, #0
 8005830:	d044      	beq.n	80058bc <UART_SetConfig+0xbec>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005836:	2b01      	cmp	r3, #1
 8005838:	d03e      	beq.n	80058b8 <UART_SetConfig+0xbe8>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	2b02      	cmp	r3, #2
 8005840:	d038      	beq.n	80058b4 <UART_SetConfig+0xbe4>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	2b03      	cmp	r3, #3
 8005848:	d032      	beq.n	80058b0 <UART_SetConfig+0xbe0>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	2b04      	cmp	r3, #4
 8005850:	d02c      	beq.n	80058ac <UART_SetConfig+0xbdc>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	2b05      	cmp	r3, #5
 8005858:	d026      	beq.n	80058a8 <UART_SetConfig+0xbd8>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	2b06      	cmp	r3, #6
 8005860:	d020      	beq.n	80058a4 <UART_SetConfig+0xbd4>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	2b07      	cmp	r3, #7
 8005868:	d01a      	beq.n	80058a0 <UART_SetConfig+0xbd0>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	2b08      	cmp	r3, #8
 8005870:	d014      	beq.n	800589c <UART_SetConfig+0xbcc>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	2b09      	cmp	r3, #9
 8005878:	d00e      	beq.n	8005898 <UART_SetConfig+0xbc8>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	2b0a      	cmp	r3, #10
 8005880:	d008      	beq.n	8005894 <UART_SetConfig+0xbc4>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	2b0b      	cmp	r3, #11
 8005888:	d102      	bne.n	8005890 <UART_SetConfig+0xbc0>
 800588a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800588e:	e016      	b.n	80058be <UART_SetConfig+0xbee>
 8005890:	2301      	movs	r3, #1
 8005892:	e014      	b.n	80058be <UART_SetConfig+0xbee>
 8005894:	2380      	movs	r3, #128	; 0x80
 8005896:	e012      	b.n	80058be <UART_SetConfig+0xbee>
 8005898:	2340      	movs	r3, #64	; 0x40
 800589a:	e010      	b.n	80058be <UART_SetConfig+0xbee>
 800589c:	2320      	movs	r3, #32
 800589e:	e00e      	b.n	80058be <UART_SetConfig+0xbee>
 80058a0:	2310      	movs	r3, #16
 80058a2:	e00c      	b.n	80058be <UART_SetConfig+0xbee>
 80058a4:	230c      	movs	r3, #12
 80058a6:	e00a      	b.n	80058be <UART_SetConfig+0xbee>
 80058a8:	230a      	movs	r3, #10
 80058aa:	e008      	b.n	80058be <UART_SetConfig+0xbee>
 80058ac:	2308      	movs	r3, #8
 80058ae:	e006      	b.n	80058be <UART_SetConfig+0xbee>
 80058b0:	2306      	movs	r3, #6
 80058b2:	e004      	b.n	80058be <UART_SetConfig+0xbee>
 80058b4:	2304      	movs	r3, #4
 80058b6:	e002      	b.n	80058be <UART_SetConfig+0xbee>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e000      	b.n	80058be <UART_SetConfig+0xbee>
 80058bc:	2301      	movs	r3, #1
 80058be:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c2:	005a      	lsls	r2, r3, #1
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	085b      	lsrs	r3, r3, #1
 80058ca:	441a      	add	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80058d8:	e16d      	b.n	8005bb6 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058da:	f7fd fd3f 	bl	800335c <HAL_RCC_GetPCLK2Freq>
 80058de:	4602      	mov	r2, r0
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d044      	beq.n	8005972 <UART_SetConfig+0xca2>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d03e      	beq.n	800596e <UART_SetConfig+0xc9e>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d038      	beq.n	800596a <UART_SetConfig+0xc9a>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d032      	beq.n	8005966 <UART_SetConfig+0xc96>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	2b04      	cmp	r3, #4
 8005906:	d02c      	beq.n	8005962 <UART_SetConfig+0xc92>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	2b05      	cmp	r3, #5
 800590e:	d026      	beq.n	800595e <UART_SetConfig+0xc8e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	2b06      	cmp	r3, #6
 8005916:	d020      	beq.n	800595a <UART_SetConfig+0xc8a>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	2b07      	cmp	r3, #7
 800591e:	d01a      	beq.n	8005956 <UART_SetConfig+0xc86>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	2b08      	cmp	r3, #8
 8005926:	d014      	beq.n	8005952 <UART_SetConfig+0xc82>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	2b09      	cmp	r3, #9
 800592e:	d00e      	beq.n	800594e <UART_SetConfig+0xc7e>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	2b0a      	cmp	r3, #10
 8005936:	d008      	beq.n	800594a <UART_SetConfig+0xc7a>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	2b0b      	cmp	r3, #11
 800593e:	d102      	bne.n	8005946 <UART_SetConfig+0xc76>
 8005940:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005944:	e016      	b.n	8005974 <UART_SetConfig+0xca4>
 8005946:	2301      	movs	r3, #1
 8005948:	e014      	b.n	8005974 <UART_SetConfig+0xca4>
 800594a:	2380      	movs	r3, #128	; 0x80
 800594c:	e012      	b.n	8005974 <UART_SetConfig+0xca4>
 800594e:	2340      	movs	r3, #64	; 0x40
 8005950:	e010      	b.n	8005974 <UART_SetConfig+0xca4>
 8005952:	2320      	movs	r3, #32
 8005954:	e00e      	b.n	8005974 <UART_SetConfig+0xca4>
 8005956:	2310      	movs	r3, #16
 8005958:	e00c      	b.n	8005974 <UART_SetConfig+0xca4>
 800595a:	230c      	movs	r3, #12
 800595c:	e00a      	b.n	8005974 <UART_SetConfig+0xca4>
 800595e:	230a      	movs	r3, #10
 8005960:	e008      	b.n	8005974 <UART_SetConfig+0xca4>
 8005962:	2308      	movs	r3, #8
 8005964:	e006      	b.n	8005974 <UART_SetConfig+0xca4>
 8005966:	2306      	movs	r3, #6
 8005968:	e004      	b.n	8005974 <UART_SetConfig+0xca4>
 800596a:	2304      	movs	r3, #4
 800596c:	e002      	b.n	8005974 <UART_SetConfig+0xca4>
 800596e:	2302      	movs	r3, #2
 8005970:	e000      	b.n	8005974 <UART_SetConfig+0xca4>
 8005972:	2301      	movs	r3, #1
 8005974:	fbb2 f3f3 	udiv	r3, r2, r3
 8005978:	005a      	lsls	r2, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	085b      	lsrs	r3, r3, #1
 8005980:	441a      	add	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	fbb2 f3f3 	udiv	r3, r2, r3
 800598a:	b29b      	uxth	r3, r3
 800598c:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800598e:	e112      	b.n	8005bb6 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	2b00      	cmp	r3, #0
 8005996:	d043      	beq.n	8005a20 <UART_SetConfig+0xd50>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	2b01      	cmp	r3, #1
 800599e:	d03d      	beq.n	8005a1c <UART_SetConfig+0xd4c>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d037      	beq.n	8005a18 <UART_SetConfig+0xd48>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d031      	beq.n	8005a14 <UART_SetConfig+0xd44>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	2b04      	cmp	r3, #4
 80059b6:	d02b      	beq.n	8005a10 <UART_SetConfig+0xd40>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	2b05      	cmp	r3, #5
 80059be:	d025      	beq.n	8005a0c <UART_SetConfig+0xd3c>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	2b06      	cmp	r3, #6
 80059c6:	d01f      	beq.n	8005a08 <UART_SetConfig+0xd38>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	2b07      	cmp	r3, #7
 80059ce:	d019      	beq.n	8005a04 <UART_SetConfig+0xd34>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d013      	beq.n	8005a00 <UART_SetConfig+0xd30>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	2b09      	cmp	r3, #9
 80059de:	d00d      	beq.n	80059fc <UART_SetConfig+0xd2c>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	2b0a      	cmp	r3, #10
 80059e6:	d007      	beq.n	80059f8 <UART_SetConfig+0xd28>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	2b0b      	cmp	r3, #11
 80059ee:	d101      	bne.n	80059f4 <UART_SetConfig+0xd24>
 80059f0:	4b8c      	ldr	r3, [pc, #560]	; (8005c24 <UART_SetConfig+0xf54>)
 80059f2:	e016      	b.n	8005a22 <UART_SetConfig+0xd52>
 80059f4:	4b8c      	ldr	r3, [pc, #560]	; (8005c28 <UART_SetConfig+0xf58>)
 80059f6:	e014      	b.n	8005a22 <UART_SetConfig+0xd52>
 80059f8:	4b8c      	ldr	r3, [pc, #560]	; (8005c2c <UART_SetConfig+0xf5c>)
 80059fa:	e012      	b.n	8005a22 <UART_SetConfig+0xd52>
 80059fc:	4b8c      	ldr	r3, [pc, #560]	; (8005c30 <UART_SetConfig+0xf60>)
 80059fe:	e010      	b.n	8005a22 <UART_SetConfig+0xd52>
 8005a00:	4b8c      	ldr	r3, [pc, #560]	; (8005c34 <UART_SetConfig+0xf64>)
 8005a02:	e00e      	b.n	8005a22 <UART_SetConfig+0xd52>
 8005a04:	4b8c      	ldr	r3, [pc, #560]	; (8005c38 <UART_SetConfig+0xf68>)
 8005a06:	e00c      	b.n	8005a22 <UART_SetConfig+0xd52>
 8005a08:	4b8c      	ldr	r3, [pc, #560]	; (8005c3c <UART_SetConfig+0xf6c>)
 8005a0a:	e00a      	b.n	8005a22 <UART_SetConfig+0xd52>
 8005a0c:	4b8c      	ldr	r3, [pc, #560]	; (8005c40 <UART_SetConfig+0xf70>)
 8005a0e:	e008      	b.n	8005a22 <UART_SetConfig+0xd52>
 8005a10:	4b8c      	ldr	r3, [pc, #560]	; (8005c44 <UART_SetConfig+0xf74>)
 8005a12:	e006      	b.n	8005a22 <UART_SetConfig+0xd52>
 8005a14:	4b8c      	ldr	r3, [pc, #560]	; (8005c48 <UART_SetConfig+0xf78>)
 8005a16:	e004      	b.n	8005a22 <UART_SetConfig+0xd52>
 8005a18:	4b8c      	ldr	r3, [pc, #560]	; (8005c4c <UART_SetConfig+0xf7c>)
 8005a1a:	e002      	b.n	8005a22 <UART_SetConfig+0xd52>
 8005a1c:	4b8c      	ldr	r3, [pc, #560]	; (8005c50 <UART_SetConfig+0xf80>)
 8005a1e:	e000      	b.n	8005a22 <UART_SetConfig+0xd52>
 8005a20:	4b81      	ldr	r3, [pc, #516]	; (8005c28 <UART_SetConfig+0xf58>)
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	6852      	ldr	r2, [r2, #4]
 8005a26:	0852      	lsrs	r2, r2, #1
 8005a28:	441a      	add	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a36:	e0be      	b.n	8005bb6 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a38:	f7fd fbe4 	bl	8003204 <HAL_RCC_GetSysClockFreq>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d044      	beq.n	8005ad0 <UART_SetConfig+0xe00>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d03e      	beq.n	8005acc <UART_SetConfig+0xdfc>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d038      	beq.n	8005ac8 <UART_SetConfig+0xdf8>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d032      	beq.n	8005ac4 <UART_SetConfig+0xdf4>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d02c      	beq.n	8005ac0 <UART_SetConfig+0xdf0>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	2b05      	cmp	r3, #5
 8005a6c:	d026      	beq.n	8005abc <UART_SetConfig+0xdec>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	2b06      	cmp	r3, #6
 8005a74:	d020      	beq.n	8005ab8 <UART_SetConfig+0xde8>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	2b07      	cmp	r3, #7
 8005a7c:	d01a      	beq.n	8005ab4 <UART_SetConfig+0xde4>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	2b08      	cmp	r3, #8
 8005a84:	d014      	beq.n	8005ab0 <UART_SetConfig+0xde0>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	2b09      	cmp	r3, #9
 8005a8c:	d00e      	beq.n	8005aac <UART_SetConfig+0xddc>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	2b0a      	cmp	r3, #10
 8005a94:	d008      	beq.n	8005aa8 <UART_SetConfig+0xdd8>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	2b0b      	cmp	r3, #11
 8005a9c:	d102      	bne.n	8005aa4 <UART_SetConfig+0xdd4>
 8005a9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005aa2:	e016      	b.n	8005ad2 <UART_SetConfig+0xe02>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e014      	b.n	8005ad2 <UART_SetConfig+0xe02>
 8005aa8:	2380      	movs	r3, #128	; 0x80
 8005aaa:	e012      	b.n	8005ad2 <UART_SetConfig+0xe02>
 8005aac:	2340      	movs	r3, #64	; 0x40
 8005aae:	e010      	b.n	8005ad2 <UART_SetConfig+0xe02>
 8005ab0:	2320      	movs	r3, #32
 8005ab2:	e00e      	b.n	8005ad2 <UART_SetConfig+0xe02>
 8005ab4:	2310      	movs	r3, #16
 8005ab6:	e00c      	b.n	8005ad2 <UART_SetConfig+0xe02>
 8005ab8:	230c      	movs	r3, #12
 8005aba:	e00a      	b.n	8005ad2 <UART_SetConfig+0xe02>
 8005abc:	230a      	movs	r3, #10
 8005abe:	e008      	b.n	8005ad2 <UART_SetConfig+0xe02>
 8005ac0:	2308      	movs	r3, #8
 8005ac2:	e006      	b.n	8005ad2 <UART_SetConfig+0xe02>
 8005ac4:	2306      	movs	r3, #6
 8005ac6:	e004      	b.n	8005ad2 <UART_SetConfig+0xe02>
 8005ac8:	2304      	movs	r3, #4
 8005aca:	e002      	b.n	8005ad2 <UART_SetConfig+0xe02>
 8005acc:	2302      	movs	r3, #2
 8005ace:	e000      	b.n	8005ad2 <UART_SetConfig+0xe02>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad6:	005a      	lsls	r2, r3, #1
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	085b      	lsrs	r3, r3, #1
 8005ade:	441a      	add	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005aec:	e063      	b.n	8005bb6 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d04f      	beq.n	8005b96 <UART_SetConfig+0xec6>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d048      	beq.n	8005b90 <UART_SetConfig+0xec0>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d041      	beq.n	8005b8a <UART_SetConfig+0xeba>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	2b03      	cmp	r3, #3
 8005b0c:	d03a      	beq.n	8005b84 <UART_SetConfig+0xeb4>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	2b04      	cmp	r3, #4
 8005b14:	d033      	beq.n	8005b7e <UART_SetConfig+0xeae>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	2b05      	cmp	r3, #5
 8005b1c:	d02c      	beq.n	8005b78 <UART_SetConfig+0xea8>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	2b06      	cmp	r3, #6
 8005b24:	d025      	beq.n	8005b72 <UART_SetConfig+0xea2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	2b07      	cmp	r3, #7
 8005b2c:	d01e      	beq.n	8005b6c <UART_SetConfig+0xe9c>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	2b08      	cmp	r3, #8
 8005b34:	d017      	beq.n	8005b66 <UART_SetConfig+0xe96>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	2b09      	cmp	r3, #9
 8005b3c:	d010      	beq.n	8005b60 <UART_SetConfig+0xe90>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	2b0a      	cmp	r3, #10
 8005b44:	d009      	beq.n	8005b5a <UART_SetConfig+0xe8a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	2b0b      	cmp	r3, #11
 8005b4c:	d102      	bne.n	8005b54 <UART_SetConfig+0xe84>
 8005b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b52:	e022      	b.n	8005b9a <UART_SetConfig+0xeca>
 8005b54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b58:	e01f      	b.n	8005b9a <UART_SetConfig+0xeca>
 8005b5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b5e:	e01c      	b.n	8005b9a <UART_SetConfig+0xeca>
 8005b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b64:	e019      	b.n	8005b9a <UART_SetConfig+0xeca>
 8005b66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b6a:	e016      	b.n	8005b9a <UART_SetConfig+0xeca>
 8005b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b70:	e013      	b.n	8005b9a <UART_SetConfig+0xeca>
 8005b72:	f241 5354 	movw	r3, #5460	; 0x1554
 8005b76:	e010      	b.n	8005b9a <UART_SetConfig+0xeca>
 8005b78:	f641 1398 	movw	r3, #6552	; 0x1998
 8005b7c:	e00d      	b.n	8005b9a <UART_SetConfig+0xeca>
 8005b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b82:	e00a      	b.n	8005b9a <UART_SetConfig+0xeca>
 8005b84:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005b88:	e007      	b.n	8005b9a <UART_SetConfig+0xeca>
 8005b8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005b8e:	e004      	b.n	8005b9a <UART_SetConfig+0xeca>
 8005b90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b94:	e001      	b.n	8005b9a <UART_SetConfig+0xeca>
 8005b96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	6852      	ldr	r2, [r2, #4]
 8005b9e:	0852      	lsrs	r2, r2, #1
 8005ba0:	441a      	add	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005bae:	e002      	b.n	8005bb6 <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	74fb      	strb	r3, [r7, #19]
        break;
 8005bb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2b0f      	cmp	r3, #15
 8005bba:	d916      	bls.n	8005bea <UART_SetConfig+0xf1a>
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bc2:	d212      	bcs.n	8005bea <UART_SetConfig+0xf1a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	f023 030f 	bic.w	r3, r3, #15
 8005bcc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	085b      	lsrs	r3, r3, #1
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	897b      	ldrh	r3, [r7, #10]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	897a      	ldrh	r2, [r7, #10]
 8005be6:	60da      	str	r2, [r3, #12]
 8005be8:	e208      	b.n	8005ffc <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	74fb      	strb	r3, [r7, #19]
 8005bee:	e205      	b.n	8005ffc <UART_SetConfig+0x132c>
    }
  }
  else
  {
    switch (clocksource)
 8005bf0:	7efb      	ldrb	r3, [r7, #27]
 8005bf2:	2b08      	cmp	r3, #8
 8005bf4:	f200 81f1 	bhi.w	8005fda <UART_SetConfig+0x130a>
 8005bf8:	a201      	add	r2, pc, #4	; (adr r2, 8005c00 <UART_SetConfig+0xf30>)
 8005bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfe:	bf00      	nop
 8005c00:	08005c55 	.word	0x08005c55
 8005c04:	08005d09 	.word	0x08005d09
 8005c08:	08005dbd 	.word	0x08005dbd
 8005c0c:	08005fdb 	.word	0x08005fdb
 8005c10:	08005e67 	.word	0x08005e67
 8005c14:	08005fdb 	.word	0x08005fdb
 8005c18:	08005fdb 	.word	0x08005fdb
 8005c1c:	08005fdb 	.word	0x08005fdb
 8005c20:	08005f1b 	.word	0x08005f1b
 8005c24:	0001e848 	.word	0x0001e848
 8005c28:	01e84800 	.word	0x01e84800
 8005c2c:	0003d090 	.word	0x0003d090
 8005c30:	0007a120 	.word	0x0007a120
 8005c34:	000f4240 	.word	0x000f4240
 8005c38:	001e8480 	.word	0x001e8480
 8005c3c:	0028b0aa 	.word	0x0028b0aa
 8005c40:	0030d400 	.word	0x0030d400
 8005c44:	003d0900 	.word	0x003d0900
 8005c48:	00516154 	.word	0x00516154
 8005c4c:	007a1200 	.word	0x007a1200
 8005c50:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c54:	f7fd fb6c 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d044      	beq.n	8005cec <UART_SetConfig+0x101c>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d03e      	beq.n	8005ce8 <UART_SetConfig+0x1018>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d038      	beq.n	8005ce4 <UART_SetConfig+0x1014>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	d032      	beq.n	8005ce0 <UART_SetConfig+0x1010>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	d02c      	beq.n	8005cdc <UART_SetConfig+0x100c>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	2b05      	cmp	r3, #5
 8005c88:	d026      	beq.n	8005cd8 <UART_SetConfig+0x1008>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	2b06      	cmp	r3, #6
 8005c90:	d020      	beq.n	8005cd4 <UART_SetConfig+0x1004>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c96:	2b07      	cmp	r3, #7
 8005c98:	d01a      	beq.n	8005cd0 <UART_SetConfig+0x1000>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	2b08      	cmp	r3, #8
 8005ca0:	d014      	beq.n	8005ccc <UART_SetConfig+0xffc>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca6:	2b09      	cmp	r3, #9
 8005ca8:	d00e      	beq.n	8005cc8 <UART_SetConfig+0xff8>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	2b0a      	cmp	r3, #10
 8005cb0:	d008      	beq.n	8005cc4 <UART_SetConfig+0xff4>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	2b0b      	cmp	r3, #11
 8005cb8:	d102      	bne.n	8005cc0 <UART_SetConfig+0xff0>
 8005cba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cbe:	e016      	b.n	8005cee <UART_SetConfig+0x101e>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e014      	b.n	8005cee <UART_SetConfig+0x101e>
 8005cc4:	2380      	movs	r3, #128	; 0x80
 8005cc6:	e012      	b.n	8005cee <UART_SetConfig+0x101e>
 8005cc8:	2340      	movs	r3, #64	; 0x40
 8005cca:	e010      	b.n	8005cee <UART_SetConfig+0x101e>
 8005ccc:	2320      	movs	r3, #32
 8005cce:	e00e      	b.n	8005cee <UART_SetConfig+0x101e>
 8005cd0:	2310      	movs	r3, #16
 8005cd2:	e00c      	b.n	8005cee <UART_SetConfig+0x101e>
 8005cd4:	230c      	movs	r3, #12
 8005cd6:	e00a      	b.n	8005cee <UART_SetConfig+0x101e>
 8005cd8:	230a      	movs	r3, #10
 8005cda:	e008      	b.n	8005cee <UART_SetConfig+0x101e>
 8005cdc:	2308      	movs	r3, #8
 8005cde:	e006      	b.n	8005cee <UART_SetConfig+0x101e>
 8005ce0:	2306      	movs	r3, #6
 8005ce2:	e004      	b.n	8005cee <UART_SetConfig+0x101e>
 8005ce4:	2304      	movs	r3, #4
 8005ce6:	e002      	b.n	8005cee <UART_SetConfig+0x101e>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e000      	b.n	8005cee <UART_SetConfig+0x101e>
 8005cec:	2301      	movs	r3, #1
 8005cee:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	085b      	lsrs	r3, r3, #1
 8005cf8:	441a      	add	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005d06:	e16b      	b.n	8005fe0 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d08:	f7fd fb28 	bl	800335c <HAL_RCC_GetPCLK2Freq>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d044      	beq.n	8005da0 <UART_SetConfig+0x10d0>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d03e      	beq.n	8005d9c <UART_SetConfig+0x10cc>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d038      	beq.n	8005d98 <UART_SetConfig+0x10c8>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	2b03      	cmp	r3, #3
 8005d2c:	d032      	beq.n	8005d94 <UART_SetConfig+0x10c4>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	2b04      	cmp	r3, #4
 8005d34:	d02c      	beq.n	8005d90 <UART_SetConfig+0x10c0>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	2b05      	cmp	r3, #5
 8005d3c:	d026      	beq.n	8005d8c <UART_SetConfig+0x10bc>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	2b06      	cmp	r3, #6
 8005d44:	d020      	beq.n	8005d88 <UART_SetConfig+0x10b8>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	2b07      	cmp	r3, #7
 8005d4c:	d01a      	beq.n	8005d84 <UART_SetConfig+0x10b4>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	2b08      	cmp	r3, #8
 8005d54:	d014      	beq.n	8005d80 <UART_SetConfig+0x10b0>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	2b09      	cmp	r3, #9
 8005d5c:	d00e      	beq.n	8005d7c <UART_SetConfig+0x10ac>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	2b0a      	cmp	r3, #10
 8005d64:	d008      	beq.n	8005d78 <UART_SetConfig+0x10a8>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	2b0b      	cmp	r3, #11
 8005d6c:	d102      	bne.n	8005d74 <UART_SetConfig+0x10a4>
 8005d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d72:	e016      	b.n	8005da2 <UART_SetConfig+0x10d2>
 8005d74:	2301      	movs	r3, #1
 8005d76:	e014      	b.n	8005da2 <UART_SetConfig+0x10d2>
 8005d78:	2380      	movs	r3, #128	; 0x80
 8005d7a:	e012      	b.n	8005da2 <UART_SetConfig+0x10d2>
 8005d7c:	2340      	movs	r3, #64	; 0x40
 8005d7e:	e010      	b.n	8005da2 <UART_SetConfig+0x10d2>
 8005d80:	2320      	movs	r3, #32
 8005d82:	e00e      	b.n	8005da2 <UART_SetConfig+0x10d2>
 8005d84:	2310      	movs	r3, #16
 8005d86:	e00c      	b.n	8005da2 <UART_SetConfig+0x10d2>
 8005d88:	230c      	movs	r3, #12
 8005d8a:	e00a      	b.n	8005da2 <UART_SetConfig+0x10d2>
 8005d8c:	230a      	movs	r3, #10
 8005d8e:	e008      	b.n	8005da2 <UART_SetConfig+0x10d2>
 8005d90:	2308      	movs	r3, #8
 8005d92:	e006      	b.n	8005da2 <UART_SetConfig+0x10d2>
 8005d94:	2306      	movs	r3, #6
 8005d96:	e004      	b.n	8005da2 <UART_SetConfig+0x10d2>
 8005d98:	2304      	movs	r3, #4
 8005d9a:	e002      	b.n	8005da2 <UART_SetConfig+0x10d2>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	e000      	b.n	8005da2 <UART_SetConfig+0x10d2>
 8005da0:	2301      	movs	r3, #1
 8005da2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	085b      	lsrs	r3, r3, #1
 8005dac:	441a      	add	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005dba:	e111      	b.n	8005fe0 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d044      	beq.n	8005e4e <UART_SetConfig+0x117e>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d03e      	beq.n	8005e4a <UART_SetConfig+0x117a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d038      	beq.n	8005e46 <UART_SetConfig+0x1176>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d032      	beq.n	8005e42 <UART_SetConfig+0x1172>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	d02c      	beq.n	8005e3e <UART_SetConfig+0x116e>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	2b05      	cmp	r3, #5
 8005dea:	d026      	beq.n	8005e3a <UART_SetConfig+0x116a>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	2b06      	cmp	r3, #6
 8005df2:	d020      	beq.n	8005e36 <UART_SetConfig+0x1166>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	2b07      	cmp	r3, #7
 8005dfa:	d01a      	beq.n	8005e32 <UART_SetConfig+0x1162>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	d014      	beq.n	8005e2e <UART_SetConfig+0x115e>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	2b09      	cmp	r3, #9
 8005e0a:	d00e      	beq.n	8005e2a <UART_SetConfig+0x115a>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	2b0a      	cmp	r3, #10
 8005e12:	d008      	beq.n	8005e26 <UART_SetConfig+0x1156>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	2b0b      	cmp	r3, #11
 8005e1a:	d102      	bne.n	8005e22 <UART_SetConfig+0x1152>
 8005e1c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005e20:	e016      	b.n	8005e50 <UART_SetConfig+0x1180>
 8005e22:	4b80      	ldr	r3, [pc, #512]	; (8006024 <UART_SetConfig+0x1354>)
 8005e24:	e014      	b.n	8005e50 <UART_SetConfig+0x1180>
 8005e26:	4b80      	ldr	r3, [pc, #512]	; (8006028 <UART_SetConfig+0x1358>)
 8005e28:	e012      	b.n	8005e50 <UART_SetConfig+0x1180>
 8005e2a:	4b80      	ldr	r3, [pc, #512]	; (800602c <UART_SetConfig+0x135c>)
 8005e2c:	e010      	b.n	8005e50 <UART_SetConfig+0x1180>
 8005e2e:	4b80      	ldr	r3, [pc, #512]	; (8006030 <UART_SetConfig+0x1360>)
 8005e30:	e00e      	b.n	8005e50 <UART_SetConfig+0x1180>
 8005e32:	4b80      	ldr	r3, [pc, #512]	; (8006034 <UART_SetConfig+0x1364>)
 8005e34:	e00c      	b.n	8005e50 <UART_SetConfig+0x1180>
 8005e36:	4b80      	ldr	r3, [pc, #512]	; (8006038 <UART_SetConfig+0x1368>)
 8005e38:	e00a      	b.n	8005e50 <UART_SetConfig+0x1180>
 8005e3a:	4b80      	ldr	r3, [pc, #512]	; (800603c <UART_SetConfig+0x136c>)
 8005e3c:	e008      	b.n	8005e50 <UART_SetConfig+0x1180>
 8005e3e:	4b80      	ldr	r3, [pc, #512]	; (8006040 <UART_SetConfig+0x1370>)
 8005e40:	e006      	b.n	8005e50 <UART_SetConfig+0x1180>
 8005e42:	4b80      	ldr	r3, [pc, #512]	; (8006044 <UART_SetConfig+0x1374>)
 8005e44:	e004      	b.n	8005e50 <UART_SetConfig+0x1180>
 8005e46:	4b80      	ldr	r3, [pc, #512]	; (8006048 <UART_SetConfig+0x1378>)
 8005e48:	e002      	b.n	8005e50 <UART_SetConfig+0x1180>
 8005e4a:	4b80      	ldr	r3, [pc, #512]	; (800604c <UART_SetConfig+0x137c>)
 8005e4c:	e000      	b.n	8005e50 <UART_SetConfig+0x1180>
 8005e4e:	4b75      	ldr	r3, [pc, #468]	; (8006024 <UART_SetConfig+0x1354>)
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6852      	ldr	r2, [r2, #4]
 8005e54:	0852      	lsrs	r2, r2, #1
 8005e56:	441a      	add	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e64:	e0bc      	b.n	8005fe0 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e66:	f7fd f9cd 	bl	8003204 <HAL_RCC_GetSysClockFreq>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d044      	beq.n	8005efe <UART_SetConfig+0x122e>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d03e      	beq.n	8005efa <UART_SetConfig+0x122a>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d038      	beq.n	8005ef6 <UART_SetConfig+0x1226>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d032      	beq.n	8005ef2 <UART_SetConfig+0x1222>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	d02c      	beq.n	8005eee <UART_SetConfig+0x121e>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	2b05      	cmp	r3, #5
 8005e9a:	d026      	beq.n	8005eea <UART_SetConfig+0x121a>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	2b06      	cmp	r3, #6
 8005ea2:	d020      	beq.n	8005ee6 <UART_SetConfig+0x1216>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	2b07      	cmp	r3, #7
 8005eaa:	d01a      	beq.n	8005ee2 <UART_SetConfig+0x1212>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	2b08      	cmp	r3, #8
 8005eb2:	d014      	beq.n	8005ede <UART_SetConfig+0x120e>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	2b09      	cmp	r3, #9
 8005eba:	d00e      	beq.n	8005eda <UART_SetConfig+0x120a>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	2b0a      	cmp	r3, #10
 8005ec2:	d008      	beq.n	8005ed6 <UART_SetConfig+0x1206>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec8:	2b0b      	cmp	r3, #11
 8005eca:	d102      	bne.n	8005ed2 <UART_SetConfig+0x1202>
 8005ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ed0:	e016      	b.n	8005f00 <UART_SetConfig+0x1230>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e014      	b.n	8005f00 <UART_SetConfig+0x1230>
 8005ed6:	2380      	movs	r3, #128	; 0x80
 8005ed8:	e012      	b.n	8005f00 <UART_SetConfig+0x1230>
 8005eda:	2340      	movs	r3, #64	; 0x40
 8005edc:	e010      	b.n	8005f00 <UART_SetConfig+0x1230>
 8005ede:	2320      	movs	r3, #32
 8005ee0:	e00e      	b.n	8005f00 <UART_SetConfig+0x1230>
 8005ee2:	2310      	movs	r3, #16
 8005ee4:	e00c      	b.n	8005f00 <UART_SetConfig+0x1230>
 8005ee6:	230c      	movs	r3, #12
 8005ee8:	e00a      	b.n	8005f00 <UART_SetConfig+0x1230>
 8005eea:	230a      	movs	r3, #10
 8005eec:	e008      	b.n	8005f00 <UART_SetConfig+0x1230>
 8005eee:	2308      	movs	r3, #8
 8005ef0:	e006      	b.n	8005f00 <UART_SetConfig+0x1230>
 8005ef2:	2306      	movs	r3, #6
 8005ef4:	e004      	b.n	8005f00 <UART_SetConfig+0x1230>
 8005ef6:	2304      	movs	r3, #4
 8005ef8:	e002      	b.n	8005f00 <UART_SetConfig+0x1230>
 8005efa:	2302      	movs	r3, #2
 8005efc:	e000      	b.n	8005f00 <UART_SetConfig+0x1230>
 8005efe:	2301      	movs	r3, #1
 8005f00:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	085b      	lsrs	r3, r3, #1
 8005f0a:	441a      	add	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f18:	e062      	b.n	8005fe0 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d04e      	beq.n	8005fc0 <UART_SetConfig+0x12f0>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d047      	beq.n	8005fba <UART_SetConfig+0x12ea>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d040      	beq.n	8005fb4 <UART_SetConfig+0x12e4>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d039      	beq.n	8005fae <UART_SetConfig+0x12de>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d032      	beq.n	8005fa8 <UART_SetConfig+0x12d8>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	2b05      	cmp	r3, #5
 8005f48:	d02b      	beq.n	8005fa2 <UART_SetConfig+0x12d2>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	2b06      	cmp	r3, #6
 8005f50:	d024      	beq.n	8005f9c <UART_SetConfig+0x12cc>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	2b07      	cmp	r3, #7
 8005f58:	d01d      	beq.n	8005f96 <UART_SetConfig+0x12c6>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	2b08      	cmp	r3, #8
 8005f60:	d016      	beq.n	8005f90 <UART_SetConfig+0x12c0>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	2b09      	cmp	r3, #9
 8005f68:	d00f      	beq.n	8005f8a <UART_SetConfig+0x12ba>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	2b0a      	cmp	r3, #10
 8005f70:	d008      	beq.n	8005f84 <UART_SetConfig+0x12b4>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	2b0b      	cmp	r3, #11
 8005f78:	d101      	bne.n	8005f7e <UART_SetConfig+0x12ae>
 8005f7a:	2380      	movs	r3, #128	; 0x80
 8005f7c:	e022      	b.n	8005fc4 <UART_SetConfig+0x12f4>
 8005f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f82:	e01f      	b.n	8005fc4 <UART_SetConfig+0x12f4>
 8005f84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f88:	e01c      	b.n	8005fc4 <UART_SetConfig+0x12f4>
 8005f8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f8e:	e019      	b.n	8005fc4 <UART_SetConfig+0x12f4>
 8005f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f94:	e016      	b.n	8005fc4 <UART_SetConfig+0x12f4>
 8005f96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f9a:	e013      	b.n	8005fc4 <UART_SetConfig+0x12f4>
 8005f9c:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005fa0:	e010      	b.n	8005fc4 <UART_SetConfig+0x12f4>
 8005fa2:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005fa6:	e00d      	b.n	8005fc4 <UART_SetConfig+0x12f4>
 8005fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fac:	e00a      	b.n	8005fc4 <UART_SetConfig+0x12f4>
 8005fae:	f241 5355 	movw	r3, #5461	; 0x1555
 8005fb2:	e007      	b.n	8005fc4 <UART_SetConfig+0x12f4>
 8005fb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005fb8:	e004      	b.n	8005fc4 <UART_SetConfig+0x12f4>
 8005fba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005fbe:	e001      	b.n	8005fc4 <UART_SetConfig+0x12f4>
 8005fc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6852      	ldr	r2, [r2, #4]
 8005fc8:	0852      	lsrs	r2, r2, #1
 8005fca:	441a      	add	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005fd8:	e002      	b.n	8005fe0 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	74fb      	strb	r3, [r7, #19]
        break;
 8005fde:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	2b0f      	cmp	r3, #15
 8005fe4:	d908      	bls.n	8005ff8 <UART_SetConfig+0x1328>
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fec:	d204      	bcs.n	8005ff8 <UART_SetConfig+0x1328>
    {
      huart->Instance->BRR = usartdiv;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	60da      	str	r2, [r3, #12]
 8005ff6:	e001      	b.n	8005ffc <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	74fb      	strb	r3, [r7, #19]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006018:	7cfb      	ldrb	r3, [r7, #19]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3720      	adds	r7, #32
 800601e:	46bd      	mov	sp, r7
 8006020:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006024:	00f42400 	.word	0x00f42400
 8006028:	0001e848 	.word	0x0001e848
 800602c:	0003d090 	.word	0x0003d090
 8006030:	0007a120 	.word	0x0007a120
 8006034:	000f4240 	.word	0x000f4240
 8006038:	00145855 	.word	0x00145855
 800603c:	00186a00 	.word	0x00186a00
 8006040:	001e8480 	.word	0x001e8480
 8006044:	0028b0aa 	.word	0x0028b0aa
 8006048:	003d0900 	.word	0x003d0900
 800604c:	007a1200 	.word	0x007a1200

08006050 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00a      	beq.n	800607a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00a      	beq.n	800609c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00a      	beq.n	80060be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c2:	f003 0308 	and.w	r3, r3, #8
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e4:	f003 0310 	and.w	r3, r3, #16
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612c:	2b00      	cmp	r3, #0
 800612e:	d01a      	beq.n	8006166 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800614a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800614e:	d10a      	bne.n	8006166 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	605a      	str	r2, [r3, #4]
  }
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af02      	add	r7, sp, #8
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80061a4:	f7fb fd84 	bl	8001cb0 <HAL_GetTick>
 80061a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0308 	and.w	r3, r3, #8
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d10e      	bne.n	80061d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f82c 	bl	8006224 <UART_WaitOnFlagUntilTimeout>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e022      	b.n	800621c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0304 	and.w	r3, r3, #4
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d10e      	bne.n	8006202 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f816 	bl	8006224 <UART_WaitOnFlagUntilTimeout>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e00c      	b.n	800621c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2220      	movs	r2, #32
 8006206:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2220      	movs	r2, #32
 800620e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	603b      	str	r3, [r7, #0]
 8006230:	4613      	mov	r3, r2
 8006232:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006234:	e02c      	b.n	8006290 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623c:	d028      	beq.n	8006290 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800623e:	f7fb fd37 	bl	8001cb0 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	429a      	cmp	r2, r3
 800624c:	d302      	bcc.n	8006254 <UART_WaitOnFlagUntilTimeout+0x30>
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d11d      	bne.n	8006290 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006262:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689a      	ldr	r2, [r3, #8]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0201 	bic.w	r2, r2, #1
 8006272:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2220      	movs	r2, #32
 8006278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2220      	movs	r2, #32
 8006280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e00f      	b.n	80062b0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	69da      	ldr	r2, [r3, #28]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	4013      	ands	r3, r2
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	429a      	cmp	r2, r3
 800629e:	bf0c      	ite	eq
 80062a0:	2301      	moveq	r3, #1
 80062a2:	2300      	movne	r3, #0
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	461a      	mov	r2, r3
 80062a8:	79fb      	ldrb	r3, [r7, #7]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d0c3      	beq.n	8006236 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <__errno>:
 80062b8:	4b01      	ldr	r3, [pc, #4]	; (80062c0 <__errno+0x8>)
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	20000014 	.word	0x20000014

080062c4 <__libc_init_array>:
 80062c4:	b570      	push	{r4, r5, r6, lr}
 80062c6:	4e0d      	ldr	r6, [pc, #52]	; (80062fc <__libc_init_array+0x38>)
 80062c8:	4c0d      	ldr	r4, [pc, #52]	; (8006300 <__libc_init_array+0x3c>)
 80062ca:	1ba4      	subs	r4, r4, r6
 80062cc:	10a4      	asrs	r4, r4, #2
 80062ce:	2500      	movs	r5, #0
 80062d0:	42a5      	cmp	r5, r4
 80062d2:	d109      	bne.n	80062e8 <__libc_init_array+0x24>
 80062d4:	4e0b      	ldr	r6, [pc, #44]	; (8006304 <__libc_init_array+0x40>)
 80062d6:	4c0c      	ldr	r4, [pc, #48]	; (8006308 <__libc_init_array+0x44>)
 80062d8:	f000 ff68 	bl	80071ac <_init>
 80062dc:	1ba4      	subs	r4, r4, r6
 80062de:	10a4      	asrs	r4, r4, #2
 80062e0:	2500      	movs	r5, #0
 80062e2:	42a5      	cmp	r5, r4
 80062e4:	d105      	bne.n	80062f2 <__libc_init_array+0x2e>
 80062e6:	bd70      	pop	{r4, r5, r6, pc}
 80062e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062ec:	4798      	blx	r3
 80062ee:	3501      	adds	r5, #1
 80062f0:	e7ee      	b.n	80062d0 <__libc_init_array+0xc>
 80062f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062f6:	4798      	blx	r3
 80062f8:	3501      	adds	r5, #1
 80062fa:	e7f2      	b.n	80062e2 <__libc_init_array+0x1e>
 80062fc:	08081bb0 	.word	0x08081bb0
 8006300:	08081bb0 	.word	0x08081bb0
 8006304:	08081bb0 	.word	0x08081bb0
 8006308:	08081bb4 	.word	0x08081bb4

0800630c <memset>:
 800630c:	4402      	add	r2, r0
 800630e:	4603      	mov	r3, r0
 8006310:	4293      	cmp	r3, r2
 8006312:	d100      	bne.n	8006316 <memset+0xa>
 8006314:	4770      	bx	lr
 8006316:	f803 1b01 	strb.w	r1, [r3], #1
 800631a:	e7f9      	b.n	8006310 <memset+0x4>

0800631c <iprintf>:
 800631c:	b40f      	push	{r0, r1, r2, r3}
 800631e:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <iprintf+0x2c>)
 8006320:	b513      	push	{r0, r1, r4, lr}
 8006322:	681c      	ldr	r4, [r3, #0]
 8006324:	b124      	cbz	r4, 8006330 <iprintf+0x14>
 8006326:	69a3      	ldr	r3, [r4, #24]
 8006328:	b913      	cbnz	r3, 8006330 <iprintf+0x14>
 800632a:	4620      	mov	r0, r4
 800632c:	f000 fa22 	bl	8006774 <__sinit>
 8006330:	ab05      	add	r3, sp, #20
 8006332:	9a04      	ldr	r2, [sp, #16]
 8006334:	68a1      	ldr	r1, [r4, #8]
 8006336:	9301      	str	r3, [sp, #4]
 8006338:	4620      	mov	r0, r4
 800633a:	f000 fbdb 	bl	8006af4 <_vfiprintf_r>
 800633e:	b002      	add	sp, #8
 8006340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006344:	b004      	add	sp, #16
 8006346:	4770      	bx	lr
 8006348:	20000014 	.word	0x20000014

0800634c <_puts_r>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	460e      	mov	r6, r1
 8006350:	4605      	mov	r5, r0
 8006352:	b118      	cbz	r0, 800635c <_puts_r+0x10>
 8006354:	6983      	ldr	r3, [r0, #24]
 8006356:	b90b      	cbnz	r3, 800635c <_puts_r+0x10>
 8006358:	f000 fa0c 	bl	8006774 <__sinit>
 800635c:	69ab      	ldr	r3, [r5, #24]
 800635e:	68ac      	ldr	r4, [r5, #8]
 8006360:	b913      	cbnz	r3, 8006368 <_puts_r+0x1c>
 8006362:	4628      	mov	r0, r5
 8006364:	f000 fa06 	bl	8006774 <__sinit>
 8006368:	4b23      	ldr	r3, [pc, #140]	; (80063f8 <_puts_r+0xac>)
 800636a:	429c      	cmp	r4, r3
 800636c:	d117      	bne.n	800639e <_puts_r+0x52>
 800636e:	686c      	ldr	r4, [r5, #4]
 8006370:	89a3      	ldrh	r3, [r4, #12]
 8006372:	071b      	lsls	r3, r3, #28
 8006374:	d51d      	bpl.n	80063b2 <_puts_r+0x66>
 8006376:	6923      	ldr	r3, [r4, #16]
 8006378:	b1db      	cbz	r3, 80063b2 <_puts_r+0x66>
 800637a:	3e01      	subs	r6, #1
 800637c:	68a3      	ldr	r3, [r4, #8]
 800637e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006382:	3b01      	subs	r3, #1
 8006384:	60a3      	str	r3, [r4, #8]
 8006386:	b9e9      	cbnz	r1, 80063c4 <_puts_r+0x78>
 8006388:	2b00      	cmp	r3, #0
 800638a:	da2e      	bge.n	80063ea <_puts_r+0x9e>
 800638c:	4622      	mov	r2, r4
 800638e:	210a      	movs	r1, #10
 8006390:	4628      	mov	r0, r5
 8006392:	f000 f83f 	bl	8006414 <__swbuf_r>
 8006396:	3001      	adds	r0, #1
 8006398:	d011      	beq.n	80063be <_puts_r+0x72>
 800639a:	200a      	movs	r0, #10
 800639c:	e011      	b.n	80063c2 <_puts_r+0x76>
 800639e:	4b17      	ldr	r3, [pc, #92]	; (80063fc <_puts_r+0xb0>)
 80063a0:	429c      	cmp	r4, r3
 80063a2:	d101      	bne.n	80063a8 <_puts_r+0x5c>
 80063a4:	68ac      	ldr	r4, [r5, #8]
 80063a6:	e7e3      	b.n	8006370 <_puts_r+0x24>
 80063a8:	4b15      	ldr	r3, [pc, #84]	; (8006400 <_puts_r+0xb4>)
 80063aa:	429c      	cmp	r4, r3
 80063ac:	bf08      	it	eq
 80063ae:	68ec      	ldreq	r4, [r5, #12]
 80063b0:	e7de      	b.n	8006370 <_puts_r+0x24>
 80063b2:	4621      	mov	r1, r4
 80063b4:	4628      	mov	r0, r5
 80063b6:	f000 f87f 	bl	80064b8 <__swsetup_r>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	d0dd      	beq.n	800637a <_puts_r+0x2e>
 80063be:	f04f 30ff 	mov.w	r0, #4294967295
 80063c2:	bd70      	pop	{r4, r5, r6, pc}
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	da04      	bge.n	80063d2 <_puts_r+0x86>
 80063c8:	69a2      	ldr	r2, [r4, #24]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	dc06      	bgt.n	80063dc <_puts_r+0x90>
 80063ce:	290a      	cmp	r1, #10
 80063d0:	d004      	beq.n	80063dc <_puts_r+0x90>
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	6022      	str	r2, [r4, #0]
 80063d8:	7019      	strb	r1, [r3, #0]
 80063da:	e7cf      	b.n	800637c <_puts_r+0x30>
 80063dc:	4622      	mov	r2, r4
 80063de:	4628      	mov	r0, r5
 80063e0:	f000 f818 	bl	8006414 <__swbuf_r>
 80063e4:	3001      	adds	r0, #1
 80063e6:	d1c9      	bne.n	800637c <_puts_r+0x30>
 80063e8:	e7e9      	b.n	80063be <_puts_r+0x72>
 80063ea:	6823      	ldr	r3, [r4, #0]
 80063ec:	200a      	movs	r0, #10
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	6022      	str	r2, [r4, #0]
 80063f2:	7018      	strb	r0, [r3, #0]
 80063f4:	e7e5      	b.n	80063c2 <_puts_r+0x76>
 80063f6:	bf00      	nop
 80063f8:	08081b34 	.word	0x08081b34
 80063fc:	08081b54 	.word	0x08081b54
 8006400:	08081b14 	.word	0x08081b14

08006404 <puts>:
 8006404:	4b02      	ldr	r3, [pc, #8]	; (8006410 <puts+0xc>)
 8006406:	4601      	mov	r1, r0
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	f7ff bf9f 	b.w	800634c <_puts_r>
 800640e:	bf00      	nop
 8006410:	20000014 	.word	0x20000014

08006414 <__swbuf_r>:
 8006414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006416:	460e      	mov	r6, r1
 8006418:	4614      	mov	r4, r2
 800641a:	4605      	mov	r5, r0
 800641c:	b118      	cbz	r0, 8006426 <__swbuf_r+0x12>
 800641e:	6983      	ldr	r3, [r0, #24]
 8006420:	b90b      	cbnz	r3, 8006426 <__swbuf_r+0x12>
 8006422:	f000 f9a7 	bl	8006774 <__sinit>
 8006426:	4b21      	ldr	r3, [pc, #132]	; (80064ac <__swbuf_r+0x98>)
 8006428:	429c      	cmp	r4, r3
 800642a:	d12a      	bne.n	8006482 <__swbuf_r+0x6e>
 800642c:	686c      	ldr	r4, [r5, #4]
 800642e:	69a3      	ldr	r3, [r4, #24]
 8006430:	60a3      	str	r3, [r4, #8]
 8006432:	89a3      	ldrh	r3, [r4, #12]
 8006434:	071a      	lsls	r2, r3, #28
 8006436:	d52e      	bpl.n	8006496 <__swbuf_r+0x82>
 8006438:	6923      	ldr	r3, [r4, #16]
 800643a:	b363      	cbz	r3, 8006496 <__swbuf_r+0x82>
 800643c:	6923      	ldr	r3, [r4, #16]
 800643e:	6820      	ldr	r0, [r4, #0]
 8006440:	1ac0      	subs	r0, r0, r3
 8006442:	6963      	ldr	r3, [r4, #20]
 8006444:	b2f6      	uxtb	r6, r6
 8006446:	4283      	cmp	r3, r0
 8006448:	4637      	mov	r7, r6
 800644a:	dc04      	bgt.n	8006456 <__swbuf_r+0x42>
 800644c:	4621      	mov	r1, r4
 800644e:	4628      	mov	r0, r5
 8006450:	f000 f926 	bl	80066a0 <_fflush_r>
 8006454:	bb28      	cbnz	r0, 80064a2 <__swbuf_r+0x8e>
 8006456:	68a3      	ldr	r3, [r4, #8]
 8006458:	3b01      	subs	r3, #1
 800645a:	60a3      	str	r3, [r4, #8]
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	6022      	str	r2, [r4, #0]
 8006462:	701e      	strb	r6, [r3, #0]
 8006464:	6963      	ldr	r3, [r4, #20]
 8006466:	3001      	adds	r0, #1
 8006468:	4283      	cmp	r3, r0
 800646a:	d004      	beq.n	8006476 <__swbuf_r+0x62>
 800646c:	89a3      	ldrh	r3, [r4, #12]
 800646e:	07db      	lsls	r3, r3, #31
 8006470:	d519      	bpl.n	80064a6 <__swbuf_r+0x92>
 8006472:	2e0a      	cmp	r6, #10
 8006474:	d117      	bne.n	80064a6 <__swbuf_r+0x92>
 8006476:	4621      	mov	r1, r4
 8006478:	4628      	mov	r0, r5
 800647a:	f000 f911 	bl	80066a0 <_fflush_r>
 800647e:	b190      	cbz	r0, 80064a6 <__swbuf_r+0x92>
 8006480:	e00f      	b.n	80064a2 <__swbuf_r+0x8e>
 8006482:	4b0b      	ldr	r3, [pc, #44]	; (80064b0 <__swbuf_r+0x9c>)
 8006484:	429c      	cmp	r4, r3
 8006486:	d101      	bne.n	800648c <__swbuf_r+0x78>
 8006488:	68ac      	ldr	r4, [r5, #8]
 800648a:	e7d0      	b.n	800642e <__swbuf_r+0x1a>
 800648c:	4b09      	ldr	r3, [pc, #36]	; (80064b4 <__swbuf_r+0xa0>)
 800648e:	429c      	cmp	r4, r3
 8006490:	bf08      	it	eq
 8006492:	68ec      	ldreq	r4, [r5, #12]
 8006494:	e7cb      	b.n	800642e <__swbuf_r+0x1a>
 8006496:	4621      	mov	r1, r4
 8006498:	4628      	mov	r0, r5
 800649a:	f000 f80d 	bl	80064b8 <__swsetup_r>
 800649e:	2800      	cmp	r0, #0
 80064a0:	d0cc      	beq.n	800643c <__swbuf_r+0x28>
 80064a2:	f04f 37ff 	mov.w	r7, #4294967295
 80064a6:	4638      	mov	r0, r7
 80064a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064aa:	bf00      	nop
 80064ac:	08081b34 	.word	0x08081b34
 80064b0:	08081b54 	.word	0x08081b54
 80064b4:	08081b14 	.word	0x08081b14

080064b8 <__swsetup_r>:
 80064b8:	4b32      	ldr	r3, [pc, #200]	; (8006584 <__swsetup_r+0xcc>)
 80064ba:	b570      	push	{r4, r5, r6, lr}
 80064bc:	681d      	ldr	r5, [r3, #0]
 80064be:	4606      	mov	r6, r0
 80064c0:	460c      	mov	r4, r1
 80064c2:	b125      	cbz	r5, 80064ce <__swsetup_r+0x16>
 80064c4:	69ab      	ldr	r3, [r5, #24]
 80064c6:	b913      	cbnz	r3, 80064ce <__swsetup_r+0x16>
 80064c8:	4628      	mov	r0, r5
 80064ca:	f000 f953 	bl	8006774 <__sinit>
 80064ce:	4b2e      	ldr	r3, [pc, #184]	; (8006588 <__swsetup_r+0xd0>)
 80064d0:	429c      	cmp	r4, r3
 80064d2:	d10f      	bne.n	80064f4 <__swsetup_r+0x3c>
 80064d4:	686c      	ldr	r4, [r5, #4]
 80064d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064da:	b29a      	uxth	r2, r3
 80064dc:	0715      	lsls	r5, r2, #28
 80064de:	d42c      	bmi.n	800653a <__swsetup_r+0x82>
 80064e0:	06d0      	lsls	r0, r2, #27
 80064e2:	d411      	bmi.n	8006508 <__swsetup_r+0x50>
 80064e4:	2209      	movs	r2, #9
 80064e6:	6032      	str	r2, [r6, #0]
 80064e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ec:	81a3      	strh	r3, [r4, #12]
 80064ee:	f04f 30ff 	mov.w	r0, #4294967295
 80064f2:	e03e      	b.n	8006572 <__swsetup_r+0xba>
 80064f4:	4b25      	ldr	r3, [pc, #148]	; (800658c <__swsetup_r+0xd4>)
 80064f6:	429c      	cmp	r4, r3
 80064f8:	d101      	bne.n	80064fe <__swsetup_r+0x46>
 80064fa:	68ac      	ldr	r4, [r5, #8]
 80064fc:	e7eb      	b.n	80064d6 <__swsetup_r+0x1e>
 80064fe:	4b24      	ldr	r3, [pc, #144]	; (8006590 <__swsetup_r+0xd8>)
 8006500:	429c      	cmp	r4, r3
 8006502:	bf08      	it	eq
 8006504:	68ec      	ldreq	r4, [r5, #12]
 8006506:	e7e6      	b.n	80064d6 <__swsetup_r+0x1e>
 8006508:	0751      	lsls	r1, r2, #29
 800650a:	d512      	bpl.n	8006532 <__swsetup_r+0x7a>
 800650c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800650e:	b141      	cbz	r1, 8006522 <__swsetup_r+0x6a>
 8006510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006514:	4299      	cmp	r1, r3
 8006516:	d002      	beq.n	800651e <__swsetup_r+0x66>
 8006518:	4630      	mov	r0, r6
 800651a:	f000 fa19 	bl	8006950 <_free_r>
 800651e:	2300      	movs	r3, #0
 8006520:	6363      	str	r3, [r4, #52]	; 0x34
 8006522:	89a3      	ldrh	r3, [r4, #12]
 8006524:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006528:	81a3      	strh	r3, [r4, #12]
 800652a:	2300      	movs	r3, #0
 800652c:	6063      	str	r3, [r4, #4]
 800652e:	6923      	ldr	r3, [r4, #16]
 8006530:	6023      	str	r3, [r4, #0]
 8006532:	89a3      	ldrh	r3, [r4, #12]
 8006534:	f043 0308 	orr.w	r3, r3, #8
 8006538:	81a3      	strh	r3, [r4, #12]
 800653a:	6923      	ldr	r3, [r4, #16]
 800653c:	b94b      	cbnz	r3, 8006552 <__swsetup_r+0x9a>
 800653e:	89a3      	ldrh	r3, [r4, #12]
 8006540:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006548:	d003      	beq.n	8006552 <__swsetup_r+0x9a>
 800654a:	4621      	mov	r1, r4
 800654c:	4630      	mov	r0, r6
 800654e:	f000 f9bf 	bl	80068d0 <__smakebuf_r>
 8006552:	89a2      	ldrh	r2, [r4, #12]
 8006554:	f012 0301 	ands.w	r3, r2, #1
 8006558:	d00c      	beq.n	8006574 <__swsetup_r+0xbc>
 800655a:	2300      	movs	r3, #0
 800655c:	60a3      	str	r3, [r4, #8]
 800655e:	6963      	ldr	r3, [r4, #20]
 8006560:	425b      	negs	r3, r3
 8006562:	61a3      	str	r3, [r4, #24]
 8006564:	6923      	ldr	r3, [r4, #16]
 8006566:	b953      	cbnz	r3, 800657e <__swsetup_r+0xc6>
 8006568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800656c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006570:	d1ba      	bne.n	80064e8 <__swsetup_r+0x30>
 8006572:	bd70      	pop	{r4, r5, r6, pc}
 8006574:	0792      	lsls	r2, r2, #30
 8006576:	bf58      	it	pl
 8006578:	6963      	ldrpl	r3, [r4, #20]
 800657a:	60a3      	str	r3, [r4, #8]
 800657c:	e7f2      	b.n	8006564 <__swsetup_r+0xac>
 800657e:	2000      	movs	r0, #0
 8006580:	e7f7      	b.n	8006572 <__swsetup_r+0xba>
 8006582:	bf00      	nop
 8006584:	20000014 	.word	0x20000014
 8006588:	08081b34 	.word	0x08081b34
 800658c:	08081b54 	.word	0x08081b54
 8006590:	08081b14 	.word	0x08081b14

08006594 <__sflush_r>:
 8006594:	898a      	ldrh	r2, [r1, #12]
 8006596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800659a:	4605      	mov	r5, r0
 800659c:	0710      	lsls	r0, r2, #28
 800659e:	460c      	mov	r4, r1
 80065a0:	d458      	bmi.n	8006654 <__sflush_r+0xc0>
 80065a2:	684b      	ldr	r3, [r1, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	dc05      	bgt.n	80065b4 <__sflush_r+0x20>
 80065a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	dc02      	bgt.n	80065b4 <__sflush_r+0x20>
 80065ae:	2000      	movs	r0, #0
 80065b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065b6:	2e00      	cmp	r6, #0
 80065b8:	d0f9      	beq.n	80065ae <__sflush_r+0x1a>
 80065ba:	2300      	movs	r3, #0
 80065bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80065c0:	682f      	ldr	r7, [r5, #0]
 80065c2:	6a21      	ldr	r1, [r4, #32]
 80065c4:	602b      	str	r3, [r5, #0]
 80065c6:	d032      	beq.n	800662e <__sflush_r+0x9a>
 80065c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80065ca:	89a3      	ldrh	r3, [r4, #12]
 80065cc:	075a      	lsls	r2, r3, #29
 80065ce:	d505      	bpl.n	80065dc <__sflush_r+0x48>
 80065d0:	6863      	ldr	r3, [r4, #4]
 80065d2:	1ac0      	subs	r0, r0, r3
 80065d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80065d6:	b10b      	cbz	r3, 80065dc <__sflush_r+0x48>
 80065d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065da:	1ac0      	subs	r0, r0, r3
 80065dc:	2300      	movs	r3, #0
 80065de:	4602      	mov	r2, r0
 80065e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065e2:	6a21      	ldr	r1, [r4, #32]
 80065e4:	4628      	mov	r0, r5
 80065e6:	47b0      	blx	r6
 80065e8:	1c43      	adds	r3, r0, #1
 80065ea:	89a3      	ldrh	r3, [r4, #12]
 80065ec:	d106      	bne.n	80065fc <__sflush_r+0x68>
 80065ee:	6829      	ldr	r1, [r5, #0]
 80065f0:	291d      	cmp	r1, #29
 80065f2:	d848      	bhi.n	8006686 <__sflush_r+0xf2>
 80065f4:	4a29      	ldr	r2, [pc, #164]	; (800669c <__sflush_r+0x108>)
 80065f6:	40ca      	lsrs	r2, r1
 80065f8:	07d6      	lsls	r6, r2, #31
 80065fa:	d544      	bpl.n	8006686 <__sflush_r+0xf2>
 80065fc:	2200      	movs	r2, #0
 80065fe:	6062      	str	r2, [r4, #4]
 8006600:	04d9      	lsls	r1, r3, #19
 8006602:	6922      	ldr	r2, [r4, #16]
 8006604:	6022      	str	r2, [r4, #0]
 8006606:	d504      	bpl.n	8006612 <__sflush_r+0x7e>
 8006608:	1c42      	adds	r2, r0, #1
 800660a:	d101      	bne.n	8006610 <__sflush_r+0x7c>
 800660c:	682b      	ldr	r3, [r5, #0]
 800660e:	b903      	cbnz	r3, 8006612 <__sflush_r+0x7e>
 8006610:	6560      	str	r0, [r4, #84]	; 0x54
 8006612:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006614:	602f      	str	r7, [r5, #0]
 8006616:	2900      	cmp	r1, #0
 8006618:	d0c9      	beq.n	80065ae <__sflush_r+0x1a>
 800661a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800661e:	4299      	cmp	r1, r3
 8006620:	d002      	beq.n	8006628 <__sflush_r+0x94>
 8006622:	4628      	mov	r0, r5
 8006624:	f000 f994 	bl	8006950 <_free_r>
 8006628:	2000      	movs	r0, #0
 800662a:	6360      	str	r0, [r4, #52]	; 0x34
 800662c:	e7c0      	b.n	80065b0 <__sflush_r+0x1c>
 800662e:	2301      	movs	r3, #1
 8006630:	4628      	mov	r0, r5
 8006632:	47b0      	blx	r6
 8006634:	1c41      	adds	r1, r0, #1
 8006636:	d1c8      	bne.n	80065ca <__sflush_r+0x36>
 8006638:	682b      	ldr	r3, [r5, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0c5      	beq.n	80065ca <__sflush_r+0x36>
 800663e:	2b1d      	cmp	r3, #29
 8006640:	d001      	beq.n	8006646 <__sflush_r+0xb2>
 8006642:	2b16      	cmp	r3, #22
 8006644:	d101      	bne.n	800664a <__sflush_r+0xb6>
 8006646:	602f      	str	r7, [r5, #0]
 8006648:	e7b1      	b.n	80065ae <__sflush_r+0x1a>
 800664a:	89a3      	ldrh	r3, [r4, #12]
 800664c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006650:	81a3      	strh	r3, [r4, #12]
 8006652:	e7ad      	b.n	80065b0 <__sflush_r+0x1c>
 8006654:	690f      	ldr	r7, [r1, #16]
 8006656:	2f00      	cmp	r7, #0
 8006658:	d0a9      	beq.n	80065ae <__sflush_r+0x1a>
 800665a:	0793      	lsls	r3, r2, #30
 800665c:	680e      	ldr	r6, [r1, #0]
 800665e:	bf08      	it	eq
 8006660:	694b      	ldreq	r3, [r1, #20]
 8006662:	600f      	str	r7, [r1, #0]
 8006664:	bf18      	it	ne
 8006666:	2300      	movne	r3, #0
 8006668:	eba6 0807 	sub.w	r8, r6, r7
 800666c:	608b      	str	r3, [r1, #8]
 800666e:	f1b8 0f00 	cmp.w	r8, #0
 8006672:	dd9c      	ble.n	80065ae <__sflush_r+0x1a>
 8006674:	4643      	mov	r3, r8
 8006676:	463a      	mov	r2, r7
 8006678:	6a21      	ldr	r1, [r4, #32]
 800667a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800667c:	4628      	mov	r0, r5
 800667e:	47b0      	blx	r6
 8006680:	2800      	cmp	r0, #0
 8006682:	dc06      	bgt.n	8006692 <__sflush_r+0xfe>
 8006684:	89a3      	ldrh	r3, [r4, #12]
 8006686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800668a:	81a3      	strh	r3, [r4, #12]
 800668c:	f04f 30ff 	mov.w	r0, #4294967295
 8006690:	e78e      	b.n	80065b0 <__sflush_r+0x1c>
 8006692:	4407      	add	r7, r0
 8006694:	eba8 0800 	sub.w	r8, r8, r0
 8006698:	e7e9      	b.n	800666e <__sflush_r+0xda>
 800669a:	bf00      	nop
 800669c:	20400001 	.word	0x20400001

080066a0 <_fflush_r>:
 80066a0:	b538      	push	{r3, r4, r5, lr}
 80066a2:	690b      	ldr	r3, [r1, #16]
 80066a4:	4605      	mov	r5, r0
 80066a6:	460c      	mov	r4, r1
 80066a8:	b1db      	cbz	r3, 80066e2 <_fflush_r+0x42>
 80066aa:	b118      	cbz	r0, 80066b4 <_fflush_r+0x14>
 80066ac:	6983      	ldr	r3, [r0, #24]
 80066ae:	b90b      	cbnz	r3, 80066b4 <_fflush_r+0x14>
 80066b0:	f000 f860 	bl	8006774 <__sinit>
 80066b4:	4b0c      	ldr	r3, [pc, #48]	; (80066e8 <_fflush_r+0x48>)
 80066b6:	429c      	cmp	r4, r3
 80066b8:	d109      	bne.n	80066ce <_fflush_r+0x2e>
 80066ba:	686c      	ldr	r4, [r5, #4]
 80066bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066c0:	b17b      	cbz	r3, 80066e2 <_fflush_r+0x42>
 80066c2:	4621      	mov	r1, r4
 80066c4:	4628      	mov	r0, r5
 80066c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066ca:	f7ff bf63 	b.w	8006594 <__sflush_r>
 80066ce:	4b07      	ldr	r3, [pc, #28]	; (80066ec <_fflush_r+0x4c>)
 80066d0:	429c      	cmp	r4, r3
 80066d2:	d101      	bne.n	80066d8 <_fflush_r+0x38>
 80066d4:	68ac      	ldr	r4, [r5, #8]
 80066d6:	e7f1      	b.n	80066bc <_fflush_r+0x1c>
 80066d8:	4b05      	ldr	r3, [pc, #20]	; (80066f0 <_fflush_r+0x50>)
 80066da:	429c      	cmp	r4, r3
 80066dc:	bf08      	it	eq
 80066de:	68ec      	ldreq	r4, [r5, #12]
 80066e0:	e7ec      	b.n	80066bc <_fflush_r+0x1c>
 80066e2:	2000      	movs	r0, #0
 80066e4:	bd38      	pop	{r3, r4, r5, pc}
 80066e6:	bf00      	nop
 80066e8:	08081b34 	.word	0x08081b34
 80066ec:	08081b54 	.word	0x08081b54
 80066f0:	08081b14 	.word	0x08081b14

080066f4 <std>:
 80066f4:	2300      	movs	r3, #0
 80066f6:	b510      	push	{r4, lr}
 80066f8:	4604      	mov	r4, r0
 80066fa:	e9c0 3300 	strd	r3, r3, [r0]
 80066fe:	6083      	str	r3, [r0, #8]
 8006700:	8181      	strh	r1, [r0, #12]
 8006702:	6643      	str	r3, [r0, #100]	; 0x64
 8006704:	81c2      	strh	r2, [r0, #14]
 8006706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800670a:	6183      	str	r3, [r0, #24]
 800670c:	4619      	mov	r1, r3
 800670e:	2208      	movs	r2, #8
 8006710:	305c      	adds	r0, #92	; 0x5c
 8006712:	f7ff fdfb 	bl	800630c <memset>
 8006716:	4b05      	ldr	r3, [pc, #20]	; (800672c <std+0x38>)
 8006718:	6263      	str	r3, [r4, #36]	; 0x24
 800671a:	4b05      	ldr	r3, [pc, #20]	; (8006730 <std+0x3c>)
 800671c:	62a3      	str	r3, [r4, #40]	; 0x28
 800671e:	4b05      	ldr	r3, [pc, #20]	; (8006734 <std+0x40>)
 8006720:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006722:	4b05      	ldr	r3, [pc, #20]	; (8006738 <std+0x44>)
 8006724:	6224      	str	r4, [r4, #32]
 8006726:	6323      	str	r3, [r4, #48]	; 0x30
 8006728:	bd10      	pop	{r4, pc}
 800672a:	bf00      	nop
 800672c:	08007051 	.word	0x08007051
 8006730:	08007073 	.word	0x08007073
 8006734:	080070ab 	.word	0x080070ab
 8006738:	080070cf 	.word	0x080070cf

0800673c <_cleanup_r>:
 800673c:	4901      	ldr	r1, [pc, #4]	; (8006744 <_cleanup_r+0x8>)
 800673e:	f000 b885 	b.w	800684c <_fwalk_reent>
 8006742:	bf00      	nop
 8006744:	080066a1 	.word	0x080066a1

08006748 <__sfmoreglue>:
 8006748:	b570      	push	{r4, r5, r6, lr}
 800674a:	1e4a      	subs	r2, r1, #1
 800674c:	2568      	movs	r5, #104	; 0x68
 800674e:	4355      	muls	r5, r2
 8006750:	460e      	mov	r6, r1
 8006752:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006756:	f000 f949 	bl	80069ec <_malloc_r>
 800675a:	4604      	mov	r4, r0
 800675c:	b140      	cbz	r0, 8006770 <__sfmoreglue+0x28>
 800675e:	2100      	movs	r1, #0
 8006760:	e9c0 1600 	strd	r1, r6, [r0]
 8006764:	300c      	adds	r0, #12
 8006766:	60a0      	str	r0, [r4, #8]
 8006768:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800676c:	f7ff fdce 	bl	800630c <memset>
 8006770:	4620      	mov	r0, r4
 8006772:	bd70      	pop	{r4, r5, r6, pc}

08006774 <__sinit>:
 8006774:	6983      	ldr	r3, [r0, #24]
 8006776:	b510      	push	{r4, lr}
 8006778:	4604      	mov	r4, r0
 800677a:	bb33      	cbnz	r3, 80067ca <__sinit+0x56>
 800677c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006780:	6503      	str	r3, [r0, #80]	; 0x50
 8006782:	4b12      	ldr	r3, [pc, #72]	; (80067cc <__sinit+0x58>)
 8006784:	4a12      	ldr	r2, [pc, #72]	; (80067d0 <__sinit+0x5c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6282      	str	r2, [r0, #40]	; 0x28
 800678a:	4298      	cmp	r0, r3
 800678c:	bf04      	itt	eq
 800678e:	2301      	moveq	r3, #1
 8006790:	6183      	streq	r3, [r0, #24]
 8006792:	f000 f81f 	bl	80067d4 <__sfp>
 8006796:	6060      	str	r0, [r4, #4]
 8006798:	4620      	mov	r0, r4
 800679a:	f000 f81b 	bl	80067d4 <__sfp>
 800679e:	60a0      	str	r0, [r4, #8]
 80067a0:	4620      	mov	r0, r4
 80067a2:	f000 f817 	bl	80067d4 <__sfp>
 80067a6:	2200      	movs	r2, #0
 80067a8:	60e0      	str	r0, [r4, #12]
 80067aa:	2104      	movs	r1, #4
 80067ac:	6860      	ldr	r0, [r4, #4]
 80067ae:	f7ff ffa1 	bl	80066f4 <std>
 80067b2:	2201      	movs	r2, #1
 80067b4:	2109      	movs	r1, #9
 80067b6:	68a0      	ldr	r0, [r4, #8]
 80067b8:	f7ff ff9c 	bl	80066f4 <std>
 80067bc:	2202      	movs	r2, #2
 80067be:	2112      	movs	r1, #18
 80067c0:	68e0      	ldr	r0, [r4, #12]
 80067c2:	f7ff ff97 	bl	80066f4 <std>
 80067c6:	2301      	movs	r3, #1
 80067c8:	61a3      	str	r3, [r4, #24]
 80067ca:	bd10      	pop	{r4, pc}
 80067cc:	08081b10 	.word	0x08081b10
 80067d0:	0800673d 	.word	0x0800673d

080067d4 <__sfp>:
 80067d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d6:	4b1b      	ldr	r3, [pc, #108]	; (8006844 <__sfp+0x70>)
 80067d8:	681e      	ldr	r6, [r3, #0]
 80067da:	69b3      	ldr	r3, [r6, #24]
 80067dc:	4607      	mov	r7, r0
 80067de:	b913      	cbnz	r3, 80067e6 <__sfp+0x12>
 80067e0:	4630      	mov	r0, r6
 80067e2:	f7ff ffc7 	bl	8006774 <__sinit>
 80067e6:	3648      	adds	r6, #72	; 0x48
 80067e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80067ec:	3b01      	subs	r3, #1
 80067ee:	d503      	bpl.n	80067f8 <__sfp+0x24>
 80067f0:	6833      	ldr	r3, [r6, #0]
 80067f2:	b133      	cbz	r3, 8006802 <__sfp+0x2e>
 80067f4:	6836      	ldr	r6, [r6, #0]
 80067f6:	e7f7      	b.n	80067e8 <__sfp+0x14>
 80067f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80067fc:	b16d      	cbz	r5, 800681a <__sfp+0x46>
 80067fe:	3468      	adds	r4, #104	; 0x68
 8006800:	e7f4      	b.n	80067ec <__sfp+0x18>
 8006802:	2104      	movs	r1, #4
 8006804:	4638      	mov	r0, r7
 8006806:	f7ff ff9f 	bl	8006748 <__sfmoreglue>
 800680a:	6030      	str	r0, [r6, #0]
 800680c:	2800      	cmp	r0, #0
 800680e:	d1f1      	bne.n	80067f4 <__sfp+0x20>
 8006810:	230c      	movs	r3, #12
 8006812:	603b      	str	r3, [r7, #0]
 8006814:	4604      	mov	r4, r0
 8006816:	4620      	mov	r0, r4
 8006818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800681a:	4b0b      	ldr	r3, [pc, #44]	; (8006848 <__sfp+0x74>)
 800681c:	6665      	str	r5, [r4, #100]	; 0x64
 800681e:	e9c4 5500 	strd	r5, r5, [r4]
 8006822:	60a5      	str	r5, [r4, #8]
 8006824:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006828:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800682c:	2208      	movs	r2, #8
 800682e:	4629      	mov	r1, r5
 8006830:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006834:	f7ff fd6a 	bl	800630c <memset>
 8006838:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800683c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006840:	e7e9      	b.n	8006816 <__sfp+0x42>
 8006842:	bf00      	nop
 8006844:	08081b10 	.word	0x08081b10
 8006848:	ffff0001 	.word	0xffff0001

0800684c <_fwalk_reent>:
 800684c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006850:	4680      	mov	r8, r0
 8006852:	4689      	mov	r9, r1
 8006854:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006858:	2600      	movs	r6, #0
 800685a:	b914      	cbnz	r4, 8006862 <_fwalk_reent+0x16>
 800685c:	4630      	mov	r0, r6
 800685e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006862:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006866:	3f01      	subs	r7, #1
 8006868:	d501      	bpl.n	800686e <_fwalk_reent+0x22>
 800686a:	6824      	ldr	r4, [r4, #0]
 800686c:	e7f5      	b.n	800685a <_fwalk_reent+0xe>
 800686e:	89ab      	ldrh	r3, [r5, #12]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d907      	bls.n	8006884 <_fwalk_reent+0x38>
 8006874:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006878:	3301      	adds	r3, #1
 800687a:	d003      	beq.n	8006884 <_fwalk_reent+0x38>
 800687c:	4629      	mov	r1, r5
 800687e:	4640      	mov	r0, r8
 8006880:	47c8      	blx	r9
 8006882:	4306      	orrs	r6, r0
 8006884:	3568      	adds	r5, #104	; 0x68
 8006886:	e7ee      	b.n	8006866 <_fwalk_reent+0x1a>

08006888 <__swhatbuf_r>:
 8006888:	b570      	push	{r4, r5, r6, lr}
 800688a:	460e      	mov	r6, r1
 800688c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006890:	2900      	cmp	r1, #0
 8006892:	b096      	sub	sp, #88	; 0x58
 8006894:	4614      	mov	r4, r2
 8006896:	461d      	mov	r5, r3
 8006898:	da07      	bge.n	80068aa <__swhatbuf_r+0x22>
 800689a:	2300      	movs	r3, #0
 800689c:	602b      	str	r3, [r5, #0]
 800689e:	89b3      	ldrh	r3, [r6, #12]
 80068a0:	061a      	lsls	r2, r3, #24
 80068a2:	d410      	bmi.n	80068c6 <__swhatbuf_r+0x3e>
 80068a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068a8:	e00e      	b.n	80068c8 <__swhatbuf_r+0x40>
 80068aa:	466a      	mov	r2, sp
 80068ac:	f000 fc36 	bl	800711c <_fstat_r>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	dbf2      	blt.n	800689a <__swhatbuf_r+0x12>
 80068b4:	9a01      	ldr	r2, [sp, #4]
 80068b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80068ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80068be:	425a      	negs	r2, r3
 80068c0:	415a      	adcs	r2, r3
 80068c2:	602a      	str	r2, [r5, #0]
 80068c4:	e7ee      	b.n	80068a4 <__swhatbuf_r+0x1c>
 80068c6:	2340      	movs	r3, #64	; 0x40
 80068c8:	2000      	movs	r0, #0
 80068ca:	6023      	str	r3, [r4, #0]
 80068cc:	b016      	add	sp, #88	; 0x58
 80068ce:	bd70      	pop	{r4, r5, r6, pc}

080068d0 <__smakebuf_r>:
 80068d0:	898b      	ldrh	r3, [r1, #12]
 80068d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068d4:	079d      	lsls	r5, r3, #30
 80068d6:	4606      	mov	r6, r0
 80068d8:	460c      	mov	r4, r1
 80068da:	d507      	bpl.n	80068ec <__smakebuf_r+0x1c>
 80068dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80068e0:	6023      	str	r3, [r4, #0]
 80068e2:	6123      	str	r3, [r4, #16]
 80068e4:	2301      	movs	r3, #1
 80068e6:	6163      	str	r3, [r4, #20]
 80068e8:	b002      	add	sp, #8
 80068ea:	bd70      	pop	{r4, r5, r6, pc}
 80068ec:	ab01      	add	r3, sp, #4
 80068ee:	466a      	mov	r2, sp
 80068f0:	f7ff ffca 	bl	8006888 <__swhatbuf_r>
 80068f4:	9900      	ldr	r1, [sp, #0]
 80068f6:	4605      	mov	r5, r0
 80068f8:	4630      	mov	r0, r6
 80068fa:	f000 f877 	bl	80069ec <_malloc_r>
 80068fe:	b948      	cbnz	r0, 8006914 <__smakebuf_r+0x44>
 8006900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006904:	059a      	lsls	r2, r3, #22
 8006906:	d4ef      	bmi.n	80068e8 <__smakebuf_r+0x18>
 8006908:	f023 0303 	bic.w	r3, r3, #3
 800690c:	f043 0302 	orr.w	r3, r3, #2
 8006910:	81a3      	strh	r3, [r4, #12]
 8006912:	e7e3      	b.n	80068dc <__smakebuf_r+0xc>
 8006914:	4b0d      	ldr	r3, [pc, #52]	; (800694c <__smakebuf_r+0x7c>)
 8006916:	62b3      	str	r3, [r6, #40]	; 0x28
 8006918:	89a3      	ldrh	r3, [r4, #12]
 800691a:	6020      	str	r0, [r4, #0]
 800691c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006920:	81a3      	strh	r3, [r4, #12]
 8006922:	9b00      	ldr	r3, [sp, #0]
 8006924:	6163      	str	r3, [r4, #20]
 8006926:	9b01      	ldr	r3, [sp, #4]
 8006928:	6120      	str	r0, [r4, #16]
 800692a:	b15b      	cbz	r3, 8006944 <__smakebuf_r+0x74>
 800692c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006930:	4630      	mov	r0, r6
 8006932:	f000 fc05 	bl	8007140 <_isatty_r>
 8006936:	b128      	cbz	r0, 8006944 <__smakebuf_r+0x74>
 8006938:	89a3      	ldrh	r3, [r4, #12]
 800693a:	f023 0303 	bic.w	r3, r3, #3
 800693e:	f043 0301 	orr.w	r3, r3, #1
 8006942:	81a3      	strh	r3, [r4, #12]
 8006944:	89a3      	ldrh	r3, [r4, #12]
 8006946:	431d      	orrs	r5, r3
 8006948:	81a5      	strh	r5, [r4, #12]
 800694a:	e7cd      	b.n	80068e8 <__smakebuf_r+0x18>
 800694c:	0800673d 	.word	0x0800673d

08006950 <_free_r>:
 8006950:	b538      	push	{r3, r4, r5, lr}
 8006952:	4605      	mov	r5, r0
 8006954:	2900      	cmp	r1, #0
 8006956:	d045      	beq.n	80069e4 <_free_r+0x94>
 8006958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800695c:	1f0c      	subs	r4, r1, #4
 800695e:	2b00      	cmp	r3, #0
 8006960:	bfb8      	it	lt
 8006962:	18e4      	addlt	r4, r4, r3
 8006964:	f000 fc0e 	bl	8007184 <__malloc_lock>
 8006968:	4a1f      	ldr	r2, [pc, #124]	; (80069e8 <_free_r+0x98>)
 800696a:	6813      	ldr	r3, [r2, #0]
 800696c:	4610      	mov	r0, r2
 800696e:	b933      	cbnz	r3, 800697e <_free_r+0x2e>
 8006970:	6063      	str	r3, [r4, #4]
 8006972:	6014      	str	r4, [r2, #0]
 8006974:	4628      	mov	r0, r5
 8006976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800697a:	f000 bc04 	b.w	8007186 <__malloc_unlock>
 800697e:	42a3      	cmp	r3, r4
 8006980:	d90c      	bls.n	800699c <_free_r+0x4c>
 8006982:	6821      	ldr	r1, [r4, #0]
 8006984:	1862      	adds	r2, r4, r1
 8006986:	4293      	cmp	r3, r2
 8006988:	bf04      	itt	eq
 800698a:	681a      	ldreq	r2, [r3, #0]
 800698c:	685b      	ldreq	r3, [r3, #4]
 800698e:	6063      	str	r3, [r4, #4]
 8006990:	bf04      	itt	eq
 8006992:	1852      	addeq	r2, r2, r1
 8006994:	6022      	streq	r2, [r4, #0]
 8006996:	6004      	str	r4, [r0, #0]
 8006998:	e7ec      	b.n	8006974 <_free_r+0x24>
 800699a:	4613      	mov	r3, r2
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	b10a      	cbz	r2, 80069a4 <_free_r+0x54>
 80069a0:	42a2      	cmp	r2, r4
 80069a2:	d9fa      	bls.n	800699a <_free_r+0x4a>
 80069a4:	6819      	ldr	r1, [r3, #0]
 80069a6:	1858      	adds	r0, r3, r1
 80069a8:	42a0      	cmp	r0, r4
 80069aa:	d10b      	bne.n	80069c4 <_free_r+0x74>
 80069ac:	6820      	ldr	r0, [r4, #0]
 80069ae:	4401      	add	r1, r0
 80069b0:	1858      	adds	r0, r3, r1
 80069b2:	4282      	cmp	r2, r0
 80069b4:	6019      	str	r1, [r3, #0]
 80069b6:	d1dd      	bne.n	8006974 <_free_r+0x24>
 80069b8:	6810      	ldr	r0, [r2, #0]
 80069ba:	6852      	ldr	r2, [r2, #4]
 80069bc:	605a      	str	r2, [r3, #4]
 80069be:	4401      	add	r1, r0
 80069c0:	6019      	str	r1, [r3, #0]
 80069c2:	e7d7      	b.n	8006974 <_free_r+0x24>
 80069c4:	d902      	bls.n	80069cc <_free_r+0x7c>
 80069c6:	230c      	movs	r3, #12
 80069c8:	602b      	str	r3, [r5, #0]
 80069ca:	e7d3      	b.n	8006974 <_free_r+0x24>
 80069cc:	6820      	ldr	r0, [r4, #0]
 80069ce:	1821      	adds	r1, r4, r0
 80069d0:	428a      	cmp	r2, r1
 80069d2:	bf04      	itt	eq
 80069d4:	6811      	ldreq	r1, [r2, #0]
 80069d6:	6852      	ldreq	r2, [r2, #4]
 80069d8:	6062      	str	r2, [r4, #4]
 80069da:	bf04      	itt	eq
 80069dc:	1809      	addeq	r1, r1, r0
 80069de:	6021      	streq	r1, [r4, #0]
 80069e0:	605c      	str	r4, [r3, #4]
 80069e2:	e7c7      	b.n	8006974 <_free_r+0x24>
 80069e4:	bd38      	pop	{r3, r4, r5, pc}
 80069e6:	bf00      	nop
 80069e8:	20000098 	.word	0x20000098

080069ec <_malloc_r>:
 80069ec:	b570      	push	{r4, r5, r6, lr}
 80069ee:	1ccd      	adds	r5, r1, #3
 80069f0:	f025 0503 	bic.w	r5, r5, #3
 80069f4:	3508      	adds	r5, #8
 80069f6:	2d0c      	cmp	r5, #12
 80069f8:	bf38      	it	cc
 80069fa:	250c      	movcc	r5, #12
 80069fc:	2d00      	cmp	r5, #0
 80069fe:	4606      	mov	r6, r0
 8006a00:	db01      	blt.n	8006a06 <_malloc_r+0x1a>
 8006a02:	42a9      	cmp	r1, r5
 8006a04:	d903      	bls.n	8006a0e <_malloc_r+0x22>
 8006a06:	230c      	movs	r3, #12
 8006a08:	6033      	str	r3, [r6, #0]
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	bd70      	pop	{r4, r5, r6, pc}
 8006a0e:	f000 fbb9 	bl	8007184 <__malloc_lock>
 8006a12:	4a21      	ldr	r2, [pc, #132]	; (8006a98 <_malloc_r+0xac>)
 8006a14:	6814      	ldr	r4, [r2, #0]
 8006a16:	4621      	mov	r1, r4
 8006a18:	b991      	cbnz	r1, 8006a40 <_malloc_r+0x54>
 8006a1a:	4c20      	ldr	r4, [pc, #128]	; (8006a9c <_malloc_r+0xb0>)
 8006a1c:	6823      	ldr	r3, [r4, #0]
 8006a1e:	b91b      	cbnz	r3, 8006a28 <_malloc_r+0x3c>
 8006a20:	4630      	mov	r0, r6
 8006a22:	f000 fb05 	bl	8007030 <_sbrk_r>
 8006a26:	6020      	str	r0, [r4, #0]
 8006a28:	4629      	mov	r1, r5
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	f000 fb00 	bl	8007030 <_sbrk_r>
 8006a30:	1c43      	adds	r3, r0, #1
 8006a32:	d124      	bne.n	8006a7e <_malloc_r+0x92>
 8006a34:	230c      	movs	r3, #12
 8006a36:	6033      	str	r3, [r6, #0]
 8006a38:	4630      	mov	r0, r6
 8006a3a:	f000 fba4 	bl	8007186 <__malloc_unlock>
 8006a3e:	e7e4      	b.n	8006a0a <_malloc_r+0x1e>
 8006a40:	680b      	ldr	r3, [r1, #0]
 8006a42:	1b5b      	subs	r3, r3, r5
 8006a44:	d418      	bmi.n	8006a78 <_malloc_r+0x8c>
 8006a46:	2b0b      	cmp	r3, #11
 8006a48:	d90f      	bls.n	8006a6a <_malloc_r+0x7e>
 8006a4a:	600b      	str	r3, [r1, #0]
 8006a4c:	50cd      	str	r5, [r1, r3]
 8006a4e:	18cc      	adds	r4, r1, r3
 8006a50:	4630      	mov	r0, r6
 8006a52:	f000 fb98 	bl	8007186 <__malloc_unlock>
 8006a56:	f104 000b 	add.w	r0, r4, #11
 8006a5a:	1d23      	adds	r3, r4, #4
 8006a5c:	f020 0007 	bic.w	r0, r0, #7
 8006a60:	1ac3      	subs	r3, r0, r3
 8006a62:	d0d3      	beq.n	8006a0c <_malloc_r+0x20>
 8006a64:	425a      	negs	r2, r3
 8006a66:	50e2      	str	r2, [r4, r3]
 8006a68:	e7d0      	b.n	8006a0c <_malloc_r+0x20>
 8006a6a:	428c      	cmp	r4, r1
 8006a6c:	684b      	ldr	r3, [r1, #4]
 8006a6e:	bf16      	itet	ne
 8006a70:	6063      	strne	r3, [r4, #4]
 8006a72:	6013      	streq	r3, [r2, #0]
 8006a74:	460c      	movne	r4, r1
 8006a76:	e7eb      	b.n	8006a50 <_malloc_r+0x64>
 8006a78:	460c      	mov	r4, r1
 8006a7a:	6849      	ldr	r1, [r1, #4]
 8006a7c:	e7cc      	b.n	8006a18 <_malloc_r+0x2c>
 8006a7e:	1cc4      	adds	r4, r0, #3
 8006a80:	f024 0403 	bic.w	r4, r4, #3
 8006a84:	42a0      	cmp	r0, r4
 8006a86:	d005      	beq.n	8006a94 <_malloc_r+0xa8>
 8006a88:	1a21      	subs	r1, r4, r0
 8006a8a:	4630      	mov	r0, r6
 8006a8c:	f000 fad0 	bl	8007030 <_sbrk_r>
 8006a90:	3001      	adds	r0, #1
 8006a92:	d0cf      	beq.n	8006a34 <_malloc_r+0x48>
 8006a94:	6025      	str	r5, [r4, #0]
 8006a96:	e7db      	b.n	8006a50 <_malloc_r+0x64>
 8006a98:	20000098 	.word	0x20000098
 8006a9c:	2000009c 	.word	0x2000009c

08006aa0 <__sfputc_r>:
 8006aa0:	6893      	ldr	r3, [r2, #8]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	b410      	push	{r4}
 8006aa8:	6093      	str	r3, [r2, #8]
 8006aaa:	da08      	bge.n	8006abe <__sfputc_r+0x1e>
 8006aac:	6994      	ldr	r4, [r2, #24]
 8006aae:	42a3      	cmp	r3, r4
 8006ab0:	db01      	blt.n	8006ab6 <__sfputc_r+0x16>
 8006ab2:	290a      	cmp	r1, #10
 8006ab4:	d103      	bne.n	8006abe <__sfputc_r+0x1e>
 8006ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006aba:	f7ff bcab 	b.w	8006414 <__swbuf_r>
 8006abe:	6813      	ldr	r3, [r2, #0]
 8006ac0:	1c58      	adds	r0, r3, #1
 8006ac2:	6010      	str	r0, [r2, #0]
 8006ac4:	7019      	strb	r1, [r3, #0]
 8006ac6:	4608      	mov	r0, r1
 8006ac8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <__sfputs_r>:
 8006ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad0:	4606      	mov	r6, r0
 8006ad2:	460f      	mov	r7, r1
 8006ad4:	4614      	mov	r4, r2
 8006ad6:	18d5      	adds	r5, r2, r3
 8006ad8:	42ac      	cmp	r4, r5
 8006ada:	d101      	bne.n	8006ae0 <__sfputs_r+0x12>
 8006adc:	2000      	movs	r0, #0
 8006ade:	e007      	b.n	8006af0 <__sfputs_r+0x22>
 8006ae0:	463a      	mov	r2, r7
 8006ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	f7ff ffda 	bl	8006aa0 <__sfputc_r>
 8006aec:	1c43      	adds	r3, r0, #1
 8006aee:	d1f3      	bne.n	8006ad8 <__sfputs_r+0xa>
 8006af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006af4 <_vfiprintf_r>:
 8006af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af8:	460c      	mov	r4, r1
 8006afa:	b09d      	sub	sp, #116	; 0x74
 8006afc:	4617      	mov	r7, r2
 8006afe:	461d      	mov	r5, r3
 8006b00:	4606      	mov	r6, r0
 8006b02:	b118      	cbz	r0, 8006b0c <_vfiprintf_r+0x18>
 8006b04:	6983      	ldr	r3, [r0, #24]
 8006b06:	b90b      	cbnz	r3, 8006b0c <_vfiprintf_r+0x18>
 8006b08:	f7ff fe34 	bl	8006774 <__sinit>
 8006b0c:	4b7c      	ldr	r3, [pc, #496]	; (8006d00 <_vfiprintf_r+0x20c>)
 8006b0e:	429c      	cmp	r4, r3
 8006b10:	d158      	bne.n	8006bc4 <_vfiprintf_r+0xd0>
 8006b12:	6874      	ldr	r4, [r6, #4]
 8006b14:	89a3      	ldrh	r3, [r4, #12]
 8006b16:	0718      	lsls	r0, r3, #28
 8006b18:	d55e      	bpl.n	8006bd8 <_vfiprintf_r+0xe4>
 8006b1a:	6923      	ldr	r3, [r4, #16]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d05b      	beq.n	8006bd8 <_vfiprintf_r+0xe4>
 8006b20:	2300      	movs	r3, #0
 8006b22:	9309      	str	r3, [sp, #36]	; 0x24
 8006b24:	2320      	movs	r3, #32
 8006b26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b2a:	2330      	movs	r3, #48	; 0x30
 8006b2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b30:	9503      	str	r5, [sp, #12]
 8006b32:	f04f 0b01 	mov.w	fp, #1
 8006b36:	46b8      	mov	r8, r7
 8006b38:	4645      	mov	r5, r8
 8006b3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006b3e:	b10b      	cbz	r3, 8006b44 <_vfiprintf_r+0x50>
 8006b40:	2b25      	cmp	r3, #37	; 0x25
 8006b42:	d154      	bne.n	8006bee <_vfiprintf_r+0xfa>
 8006b44:	ebb8 0a07 	subs.w	sl, r8, r7
 8006b48:	d00b      	beq.n	8006b62 <_vfiprintf_r+0x6e>
 8006b4a:	4653      	mov	r3, sl
 8006b4c:	463a      	mov	r2, r7
 8006b4e:	4621      	mov	r1, r4
 8006b50:	4630      	mov	r0, r6
 8006b52:	f7ff ffbc 	bl	8006ace <__sfputs_r>
 8006b56:	3001      	adds	r0, #1
 8006b58:	f000 80c2 	beq.w	8006ce0 <_vfiprintf_r+0x1ec>
 8006b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b5e:	4453      	add	r3, sl
 8006b60:	9309      	str	r3, [sp, #36]	; 0x24
 8006b62:	f898 3000 	ldrb.w	r3, [r8]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 80ba 	beq.w	8006ce0 <_vfiprintf_r+0x1ec>
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b76:	9304      	str	r3, [sp, #16]
 8006b78:	9307      	str	r3, [sp, #28]
 8006b7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b7e:	931a      	str	r3, [sp, #104]	; 0x68
 8006b80:	46a8      	mov	r8, r5
 8006b82:	2205      	movs	r2, #5
 8006b84:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006b88:	485e      	ldr	r0, [pc, #376]	; (8006d04 <_vfiprintf_r+0x210>)
 8006b8a:	f7f9 fb39 	bl	8000200 <memchr>
 8006b8e:	9b04      	ldr	r3, [sp, #16]
 8006b90:	bb78      	cbnz	r0, 8006bf2 <_vfiprintf_r+0xfe>
 8006b92:	06d9      	lsls	r1, r3, #27
 8006b94:	bf44      	itt	mi
 8006b96:	2220      	movmi	r2, #32
 8006b98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b9c:	071a      	lsls	r2, r3, #28
 8006b9e:	bf44      	itt	mi
 8006ba0:	222b      	movmi	r2, #43	; 0x2b
 8006ba2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ba6:	782a      	ldrb	r2, [r5, #0]
 8006ba8:	2a2a      	cmp	r2, #42	; 0x2a
 8006baa:	d02a      	beq.n	8006c02 <_vfiprintf_r+0x10e>
 8006bac:	9a07      	ldr	r2, [sp, #28]
 8006bae:	46a8      	mov	r8, r5
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	250a      	movs	r5, #10
 8006bb4:	4641      	mov	r1, r8
 8006bb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bba:	3b30      	subs	r3, #48	; 0x30
 8006bbc:	2b09      	cmp	r3, #9
 8006bbe:	d969      	bls.n	8006c94 <_vfiprintf_r+0x1a0>
 8006bc0:	b360      	cbz	r0, 8006c1c <_vfiprintf_r+0x128>
 8006bc2:	e024      	b.n	8006c0e <_vfiprintf_r+0x11a>
 8006bc4:	4b50      	ldr	r3, [pc, #320]	; (8006d08 <_vfiprintf_r+0x214>)
 8006bc6:	429c      	cmp	r4, r3
 8006bc8:	d101      	bne.n	8006bce <_vfiprintf_r+0xda>
 8006bca:	68b4      	ldr	r4, [r6, #8]
 8006bcc:	e7a2      	b.n	8006b14 <_vfiprintf_r+0x20>
 8006bce:	4b4f      	ldr	r3, [pc, #316]	; (8006d0c <_vfiprintf_r+0x218>)
 8006bd0:	429c      	cmp	r4, r3
 8006bd2:	bf08      	it	eq
 8006bd4:	68f4      	ldreq	r4, [r6, #12]
 8006bd6:	e79d      	b.n	8006b14 <_vfiprintf_r+0x20>
 8006bd8:	4621      	mov	r1, r4
 8006bda:	4630      	mov	r0, r6
 8006bdc:	f7ff fc6c 	bl	80064b8 <__swsetup_r>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d09d      	beq.n	8006b20 <_vfiprintf_r+0x2c>
 8006be4:	f04f 30ff 	mov.w	r0, #4294967295
 8006be8:	b01d      	add	sp, #116	; 0x74
 8006bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bee:	46a8      	mov	r8, r5
 8006bf0:	e7a2      	b.n	8006b38 <_vfiprintf_r+0x44>
 8006bf2:	4a44      	ldr	r2, [pc, #272]	; (8006d04 <_vfiprintf_r+0x210>)
 8006bf4:	1a80      	subs	r0, r0, r2
 8006bf6:	fa0b f000 	lsl.w	r0, fp, r0
 8006bfa:	4318      	orrs	r0, r3
 8006bfc:	9004      	str	r0, [sp, #16]
 8006bfe:	4645      	mov	r5, r8
 8006c00:	e7be      	b.n	8006b80 <_vfiprintf_r+0x8c>
 8006c02:	9a03      	ldr	r2, [sp, #12]
 8006c04:	1d11      	adds	r1, r2, #4
 8006c06:	6812      	ldr	r2, [r2, #0]
 8006c08:	9103      	str	r1, [sp, #12]
 8006c0a:	2a00      	cmp	r2, #0
 8006c0c:	db01      	blt.n	8006c12 <_vfiprintf_r+0x11e>
 8006c0e:	9207      	str	r2, [sp, #28]
 8006c10:	e004      	b.n	8006c1c <_vfiprintf_r+0x128>
 8006c12:	4252      	negs	r2, r2
 8006c14:	f043 0302 	orr.w	r3, r3, #2
 8006c18:	9207      	str	r2, [sp, #28]
 8006c1a:	9304      	str	r3, [sp, #16]
 8006c1c:	f898 3000 	ldrb.w	r3, [r8]
 8006c20:	2b2e      	cmp	r3, #46	; 0x2e
 8006c22:	d10e      	bne.n	8006c42 <_vfiprintf_r+0x14e>
 8006c24:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006c28:	2b2a      	cmp	r3, #42	; 0x2a
 8006c2a:	d138      	bne.n	8006c9e <_vfiprintf_r+0x1aa>
 8006c2c:	9b03      	ldr	r3, [sp, #12]
 8006c2e:	1d1a      	adds	r2, r3, #4
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	9203      	str	r2, [sp, #12]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	bfb8      	it	lt
 8006c38:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c3c:	f108 0802 	add.w	r8, r8, #2
 8006c40:	9305      	str	r3, [sp, #20]
 8006c42:	4d33      	ldr	r5, [pc, #204]	; (8006d10 <_vfiprintf_r+0x21c>)
 8006c44:	f898 1000 	ldrb.w	r1, [r8]
 8006c48:	2203      	movs	r2, #3
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	f7f9 fad8 	bl	8000200 <memchr>
 8006c50:	b140      	cbz	r0, 8006c64 <_vfiprintf_r+0x170>
 8006c52:	2340      	movs	r3, #64	; 0x40
 8006c54:	1b40      	subs	r0, r0, r5
 8006c56:	fa03 f000 	lsl.w	r0, r3, r0
 8006c5a:	9b04      	ldr	r3, [sp, #16]
 8006c5c:	4303      	orrs	r3, r0
 8006c5e:	f108 0801 	add.w	r8, r8, #1
 8006c62:	9304      	str	r3, [sp, #16]
 8006c64:	f898 1000 	ldrb.w	r1, [r8]
 8006c68:	482a      	ldr	r0, [pc, #168]	; (8006d14 <_vfiprintf_r+0x220>)
 8006c6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c6e:	2206      	movs	r2, #6
 8006c70:	f108 0701 	add.w	r7, r8, #1
 8006c74:	f7f9 fac4 	bl	8000200 <memchr>
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	d037      	beq.n	8006cec <_vfiprintf_r+0x1f8>
 8006c7c:	4b26      	ldr	r3, [pc, #152]	; (8006d18 <_vfiprintf_r+0x224>)
 8006c7e:	bb1b      	cbnz	r3, 8006cc8 <_vfiprintf_r+0x1d4>
 8006c80:	9b03      	ldr	r3, [sp, #12]
 8006c82:	3307      	adds	r3, #7
 8006c84:	f023 0307 	bic.w	r3, r3, #7
 8006c88:	3308      	adds	r3, #8
 8006c8a:	9303      	str	r3, [sp, #12]
 8006c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c8e:	444b      	add	r3, r9
 8006c90:	9309      	str	r3, [sp, #36]	; 0x24
 8006c92:	e750      	b.n	8006b36 <_vfiprintf_r+0x42>
 8006c94:	fb05 3202 	mla	r2, r5, r2, r3
 8006c98:	2001      	movs	r0, #1
 8006c9a:	4688      	mov	r8, r1
 8006c9c:	e78a      	b.n	8006bb4 <_vfiprintf_r+0xc0>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f108 0801 	add.w	r8, r8, #1
 8006ca4:	9305      	str	r3, [sp, #20]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	250a      	movs	r5, #10
 8006caa:	4640      	mov	r0, r8
 8006cac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cb0:	3a30      	subs	r2, #48	; 0x30
 8006cb2:	2a09      	cmp	r2, #9
 8006cb4:	d903      	bls.n	8006cbe <_vfiprintf_r+0x1ca>
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d0c3      	beq.n	8006c42 <_vfiprintf_r+0x14e>
 8006cba:	9105      	str	r1, [sp, #20]
 8006cbc:	e7c1      	b.n	8006c42 <_vfiprintf_r+0x14e>
 8006cbe:	fb05 2101 	mla	r1, r5, r1, r2
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	4680      	mov	r8, r0
 8006cc6:	e7f0      	b.n	8006caa <_vfiprintf_r+0x1b6>
 8006cc8:	ab03      	add	r3, sp, #12
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	4622      	mov	r2, r4
 8006cce:	4b13      	ldr	r3, [pc, #76]	; (8006d1c <_vfiprintf_r+0x228>)
 8006cd0:	a904      	add	r1, sp, #16
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	f3af 8000 	nop.w
 8006cd8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006cdc:	4681      	mov	r9, r0
 8006cde:	d1d5      	bne.n	8006c8c <_vfiprintf_r+0x198>
 8006ce0:	89a3      	ldrh	r3, [r4, #12]
 8006ce2:	065b      	lsls	r3, r3, #25
 8006ce4:	f53f af7e 	bmi.w	8006be4 <_vfiprintf_r+0xf0>
 8006ce8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cea:	e77d      	b.n	8006be8 <_vfiprintf_r+0xf4>
 8006cec:	ab03      	add	r3, sp, #12
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	4622      	mov	r2, r4
 8006cf2:	4b0a      	ldr	r3, [pc, #40]	; (8006d1c <_vfiprintf_r+0x228>)
 8006cf4:	a904      	add	r1, sp, #16
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	f000 f888 	bl	8006e0c <_printf_i>
 8006cfc:	e7ec      	b.n	8006cd8 <_vfiprintf_r+0x1e4>
 8006cfe:	bf00      	nop
 8006d00:	08081b34 	.word	0x08081b34
 8006d04:	08081b74 	.word	0x08081b74
 8006d08:	08081b54 	.word	0x08081b54
 8006d0c:	08081b14 	.word	0x08081b14
 8006d10:	08081b7a 	.word	0x08081b7a
 8006d14:	08081b7e 	.word	0x08081b7e
 8006d18:	00000000 	.word	0x00000000
 8006d1c:	08006acf 	.word	0x08006acf

08006d20 <_printf_common>:
 8006d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d24:	4691      	mov	r9, r2
 8006d26:	461f      	mov	r7, r3
 8006d28:	688a      	ldr	r2, [r1, #8]
 8006d2a:	690b      	ldr	r3, [r1, #16]
 8006d2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d30:	4293      	cmp	r3, r2
 8006d32:	bfb8      	it	lt
 8006d34:	4613      	movlt	r3, r2
 8006d36:	f8c9 3000 	str.w	r3, [r9]
 8006d3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d3e:	4606      	mov	r6, r0
 8006d40:	460c      	mov	r4, r1
 8006d42:	b112      	cbz	r2, 8006d4a <_printf_common+0x2a>
 8006d44:	3301      	adds	r3, #1
 8006d46:	f8c9 3000 	str.w	r3, [r9]
 8006d4a:	6823      	ldr	r3, [r4, #0]
 8006d4c:	0699      	lsls	r1, r3, #26
 8006d4e:	bf42      	ittt	mi
 8006d50:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006d54:	3302      	addmi	r3, #2
 8006d56:	f8c9 3000 	strmi.w	r3, [r9]
 8006d5a:	6825      	ldr	r5, [r4, #0]
 8006d5c:	f015 0506 	ands.w	r5, r5, #6
 8006d60:	d107      	bne.n	8006d72 <_printf_common+0x52>
 8006d62:	f104 0a19 	add.w	sl, r4, #25
 8006d66:	68e3      	ldr	r3, [r4, #12]
 8006d68:	f8d9 2000 	ldr.w	r2, [r9]
 8006d6c:	1a9b      	subs	r3, r3, r2
 8006d6e:	42ab      	cmp	r3, r5
 8006d70:	dc28      	bgt.n	8006dc4 <_printf_common+0xa4>
 8006d72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006d76:	6822      	ldr	r2, [r4, #0]
 8006d78:	3300      	adds	r3, #0
 8006d7a:	bf18      	it	ne
 8006d7c:	2301      	movne	r3, #1
 8006d7e:	0692      	lsls	r2, r2, #26
 8006d80:	d42d      	bmi.n	8006dde <_printf_common+0xbe>
 8006d82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d86:	4639      	mov	r1, r7
 8006d88:	4630      	mov	r0, r6
 8006d8a:	47c0      	blx	r8
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	d020      	beq.n	8006dd2 <_printf_common+0xb2>
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	68e5      	ldr	r5, [r4, #12]
 8006d94:	f8d9 2000 	ldr.w	r2, [r9]
 8006d98:	f003 0306 	and.w	r3, r3, #6
 8006d9c:	2b04      	cmp	r3, #4
 8006d9e:	bf08      	it	eq
 8006da0:	1aad      	subeq	r5, r5, r2
 8006da2:	68a3      	ldr	r3, [r4, #8]
 8006da4:	6922      	ldr	r2, [r4, #16]
 8006da6:	bf0c      	ite	eq
 8006da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dac:	2500      	movne	r5, #0
 8006dae:	4293      	cmp	r3, r2
 8006db0:	bfc4      	itt	gt
 8006db2:	1a9b      	subgt	r3, r3, r2
 8006db4:	18ed      	addgt	r5, r5, r3
 8006db6:	f04f 0900 	mov.w	r9, #0
 8006dba:	341a      	adds	r4, #26
 8006dbc:	454d      	cmp	r5, r9
 8006dbe:	d11a      	bne.n	8006df6 <_printf_common+0xd6>
 8006dc0:	2000      	movs	r0, #0
 8006dc2:	e008      	b.n	8006dd6 <_printf_common+0xb6>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	4652      	mov	r2, sl
 8006dc8:	4639      	mov	r1, r7
 8006dca:	4630      	mov	r0, r6
 8006dcc:	47c0      	blx	r8
 8006dce:	3001      	adds	r0, #1
 8006dd0:	d103      	bne.n	8006dda <_printf_common+0xba>
 8006dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dda:	3501      	adds	r5, #1
 8006ddc:	e7c3      	b.n	8006d66 <_printf_common+0x46>
 8006dde:	18e1      	adds	r1, r4, r3
 8006de0:	1c5a      	adds	r2, r3, #1
 8006de2:	2030      	movs	r0, #48	; 0x30
 8006de4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006de8:	4422      	add	r2, r4
 8006dea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006df2:	3302      	adds	r3, #2
 8006df4:	e7c5      	b.n	8006d82 <_printf_common+0x62>
 8006df6:	2301      	movs	r3, #1
 8006df8:	4622      	mov	r2, r4
 8006dfa:	4639      	mov	r1, r7
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	47c0      	blx	r8
 8006e00:	3001      	adds	r0, #1
 8006e02:	d0e6      	beq.n	8006dd2 <_printf_common+0xb2>
 8006e04:	f109 0901 	add.w	r9, r9, #1
 8006e08:	e7d8      	b.n	8006dbc <_printf_common+0x9c>
	...

08006e0c <_printf_i>:
 8006e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006e14:	460c      	mov	r4, r1
 8006e16:	7e09      	ldrb	r1, [r1, #24]
 8006e18:	b085      	sub	sp, #20
 8006e1a:	296e      	cmp	r1, #110	; 0x6e
 8006e1c:	4617      	mov	r7, r2
 8006e1e:	4606      	mov	r6, r0
 8006e20:	4698      	mov	r8, r3
 8006e22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e24:	f000 80b3 	beq.w	8006f8e <_printf_i+0x182>
 8006e28:	d822      	bhi.n	8006e70 <_printf_i+0x64>
 8006e2a:	2963      	cmp	r1, #99	; 0x63
 8006e2c:	d036      	beq.n	8006e9c <_printf_i+0x90>
 8006e2e:	d80a      	bhi.n	8006e46 <_printf_i+0x3a>
 8006e30:	2900      	cmp	r1, #0
 8006e32:	f000 80b9 	beq.w	8006fa8 <_printf_i+0x19c>
 8006e36:	2958      	cmp	r1, #88	; 0x58
 8006e38:	f000 8083 	beq.w	8006f42 <_printf_i+0x136>
 8006e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006e44:	e032      	b.n	8006eac <_printf_i+0xa0>
 8006e46:	2964      	cmp	r1, #100	; 0x64
 8006e48:	d001      	beq.n	8006e4e <_printf_i+0x42>
 8006e4a:	2969      	cmp	r1, #105	; 0x69
 8006e4c:	d1f6      	bne.n	8006e3c <_printf_i+0x30>
 8006e4e:	6820      	ldr	r0, [r4, #0]
 8006e50:	6813      	ldr	r3, [r2, #0]
 8006e52:	0605      	lsls	r5, r0, #24
 8006e54:	f103 0104 	add.w	r1, r3, #4
 8006e58:	d52a      	bpl.n	8006eb0 <_printf_i+0xa4>
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6011      	str	r1, [r2, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	da03      	bge.n	8006e6a <_printf_i+0x5e>
 8006e62:	222d      	movs	r2, #45	; 0x2d
 8006e64:	425b      	negs	r3, r3
 8006e66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006e6a:	486f      	ldr	r0, [pc, #444]	; (8007028 <_printf_i+0x21c>)
 8006e6c:	220a      	movs	r2, #10
 8006e6e:	e039      	b.n	8006ee4 <_printf_i+0xd8>
 8006e70:	2973      	cmp	r1, #115	; 0x73
 8006e72:	f000 809d 	beq.w	8006fb0 <_printf_i+0x1a4>
 8006e76:	d808      	bhi.n	8006e8a <_printf_i+0x7e>
 8006e78:	296f      	cmp	r1, #111	; 0x6f
 8006e7a:	d020      	beq.n	8006ebe <_printf_i+0xb2>
 8006e7c:	2970      	cmp	r1, #112	; 0x70
 8006e7e:	d1dd      	bne.n	8006e3c <_printf_i+0x30>
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	f043 0320 	orr.w	r3, r3, #32
 8006e86:	6023      	str	r3, [r4, #0]
 8006e88:	e003      	b.n	8006e92 <_printf_i+0x86>
 8006e8a:	2975      	cmp	r1, #117	; 0x75
 8006e8c:	d017      	beq.n	8006ebe <_printf_i+0xb2>
 8006e8e:	2978      	cmp	r1, #120	; 0x78
 8006e90:	d1d4      	bne.n	8006e3c <_printf_i+0x30>
 8006e92:	2378      	movs	r3, #120	; 0x78
 8006e94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e98:	4864      	ldr	r0, [pc, #400]	; (800702c <_printf_i+0x220>)
 8006e9a:	e055      	b.n	8006f48 <_printf_i+0x13c>
 8006e9c:	6813      	ldr	r3, [r2, #0]
 8006e9e:	1d19      	adds	r1, r3, #4
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6011      	str	r1, [r2, #0]
 8006ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006eac:	2301      	movs	r3, #1
 8006eae:	e08c      	b.n	8006fca <_printf_i+0x1be>
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6011      	str	r1, [r2, #0]
 8006eb4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006eb8:	bf18      	it	ne
 8006eba:	b21b      	sxthne	r3, r3
 8006ebc:	e7cf      	b.n	8006e5e <_printf_i+0x52>
 8006ebe:	6813      	ldr	r3, [r2, #0]
 8006ec0:	6825      	ldr	r5, [r4, #0]
 8006ec2:	1d18      	adds	r0, r3, #4
 8006ec4:	6010      	str	r0, [r2, #0]
 8006ec6:	0628      	lsls	r0, r5, #24
 8006ec8:	d501      	bpl.n	8006ece <_printf_i+0xc2>
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	e002      	b.n	8006ed4 <_printf_i+0xc8>
 8006ece:	0668      	lsls	r0, r5, #25
 8006ed0:	d5fb      	bpl.n	8006eca <_printf_i+0xbe>
 8006ed2:	881b      	ldrh	r3, [r3, #0]
 8006ed4:	4854      	ldr	r0, [pc, #336]	; (8007028 <_printf_i+0x21c>)
 8006ed6:	296f      	cmp	r1, #111	; 0x6f
 8006ed8:	bf14      	ite	ne
 8006eda:	220a      	movne	r2, #10
 8006edc:	2208      	moveq	r2, #8
 8006ede:	2100      	movs	r1, #0
 8006ee0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ee4:	6865      	ldr	r5, [r4, #4]
 8006ee6:	60a5      	str	r5, [r4, #8]
 8006ee8:	2d00      	cmp	r5, #0
 8006eea:	f2c0 8095 	blt.w	8007018 <_printf_i+0x20c>
 8006eee:	6821      	ldr	r1, [r4, #0]
 8006ef0:	f021 0104 	bic.w	r1, r1, #4
 8006ef4:	6021      	str	r1, [r4, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d13d      	bne.n	8006f76 <_printf_i+0x16a>
 8006efa:	2d00      	cmp	r5, #0
 8006efc:	f040 808e 	bne.w	800701c <_printf_i+0x210>
 8006f00:	4665      	mov	r5, ip
 8006f02:	2a08      	cmp	r2, #8
 8006f04:	d10b      	bne.n	8006f1e <_printf_i+0x112>
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	07db      	lsls	r3, r3, #31
 8006f0a:	d508      	bpl.n	8006f1e <_printf_i+0x112>
 8006f0c:	6923      	ldr	r3, [r4, #16]
 8006f0e:	6862      	ldr	r2, [r4, #4]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	bfde      	ittt	le
 8006f14:	2330      	movle	r3, #48	; 0x30
 8006f16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f1e:	ebac 0305 	sub.w	r3, ip, r5
 8006f22:	6123      	str	r3, [r4, #16]
 8006f24:	f8cd 8000 	str.w	r8, [sp]
 8006f28:	463b      	mov	r3, r7
 8006f2a:	aa03      	add	r2, sp, #12
 8006f2c:	4621      	mov	r1, r4
 8006f2e:	4630      	mov	r0, r6
 8006f30:	f7ff fef6 	bl	8006d20 <_printf_common>
 8006f34:	3001      	adds	r0, #1
 8006f36:	d14d      	bne.n	8006fd4 <_printf_i+0x1c8>
 8006f38:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3c:	b005      	add	sp, #20
 8006f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f42:	4839      	ldr	r0, [pc, #228]	; (8007028 <_printf_i+0x21c>)
 8006f44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006f48:	6813      	ldr	r3, [r2, #0]
 8006f4a:	6821      	ldr	r1, [r4, #0]
 8006f4c:	1d1d      	adds	r5, r3, #4
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6015      	str	r5, [r2, #0]
 8006f52:	060a      	lsls	r2, r1, #24
 8006f54:	d50b      	bpl.n	8006f6e <_printf_i+0x162>
 8006f56:	07ca      	lsls	r2, r1, #31
 8006f58:	bf44      	itt	mi
 8006f5a:	f041 0120 	orrmi.w	r1, r1, #32
 8006f5e:	6021      	strmi	r1, [r4, #0]
 8006f60:	b91b      	cbnz	r3, 8006f6a <_printf_i+0x15e>
 8006f62:	6822      	ldr	r2, [r4, #0]
 8006f64:	f022 0220 	bic.w	r2, r2, #32
 8006f68:	6022      	str	r2, [r4, #0]
 8006f6a:	2210      	movs	r2, #16
 8006f6c:	e7b7      	b.n	8006ede <_printf_i+0xd2>
 8006f6e:	064d      	lsls	r5, r1, #25
 8006f70:	bf48      	it	mi
 8006f72:	b29b      	uxthmi	r3, r3
 8006f74:	e7ef      	b.n	8006f56 <_printf_i+0x14a>
 8006f76:	4665      	mov	r5, ip
 8006f78:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f7c:	fb02 3311 	mls	r3, r2, r1, r3
 8006f80:	5cc3      	ldrb	r3, [r0, r3]
 8006f82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006f86:	460b      	mov	r3, r1
 8006f88:	2900      	cmp	r1, #0
 8006f8a:	d1f5      	bne.n	8006f78 <_printf_i+0x16c>
 8006f8c:	e7b9      	b.n	8006f02 <_printf_i+0xf6>
 8006f8e:	6813      	ldr	r3, [r2, #0]
 8006f90:	6825      	ldr	r5, [r4, #0]
 8006f92:	6961      	ldr	r1, [r4, #20]
 8006f94:	1d18      	adds	r0, r3, #4
 8006f96:	6010      	str	r0, [r2, #0]
 8006f98:	0628      	lsls	r0, r5, #24
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	d501      	bpl.n	8006fa2 <_printf_i+0x196>
 8006f9e:	6019      	str	r1, [r3, #0]
 8006fa0:	e002      	b.n	8006fa8 <_printf_i+0x19c>
 8006fa2:	066a      	lsls	r2, r5, #25
 8006fa4:	d5fb      	bpl.n	8006f9e <_printf_i+0x192>
 8006fa6:	8019      	strh	r1, [r3, #0]
 8006fa8:	2300      	movs	r3, #0
 8006faa:	6123      	str	r3, [r4, #16]
 8006fac:	4665      	mov	r5, ip
 8006fae:	e7b9      	b.n	8006f24 <_printf_i+0x118>
 8006fb0:	6813      	ldr	r3, [r2, #0]
 8006fb2:	1d19      	adds	r1, r3, #4
 8006fb4:	6011      	str	r1, [r2, #0]
 8006fb6:	681d      	ldr	r5, [r3, #0]
 8006fb8:	6862      	ldr	r2, [r4, #4]
 8006fba:	2100      	movs	r1, #0
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	f7f9 f91f 	bl	8000200 <memchr>
 8006fc2:	b108      	cbz	r0, 8006fc8 <_printf_i+0x1bc>
 8006fc4:	1b40      	subs	r0, r0, r5
 8006fc6:	6060      	str	r0, [r4, #4]
 8006fc8:	6863      	ldr	r3, [r4, #4]
 8006fca:	6123      	str	r3, [r4, #16]
 8006fcc:	2300      	movs	r3, #0
 8006fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fd2:	e7a7      	b.n	8006f24 <_printf_i+0x118>
 8006fd4:	6923      	ldr	r3, [r4, #16]
 8006fd6:	462a      	mov	r2, r5
 8006fd8:	4639      	mov	r1, r7
 8006fda:	4630      	mov	r0, r6
 8006fdc:	47c0      	blx	r8
 8006fde:	3001      	adds	r0, #1
 8006fe0:	d0aa      	beq.n	8006f38 <_printf_i+0x12c>
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	079b      	lsls	r3, r3, #30
 8006fe6:	d413      	bmi.n	8007010 <_printf_i+0x204>
 8006fe8:	68e0      	ldr	r0, [r4, #12]
 8006fea:	9b03      	ldr	r3, [sp, #12]
 8006fec:	4298      	cmp	r0, r3
 8006fee:	bfb8      	it	lt
 8006ff0:	4618      	movlt	r0, r3
 8006ff2:	e7a3      	b.n	8006f3c <_printf_i+0x130>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	464a      	mov	r2, r9
 8006ff8:	4639      	mov	r1, r7
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	47c0      	blx	r8
 8006ffe:	3001      	adds	r0, #1
 8007000:	d09a      	beq.n	8006f38 <_printf_i+0x12c>
 8007002:	3501      	adds	r5, #1
 8007004:	68e3      	ldr	r3, [r4, #12]
 8007006:	9a03      	ldr	r2, [sp, #12]
 8007008:	1a9b      	subs	r3, r3, r2
 800700a:	42ab      	cmp	r3, r5
 800700c:	dcf2      	bgt.n	8006ff4 <_printf_i+0x1e8>
 800700e:	e7eb      	b.n	8006fe8 <_printf_i+0x1dc>
 8007010:	2500      	movs	r5, #0
 8007012:	f104 0919 	add.w	r9, r4, #25
 8007016:	e7f5      	b.n	8007004 <_printf_i+0x1f8>
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1ac      	bne.n	8006f76 <_printf_i+0x16a>
 800701c:	7803      	ldrb	r3, [r0, #0]
 800701e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007022:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007026:	e76c      	b.n	8006f02 <_printf_i+0xf6>
 8007028:	08081b85 	.word	0x08081b85
 800702c:	08081b96 	.word	0x08081b96

08007030 <_sbrk_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4c06      	ldr	r4, [pc, #24]	; (800704c <_sbrk_r+0x1c>)
 8007034:	2300      	movs	r3, #0
 8007036:	4605      	mov	r5, r0
 8007038:	4608      	mov	r0, r1
 800703a:	6023      	str	r3, [r4, #0]
 800703c:	f7fa fc7a 	bl	8001934 <_sbrk>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d102      	bne.n	800704a <_sbrk_r+0x1a>
 8007044:	6823      	ldr	r3, [r4, #0]
 8007046:	b103      	cbz	r3, 800704a <_sbrk_r+0x1a>
 8007048:	602b      	str	r3, [r5, #0]
 800704a:	bd38      	pop	{r3, r4, r5, pc}
 800704c:	20000298 	.word	0x20000298

08007050 <__sread>:
 8007050:	b510      	push	{r4, lr}
 8007052:	460c      	mov	r4, r1
 8007054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007058:	f000 f896 	bl	8007188 <_read_r>
 800705c:	2800      	cmp	r0, #0
 800705e:	bfab      	itete	ge
 8007060:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007062:	89a3      	ldrhlt	r3, [r4, #12]
 8007064:	181b      	addge	r3, r3, r0
 8007066:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800706a:	bfac      	ite	ge
 800706c:	6563      	strge	r3, [r4, #84]	; 0x54
 800706e:	81a3      	strhlt	r3, [r4, #12]
 8007070:	bd10      	pop	{r4, pc}

08007072 <__swrite>:
 8007072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007076:	461f      	mov	r7, r3
 8007078:	898b      	ldrh	r3, [r1, #12]
 800707a:	05db      	lsls	r3, r3, #23
 800707c:	4605      	mov	r5, r0
 800707e:	460c      	mov	r4, r1
 8007080:	4616      	mov	r6, r2
 8007082:	d505      	bpl.n	8007090 <__swrite+0x1e>
 8007084:	2302      	movs	r3, #2
 8007086:	2200      	movs	r2, #0
 8007088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800708c:	f000 f868 	bl	8007160 <_lseek_r>
 8007090:	89a3      	ldrh	r3, [r4, #12]
 8007092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007096:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800709a:	81a3      	strh	r3, [r4, #12]
 800709c:	4632      	mov	r2, r6
 800709e:	463b      	mov	r3, r7
 80070a0:	4628      	mov	r0, r5
 80070a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070a6:	f000 b817 	b.w	80070d8 <_write_r>

080070aa <__sseek>:
 80070aa:	b510      	push	{r4, lr}
 80070ac:	460c      	mov	r4, r1
 80070ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b2:	f000 f855 	bl	8007160 <_lseek_r>
 80070b6:	1c43      	adds	r3, r0, #1
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	bf15      	itete	ne
 80070bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80070be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070c6:	81a3      	strheq	r3, [r4, #12]
 80070c8:	bf18      	it	ne
 80070ca:	81a3      	strhne	r3, [r4, #12]
 80070cc:	bd10      	pop	{r4, pc}

080070ce <__sclose>:
 80070ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070d2:	f000 b813 	b.w	80070fc <_close_r>
	...

080070d8 <_write_r>:
 80070d8:	b538      	push	{r3, r4, r5, lr}
 80070da:	4c07      	ldr	r4, [pc, #28]	; (80070f8 <_write_r+0x20>)
 80070dc:	4605      	mov	r5, r0
 80070de:	4608      	mov	r0, r1
 80070e0:	4611      	mov	r1, r2
 80070e2:	2200      	movs	r2, #0
 80070e4:	6022      	str	r2, [r4, #0]
 80070e6:	461a      	mov	r2, r3
 80070e8:	f7fa fbd3 	bl	8001892 <_write>
 80070ec:	1c43      	adds	r3, r0, #1
 80070ee:	d102      	bne.n	80070f6 <_write_r+0x1e>
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	b103      	cbz	r3, 80070f6 <_write_r+0x1e>
 80070f4:	602b      	str	r3, [r5, #0]
 80070f6:	bd38      	pop	{r3, r4, r5, pc}
 80070f8:	20000298 	.word	0x20000298

080070fc <_close_r>:
 80070fc:	b538      	push	{r3, r4, r5, lr}
 80070fe:	4c06      	ldr	r4, [pc, #24]	; (8007118 <_close_r+0x1c>)
 8007100:	2300      	movs	r3, #0
 8007102:	4605      	mov	r5, r0
 8007104:	4608      	mov	r0, r1
 8007106:	6023      	str	r3, [r4, #0]
 8007108:	f7fa fbdf 	bl	80018ca <_close>
 800710c:	1c43      	adds	r3, r0, #1
 800710e:	d102      	bne.n	8007116 <_close_r+0x1a>
 8007110:	6823      	ldr	r3, [r4, #0]
 8007112:	b103      	cbz	r3, 8007116 <_close_r+0x1a>
 8007114:	602b      	str	r3, [r5, #0]
 8007116:	bd38      	pop	{r3, r4, r5, pc}
 8007118:	20000298 	.word	0x20000298

0800711c <_fstat_r>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	4c07      	ldr	r4, [pc, #28]	; (800713c <_fstat_r+0x20>)
 8007120:	2300      	movs	r3, #0
 8007122:	4605      	mov	r5, r0
 8007124:	4608      	mov	r0, r1
 8007126:	4611      	mov	r1, r2
 8007128:	6023      	str	r3, [r4, #0]
 800712a:	f7fa fbda 	bl	80018e2 <_fstat>
 800712e:	1c43      	adds	r3, r0, #1
 8007130:	d102      	bne.n	8007138 <_fstat_r+0x1c>
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	b103      	cbz	r3, 8007138 <_fstat_r+0x1c>
 8007136:	602b      	str	r3, [r5, #0]
 8007138:	bd38      	pop	{r3, r4, r5, pc}
 800713a:	bf00      	nop
 800713c:	20000298 	.word	0x20000298

08007140 <_isatty_r>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	4c06      	ldr	r4, [pc, #24]	; (800715c <_isatty_r+0x1c>)
 8007144:	2300      	movs	r3, #0
 8007146:	4605      	mov	r5, r0
 8007148:	4608      	mov	r0, r1
 800714a:	6023      	str	r3, [r4, #0]
 800714c:	f7fa fbd9 	bl	8001902 <_isatty>
 8007150:	1c43      	adds	r3, r0, #1
 8007152:	d102      	bne.n	800715a <_isatty_r+0x1a>
 8007154:	6823      	ldr	r3, [r4, #0]
 8007156:	b103      	cbz	r3, 800715a <_isatty_r+0x1a>
 8007158:	602b      	str	r3, [r5, #0]
 800715a:	bd38      	pop	{r3, r4, r5, pc}
 800715c:	20000298 	.word	0x20000298

08007160 <_lseek_r>:
 8007160:	b538      	push	{r3, r4, r5, lr}
 8007162:	4c07      	ldr	r4, [pc, #28]	; (8007180 <_lseek_r+0x20>)
 8007164:	4605      	mov	r5, r0
 8007166:	4608      	mov	r0, r1
 8007168:	4611      	mov	r1, r2
 800716a:	2200      	movs	r2, #0
 800716c:	6022      	str	r2, [r4, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	f7fa fbd2 	bl	8001918 <_lseek>
 8007174:	1c43      	adds	r3, r0, #1
 8007176:	d102      	bne.n	800717e <_lseek_r+0x1e>
 8007178:	6823      	ldr	r3, [r4, #0]
 800717a:	b103      	cbz	r3, 800717e <_lseek_r+0x1e>
 800717c:	602b      	str	r3, [r5, #0]
 800717e:	bd38      	pop	{r3, r4, r5, pc}
 8007180:	20000298 	.word	0x20000298

08007184 <__malloc_lock>:
 8007184:	4770      	bx	lr

08007186 <__malloc_unlock>:
 8007186:	4770      	bx	lr

08007188 <_read_r>:
 8007188:	b538      	push	{r3, r4, r5, lr}
 800718a:	4c07      	ldr	r4, [pc, #28]	; (80071a8 <_read_r+0x20>)
 800718c:	4605      	mov	r5, r0
 800718e:	4608      	mov	r0, r1
 8007190:	4611      	mov	r1, r2
 8007192:	2200      	movs	r2, #0
 8007194:	6022      	str	r2, [r4, #0]
 8007196:	461a      	mov	r2, r3
 8007198:	f7fa fb5e 	bl	8001858 <_read>
 800719c:	1c43      	adds	r3, r0, #1
 800719e:	d102      	bne.n	80071a6 <_read_r+0x1e>
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	b103      	cbz	r3, 80071a6 <_read_r+0x1e>
 80071a4:	602b      	str	r3, [r5, #0]
 80071a6:	bd38      	pop	{r3, r4, r5, pc}
 80071a8:	20000298 	.word	0x20000298

080071ac <_init>:
 80071ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ae:	bf00      	nop
 80071b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071b2:	bc08      	pop	{r3}
 80071b4:	469e      	mov	lr, r3
 80071b6:	4770      	bx	lr

080071b8 <_fini>:
 80071b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ba:	bf00      	nop
 80071bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071be:	bc08      	pop	{r3}
 80071c0:	469e      	mov	lr, r3
 80071c2:	4770      	bx	lr
