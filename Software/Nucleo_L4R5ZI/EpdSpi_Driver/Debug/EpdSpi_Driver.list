
EpdSpi_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  1 .text         00003c88  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000f1ca4  08003e48  08003e48  00013e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080f5aec  080f5aec  00110070  2**0
                  CONTENTS
  4 .ARM          00000000  080f5aec  080f5aec  00110070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080f5aec  080f5aec  00110070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080f5aec  080f5aec  00105aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080f5af0  080f5af0  00105af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080f5af4  00110000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  080f5b64  00110070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080f5b64  00110134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00110070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6e2  00000000  00000000  001100a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001de3  00000000  00000000  0011c782  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f0  00000000  00000000  0011e568  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e0  00000000  00000000  0011ef58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000296cf  00000000  00000000  0011f838  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008e3f  00000000  00000000  00148f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fb28e  00000000  00000000  00151d46  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0024cfd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d20  00000000  00000000  0024d050  2**2
=======
  1 .text         00003c10  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0016aa3c  08003dd0  08003dd0  00013dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0816e80c  0816e80c  00180070  2**0
                  CONTENTS
  4 .ARM          00000000  0816e80c  0816e80c  00180070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0816e80c  0816e80c  00180070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0816e80c  0816e80c  0017e80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0816e810  0816e810  0017e810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0816e814  00180000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  0816e884  00180070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  0816e884  00180130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00180070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c76c  00000000  00000000  001800a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e43  00000000  00000000  0018c80c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a10  00000000  00000000  0018e650  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e8  00000000  00000000  0018f060  2**3
                  CONTENTS, READONLY, DEBUGGING
=======
  1 .text         00003c10  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0016aa3c  08003dd0  08003dd0  00013dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0816e80c  0816e80c  00180070  2**0
                  CONTENTS
  4 .ARM          00000000  0816e80c  0816e80c  00180070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0816e80c  0816e80c  00180070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0816e80c  0816e80c  0017e80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0816e810  0816e810  0017e810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0816e814  00180000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  0816e884  00180070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  0816e884  00180130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00180070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c76c  00000000  00000000  001800a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e43  00000000  00000000  0018c80c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a10  00000000  00000000  0018e650  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e8  00000000  00000000  0018f060  2**3
                  CONTENTS, READONLY, DEBUGGING
>>>>>>> Stashed changes
 16 .debug_macro  000296e0  00000000  00000000  0018f948  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008e85  00000000  00000000  001b9028  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fb2c4  00000000  00000000  001c1ead  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002bd171  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d34  00000000  00000000  002bd1ec  2**2
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80001e0:	08003e30 	.word	0x08003e30
=======
 80001e0:	08003db8 	.word	0x08003db8
>>>>>>> Stashed changes
=======
 80001e0:	08003db8 	.word	0x08003db8
>>>>>>> Stashed changes

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80001fc:	08003e30 	.word	0x08003e30
=======
 80001fc:	08003db8 	.word	0x08003db8
>>>>>>> Stashed changes
=======
 80001fc:	08003db8 	.word	0x08003db8
>>>>>>> Stashed changes

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <LCDWaitForReady>:

//-----------------------------------------------------------
//Host controller function 1---Wait for host data Bus Ready
//-----------------------------------------------------------
void LCDWaitForReady()
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0

	//while(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET )

	uint8_t ulData = HAL_GPIO_ReadPin(EPD_HRDY_GPIO_Port, EPD_HRDY_Pin);
 80002a6:	2120      	movs	r1, #32
 80002a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80002ac:	f001 f9bc 	bl	8001628 <HAL_GPIO_ReadPin>
=======
 80002ac:	f001 f980 	bl	80015b0 <HAL_GPIO_ReadPin>
>>>>>>> Stashed changes
=======
 80002ac:	f001 f980 	bl	80015b0 <HAL_GPIO_ReadPin>
>>>>>>> Stashed changes
 80002b0:	4603      	mov	r3, r0
 80002b2:	71fb      	strb	r3, [r7, #7]
	while(ulData == 0)
 80002b4:	e006      	b.n	80002c4 <LCDWaitForReady+0x24>
	{
		ulData = HAL_GPIO_ReadPin(EPD_HRDY_GPIO_Port, EPD_HRDY_Pin);
 80002b6:	2120      	movs	r1, #32
 80002b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80002bc:	f001 f9b4 	bl	8001628 <HAL_GPIO_ReadPin>
=======
 80002bc:	f001 f978 	bl	80015b0 <HAL_GPIO_ReadPin>
>>>>>>> Stashed changes
=======
 80002bc:	f001 f978 	bl	80015b0 <HAL_GPIO_ReadPin>
>>>>>>> Stashed changes
 80002c0:	4603      	mov	r3, r0
 80002c2:	71fb      	strb	r3, [r7, #7]
	while(ulData == 0)
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d0f5      	beq.n	80002b6 <LCDWaitForReady+0x16>
	}
}
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <LCDWriteCmdCode>:

//-----------------------------------------------------------
//Host controller function 2---Write command code to host data Bus
//-----------------------------------------------------------
void LCDWriteCmdCode(uint16_t usCmdCode)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	80fb      	strh	r3, [r7, #6]
	//uint16_t wPreamble = 0x6000;


	//uint8_t wPreamble[2] = {0x00, 0x60};
	//uint8_t wDat[2] = {usCmdCode, usCmdCode>>8};
	uint8_t dat[4]={0x00, 0x60, usCmdCode, usCmdCode>>8};
 80002de:	2300      	movs	r3, #0
 80002e0:	733b      	strb	r3, [r7, #12]
 80002e2:	2360      	movs	r3, #96	; 0x60
 80002e4:	737b      	strb	r3, [r7, #13]
 80002e6:	88fb      	ldrh	r3, [r7, #6]
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	73bb      	strb	r3, [r7, #14]
 80002ec:	88fb      	ldrh	r3, [r7, #6]
 80002ee:	0a1b      	lsrs	r3, r3, #8
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	73fb      	strb	r3, [r7, #15]
	LCDWaitForReady();
 80002f6:	f7ff ffd3 	bl	80002a0 <LCDWaitForReady>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2101      	movs	r1, #1
 80002fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000302:	f001 f9a9 	bl	8001658 <HAL_GPIO_WritePin>
=======
 8000302:	f001 f96d 	bl	80015e0 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
=======
 8000302:	f001 f96d 	bl	80015e0 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
	HAL_SPI_Transmit(&hspi1, dat, 2, HAL_MAX_DELAY);
 8000306:	f107 010c 	add.w	r1, r7, #12
 800030a:	f04f 33ff 	mov.w	r3, #4294967295
 800030e:	2202      	movs	r2, #2
 8000310:	4806      	ldr	r0, [pc, #24]	; (800032c <LCDWriteCmdCode+0x58>)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000312:	f002 f97d 	bl	8002610 <HAL_SPI_Transmit>
=======
 8000312:	f002 f941 	bl	8002598 <HAL_SPI_Transmit>
>>>>>>> Stashed changes
=======
 8000312:	f002 f941 	bl	8002598 <HAL_SPI_Transmit>
>>>>>>> Stashed changes
	//HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
	//LCDWaitForReady();
	//HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000316:	2201      	movs	r2, #1
 8000318:	2101      	movs	r1, #1
 800031a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800031e:	f001 f99b 	bl	8001658 <HAL_GPIO_WritePin>
=======
 800031e:	f001 f95f 	bl	80015e0 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
=======
 800031e:	f001 f95f 	bl	80015e0 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
	HAL_SPI_Transmit(&hspi1, &CmdMsb, 1, HAL_MAX_DELAY);
	HAL_SPI_Transmit(&hspi1, &CmdLsb, 1, HAL_MAX_DELAY);

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
*/
}
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800032c:	200000c8 	.word	0x200000c8
=======
 800032c:	200000c4 	.word	0x200000c4
>>>>>>> Stashed changes
=======
 800032c:	200000c4 	.word	0x200000c4
>>>>>>> Stashed changes

08000330 <LCDWriteData>:

//-----------------------------------------------------------
//Host controller function 3---Write Data to host data Bus
//-----------------------------------------------------------
void LCDWriteData(uint16_t usData)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	80fb      	strh	r3, [r7, #6]

	uint8_t dat[4]={ 0x00, 0x00, (uint8_t)usData,(uint8_t)( usData>>8)};
 800033a:	2300      	movs	r3, #0
 800033c:	733b      	strb	r3, [r7, #12]
 800033e:	2300      	movs	r3, #0
 8000340:	737b      	strb	r3, [r7, #13]
 8000342:	88fb      	ldrh	r3, [r7, #6]
 8000344:	b2db      	uxtb	r3, r3
 8000346:	73bb      	strb	r3, [r7, #14]
 8000348:	88fb      	ldrh	r3, [r7, #6]
 800034a:	0a1b      	lsrs	r3, r3, #8
 800034c:	b29b      	uxth	r3, r3
 800034e:	b2db      	uxtb	r3, r3
 8000350:	73fb      	strb	r3, [r7, #15]
	//uint8_t wPreamble[2] = {0x00, 0x00};
	//uint8_t wDat[2] = { (uint8_t)usData,(uint8_t)( usData>>8)};
	LCDWaitForReady();
 8000352:	f7ff ffa5 	bl	80002a0 <LCDWaitForReady>

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	2101      	movs	r1, #1
 800035a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800035e:	f001 f97b 	bl	8001658 <HAL_GPIO_WritePin>
=======
 800035e:	f001 f93f 	bl	80015e0 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
=======
 800035e:	f001 f93f 	bl	80015e0 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
	//HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
	HAL_SPI_Transmit(&hspi1, dat, 2, HAL_MAX_DELAY);
 8000362:	f107 010c 	add.w	r1, r7, #12
 8000366:	f04f 33ff 	mov.w	r3, #4294967295
 800036a:	2202      	movs	r2, #2
 800036c:	4806      	ldr	r0, [pc, #24]	; (8000388 <LCDWriteData+0x58>)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800036e:	f002 f94f 	bl	8002610 <HAL_SPI_Transmit>
=======
 800036e:	f002 f913 	bl	8002598 <HAL_SPI_Transmit>
>>>>>>> Stashed changes
=======
 800036e:	f002 f913 	bl	8002598 <HAL_SPI_Transmit>
>>>>>>> Stashed changes
	//LCDWaitForReady();
	//HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000372:	2201      	movs	r2, #1
 8000374:	2101      	movs	r1, #1
 8000376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800037a:	f001 f96d 	bl	8001658 <HAL_GPIO_WritePin>
=======
 800037a:	f001 f931 	bl	80015e0 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
=======
 800037a:	f001 f931 	bl	80015e0 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
	HAL_SPI_Transmit(&hspi1, &DatLsb, 1, HAL_MAX_DELAY);

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 800037e:	bf00      	nop
 8000380:	3710      	adds	r7, #16
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000388:	200000c8 	.word	0x200000c8
=======
 8000388:	200000c4 	.word	0x200000c4
>>>>>>> Stashed changes
=======
 8000388:	200000c4 	.word	0x200000c4
>>>>>>> Stashed changes

0800038c <LCDWriteNData>:

void LCDWriteNData(uint16_t* pwBuf, uint32_t ulSizeWordCnt)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b086      	sub	sp, #24
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
	uint32_t i;


	uint8_t wPreamble[2] = {0x00, 0x00};
 8000396:	2300      	movs	r3, #0
 8000398:	743b      	strb	r3, [r7, #16]
 800039a:	2300      	movs	r3, #0
 800039c:	747b      	strb	r3, [r7, #17]
	uint8_t wDat[2];
	LCDWaitForReady();
 800039e:	f7ff ff7f 	bl	80002a0 <LCDWaitForReady>

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2101      	movs	r1, #1
 80003a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80003aa:	f001 f955 	bl	8001658 <HAL_GPIO_WritePin>
=======
 80003aa:	f001 f919 	bl	80015e0 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
=======
 80003aa:	f001 f919 	bl	80015e0 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 80003ae:	f107 0110 	add.w	r1, r7, #16
 80003b2:	f04f 33ff 	mov.w	r3, #4294967295
 80003b6:	2201      	movs	r2, #1
 80003b8:	4818      	ldr	r0, [pc, #96]	; (800041c <LCDWriteNData+0x90>)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80003ba:	f002 f929 	bl	8002610 <HAL_SPI_Transmit>
=======
 80003ba:	f002 f8ed 	bl	8002598 <HAL_SPI_Transmit>
>>>>>>> Stashed changes
=======
 80003ba:	f002 f8ed 	bl	8002598 <HAL_SPI_Transmit>
>>>>>>> Stashed changes
	LCDWaitForReady();
 80003be:	f7ff ff6f 	bl	80002a0 <LCDWaitForReady>
	for(i=0;i<ulSizeWordCnt;i++)
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]
 80003c6:	e01a      	b.n	80003fe <LCDWriteNData+0x72>
		{
		wDat[0]=pwBuf[i];
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	005b      	lsls	r3, r3, #1
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	4413      	add	r3, r2
 80003d0:	881b      	ldrh	r3, [r3, #0]
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	733b      	strb	r3, [r7, #12]
		wDat[1]=pwBuf[i]>>8;
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	687a      	ldr	r2, [r7, #4]
 80003dc:	4413      	add	r3, r2
 80003de:	881b      	ldrh	r3, [r3, #0]
 80003e0:	0a1b      	lsrs	r3, r3, #8
 80003e2:	b29b      	uxth	r3, r3
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	737b      	strb	r3, [r7, #13]
		HAL_SPI_Transmit(&hspi1, wDat, 1, HAL_MAX_DELAY);
 80003e8:	f107 010c 	add.w	r1, r7, #12
 80003ec:	f04f 33ff 	mov.w	r3, #4294967295
 80003f0:	2201      	movs	r2, #1
 80003f2:	480a      	ldr	r0, [pc, #40]	; (800041c <LCDWriteNData+0x90>)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80003f4:	f002 f90c 	bl	8002610 <HAL_SPI_Transmit>
=======
 80003f4:	f002 f8d0 	bl	8002598 <HAL_SPI_Transmit>
>>>>>>> Stashed changes
=======
 80003f4:	f002 f8d0 	bl	8002598 <HAL_SPI_Transmit>
>>>>>>> Stashed changes
	for(i=0;i<ulSizeWordCnt;i++)
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	3301      	adds	r3, #1
 80003fc:	617b      	str	r3, [r7, #20]
 80003fe:	697a      	ldr	r2, [r7, #20]
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	429a      	cmp	r2, r3
 8000404:	d3e0      	bcc.n	80003c8 <LCDWriteNData+0x3c>
		}

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000406:	2201      	movs	r2, #1
 8000408:	2101      	movs	r1, #1
 800040a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800040e:	f001 f923 	bl	8001658 <HAL_GPIO_WritePin>
=======
 800040e:	f001 f8e7 	bl	80015e0 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
=======
 800040e:	f001 f8e7 	bl	80015e0 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
	}

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 8000412:	bf00      	nop
 8000414:	3718      	adds	r7, #24
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800041c:	200000c8 	.word	0x200000c8
=======
 800041c:	200000c4 	.word	0x200000c4
>>>>>>> Stashed changes
=======
 800041c:	200000c4 	.word	0x200000c4
>>>>>>> Stashed changes

08000420 <LCDReadData>:

//-----------------------------------------------------------
//Host controller function 4---Read Data from host data Bus
//-----------------------------------------------------------
uint16_t LCDReadData()
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af02      	add	r7, sp, #8

	uint8_t wRLsb[2];
	uint16_t wRData;
	uint8_t wdummy[2] = {0};
 8000426:	2300      	movs	r3, #0
 8000428:	813b      	strh	r3, [r7, #8]
	uint8_t rdummy[2] = {0};
 800042a:	2300      	movs	r3, #0
 800042c:	80bb      	strh	r3, [r7, #4]
	uint8_t wPreamble[2] = {0x00, 0x10};
 800042e:	2300      	movs	r3, #0
 8000430:	703b      	strb	r3, [r7, #0]
 8000432:	2310      	movs	r3, #16
 8000434:	707b      	strb	r3, [r7, #1]

	LCDWaitForReady();
 8000436:	f7ff ff33 	bl	80002a0 <LCDWaitForReady>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2101      	movs	r1, #1
 800043e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000442:	f001 f909 	bl	8001658 <HAL_GPIO_WritePin>
=======
 8000442:	f001 f8cd 	bl	80015e0 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
=======
 8000442:	f001 f8cd 	bl	80015e0 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes

	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 8000446:	4639      	mov	r1, r7
 8000448:	f04f 33ff 	mov.w	r3, #4294967295
 800044c:	2201      	movs	r2, #1
 800044e:	4818      	ldr	r0, [pc, #96]	; (80004b0 <LCDReadData+0x90>)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000450:	f002 f8de 	bl	8002610 <HAL_SPI_Transmit>
=======
 8000450:	f002 f8a2 	bl	8002598 <HAL_SPI_Transmit>
>>>>>>> Stashed changes
=======
 8000450:	f002 f8a2 	bl	8002598 <HAL_SPI_Transmit>
>>>>>>> Stashed changes
	LCDWaitForReady();
 8000454:	f7ff ff24 	bl	80002a0 <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, rdummy, 1,HAL_MAX_DELAY);
 8000458:	1d3a      	adds	r2, r7, #4
 800045a:	f107 0108 	add.w	r1, r7, #8
 800045e:	f04f 33ff 	mov.w	r3, #4294967295
 8000462:	9300      	str	r3, [sp, #0]
 8000464:	2301      	movs	r3, #1
 8000466:	4812      	ldr	r0, [pc, #72]	; (80004b0 <LCDReadData+0x90>)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000468:	f002 fa38 	bl	80028dc <HAL_SPI_TransmitReceive>
=======
 8000468:	f002 f9fc 	bl	8002864 <HAL_SPI_TransmitReceive>
>>>>>>> Stashed changes
=======
 8000468:	f002 f9fc 	bl	8002864 <HAL_SPI_TransmitReceive>
>>>>>>> Stashed changes

	LCDWaitForReady();
 800046c:	f7ff ff18 	bl	80002a0 <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, wRLsb, 1,HAL_MAX_DELAY);
 8000470:	f107 020c 	add.w	r2, r7, #12
 8000474:	f107 0108 	add.w	r1, r7, #8
 8000478:	f04f 33ff 	mov.w	r3, #4294967295
 800047c:	9300      	str	r3, [sp, #0]
 800047e:	2301      	movs	r3, #1
 8000480:	480b      	ldr	r0, [pc, #44]	; (80004b0 <LCDReadData+0x90>)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000482:	f002 fa2b 	bl	80028dc <HAL_SPI_TransmitReceive>
=======
 8000482:	f002 f9ef 	bl	8002864 <HAL_SPI_TransmitReceive>
>>>>>>> Stashed changes
=======
 8000482:	f002 f9ef 	bl	8002864 <HAL_SPI_TransmitReceive>
>>>>>>> Stashed changes

	wRData = wRLsb[1]<<8;
 8000486:	7b7b      	ldrb	r3, [r7, #13]
 8000488:	b29b      	uxth	r3, r3
 800048a:	021b      	lsls	r3, r3, #8
 800048c:	81fb      	strh	r3, [r7, #14]
	wRData |= wRLsb[0];
 800048e:	7b3b      	ldrb	r3, [r7, #12]
 8000490:	b29a      	uxth	r2, r3
 8000492:	89fb      	ldrh	r3, [r7, #14]
 8000494:	4313      	orrs	r3, r2
 8000496:	81fb      	strh	r3, [r7, #14]
	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000498:	2201      	movs	r2, #1
 800049a:	2101      	movs	r1, #1
 800049c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80004a0:	f001 f8da 	bl	8001658 <HAL_GPIO_WritePin>
=======
 80004a0:	f001 f89e 	bl	80015e0 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
=======
 80004a0:	f001 f89e 	bl	80015e0 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes

	return wRData;
 80004a4:	89fb      	ldrh	r3, [r7, #14]
	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);

	return wRData;
	*/
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3710      	adds	r7, #16
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80004b0:	200000c8 	.word	0x200000c8
=======
 80004b0:	200000c4 	.word	0x200000c4
>>>>>>> Stashed changes
=======
 80004b0:	200000c4 	.word	0x200000c4
>>>>>>> Stashed changes

080004b4 <LCDReadNData>:

//-----------------------------------------------------------
//  Read Burst N words Data
//-----------------------------------------------------------
void LCDReadNData(uint16_t* pwBuf, uint32_t ulSizeWordCnt)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08a      	sub	sp, #40	; 0x28
 80004b8:	af02      	add	r7, sp, #8
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]

	uint32_t i;

	uint8_t wRLsb[2];
	//uint16_t wRData;
	uint8_t wdummy[2] = {0};
 80004be:	2300      	movs	r3, #0
 80004c0:	82bb      	strh	r3, [r7, #20]
	uint8_t rdummy[2] = {0};
 80004c2:	2300      	movs	r3, #0
 80004c4:	823b      	strh	r3, [r7, #16]
	uint8_t wPreamble[2] = {0x00, 0x10};
 80004c6:	2300      	movs	r3, #0
 80004c8:	733b      	strb	r3, [r7, #12]
 80004ca:	2310      	movs	r3, #16
 80004cc:	737b      	strb	r3, [r7, #13]
	LCDWaitForReady();
 80004ce:	f7ff fee7 	bl	80002a0 <LCDWaitForReady>

	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2101      	movs	r1, #1
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80004da:	f001 f8bd 	bl	8001658 <HAL_GPIO_WritePin>
=======
 80004da:	f001 f881 	bl	80015e0 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
=======
 80004da:	f001 f881 	bl	80015e0 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes

	HAL_SPI_Transmit(&hspi1, wPreamble, 1, HAL_MAX_DELAY);
 80004de:	f107 010c 	add.w	r1, r7, #12
 80004e2:	f04f 33ff 	mov.w	r3, #4294967295
 80004e6:	2201      	movs	r2, #1
 80004e8:	4823      	ldr	r0, [pc, #140]	; (8000578 <LCDReadNData+0xc4>)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80004ea:	f002 f891 	bl	8002610 <HAL_SPI_Transmit>
=======
 80004ea:	f002 f855 	bl	8002598 <HAL_SPI_Transmit>
>>>>>>> Stashed changes
=======
 80004ea:	f002 f855 	bl	8002598 <HAL_SPI_Transmit>
>>>>>>> Stashed changes

	LCDWaitForReady();
 80004ee:	f7ff fed7 	bl	80002a0 <LCDWaitForReady>

	HAL_SPI_TransmitReceive(&hspi1, wdummy, rdummy, 1,HAL_MAX_DELAY);
 80004f2:	f107 0210 	add.w	r2, r7, #16
 80004f6:	f107 0114 	add.w	r1, r7, #20
 80004fa:	f04f 33ff 	mov.w	r3, #4294967295
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	2301      	movs	r3, #1
 8000502:	481d      	ldr	r0, [pc, #116]	; (8000578 <LCDReadNData+0xc4>)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000504:	f002 f9ea 	bl	80028dc <HAL_SPI_TransmitReceive>
=======
 8000504:	f002 f9ae 	bl	8002864 <HAL_SPI_TransmitReceive>
>>>>>>> Stashed changes
=======
 8000504:	f002 f9ae 	bl	8002864 <HAL_SPI_TransmitReceive>
>>>>>>> Stashed changes

	LCDWaitForReady();
 8000508:	f7ff feca 	bl	80002a0 <LCDWaitForReady>

		for(i=0;i<ulSizeWordCnt;i++)
 800050c:	2300      	movs	r3, #0
 800050e:	61fb      	str	r3, [r7, #28]
 8000510:	e024      	b.n	800055c <LCDReadNData+0xa8>
		{
			HAL_SPI_TransmitReceive(&hspi1, wdummy, wRLsb, 1,HAL_MAX_DELAY);
 8000512:	f107 0218 	add.w	r2, r7, #24
 8000516:	f107 0114 	add.w	r1, r7, #20
 800051a:	f04f 33ff 	mov.w	r3, #4294967295
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	2301      	movs	r3, #1
 8000522:	4815      	ldr	r0, [pc, #84]	; (8000578 <LCDReadNData+0xc4>)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000524:	f002 f9da 	bl	80028dc <HAL_SPI_TransmitReceive>
=======
 8000524:	f002 f99e 	bl	8002864 <HAL_SPI_TransmitReceive>
>>>>>>> Stashed changes
=======
 8000524:	f002 f99e 	bl	8002864 <HAL_SPI_TransmitReceive>
>>>>>>> Stashed changes
			pwBuf[i] = wRLsb[1]<<8;
 8000528:	7e7b      	ldrb	r3, [r7, #25]
 800052a:	b29a      	uxth	r2, r3
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	6879      	ldr	r1, [r7, #4]
 8000532:	440b      	add	r3, r1
 8000534:	0212      	lsls	r2, r2, #8
 8000536:	b292      	uxth	r2, r2
 8000538:	801a      	strh	r2, [r3, #0]
			pwBuf[i] |= wRLsb[0];
 800053a:	69fb      	ldr	r3, [r7, #28]
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	4413      	add	r3, r2
 8000542:	8819      	ldrh	r1, [r3, #0]
 8000544:	7e3b      	ldrb	r3, [r7, #24]
 8000546:	b29a      	uxth	r2, r3
 8000548:	69fb      	ldr	r3, [r7, #28]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	4403      	add	r3, r0
 8000550:	430a      	orrs	r2, r1
 8000552:	b292      	uxth	r2, r2
 8000554:	801a      	strh	r2, [r3, #0]
		for(i=0;i<ulSizeWordCnt;i++)
 8000556:	69fb      	ldr	r3, [r7, #28]
 8000558:	3301      	adds	r3, #1
 800055a:	61fb      	str	r3, [r7, #28]
 800055c:	69fa      	ldr	r2, [r7, #28]
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	429a      	cmp	r2, r3
 8000562:	d3d6      	bcc.n	8000512 <LCDReadNData+0x5e>
		}

		HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2101      	movs	r1, #1
 8000568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800056c:	f001 f874 	bl	8001658 <HAL_GPIO_WritePin>
=======
 800056c:	f001 f838 	bl	80015e0 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
=======
 800056c:	f001 f838 	bl	80015e0 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
	}

	//bcm2835_gpio_write(CS,HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
	*/
}
 8000570:	bf00      	nop
 8000572:	3720      	adds	r7, #32
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000578:	200000c8 	.word	0x200000c8
=======
 8000578:	200000c4 	.word	0x200000c4
>>>>>>> Stashed changes
=======
 8000578:	200000c4 	.word	0x200000c4
>>>>>>> Stashed changes

0800057c <LCDSendCmdArg>:

//-----------------------------------------------------------
//Host controller function 5---Write command to host data Bus with aruments
//-----------------------------------------------------------
void LCDSendCmdArg(uint16_t usCmdCode,uint16_t* pArg, uint16_t usNumArg)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	6039      	str	r1, [r7, #0]
 8000586:	80fb      	strh	r3, [r7, #6]
 8000588:	4613      	mov	r3, r2
 800058a:	80bb      	strh	r3, [r7, #4]
     uint16_t i;
     //Send Cmd code
     LCDWriteCmdCode(usCmdCode);
 800058c:	88fb      	ldrh	r3, [r7, #6]
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff fea0 	bl	80002d4 <LCDWriteCmdCode>
     //Send Data
     for(i=0;i<usNumArg;i++)
 8000594:	2300      	movs	r3, #0
 8000596:	81fb      	strh	r3, [r7, #14]
 8000598:	e00a      	b.n	80005b0 <LCDSendCmdArg+0x34>
     {
         LCDWriteData(pArg[i]);
 800059a:	89fb      	ldrh	r3, [r7, #14]
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	683a      	ldr	r2, [r7, #0]
 80005a0:	4413      	add	r3, r2
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fec3 	bl	8000330 <LCDWriteData>
     for(i=0;i<usNumArg;i++)
 80005aa:	89fb      	ldrh	r3, [r7, #14]
 80005ac:	3301      	adds	r3, #1
 80005ae:	81fb      	strh	r3, [r7, #14]
 80005b0:	89fa      	ldrh	r2, [r7, #14]
 80005b2:	88bb      	ldrh	r3, [r7, #4]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d3f0      	bcc.n	800059a <LCDSendCmdArg+0x1e>
     }
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <IT8951ReadReg>:

//-----------------------------------------------------------
//Host Cmd 4---REG_RD
//-----------------------------------------------------------
uint16_t IT8951ReadReg(uint16_t usRegAddr)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	80fb      	strh	r3, [r7, #6]
	uint16_t usData;

	//Send Cmd and Register Address
	LCDWriteCmdCode(IT8951_TCON_REG_RD);
 80005ca:	2010      	movs	r0, #16
 80005cc:	f7ff fe82 	bl	80002d4 <LCDWriteCmdCode>
	LCDWriteData(usRegAddr);
 80005d0:	88fb      	ldrh	r3, [r7, #6]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff feac 	bl	8000330 <LCDWriteData>
	//Read data from Host Data bus
	usData = LCDReadData();
 80005d8:	f7ff ff22 	bl	8000420 <LCDReadData>
 80005dc:	4603      	mov	r3, r0
 80005de:	81fb      	strh	r3, [r7, #14]
	return usData;
 80005e0:	89fb      	ldrh	r3, [r7, #14]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <IT8951WriteReg>:
//-----------------------------------------------------------
//Host Cmd 5---REG_WR
//-----------------------------------------------------------
void IT8951WriteReg(uint16_t usRegAddr,uint16_t usValue)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b082      	sub	sp, #8
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	4603      	mov	r3, r0
 80005f2:	460a      	mov	r2, r1
 80005f4:	80fb      	strh	r3, [r7, #6]
 80005f6:	4613      	mov	r3, r2
 80005f8:	80bb      	strh	r3, [r7, #4]
	//Send Cmd , Register Address and Write Value
	LCDWriteCmdCode(IT8951_TCON_REG_WR);
 80005fa:	2011      	movs	r0, #17
 80005fc:	f7ff fe6a 	bl	80002d4 <LCDWriteCmdCode>
	LCDWriteData(usRegAddr);
 8000600:	88fb      	ldrh	r3, [r7, #6]
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff fe94 	bl	8000330 <LCDWriteData>
	LCDWriteData(usValue);
 8000608:	88bb      	ldrh	r3, [r7, #4]
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff fe90 	bl	8000330 <LCDWriteData>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <IT8951LoadImgAreaStart>:
}
//-----------------------------------------------------------
//Host Cmd 11---LD_IMG_AREA
//-----------------------------------------------------------
void IT8951LoadImgAreaStart(IT8951LdImgInfo* pstLdImgInfo ,IT8951AreaImgInfo* pstAreaImgInfo)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
    uint16_t usArg[5];
    //Setting Argument for Load image start
    usArg[0] = (pstLdImgInfo->usEndianType << 8 )
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	021b      	lsls	r3, r3, #8
    |(pstLdImgInfo->usPixelFormat << 4)
 8000628:	b21a      	sxth	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	885b      	ldrh	r3, [r3, #2]
 800062e:	011b      	lsls	r3, r3, #4
 8000630:	b21b      	sxth	r3, r3
 8000632:	4313      	orrs	r3, r2
 8000634:	b21a      	sxth	r2, r3
    |(pstLdImgInfo->usRotate);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	889b      	ldrh	r3, [r3, #4]
 800063a:	b21b      	sxth	r3, r3
 800063c:	4313      	orrs	r3, r2
 800063e:	b21b      	sxth	r3, r3
 8000640:	b29b      	uxth	r3, r3
    usArg[0] = (pstLdImgInfo->usEndianType << 8 )
 8000642:	81bb      	strh	r3, [r7, #12]
    usArg[1] = pstAreaImgInfo->usX;
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	81fb      	strh	r3, [r7, #14]
    usArg[2] = pstAreaImgInfo->usY;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	885b      	ldrh	r3, [r3, #2]
 800064e:	823b      	strh	r3, [r7, #16]
    usArg[3] = pstAreaImgInfo->usWidth;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	889b      	ldrh	r3, [r3, #4]
 8000654:	827b      	strh	r3, [r7, #18]
    usArg[4] = pstAreaImgInfo->usHeight;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	88db      	ldrh	r3, [r3, #6]
 800065a:	82bb      	strh	r3, [r7, #20]
    //Send Cmd and Args
    LCDSendCmdArg(IT8951_TCON_LD_IMG_AREA , usArg , 5);
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2205      	movs	r2, #5
 8000662:	4619      	mov	r1, r3
 8000664:	2021      	movs	r0, #33	; 0x21
 8000666:	f7ff ff89 	bl	800057c <LCDSendCmdArg>
}
 800066a:	bf00      	nop
 800066c:	3718      	adds	r7, #24
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <IT8951LoadImgEnd>:
//-----------------------------------------------------------
//Host Cmd 12---LD_IMG_END
//-----------------------------------------------------------
void IT8951LoadImgEnd(void)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	af00      	add	r7, sp, #0
    LCDWriteCmdCode(IT8951_TCON_LD_IMG_END);
 8000676:	2022      	movs	r0, #34	; 0x22
 8000678:	f7ff fe2c 	bl	80002d4 <LCDWriteCmdCode>
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}

08000680 <GetIT8951SystemInfo>:

void GetIT8951SystemInfo(void* pBuf)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	uint16_t* pusWord = (uint16_t*)pBuf;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	60fb      	str	r3, [r7, #12]
	IT8951DevInfo* pstDevInfo;

	//Send I80 CMD
	LCDWriteCmdCode(USDEF_I80_CMD_GET_DEV_INFO);
 800068c:	f240 3002 	movw	r0, #770	; 0x302
 8000690:	f7ff fe20 	bl	80002d4 <LCDWriteCmdCode>

	//Burst Read Request for SPI interface only
	LCDReadNData(pusWord, sizeof(IT8951DevInfo)/2);//Polling HRDY for each words(2-bytes) if possible
 8000694:	2114      	movs	r1, #20
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f7ff ff0c 	bl	80004b4 <LCDReadNData>

	//Show Device information of IT8951
	pstDevInfo = (IT8951DevInfo*)pBuf;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	60bb      	str	r3, [r7, #8]
	printf("Panel(W,H) = (%d,%d)\r\n",
	pstDevInfo->usPanelW, pstDevInfo->usPanelH );
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	881b      	ldrh	r3, [r3, #0]
	printf("Panel(W,H) = (%d,%d)\r\n",
 80006a4:	4619      	mov	r1, r3
	pstDevInfo->usPanelW, pstDevInfo->usPanelH );
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	885b      	ldrh	r3, [r3, #2]
	printf("Panel(W,H) = (%d,%d)\r\n",
 80006aa:	461a      	mov	r2, r3
 80006ac:	480e      	ldr	r0, [pc, #56]	; (80006e8 <GetIT8951SystemInfo+0x68>)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80006ae:	f002 fd1f 	bl	80030f0 <iprintf>
=======
 80006ae:	f002 fc3b 	bl	8002f28 <iprintf>
>>>>>>> Stashed changes
=======
 80006ae:	f002 fc3b 	bl	8002f28 <iprintf>
>>>>>>> Stashed changes
	printf("Image Buffer Address = %X\r\n",
	pstDevInfo->usImgBufAddrL | (pstDevInfo->usImgBufAddrH << 16));
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	889b      	ldrh	r3, [r3, #4]
 80006b6:	461a      	mov	r2, r3
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	88db      	ldrh	r3, [r3, #6]
 80006bc:	041b      	lsls	r3, r3, #16
	printf("Image Buffer Address = %X\r\n",
 80006be:	4313      	orrs	r3, r2
 80006c0:	4619      	mov	r1, r3
 80006c2:	480a      	ldr	r0, [pc, #40]	; (80006ec <GetIT8951SystemInfo+0x6c>)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80006c4:	f002 fd14 	bl	80030f0 <iprintf>
=======
 80006c4:	f002 fc30 	bl	8002f28 <iprintf>
>>>>>>> Stashed changes
=======
 80006c4:	f002 fc30 	bl	8002f28 <iprintf>
>>>>>>> Stashed changes
	//Show Firmware and LUT Version
	printf("FW Version = %s\r\n", (uint8_t*)pstDevInfo->usFWVersion);
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	3308      	adds	r3, #8
 80006cc:	4619      	mov	r1, r3
 80006ce:	4808      	ldr	r0, [pc, #32]	; (80006f0 <GetIT8951SystemInfo+0x70>)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80006d0:	f002 fd0e 	bl	80030f0 <iprintf>
=======
 80006d0:	f002 fc2a 	bl	8002f28 <iprintf>
>>>>>>> Stashed changes
=======
 80006d0:	f002 fc2a 	bl	8002f28 <iprintf>
>>>>>>> Stashed changes
	printf("LUT Version = %s\r\n", (uint8_t*)pstDevInfo->usLUTVersion);
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	3318      	adds	r3, #24
 80006d8:	4619      	mov	r1, r3
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <GetIT8951SystemInfo+0x74>)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80006dc:	f002 fd08 	bl	80030f0 <iprintf>
=======
 80006dc:	f002 fc24 	bl	8002f28 <iprintf>
>>>>>>> Stashed changes
=======
 80006dc:	f002 fc24 	bl	8002f28 <iprintf>
>>>>>>> Stashed changes
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80006e8:	08003e48 	.word	0x08003e48
 80006ec:	08003e60 	.word	0x08003e60
 80006f0:	08003e7c 	.word	0x08003e7c
 80006f4:	08003e90 	.word	0x08003e90
=======
=======
>>>>>>> Stashed changes
 80006e8:	08003dd0 	.word	0x08003dd0
 80006ec:	08003de8 	.word	0x08003de8
 80006f0:	08003e04 	.word	0x08003e04
 80006f4:	08003e18 	.word	0x08003e18
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

080006f8 <IT8951SetImgBufBaseAddr>:

//-----------------------------------------------------------
//Initial function 2---Set Image buffer base address
//-----------------------------------------------------------
void IT8951SetImgBufBaseAddr(uint32_t ulImgBufAddr)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	uint16_t usWordH = (uint16_t)((ulImgBufAddr >> 16) & 0x0000FFFF);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	0c1b      	lsrs	r3, r3, #16
 8000704:	81fb      	strh	r3, [r7, #14]
	uint16_t usWordL = (uint16_t)( ulImgBufAddr & 0x0000FFFF);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	81bb      	strh	r3, [r7, #12]
	//Write LISAR Reg
	IT8951WriteReg(LISAR + 2 ,usWordH);
 800070a:	89fb      	ldrh	r3, [r7, #14]
 800070c:	4619      	mov	r1, r3
 800070e:	f240 200a 	movw	r0, #522	; 0x20a
 8000712:	f7ff ff6a 	bl	80005ea <IT8951WriteReg>
	IT8951WriteReg(LISAR ,usWordL);
 8000716:	89bb      	ldrh	r3, [r7, #12]
 8000718:	4619      	mov	r1, r3
 800071a:	f44f 7002 	mov.w	r0, #520	; 0x208
 800071e:	f7ff ff64 	bl	80005ea <IT8951WriteReg>
}
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <IT8951WaitForDisplayReady>:
//-----------------------------------------------------------
//Display function 1---Wait for LUT Engine Finish
//                     Polling Display Engine Ready by LUTNo
//-----------------------------------------------------------
void IT8951WaitForDisplayReady()
{
 800072a:	b580      	push	{r7, lr}
 800072c:	af00      	add	r7, sp, #0
	//Check IT8951 Register LUTAFSR => NonZero Busy, 0 - Free
	while(IT8951ReadReg(LUTAFSR));
 800072e:	bf00      	nop
 8000730:	f241 2024 	movw	r0, #4644	; 0x1224
 8000734:	f7ff ff44 	bl	80005c0 <IT8951ReadReg>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d1f8      	bne.n	8000730 <IT8951WaitForDisplayReady+0x6>
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}

08000742 <IT8951HostAreaPackedPixelWrite>:

//-----------------------------------------------------------
//Display function 2---Load Image Area process
//-----------------------------------------------------------
void IT8951HostAreaPackedPixelWrite(IT8951LdImgInfo* pstLdImgInfo,IT8951AreaImgInfo* pstAreaImgInfo)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	b084      	sub	sp, #16
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
 800074a:	6039      	str	r1, [r7, #0]
	//uint32_t i,j;
	//Source buffer address of Host
	uint16_t* pusFrameBuf = (uint16_t*)pstLdImgInfo->ulStartFBAddr;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	60fb      	str	r3, [r7, #12]

	//Set Image buffer(IT8951) Base address
	IT8951SetImgBufBaseAddr(pstLdImgInfo->ulImgBufBaseAddr);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	68db      	ldr	r3, [r3, #12]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ffce 	bl	80006f8 <IT8951SetImgBufBaseAddr>
	//Send Load Image start Cmd
	IT8951LoadImgAreaStart(pstLdImgInfo , pstAreaImgInfo);
 800075c:	6839      	ldr	r1, [r7, #0]
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f7ff ff5a 	bl	8000618 <IT8951LoadImgAreaStart>
	//Host Write Data
	LCDWriteNData(pusFrameBuf, (pstAreaImgInfo->usHeight*pstAreaImgInfo->usWidth/2));
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	88db      	ldrh	r3, [r3, #6]
 8000768:	461a      	mov	r2, r3
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	889b      	ldrh	r3, [r3, #4]
 800076e:	fb03 f302 	mul.w	r3, r3, r2
 8000772:	0fda      	lsrs	r2, r3, #31
 8000774:	4413      	add	r3, r2
 8000776:	105b      	asrs	r3, r3, #1
 8000778:	4619      	mov	r1, r3
 800077a:	68f8      	ldr	r0, [r7, #12]
 800077c:	f7ff fe06 	bl	800038c <LCDWriteNData>
					LCDWriteData(*pusFrameBuf);
					pusFrameBuf++;
			}
	}*/
	//Send Load Img End Command
	IT8951LoadImgEnd();
 8000780:	f7ff ff77 	bl	8000672 <IT8951LoadImgEnd>
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <IT8951DisplayArea>:

//-----------------------------------------------------------
//Display functions 3---Application for Display panel Area
//-----------------------------------------------------------
void IT8951DisplayArea(uint16_t usX, uint16_t usY, uint16_t usW, uint16_t usH, uint16_t usDpyMode)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4604      	mov	r4, r0
 8000794:	4608      	mov	r0, r1
 8000796:	4611      	mov	r1, r2
 8000798:	461a      	mov	r2, r3
 800079a:	4623      	mov	r3, r4
 800079c:	80fb      	strh	r3, [r7, #6]
 800079e:	4603      	mov	r3, r0
 80007a0:	80bb      	strh	r3, [r7, #4]
 80007a2:	460b      	mov	r3, r1
 80007a4:	807b      	strh	r3, [r7, #2]
 80007a6:	4613      	mov	r3, r2
 80007a8:	803b      	strh	r3, [r7, #0]
	//Send I80 Display Command (User defined command of IT8951)
	LCDWriteCmdCode(USDEF_I80_CMD_DPY_AREA); //0x0034
 80007aa:	2034      	movs	r0, #52	; 0x34
 80007ac:	f7ff fd92 	bl	80002d4 <LCDWriteCmdCode>
	//Write arguments
	LCDWriteData(usX);
 80007b0:	88fb      	ldrh	r3, [r7, #6]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff fdbc 	bl	8000330 <LCDWriteData>
	LCDWriteData(usY);
 80007b8:	88bb      	ldrh	r3, [r7, #4]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fdb8 	bl	8000330 <LCDWriteData>
	LCDWriteData(usW);
 80007c0:	887b      	ldrh	r3, [r7, #2]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fdb4 	bl	8000330 <LCDWriteData>
	LCDWriteData(usH);
 80007c8:	883b      	ldrh	r3, [r7, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fdb0 	bl	8000330 <LCDWriteData>
	LCDWriteData(usDpyMode);
 80007d0:	8b3b      	ldrh	r3, [r7, #24]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fdac 	bl	8000330 <LCDWriteData>
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd90      	pop	{r4, r7, pc}

080007e0 <IT8951_Init>:

//-----------------------------------------------------------
//Test function 1---Software Initial
//-----------------------------------------------------------
uint8_t IT8951_Init()
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	//bcm2835_gpio_fsel(CS, BCM2835_GPIO_FSEL_OUTP);
	//bcm2835_gpio_fsel(HRDY, BCM2835_GPIO_FSEL_INPT);
	//bcm2835_gpio_fsel(RESET, BCM2835_GPIO_FSEL_OUTP);

	//bcm2835_gpio_write(CS, HIGH);
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2101      	movs	r1, #1
 80007e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80007ec:	f000 ff34 	bl	8001658 <HAL_GPIO_WritePin>

	printf("****** IT8951 ******\n");
 80007f0:	4812      	ldr	r0, [pc, #72]	; (800083c <IT8951_Init+0x5c>)
 80007f2:	f002 fcf1 	bl	80031d8 <puts>
=======
=======
>>>>>>> Stashed changes
 80007ec:	f000 fef8 	bl	80015e0 <HAL_GPIO_WritePin>

	printf("****** IT8951 ******\n");
 80007f0:	4812      	ldr	r0, [pc, #72]	; (800083c <IT8951_Init+0x5c>)
 80007f2:	f002 fc0d 	bl	8003010 <puts>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

	//bcm2835_gpio_write(RESET, LOW);
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2110      	movs	r1, #16
 80007fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80007fe:	f000 ff2b 	bl	8001658 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000802:	2064      	movs	r0, #100	; 0x64
 8000804:	f000 fc76 	bl	80010f4 <HAL_Delay>
=======
 80007fe:	f000 feef 	bl	80015e0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000802:	2064      	movs	r0, #100	; 0x64
 8000804:	f000 fc3a 	bl	800107c <HAL_Delay>
>>>>>>> Stashed changes
=======
 80007fe:	f000 feef 	bl	80015e0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000802:	2064      	movs	r0, #100	; 0x64
 8000804:	f000 fc3a 	bl	800107c <HAL_Delay>
>>>>>>> Stashed changes
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2110      	movs	r1, #16
 800080c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000810:	f000 ff22 	bl	8001658 <HAL_GPIO_WritePin>
=======
 8000810:	f000 fee6 	bl	80015e0 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
=======
 8000810:	f000 fee6 	bl	80015e0 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
	//bcm2835_gpio_write(RESET, HIGH);

	//Get Device Info
	GetIT8951SystemInfo(&gstI80DevInfo);
 8000814:	480a      	ldr	r0, [pc, #40]	; (8000840 <IT8951_Init+0x60>)
 8000816:	f7ff ff33 	bl	8000680 <GetIT8951SystemInfo>
//	{
//		perror("malloc error!\n");
//		return 1;
//	}

 	gulImgBufAddr = gstI80DevInfo.usImgBufAddrL | (gstI80DevInfo.usImgBufAddrH << 16);
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <IT8951_Init+0x60>)
 800081c:	889b      	ldrh	r3, [r3, #4]
 800081e:	461a      	mov	r2, r3
 8000820:	4b07      	ldr	r3, [pc, #28]	; (8000840 <IT8951_Init+0x60>)
 8000822:	88db      	ldrh	r3, [r3, #6]
 8000824:	041b      	lsls	r3, r3, #16
 8000826:	4313      	orrs	r3, r2
 8000828:	461a      	mov	r2, r3
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <IT8951_Init+0x64>)
 800082c:	601a      	str	r2, [r3, #0]

 	//Set to Enable I80 Packed mode
 	IT8951WriteReg(I80CPCR, 0x0001);
 800082e:	2101      	movs	r1, #1
 8000830:	2004      	movs	r0, #4
 8000832:	f7ff feda 	bl	80005ea <IT8951WriteReg>

	return 0;
 8000836:	2300      	movs	r3, #0
}
 8000838:	4618      	mov	r0, r3
 800083a:	bd80      	pop	{r7, pc}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800083c:	08003ea4 	.word	0x08003ea4
 8000840:	2000009c 	.word	0x2000009c
 8000844:	200000c4 	.word	0x200000c4
=======
 800083c:	08003e2c 	.word	0x08003e2c
 8000840:	20000098 	.word	0x20000098
 8000844:	200000c0 	.word	0x200000c0
>>>>>>> Stashed changes
=======
 800083c:	08003e2c 	.word	0x08003e2c
 8000840:	20000098 	.word	0x20000098
 8000844:	200000c0 	.word	0x200000c0
>>>>>>> Stashed changes

08000848 <IT8951DisplayExample3>:
	IT8951DisplayArea(0,0, gstI80DevInfo.usPanelW, gstI80DevInfo.usPanelH, 2);
}

extern const unsigned char kal[];
void IT8951DisplayExample3()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af02      	add	r7, sp, #8
//	for (i = 0;i < 1200*825;i++)
//	{
	//gpFrameBuf[i] = pic[i];
//	}

	IT8951WaitForDisplayReady();
 800084e:	f7ff ff6c 	bl	800072a <IT8951WaitForDisplayReady>

	//Setting Load image information
	stLdImgInfo.ulStartFBAddr    = (uint32_t)kal;
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <IT8951DisplayExample3+0x60>)
 8000854:	613b      	str	r3, [r7, #16]
	stLdImgInfo.usEndianType     = IT8951_LDIMG_L_ENDIAN;
 8000856:	2300      	movs	r3, #0
 8000858:	813b      	strh	r3, [r7, #8]
	stLdImgInfo.usPixelFormat    = IT8951_8BPP;
 800085a:	2303      	movs	r3, #3
 800085c:	817b      	strh	r3, [r7, #10]
	stLdImgInfo.usRotate         = IT8951_ROTATE_0;
 800085e:	2300      	movs	r3, #0
 8000860:	81bb      	strh	r3, [r7, #12]
	stLdImgInfo.ulImgBufBaseAddr = gulImgBufAddr;
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <IT8951DisplayExample3+0x64>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	617b      	str	r3, [r7, #20]
	//Set Load Area
	stAreaImgInfo.usX      = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	803b      	strh	r3, [r7, #0]
	stAreaImgInfo.usY      = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	807b      	strh	r3, [r7, #2]
	stAreaImgInfo.usWidth  = gstI80DevInfo.usPanelW;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <IT8951DisplayExample3+0x68>)
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	80bb      	strh	r3, [r7, #4]
 	stAreaImgInfo.usHeight = gstI80DevInfo.usPanelH;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <IT8951DisplayExample3+0x68>)
 8000878:	885b      	ldrh	r3, [r3, #2]
 800087a:	80fb      	strh	r3, [r7, #6]

	//Load Image from Host to IT8951 Image Buffer
	IT8951HostAreaPackedPixelWrite(&stLdImgInfo, &stAreaImgInfo);//Display function 2
 800087c:	463a      	mov	r2, r7
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff5c 	bl	8000742 <IT8951HostAreaPackedPixelWrite>
	//Display Area ?V (x,y,w,h) with mode 2 for fast gray clear mode - depends on current waveform
	IT8951DisplayArea(0,0, gstI80DevInfo.usPanelW, gstI80DevInfo.usPanelH, 2);
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <IT8951DisplayExample3+0x68>)
 800088c:	881a      	ldrh	r2, [r3, #0]
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <IT8951DisplayExample3+0x68>)
 8000890:	8859      	ldrh	r1, [r3, #2]
 8000892:	2302      	movs	r3, #2
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	460b      	mov	r3, r1
 8000898:	2100      	movs	r1, #0
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff ff76 	bl	800078c <IT8951DisplayArea>
	//IT8951Sleep();
}
 80008a0:	bf00      	nop
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80008a8:	08003ee4 	.word	0x08003ee4
 80008ac:	200000c4 	.word	0x200000c4
 80008b0:	2000009c 	.word	0x2000009c
=======
 80008a8:	0807cc04 	.word	0x0807cc04
 80008ac:	200000c0 	.word	0x200000c0
 80008b0:	20000098 	.word	0x20000098
>>>>>>> Stashed changes
=======
 80008a8:	0807cc04 	.word	0x0807cc04
 80008ac:	200000c0 	.word	0x200000c0
 80008b0:	20000098 	.word	0x20000098
>>>>>>> Stashed changes

080008b4 <EpdDriverLoadTemplate>:
//extern const unsigned char kal1[];
extern const unsigned char Kalender[];
void EpdDriverLoadTemplate()
{
 80008b4:	b580      	push	{r7, lr}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80008b6:	f5ad 2df1 	sub.w	sp, sp, #493568	; 0x78800
 80008ba:	f5ad 6db7 	sub.w	sp, sp, #1464	; 0x5b8
 80008be:	af02      	add	r7, sp, #8
	uint8_t pic[495000]={0};
 80008c0:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 80008c4:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 80008c8:	4618      	mov	r0, r3
 80008ca:	4b30      	ldr	r3, [pc, #192]	; (800098c <IT8951DisplayExample4+0xd8>)
 80008cc:	461a      	mov	r2, r3
 80008ce:	2100      	movs	r1, #0
 80008d0:	f002 fb5e 	bl	8002f90 <memset>
//	for (i = 0;i < 495000;i++)
//	{
//		pic[i] = kal1[i];
//	}

	IT8951WaitForDisplayReady();
 80008d4:	f7ff ff29 	bl	800072a <IT8951WaitForDisplayReady>

	//Setting Load image information
	stLdImgInfo.ulStartFBAddr    = (uint32_t)pic;
 80008d8:	f507 62b6 	add.w	r2, r7, #1456	; 0x5b0
 80008dc:	f5a2 62b3 	sub.w	r2, r2, #1432	; 0x598
 80008e0:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 80008e4:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 80008e8:	609a      	str	r2, [r3, #8]
	stLdImgInfo.usEndianType     = IT8951_LDIMG_L_ENDIAN;
 80008ea:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 80008ee:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 80008f2:	2200      	movs	r2, #0
 80008f4:	801a      	strh	r2, [r3, #0]
	stLdImgInfo.usPixelFormat    = IT8951_4BPP;
 80008f6:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 80008fa:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 80008fe:	2202      	movs	r2, #2
 8000900:	805a      	strh	r2, [r3, #2]
	stLdImgInfo.usRotate         = IT8951_ROTATE_0;
 8000902:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8000906:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 800090a:	2200      	movs	r2, #0
 800090c:	809a      	strh	r2, [r3, #4]
	stLdImgInfo.ulImgBufBaseAddr = gulImgBufAddr;
 800090e:	4b20      	ldr	r3, [pc, #128]	; (8000990 <IT8951DisplayExample4+0xdc>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8000916:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 800091a:	60da      	str	r2, [r3, #12]
	//Set Load Area
	stAreaImgInfo.usX      = 0;
 800091c:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8000920:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8000924:	2200      	movs	r2, #0
 8000926:	801a      	strh	r2, [r3, #0]
	stAreaImgInfo.usY      = 0;
 8000928:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 800092c:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8000930:	2200      	movs	r2, #0
 8000932:	805a      	strh	r2, [r3, #2]
	stAreaImgInfo.usWidth  = gstI80DevInfo.usPanelW;
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <IT8951DisplayExample4+0xe0>)
 8000936:	881a      	ldrh	r2, [r3, #0]
 8000938:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 800093c:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8000940:	809a      	strh	r2, [r3, #4]
 	stAreaImgInfo.usHeight = gstI80DevInfo.usPanelH;
 8000942:	4b14      	ldr	r3, [pc, #80]	; (8000994 <IT8951DisplayExample4+0xe0>)
 8000944:	885a      	ldrh	r2, [r3, #2]
 8000946:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 800094a:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800094e:	80da      	strh	r2, [r3, #6]

	//Load Image from Host to IT8951 Image Buffer
	IT8951HostAreaPackedPixelWrite(&stLdImgInfo, &stAreaImgInfo);//Display function 2
 8000950:	f507 62b6 	add.w	r2, r7, #1456	; 0x5b0
 8000954:	f5a2 62b6 	sub.w	r2, r2, #1456	; 0x5b0
 8000958:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 800095c:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff feed 	bl	8000742 <IT8951HostAreaPackedPixelWrite>
	//Display Area ?V (x,y,w,h) with mode 2 for fast gray clear mode - depends on current waveform
	IT8951DisplayArea(0,0, gstI80DevInfo.usPanelW, gstI80DevInfo.usPanelH, 2);
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <IT8951DisplayExample4+0xe0>)
 800096a:	881a      	ldrh	r2, [r3, #0]
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <IT8951DisplayExample4+0xe0>)
 800096e:	8859      	ldrh	r1, [r3, #2]
 8000970:	2302      	movs	r3, #2
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	460b      	mov	r3, r1
 8000976:	2100      	movs	r1, #0
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff07 	bl	800078c <IT8951DisplayArea>
	//IT8951Sleep();
}
 800097e:	bf00      	nop
 8000980:	f507 27f1 	add.w	r7, r7, #493568	; 0x78800
 8000984:	f507 67b6 	add.w	r7, r7, #1456	; 0x5b0
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	00078d98 	.word	0x00078d98
 8000990:	200000c4 	.word	0x200000c4
 8000994:	2000009c 	.word	0x2000009c

08000998 <MX_GPIO_Init>:
=======
 80008b6:	b088      	sub	sp, #32
 80008b8:	af02      	add	r7, sp, #8
	IT8951LdImgInfo stLdImgInfo;
	IT8951AreaImgInfo stAreaImgInfo;
	IT8951WaitForDisplayReady();
 80008ba:	f7ff ff36 	bl	800072a <IT8951WaitForDisplayReady>

	//Setting Load image information
	stLdImgInfo.ulStartFBAddr    = (uint32_t)Kalender;
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <EpdDriverLoadTemplate+0x60>)
 80008c0:	613b      	str	r3, [r7, #16]
	stLdImgInfo.usEndianType     = IT8951_LDIMG_L_ENDIAN;
 80008c2:	2300      	movs	r3, #0
 80008c4:	813b      	strh	r3, [r7, #8]
	stLdImgInfo.usPixelFormat    = IT8951_4BPP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	817b      	strh	r3, [r7, #10]
	stLdImgInfo.usRotate         = IT8951_ROTATE_0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	81bb      	strh	r3, [r7, #12]
	stLdImgInfo.ulImgBufBaseAddr = gulImgBufAddr;
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <EpdDriverLoadTemplate+0x64>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	617b      	str	r3, [r7, #20]
	//Set Load Area
	stAreaImgInfo.usX      = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	803b      	strh	r3, [r7, #0]
	stAreaImgInfo.usY      = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	807b      	strh	r3, [r7, #2]
	stAreaImgInfo.usWidth  = gstI80DevInfo.usPanelW;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <EpdDriverLoadTemplate+0x68>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	80bb      	strh	r3, [r7, #4]
 	stAreaImgInfo.usHeight = gstI80DevInfo.usPanelH;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <EpdDriverLoadTemplate+0x68>)
 80008e4:	885b      	ldrh	r3, [r3, #2]
 80008e6:	80fb      	strh	r3, [r7, #6]

	//Load Image from Host to IT8951 Image Buffer
	IT8951HostAreaPackedPixelWrite(&stLdImgInfo, &stAreaImgInfo);//Display function 2
 80008e8:	463a      	mov	r2, r7
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	4611      	mov	r1, r2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff26 	bl	8000742 <IT8951HostAreaPackedPixelWrite>
	//Display Area ?V (x,y,w,h) with mode 2 for fast gray clear mode - depends on current waveform
	IT8951DisplayArea(0,0, gstI80DevInfo.usPanelW, gstI80DevInfo.usPanelH, 2);
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <EpdDriverLoadTemplate+0x68>)
 80008f8:	881a      	ldrh	r2, [r3, #0]
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <EpdDriverLoadTemplate+0x68>)
 80008fc:	8859      	ldrh	r1, [r3, #2]
 80008fe:	2302      	movs	r3, #2
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	460b      	mov	r3, r1
 8000904:	2100      	movs	r1, #0
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff ff40 	bl	800078c <IT8951DisplayArea>
	//IT8951Sleep();
}
=======
 80008b6:	b088      	sub	sp, #32
 80008b8:	af02      	add	r7, sp, #8
	IT8951LdImgInfo stLdImgInfo;
	IT8951AreaImgInfo stAreaImgInfo;
	IT8951WaitForDisplayReady();
 80008ba:	f7ff ff36 	bl	800072a <IT8951WaitForDisplayReady>

	//Setting Load image information
	stLdImgInfo.ulStartFBAddr    = (uint32_t)Kalender;
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <EpdDriverLoadTemplate+0x60>)
 80008c0:	613b      	str	r3, [r7, #16]
	stLdImgInfo.usEndianType     = IT8951_LDIMG_L_ENDIAN;
 80008c2:	2300      	movs	r3, #0
 80008c4:	813b      	strh	r3, [r7, #8]
	stLdImgInfo.usPixelFormat    = IT8951_4BPP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	817b      	strh	r3, [r7, #10]
	stLdImgInfo.usRotate         = IT8951_ROTATE_0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	81bb      	strh	r3, [r7, #12]
	stLdImgInfo.ulImgBufBaseAddr = gulImgBufAddr;
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <EpdDriverLoadTemplate+0x64>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	617b      	str	r3, [r7, #20]
	//Set Load Area
	stAreaImgInfo.usX      = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	803b      	strh	r3, [r7, #0]
	stAreaImgInfo.usY      = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	807b      	strh	r3, [r7, #2]
	stAreaImgInfo.usWidth  = gstI80DevInfo.usPanelW;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <EpdDriverLoadTemplate+0x68>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	80bb      	strh	r3, [r7, #4]
 	stAreaImgInfo.usHeight = gstI80DevInfo.usPanelH;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <EpdDriverLoadTemplate+0x68>)
 80008e4:	885b      	ldrh	r3, [r3, #2]
 80008e6:	80fb      	strh	r3, [r7, #6]

	//Load Image from Host to IT8951 Image Buffer
	IT8951HostAreaPackedPixelWrite(&stLdImgInfo, &stAreaImgInfo);//Display function 2
 80008e8:	463a      	mov	r2, r7
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	4611      	mov	r1, r2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff26 	bl	8000742 <IT8951HostAreaPackedPixelWrite>
	//Display Area ?V (x,y,w,h) with mode 2 for fast gray clear mode - depends on current waveform
	IT8951DisplayArea(0,0, gstI80DevInfo.usPanelW, gstI80DevInfo.usPanelH, 2);
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <EpdDriverLoadTemplate+0x68>)
 80008f8:	881a      	ldrh	r2, [r3, #0]
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <EpdDriverLoadTemplate+0x68>)
 80008fc:	8859      	ldrh	r1, [r3, #2]
 80008fe:	2302      	movs	r3, #2
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	460b      	mov	r3, r1
 8000904:	2100      	movs	r1, #0
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff ff40 	bl	800078c <IT8951DisplayArea>
	//IT8951Sleep();
}
>>>>>>> Stashed changes
 800090c:	bf00      	nop
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	08003e6c 	.word	0x08003e6c
 8000918:	200000c0 	.word	0x200000c0
 800091c:	20000098 	.word	0x20000098

08000920 <MX_GPIO_Init>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000998:	b580      	push	{r7, lr}
 800099a:	b08c      	sub	sp, #48	; 0x30
 800099c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	4b79      	ldr	r3, [pc, #484]	; (8000b94 <MX_GPIO_Init+0x1fc>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	4a78      	ldr	r2, [pc, #480]	; (8000b94 <MX_GPIO_Init+0x1fc>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ba:	4b76      	ldr	r3, [pc, #472]	; (8000b94 <MX_GPIO_Init+0x1fc>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	61bb      	str	r3, [r7, #24]
 80009c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c6:	4b73      	ldr	r3, [pc, #460]	; (8000b94 <MX_GPIO_Init+0x1fc>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	4a72      	ldr	r2, [pc, #456]	; (8000b94 <MX_GPIO_Init+0x1fc>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d2:	4b70      	ldr	r3, [pc, #448]	; (8000b94 <MX_GPIO_Init+0x1fc>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b6d      	ldr	r3, [pc, #436]	; (8000b94 <MX_GPIO_Init+0x1fc>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	4a6c      	ldr	r2, [pc, #432]	; (8000b94 <MX_GPIO_Init+0x1fc>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ea:	4b6a      	ldr	r3, [pc, #424]	; (8000b94 <MX_GPIO_Init+0x1fc>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	4b67      	ldr	r3, [pc, #412]	; (8000b94 <MX_GPIO_Init+0x1fc>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	4a66      	ldr	r2, [pc, #408]	; (8000b94 <MX_GPIO_Init+0x1fc>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a02:	4b64      	ldr	r3, [pc, #400]	; (8000b94 <MX_GPIO_Init+0x1fc>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0e:	4b61      	ldr	r3, [pc, #388]	; (8000b94 <MX_GPIO_Init+0x1fc>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	4a60      	ldr	r2, [pc, #384]	; (8000b94 <MX_GPIO_Init+0x1fc>)
 8000a14:	f043 0308 	orr.w	r3, r3, #8
 8000a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1a:	4b5e      	ldr	r3, [pc, #376]	; (8000b94 <MX_GPIO_Init+0x1fc>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	f003 0308 	and.w	r3, r3, #8
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a26:	4b5b      	ldr	r3, [pc, #364]	; (8000b94 <MX_GPIO_Init+0x1fc>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	4a5a      	ldr	r2, [pc, #360]	; (8000b94 <MX_GPIO_Init+0x1fc>)
 8000a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a32:	4b58      	ldr	r3, [pc, #352]	; (8000b94 <MX_GPIO_Init+0x1fc>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000a3e:	f000 fee7 	bl	8001810 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EPD_CS_Pin|EPD_RST_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2111      	movs	r1, #17
 8000a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4a:	f000 fe05 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000a54:	4850      	ldr	r0, [pc, #320]	; (8000b98 <MX_GPIO_Init+0x200>)
 8000a56:	f000 fdff 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2140      	movs	r1, #64	; 0x40
 8000a5e:	484f      	ldr	r0, [pc, #316]	; (8000b9c <MX_GPIO_Init+0x204>)
 8000a60:	f000 fdfa 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a6a:	4b4d      	ldr	r3, [pc, #308]	; (8000ba0 <MX_GPIO_Init+0x208>)
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	484a      	ldr	r0, [pc, #296]	; (8000ba4 <MX_GPIO_Init+0x20c>)
 8000a7a:	f000 fc43 	bl	8001304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_RST_Pin;
 8000a7e:	2311      	movs	r3, #17
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a98:	f000 fc34 	bl	8001304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_HRDY_Pin;
 8000a9c:	2320      	movs	r3, #32
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EPD_HRDY_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab2:	f000 fc27 	bl	8001304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000ab6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4832      	ldr	r0, [pc, #200]	; (8000b98 <MX_GPIO_Init+0x200>)
 8000ad0:	f000 fc18 	bl	8001304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ad4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	482d      	ldr	r0, [pc, #180]	; (8000ba8 <MX_GPIO_Init+0x210>)
 8000af2:	f000 fc07 	bl	8001304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000af6:	2320      	movs	r3, #32
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4824      	ldr	r0, [pc, #144]	; (8000b9c <MX_GPIO_Init+0x204>)
 8000b0a:	f000 fbfb 	bl	8001304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b0e:	2340      	movs	r3, #64	; 0x40
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	481d      	ldr	r0, [pc, #116]	; (8000b9c <MX_GPIO_Init+0x204>)
 8000b26:	f000 fbed 	bl	8001304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000b2a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	4619      	mov	r1, r3
 8000b46:	4815      	ldr	r0, [pc, #84]	; (8000b9c <MX_GPIO_Init+0x204>)
 8000b48:	f000 fbdc 	bl	8001304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b4c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b5e:	230a      	movs	r3, #10
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	4619      	mov	r1, r3
 8000b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6c:	f000 fbca 	bl	8001304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	4619      	mov	r1, r3
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b88:	f000 fbbc 	bl	8001304 <HAL_GPIO_Init>

}
 8000b8c:	bf00      	nop
 8000b8e:	3730      	adds	r7, #48	; 0x30
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40021000 	.word	0x40021000
 8000b98:	48000400 	.word	0x48000400
 8000b9c:	48001800 	.word	0x48001800
 8000ba0:	10110000 	.word	0x10110000
 8000ba4:	48000800 	.word	0x48000800
 8000ba8:	48000c00 	.word	0x48000c00

08000bac <main>:
=======
=======
>>>>>>> Stashed changes
 8000920:	b580      	push	{r7, lr}
 8000922:	b08c      	sub	sp, #48	; 0x30
 8000924:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	4b79      	ldr	r3, [pc, #484]	; (8000b1c <MX_GPIO_Init+0x1fc>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a78      	ldr	r2, [pc, #480]	; (8000b1c <MX_GPIO_Init+0x1fc>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b76      	ldr	r3, [pc, #472]	; (8000b1c <MX_GPIO_Init+0x1fc>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	61bb      	str	r3, [r7, #24]
 800094c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094e:	4b73      	ldr	r3, [pc, #460]	; (8000b1c <MX_GPIO_Init+0x1fc>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a72      	ldr	r2, [pc, #456]	; (8000b1c <MX_GPIO_Init+0x1fc>)
 8000954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b70      	ldr	r3, [pc, #448]	; (8000b1c <MX_GPIO_Init+0x1fc>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b6d      	ldr	r3, [pc, #436]	; (8000b1c <MX_GPIO_Init+0x1fc>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4a6c      	ldr	r2, [pc, #432]	; (8000b1c <MX_GPIO_Init+0x1fc>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4b6a      	ldr	r3, [pc, #424]	; (8000b1c <MX_GPIO_Init+0x1fc>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b67      	ldr	r3, [pc, #412]	; (8000b1c <MX_GPIO_Init+0x1fc>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	4a66      	ldr	r2, [pc, #408]	; (8000b1c <MX_GPIO_Init+0x1fc>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098a:	4b64      	ldr	r3, [pc, #400]	; (8000b1c <MX_GPIO_Init+0x1fc>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000996:	4b61      	ldr	r3, [pc, #388]	; (8000b1c <MX_GPIO_Init+0x1fc>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	4a60      	ldr	r2, [pc, #384]	; (8000b1c <MX_GPIO_Init+0x1fc>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a2:	4b5e      	ldr	r3, [pc, #376]	; (8000b1c <MX_GPIO_Init+0x1fc>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ae:	4b5b      	ldr	r3, [pc, #364]	; (8000b1c <MX_GPIO_Init+0x1fc>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	4a5a      	ldr	r2, [pc, #360]	; (8000b1c <MX_GPIO_Init+0x1fc>)
 80009b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ba:	4b58      	ldr	r3, [pc, #352]	; (8000b1c <MX_GPIO_Init+0x1fc>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80009c6:	f000 fee7 	bl	8001798 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EPD_CS_Pin|EPD_RST_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2111      	movs	r1, #17
 80009ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d2:	f000 fe05 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80009dc:	4850      	ldr	r0, [pc, #320]	; (8000b20 <MX_GPIO_Init+0x200>)
 80009de:	f000 fdff 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2140      	movs	r1, #64	; 0x40
 80009e6:	484f      	ldr	r0, [pc, #316]	; (8000b24 <MX_GPIO_Init+0x204>)
 80009e8:	f000 fdfa 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f2:	4b4d      	ldr	r3, [pc, #308]	; (8000b28 <MX_GPIO_Init+0x208>)
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	484a      	ldr	r0, [pc, #296]	; (8000b2c <MX_GPIO_Init+0x20c>)
 8000a02:	f000 fc43 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_RST_Pin;
 8000a06:	2311      	movs	r3, #17
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a20:	f000 fc34 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_HRDY_Pin;
 8000a24:	2320      	movs	r3, #32
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EPD_HRDY_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3a:	f000 fc27 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000a3e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	4832      	ldr	r0, [pc, #200]	; (8000b20 <MX_GPIO_Init+0x200>)
 8000a58:	f000 fc18 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a6e:	2307      	movs	r3, #7
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	482d      	ldr	r0, [pc, #180]	; (8000b30 <MX_GPIO_Init+0x210>)
 8000a7a:	f000 fc07 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a7e:	2320      	movs	r3, #32
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4824      	ldr	r0, [pc, #144]	; (8000b24 <MX_GPIO_Init+0x204>)
 8000a92:	f000 fbfb 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a96:	2340      	movs	r3, #64	; 0x40
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	481d      	ldr	r0, [pc, #116]	; (8000b24 <MX_GPIO_Init+0x204>)
 8000aae:	f000 fbed 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000ab2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4815      	ldr	r0, [pc, #84]	; (8000b24 <MX_GPIO_Init+0x204>)
 8000ad0:	f000 fbdc 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ad4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ae6:	230a      	movs	r3, #10
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af4:	f000 fbca 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000af8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b10:	f000 fbbc 	bl	800128c <HAL_GPIO_Init>

}
 8000b14:	bf00      	nop
 8000b16:	3730      	adds	r7, #48	; 0x30
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	48000400 	.word	0x48000400
 8000b24:	48001800 	.word	0x48001800
 8000b28:	10110000 	.word	0x10110000
 8000b2c:	48000800 	.word	0x48000800
 8000b30:	48000c00 	.word	0x48000c00

08000b34 <main>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
=======
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000bb0:	f000 fa2f 	bl	8001012 <HAL_Init>
=======
 8000b38:	f000 fa2f 	bl	8000f9a <HAL_Init>
>>>>>>> Stashed changes
=======
 8000b38:	f000 fa2f 	bl	8000f9a <HAL_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000bb4:	f000 f80b 	bl	8000bce <SystemClock_Config>
=======
 8000b3c:	f000 f80b 	bl	8000b56 <SystemClock_Config>
>>>>>>> Stashed changes
=======
 8000b3c:	f000 f80b 	bl	8000b56 <SystemClock_Config>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000bb8:	f7ff feee 	bl	8000998 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000bbc:	f000 f85e 	bl	8000c7c <MX_SPI1_Init>
  IT8951_Init();
 8000bc0:	f7ff fe0e 	bl	80007e0 <IT8951_Init>
=======
 8000b40:	f7ff feee 	bl	8000920 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b44:	f000 f85e 	bl	8000c04 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  IT8951_Init();
 8000b48:	f7ff fe4a 	bl	80007e0 <IT8951_Init>
  EpdDriverLoadTemplate();
 8000b4c:	f7ff feb2 	bl	80008b4 <EpdDriverLoadTemplate>
>>>>>>> Stashed changes
=======
 8000b40:	f7ff feee 	bl	8000920 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b44:	f000 f85e 	bl	8000c04 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  IT8951_Init();
 8000b48:	f7ff fe4a 	bl	80007e0 <IT8951_Init>
  EpdDriverLoadTemplate();
 8000b4c:	f7ff feb2 	bl	80008b4 <EpdDriverLoadTemplate>
>>>>>>> Stashed changes
//	IT8951DisplayBox(0, 800, 1200,25, 0xf0);
  /* USER CODE BEGIN 2 */
  //IT8951DisplayExample3();
 while(1)
 {
	 IT8951DisplayExample3();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000bc4:	f7ff fe40 	bl	8000848 <IT8951DisplayExample3>
	 IT8951DisplayExample4();
 8000bc8:	f7ff fe74 	bl	80008b4 <IT8951DisplayExample4>
	 IT8951DisplayExample3();
 8000bcc:	e7fa      	b.n	8000bc4 <main+0x18>

08000bce <SystemClock_Config>:
=======
=======
>>>>>>> Stashed changes
 8000b50:	f7ff fe7a 	bl	8000848 <IT8951DisplayExample3>
 8000b54:	e7fc      	b.n	8000b50 <main+0x1c>

08000b56 <SystemClock_Config>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b096      	sub	sp, #88	; 0x58
 8000bd2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2244      	movs	r2, #68	; 0x44
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f002 f9d7 	bl	8002f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be2:	463b      	mov	r3, r7
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
=======
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b096      	sub	sp, #88	; 0x58
 8000b5a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2244      	movs	r2, #68	; 0x44
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f002 f9d7 	bl	8002f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
=======
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b096      	sub	sp, #88	; 0x58
 8000b5a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2244      	movs	r2, #68	; 0x44
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f002 f9d7 	bl	8002f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
>>>>>>> Stashed changes
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f000 fd69 	bl	80016c8 <HAL_PWREx_ControlVoltageScaling>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000bfc:	f000 f837 	bl	8000c6e <Error_Handler>
=======
=======
>>>>>>> Stashed changes
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f000 fd69 	bl	8001650 <HAL_PWREx_ControlVoltageScaling>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000b84:	f000 f837 	bl	8000bf6 <Error_Handler>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000c00:	2302      	movs	r3, #2
 8000c02:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c08:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c0a:	2340      	movs	r3, #64	; 0x40
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c12:	2302      	movs	r3, #2
 8000c14:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000c16:	2302      	movs	r3, #2
 8000c18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 28;
 8000c1a:	231c      	movs	r3, #28
 8000c1c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c22:	2302      	movs	r3, #2
 8000c24:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c26:	2302      	movs	r3, #2
 8000c28:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 fdfe 	bl	8001830 <HAL_RCC_OscConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000c3a:	f000 f818 	bl	8000c6e <Error_Handler>
=======
=======
>>>>>>> Stashed changes
 8000b88:	2302      	movs	r3, #2
 8000b8a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b92:	2340      	movs	r3, #64	; 0x40
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b96:	2302      	movs	r3, #2
 8000b98:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 28;
 8000ba2:	231c      	movs	r3, #28
 8000ba4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000baa:	2302      	movs	r3, #2
 8000bac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 fdfe 	bl	80017b8 <HAL_RCC_OscConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000bc2:	f000 f818 	bl	8000bf6 <Error_Handler>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000c3e:	230f      	movs	r3, #15
 8000c40:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c42:	2303      	movs	r3, #3
 8000c44:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c52:	463b      	mov	r3, r7
 8000c54:	2105      	movs	r1, #5
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 f9d8 	bl	800200c <HAL_RCC_ClockConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c62:	f000 f804 	bl	8000c6e <Error_Handler>
  }
}
 8000c66:	bf00      	nop
 8000c68:	3758      	adds	r7, #88	; 0x58
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <Error_Handler>:
=======
=======
>>>>>>> Stashed changes
 8000bc6:	230f      	movs	r3, #15
 8000bc8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bda:	463b      	mov	r3, r7
 8000bdc:	2105      	movs	r1, #5
 8000bde:	4618      	mov	r0, r3
 8000be0:	f001 f9d8 	bl	8001f94 <HAL_RCC_ClockConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bea:	f000 f804 	bl	8000bf6 <Error_Handler>
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3758      	adds	r7, #88	; 0x58
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <Error_Handler>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
=======
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <MX_SPI1_Init>:
=======
=======
>>>>>>> Stashed changes
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <MX_SPI1_Init>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000c82:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <MX_SPI1_Init+0x78>)
 8000c84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000c88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000c96:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000c9a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000cb2:	2228      	movs	r2, #40	; 0x28
 8000cb4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000cca:	2207      	movs	r2, #7
 8000ccc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000cd6:	2208      	movs	r2, #8
 8000cd8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_SPI1_Init+0x74>)
 8000cdc:	f001 fc0e 	bl	80024fc <HAL_SPI_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ce6:	f7ff ffc2 	bl	8000c6e <Error_Handler>
  }

}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200000c8 	.word	0x200000c8
 8000cf4:	40013000 	.word	0x40013000

08000cf8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a17      	ldr	r2, [pc, #92]	; (8000d74 <HAL_SPI_MspInit+0x7c>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d128      	bne.n	8000d6c <HAL_SPI_MspInit+0x74>
=======
=======
>>>>>>> Stashed changes
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c0a:	4a1c      	ldr	r2, [pc, #112]	; (8000c7c <MX_SPI1_Init+0x78>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c1e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000c22:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c36:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c3a:	2218      	movs	r2, #24
 8000c3c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c52:	2207      	movs	r2, #7
 8000c54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c5e:	2208      	movs	r2, #8
 8000c60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c64:	f001 fc0e 	bl	8002484 <HAL_SPI_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c6e:	f7ff ffc2 	bl	8000bf6 <Error_Handler>
  }

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200000c4 	.word	0x200000c4
 8000c7c:	40013000 	.word	0x40013000

08000c80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a17      	ldr	r2, [pc, #92]	; (8000cfc <HAL_SPI_MspInit+0x7c>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d128      	bne.n	8000cf4 <HAL_SPI_MspInit+0x74>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000d1a:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <HAL_SPI_MspInit+0x80>)
 8000d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1e:	4a16      	ldr	r2, [pc, #88]	; (8000d78 <HAL_SPI_MspInit+0x80>)
 8000d20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d24:	6613      	str	r3, [r2, #96]	; 0x60
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <HAL_SPI_MspInit+0x80>)
 8000d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <HAL_SPI_MspInit+0x80>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	4a10      	ldr	r2, [pc, #64]	; (8000d78 <HAL_SPI_MspInit+0x80>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_SPI_MspInit+0x80>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
=======
=======
>>>>>>> Stashed changes
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_SPI_MspInit+0x80>)
 8000ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca6:	4a16      	ldr	r2, [pc, #88]	; (8000d00 <HAL_SPI_MspInit+0x80>)
 8000ca8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cac:	6613      	str	r3, [r2, #96]	; 0x60
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <HAL_SPI_MspInit+0x80>)
 8000cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_SPI_MspInit+0x80>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <HAL_SPI_MspInit+0x80>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_SPI_MspInit+0x80>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000d4a:	23c2      	movs	r3, #194	; 0xc2
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d68:	f000 facc 	bl	8001304 <HAL_GPIO_Init>
=======
=======
>>>>>>> Stashed changes
 8000cd2:	23c2      	movs	r3, #194	; 0xc2
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf0:	f000 facc 	bl	800128c <HAL_GPIO_Init>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000d6c:	bf00      	nop
 8000d6e:	3728      	adds	r7, #40	; 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40013000 	.word	0x40013000
 8000d78:	40021000 	.word	0x40021000

08000d7c <HAL_MspInit>:
=======
=======
>>>>>>> Stashed changes
 8000cf4:	bf00      	nop
 8000cf6:	3728      	adds	r7, #40	; 0x28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40013000 	.word	0x40013000
 8000d00:	40021000 	.word	0x40021000

08000d04 <HAL_MspInit>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
=======
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <HAL_MspInit+0x44>)
 8000d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d86:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <HAL_MspInit+0x44>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_MspInit+0x44>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_MspInit+0x44>)
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9e:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <HAL_MspInit+0x44>)
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da4:	6593      	str	r3, [r2, #88]	; 0x58
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_MspInit+0x44>)
 8000da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]
=======
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <HAL_MspInit+0x44>)
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <HAL_MspInit+0x44>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6613      	str	r3, [r2, #96]	; 0x60
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_MspInit+0x44>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
=======
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <HAL_MspInit+0x44>)
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <HAL_MspInit+0x44>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6613      	str	r3, [r2, #96]	; 0x60
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_MspInit+0x44>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
>>>>>>> Stashed changes
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <HAL_MspInit+0x44>)
 8000d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d26:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <HAL_MspInit+0x44>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_MspInit+0x44>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <NMI_Handler>:
=======
=======
>>>>>>> Stashed changes
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40021000 	.word	0x40021000

08000d4c <NMI_Handler>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
=======
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <HardFault_Handler>:
=======
=======
>>>>>>> Stashed changes
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <HardFault_Handler>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
=======
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:
=======
 8000d5e:	e7fe      	b.n	8000d5e <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:
>>>>>>> Stashed changes
=======
 8000d5e:	e7fe      	b.n	8000d5e <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
=======
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:
=======
 8000d64:	e7fe      	b.n	8000d64 <MemManage_Handler+0x4>

08000d66 <BusFault_Handler>:
>>>>>>> Stashed changes
=======
 8000d64:	e7fe      	b.n	8000d64 <MemManage_Handler+0x4>

08000d66 <BusFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
=======
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:
=======
 8000d6a:	e7fe      	b.n	8000d6a <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:
>>>>>>> Stashed changes
=======
 8000d6a:	e7fe      	b.n	8000d6a <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
=======
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <SVC_Handler>:
=======
 8000d70:	e7fe      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d72 <SVC_Handler>:
>>>>>>> Stashed changes
=======
 8000d70:	e7fe      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d72 <SVC_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
=======
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <DebugMon_Handler>:
=======
=======
>>>>>>> Stashed changes
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <DebugMon_Handler>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
=======
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <PendSV_Handler>:
=======
=======
>>>>>>> Stashed changes
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <PendSV_Handler>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
=======
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <SysTick_Handler>:
=======
=======
>>>>>>> Stashed changes
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <SysTick_Handler>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
=======
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
=======
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000e18:	f000 f94e 	bl	80010b8 <HAL_IncTick>
=======
 8000da0:	f000 f94e 	bl	8001040 <HAL_IncTick>
>>>>>>> Stashed changes
=======
 8000da0:	f000 f94e 	bl	8001040 <HAL_IncTick>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <_read>:
=======
=======
>>>>>>> Stashed changes
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <_read>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	e00a      	b.n	8000e48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e32:	f3af 8000 	nop.w
 8000e36:	4601      	mov	r1, r0
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	1c5a      	adds	r2, r3, #1
 8000e3c:	60ba      	str	r2, [r7, #8]
 8000e3e:	b2ca      	uxtb	r2, r1
 8000e40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	3301      	adds	r3, #1
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	dbf0      	blt.n	8000e32 <_read+0x12>
	}

return len;
 8000e50:	687b      	ldr	r3, [r7, #4]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b086      	sub	sp, #24
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	60f8      	str	r0, [r7, #12]
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
 8000e6a:	e009      	b.n	8000e80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	60ba      	str	r2, [r7, #8]
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dbf1      	blt.n	8000e6c <_write+0x12>
	}
	return len;
 8000e88:	687b      	ldr	r3, [r7, #4]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <_close>:

int _close(int file)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
	return -1;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <_fstat>:
=======
=======
>>>>>>> Stashed changes
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	e00a      	b.n	8000dd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dba:	f3af 8000 	nop.w
 8000dbe:	4601      	mov	r1, r0
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	1c5a      	adds	r2, r3, #1
 8000dc4:	60ba      	str	r2, [r7, #8]
 8000dc6:	b2ca      	uxtb	r2, r1
 8000dc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	dbf0      	blt.n	8000dba <_read+0x12>
	}

return len;
 8000dd8:	687b      	ldr	r3, [r7, #4]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	60f8      	str	r0, [r7, #12]
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	e009      	b.n	8000e08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	1c5a      	adds	r2, r3, #1
 8000df8:	60ba      	str	r2, [r7, #8]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dbf1      	blt.n	8000df4 <_write+0x12>
	}
	return len;
 8000e10:	687b      	ldr	r3, [r7, #4]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_close>:

int _close(int file)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
	return -1;
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <_fstat>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes


int _fstat(int file, struct stat *st)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
 8000eb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eba:	605a      	str	r2, [r3, #4]
	return 0;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <_isatty>:

int _isatty(int file)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
	return 0;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <_sbrk>:
=======
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e42:	605a      	str	r2, [r3, #4]
	return 0;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <_isatty>:

int _isatty(int file)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
	return 1;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
	return 0;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <_sbrk>:
>>>>>>> Stashed changes
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
<<<<<<< Updated upstream
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
=======
=======
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e42:	605a      	str	r2, [r3, #4]
	return 0;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <_isatty>:

int _isatty(int file)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
	return 1;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
	return 0;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
>>>>>>> Stashed changes
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <_sbrk+0x50>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d102      	bne.n	8000f12 <_sbrk+0x16>
		heap_end = &end;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <_sbrk+0x50>)
 8000f0e:	4a10      	ldr	r2, [pc, #64]	; (8000f50 <_sbrk+0x54>)
 8000f10:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <_sbrk+0x50>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <_sbrk+0x50>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4413      	add	r3, r2
 8000f20:	466a      	mov	r2, sp
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d907      	bls.n	8000f36 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f26:	f002 f809 	bl	8002f3c <__errno>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	230c      	movs	r3, #12
 8000f2e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295
 8000f34:	e006      	b.n	8000f44 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f36:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <_sbrk+0x50>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	4a03      	ldr	r2, [pc, #12]	; (8000f4c <_sbrk+0x50>)
 8000f40:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f42:	68fb      	ldr	r3, [r7, #12]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	2000008c 	.word	0x2000008c
 8000f50:	20000138 	.word	0x20000138

08000f54 <SystemInit>:
=======
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <_sbrk+0x50>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d102      	bne.n	8000e9a <_sbrk+0x16>
		heap_end = &end;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <_sbrk+0x50>)
 8000e96:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <_sbrk+0x54>)
 8000e98:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <_sbrk+0x50>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <_sbrk+0x50>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	466a      	mov	r2, sp
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d907      	bls.n	8000ebe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000eae:	f002 f809 	bl	8002ec4 <__errno>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	230c      	movs	r3, #12
 8000eb6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebc:	e006      	b.n	8000ecc <_sbrk+0x48>
	}

	heap_end += incr;
 8000ebe:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <_sbrk+0x50>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	4a03      	ldr	r2, [pc, #12]	; (8000ed4 <_sbrk+0x50>)
 8000ec8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000eca:	68fb      	ldr	r3, [r7, #12]
}
=======
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <_sbrk+0x50>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d102      	bne.n	8000e9a <_sbrk+0x16>
		heap_end = &end;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <_sbrk+0x50>)
 8000e96:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <_sbrk+0x54>)
 8000e98:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <_sbrk+0x50>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <_sbrk+0x50>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	466a      	mov	r2, sp
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d907      	bls.n	8000ebe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000eae:	f002 f809 	bl	8002ec4 <__errno>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	230c      	movs	r3, #12
 8000eb6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebc:	e006      	b.n	8000ecc <_sbrk+0x48>
	}

	heap_end += incr;
 8000ebe:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <_sbrk+0x50>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	4a03      	ldr	r2, [pc, #12]	; (8000ed4 <_sbrk+0x50>)
 8000ec8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000eca:	68fb      	ldr	r3, [r7, #12]
}
>>>>>>> Stashed changes
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	2000008c 	.word	0x2000008c
 8000ed8:	20000130 	.word	0x20000130

08000edc <SystemInit>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <SystemInit+0x64>)
 8000f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5e:	4a16      	ldr	r2, [pc, #88]	; (8000fb8 <SystemInit+0x64>)
 8000f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
=======
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
>>>>>>> Stashed changes
 8000ee0:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <SystemInit+0x64>)
 8000ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee6:	4a16      	ldr	r2, [pc, #88]	; (8000f40 <SystemInit+0x64>)
 8000ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <SystemInit+0x68>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a13      	ldr	r2, [pc, #76]	; (8000fbc <SystemInit+0x68>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <SystemInit+0x68>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <SystemInit+0x68>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <SystemInit+0x68>)
 8000f80:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f84:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f88:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <SystemInit+0x68>)
 8000f8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f90:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <SystemInit+0x68>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a09      	ldr	r2, [pc, #36]	; (8000fbc <SystemInit+0x68>)
 8000f98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f9c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <SystemInit+0x68>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
=======
=======
>>>>>>> Stashed changes
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <SystemInit+0x68>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a13      	ldr	r2, [pc, #76]	; (8000f44 <SystemInit+0x68>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <SystemInit+0x68>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <SystemInit+0x68>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a0f      	ldr	r2, [pc, #60]	; (8000f44 <SystemInit+0x68>)
 8000f08:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f0c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f10:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <SystemInit+0x68>)
 8000f14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f18:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <SystemInit+0x68>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a09      	ldr	r2, [pc, #36]	; (8000f44 <SystemInit+0x68>)
 8000f20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f24:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <SystemInit+0x68>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <SystemInit+0x64>)
 8000fa6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000faa:	609a      	str	r2, [r3, #8]
#endif
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <Reset_Handler>:
=======
=======
>>>>>>> Stashed changes
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <SystemInit+0x64>)
 8000f2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f32:	609a      	str	r2, [r3, #8]
#endif
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00
 8000f44:	40021000 	.word	0x40021000

08000f48 <Reset_Handler>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8000fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000fc4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000fc6:	e003      	b.n	8000fd0 <LoopCopyDataInit>

08000fc8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000fca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000fcc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000fce:	3104      	adds	r1, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000fd0:	480b      	ldr	r0, [pc, #44]	; (8001000 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000fd4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000fd6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fd8:	d3f6      	bcc.n	8000fc8 <CopyDataInit>
	ldr	r2, =_sbss
 8000fda:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000fdc:	e002      	b.n	8000fe4 <LoopFillZerobss>

08000fde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000fde:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fe0:	f842 3b04 	str.w	r3, [r2], #4

08000fe4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <LoopForever+0x16>)
	cmp	r2, r3
 8000fe6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fe8:	d3f9      	bcc.n	8000fde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fea:	f7ff ffb3 	bl	8000f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fee:	f001 ffab 	bl	8002f48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ff2:	f7ff fddb 	bl	8000bac <main>

08000ff6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ff6:	e7fe      	b.n	8000ff6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ff8:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000ffc:	080f5af4 	.word	0x080f5af4
	ldr	r0, =_sdata
 8001000:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001004:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001008:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800100c:	20000134 	.word	0x20000134

08001010 <ADC1_IRQHandler>:
=======
=======
>>>>>>> Stashed changes
 8000f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f80 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f4e:	e003      	b.n	8000f58 <LoopCopyDataInit>

08000f50 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f52:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f54:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f56:	3104      	adds	r1, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f58:	480b      	ldr	r0, [pc, #44]	; (8000f88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f5c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f5e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f60:	d3f6      	bcc.n	8000f50 <CopyDataInit>
	ldr	r2, =_sbss
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f64:	e002      	b.n	8000f6c <LoopFillZerobss>

08000f66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f66:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f68:	f842 3b04 	str.w	r3, [r2], #4

08000f6c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <LoopForever+0x16>)
	cmp	r2, r3
 8000f6e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f70:	d3f9      	bcc.n	8000f66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f72:	f7ff ffb3 	bl	8000edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f76:	f001 ffab 	bl	8002ed0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f7a:	f7ff fddb 	bl	8000b34 <main>

08000f7e <LoopForever>:

LoopForever:
    b LoopForever
 8000f7e:	e7fe      	b.n	8000f7e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f80:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000f84:	0816e814 	.word	0x0816e814
	ldr	r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f8c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000f90:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000f94:	20000130 	.word	0x20000130

08000f98 <ADC1_IRQHandler>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001010:	e7fe      	b.n	8001010 <ADC1_IRQHandler>

08001012 <HAL_Init>:
=======
 8000f98:	e7fe      	b.n	8000f98 <ADC1_IRQHandler>

08000f9a <HAL_Init>:
>>>>>>> Stashed changes
=======
 8000f98:	e7fe      	b.n	8000f98 <ADC1_IRQHandler>

08000f9a <HAL_Init>:
>>>>>>> Stashed changes
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	71fb      	strb	r3, [r7, #7]
=======
=======
>>>>>>> Stashed changes
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	71fb      	strb	r3, [r7, #7]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800101c:	2003      	movs	r0, #3
 800101e:	f000 f93d 	bl	800129c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001022:	2000      	movs	r0, #0
 8001024:	f000 f80e 	bl	8001044 <HAL_InitTick>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d002      	beq.n	8001034 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	71fb      	strb	r3, [r7, #7]
 8001032:	e001      	b.n	8001038 <HAL_Init+0x26>
=======
=======
>>>>>>> Stashed changes
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 f93d 	bl	8001224 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000faa:	2000      	movs	r0, #0
 8000fac:	f000 f80e 	bl	8000fcc <HAL_InitTick>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d002      	beq.n	8000fbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	71fb      	strb	r3, [r7, #7]
 8000fba:	e001      	b.n	8000fc0 <HAL_Init+0x26>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001034:	f7ff fea2 	bl	8000d7c <HAL_MspInit>
=======
 8000fbc:	f7ff fea2 	bl	8000d04 <HAL_MspInit>
>>>>>>> Stashed changes
=======
 8000fbc:	f7ff fea2 	bl	8000d04 <HAL_MspInit>
>>>>>>> Stashed changes
  }

  /* Return function status */
  return status;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001038:	79fb      	ldrb	r3, [r7, #7]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_InitTick>:
=======
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_InitTick>:
>>>>>>> Stashed changes
=======
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_InitTick>:
>>>>>>> Stashed changes
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <HAL_InitTick+0x68>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d022      	beq.n	800109e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001058:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_InitTick+0x6c>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <HAL_InitTick+0x68>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001064:	fbb1 f3f3 	udiv	r3, r1, r3
 8001068:	fbb2 f3f3 	udiv	r3, r2, r3
 800106c:	4618      	mov	r0, r3
 800106e:	f000 f93c 	bl	80012ea <HAL_SYSTICK_Config>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d10f      	bne.n	8001098 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b0f      	cmp	r3, #15
 800107c:	d809      	bhi.n	8001092 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800107e:	2200      	movs	r2, #0
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	f04f 30ff 	mov.w	r0, #4294967295
 8001086:	f000 f914 	bl	80012b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <HAL_InitTick+0x70>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	e007      	b.n	80010a2 <HAL_InitTick+0x5e>
=======
=======
>>>>>>> Stashed changes
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <HAL_InitTick+0x68>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d022      	beq.n	8001026 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fe0:	4b15      	ldr	r3, [pc, #84]	; (8001038 <HAL_InitTick+0x6c>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <HAL_InitTick+0x68>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fec:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 f93c 	bl	8001272 <HAL_SYSTICK_Config>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d10f      	bne.n	8001020 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b0f      	cmp	r3, #15
 8001004:	d809      	bhi.n	800101a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001006:	2200      	movs	r2, #0
 8001008:	6879      	ldr	r1, [r7, #4]
 800100a:	f04f 30ff 	mov.w	r0, #4294967295
 800100e:	f000 f914 	bl	800123a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <HAL_InitTick+0x70>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	e007      	b.n	800102a <HAL_InitTick+0x5e>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
      }
      else
      {
        status = HAL_ERROR;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001092:	2301      	movs	r3, #1
 8001094:	73fb      	strb	r3, [r7, #15]
 8001096:	e004      	b.n	80010a2 <HAL_InitTick+0x5e>
=======
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	e004      	b.n	800102a <HAL_InitTick+0x5e>
>>>>>>> Stashed changes
=======
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	e004      	b.n	800102a <HAL_InitTick+0x5e>
>>>>>>> Stashed changes
      }
    }
    else
    {
      status = HAL_ERROR;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001098:	2301      	movs	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	e001      	b.n	80010a2 <HAL_InitTick+0x5e>
=======
 8001020:	2301      	movs	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
 8001024:	e001      	b.n	800102a <HAL_InitTick+0x5e>
>>>>>>> Stashed changes
=======
 8001020:	2301      	movs	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
 8001024:	e001      	b.n	800102a <HAL_InitTick+0x5e>
>>>>>>> Stashed changes
    }
  }
  else
  {
    status = HAL_ERROR;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800109e:	2301      	movs	r3, #1
 80010a0:	73fb      	strb	r3, [r7, #15]
=======
 8001026:	2301      	movs	r3, #1
 8001028:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
=======
 8001026:	2301      	movs	r3, #1
 8001028:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  }

  /* Return function status */
  return status;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000008 	.word	0x20000008
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000004 	.word	0x20000004

080010b8 <HAL_IncTick>:
=======
=======
>>>>>>> Stashed changes
 800102a:	7bfb      	ldrb	r3, [r7, #15]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000008 	.word	0x20000008
 8001038:	20000000 	.word	0x20000000
 800103c:	20000004 	.word	0x20000004

08001040 <HAL_IncTick>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <HAL_IncTick+0x1c>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_IncTick+0x20>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4413      	add	r3, r2
 80010c6:	4a03      	ldr	r2, [pc, #12]	; (80010d4 <HAL_IncTick+0x1c>)
 80010c8:	6013      	str	r3, [r2, #0]
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	2000012c 	.word	0x2000012c
 80010d8:	20000008 	.word	0x20000008

080010dc <HAL_GetTick>:
=======
=======
>>>>>>> Stashed changes
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_IncTick+0x1c>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x20>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4413      	add	r3, r2
 800104e:	4a03      	ldr	r2, [pc, #12]	; (800105c <HAL_IncTick+0x1c>)
 8001050:	6013      	str	r3, [r2, #0]
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	20000128 	.word	0x20000128
 8001060:	20000008 	.word	0x20000008

08001064 <HAL_GetTick>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_GetTick+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	2000012c 	.word	0x2000012c

080010f4 <HAL_Delay>:
=======
=======
>>>>>>> Stashed changes
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000128 	.word	0x20000128

0800107c <HAL_Delay>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff ffee 	bl	80010dc <HAL_GetTick>
 8001100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800110c:	d004      	beq.n	8001118 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_Delay+0x40>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	4413      	add	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001118:	bf00      	nop
 800111a:	f7ff ffdf 	bl	80010dc <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	429a      	cmp	r2, r3
 8001128:	d8f7      	bhi.n	800111a <HAL_Delay+0x26>
  {
  }
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000008 	.word	0x20000008

08001138 <__NVIC_SetPriorityGrouping>:
=======
=======
>>>>>>> Stashed changes
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff ffee 	bl	8001064 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d004      	beq.n	80010a0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_Delay+0x40>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	4413      	add	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a0:	bf00      	nop
 80010a2:	f7ff ffdf 	bl	8001064 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d8f7      	bhi.n	80010a2 <HAL_Delay+0x26>
  {
  }
}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000008 	.word	0x20000008

080010c0 <__NVIC_SetPriorityGrouping>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001154:	4013      	ands	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116a:	4a04      	ldr	r2, [pc, #16]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	60d3      	str	r3, [r2, #12]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_GetPriorityGrouping>:
=======
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
=======
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <__NVIC_GetPriorityGrouping+0x18>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	f003 0307 	and.w	r3, r3, #7
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_SetPriority>:
=======
=======
>>>>>>> Stashed changes
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_SetPriority>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	db0a      	blt.n	80011c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	490c      	ldr	r1, [pc, #48]	; (80011e8 <__NVIC_SetPriority+0x4c>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	0112      	lsls	r2, r2, #4
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	440b      	add	r3, r1
 80011c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
=======
>>>>>>> Stashed changes
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	db0a      	blt.n	800114e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	b2da      	uxtb	r2, r3
 800113c:	490c      	ldr	r1, [pc, #48]	; (8001170 <__NVIC_SetPriority+0x4c>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	0112      	lsls	r2, r2, #4
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	440b      	add	r3, r1
 8001148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80011c4:	e00a      	b.n	80011dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4908      	ldr	r1, [pc, #32]	; (80011ec <__NVIC_SetPriority+0x50>)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	f003 030f 	and.w	r3, r3, #15
 80011d2:	3b04      	subs	r3, #4
 80011d4:	0112      	lsls	r2, r2, #4
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	440b      	add	r3, r1
 80011da:	761a      	strb	r2, [r3, #24]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000e100 	.word	0xe000e100
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <NVIC_EncodePriority>:
=======
=======
>>>>>>> Stashed changes
 800114c:	e00a      	b.n	8001164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4908      	ldr	r1, [pc, #32]	; (8001174 <__NVIC_SetPriority+0x50>)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	3b04      	subs	r3, #4
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	440b      	add	r3, r1
 8001162:	761a      	strb	r2, [r3, #24]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000e100 	.word	0xe000e100
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <NVIC_EncodePriority>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80011f0:	b480      	push	{r7}
 80011f2:	b089      	sub	sp, #36	; 0x24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	61fb      	str	r3, [r7, #28]
=======
=======
>>>>>>> Stashed changes
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	61fb      	str	r3, [r7, #28]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f1c3 0307 	rsb	r3, r3, #7
 800120a:	2b04      	cmp	r3, #4
 800120c:	bf28      	it	cs
 800120e:	2304      	movcs	r3, #4
 8001210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3304      	adds	r3, #4
 8001216:	2b06      	cmp	r3, #6
 8001218:	d902      	bls.n	8001220 <NVIC_EncodePriority+0x30>
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3b03      	subs	r3, #3
 800121e:	e000      	b.n	8001222 <NVIC_EncodePriority+0x32>
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	f04f 32ff 	mov.w	r2, #4294967295
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43da      	mvns	r2, r3
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	401a      	ands	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001238:	f04f 31ff 	mov.w	r1, #4294967295
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	fa01 f303 	lsl.w	r3, r1, r3
 8001242:	43d9      	mvns	r1, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	4313      	orrs	r3, r2
         );
}
 800124a:	4618      	mov	r0, r3
 800124c:	3724      	adds	r7, #36	; 0x24
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <SysTick_Config>:
=======
=======
>>>>>>> Stashed changes
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f1c3 0307 	rsb	r3, r3, #7
 8001192:	2b04      	cmp	r3, #4
 8001194:	bf28      	it	cs
 8001196:	2304      	movcs	r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3304      	adds	r3, #4
 800119e:	2b06      	cmp	r3, #6
 80011a0:	d902      	bls.n	80011a8 <NVIC_EncodePriority+0x30>
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3b03      	subs	r3, #3
 80011a6:	e000      	b.n	80011aa <NVIC_EncodePriority+0x32>
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	f04f 32ff 	mov.w	r2, #4294967295
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43da      	mvns	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	401a      	ands	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c0:	f04f 31ff 	mov.w	r1, #4294967295
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	43d9      	mvns	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	4313      	orrs	r3, r2
         );
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <SysTick_Config>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001268:	d301      	bcc.n	800126e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800126a:	2301      	movs	r3, #1
 800126c:	e00f      	b.n	800128e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <SysTick_Config+0x40>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001276:	210f      	movs	r1, #15
 8001278:	f04f 30ff 	mov.w	r0, #4294967295
 800127c:	f7ff ff8e 	bl	800119c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <SysTick_Config+0x40>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001286:	4b04      	ldr	r3, [pc, #16]	; (8001298 <SysTick_Config+0x40>)
 8001288:	2207      	movs	r2, #7
 800128a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	e000e010 	.word	0xe000e010

0800129c <HAL_NVIC_SetPriorityGrouping>:
=======
=======
>>>>>>> Stashed changes
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f0:	d301      	bcc.n	80011f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00f      	b.n	8001216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f6:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <SysTick_Config+0x40>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fe:	210f      	movs	r1, #15
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f7ff ff8e 	bl	8001124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <SysTick_Config+0x40>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <SysTick_Config+0x40>)
 8001210:	2207      	movs	r2, #7
 8001212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	e000e010 	.word	0xe000e010

08001224 <HAL_NVIC_SetPriorityGrouping>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
=======
=======
>>>>>>> Stashed changes
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff ff47 	bl	8001138 <__NVIC_SetPriorityGrouping>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_NVIC_SetPriority>:
=======
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff47 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
=======
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff47 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
>>>>>>> Stashed changes
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_SetPriority>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b086      	sub	sp, #24
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
 80012be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
=======
=======
>>>>>>> Stashed changes
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
 8001246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80012c4:	f7ff ff5c 	bl	8001180 <__NVIC_GetPriorityGrouping>
 80012c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	68b9      	ldr	r1, [r7, #8]
 80012ce:	6978      	ldr	r0, [r7, #20]
 80012d0:	f7ff ff8e 	bl	80011f0 <NVIC_EncodePriority>
 80012d4:	4602      	mov	r2, r0
 80012d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff5d 	bl	800119c <__NVIC_SetPriority>
}
 80012e2:	bf00      	nop
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_SYSTICK_Config>:
=======
=======
>>>>>>> Stashed changes
 800124c:	f7ff ff5c 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001250:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	6978      	ldr	r0, [r7, #20]
 8001258:	f7ff ff8e 	bl	8001178 <NVIC_EncodePriority>
 800125c:	4602      	mov	r2, r0
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff5d 	bl	8001124 <__NVIC_SetPriority>
}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ffb0 	bl	8001258 <SysTick_Config>
 80012f8:	4603      	mov	r3, r0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <HAL_GPIO_Init>:
=======
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffb0 	bl	80011e0 <SysTick_Config>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_GPIO_Init>:
>>>>>>> Stashed changes
=======
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffb0 	bl	80011e0 <SysTick_Config>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_GPIO_Init>:
>>>>>>> Stashed changes
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
=======
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
=======
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001312:	e166      	b.n	80015e2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	2101      	movs	r1, #1
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	fa01 f303 	lsl.w	r3, r1, r3
 8001320:	4013      	ands	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 8158 	beq.w	80015dc <HAL_GPIO_Init+0x2d8>
=======
=======
>>>>>>> Stashed changes
 800129a:	e166      	b.n	800156a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	2101      	movs	r1, #1
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	4013      	ands	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8158 	beq.w	8001564 <HAL_GPIO_Init+0x2d8>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x38>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b12      	cmp	r3, #18
 800133a:	d123      	bne.n	8001384 <HAL_GPIO_Init+0x80>
=======
=======
>>>>>>> Stashed changes
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x38>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b12      	cmp	r3, #18
 80012c2:	d123      	bne.n	800130c <HAL_GPIO_Init+0x80>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	08da      	lsrs	r2, r3, #3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3208      	adds	r2, #8
 8001344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	220f      	movs	r2, #15
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	08da      	lsrs	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	6939      	ldr	r1, [r7, #16]
 8001380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
=======
>>>>>>> Stashed changes
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	08da      	lsrs	r2, r3, #3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3208      	adds	r2, #8
 80012cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	220f      	movs	r2, #15
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	691a      	ldr	r2, [r3, #16]
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	08da      	lsrs	r2, r3, #3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3208      	adds	r2, #8
 8001306:	6939      	ldr	r1, [r7, #16]
 8001308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0203 	and.w	r2, r3, #3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d00b      	beq.n	80013d8 <HAL_GPIO_Init+0xd4>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d007      	beq.n	80013d8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013cc:	2b11      	cmp	r3, #17
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b12      	cmp	r3, #18
 80013d6:	d130      	bne.n	800143a <HAL_GPIO_Init+0x136>
=======
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0203 	and.w	r2, r3, #3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
=======
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0203 	and.w	r2, r3, #3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
>>>>>>> Stashed changes
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d00b      	beq.n	8001360 <HAL_GPIO_Init+0xd4>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b02      	cmp	r3, #2
 800134e:	d007      	beq.n	8001360 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001354:	2b11      	cmp	r3, #17
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b12      	cmp	r3, #18
 800135e:	d130      	bne.n	80013c2 <HAL_GPIO_Init+0x136>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	2203      	movs	r2, #3
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800140e:	2201      	movs	r2, #1
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	f003 0201 	and.w	r2, r3, #1
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	605a      	str	r2, [r3, #4]
=======
=======
>>>>>>> Stashed changes
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	2203      	movs	r2, #3
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	68da      	ldr	r2, [r3, #12]
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001396:	2201      	movs	r2, #1
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43db      	mvns	r3, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	091b      	lsrs	r3, r3, #4
 80013ac:	f003 0201 	and.w	r2, r3, #1
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	605a      	str	r2, [r3, #4]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	2203      	movs	r2, #3
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	60da      	str	r2, [r3, #12]
=======
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	2203      	movs	r2, #3
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
=======
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	2203      	movs	r2, #3
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 80b2 	beq.w	80015dc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001478:	4b61      	ldr	r3, [pc, #388]	; (8001600 <HAL_GPIO_Init+0x2fc>)
 800147a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147c:	4a60      	ldr	r2, [pc, #384]	; (8001600 <HAL_GPIO_Init+0x2fc>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	6613      	str	r3, [r2, #96]	; 0x60
 8001484:	4b5e      	ldr	r3, [pc, #376]	; (8001600 <HAL_GPIO_Init+0x2fc>)
 8001486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001490:	4a5c      	ldr	r2, [pc, #368]	; (8001604 <HAL_GPIO_Init+0x300>)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	3302      	adds	r3, #2
 8001498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	220f      	movs	r2, #15
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014ba:	d02b      	beq.n	8001514 <HAL_GPIO_Init+0x210>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a52      	ldr	r2, [pc, #328]	; (8001608 <HAL_GPIO_Init+0x304>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d025      	beq.n	8001510 <HAL_GPIO_Init+0x20c>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a51      	ldr	r2, [pc, #324]	; (800160c <HAL_GPIO_Init+0x308>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d01f      	beq.n	800150c <HAL_GPIO_Init+0x208>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a50      	ldr	r2, [pc, #320]	; (8001610 <HAL_GPIO_Init+0x30c>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d019      	beq.n	8001508 <HAL_GPIO_Init+0x204>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a4f      	ldr	r2, [pc, #316]	; (8001614 <HAL_GPIO_Init+0x310>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d013      	beq.n	8001504 <HAL_GPIO_Init+0x200>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a4e      	ldr	r2, [pc, #312]	; (8001618 <HAL_GPIO_Init+0x314>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d00d      	beq.n	8001500 <HAL_GPIO_Init+0x1fc>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a4d      	ldr	r2, [pc, #308]	; (800161c <HAL_GPIO_Init+0x318>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d007      	beq.n	80014fc <HAL_GPIO_Init+0x1f8>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a4c      	ldr	r2, [pc, #304]	; (8001620 <HAL_GPIO_Init+0x31c>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d101      	bne.n	80014f8 <HAL_GPIO_Init+0x1f4>
 80014f4:	2307      	movs	r3, #7
 80014f6:	e00e      	b.n	8001516 <HAL_GPIO_Init+0x212>
 80014f8:	2308      	movs	r3, #8
 80014fa:	e00c      	b.n	8001516 <HAL_GPIO_Init+0x212>
 80014fc:	2306      	movs	r3, #6
 80014fe:	e00a      	b.n	8001516 <HAL_GPIO_Init+0x212>
 8001500:	2305      	movs	r3, #5
 8001502:	e008      	b.n	8001516 <HAL_GPIO_Init+0x212>
 8001504:	2304      	movs	r3, #4
 8001506:	e006      	b.n	8001516 <HAL_GPIO_Init+0x212>
 8001508:	2303      	movs	r3, #3
 800150a:	e004      	b.n	8001516 <HAL_GPIO_Init+0x212>
 800150c:	2302      	movs	r3, #2
 800150e:	e002      	b.n	8001516 <HAL_GPIO_Init+0x212>
 8001510:	2301      	movs	r3, #1
 8001512:	e000      	b.n	8001516 <HAL_GPIO_Init+0x212>
 8001514:	2300      	movs	r3, #0
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	f002 0203 	and.w	r2, r2, #3
 800151c:	0092      	lsls	r2, r2, #2
 800151e:	4093      	lsls	r3, r2
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001526:	4937      	ldr	r1, [pc, #220]	; (8001604 <HAL_GPIO_Init+0x300>)
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	089b      	lsrs	r3, r3, #2
 800152c:	3302      	adds	r3, #2
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001534:	4b3b      	ldr	r3, [pc, #236]	; (8001624 <HAL_GPIO_Init+0x320>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	43db      	mvns	r3, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001558:	4a32      	ldr	r2, [pc, #200]	; (8001624 <HAL_GPIO_Init+0x320>)
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800155e:	4b31      	ldr	r3, [pc, #196]	; (8001624 <HAL_GPIO_Init+0x320>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	43db      	mvns	r3, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001582:	4a28      	ldr	r2, [pc, #160]	; (8001624 <HAL_GPIO_Init+0x320>)
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001588:	4b26      	ldr	r3, [pc, #152]	; (8001624 <HAL_GPIO_Init+0x320>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	43db      	mvns	r3, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015ac:	4a1d      	ldr	r2, [pc, #116]	; (8001624 <HAL_GPIO_Init+0x320>)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <HAL_GPIO_Init+0x320>)
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015d6:	4a13      	ldr	r2, [pc, #76]	; (8001624 <HAL_GPIO_Init+0x320>)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	60d3      	str	r3, [r2, #12]
=======
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 80b2 	beq.w	8001564 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001400:	4b61      	ldr	r3, [pc, #388]	; (8001588 <HAL_GPIO_Init+0x2fc>)
 8001402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001404:	4a60      	ldr	r2, [pc, #384]	; (8001588 <HAL_GPIO_Init+0x2fc>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6613      	str	r3, [r2, #96]	; 0x60
 800140c:	4b5e      	ldr	r3, [pc, #376]	; (8001588 <HAL_GPIO_Init+0x2fc>)
 800140e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001418:	4a5c      	ldr	r2, [pc, #368]	; (800158c <HAL_GPIO_Init+0x300>)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	220f      	movs	r2, #15
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
=======
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 80b2 	beq.w	8001564 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001400:	4b61      	ldr	r3, [pc, #388]	; (8001588 <HAL_GPIO_Init+0x2fc>)
 8001402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001404:	4a60      	ldr	r2, [pc, #384]	; (8001588 <HAL_GPIO_Init+0x2fc>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6613      	str	r3, [r2, #96]	; 0x60
 800140c:	4b5e      	ldr	r3, [pc, #376]	; (8001588 <HAL_GPIO_Init+0x2fc>)
 800140e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001418:	4a5c      	ldr	r2, [pc, #368]	; (800158c <HAL_GPIO_Init+0x300>)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	220f      	movs	r2, #15
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
>>>>>>> Stashed changes
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001442:	d02b      	beq.n	800149c <HAL_GPIO_Init+0x210>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a52      	ldr	r2, [pc, #328]	; (8001590 <HAL_GPIO_Init+0x304>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d025      	beq.n	8001498 <HAL_GPIO_Init+0x20c>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a51      	ldr	r2, [pc, #324]	; (8001594 <HAL_GPIO_Init+0x308>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d01f      	beq.n	8001494 <HAL_GPIO_Init+0x208>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a50      	ldr	r2, [pc, #320]	; (8001598 <HAL_GPIO_Init+0x30c>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d019      	beq.n	8001490 <HAL_GPIO_Init+0x204>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a4f      	ldr	r2, [pc, #316]	; (800159c <HAL_GPIO_Init+0x310>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d013      	beq.n	800148c <HAL_GPIO_Init+0x200>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a4e      	ldr	r2, [pc, #312]	; (80015a0 <HAL_GPIO_Init+0x314>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d00d      	beq.n	8001488 <HAL_GPIO_Init+0x1fc>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a4d      	ldr	r2, [pc, #308]	; (80015a4 <HAL_GPIO_Init+0x318>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d007      	beq.n	8001484 <HAL_GPIO_Init+0x1f8>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a4c      	ldr	r2, [pc, #304]	; (80015a8 <HAL_GPIO_Init+0x31c>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d101      	bne.n	8001480 <HAL_GPIO_Init+0x1f4>
 800147c:	2307      	movs	r3, #7
 800147e:	e00e      	b.n	800149e <HAL_GPIO_Init+0x212>
 8001480:	2308      	movs	r3, #8
 8001482:	e00c      	b.n	800149e <HAL_GPIO_Init+0x212>
 8001484:	2306      	movs	r3, #6
 8001486:	e00a      	b.n	800149e <HAL_GPIO_Init+0x212>
 8001488:	2305      	movs	r3, #5
 800148a:	e008      	b.n	800149e <HAL_GPIO_Init+0x212>
 800148c:	2304      	movs	r3, #4
 800148e:	e006      	b.n	800149e <HAL_GPIO_Init+0x212>
 8001490:	2303      	movs	r3, #3
 8001492:	e004      	b.n	800149e <HAL_GPIO_Init+0x212>
 8001494:	2302      	movs	r3, #2
 8001496:	e002      	b.n	800149e <HAL_GPIO_Init+0x212>
 8001498:	2301      	movs	r3, #1
 800149a:	e000      	b.n	800149e <HAL_GPIO_Init+0x212>
 800149c:	2300      	movs	r3, #0
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	f002 0203 	and.w	r2, r2, #3
 80014a4:	0092      	lsls	r2, r2, #2
 80014a6:	4093      	lsls	r3, r2
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014ae:	4937      	ldr	r1, [pc, #220]	; (800158c <HAL_GPIO_Init+0x300>)
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	089b      	lsrs	r3, r3, #2
 80014b4:	3302      	adds	r3, #2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014bc:	4b3b      	ldr	r3, [pc, #236]	; (80015ac <HAL_GPIO_Init+0x320>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014e0:	4a32      	ldr	r2, [pc, #200]	; (80015ac <HAL_GPIO_Init+0x320>)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80014e6:	4b31      	ldr	r3, [pc, #196]	; (80015ac <HAL_GPIO_Init+0x320>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800150a:	4a28      	ldr	r2, [pc, #160]	; (80015ac <HAL_GPIO_Init+0x320>)
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001510:	4b26      	ldr	r3, [pc, #152]	; (80015ac <HAL_GPIO_Init+0x320>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	43db      	mvns	r3, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001534:	4a1d      	ldr	r2, [pc, #116]	; (80015ac <HAL_GPIO_Init+0x320>)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800153a:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <HAL_GPIO_Init+0x320>)
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	43db      	mvns	r3, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800155e:	4a13      	ldr	r2, [pc, #76]	; (80015ac <HAL_GPIO_Init+0x320>)
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	60d3      	str	r3, [r2, #12]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
      }
    }

    position++;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	3301      	adds	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	fa22 f303 	lsr.w	r3, r2, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f47f ae91 	bne.w	8001314 <HAL_GPIO_Init+0x10>
  }
}
 80015f2:	bf00      	nop
 80015f4:	371c      	adds	r7, #28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000
 8001604:	40010000 	.word	0x40010000
 8001608:	48000400 	.word	0x48000400
 800160c:	48000800 	.word	0x48000800
 8001610:	48000c00 	.word	0x48000c00
 8001614:	48001000 	.word	0x48001000
 8001618:	48001400 	.word	0x48001400
 800161c:	48001800 	.word	0x48001800
 8001620:	48001c00 	.word	0x48001c00
 8001624:	40010400 	.word	0x40010400

08001628 <HAL_GPIO_ReadPin>:
=======
=======
>>>>>>> Stashed changes
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	3301      	adds	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	fa22 f303 	lsr.w	r3, r2, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	f47f ae91 	bne.w	800129c <HAL_GPIO_Init+0x10>
  }
}
 800157a:	bf00      	nop
 800157c:	371c      	adds	r7, #28
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000
 800158c:	40010000 	.word	0x40010000
 8001590:	48000400 	.word	0x48000400
 8001594:	48000800 	.word	0x48000800
 8001598:	48000c00 	.word	0x48000c00
 800159c:	48001000 	.word	0x48001000
 80015a0:	48001400 	.word	0x48001400
 80015a4:	48001800 	.word	0x48001800
 80015a8:	48001c00 	.word	0x48001c00
 80015ac:	40010400 	.word	0x40010400

080015b0 <HAL_GPIO_ReadPin>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
=======
=======
>>>>>>> Stashed changes
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	807b      	strh	r3, [r7, #2]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	887b      	ldrh	r3, [r7, #2]
 800163a:	4013      	ands	r3, r2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d002      	beq.n	8001646 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001640:	2301      	movs	r3, #1
 8001642:	73fb      	strb	r3, [r7, #15]
 8001644:	e001      	b.n	800164a <HAL_GPIO_ReadPin+0x22>
=======
=======
>>>>>>> Stashed changes
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691a      	ldr	r2, [r3, #16]
 80015c0:	887b      	ldrh	r3, [r7, #2]
 80015c2:	4013      	ands	r3, r2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015c8:	2301      	movs	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	e001      	b.n	80015d2 <HAL_GPIO_ReadPin+0x22>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001646:	2300      	movs	r3, #0
 8001648:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800164a:	7bfb      	ldrb	r3, [r7, #15]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_GPIO_WritePin>:
=======
=======
>>>>>>> Stashed changes
 80015ce:	2300      	movs	r3, #0
 80015d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <HAL_GPIO_WritePin>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
 8001664:	4613      	mov	r3, r2
 8001666:	707b      	strb	r3, [r7, #1]
=======
=======
>>>>>>> Stashed changes
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
 80015ec:	4613      	mov	r3, r2
 80015ee:	707b      	strb	r3, [r7, #1]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001668:	787b      	ldrb	r3, [r7, #1]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	619a      	str	r2, [r3, #24]
=======
=======
>>>>>>> Stashed changes
 80015f0:	787b      	ldrb	r3, [r7, #1]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	619a      	str	r2, [r3, #24]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001674:	e002      	b.n	800167c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001676:	887a      	ldrh	r2, [r7, #2]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <HAL_PWREx_GetVoltageRange>:
=======
=======
>>>>>>> Stashed changes
 80015fc:	e002      	b.n	8001604 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015fe:	887a      	ldrh	r2, [r7, #2]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_PWREx_GetVoltageRange>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800168c:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001698:	d102      	bne.n	80016a0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800169a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800169e:	e00b      	b.n	80016b8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80016a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ae:	d102      	bne.n	80016b6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80016b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016b4:	e000      	b.n	80016b8 <HAL_PWREx_GetVoltageRange+0x30>
=======
=======
>>>>>>> Stashed changes
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001614:	4b0d      	ldr	r3, [pc, #52]	; (800164c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800161c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001620:	d102      	bne.n	8001628 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001626:	e00b      	b.n	8001640 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_PWREx_GetVoltageRange+0x3c>)
 800162a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800162e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001636:	d102      	bne.n	800163e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001638:	f44f 7300 	mov.w	r3, #512	; 0x200
 800163c:	e000      	b.n	8001640 <HAL_PWREx_GetVoltageRange+0x30>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80016b6:	2300      	movs	r3, #0
=======
 800163e:	2300      	movs	r3, #0
>>>>>>> Stashed changes
=======
 800163e:	2300      	movs	r3, #0
>>>>>>> Stashed changes
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40007000 	.word	0x40007000

080016c8 <HAL_PWREx_ControlVoltageScaling>:
=======
=======
>>>>>>> Stashed changes
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40007000 	.word	0x40007000

08001650 <HAL_PWREx_ControlVoltageScaling>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
=======
=======
>>>>>>> Stashed changes
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d141      	bne.n	800175a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016d6:	4b4b      	ldr	r3, [pc, #300]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e2:	d131      	bne.n	8001748 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016e4:	4b47      	ldr	r3, [pc, #284]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016ea:	4a46      	ldr	r2, [pc, #280]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016f4:	4b43      	ldr	r3, [pc, #268]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016fc:	4a41      	ldr	r2, [pc, #260]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001702:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001704:	4b40      	ldr	r3, [pc, #256]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2232      	movs	r2, #50	; 0x32
 800170a:	fb02 f303 	mul.w	r3, r2, r3
 800170e:	4a3f      	ldr	r2, [pc, #252]	; (800180c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001710:	fba2 2303 	umull	r2, r3, r2, r3
 8001714:	0c9b      	lsrs	r3, r3, #18
 8001716:	3301      	adds	r3, #1
 8001718:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800171a:	e002      	b.n	8001722 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	3b01      	subs	r3, #1
 8001720:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001722:	4b38      	ldr	r3, [pc, #224]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800172a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800172e:	d102      	bne.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f2      	bne.n	800171c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001736:	4b33      	ldr	r3, [pc, #204]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001742:	d158      	bne.n	80017f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e057      	b.n	80017f8 <HAL_PWREx_ControlVoltageScaling+0x130>
=======
=======
>>>>>>> Stashed changes
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d141      	bne.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800165e:	4b4b      	ldr	r3, [pc, #300]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800166a:	d131      	bne.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800166c:	4b47      	ldr	r3, [pc, #284]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001672:	4a46      	ldr	r2, [pc, #280]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001678:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800167c:	4b43      	ldr	r3, [pc, #268]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001684:	4a41      	ldr	r2, [pc, #260]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800168c:	4b40      	ldr	r3, [pc, #256]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2232      	movs	r2, #50	; 0x32
 8001692:	fb02 f303 	mul.w	r3, r2, r3
 8001696:	4a3f      	ldr	r2, [pc, #252]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	0c9b      	lsrs	r3, r3, #18
 800169e:	3301      	adds	r3, #1
 80016a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016a2:	e002      	b.n	80016aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016aa:	4b38      	ldr	r3, [pc, #224]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b6:	d102      	bne.n	80016be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f2      	bne.n	80016a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016be:	4b33      	ldr	r3, [pc, #204]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ca:	d158      	bne.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e057      	b.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x130>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001748:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800174e:	4a2d      	ldr	r2, [pc, #180]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001754:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001758:	e04d      	b.n	80017f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001760:	d141      	bne.n	80017e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001762:	4b28      	ldr	r3, [pc, #160]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800176a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800176e:	d131      	bne.n	80017d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001770:	4b24      	ldr	r3, [pc, #144]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001776:	4a23      	ldr	r2, [pc, #140]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001780:	4b20      	ldr	r3, [pc, #128]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001788:	4a1e      	ldr	r2, [pc, #120]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800178a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001790:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2232      	movs	r2, #50	; 0x32
 8001796:	fb02 f303 	mul.w	r3, r2, r3
 800179a:	4a1c      	ldr	r2, [pc, #112]	; (800180c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800179c:	fba2 2303 	umull	r2, r3, r2, r3
 80017a0:	0c9b      	lsrs	r3, r3, #18
 80017a2:	3301      	adds	r3, #1
 80017a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017a6:	e002      	b.n	80017ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ba:	d102      	bne.n	80017c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f2      	bne.n	80017a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ce:	d112      	bne.n	80017f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e011      	b.n	80017f8 <HAL_PWREx_ControlVoltageScaling+0x130>
=======
=======
>>>>>>> Stashed changes
 80016d0:	4b2e      	ldr	r3, [pc, #184]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016d6:	4a2d      	ldr	r2, [pc, #180]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016e0:	e04d      	b.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016e8:	d141      	bne.n	800176e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ea:	4b28      	ldr	r3, [pc, #160]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f6:	d131      	bne.n	800175c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016f8:	4b24      	ldr	r3, [pc, #144]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016fe:	4a23      	ldr	r2, [pc, #140]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001704:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001708:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001710:	4a1e      	ldr	r2, [pc, #120]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001716:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001718:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2232      	movs	r2, #50	; 0x32
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	0c9b      	lsrs	r3, r3, #18
 800172a:	3301      	adds	r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800172e:	e002      	b.n	8001736 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3b01      	subs	r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001742:	d102      	bne.n	800174a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f2      	bne.n	8001730 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001756:	d112      	bne.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e011      	b.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x130>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017e4:	e007      	b.n	80017f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
=======
=======
>>>>>>> Stashed changes
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001768:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800176c:	e007      	b.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f4:	6013      	str	r3, [r2, #0]
=======
=======
>>>>>>> Stashed changes
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001778:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800177c:	6013      	str	r3, [r2, #0]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	40007000 	.word	0x40007000
 8001808:	20000000 	.word	0x20000000
 800180c:	431bde83 	.word	0x431bde83

08001810 <HAL_PWREx_EnableVddIO2>:
=======
=======
>>>>>>> Stashed changes
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40007000 	.word	0x40007000
 8001790:	20000000 	.word	0x20000000
 8001794:	431bde83 	.word	0x431bde83

08001798 <HAL_PWREx_EnableVddIO2>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	4a04      	ldr	r2, [pc, #16]	; (800182c <HAL_PWREx_EnableVddIO2+0x1c>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6053      	str	r3, [r2, #4]
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40007000 	.word	0x40007000

08001830 <HAL_RCC_OscConfig>:
=======
=======
>>>>>>> Stashed changes
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80017a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a6:	6053      	str	r3, [r2, #4]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40007000 	.word	0x40007000

080017b8 <HAL_RCC_OscConfig>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
=======
=======
>>>>>>> Stashed changes
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e3db      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
=======
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e3db      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
>>>>>>> Stashed changes
=======
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e3db      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
>>>>>>> Stashed changes
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001842:	4ba4      	ldr	r3, [pc, #656]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800184c:	4ba1      	ldr	r3, [pc, #644]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0310 	and.w	r3, r3, #16
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 80e1 	beq.w	8001a26 <HAL_RCC_OscConfig+0x1f6>
=======
=======
>>>>>>> Stashed changes
 80017ca:	4ba4      	ldr	r3, [pc, #656]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017d4:	4ba1      	ldr	r3, [pc, #644]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0310 	and.w	r3, r3, #16
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 80e1 	beq.w	80019ae <HAL_RCC_OscConfig+0x1f6>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d007      	beq.n	800187a <HAL_RCC_OscConfig+0x4a>
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	2b0c      	cmp	r3, #12
 800186e:	f040 8088 	bne.w	8001982 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	2b01      	cmp	r3, #1
 8001876:	f040 8084 	bne.w	8001982 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800187a:	4b96      	ldr	r3, [pc, #600]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d005      	beq.n	8001892 <HAL_RCC_OscConfig+0x62>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e3b3      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
=======
=======
>>>>>>> Stashed changes
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d007      	beq.n	8001802 <HAL_RCC_OscConfig+0x4a>
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	2b0c      	cmp	r3, #12
 80017f6:	f040 8088 	bne.w	800190a <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	f040 8084 	bne.w	800190a <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001802:	4b96      	ldr	r3, [pc, #600]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d005      	beq.n	800181a <HAL_RCC_OscConfig+0x62>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e3b3      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1a      	ldr	r2, [r3, #32]
 8001896:	4b8f      	ldr	r3, [pc, #572]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d004      	beq.n	80018ac <HAL_RCC_OscConfig+0x7c>
 80018a2:	4b8c      	ldr	r3, [pc, #560]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018aa:	e005      	b.n	80018b8 <HAL_RCC_OscConfig+0x88>
 80018ac:	4b89      	ldr	r3, [pc, #548]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 80018ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b2:	091b      	lsrs	r3, r3, #4
 80018b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d223      	bcs.n	8001904 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fd59 	bl	8002378 <RCC_SetFlashLatencyFromMSIRange>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e394      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
=======
=======
>>>>>>> Stashed changes
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1a      	ldr	r2, [r3, #32]
 800181e:	4b8f      	ldr	r3, [pc, #572]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d004      	beq.n	8001834 <HAL_RCC_OscConfig+0x7c>
 800182a:	4b8c      	ldr	r3, [pc, #560]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001832:	e005      	b.n	8001840 <HAL_RCC_OscConfig+0x88>
 8001834:	4b89      	ldr	r3, [pc, #548]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800183a:	091b      	lsrs	r3, r3, #4
 800183c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001840:	4293      	cmp	r3, r2
 8001842:	d223      	bcs.n	800188c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fd59 	bl	8002300 <RCC_SetFlashLatencyFromMSIRange>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e394      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80018d0:	4b80      	ldr	r3, [pc, #512]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a7f      	ldr	r2, [pc, #508]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 80018d6:	f043 0308 	orr.w	r3, r3, #8
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	4b7d      	ldr	r3, [pc, #500]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	497a      	ldr	r1, [pc, #488]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ee:	4b79      	ldr	r3, [pc, #484]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	4975      	ldr	r1, [pc, #468]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	604b      	str	r3, [r1, #4]
 8001902:	e022      	b.n	800194a <HAL_RCC_OscConfig+0x11a>
=======
=======
>>>>>>> Stashed changes
 8001858:	4b80      	ldr	r3, [pc, #512]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a7f      	ldr	r2, [pc, #508]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800185e:	f043 0308 	orr.w	r3, r3, #8
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	4b7d      	ldr	r3, [pc, #500]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	497a      	ldr	r1, [pc, #488]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001876:	4b79      	ldr	r3, [pc, #484]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	021b      	lsls	r3, r3, #8
 8001884:	4975      	ldr	r1, [pc, #468]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001886:	4313      	orrs	r3, r2
 8001888:	604b      	str	r3, [r1, #4]
 800188a:	e022      	b.n	80018d2 <HAL_RCC_OscConfig+0x11a>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001904:	4b73      	ldr	r3, [pc, #460]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a72      	ldr	r2, [pc, #456]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 800190a:	f043 0308 	orr.w	r3, r3, #8
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	4b70      	ldr	r3, [pc, #448]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	496d      	ldr	r1, [pc, #436]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 800191e:	4313      	orrs	r3, r2
 8001920:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001922:	4b6c      	ldr	r3, [pc, #432]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	021b      	lsls	r3, r3, #8
 8001930:	4968      	ldr	r1, [pc, #416]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 8001932:	4313      	orrs	r3, r2
 8001934:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	4618      	mov	r0, r3
 800193c:	f000 fd1c 	bl	8002378 <RCC_SetFlashLatencyFromMSIRange>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e357      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
=======
=======
>>>>>>> Stashed changes
 800188c:	4b73      	ldr	r3, [pc, #460]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a72      	ldr	r2, [pc, #456]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001892:	f043 0308 	orr.w	r3, r3, #8
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	4b70      	ldr	r3, [pc, #448]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	496d      	ldr	r1, [pc, #436]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018aa:	4b6c      	ldr	r3, [pc, #432]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	4968      	ldr	r1, [pc, #416]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 fd1c 	bl	8002300 <RCC_SetFlashLatencyFromMSIRange>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e357      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800194a:	f000 fc8b 	bl	8002264 <HAL_RCC_GetSysClockFreq>
 800194e:	4601      	mov	r1, r0
 8001950:	4b60      	ldr	r3, [pc, #384]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	4a5f      	ldr	r2, [pc, #380]	; (8001ad8 <HAL_RCC_OscConfig+0x2a8>)
 800195c:	5cd3      	ldrb	r3, [r2, r3]
 800195e:	f003 031f 	and.w	r3, r3, #31
 8001962:	fa21 f303 	lsr.w	r3, r1, r3
 8001966:	4a5d      	ldr	r2, [pc, #372]	; (8001adc <HAL_RCC_OscConfig+0x2ac>)
 8001968:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800196a:	4b5d      	ldr	r3, [pc, #372]	; (8001ae0 <HAL_RCC_OscConfig+0x2b0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fb68 	bl	8001044 <HAL_InitTick>
 8001974:	4603      	mov	r3, r0
 8001976:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d052      	beq.n	8001a24 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	e33b      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
=======
 80018d2:	f000 fc8b 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 80018d6:	4601      	mov	r1, r0
 80018d8:	4b60      	ldr	r3, [pc, #384]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	4a5f      	ldr	r2, [pc, #380]	; (8001a60 <HAL_RCC_OscConfig+0x2a8>)
 80018e4:	5cd3      	ldrb	r3, [r2, r3]
 80018e6:	f003 031f 	and.w	r3, r3, #31
 80018ea:	fa21 f303 	lsr.w	r3, r1, r3
 80018ee:	4a5d      	ldr	r2, [pc, #372]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018f2:	4b5d      	ldr	r3, [pc, #372]	; (8001a68 <HAL_RCC_OscConfig+0x2b0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fb68 	bl	8000fcc <HAL_InitTick>
 80018fc:	4603      	mov	r3, r0
 80018fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d052      	beq.n	80019ac <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	e33b      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
>>>>>>> Stashed changes
=======
 80018d2:	f000 fc8b 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 80018d6:	4601      	mov	r1, r0
 80018d8:	4b60      	ldr	r3, [pc, #384]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	4a5f      	ldr	r2, [pc, #380]	; (8001a60 <HAL_RCC_OscConfig+0x2a8>)
 80018e4:	5cd3      	ldrb	r3, [r2, r3]
 80018e6:	f003 031f 	and.w	r3, r3, #31
 80018ea:	fa21 f303 	lsr.w	r3, r1, r3
 80018ee:	4a5d      	ldr	r2, [pc, #372]	; (8001a64 <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018f2:	4b5d      	ldr	r3, [pc, #372]	; (8001a68 <HAL_RCC_OscConfig+0x2b0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fb68 	bl	8000fcc <HAL_InitTick>
 80018fc:	4603      	mov	r3, r0
 80018fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d052      	beq.n	80019ac <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	e33b      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d032      	beq.n	80019f0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800198a:	4b52      	ldr	r3, [pc, #328]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a51      	ldr	r2, [pc, #324]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001996:	f7ff fba1 	bl	80010dc <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800199e:	f7ff fb9d 	bl	80010dc <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e324      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019b0:	4b48      	ldr	r3, [pc, #288]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x16e>
=======
=======
>>>>>>> Stashed changes
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d032      	beq.n	8001978 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001912:	4b52      	ldr	r3, [pc, #328]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a51      	ldr	r2, [pc, #324]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800191e:	f7ff fba1 	bl	8001064 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001926:	f7ff fb9d 	bl	8001064 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e324      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001938:	4b48      	ldr	r3, [pc, #288]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f0      	beq.n	8001926 <HAL_RCC_OscConfig+0x16e>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80019bc:	4b45      	ldr	r3, [pc, #276]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a44      	ldr	r2, [pc, #272]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 80019c2:	f043 0308 	orr.w	r3, r3, #8
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	4b42      	ldr	r3, [pc, #264]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	493f      	ldr	r1, [pc, #252]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019da:	4b3e      	ldr	r3, [pc, #248]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	493a      	ldr	r1, [pc, #232]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	604b      	str	r3, [r1, #4]
 80019ee:	e01a      	b.n	8001a26 <HAL_RCC_OscConfig+0x1f6>
=======
 8001944:	4b45      	ldr	r3, [pc, #276]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a44      	ldr	r2, [pc, #272]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800194a:	f043 0308 	orr.w	r3, r3, #8
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b42      	ldr	r3, [pc, #264]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	493f      	ldr	r1, [pc, #252]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800195e:	4313      	orrs	r3, r2
 8001960:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
=======
 8001944:	4b45      	ldr	r3, [pc, #276]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a44      	ldr	r2, [pc, #272]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800194a:	f043 0308 	orr.w	r3, r3, #8
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b42      	ldr	r3, [pc, #264]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	493f      	ldr	r1, [pc, #252]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800195e:	4313      	orrs	r3, r2
 8001960:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
>>>>>>> Stashed changes
 8001962:	4b3e      	ldr	r3, [pc, #248]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	493a      	ldr	r1, [pc, #232]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001972:	4313      	orrs	r3, r2
 8001974:	604b      	str	r3, [r1, #4]
 8001976:	e01a      	b.n	80019ae <HAL_RCC_OscConfig+0x1f6>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80019f0:	4b38      	ldr	r3, [pc, #224]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a37      	ldr	r2, [pc, #220]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 80019f6:	f023 0301 	bic.w	r3, r3, #1
 80019fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019fc:	f7ff fb6e 	bl	80010dc <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a04:	f7ff fb6a 	bl	80010dc <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e2f1      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a16:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x1d4>
 8001a22:	e000      	b.n	8001a26 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a24:	bf00      	nop
=======
=======
>>>>>>> Stashed changes
 8001978:	4b38      	ldr	r3, [pc, #224]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a37      	ldr	r2, [pc, #220]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 800197e:	f023 0301 	bic.w	r3, r3, #1
 8001982:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001984:	f7ff fb6e 	bl	8001064 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800198c:	f7ff fb6a 	bl	8001064 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e2f1      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800199e:	4b2f      	ldr	r3, [pc, #188]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x1d4>
 80019aa:	e000      	b.n	80019ae <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019ac:	bf00      	nop
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d074      	beq.n	8001b1c <HAL_RCC_OscConfig+0x2ec>
=======
=======
>>>>>>> Stashed changes
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d074      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x2ec>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d005      	beq.n	8001a44 <HAL_RCC_OscConfig+0x214>
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	2b0c      	cmp	r3, #12
 8001a3c:	d10e      	bne.n	8001a5c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	2b03      	cmp	r3, #3
 8001a42:	d10b      	bne.n	8001a5c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a44:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d064      	beq.n	8001b1a <HAL_RCC_OscConfig+0x2ea>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d160      	bne.n	8001b1a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e2ce      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
=======
=======
>>>>>>> Stashed changes
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d005      	beq.n	80019cc <HAL_RCC_OscConfig+0x214>
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2b0c      	cmp	r3, #12
 80019c4:	d10e      	bne.n	80019e4 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	d10b      	bne.n	80019e4 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019cc:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d064      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x2ea>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d160      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e2ce      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a64:	d106      	bne.n	8001a74 <HAL_RCC_OscConfig+0x244>
 8001a66:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a1a      	ldr	r2, [pc, #104]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 8001a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	e01d      	b.n	8001ab0 <HAL_RCC_OscConfig+0x280>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a7c:	d10c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x268>
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a14      	ldr	r2, [pc, #80]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 8001a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 8001a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e00b      	b.n	8001ab0 <HAL_RCC_OscConfig+0x280>
 8001a98:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 8001a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <HAL_RCC_OscConfig+0x2a4>)
 8001aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d01c      	beq.n	8001af2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7ff fb10 	bl	80010dc <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001abe:	e011      	b.n	8001ae4 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac0:	f7ff fb0c 	bl	80010dc <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b64      	cmp	r3, #100	; 0x64
 8001acc:	d90a      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e293      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	080f5a14 	.word	0x080f5a14
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ae4:	4bae      	ldr	r3, [pc, #696]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0e7      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x290>
 8001af0:	e014      	b.n	8001b1c <HAL_RCC_OscConfig+0x2ec>
=======
=======
>>>>>>> Stashed changes
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ec:	d106      	bne.n	80019fc <HAL_RCC_OscConfig+0x244>
 80019ee:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a1a      	ldr	r2, [pc, #104]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 80019f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e01d      	b.n	8001a38 <HAL_RCC_OscConfig+0x280>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x268>
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e00b      	b.n	8001a38 <HAL_RCC_OscConfig+0x280>
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0d      	ldr	r2, [pc, #52]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <HAL_RCC_OscConfig+0x2a4>)
 8001a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d01c      	beq.n	8001a7a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff fb10 	bl	8001064 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a46:	e011      	b.n	8001a6c <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff fb0c 	bl	8001064 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	; 0x64
 8001a54:	d90a      	bls.n	8001a6c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e293      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	0816e734 	.word	0x0816e734
 8001a64:	20000000 	.word	0x20000000
 8001a68:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a6c:	4bae      	ldr	r3, [pc, #696]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0e7      	beq.n	8001a48 <HAL_RCC_OscConfig+0x290>
 8001a78:	e014      	b.n	8001aa4 <HAL_RCC_OscConfig+0x2ec>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001af2:	f7ff faf3 	bl	80010dc <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001afa:	f7ff faef 	bl	80010dc <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b64      	cmp	r3, #100	; 0x64
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e276      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b0c:	4ba4      	ldr	r3, [pc, #656]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f0      	bne.n	8001afa <HAL_RCC_OscConfig+0x2ca>
 8001b18:	e000      	b.n	8001b1c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1a:	bf00      	nop
=======
=======
>>>>>>> Stashed changes
 8001a7a:	f7ff faf3 	bl	8001064 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a82:	f7ff faef 	bl	8001064 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b64      	cmp	r3, #100	; 0x64
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e276      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a94:	4ba4      	ldr	r3, [pc, #656]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f0      	bne.n	8001a82 <HAL_RCC_OscConfig+0x2ca>
 8001aa0:	e000      	b.n	8001aa4 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa2:	bf00      	nop
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d060      	beq.n	8001bea <HAL_RCC_OscConfig+0x3ba>
=======
=======
>>>>>>> Stashed changes
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d060      	beq.n	8001b72 <HAL_RCC_OscConfig+0x3ba>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d005      	beq.n	8001b3a <HAL_RCC_OscConfig+0x30a>
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	2b0c      	cmp	r3, #12
 8001b32:	d119      	bne.n	8001b68 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d116      	bne.n	8001b68 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b3a:	4b99      	ldr	r3, [pc, #612]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d005      	beq.n	8001b52 <HAL_RCC_OscConfig+0x322>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e253      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
=======
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d005      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x30a>
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	2b0c      	cmp	r3, #12
 8001aba:	d119      	bne.n	8001af0 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d116      	bne.n	8001af0 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ac2:	4b99      	ldr	r3, [pc, #612]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d005      	beq.n	8001ada <HAL_RCC_OscConfig+0x322>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e253      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
>>>>>>> Stashed changes
=======
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d005      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x30a>
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	2b0c      	cmp	r3, #12
 8001aba:	d119      	bne.n	8001af0 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d116      	bne.n	8001af0 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ac2:	4b99      	ldr	r3, [pc, #612]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d005      	beq.n	8001ada <HAL_RCC_OscConfig+0x322>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e253      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
>>>>>>> Stashed changes
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001b52:	4b93      	ldr	r3, [pc, #588]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	061b      	lsls	r3, r3, #24
 8001b60:	498f      	ldr	r1, [pc, #572]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b66:	e040      	b.n	8001bea <HAL_RCC_OscConfig+0x3ba>
=======
 8001ada:	4b93      	ldr	r3, [pc, #588]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	061b      	lsls	r3, r3, #24
 8001ae8:	498f      	ldr	r1, [pc, #572]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aee:	e040      	b.n	8001b72 <HAL_RCC_OscConfig+0x3ba>
>>>>>>> Stashed changes
=======
 8001ada:	4b93      	ldr	r3, [pc, #588]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	061b      	lsls	r3, r3, #24
 8001ae8:	498f      	ldr	r1, [pc, #572]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aee:	e040      	b.n	8001b72 <HAL_RCC_OscConfig+0x3ba>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d023      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b70:	4b8b      	ldr	r3, [pc, #556]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a8a      	ldr	r2, [pc, #552]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7ff faae 	bl	80010dc <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b84:	f7ff faaa 	bl	80010dc <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e231      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b96:	4b82      	ldr	r3, [pc, #520]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x354>
=======
=======
>>>>>>> Stashed changes
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d023      	beq.n	8001b40 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af8:	4b8b      	ldr	r3, [pc, #556]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a8a      	ldr	r2, [pc, #552]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7ff faae 	bl	8001064 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0c:	f7ff faaa 	bl	8001064 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e231      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b1e:	4b82      	ldr	r3, [pc, #520]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x354>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001ba2:	4b7f      	ldr	r3, [pc, #508]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	061b      	lsls	r3, r3, #24
 8001bb0:	497b      	ldr	r1, [pc, #492]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	604b      	str	r3, [r1, #4]
 8001bb6:	e018      	b.n	8001bea <HAL_RCC_OscConfig+0x3ba>
=======
=======
>>>>>>> Stashed changes
 8001b2a:	4b7f      	ldr	r3, [pc, #508]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	061b      	lsls	r3, r3, #24
 8001b38:	497b      	ldr	r1, [pc, #492]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
 8001b3e:	e018      	b.n	8001b72 <HAL_RCC_OscConfig+0x3ba>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001bb8:	4b79      	ldr	r3, [pc, #484]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a78      	ldr	r2, [pc, #480]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001bbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fa8a 	bl	80010dc <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bcc:	f7ff fa86 	bl	80010dc <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e20d      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bde:	4b70      	ldr	r3, [pc, #448]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x39c>
=======
 8001b40:	4b79      	ldr	r3, [pc, #484]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a78      	ldr	r2, [pc, #480]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fa8a 	bl	8001064 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b54:	f7ff fa86 	bl	8001064 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e20d      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
=======
 8001b40:	4b79      	ldr	r3, [pc, #484]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a78      	ldr	r2, [pc, #480]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fa8a 	bl	8001064 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b54:	f7ff fa86 	bl	8001064 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e20d      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
>>>>>>> Stashed changes
 8001b66:	4b70      	ldr	r3, [pc, #448]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x39c>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d03c      	beq.n	8001c70 <HAL_RCC_OscConfig+0x440>
=======
=======
>>>>>>> Stashed changes
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d03c      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x440>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d01c      	beq.n	8001c38 <HAL_RCC_OscConfig+0x408>
=======
=======
>>>>>>> Stashed changes
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d01c      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x408>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001bfe:	4b68      	ldr	r3, [pc, #416]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c04:	4a66      	ldr	r2, [pc, #408]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0e:	f7ff fa65 	bl	80010dc <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c16:	f7ff fa61 	bl	80010dc <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e1e8      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c28:	4b5d      	ldr	r3, [pc, #372]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0ef      	beq.n	8001c16 <HAL_RCC_OscConfig+0x3e6>
 8001c36:	e01b      	b.n	8001c70 <HAL_RCC_OscConfig+0x440>
=======
=======
>>>>>>> Stashed changes
 8001b86:	4b68      	ldr	r3, [pc, #416]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8c:	4a66      	ldr	r2, [pc, #408]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b96:	f7ff fa65 	bl	8001064 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9e:	f7ff fa61 	bl	8001064 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e1e8      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bb0:	4b5d      	ldr	r3, [pc, #372]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0ef      	beq.n	8001b9e <HAL_RCC_OscConfig+0x3e6>
 8001bbe:	e01b      	b.n	8001bf8 <HAL_RCC_OscConfig+0x440>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001c38:	4b59      	ldr	r3, [pc, #356]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c3e:	4a58      	ldr	r2, [pc, #352]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001c40:	f023 0301 	bic.w	r3, r3, #1
 8001c44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c48:	f7ff fa48 	bl	80010dc <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c50:	f7ff fa44 	bl	80010dc <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e1cb      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c62:	4b4f      	ldr	r3, [pc, #316]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1ef      	bne.n	8001c50 <HAL_RCC_OscConfig+0x420>
=======
=======
>>>>>>> Stashed changes
 8001bc0:	4b59      	ldr	r3, [pc, #356]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc6:	4a58      	ldr	r2, [pc, #352]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001bc8:	f023 0301 	bic.w	r3, r3, #1
 8001bcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd0:	f7ff fa48 	bl	8001064 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd8:	f7ff fa44 	bl	8001064 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e1cb      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bea:	4b4f      	ldr	r3, [pc, #316]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1ef      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x420>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 80a5 	beq.w	8001dc8 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	77fb      	strb	r3, [r7, #31]
=======
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80a5 	beq.w	8001d50 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c06:	2300      	movs	r3, #0
 8001c08:	77fb      	strb	r3, [r7, #31]
>>>>>>> Stashed changes
=======
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80a5 	beq.w	8001d50 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c06:	2300      	movs	r3, #0
 8001c08:	77fb      	strb	r3, [r7, #31]
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001c82:	4b47      	ldr	r3, [pc, #284]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10d      	bne.n	8001caa <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c8e:	4b44      	ldr	r3, [pc, #272]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c92:	4a43      	ldr	r2, [pc, #268]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c98:	6593      	str	r3, [r2, #88]	; 0x58
 8001c9a:	4b41      	ldr	r3, [pc, #260]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001caa:	4b3e      	ldr	r3, [pc, #248]	; (8001da4 <HAL_RCC_OscConfig+0x574>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d118      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cb6:	4b3b      	ldr	r3, [pc, #236]	; (8001da4 <HAL_RCC_OscConfig+0x574>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a3a      	ldr	r2, [pc, #232]	; (8001da4 <HAL_RCC_OscConfig+0x574>)
 8001cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cc2:	f7ff fa0b 	bl	80010dc <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cca:	f7ff fa07 	bl	80010dc <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e18e      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cdc:	4b31      	ldr	r3, [pc, #196]	; (8001da4 <HAL_RCC_OscConfig+0x574>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x49a>
=======
=======
>>>>>>> Stashed changes
 8001c0a:	4b47      	ldr	r3, [pc, #284]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10d      	bne.n	8001c32 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	4b44      	ldr	r3, [pc, #272]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	4a43      	ldr	r2, [pc, #268]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c20:	6593      	str	r3, [r2, #88]	; 0x58
 8001c22:	4b41      	ldr	r3, [pc, #260]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c32:	4b3e      	ldr	r3, [pc, #248]	; (8001d2c <HAL_RCC_OscConfig+0x574>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d118      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <HAL_RCC_OscConfig+0x574>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a3a      	ldr	r2, [pc, #232]	; (8001d2c <HAL_RCC_OscConfig+0x574>)
 8001c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4a:	f7ff fa0b 	bl	8001064 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c52:	f7ff fa07 	bl	8001064 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e18e      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c64:	4b31      	ldr	r3, [pc, #196]	; (8001d2c <HAL_RCC_OscConfig+0x574>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x49a>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d108      	bne.n	8001d02 <HAL_RCC_OscConfig+0x4d2>
 8001cf0:	4b2b      	ldr	r3, [pc, #172]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf6:	4a2a      	ldr	r2, [pc, #168]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d00:	e024      	b.n	8001d4c <HAL_RCC_OscConfig+0x51c>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	2b05      	cmp	r3, #5
 8001d08:	d110      	bne.n	8001d2c <HAL_RCC_OscConfig+0x4fc>
 8001d0a:	4b25      	ldr	r3, [pc, #148]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d10:	4a23      	ldr	r2, [pc, #140]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001d12:	f043 0304 	orr.w	r3, r3, #4
 8001d16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d1a:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d20:	4a1f      	ldr	r2, [pc, #124]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d2a:	e00f      	b.n	8001d4c <HAL_RCC_OscConfig+0x51c>
 8001d2c:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d32:	4a1b      	ldr	r2, [pc, #108]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001d34:	f023 0301 	bic.w	r3, r3, #1
 8001d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d3c:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d42:	4a17      	ldr	r2, [pc, #92]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001d44:	f023 0304 	bic.w	r3, r3, #4
 8001d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
=======
=======
>>>>>>> Stashed changes
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d108      	bne.n	8001c8a <HAL_RCC_OscConfig+0x4d2>
 8001c78:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7e:	4a2a      	ldr	r2, [pc, #168]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c88:	e024      	b.n	8001cd4 <HAL_RCC_OscConfig+0x51c>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	d110      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x4fc>
 8001c92:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a23      	ldr	r2, [pc, #140]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca8:	4a1f      	ldr	r2, [pc, #124]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb2:	e00f      	b.n	8001cd4 <HAL_RCC_OscConfig+0x51c>
 8001cb4:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cc4:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cca:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001ccc:	f023 0304 	bic.w	r3, r3, #4
 8001cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d016      	beq.n	8001d82 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d54:	f7ff f9c2 	bl	80010dc <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d5a:	e00a      	b.n	8001d72 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5c:	f7ff f9be 	bl	80010dc <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e143      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_RCC_OscConfig+0x570>)
 8001d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0ed      	beq.n	8001d5c <HAL_RCC_OscConfig+0x52c>
 8001d80:	e019      	b.n	8001db6 <HAL_RCC_OscConfig+0x586>
=======
=======
>>>>>>> Stashed changes
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d016      	beq.n	8001d0a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cdc:	f7ff f9c2 	bl	8001064 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ce2:	e00a      	b.n	8001cfa <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce4:	f7ff f9be 	bl	8001064 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e143      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <HAL_RCC_OscConfig+0x570>)
 8001cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0ed      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x52c>
 8001d08:	e019      	b.n	8001d3e <HAL_RCC_OscConfig+0x586>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001d82:	f7ff f9ab 	bl	80010dc <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d88:	e00e      	b.n	8001da8 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8a:	f7ff f9a7 	bl	80010dc <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d905      	bls.n	8001da8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e12c      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001da8:	4b96      	ldr	r3, [pc, #600]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1e9      	bne.n	8001d8a <HAL_RCC_OscConfig+0x55a>
=======
 8001d0a:	f7ff f9ab 	bl	8001064 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d10:	e00e      	b.n	8001d30 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d12:	f7ff f9a7 	bl	8001064 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d905      	bls.n	8001d30 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e12c      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
=======
 8001d0a:	f7ff f9ab 	bl	8001064 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d10:	e00e      	b.n	8001d30 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d12:	f7ff f9a7 	bl	8001064 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d905      	bls.n	8001d30 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e12c      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
>>>>>>> Stashed changes
 8001d30:	4b96      	ldr	r3, [pc, #600]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1e9      	bne.n	8001d12 <HAL_RCC_OscConfig+0x55a>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001db6:	7ffb      	ldrb	r3, [r7, #31]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d105      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dbc:	4b91      	ldr	r3, [pc, #580]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	4a90      	ldr	r2, [pc, #576]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	6593      	str	r3, [r2, #88]	; 0x58
=======
 8001d3e:	7ffb      	ldrb	r3, [r7, #31]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d105      	bne.n	8001d50 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
=======
 8001d3e:	7ffb      	ldrb	r3, [r7, #31]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d105      	bne.n	8001d50 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
>>>>>>> Stashed changes
 8001d44:	4b91      	ldr	r3, [pc, #580]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d48:	4a90      	ldr	r2, [pc, #576]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	6593      	str	r3, [r2, #88]	; 0x58
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0320 	and.w	r3, r3, #32
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d03c      	beq.n	8001e4e <HAL_RCC_OscConfig+0x61e>
=======
=======
>>>>>>> Stashed changes
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0320 	and.w	r3, r3, #32
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d03c      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x61e>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d01c      	beq.n	8001e16 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ddc:	4b89      	ldr	r3, [pc, #548]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001dde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001de2:	4a88      	ldr	r2, [pc, #544]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dec:	f7ff f976 	bl	80010dc <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001df4:	f7ff f972 	bl	80010dc <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e0f9      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e06:	4b7f      	ldr	r3, [pc, #508]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001e08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0ef      	beq.n	8001df4 <HAL_RCC_OscConfig+0x5c4>
 8001e14:	e01b      	b.n	8001e4e <HAL_RCC_OscConfig+0x61e>
=======
=======
>>>>>>> Stashed changes
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d01c      	beq.n	8001d9e <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d64:	4b89      	ldr	r3, [pc, #548]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001d66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d6a:	4a88      	ldr	r2, [pc, #544]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d74:	f7ff f976 	bl	8001064 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d7c:	f7ff f972 	bl	8001064 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e0f9      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d8e:	4b7f      	ldr	r3, [pc, #508]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001d90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0ef      	beq.n	8001d7c <HAL_RCC_OscConfig+0x5c4>
 8001d9c:	e01b      	b.n	8001dd6 <HAL_RCC_OscConfig+0x61e>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001e16:	4b7b      	ldr	r3, [pc, #492]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001e18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e1c:	4a79      	ldr	r2, [pc, #484]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001e1e:	f023 0301 	bic.w	r3, r3, #1
 8001e22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e26:	f7ff f959 	bl	80010dc <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e2e:	f7ff f955 	bl	80010dc <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e0dc      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e40:	4b70      	ldr	r3, [pc, #448]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001e42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1ef      	bne.n	8001e2e <HAL_RCC_OscConfig+0x5fe>
=======
=======
>>>>>>> Stashed changes
 8001d9e:	4b7b      	ldr	r3, [pc, #492]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001da0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001da4:	4a79      	ldr	r2, [pc, #484]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001da6:	f023 0301 	bic.w	r3, r3, #1
 8001daa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dae:	f7ff f959 	bl	8001064 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001db6:	f7ff f955 	bl	8001064 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e0dc      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dc8:	4b70      	ldr	r3, [pc, #448]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001dca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1ef      	bne.n	8001db6 <HAL_RCC_OscConfig+0x5fe>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 80d0 	beq.w	8001ff8 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2b0c      	cmp	r3, #12
 8001e5c:	f000 808d 	beq.w	8001f7a <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d15a      	bne.n	8001f1e <HAL_RCC_OscConfig+0x6ee>
=======
=======
>>>>>>> Stashed changes
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80d0 	beq.w	8001f80 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2b0c      	cmp	r3, #12
 8001de4:	f000 808d 	beq.w	8001f02 <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d15a      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x6ee>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001e68:	4b66      	ldr	r3, [pc, #408]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a65      	ldr	r2, [pc, #404]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7ff f932 	bl	80010dc <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7ff f92e 	bl	80010dc <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e0b5      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e8e:	4b5d      	ldr	r3, [pc, #372]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x64c>
=======
=======
>>>>>>> Stashed changes
 8001df0:	4b66      	ldr	r3, [pc, #408]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a65      	ldr	r2, [pc, #404]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7ff f932 	bl	8001064 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e04:	f7ff f92e 	bl	8001064 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e0b5      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e16:	4b5d      	ldr	r3, [pc, #372]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x64c>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001e9a:	4b5a      	ldr	r3, [pc, #360]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	4b5a      	ldr	r3, [pc, #360]	; (8002008 <HAL_RCC_OscConfig+0x7d8>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001eaa:	3a01      	subs	r2, #1
 8001eac:	0112      	lsls	r2, r2, #4
 8001eae:	4311      	orrs	r1, r2
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	4311      	orrs	r1, r2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ebc:	0852      	lsrs	r2, r2, #1
 8001ebe:	3a01      	subs	r2, #1
 8001ec0:	0552      	lsls	r2, r2, #21
 8001ec2:	4311      	orrs	r1, r2
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ec8:	0852      	lsrs	r2, r2, #1
 8001eca:	3a01      	subs	r2, #1
 8001ecc:	0652      	lsls	r2, r2, #25
 8001ece:	4311      	orrs	r1, r2
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ed4:	06d2      	lsls	r2, r2, #27
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	494a      	ldr	r1, [pc, #296]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60cb      	str	r3, [r1, #12]
=======
=======
>>>>>>> Stashed changes
 8001e22:	4b5a      	ldr	r3, [pc, #360]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	4b5a      	ldr	r3, [pc, #360]	; (8001f90 <HAL_RCC_OscConfig+0x7d8>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e32:	3a01      	subs	r2, #1
 8001e34:	0112      	lsls	r2, r2, #4
 8001e36:	4311      	orrs	r1, r2
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3c:	0212      	lsls	r2, r2, #8
 8001e3e:	4311      	orrs	r1, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e44:	0852      	lsrs	r2, r2, #1
 8001e46:	3a01      	subs	r2, #1
 8001e48:	0552      	lsls	r2, r2, #21
 8001e4a:	4311      	orrs	r1, r2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e50:	0852      	lsrs	r2, r2, #1
 8001e52:	3a01      	subs	r2, #1
 8001e54:	0652      	lsls	r2, r2, #25
 8001e56:	4311      	orrs	r1, r2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e5c:	06d2      	lsls	r2, r2, #27
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	494a      	ldr	r1, [pc, #296]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	60cb      	str	r3, [r1, #12]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001ede:	4b49      	ldr	r3, [pc, #292]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a48      	ldr	r2, [pc, #288]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001ee4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ee8:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eea:	4b46      	ldr	r3, [pc, #280]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	4a45      	ldr	r2, [pc, #276]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001ef0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef6:	f7ff f8f1 	bl	80010dc <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efe:	f7ff f8ed 	bl	80010dc <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e074      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f10:	4b3c      	ldr	r3, [pc, #240]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x6ce>
 8001f1c:	e06c      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7c8>
=======
=======
>>>>>>> Stashed changes
 8001e66:	4b49      	ldr	r3, [pc, #292]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a48      	ldr	r2, [pc, #288]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001e6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e70:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e72:	4b46      	ldr	r3, [pc, #280]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	4a45      	ldr	r2, [pc, #276]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001e78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e7c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7e:	f7ff f8f1 	bl	8001064 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e86:	f7ff f8ed 	bl	8001064 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e074      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e98:	4b3c      	ldr	r3, [pc, #240]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x6ce>
 8001ea4:	e06c      	b.n	8001f80 <HAL_RCC_OscConfig+0x7c8>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001f1e:	4b39      	ldr	r3, [pc, #228]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a38      	ldr	r2, [pc, #224]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001f24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f28:	6013      	str	r3, [r2, #0]
=======
=======
>>>>>>> Stashed changes
 8001ea6:	4b39      	ldr	r3, [pc, #228]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a38      	ldr	r2, [pc, #224]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001eac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eb0:	6013      	str	r3, [r2, #0]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001f2a:	4b36      	ldr	r3, [pc, #216]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d105      	bne.n	8001f42 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f36:	4b33      	ldr	r3, [pc, #204]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	4a32      	ldr	r2, [pc, #200]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001f3c:	f023 0303 	bic.w	r3, r3, #3
 8001f40:	60d3      	str	r3, [r2, #12]
=======
=======
>>>>>>> Stashed changes
 8001eb2:	4b36      	ldr	r3, [pc, #216]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d105      	bne.n	8001eca <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ebe:	4b33      	ldr	r3, [pc, #204]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	4a32      	ldr	r2, [pc, #200]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001ec4:	f023 0303 	bic.w	r3, r3, #3
 8001ec8:	60d3      	str	r3, [r2, #12]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001f42:	4b30      	ldr	r3, [pc, #192]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	4a2f      	ldr	r2, [pc, #188]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001f48:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f50:	60d3      	str	r3, [r2, #12]
=======
=======
>>>>>>> Stashed changes
 8001eca:	4b30      	ldr	r3, [pc, #192]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	4a2f      	ldr	r2, [pc, #188]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001ed0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed8:	60d3      	str	r3, [r2, #12]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001f52:	f7ff f8c3 	bl	80010dc <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5a:	f7ff f8bf 	bl	80010dc <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e046      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f6c:	4b25      	ldr	r3, [pc, #148]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1f0      	bne.n	8001f5a <HAL_RCC_OscConfig+0x72a>
 8001f78:	e03e      	b.n	8001ff8 <HAL_RCC_OscConfig+0x7c8>
=======
=======
>>>>>>> Stashed changes
 8001eda:	f7ff f8c3 	bl	8001064 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee2:	f7ff f8bf 	bl	8001064 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e046      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef4:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f0      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x72a>
 8001f00:	e03e      	b.n	8001f80 <HAL_RCC_OscConfig+0x7c8>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e039      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
=======
=======
>>>>>>> Stashed changes
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e039      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
      }
      else
      {
        pll_config = RCC->PLLCFGR;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001f86:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <HAL_RCC_OscConfig+0x7d4>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f003 0203 	and.w	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d12c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d123      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb6:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d11b      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc6:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d113      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x7c4>
=======
=======
>>>>>>> Stashed changes
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	; (8001f8c <HAL_RCC_OscConfig+0x7d4>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f003 0203 	and.w	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d12c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d123      	bne.n	8001f7c <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3e:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d11b      	bne.n	8001f7c <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4e:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d113      	bne.n	8001f7c <HAL_RCC_OscConfig+0x7c4>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd6:	085b      	lsrs	r3, r3, #1
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d109      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	085b      	lsrs	r3, r3, #1
 8001fec:	3b01      	subs	r3, #1
 8001fee:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e000      	b.n	8001ffa <HAL_RCC_OscConfig+0x7ca>
=======
=======
>>>>>>> Stashed changes
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5e:	085b      	lsrs	r3, r3, #1
 8001f60:	3b01      	subs	r3, #1
 8001f62:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d109      	bne.n	8001f7c <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	085b      	lsrs	r3, r3, #1
 8001f74:	3b01      	subs	r3, #1
 8001f76:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <HAL_RCC_OscConfig+0x7ca>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3720      	adds	r7, #32
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000
 8002008:	019d800c 	.word	0x019d800c

0800200c <HAL_RCC_ClockConfig>:
=======
=======
>>>>>>> Stashed changes
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3720      	adds	r7, #32
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	019d800c 	.word	0x019d800c

08001f94 <HAL_RCC_ClockConfig>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
=======
=======
>>>>>>> Stashed changes
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e10f      	b.n	8002244 <HAL_RCC_ClockConfig+0x238>
=======
=======
>>>>>>> Stashed changes
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e10f      	b.n	80021cc <HAL_RCC_ClockConfig+0x238>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002024:	4b89      	ldr	r3, [pc, #548]	; (800224c <HAL_RCC_ClockConfig+0x240>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d910      	bls.n	8002054 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b86      	ldr	r3, [pc, #536]	; (800224c <HAL_RCC_ClockConfig+0x240>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 020f 	bic.w	r2, r3, #15
 800203a:	4984      	ldr	r1, [pc, #528]	; (800224c <HAL_RCC_ClockConfig+0x240>)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]
=======
=======
>>>>>>> Stashed changes
 8001fac:	4b89      	ldr	r3, [pc, #548]	; (80021d4 <HAL_RCC_ClockConfig+0x240>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 030f 	and.w	r3, r3, #15
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d910      	bls.n	8001fdc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	4b86      	ldr	r3, [pc, #536]	; (80021d4 <HAL_RCC_ClockConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 020f 	bic.w	r2, r3, #15
 8001fc2:	4984      	ldr	r1, [pc, #528]	; (80021d4 <HAL_RCC_ClockConfig+0x240>)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002042:	4b82      	ldr	r3, [pc, #520]	; (800224c <HAL_RCC_ClockConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0f7      	b.n	8002244 <HAL_RCC_ClockConfig+0x238>
=======
=======
>>>>>>> Stashed changes
 8001fca:	4b82      	ldr	r3, [pc, #520]	; (80021d4 <HAL_RCC_ClockConfig+0x240>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0f7      	b.n	80021cc <HAL_RCC_ClockConfig+0x238>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 8089 	beq.w	8002174 <HAL_RCC_ClockConfig+0x168>
=======
=======
>>>>>>> Stashed changes
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 8089 	beq.w	80020fc <HAL_RCC_ClockConfig+0x168>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b03      	cmp	r3, #3
 8002068:	d133      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206a:	4b79      	ldr	r3, [pc, #484]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e0e4      	b.n	8002244 <HAL_RCC_ClockConfig+0x238>
=======
=======
>>>>>>> Stashed changes
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d133      	bne.n	800205a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff2:	4b79      	ldr	r3, [pc, #484]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e0e4      	b.n	80021cc <HAL_RCC_ClockConfig+0x238>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800207a:	f000 f9d7 	bl	800242c <RCC_GetSysClockFreqFromPLLSource>
 800207e:	4602      	mov	r2, r0
 8002080:	4b74      	ldr	r3, [pc, #464]	; (8002254 <HAL_RCC_ClockConfig+0x248>)
 8002082:	429a      	cmp	r2, r3
 8002084:	d955      	bls.n	8002132 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002086:	4b72      	ldr	r3, [pc, #456]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10a      	bne.n	80020a8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002092:	4b6f      	ldr	r3, [pc, #444]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800209a:	4a6d      	ldr	r2, [pc, #436]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 800209c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	e044      	b.n	8002132 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d03e      	beq.n	8002132 <HAL_RCC_ClockConfig+0x126>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d13a      	bne.n	8002132 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80020bc:	4b64      	ldr	r3, [pc, #400]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020c4:	4a62      	ldr	r2, [pc, #392]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80020c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ca:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	e02f      	b.n	8002132 <HAL_RCC_ClockConfig+0x126>
=======
=======
>>>>>>> Stashed changes
 8002002:	f000 f9d7 	bl	80023b4 <RCC_GetSysClockFreqFromPLLSource>
 8002006:	4602      	mov	r2, r0
 8002008:	4b74      	ldr	r3, [pc, #464]	; (80021dc <HAL_RCC_ClockConfig+0x248>)
 800200a:	429a      	cmp	r2, r3
 800200c:	d955      	bls.n	80020ba <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800200e:	4b72      	ldr	r3, [pc, #456]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10a      	bne.n	8002030 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800201a:	4b6f      	ldr	r3, [pc, #444]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002022:	4a6d      	ldr	r2, [pc, #436]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8002024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002028:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	e044      	b.n	80020ba <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d03e      	beq.n	80020ba <HAL_RCC_ClockConfig+0x126>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d13a      	bne.n	80020ba <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002044:	4b64      	ldr	r3, [pc, #400]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800204c:	4a62      	ldr	r2, [pc, #392]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 800204e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002052:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	e02f      	b.n	80020ba <HAL_RCC_ClockConfig+0x126>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d107      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020da:	4b5d      	ldr	r3, [pc, #372]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d115      	bne.n	8002112 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e0ac      	b.n	8002244 <HAL_RCC_ClockConfig+0x238>
=======
=======
>>>>>>> Stashed changes
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d107      	bne.n	8002072 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002062:	4b5d      	ldr	r3, [pc, #372]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d115      	bne.n	800209a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e0ac      	b.n	80021cc <HAL_RCC_ClockConfig+0x238>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d107      	bne.n	8002102 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020f2:	4b57      	ldr	r3, [pc, #348]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e0a0      	b.n	8002244 <HAL_RCC_ClockConfig+0x238>
=======
=======
>>>>>>> Stashed changes
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800207a:	4b57      	ldr	r3, [pc, #348]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e0a0      	b.n	80021cc <HAL_RCC_ClockConfig+0x238>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002102:	4b53      	ldr	r3, [pc, #332]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e098      	b.n	8002244 <HAL_RCC_ClockConfig+0x238>
=======
=======
>>>>>>> Stashed changes
 800208a:	4b53      	ldr	r3, [pc, #332]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e098      	b.n	80021cc <HAL_RCC_ClockConfig+0x238>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
        }
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002112:	f000 f8a7 	bl	8002264 <HAL_RCC_GetSysClockFreq>
 8002116:	4602      	mov	r2, r0
 8002118:	4b4e      	ldr	r3, [pc, #312]	; (8002254 <HAL_RCC_ClockConfig+0x248>)
 800211a:	429a      	cmp	r2, r3
 800211c:	d909      	bls.n	8002132 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800211e:	4b4c      	ldr	r3, [pc, #304]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002126:	4a4a      	ldr	r2, [pc, #296]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800212c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	617b      	str	r3, [r7, #20]
=======
 800209a:	f000 f8a7 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 800209e:	4602      	mov	r2, r0
 80020a0:	4b4e      	ldr	r3, [pc, #312]	; (80021dc <HAL_RCC_ClockConfig+0x248>)
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d909      	bls.n	80020ba <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80020a6:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020ae:	4a4a      	ldr	r2, [pc, #296]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 80020b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
=======
 800209a:	f000 f8a7 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 800209e:	4602      	mov	r2, r0
 80020a0:	4b4e      	ldr	r3, [pc, #312]	; (80021dc <HAL_RCC_ClockConfig+0x248>)
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d909      	bls.n	80020ba <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80020a6:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020ae:	4a4a      	ldr	r2, [pc, #296]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 80020b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002132:	4b47      	ldr	r3, [pc, #284]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f023 0203 	bic.w	r2, r3, #3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	4944      	ldr	r1, [pc, #272]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002140:	4313      	orrs	r3, r2
 8002142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002144:	f7fe ffca 	bl	80010dc <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214a:	e00a      	b.n	8002162 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214c:	f7fe ffc6 	bl	80010dc <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	f241 3288 	movw	r2, #5000	; 0x1388
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e070      	b.n	8002244 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002162:	4b3b      	ldr	r3, [pc, #236]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 020c 	and.w	r2, r3, #12
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	429a      	cmp	r2, r3
 8002172:	d1eb      	bne.n	800214c <HAL_RCC_ClockConfig+0x140>
=======
=======
>>>>>>> Stashed changes
 80020ba:	4b47      	ldr	r3, [pc, #284]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f023 0203 	bic.w	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4944      	ldr	r1, [pc, #272]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020cc:	f7fe ffca 	bl	8001064 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d4:	f7fe ffc6 	bl	8001064 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e070      	b.n	80021cc <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	4b3b      	ldr	r3, [pc, #236]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 020c 	and.w	r2, r3, #12
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d1eb      	bne.n	80020d4 <HAL_RCC_ClockConfig+0x140>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d009      	beq.n	8002194 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002180:	4b33      	ldr	r3, [pc, #204]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4930      	ldr	r1, [pc, #192]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 800218e:	4313      	orrs	r3, r2
 8002190:	608b      	str	r3, [r1, #8]
 8002192:	e008      	b.n	80021a6 <HAL_RCC_ClockConfig+0x19a>
=======
=======
>>>>>>> Stashed changes
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d009      	beq.n	800211c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002108:	4b33      	ldr	r3, [pc, #204]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4930      	ldr	r1, [pc, #192]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8002116:	4313      	orrs	r3, r2
 8002118:	608b      	str	r3, [r1, #8]
 800211a:	e008      	b.n	800212e <HAL_RCC_ClockConfig+0x19a>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	2b80      	cmp	r3, #128	; 0x80
 8002198:	d105      	bne.n	80021a6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800219a:	4b2d      	ldr	r3, [pc, #180]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	4a2c      	ldr	r2, [pc, #176]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80021a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021a4:	6093      	str	r3, [r2, #8]
=======
=======
>>>>>>> Stashed changes
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2b80      	cmp	r3, #128	; 0x80
 8002120:	d105      	bne.n	800212e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002122:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	4a2c      	ldr	r2, [pc, #176]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8002128:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800212c:	6093      	str	r3, [r2, #8]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80021a6:	4b29      	ldr	r3, [pc, #164]	; (800224c <HAL_RCC_ClockConfig+0x240>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d210      	bcs.n	80021d6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b4:	4b25      	ldr	r3, [pc, #148]	; (800224c <HAL_RCC_ClockConfig+0x240>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f023 020f 	bic.w	r2, r3, #15
 80021bc:	4923      	ldr	r1, [pc, #140]	; (800224c <HAL_RCC_ClockConfig+0x240>)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	600b      	str	r3, [r1, #0]
=======
=======
>>>>>>> Stashed changes
 800212e:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <HAL_RCC_ClockConfig+0x240>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d210      	bcs.n	800215e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213c:	4b25      	ldr	r3, [pc, #148]	; (80021d4 <HAL_RCC_ClockConfig+0x240>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f023 020f 	bic.w	r2, r3, #15
 8002144:	4923      	ldr	r1, [pc, #140]	; (80021d4 <HAL_RCC_ClockConfig+0x240>)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	4313      	orrs	r3, r2
 800214a:	600b      	str	r3, [r1, #0]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80021c4:	4b21      	ldr	r3, [pc, #132]	; (800224c <HAL_RCC_ClockConfig+0x240>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 030f 	and.w	r3, r3, #15
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d001      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e036      	b.n	8002244 <HAL_RCC_ClockConfig+0x238>
=======
 800214c:	4b21      	ldr	r3, [pc, #132]	; (80021d4 <HAL_RCC_ClockConfig+0x240>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 030f 	and.w	r3, r3, #15
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d001      	beq.n	800215e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e036      	b.n	80021cc <HAL_RCC_ClockConfig+0x238>
>>>>>>> Stashed changes
=======
 800214c:	4b21      	ldr	r3, [pc, #132]	; (80021d4 <HAL_RCC_ClockConfig+0x240>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 030f 	and.w	r3, r3, #15
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d001      	beq.n	800215e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e036      	b.n	80021cc <HAL_RCC_ClockConfig+0x238>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d008      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e2:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	4918      	ldr	r1, [pc, #96]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	608b      	str	r3, [r1, #8]
=======
=======
>>>>>>> Stashed changes
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	2b00      	cmp	r3, #0
 8002168:	d008      	beq.n	800217c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800216a:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	4918      	ldr	r1, [pc, #96]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8002178:	4313      	orrs	r3, r2
 800217a:	608b      	str	r3, [r1, #8]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d009      	beq.n	8002214 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002200:	4b13      	ldr	r3, [pc, #76]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4910      	ldr	r1, [pc, #64]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002210:	4313      	orrs	r3, r2
 8002212:	608b      	str	r3, [r1, #8]
=======
=======
>>>>>>> Stashed changes
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d009      	beq.n	800219c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002188:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4910      	ldr	r1, [pc, #64]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 8002198:	4313      	orrs	r3, r2
 800219a:	608b      	str	r3, [r1, #8]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002214:	f000 f826 	bl	8002264 <HAL_RCC_GetSysClockFreq>
 8002218:	4601      	mov	r1, r0
 800221a:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	091b      	lsrs	r3, r3, #4
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	4a0c      	ldr	r2, [pc, #48]	; (8002258 <HAL_RCC_ClockConfig+0x24c>)
 8002226:	5cd3      	ldrb	r3, [r2, r3]
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	fa21 f303 	lsr.w	r3, r1, r3
 8002230:	4a0a      	ldr	r2, [pc, #40]	; (800225c <HAL_RCC_ClockConfig+0x250>)
 8002232:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <HAL_RCC_ClockConfig+0x254>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe ff03 	bl	8001044 <HAL_InitTick>
 800223e:	4603      	mov	r3, r0
 8002240:	73fb      	strb	r3, [r7, #15]

  return status;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40022000 	.word	0x40022000
 8002250:	40021000 	.word	0x40021000
 8002254:	04c4b400 	.word	0x04c4b400
 8002258:	080f5a14 	.word	0x080f5a14
 800225c:	20000000 	.word	0x20000000
 8002260:	20000004 	.word	0x20000004

08002264 <HAL_RCC_GetSysClockFreq>:
=======
 800219c:	f000 f826 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 80021a0:	4601      	mov	r1, r0
 80021a2:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	091b      	lsrs	r3, r3, #4
 80021a8:	f003 030f 	and.w	r3, r3, #15
 80021ac:	4a0c      	ldr	r2, [pc, #48]	; (80021e0 <HAL_RCC_ClockConfig+0x24c>)
 80021ae:	5cd3      	ldrb	r3, [r2, r3]
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	fa21 f303 	lsr.w	r3, r1, r3
 80021b8:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <HAL_RCC_ClockConfig+0x250>)
 80021ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021bc:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <HAL_RCC_ClockConfig+0x254>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe ff03 	bl	8000fcc <HAL_InitTick>
 80021c6:	4603      	mov	r3, r0
 80021c8:	73fb      	strb	r3, [r7, #15]

  return status;
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
}
=======
 800219c:	f000 f826 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 80021a0:	4601      	mov	r1, r0
 80021a2:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <HAL_RCC_ClockConfig+0x244>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	091b      	lsrs	r3, r3, #4
 80021a8:	f003 030f 	and.w	r3, r3, #15
 80021ac:	4a0c      	ldr	r2, [pc, #48]	; (80021e0 <HAL_RCC_ClockConfig+0x24c>)
 80021ae:	5cd3      	ldrb	r3, [r2, r3]
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	fa21 f303 	lsr.w	r3, r1, r3
 80021b8:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <HAL_RCC_ClockConfig+0x250>)
 80021ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021bc:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <HAL_RCC_ClockConfig+0x254>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe ff03 	bl	8000fcc <HAL_InitTick>
 80021c6:	4603      	mov	r3, r0
 80021c8:	73fb      	strb	r3, [r7, #15]

  return status;
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
}
>>>>>>> Stashed changes
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40022000 	.word	0x40022000
 80021d8:	40021000 	.word	0x40021000
 80021dc:	04c4b400 	.word	0x04c4b400
 80021e0:	0816e734 	.word	0x0816e734
 80021e4:	20000000 	.word	0x20000000
 80021e8:	20000004 	.word	0x20000004

080021ec <HAL_RCC_GetSysClockFreq>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002264:	b480      	push	{r7}
 8002266:	b089      	sub	sp, #36	; 0x24
 8002268:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
=======
=======
>>>>>>> Stashed changes
 80021ec:	b480      	push	{r7}
 80021ee:	b089      	sub	sp, #36	; 0x24
 80021f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	2300      	movs	r3, #0
 80021f8:	61bb      	str	r3, [r7, #24]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002272:	4b3d      	ldr	r3, [pc, #244]	; (8002368 <HAL_RCC_GetSysClockFreq+0x104>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800227c:	4b3a      	ldr	r3, [pc, #232]	; (8002368 <HAL_RCC_GetSysClockFreq+0x104>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <HAL_RCC_GetSysClockFreq+0x34>
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	2b0c      	cmp	r3, #12
 8002290:	d121      	bne.n	80022d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d11e      	bne.n	80022d6 <HAL_RCC_GetSysClockFreq+0x72>
=======
 80021fa:	4b3d      	ldr	r3, [pc, #244]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002204:	4b3a      	ldr	r3, [pc, #232]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x34>
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	2b0c      	cmp	r3, #12
 8002218:	d121      	bne.n	800225e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d11e      	bne.n	800225e <HAL_RCC_GetSysClockFreq+0x72>
>>>>>>> Stashed changes
=======
 80021fa:	4b3d      	ldr	r3, [pc, #244]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002204:	4b3a      	ldr	r3, [pc, #232]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x34>
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	2b0c      	cmp	r3, #12
 8002218:	d121      	bne.n	800225e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d11e      	bne.n	800225e <HAL_RCC_GetSysClockFreq+0x72>
>>>>>>> Stashed changes
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002298:	4b33      	ldr	r3, [pc, #204]	; (8002368 <HAL_RCC_GetSysClockFreq+0x104>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d107      	bne.n	80022b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022a4:	4b30      	ldr	r3, [pc, #192]	; (8002368 <HAL_RCC_GetSysClockFreq+0x104>)
 80022a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022aa:	0a1b      	lsrs	r3, r3, #8
 80022ac:	f003 030f 	and.w	r3, r3, #15
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	e005      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x5c>
=======
 8002220:	4b33      	ldr	r3, [pc, #204]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	2b00      	cmp	r3, #0
 800222a:	d107      	bne.n	800223c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
=======
 8002220:	4b33      	ldr	r3, [pc, #204]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	2b00      	cmp	r3, #0
 800222a:	d107      	bne.n	800223c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
>>>>>>> Stashed changes
 800222c:	4b30      	ldr	r3, [pc, #192]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800222e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002232:	0a1b      	lsrs	r3, r3, #8
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	e005      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x5c>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80022b4:	4b2c      	ldr	r3, [pc, #176]	; (8002368 <HAL_RCC_GetSysClockFreq+0x104>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022c0:	4a2a      	ldr	r2, [pc, #168]	; (800236c <HAL_RCC_GetSysClockFreq+0x108>)
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10d      	bne.n	80022ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022d4:	e00a      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d102      	bne.n	80022e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022dc:	4b24      	ldr	r3, [pc, #144]	; (8002370 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022de:	61bb      	str	r3, [r7, #24]
 80022e0:	e004      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022e8:	4b22      	ldr	r3, [pc, #136]	; (8002374 <HAL_RCC_GetSysClockFreq+0x110>)
 80022ea:	61bb      	str	r3, [r7, #24]
=======
=======
>>>>>>> Stashed changes
 800223c:	4b2c      	ldr	r3, [pc, #176]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002248:	4a2a      	ldr	r2, [pc, #168]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002250:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10d      	bne.n	8002274 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800225c:	e00a      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	2b04      	cmp	r3, #4
 8002262:	d102      	bne.n	800226a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002264:	4b24      	ldr	r3, [pc, #144]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	e004      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	2b08      	cmp	r3, #8
 800226e:	d101      	bne.n	8002274 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002270:	4b22      	ldr	r3, [pc, #136]	; (80022fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002272:	61bb      	str	r3, [r7, #24]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	2b0c      	cmp	r3, #12
 80022f0:	d133      	bne.n	800235a <HAL_RCC_GetSysClockFreq+0xf6>
=======
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	2b0c      	cmp	r3, #12
 8002278:	d133      	bne.n	80022e2 <HAL_RCC_GetSysClockFreq+0xf6>
>>>>>>> Stashed changes
=======
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	2b0c      	cmp	r3, #12
 8002278:	d133      	bne.n	80022e2 <HAL_RCC_GetSysClockFreq+0xf6>
>>>>>>> Stashed changes
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80022f2:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <HAL_RCC_GetSysClockFreq+0x104>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d002      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0xa4>
 8002302:	2b03      	cmp	r3, #3
 8002304:	d003      	beq.n	800230e <HAL_RCC_GetSysClockFreq+0xaa>
 8002306:	e005      	b.n	8002314 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002308:	4b19      	ldr	r3, [pc, #100]	; (8002370 <HAL_RCC_GetSysClockFreq+0x10c>)
 800230a:	617b      	str	r3, [r7, #20]
      break;
 800230c:	e005      	b.n	800231a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800230e:	4b19      	ldr	r3, [pc, #100]	; (8002374 <HAL_RCC_GetSysClockFreq+0x110>)
 8002310:	617b      	str	r3, [r7, #20]
      break;
 8002312:	e002      	b.n	800231a <HAL_RCC_GetSysClockFreq+0xb6>
=======
=======
>>>>>>> Stashed changes
 800227a:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d002      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0xa4>
 800228a:	2b03      	cmp	r3, #3
 800228c:	d003      	beq.n	8002296 <HAL_RCC_GetSysClockFreq+0xaa>
 800228e:	e005      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002290:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002292:	617b      	str	r3, [r7, #20]
      break;
 8002294:	e005      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002296:	4b19      	ldr	r3, [pc, #100]	; (80022fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002298:	617b      	str	r3, [r7, #20]
      break;
 800229a:	e002      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0xb6>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	617b      	str	r3, [r7, #20]
      break;
 8002318:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800231a:	4b13      	ldr	r3, [pc, #76]	; (8002368 <HAL_RCC_GetSysClockFreq+0x104>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	091b      	lsrs	r3, r3, #4
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	3301      	adds	r3, #1
 8002326:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002328:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <HAL_RCC_GetSysClockFreq+0x104>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	0a1b      	lsrs	r3, r3, #8
 800232e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	fb02 f203 	mul.w	r2, r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	fbb2 f3f3 	udiv	r3, r2, r3
 800233e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <HAL_RCC_GetSysClockFreq+0x104>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	0e5b      	lsrs	r3, r3, #25
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	3301      	adds	r3, #1
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	fbb2 f3f3 	udiv	r3, r2, r3
 8002358:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800235a:	69bb      	ldr	r3, [r7, #24]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3724      	adds	r7, #36	; 0x24
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	40021000 	.word	0x40021000
 800236c:	080f5a24 	.word	0x080f5a24
 8002370:	00f42400 	.word	0x00f42400
 8002374:	007a1200 	.word	0x007a1200

08002378 <RCC_SetFlashLatencyFromMSIRange>:
=======
=======
>>>>>>> Stashed changes
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	617b      	str	r3, [r7, #20]
      break;
 80022a0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022a2:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	091b      	lsrs	r3, r3, #4
 80022a8:	f003 030f 	and.w	r3, r3, #15
 80022ac:	3301      	adds	r3, #1
 80022ae:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022b0:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	fb02 f203 	mul.w	r2, r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	0e5b      	lsrs	r3, r3, #25
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	3301      	adds	r3, #1
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022e2:	69bb      	ldr	r3, [r7, #24]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3724      	adds	r7, #36	; 0x24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	40021000 	.word	0x40021000
 80022f4:	0816e744 	.word	0x0816e744
 80022f8:	00f42400 	.word	0x00f42400
 80022fc:	007a1200 	.word	0x007a1200

08002300 <RCC_SetFlashLatencyFromMSIRange>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002380:	2300      	movs	r3, #0
 8002382:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002384:	4b27      	ldr	r3, [pc, #156]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002390:	f7ff f97a 	bl	8001688 <HAL_PWREx_GetVoltageRange>
 8002394:	6178      	str	r0, [r7, #20]
 8002396:	e014      	b.n	80023c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
=======
=======
>>>>>>> Stashed changes
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002308:	2300      	movs	r3, #0
 800230a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800230c:	4b27      	ldr	r3, [pc, #156]	; (80023ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800230e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002318:	f7ff f97a 	bl	8001610 <HAL_PWREx_GetVoltageRange>
 800231c:	6178      	str	r0, [r7, #20]
 800231e:	e014      	b.n	800234a <RCC_SetFlashLatencyFromMSIRange+0x4a>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002398:	4b22      	ldr	r3, [pc, #136]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800239a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239c:	4a21      	ldr	r2, [pc, #132]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800239e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a2:	6593      	str	r3, [r2, #88]	; 0x58
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023b0:	f7ff f96a 	bl	8001688 <HAL_PWREx_GetVoltageRange>
 80023b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023b6:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ba:	4a1a      	ldr	r2, [pc, #104]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c8:	d10b      	bne.n	80023e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b80      	cmp	r3, #128	; 0x80
 80023ce:	d913      	bls.n	80023f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2ba0      	cmp	r3, #160	; 0xa0
 80023d4:	d902      	bls.n	80023dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023d6:	2302      	movs	r3, #2
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	e00d      	b.n	80023f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
=======
=======
>>>>>>> Stashed changes
 8002320:	4b22      	ldr	r3, [pc, #136]	; (80023ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002324:	4a21      	ldr	r2, [pc, #132]	; (80023ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232a:	6593      	str	r3, [r2, #88]	; 0x58
 800232c:	4b1f      	ldr	r3, [pc, #124]	; (80023ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800232e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002338:	f7ff f96a 	bl	8001610 <HAL_PWREx_GetVoltageRange>
 800233c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800233e:	4b1b      	ldr	r3, [pc, #108]	; (80023ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002342:	4a1a      	ldr	r2, [pc, #104]	; (80023ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002348:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002350:	d10b      	bne.n	800236a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b80      	cmp	r3, #128	; 0x80
 8002356:	d913      	bls.n	8002380 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2ba0      	cmp	r3, #160	; 0xa0
 800235c:	d902      	bls.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800235e:	2302      	movs	r3, #2
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	e00d      	b.n	8002380 <RCC_SetFlashLatencyFromMSIRange+0x80>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80023dc:	2301      	movs	r3, #1
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	e00a      	b.n	80023f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
=======
 8002364:	2301      	movs	r3, #1
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	e00a      	b.n	8002380 <RCC_SetFlashLatencyFromMSIRange+0x80>
>>>>>>> Stashed changes
=======
 8002364:	2301      	movs	r3, #1
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	e00a      	b.n	8002380 <RCC_SetFlashLatencyFromMSIRange+0x80>
>>>>>>> Stashed changes
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b7f      	cmp	r3, #127	; 0x7f
 80023e6:	d902      	bls.n	80023ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80023e8:	2302      	movs	r3, #2
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	e004      	b.n	80023f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
=======
=======
>>>>>>> Stashed changes
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b7f      	cmp	r3, #127	; 0x7f
 800236e:	d902      	bls.n	8002376 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002370:	2302      	movs	r3, #2
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	e004      	b.n	8002380 <RCC_SetFlashLatencyFromMSIRange+0x80>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b70      	cmp	r3, #112	; 0x70
 80023f2:	d101      	bne.n	80023f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023f4:	2301      	movs	r3, #1
 80023f6:	613b      	str	r3, [r7, #16]
=======
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b70      	cmp	r3, #112	; 0x70
 800237a:	d101      	bne.n	8002380 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800237c:	2301      	movs	r3, #1
 800237e:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
=======
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b70      	cmp	r3, #112	; 0x70
 800237a:	d101      	bne.n	8002380 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800237c:	2301      	movs	r3, #1
 800237e:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f023 020f 	bic.w	r2, r3, #15
 8002400:	4909      	ldr	r1, [pc, #36]	; (8002428 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	600b      	str	r3, [r1, #0]
=======
=======
>>>>>>> Stashed changes
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f023 020f 	bic.w	r2, r3, #15
 8002388:	4909      	ldr	r1, [pc, #36]	; (80023b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	429a      	cmp	r2, r3
 8002414:	d001      	beq.n	800241a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	40022000 	.word	0x40022000

0800242c <RCC_GetSysClockFreqFromPLLSource>:
=======
=======
>>>>>>> Stashed changes
 8002390:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 030f 	and.w	r3, r3, #15
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	429a      	cmp	r2, r3
 800239c:	d001      	beq.n	80023a2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40022000 	.word	0x40022000

080023b4 <RCC_GetSysClockFreqFromPLLSource>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002436:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	2b01      	cmp	r3, #1
 8002440:	d118      	bne.n	8002474 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002442:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d107      	bne.n	800245e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800244e:	4b27      	ldr	r3, [pc, #156]	; (80024ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	e005      	b.n	800246a <RCC_GetSysClockFreqFromPLLSource+0x3e>
=======
=======
>>>>>>> Stashed changes
 80023b4:	b480      	push	{r7}
 80023b6:	b087      	sub	sp, #28
 80023b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80023be:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d118      	bne.n	80023fc <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023ca:	4b2a      	ldr	r3, [pc, #168]	; (8002474 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d107      	bne.n	80023e6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023d6:	4b27      	ldr	r3, [pc, #156]	; (8002474 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80023d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	e005      	b.n	80023f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800245e:	4b23      	ldr	r3, [pc, #140]	; (80024ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	091b      	lsrs	r3, r3, #4
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800246a:	4a21      	ldr	r2, [pc, #132]	; (80024f0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002472:	617b      	str	r3, [r7, #20]
=======
 80023e6:	4b23      	ldr	r3, [pc, #140]	; (8002474 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
=======
 80023e6:	4b23      	ldr	r3, [pc, #140]	; (8002474 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
>>>>>>> Stashed changes
 80023f2:	4a21      	ldr	r2, [pc, #132]	; (8002478 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fa:	617b      	str	r3, [r7, #20]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002474:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d002      	beq.n	800248a <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8002484:	2b03      	cmp	r3, #3
 8002486:	d003      	beq.n	8002490 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002488:	e005      	b.n	8002496 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800248a:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800248c:	613b      	str	r3, [r7, #16]
    break;
 800248e:	e005      	b.n	800249c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002490:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002492:	613b      	str	r3, [r7, #16]
    break;
 8002494:	e002      	b.n	800249c <RCC_GetSysClockFreqFromPLLSource+0x70>
=======
=======
>>>>>>> Stashed changes
 80023fc:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f003 0303 	and.w	r3, r3, #3
 8002404:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d002      	beq.n	8002412 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 800240c:	2b03      	cmp	r3, #3
 800240e:	d003      	beq.n	8002418 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002410:	e005      	b.n	800241e <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002412:	4b1a      	ldr	r3, [pc, #104]	; (800247c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002414:	613b      	str	r3, [r7, #16]
    break;
 8002416:	e005      	b.n	8002424 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002418:	4b19      	ldr	r3, [pc, #100]	; (8002480 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800241a:	613b      	str	r3, [r7, #16]
    break;
 800241c:	e002      	b.n	8002424 <RCC_GetSysClockFreqFromPLLSource+0x70>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	613b      	str	r3, [r7, #16]
    break;
 800249a:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800249c:	4b13      	ldr	r3, [pc, #76]	; (80024ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	3301      	adds	r3, #1
 80024a8:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024aa:	4b10      	ldr	r3, [pc, #64]	; (80024ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	fb02 f203 	mul.w	r2, r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c0:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	0e5b      	lsrs	r3, r3, #25
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	3301      	adds	r3, #1
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024da:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80024dc:	683b      	ldr	r3, [r7, #0]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	371c      	adds	r7, #28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000
 80024f0:	080f5a24 	.word	0x080f5a24
 80024f4:	00f42400 	.word	0x00f42400
 80024f8:	007a1200 	.word	0x007a1200

080024fc <HAL_SPI_Init>:
=======
=======
>>>>>>> Stashed changes
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	613b      	str	r3, [r7, #16]
    break;
 8002422:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002424:	4b13      	ldr	r3, [pc, #76]	; (8002474 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	3301      	adds	r3, #1
 8002430:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002432:	4b10      	ldr	r3, [pc, #64]	; (8002474 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	fb02 f203 	mul.w	r2, r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	fbb2 f3f3 	udiv	r3, r2, r3
 8002448:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	0e5b      	lsrs	r3, r3, #25
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	3301      	adds	r3, #1
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002462:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002464:	683b      	ldr	r3, [r7, #0]
}
 8002466:	4618      	mov	r0, r3
 8002468:	371c      	adds	r7, #28
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000
 8002478:	0816e744 	.word	0x0816e744
 800247c:	00f42400 	.word	0x00f42400
 8002480:	007a1200 	.word	0x007a1200

08002484 <HAL_SPI_Init>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
=======
=======
>>>>>>> Stashed changes
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e07c      	b.n	8002608 <HAL_SPI_Init+0x10c>
=======
=======
>>>>>>> Stashed changes
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e07c      	b.n	8002590 <HAL_SPI_Init+0x10c>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d106      	bne.n	800252e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
=======
=======
>>>>>>> Stashed changes
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d106      	bne.n	80024b6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7fe fbe5 	bl	8000cf8 <HAL_SPI_MspInit>
=======
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7fe fbe5 	bl	8000c80 <HAL_SPI_MspInit>
>>>>>>> Stashed changes
=======
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7fe fbe5 	bl	8000c80 <HAL_SPI_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2202      	movs	r2, #2
 8002532:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002544:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800254e:	d902      	bls.n	8002556 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	e002      	b.n	800255c <HAL_SPI_Init+0x60>
=======
=======
>>>>>>> Stashed changes
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2202      	movs	r2, #2
 80024ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024cc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024d6:	d902      	bls.n	80024de <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	e002      	b.n	80024e4 <HAL_SPI_Init+0x60>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800255a:	60fb      	str	r3, [r7, #12]
=======
 80024de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024e2:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
=======
 80024de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024e2:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002564:	d007      	beq.n	8002576 <HAL_SPI_Init+0x7a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800256e:	d002      	beq.n	8002576 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	629a      	str	r2, [r3, #40]	; 0x28
=======
=======
>>>>>>> Stashed changes
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80024ec:	d007      	beq.n	80024fe <HAL_SPI_Init+0x7a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024f6:	d002      	beq.n	80024fe <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	629a      	str	r2, [r3, #40]	; 0x28
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10b      	bne.n	8002596 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002586:	d903      	bls.n	8002590 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	631a      	str	r2, [r3, #48]	; 0x30
 800258e:	e002      	b.n	8002596 <HAL_SPI_Init+0x9a>
=======
=======
>>>>>>> Stashed changes
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10b      	bne.n	800251e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800250e:	d903      	bls.n	8002518 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	631a      	str	r2, [r3, #48]	; 0x30
 8002516:	e002      	b.n	800251e <HAL_SPI_Init+0x9a>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes
=======
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	ea42 0103 	orr.w	r1, r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]
=======
=======
>>>>>>> Stashed changes
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	ea42 0103 	orr.w	r1, r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	601a      	str	r2, [r3, #0]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	0c1b      	lsrs	r3, r3, #16
 80025d6:	f003 0204 	and.w	r2, r3, #4
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	ea42 0103 	orr.w	r1, r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	605a      	str	r2, [r3, #4]
=======
=======
>>>>>>> Stashed changes
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	0c1b      	lsrs	r3, r3, #16
 800255e:	f003 0204 	and.w	r2, r3, #4
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256c:	431a      	orrs	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	ea42 0103 	orr.w	r1, r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	430a      	orrs	r2, r1
 800257e:	605a      	str	r2, [r3, #4]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_SPI_Transmit>:
=======
=======
>>>>>>> Stashed changes
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_SPI_Transmit>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	4613      	mov	r3, r2
 800261e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	77fb      	strb	r3, [r7, #31]
=======
=======
>>>>>>> Stashed changes
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	4613      	mov	r3, r2
 80025a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	77fb      	strb	r3, [r7, #31]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_SPI_Transmit+0x22>
 800262e:	2302      	movs	r3, #2
 8002630:	e150      	b.n	80028d4 <HAL_SPI_Transmit+0x2c4>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800263a:	f7fe fd4f 	bl	80010dc <HAL_GetTick>
 800263e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d002      	beq.n	8002656 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002650:	2302      	movs	r3, #2
 8002652:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002654:	e135      	b.n	80028c2 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <HAL_SPI_Transmit+0x52>
 800265c:	88fb      	ldrh	r3, [r7, #6]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d102      	bne.n	8002668 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002666:	e12c      	b.n	80028c2 <HAL_SPI_Transmit+0x2b2>
=======
=======
>>>>>>> Stashed changes
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d101      	bne.n	80025ba <HAL_SPI_Transmit+0x22>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e150      	b.n	800285c <HAL_SPI_Transmit+0x2c4>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025c2:	f7fe fd4f 	bl	8001064 <HAL_GetTick>
 80025c6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d002      	beq.n	80025de <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80025d8:	2302      	movs	r3, #2
 80025da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025dc:	e135      	b.n	800284a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <HAL_SPI_Transmit+0x52>
 80025e4:	88fb      	ldrh	r3, [r7, #6]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d102      	bne.n	80025f0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025ee:	e12c      	b.n	800284a <HAL_SPI_Transmit+0x2b2>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2203      	movs	r2, #3
 800266c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	88fa      	ldrh	r2, [r7, #6]
 8002680:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	88fa      	ldrh	r2, [r7, #6]
 8002686:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026b2:	d107      	bne.n	80026c4 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026c2:	601a      	str	r2, [r3, #0]
=======
=======
>>>>>>> Stashed changes
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2203      	movs	r2, #3
 80025f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	88fa      	ldrh	r2, [r7, #6]
 8002608:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	88fa      	ldrh	r2, [r7, #6]
 800260e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800263a:	d107      	bne.n	800264c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800264a:	601a      	str	r2, [r3, #0]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ce:	2b40      	cmp	r3, #64	; 0x40
 80026d0:	d007      	beq.n	80026e2 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026e0:	601a      	str	r2, [r3, #0]
=======
=======
>>>>>>> Stashed changes
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002656:	2b40      	cmp	r3, #64	; 0x40
 8002658:	d007      	beq.n	800266a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002668:	601a      	str	r2, [r3, #0]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80026ea:	d94b      	bls.n	8002784 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <HAL_SPI_Transmit+0xea>
 80026f4:	8afb      	ldrh	r3, [r7, #22]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d13e      	bne.n	8002778 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fe:	881a      	ldrh	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270a:	1c9a      	adds	r2, r3, #2
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002714:	b29b      	uxth	r3, r3
 8002716:	3b01      	subs	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800271e:	e02b      	b.n	8002778 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b02      	cmp	r3, #2
 800272c:	d112      	bne.n	8002754 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002732:	881a      	ldrh	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273e:	1c9a      	adds	r2, r3, #2
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002748:	b29b      	uxth	r3, r3
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002752:	e011      	b.n	8002778 <HAL_SPI_Transmit+0x168>
=======
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002672:	d94b      	bls.n	800270c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <HAL_SPI_Transmit+0xea>
 800267c:	8afb      	ldrh	r3, [r7, #22]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d13e      	bne.n	8002700 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002686:	881a      	ldrh	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	1c9a      	adds	r2, r3, #2
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800269c:	b29b      	uxth	r3, r3
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026a6:	e02b      	b.n	8002700 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d112      	bne.n	80026dc <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	881a      	ldrh	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	1c9a      	adds	r2, r3, #2
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
=======
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002672:	d94b      	bls.n	800270c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <HAL_SPI_Transmit+0xea>
 800267c:	8afb      	ldrh	r3, [r7, #22]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d13e      	bne.n	8002700 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002686:	881a      	ldrh	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	1c9a      	adds	r2, r3, #2
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800269c:	b29b      	uxth	r3, r3
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026a6:	e02b      	b.n	8002700 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d112      	bne.n	80026dc <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	881a      	ldrh	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	1c9a      	adds	r2, r3, #2
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
>>>>>>> Stashed changes
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026da:	e011      	b.n	8002700 <HAL_SPI_Transmit+0x168>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002754:	f7fe fcc2 	bl	80010dc <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d803      	bhi.n	800276c <HAL_SPI_Transmit+0x15c>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276a:	d102      	bne.n	8002772 <HAL_SPI_Transmit+0x162>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d102      	bne.n	8002778 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002776:	e0a4      	b.n	80028c2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800277c:	b29b      	uxth	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1ce      	bne.n	8002720 <HAL_SPI_Transmit+0x110>
 8002782:	e07c      	b.n	800287e <HAL_SPI_Transmit+0x26e>
=======
=======
>>>>>>> Stashed changes
 80026dc:	f7fe fcc2 	bl	8001064 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d803      	bhi.n	80026f4 <HAL_SPI_Transmit+0x15c>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f2:	d102      	bne.n	80026fa <HAL_SPI_Transmit+0x162>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d102      	bne.n	8002700 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026fe:	e0a4      	b.n	800284a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002704:	b29b      	uxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1ce      	bne.n	80026a8 <HAL_SPI_Transmit+0x110>
 800270a:	e07c      	b.n	8002806 <HAL_SPI_Transmit+0x26e>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <HAL_SPI_Transmit+0x182>
 800278c:	8afb      	ldrh	r3, [r7, #22]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d170      	bne.n	8002874 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	d912      	bls.n	80027c2 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a0:	881a      	ldrh	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ac:	1c9a      	adds	r2, r3, #2
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	3b02      	subs	r3, #2
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027c0:	e058      	b.n	8002874 <HAL_SPI_Transmit+0x264>
=======
=======
>>>>>>> Stashed changes
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <HAL_SPI_Transmit+0x182>
 8002714:	8afb      	ldrh	r3, [r7, #22]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d170      	bne.n	80027fc <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	d912      	bls.n	800274a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002728:	881a      	ldrh	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002734:	1c9a      	adds	r2, r3, #2
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b02      	subs	r3, #2
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002748:	e058      	b.n	80027fc <HAL_SPI_Transmit+0x264>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	330c      	adds	r3, #12
 80027cc:	7812      	ldrb	r2, [r2, #0]
 80027ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80027e8:	e044      	b.n	8002874 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d12b      	bne.n	8002850 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d912      	bls.n	8002828 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002806:	881a      	ldrh	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002812:	1c9a      	adds	r2, r3, #2
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800281c:	b29b      	uxth	r3, r3
 800281e:	3b02      	subs	r3, #2
 8002820:	b29a      	uxth	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002826:	e025      	b.n	8002874 <HAL_SPI_Transmit+0x264>
=======
=======
>>>>>>> Stashed changes
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	330c      	adds	r3, #12
 8002754:	7812      	ldrb	r2, [r2, #0]
 8002756:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002766:	b29b      	uxth	r3, r3
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002770:	e044      	b.n	80027fc <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b02      	cmp	r3, #2
 800277e:	d12b      	bne.n	80027d8 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002784:	b29b      	uxth	r3, r3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d912      	bls.n	80027b0 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278e:	881a      	ldrh	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279a:	1c9a      	adds	r2, r3, #2
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	3b02      	subs	r3, #2
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027ae:	e025      	b.n	80027fc <HAL_SPI_Transmit+0x264>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	330c      	adds	r3, #12
 8002832:	7812      	ldrb	r2, [r2, #0]
 8002834:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800284e:	e011      	b.n	8002874 <HAL_SPI_Transmit+0x264>
=======
=======
>>>>>>> Stashed changes
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	330c      	adds	r3, #12
 80027ba:	7812      	ldrb	r2, [r2, #0]
 80027bc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027d6:	e011      	b.n	80027fc <HAL_SPI_Transmit+0x264>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002850:	f7fe fc44 	bl	80010dc <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d803      	bhi.n	8002868 <HAL_SPI_Transmit+0x258>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002866:	d102      	bne.n	800286e <HAL_SPI_Transmit+0x25e>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d102      	bne.n	8002874 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002872:	e026      	b.n	80028c2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002878:	b29b      	uxth	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1b5      	bne.n	80027ea <HAL_SPI_Transmit+0x1da>
=======
 80027d8:	f7fe fc44 	bl	8001064 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d803      	bhi.n	80027f0 <HAL_SPI_Transmit+0x258>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ee:	d102      	bne.n	80027f6 <HAL_SPI_Transmit+0x25e>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d102      	bne.n	80027fc <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027fa:	e026      	b.n	800284a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
=======
 80027d8:	f7fe fc44 	bl	8001064 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d803      	bhi.n	80027f0 <HAL_SPI_Transmit+0x258>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ee:	d102      	bne.n	80027f6 <HAL_SPI_Transmit+0x25e>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d102      	bne.n	80027fc <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027fa:	e026      	b.n	800284a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
>>>>>>> Stashed changes
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002800:	b29b      	uxth	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1b5      	bne.n	8002772 <HAL_SPI_Transmit+0x1da>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	6839      	ldr	r1, [r7, #0]
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 fb14 	bl	8002eb0 <SPI_EndRxTxTransaction>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2220      	movs	r2, #32
 8002892:	661a      	str	r2, [r3, #96]	; 0x60
=======
=======
>>>>>>> Stashed changes
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	6839      	ldr	r1, [r7, #0]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fb14 	bl	8002e38 <SPI_EndRxTxTransaction>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2220      	movs	r2, #32
 800281a:	661a      	str	r2, [r3, #96]	; 0x60
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800289c:	2300      	movs	r3, #0
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	77fb      	strb	r3, [r7, #31]
 80028be:	e000      	b.n	80028c2 <HAL_SPI_Transmit+0x2b2>
  }

error:
 80028c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80028d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3720      	adds	r7, #32
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_SPI_TransmitReceive>:
=======
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10a      	bne.n	800283a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002824:	2300      	movs	r3, #0
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	77fb      	strb	r3, [r7, #31]
 8002846:	e000      	b.n	800284a <HAL_SPI_Transmit+0x2b2>
  }

error:
 8002848:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
=======
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10a      	bne.n	800283a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002824:	2300      	movs	r3, #0
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	77fb      	strb	r3, [r7, #31]
 8002846:	e000      	b.n	800284a <HAL_SPI_Transmit+0x2b2>
  }

error:
 8002848:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
>>>>>>> Stashed changes
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800285a:	7ffb      	ldrb	r3, [r7, #31]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3720      	adds	r7, #32
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_SPI_TransmitReceive>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	; 0x28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	807b      	strh	r3, [r7, #2]
=======
=======
>>>>>>> Stashed changes
 8002864:	b580      	push	{r7, lr}
 8002866:	b08a      	sub	sp, #40	; 0x28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
 8002870:	807b      	strh	r3, [r7, #2]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80028ea:	2301      	movs	r3, #1
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
=======
=======
>>>>>>> Stashed changes
 8002872:	2301      	movs	r3, #1
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_SPI_TransmitReceive+0x26>
 80028fe:	2302      	movs	r3, #2
 8002900:	e1fb      	b.n	8002cfa <HAL_SPI_TransmitReceive+0x41e>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800290a:	f7fe fbe7 	bl	80010dc <HAL_GetTick>
 800290e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002916:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800291e:	887b      	ldrh	r3, [r7, #2]
 8002920:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002922:	887b      	ldrh	r3, [r7, #2]
 8002924:	823b      	strh	r3, [r7, #16]
=======
=======
>>>>>>> Stashed changes
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_SPI_TransmitReceive+0x26>
 8002886:	2302      	movs	r3, #2
 8002888:	e1fb      	b.n	8002c82 <HAL_SPI_TransmitReceive+0x41e>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002892:	f7fe fbe7 	bl	8001064 <HAL_GetTick>
 8002896:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800289e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80028a6:	887b      	ldrh	r3, [r7, #2]
 80028a8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80028aa:	887b      	ldrh	r3, [r7, #2]
 80028ac:	823b      	strh	r3, [r7, #16]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002926:	7efb      	ldrb	r3, [r7, #27]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d00e      	beq.n	800294a <HAL_SPI_TransmitReceive+0x6e>
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002932:	d106      	bne.n	8002942 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d102      	bne.n	8002942 <HAL_SPI_TransmitReceive+0x66>
 800293c:	7efb      	ldrb	r3, [r7, #27]
 800293e:	2b04      	cmp	r3, #4
 8002940:	d003      	beq.n	800294a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002942:	2302      	movs	r3, #2
 8002944:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002948:	e1cd      	b.n	8002ce6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_SPI_TransmitReceive+0x80>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <HAL_SPI_TransmitReceive+0x80>
 8002956:	887b      	ldrh	r3, [r7, #2]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d103      	bne.n	8002964 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002962:	e1c0      	b.n	8002ce6 <HAL_SPI_TransmitReceive+0x40a>
=======
 80028ae:	7efb      	ldrb	r3, [r7, #27]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d00e      	beq.n	80028d2 <HAL_SPI_TransmitReceive+0x6e>
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028ba:	d106      	bne.n	80028ca <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d102      	bne.n	80028ca <HAL_SPI_TransmitReceive+0x66>
 80028c4:	7efb      	ldrb	r3, [r7, #27]
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d003      	beq.n	80028d2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
 80028cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80028d0:	e1cd      	b.n	8002c6e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_SPI_TransmitReceive+0x80>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <HAL_SPI_TransmitReceive+0x80>
 80028de:	887b      	ldrh	r3, [r7, #2]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d103      	bne.n	80028ec <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80028ea:	e1c0      	b.n	8002c6e <HAL_SPI_TransmitReceive+0x40a>
>>>>>>> Stashed changes
=======
 80028ae:	7efb      	ldrb	r3, [r7, #27]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d00e      	beq.n	80028d2 <HAL_SPI_TransmitReceive+0x6e>
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028ba:	d106      	bne.n	80028ca <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d102      	bne.n	80028ca <HAL_SPI_TransmitReceive+0x66>
 80028c4:	7efb      	ldrb	r3, [r7, #27]
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d003      	beq.n	80028d2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
 80028cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80028d0:	e1cd      	b.n	8002c6e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_SPI_TransmitReceive+0x80>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <HAL_SPI_TransmitReceive+0x80>
 80028de:	887b      	ldrh	r3, [r7, #2]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d103      	bne.n	80028ec <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80028ea:	e1c0      	b.n	8002c6e <HAL_SPI_TransmitReceive+0x40a>
>>>>>>> Stashed changes
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b04      	cmp	r3, #4
 800296e:	d003      	beq.n	8002978 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2205      	movs	r2, #5
 8002974:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
=======
=======
>>>>>>> Stashed changes
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d003      	beq.n	8002900 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2205      	movs	r2, #5
 80028fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	887a      	ldrh	r2, [r7, #2]
 8002988:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	887a      	ldrh	r2, [r7, #2]
 8002990:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	887a      	ldrh	r2, [r7, #2]
 800299e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	887a      	ldrh	r2, [r7, #2]
 80029a4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	651a      	str	r2, [r3, #80]	; 0x50
=======
=======
>>>>>>> Stashed changes
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	887a      	ldrh	r2, [r7, #2]
 8002910:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	887a      	ldrh	r2, [r7, #2]
 8002918:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	887a      	ldrh	r2, [r7, #2]
 8002926:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	887a      	ldrh	r2, [r7, #2]
 800292c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	651a      	str	r2, [r3, #80]	; 0x50
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029ba:	d802      	bhi.n	80029c2 <HAL_SPI_TransmitReceive+0xe6>
 80029bc:	8a3b      	ldrh	r3, [r7, #16]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d908      	bls.n	80029d4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	e007      	b.n	80029e4 <HAL_SPI_TransmitReceive+0x108>
=======
=======
>>>>>>> Stashed changes
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002942:	d802      	bhi.n	800294a <HAL_SPI_TransmitReceive+0xe6>
 8002944:	8a3b      	ldrh	r3, [r7, #16]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d908      	bls.n	800295c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	e007      	b.n	800296c <HAL_SPI_TransmitReceive+0x108>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029e2:	605a      	str	r2, [r3, #4]
=======
=======
>>>>>>> Stashed changes
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800296a:	605a      	str	r2, [r3, #4]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ee:	2b40      	cmp	r3, #64	; 0x40
 80029f0:	d007      	beq.n	8002a02 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a00:	601a      	str	r2, [r3, #0]
=======
=======
>>>>>>> Stashed changes
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002976:	2b40      	cmp	r3, #64	; 0x40
 8002978:	d007      	beq.n	800298a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002988:	601a      	str	r2, [r3, #0]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a0a:	d97c      	bls.n	8002b06 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <HAL_SPI_TransmitReceive+0x13e>
 8002a14:	8a7b      	ldrh	r3, [r7, #18]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d169      	bne.n	8002aee <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1e:	881a      	ldrh	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2a:	1c9a      	adds	r2, r3, #2
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a3e:	e056      	b.n	8002aee <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d11b      	bne.n	8002a86 <HAL_SPI_TransmitReceive+0x1aa>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d016      	beq.n	8002a86 <HAL_SPI_TransmitReceive+0x1aa>
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d113      	bne.n	8002a86 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a62:	881a      	ldrh	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	1c9a      	adds	r2, r3, #2
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
=======
=======
>>>>>>> Stashed changes
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002992:	d97c      	bls.n	8002a8e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <HAL_SPI_TransmitReceive+0x13e>
 800299c:	8a7b      	ldrh	r3, [r7, #18]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d169      	bne.n	8002a76 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a6:	881a      	ldrh	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b2:	1c9a      	adds	r2, r3, #2
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029bc:	b29b      	uxth	r3, r3
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029c6:	e056      	b.n	8002a76 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d11b      	bne.n	8002a0e <HAL_SPI_TransmitReceive+0x1aa>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d016      	beq.n	8002a0e <HAL_SPI_TransmitReceive+0x1aa>
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d113      	bne.n	8002a0e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	881a      	ldrh	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f6:	1c9a      	adds	r2, r3, #2
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d11c      	bne.n	8002ace <HAL_SPI_TransmitReceive+0x1f2>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d016      	beq.n	8002ace <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	b292      	uxth	r2, r2
 8002aac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	1c9a      	adds	r2, r3, #2
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002aca:	2301      	movs	r3, #1
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ace:	f7fe fb05 	bl	80010dc <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d807      	bhi.n	8002aee <HAL_SPI_TransmitReceive+0x212>
 8002ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae4:	d003      	beq.n	8002aee <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002aec:	e0fb      	b.n	8002ce6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1a3      	bne.n	8002a40 <HAL_SPI_TransmitReceive+0x164>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d19d      	bne.n	8002a40 <HAL_SPI_TransmitReceive+0x164>
 8002b04:	e0df      	b.n	8002cc6 <HAL_SPI_TransmitReceive+0x3ea>
=======
=======
>>>>>>> Stashed changes
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d11c      	bne.n	8002a56 <HAL_SPI_TransmitReceive+0x1f2>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d016      	beq.n	8002a56 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	b292      	uxth	r2, r2
 8002a34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	1c9a      	adds	r2, r3, #2
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a52:	2301      	movs	r3, #1
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a56:	f7fe fb05 	bl	8001064 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d807      	bhi.n	8002a76 <HAL_SPI_TransmitReceive+0x212>
 8002a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d003      	beq.n	8002a76 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002a74:	e0fb      	b.n	8002c6e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1a3      	bne.n	80029c8 <HAL_SPI_TransmitReceive+0x164>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d19d      	bne.n	80029c8 <HAL_SPI_TransmitReceive+0x164>
 8002a8c:	e0df      	b.n	8002c4e <HAL_SPI_TransmitReceive+0x3ea>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_SPI_TransmitReceive+0x23a>
 8002b0e:	8a7b      	ldrh	r3, [r7, #18]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	f040 80cb 	bne.w	8002cac <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d912      	bls.n	8002b46 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	881a      	ldrh	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b30:	1c9a      	adds	r2, r3, #2
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	3b02      	subs	r3, #2
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b44:	e0b2      	b.n	8002cac <HAL_SPI_TransmitReceive+0x3d0>
=======
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_SPI_TransmitReceive+0x23a>
 8002a96:	8a7b      	ldrh	r3, [r7, #18]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	f040 80cb 	bne.w	8002c34 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
=======
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_SPI_TransmitReceive+0x23a>
 8002a96:	8a7b      	ldrh	r3, [r7, #18]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	f040 80cb 	bne.w	8002c34 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
>>>>>>> Stashed changes
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d912      	bls.n	8002ace <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aac:	881a      	ldrh	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab8:	1c9a      	adds	r2, r3, #2
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	3b02      	subs	r3, #2
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002acc:	e0b2      	b.n	8002c34 <HAL_SPI_TransmitReceive+0x3d0>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	330c      	adds	r3, #12
 8002b50:	7812      	ldrb	r2, [r2, #0]
 8002b52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b6c:	e09e      	b.n	8002cac <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d134      	bne.n	8002be6 <HAL_SPI_TransmitReceive+0x30a>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d02f      	beq.n	8002be6 <HAL_SPI_TransmitReceive+0x30a>
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d12c      	bne.n	8002be6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d912      	bls.n	8002bbc <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9a:	881a      	ldrh	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	1c9a      	adds	r2, r3, #2
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b02      	subs	r3, #2
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bba:	e012      	b.n	8002be2 <HAL_SPI_TransmitReceive+0x306>
=======
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	330c      	adds	r3, #12
 8002ad8:	7812      	ldrb	r2, [r2, #0]
 8002ada:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002af4:	e09e      	b.n	8002c34 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
=======
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	330c      	adds	r3, #12
 8002ad8:	7812      	ldrb	r2, [r2, #0]
 8002ada:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002af4:	e09e      	b.n	8002c34 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
>>>>>>> Stashed changes
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d134      	bne.n	8002b6e <HAL_SPI_TransmitReceive+0x30a>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d02f      	beq.n	8002b6e <HAL_SPI_TransmitReceive+0x30a>
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d12c      	bne.n	8002b6e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d912      	bls.n	8002b44 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b22:	881a      	ldrh	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2e:	1c9a      	adds	r2, r3, #2
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3b02      	subs	r3, #2
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b42:	e012      	b.n	8002b6a <HAL_SPI_TransmitReceive+0x306>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	330c      	adds	r3, #12
 8002bc6:	7812      	ldrb	r2, [r2, #0]
 8002bc8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
=======
=======
>>>>>>> Stashed changes
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	330c      	adds	r3, #12
 8002b4e:	7812      	ldrb	r2, [r2, #0]
 8002b50:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d148      	bne.n	8002c86 <HAL_SPI_TransmitReceive+0x3aa>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d042      	beq.n	8002c86 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d923      	bls.n	8002c54 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	b292      	uxth	r2, r2
 8002c18:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	1c9a      	adds	r2, r3, #2
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	3b02      	subs	r3, #2
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d81f      	bhi.n	8002c82 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	e016      	b.n	8002c82 <HAL_SPI_TransmitReceive+0x3a6>
=======
=======
>>>>>>> Stashed changes
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d148      	bne.n	8002c0e <HAL_SPI_TransmitReceive+0x3aa>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d042      	beq.n	8002c0e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d923      	bls.n	8002bdc <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	b292      	uxth	r2, r2
 8002ba0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	1c9a      	adds	r2, r3, #2
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b02      	subs	r3, #2
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d81f      	bhi.n	8002c0a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	e016      	b.n	8002c0a <HAL_SPI_TransmitReceive+0x3a6>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f103 020c 	add.w	r2, r3, #12
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	7812      	ldrb	r2, [r2, #0]
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c82:	2301      	movs	r3, #1
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c86:	f7fe fa29 	bl	80010dc <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d803      	bhi.n	8002c9e <HAL_SPI_TransmitReceive+0x3c2>
 8002c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9c:	d102      	bne.n	8002ca4 <HAL_SPI_TransmitReceive+0x3c8>
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d103      	bne.n	8002cac <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002caa:	e01c      	b.n	8002ce6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f47f af5b 	bne.w	8002b6e <HAL_SPI_TransmitReceive+0x292>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f47f af54 	bne.w	8002b6e <HAL_SPI_TransmitReceive+0x292>
=======
=======
>>>>>>> Stashed changes
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f103 020c 	add.w	r2, r3, #12
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	7812      	ldrb	r2, [r2, #0]
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c0e:	f7fe fa29 	bl	8001064 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d803      	bhi.n	8002c26 <HAL_SPI_TransmitReceive+0x3c2>
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c24:	d102      	bne.n	8002c2c <HAL_SPI_TransmitReceive+0x3c8>
 8002c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d103      	bne.n	8002c34 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002c32:	e01c      	b.n	8002c6e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f47f af5b 	bne.w	8002af6 <HAL_SPI_TransmitReceive+0x292>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f47f af54 	bne.w	8002af6 <HAL_SPI_TransmitReceive+0x292>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f8f0 	bl	8002eb0 <SPI_EndRxTxTransaction>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d006      	beq.n	8002ce4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	661a      	str	r2, [r3, #96]	; 0x60
 8002ce2:	e000      	b.n	8002ce6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002ce4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002cf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3728      	adds	r7, #40	; 0x28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <SPI_WaitFlagStateUntilTimeout>:
=======
 8002c4e:	69fa      	ldr	r2, [r7, #28]
 8002c50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f8f0 	bl	8002e38 <SPI_EndRxTxTransaction>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d006      	beq.n	8002c6c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
=======
 8002c4e:	69fa      	ldr	r2, [r7, #28]
 8002c50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f8f0 	bl	8002e38 <SPI_EndRxTxTransaction>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d006      	beq.n	8002c6c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
>>>>>>> Stashed changes
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2220      	movs	r2, #32
 8002c68:	661a      	str	r2, [r3, #96]	; 0x60
 8002c6a:	e000      	b.n	8002c6e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002c6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002c7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3728      	adds	r7, #40	; 0x28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <SPI_WaitFlagStateUntilTimeout>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b084      	sub	sp, #16
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	603b      	str	r3, [r7, #0]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d12:	e04c      	b.n	8002dae <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1a:	d048      	beq.n	8002dae <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002d1c:	f7fe f9de 	bl	80010dc <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d902      	bls.n	8002d32 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d13d      	bne.n	8002dae <SPI_WaitFlagStateUntilTimeout+0xac>
=======
=======
>>>>>>> Stashed changes
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	60f8      	str	r0, [r7, #12]
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	603b      	str	r3, [r7, #0]
 8002c96:	4613      	mov	r3, r2
 8002c98:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c9a:	e04c      	b.n	8002d36 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca2:	d048      	beq.n	8002d36 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002ca4:	f7fe f9de 	bl	8001064 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d902      	bls.n	8002cba <SPI_WaitFlagStateUntilTimeout+0x30>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d13d      	bne.n	8002d36 <SPI_WaitFlagStateUntilTimeout+0xac>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d4a:	d111      	bne.n	8002d70 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d54:	d004      	beq.n	8002d60 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5e:	d107      	bne.n	8002d70 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d6e:	601a      	str	r2, [r3, #0]
=======
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cd2:	d111      	bne.n	8002cf8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cdc:	d004      	beq.n	8002ce8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce6:	d107      	bne.n	8002cf8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
=======
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cd2:	d111      	bne.n	8002cf8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cdc:	d004      	beq.n	8002ce8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce6:	d107      	bne.n	8002cf8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
>>>>>>> Stashed changes
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cf6:	601a      	str	r2, [r3, #0]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d78:	d10f      	bne.n	8002d9a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e00f      	b.n	8002dce <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4013      	ands	r3, r2
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	bf0c      	ite	eq
 8002dbe:	2301      	moveq	r3, #1
 8002dc0:	2300      	movne	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d1a3      	bne.n	8002d14 <SPI_WaitFlagStateUntilTimeout+0x12>
=======
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d00:	d10f      	bne.n	8002d22 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
=======
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d00:	d10f      	bne.n	8002d22 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
>>>>>>> Stashed changes
 8002d32:	2303      	movs	r3, #3
 8002d34:	e00f      	b.n	8002d56 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	bf0c      	ite	eq
 8002d46:	2301      	moveq	r3, #1
 8002d48:	2300      	movne	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d1a3      	bne.n	8002c9c <SPI_WaitFlagStateUntilTimeout+0x12>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
      }
    }
  }

  return HAL_OK;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <SPI_WaitFifoStateUntilTimeout>:
=======
=======
>>>>>>> Stashed changes
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <SPI_WaitFifoStateUntilTimeout>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002de4:	e057      	b.n	8002e96 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002dec:	d106      	bne.n	8002dfc <SPI_WaitFifoStateUntilTimeout+0x26>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d103      	bne.n	8002dfc <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	330c      	adds	r3, #12
 8002dfa:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e02:	d048      	beq.n	8002e96 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002e04:	f7fe f96a 	bl	80010dc <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d902      	bls.n	8002e1a <SPI_WaitFifoStateUntilTimeout+0x44>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d13d      	bne.n	8002e96 <SPI_WaitFifoStateUntilTimeout+0xc0>
=======
=======
>>>>>>> Stashed changes
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b084      	sub	sp, #16
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
 8002d6a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002d6c:	e057      	b.n	8002e1e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002d74:	d106      	bne.n	8002d84 <SPI_WaitFifoStateUntilTimeout+0x26>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d103      	bne.n	8002d84 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	330c      	adds	r3, #12
 8002d82:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8a:	d048      	beq.n	8002e1e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002d8c:	f7fe f96a 	bl	8001064 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d902      	bls.n	8002da2 <SPI_WaitFifoStateUntilTimeout+0x44>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d13d      	bne.n	8002e1e <SPI_WaitFifoStateUntilTimeout+0xc0>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e32:	d111      	bne.n	8002e58 <SPI_WaitFifoStateUntilTimeout+0x82>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e3c:	d004      	beq.n	8002e48 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e46:	d107      	bne.n	8002e58 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e56:	601a      	str	r2, [r3, #0]
=======
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002db0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dba:	d111      	bne.n	8002de0 <SPI_WaitFifoStateUntilTimeout+0x82>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dc4:	d004      	beq.n	8002dd0 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dce:	d107      	bne.n	8002de0 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
=======
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002db0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dba:	d111      	bne.n	8002de0 <SPI_WaitFifoStateUntilTimeout+0x82>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dc4:	d004      	beq.n	8002dd0 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dce:	d107      	bne.n	8002de0 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
>>>>>>> Stashed changes
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dde:	601a      	str	r2, [r3, #0]
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e60:	d10f      	bne.n	8002e82 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e008      	b.n	8002ea8 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d19f      	bne.n	8002de6 <SPI_WaitFifoStateUntilTimeout+0x10>
=======
=======
>>>>>>> Stashed changes
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de8:	d10f      	bne.n	8002e0a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e008      	b.n	8002e30 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4013      	ands	r3, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d19f      	bne.n	8002d6e <SPI_WaitFifoStateUntilTimeout+0x10>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
      }
    }
  }

  return HAL_OK;
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <SPI_EndRxTxTransaction>:
=======
 8002e2e:	2300      	movs	r3, #0
}
=======
 8002e2e:	2300      	movs	r3, #0
}
>>>>>>> Stashed changes
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <SPI_EndRxTxTransaction>:
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f7ff ff84 	bl	8002dd6 <SPI_WaitFifoStateUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d007      	beq.n	8002ee4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed8:	f043 0220 	orr.w	r2, r3, #32
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e027      	b.n	8002f34 <SPI_EndRxTxTransaction+0x84>
=======
=======
>>>>>>> Stashed changes
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af02      	add	r7, sp, #8
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f7ff ff84 	bl	8002d5e <SPI_WaitFifoStateUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d007      	beq.n	8002e6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e60:	f043 0220 	orr.w	r2, r3, #32
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e027      	b.n	8002ebc <SPI_EndRxTxTransaction+0x84>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2200      	movs	r2, #0
 8002eec:	2180      	movs	r1, #128	; 0x80
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f7ff ff07 	bl	8002d02 <SPI_WaitFlagStateUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d007      	beq.n	8002f0a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002efe:	f043 0220 	orr.w	r2, r3, #32
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e014      	b.n	8002f34 <SPI_EndRxTxTransaction+0x84>
=======
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2200      	movs	r2, #0
 8002e74:	2180      	movs	r1, #128	; 0x80
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f7ff ff07 	bl	8002c8a <SPI_WaitFlagStateUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d007      	beq.n	8002e92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
=======
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2200      	movs	r2, #0
 8002e74:	2180      	movs	r1, #128	; 0x80
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f7ff ff07 	bl	8002c8a <SPI_WaitFlagStateUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d007      	beq.n	8002e92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
>>>>>>> Stashed changes
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e86:	f043 0220 	orr.w	r2, r3, #32
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e014      	b.n	8002ebc <SPI_EndRxTxTransaction+0x84>
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f7ff ff5d 	bl	8002dd6 <SPI_WaitFifoStateUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d007      	beq.n	8002f32 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f26:	f043 0220 	orr.w	r2, r3, #32
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e000      	b.n	8002f34 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <__errno>:
 8002f3c:	4b01      	ldr	r3, [pc, #4]	; (8002f44 <__errno+0x8>)
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	2000000c 	.word	0x2000000c

08002f48 <__libc_init_array>:
 8002f48:	b570      	push	{r4, r5, r6, lr}
 8002f4a:	4e0d      	ldr	r6, [pc, #52]	; (8002f80 <__libc_init_array+0x38>)
 8002f4c:	4c0d      	ldr	r4, [pc, #52]	; (8002f84 <__libc_init_array+0x3c>)
 8002f4e:	1ba4      	subs	r4, r4, r6
 8002f50:	10a4      	asrs	r4, r4, #2
 8002f52:	2500      	movs	r5, #0
 8002f54:	42a5      	cmp	r5, r4
 8002f56:	d109      	bne.n	8002f6c <__libc_init_array+0x24>
 8002f58:	4e0b      	ldr	r6, [pc, #44]	; (8002f88 <__libc_init_array+0x40>)
 8002f5a:	4c0c      	ldr	r4, [pc, #48]	; (8002f8c <__libc_init_array+0x44>)
 8002f5c:	f000 ff68 	bl	8003e30 <_init>
 8002f60:	1ba4      	subs	r4, r4, r6
 8002f62:	10a4      	asrs	r4, r4, #2
 8002f64:	2500      	movs	r5, #0
 8002f66:	42a5      	cmp	r5, r4
 8002f68:	d105      	bne.n	8002f76 <__libc_init_array+0x2e>
 8002f6a:	bd70      	pop	{r4, r5, r6, pc}
 8002f6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f70:	4798      	blx	r3
 8002f72:	3501      	adds	r5, #1
 8002f74:	e7ee      	b.n	8002f54 <__libc_init_array+0xc>
 8002f76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f7a:	4798      	blx	r3
 8002f7c:	3501      	adds	r5, #1
 8002f7e:	e7f2      	b.n	8002f66 <__libc_init_array+0x1e>
 8002f80:	080f5aec 	.word	0x080f5aec
 8002f84:	080f5aec 	.word	0x080f5aec
 8002f88:	080f5aec 	.word	0x080f5aec
 8002f8c:	080f5af0 	.word	0x080f5af0

08002f90 <memset>:
 8002f90:	4402      	add	r2, r0
 8002f92:	4603      	mov	r3, r0
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d100      	bne.n	8002f9a <memset+0xa>
 8002f98:	4770      	bx	lr
 8002f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f9e:	e7f9      	b.n	8002f94 <memset+0x4>

08002fa0 <_free_r>:
 8002fa0:	b538      	push	{r3, r4, r5, lr}
 8002fa2:	4605      	mov	r5, r0
 8002fa4:	2900      	cmp	r1, #0
 8002fa6:	d045      	beq.n	8003034 <_free_r+0x94>
 8002fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fac:	1f0c      	subs	r4, r1, #4
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	bfb8      	it	lt
 8002fb2:	18e4      	addlt	r4, r4, r3
 8002fb4:	f000 fbc6 	bl	8003744 <__malloc_lock>
 8002fb8:	4a1f      	ldr	r2, [pc, #124]	; (8003038 <_free_r+0x98>)
 8002fba:	6813      	ldr	r3, [r2, #0]
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	b933      	cbnz	r3, 8002fce <_free_r+0x2e>
 8002fc0:	6063      	str	r3, [r4, #4]
 8002fc2:	6014      	str	r4, [r2, #0]
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fca:	f000 bbbc 	b.w	8003746 <__malloc_unlock>
 8002fce:	42a3      	cmp	r3, r4
 8002fd0:	d90c      	bls.n	8002fec <_free_r+0x4c>
 8002fd2:	6821      	ldr	r1, [r4, #0]
 8002fd4:	1862      	adds	r2, r4, r1
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	bf04      	itt	eq
 8002fda:	681a      	ldreq	r2, [r3, #0]
 8002fdc:	685b      	ldreq	r3, [r3, #4]
 8002fde:	6063      	str	r3, [r4, #4]
 8002fe0:	bf04      	itt	eq
 8002fe2:	1852      	addeq	r2, r2, r1
 8002fe4:	6022      	streq	r2, [r4, #0]
 8002fe6:	6004      	str	r4, [r0, #0]
 8002fe8:	e7ec      	b.n	8002fc4 <_free_r+0x24>
 8002fea:	4613      	mov	r3, r2
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	b10a      	cbz	r2, 8002ff4 <_free_r+0x54>
 8002ff0:	42a2      	cmp	r2, r4
 8002ff2:	d9fa      	bls.n	8002fea <_free_r+0x4a>
 8002ff4:	6819      	ldr	r1, [r3, #0]
 8002ff6:	1858      	adds	r0, r3, r1
 8002ff8:	42a0      	cmp	r0, r4
 8002ffa:	d10b      	bne.n	8003014 <_free_r+0x74>
 8002ffc:	6820      	ldr	r0, [r4, #0]
 8002ffe:	4401      	add	r1, r0
 8003000:	1858      	adds	r0, r3, r1
 8003002:	4282      	cmp	r2, r0
 8003004:	6019      	str	r1, [r3, #0]
 8003006:	d1dd      	bne.n	8002fc4 <_free_r+0x24>
 8003008:	6810      	ldr	r0, [r2, #0]
 800300a:	6852      	ldr	r2, [r2, #4]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	4401      	add	r1, r0
 8003010:	6019      	str	r1, [r3, #0]
 8003012:	e7d7      	b.n	8002fc4 <_free_r+0x24>
 8003014:	d902      	bls.n	800301c <_free_r+0x7c>
 8003016:	230c      	movs	r3, #12
 8003018:	602b      	str	r3, [r5, #0]
 800301a:	e7d3      	b.n	8002fc4 <_free_r+0x24>
 800301c:	6820      	ldr	r0, [r4, #0]
 800301e:	1821      	adds	r1, r4, r0
 8003020:	428a      	cmp	r2, r1
 8003022:	bf04      	itt	eq
 8003024:	6811      	ldreq	r1, [r2, #0]
 8003026:	6852      	ldreq	r2, [r2, #4]
 8003028:	6062      	str	r2, [r4, #4]
 800302a:	bf04      	itt	eq
 800302c:	1809      	addeq	r1, r1, r0
 800302e:	6021      	streq	r1, [r4, #0]
 8003030:	605c      	str	r4, [r3, #4]
 8003032:	e7c7      	b.n	8002fc4 <_free_r+0x24>
 8003034:	bd38      	pop	{r3, r4, r5, pc}
 8003036:	bf00      	nop
 8003038:	20000090 	.word	0x20000090

0800303c <_malloc_r>:
 800303c:	b570      	push	{r4, r5, r6, lr}
 800303e:	1ccd      	adds	r5, r1, #3
 8003040:	f025 0503 	bic.w	r5, r5, #3
 8003044:	3508      	adds	r5, #8
 8003046:	2d0c      	cmp	r5, #12
 8003048:	bf38      	it	cc
 800304a:	250c      	movcc	r5, #12
 800304c:	2d00      	cmp	r5, #0
 800304e:	4606      	mov	r6, r0
 8003050:	db01      	blt.n	8003056 <_malloc_r+0x1a>
 8003052:	42a9      	cmp	r1, r5
 8003054:	d903      	bls.n	800305e <_malloc_r+0x22>
 8003056:	230c      	movs	r3, #12
 8003058:	6033      	str	r3, [r6, #0]
 800305a:	2000      	movs	r0, #0
 800305c:	bd70      	pop	{r4, r5, r6, pc}
 800305e:	f000 fb71 	bl	8003744 <__malloc_lock>
 8003062:	4a21      	ldr	r2, [pc, #132]	; (80030e8 <_malloc_r+0xac>)
 8003064:	6814      	ldr	r4, [r2, #0]
 8003066:	4621      	mov	r1, r4
 8003068:	b991      	cbnz	r1, 8003090 <_malloc_r+0x54>
 800306a:	4c20      	ldr	r4, [pc, #128]	; (80030ec <_malloc_r+0xb0>)
 800306c:	6823      	ldr	r3, [r4, #0]
 800306e:	b91b      	cbnz	r3, 8003078 <_malloc_r+0x3c>
 8003070:	4630      	mov	r0, r6
 8003072:	f000 f8b9 	bl	80031e8 <_sbrk_r>
 8003076:	6020      	str	r0, [r4, #0]
 8003078:	4629      	mov	r1, r5
 800307a:	4630      	mov	r0, r6
 800307c:	f000 f8b4 	bl	80031e8 <_sbrk_r>
 8003080:	1c43      	adds	r3, r0, #1
 8003082:	d124      	bne.n	80030ce <_malloc_r+0x92>
 8003084:	230c      	movs	r3, #12
 8003086:	6033      	str	r3, [r6, #0]
 8003088:	4630      	mov	r0, r6
 800308a:	f000 fb5c 	bl	8003746 <__malloc_unlock>
 800308e:	e7e4      	b.n	800305a <_malloc_r+0x1e>
 8003090:	680b      	ldr	r3, [r1, #0]
 8003092:	1b5b      	subs	r3, r3, r5
 8003094:	d418      	bmi.n	80030c8 <_malloc_r+0x8c>
 8003096:	2b0b      	cmp	r3, #11
 8003098:	d90f      	bls.n	80030ba <_malloc_r+0x7e>
 800309a:	600b      	str	r3, [r1, #0]
 800309c:	50cd      	str	r5, [r1, r3]
 800309e:	18cc      	adds	r4, r1, r3
 80030a0:	4630      	mov	r0, r6
 80030a2:	f000 fb50 	bl	8003746 <__malloc_unlock>
 80030a6:	f104 000b 	add.w	r0, r4, #11
 80030aa:	1d23      	adds	r3, r4, #4
 80030ac:	f020 0007 	bic.w	r0, r0, #7
 80030b0:	1ac3      	subs	r3, r0, r3
 80030b2:	d0d3      	beq.n	800305c <_malloc_r+0x20>
 80030b4:	425a      	negs	r2, r3
 80030b6:	50e2      	str	r2, [r4, r3]
 80030b8:	e7d0      	b.n	800305c <_malloc_r+0x20>
 80030ba:	428c      	cmp	r4, r1
 80030bc:	684b      	ldr	r3, [r1, #4]
 80030be:	bf16      	itet	ne
 80030c0:	6063      	strne	r3, [r4, #4]
 80030c2:	6013      	streq	r3, [r2, #0]
 80030c4:	460c      	movne	r4, r1
 80030c6:	e7eb      	b.n	80030a0 <_malloc_r+0x64>
 80030c8:	460c      	mov	r4, r1
 80030ca:	6849      	ldr	r1, [r1, #4]
 80030cc:	e7cc      	b.n	8003068 <_malloc_r+0x2c>
 80030ce:	1cc4      	adds	r4, r0, #3
 80030d0:	f024 0403 	bic.w	r4, r4, #3
 80030d4:	42a0      	cmp	r0, r4
 80030d6:	d005      	beq.n	80030e4 <_malloc_r+0xa8>
 80030d8:	1a21      	subs	r1, r4, r0
 80030da:	4630      	mov	r0, r6
 80030dc:	f000 f884 	bl	80031e8 <_sbrk_r>
 80030e0:	3001      	adds	r0, #1
 80030e2:	d0cf      	beq.n	8003084 <_malloc_r+0x48>
 80030e4:	6025      	str	r5, [r4, #0]
 80030e6:	e7db      	b.n	80030a0 <_malloc_r+0x64>
 80030e8:	20000090 	.word	0x20000090
 80030ec:	20000094 	.word	0x20000094

080030f0 <iprintf>:
 80030f0:	b40f      	push	{r0, r1, r2, r3}
 80030f2:	4b0a      	ldr	r3, [pc, #40]	; (800311c <iprintf+0x2c>)
 80030f4:	b513      	push	{r0, r1, r4, lr}
 80030f6:	681c      	ldr	r4, [r3, #0]
 80030f8:	b124      	cbz	r4, 8003104 <iprintf+0x14>
 80030fa:	69a3      	ldr	r3, [r4, #24]
 80030fc:	b913      	cbnz	r3, 8003104 <iprintf+0x14>
 80030fe:	4620      	mov	r0, r4
 8003100:	f000 fa32 	bl	8003568 <__sinit>
 8003104:	ab05      	add	r3, sp, #20
 8003106:	9a04      	ldr	r2, [sp, #16]
 8003108:	68a1      	ldr	r1, [r4, #8]
 800310a:	9301      	str	r3, [sp, #4]
 800310c:	4620      	mov	r0, r4
 800310e:	f000 fb45 	bl	800379c <_vfiprintf_r>
 8003112:	b002      	add	sp, #8
 8003114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003118:	b004      	add	sp, #16
 800311a:	4770      	bx	lr
 800311c:	2000000c 	.word	0x2000000c

08003120 <_puts_r>:
 8003120:	b570      	push	{r4, r5, r6, lr}
 8003122:	460e      	mov	r6, r1
 8003124:	4605      	mov	r5, r0
 8003126:	b118      	cbz	r0, 8003130 <_puts_r+0x10>
 8003128:	6983      	ldr	r3, [r0, #24]
 800312a:	b90b      	cbnz	r3, 8003130 <_puts_r+0x10>
 800312c:	f000 fa1c 	bl	8003568 <__sinit>
 8003130:	69ab      	ldr	r3, [r5, #24]
 8003132:	68ac      	ldr	r4, [r5, #8]
 8003134:	b913      	cbnz	r3, 800313c <_puts_r+0x1c>
 8003136:	4628      	mov	r0, r5
 8003138:	f000 fa16 	bl	8003568 <__sinit>
 800313c:	4b23      	ldr	r3, [pc, #140]	; (80031cc <_puts_r+0xac>)
 800313e:	429c      	cmp	r4, r3
 8003140:	d117      	bne.n	8003172 <_puts_r+0x52>
 8003142:	686c      	ldr	r4, [r5, #4]
 8003144:	89a3      	ldrh	r3, [r4, #12]
 8003146:	071b      	lsls	r3, r3, #28
 8003148:	d51d      	bpl.n	8003186 <_puts_r+0x66>
 800314a:	6923      	ldr	r3, [r4, #16]
 800314c:	b1db      	cbz	r3, 8003186 <_puts_r+0x66>
 800314e:	3e01      	subs	r6, #1
 8003150:	68a3      	ldr	r3, [r4, #8]
 8003152:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003156:	3b01      	subs	r3, #1
 8003158:	60a3      	str	r3, [r4, #8]
 800315a:	b9e9      	cbnz	r1, 8003198 <_puts_r+0x78>
 800315c:	2b00      	cmp	r3, #0
 800315e:	da2e      	bge.n	80031be <_puts_r+0x9e>
 8003160:	4622      	mov	r2, r4
 8003162:	210a      	movs	r1, #10
 8003164:	4628      	mov	r0, r5
 8003166:	f000 f84f 	bl	8003208 <__swbuf_r>
 800316a:	3001      	adds	r0, #1
 800316c:	d011      	beq.n	8003192 <_puts_r+0x72>
 800316e:	200a      	movs	r0, #10
 8003170:	e011      	b.n	8003196 <_puts_r+0x76>
 8003172:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <_puts_r+0xb0>)
 8003174:	429c      	cmp	r4, r3
 8003176:	d101      	bne.n	800317c <_puts_r+0x5c>
 8003178:	68ac      	ldr	r4, [r5, #8]
 800317a:	e7e3      	b.n	8003144 <_puts_r+0x24>
 800317c:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <_puts_r+0xb4>)
 800317e:	429c      	cmp	r4, r3
 8003180:	bf08      	it	eq
 8003182:	68ec      	ldreq	r4, [r5, #12]
 8003184:	e7de      	b.n	8003144 <_puts_r+0x24>
 8003186:	4621      	mov	r1, r4
 8003188:	4628      	mov	r0, r5
 800318a:	f000 f88f 	bl	80032ac <__swsetup_r>
 800318e:	2800      	cmp	r0, #0
 8003190:	d0dd      	beq.n	800314e <_puts_r+0x2e>
 8003192:	f04f 30ff 	mov.w	r0, #4294967295
 8003196:	bd70      	pop	{r4, r5, r6, pc}
 8003198:	2b00      	cmp	r3, #0
 800319a:	da04      	bge.n	80031a6 <_puts_r+0x86>
 800319c:	69a2      	ldr	r2, [r4, #24]
 800319e:	429a      	cmp	r2, r3
 80031a0:	dc06      	bgt.n	80031b0 <_puts_r+0x90>
 80031a2:	290a      	cmp	r1, #10
 80031a4:	d004      	beq.n	80031b0 <_puts_r+0x90>
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	6022      	str	r2, [r4, #0]
 80031ac:	7019      	strb	r1, [r3, #0]
 80031ae:	e7cf      	b.n	8003150 <_puts_r+0x30>
 80031b0:	4622      	mov	r2, r4
 80031b2:	4628      	mov	r0, r5
 80031b4:	f000 f828 	bl	8003208 <__swbuf_r>
 80031b8:	3001      	adds	r0, #1
 80031ba:	d1c9      	bne.n	8003150 <_puts_r+0x30>
 80031bc:	e7e9      	b.n	8003192 <_puts_r+0x72>
 80031be:	6823      	ldr	r3, [r4, #0]
 80031c0:	200a      	movs	r0, #10
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	6022      	str	r2, [r4, #0]
 80031c6:	7018      	strb	r0, [r3, #0]
 80031c8:	e7e5      	b.n	8003196 <_puts_r+0x76>
 80031ca:	bf00      	nop
 80031cc:	080f5a78 	.word	0x080f5a78
 80031d0:	080f5a98 	.word	0x080f5a98
 80031d4:	080f5a58 	.word	0x080f5a58

080031d8 <puts>:
 80031d8:	4b02      	ldr	r3, [pc, #8]	; (80031e4 <puts+0xc>)
 80031da:	4601      	mov	r1, r0
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	f7ff bf9f 	b.w	8003120 <_puts_r>
 80031e2:	bf00      	nop
 80031e4:	2000000c 	.word	0x2000000c

080031e8 <_sbrk_r>:
 80031e8:	b538      	push	{r3, r4, r5, lr}
 80031ea:	4c06      	ldr	r4, [pc, #24]	; (8003204 <_sbrk_r+0x1c>)
 80031ec:	2300      	movs	r3, #0
 80031ee:	4605      	mov	r5, r0
 80031f0:	4608      	mov	r0, r1
 80031f2:	6023      	str	r3, [r4, #0]
 80031f4:	f7fd fe82 	bl	8000efc <_sbrk>
 80031f8:	1c43      	adds	r3, r0, #1
 80031fa:	d102      	bne.n	8003202 <_sbrk_r+0x1a>
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	b103      	cbz	r3, 8003202 <_sbrk_r+0x1a>
 8003200:	602b      	str	r3, [r5, #0]
 8003202:	bd38      	pop	{r3, r4, r5, pc}
 8003204:	20000130 	.word	0x20000130

08003208 <__swbuf_r>:
 8003208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320a:	460e      	mov	r6, r1
 800320c:	4614      	mov	r4, r2
 800320e:	4605      	mov	r5, r0
 8003210:	b118      	cbz	r0, 800321a <__swbuf_r+0x12>
 8003212:	6983      	ldr	r3, [r0, #24]
 8003214:	b90b      	cbnz	r3, 800321a <__swbuf_r+0x12>
 8003216:	f000 f9a7 	bl	8003568 <__sinit>
 800321a:	4b21      	ldr	r3, [pc, #132]	; (80032a0 <__swbuf_r+0x98>)
 800321c:	429c      	cmp	r4, r3
 800321e:	d12a      	bne.n	8003276 <__swbuf_r+0x6e>
 8003220:	686c      	ldr	r4, [r5, #4]
 8003222:	69a3      	ldr	r3, [r4, #24]
 8003224:	60a3      	str	r3, [r4, #8]
 8003226:	89a3      	ldrh	r3, [r4, #12]
 8003228:	071a      	lsls	r2, r3, #28
 800322a:	d52e      	bpl.n	800328a <__swbuf_r+0x82>
 800322c:	6923      	ldr	r3, [r4, #16]
 800322e:	b363      	cbz	r3, 800328a <__swbuf_r+0x82>
 8003230:	6923      	ldr	r3, [r4, #16]
 8003232:	6820      	ldr	r0, [r4, #0]
 8003234:	1ac0      	subs	r0, r0, r3
 8003236:	6963      	ldr	r3, [r4, #20]
 8003238:	b2f6      	uxtb	r6, r6
 800323a:	4283      	cmp	r3, r0
 800323c:	4637      	mov	r7, r6
 800323e:	dc04      	bgt.n	800324a <__swbuf_r+0x42>
 8003240:	4621      	mov	r1, r4
 8003242:	4628      	mov	r0, r5
 8003244:	f000 f926 	bl	8003494 <_fflush_r>
 8003248:	bb28      	cbnz	r0, 8003296 <__swbuf_r+0x8e>
 800324a:	68a3      	ldr	r3, [r4, #8]
 800324c:	3b01      	subs	r3, #1
 800324e:	60a3      	str	r3, [r4, #8]
 8003250:	6823      	ldr	r3, [r4, #0]
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	6022      	str	r2, [r4, #0]
 8003256:	701e      	strb	r6, [r3, #0]
 8003258:	6963      	ldr	r3, [r4, #20]
 800325a:	3001      	adds	r0, #1
 800325c:	4283      	cmp	r3, r0
 800325e:	d004      	beq.n	800326a <__swbuf_r+0x62>
 8003260:	89a3      	ldrh	r3, [r4, #12]
 8003262:	07db      	lsls	r3, r3, #31
 8003264:	d519      	bpl.n	800329a <__swbuf_r+0x92>
 8003266:	2e0a      	cmp	r6, #10
 8003268:	d117      	bne.n	800329a <__swbuf_r+0x92>
 800326a:	4621      	mov	r1, r4
 800326c:	4628      	mov	r0, r5
 800326e:	f000 f911 	bl	8003494 <_fflush_r>
 8003272:	b190      	cbz	r0, 800329a <__swbuf_r+0x92>
 8003274:	e00f      	b.n	8003296 <__swbuf_r+0x8e>
 8003276:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <__swbuf_r+0x9c>)
 8003278:	429c      	cmp	r4, r3
 800327a:	d101      	bne.n	8003280 <__swbuf_r+0x78>
 800327c:	68ac      	ldr	r4, [r5, #8]
 800327e:	e7d0      	b.n	8003222 <__swbuf_r+0x1a>
 8003280:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <__swbuf_r+0xa0>)
 8003282:	429c      	cmp	r4, r3
 8003284:	bf08      	it	eq
 8003286:	68ec      	ldreq	r4, [r5, #12]
 8003288:	e7cb      	b.n	8003222 <__swbuf_r+0x1a>
 800328a:	4621      	mov	r1, r4
 800328c:	4628      	mov	r0, r5
 800328e:	f000 f80d 	bl	80032ac <__swsetup_r>
 8003292:	2800      	cmp	r0, #0
 8003294:	d0cc      	beq.n	8003230 <__swbuf_r+0x28>
 8003296:	f04f 37ff 	mov.w	r7, #4294967295
 800329a:	4638      	mov	r0, r7
 800329c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800329e:	bf00      	nop
 80032a0:	080f5a78 	.word	0x080f5a78
 80032a4:	080f5a98 	.word	0x080f5a98
 80032a8:	080f5a58 	.word	0x080f5a58

080032ac <__swsetup_r>:
 80032ac:	4b32      	ldr	r3, [pc, #200]	; (8003378 <__swsetup_r+0xcc>)
 80032ae:	b570      	push	{r4, r5, r6, lr}
 80032b0:	681d      	ldr	r5, [r3, #0]
 80032b2:	4606      	mov	r6, r0
 80032b4:	460c      	mov	r4, r1
 80032b6:	b125      	cbz	r5, 80032c2 <__swsetup_r+0x16>
 80032b8:	69ab      	ldr	r3, [r5, #24]
 80032ba:	b913      	cbnz	r3, 80032c2 <__swsetup_r+0x16>
 80032bc:	4628      	mov	r0, r5
 80032be:	f000 f953 	bl	8003568 <__sinit>
 80032c2:	4b2e      	ldr	r3, [pc, #184]	; (800337c <__swsetup_r+0xd0>)
 80032c4:	429c      	cmp	r4, r3
 80032c6:	d10f      	bne.n	80032e8 <__swsetup_r+0x3c>
 80032c8:	686c      	ldr	r4, [r5, #4]
 80032ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	0715      	lsls	r5, r2, #28
 80032d2:	d42c      	bmi.n	800332e <__swsetup_r+0x82>
 80032d4:	06d0      	lsls	r0, r2, #27
 80032d6:	d411      	bmi.n	80032fc <__swsetup_r+0x50>
 80032d8:	2209      	movs	r2, #9
 80032da:	6032      	str	r2, [r6, #0]
 80032dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032e0:	81a3      	strh	r3, [r4, #12]
 80032e2:	f04f 30ff 	mov.w	r0, #4294967295
 80032e6:	e03e      	b.n	8003366 <__swsetup_r+0xba>
 80032e8:	4b25      	ldr	r3, [pc, #148]	; (8003380 <__swsetup_r+0xd4>)
 80032ea:	429c      	cmp	r4, r3
 80032ec:	d101      	bne.n	80032f2 <__swsetup_r+0x46>
 80032ee:	68ac      	ldr	r4, [r5, #8]
 80032f0:	e7eb      	b.n	80032ca <__swsetup_r+0x1e>
 80032f2:	4b24      	ldr	r3, [pc, #144]	; (8003384 <__swsetup_r+0xd8>)
 80032f4:	429c      	cmp	r4, r3
 80032f6:	bf08      	it	eq
 80032f8:	68ec      	ldreq	r4, [r5, #12]
 80032fa:	e7e6      	b.n	80032ca <__swsetup_r+0x1e>
 80032fc:	0751      	lsls	r1, r2, #29
 80032fe:	d512      	bpl.n	8003326 <__swsetup_r+0x7a>
 8003300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003302:	b141      	cbz	r1, 8003316 <__swsetup_r+0x6a>
 8003304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003308:	4299      	cmp	r1, r3
 800330a:	d002      	beq.n	8003312 <__swsetup_r+0x66>
 800330c:	4630      	mov	r0, r6
 800330e:	f7ff fe47 	bl	8002fa0 <_free_r>
 8003312:	2300      	movs	r3, #0
 8003314:	6363      	str	r3, [r4, #52]	; 0x34
 8003316:	89a3      	ldrh	r3, [r4, #12]
 8003318:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800331c:	81a3      	strh	r3, [r4, #12]
 800331e:	2300      	movs	r3, #0
 8003320:	6063      	str	r3, [r4, #4]
 8003322:	6923      	ldr	r3, [r4, #16]
 8003324:	6023      	str	r3, [r4, #0]
 8003326:	89a3      	ldrh	r3, [r4, #12]
 8003328:	f043 0308 	orr.w	r3, r3, #8
 800332c:	81a3      	strh	r3, [r4, #12]
 800332e:	6923      	ldr	r3, [r4, #16]
 8003330:	b94b      	cbnz	r3, 8003346 <__swsetup_r+0x9a>
 8003332:	89a3      	ldrh	r3, [r4, #12]
 8003334:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800333c:	d003      	beq.n	8003346 <__swsetup_r+0x9a>
 800333e:	4621      	mov	r1, r4
 8003340:	4630      	mov	r0, r6
 8003342:	f000 f9bf 	bl	80036c4 <__smakebuf_r>
 8003346:	89a2      	ldrh	r2, [r4, #12]
 8003348:	f012 0301 	ands.w	r3, r2, #1
 800334c:	d00c      	beq.n	8003368 <__swsetup_r+0xbc>
 800334e:	2300      	movs	r3, #0
 8003350:	60a3      	str	r3, [r4, #8]
 8003352:	6963      	ldr	r3, [r4, #20]
 8003354:	425b      	negs	r3, r3
 8003356:	61a3      	str	r3, [r4, #24]
 8003358:	6923      	ldr	r3, [r4, #16]
 800335a:	b953      	cbnz	r3, 8003372 <__swsetup_r+0xc6>
 800335c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003360:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003364:	d1ba      	bne.n	80032dc <__swsetup_r+0x30>
 8003366:	bd70      	pop	{r4, r5, r6, pc}
 8003368:	0792      	lsls	r2, r2, #30
 800336a:	bf58      	it	pl
 800336c:	6963      	ldrpl	r3, [r4, #20]
 800336e:	60a3      	str	r3, [r4, #8]
 8003370:	e7f2      	b.n	8003358 <__swsetup_r+0xac>
 8003372:	2000      	movs	r0, #0
 8003374:	e7f7      	b.n	8003366 <__swsetup_r+0xba>
 8003376:	bf00      	nop
 8003378:	2000000c 	.word	0x2000000c
 800337c:	080f5a78 	.word	0x080f5a78
 8003380:	080f5a98 	.word	0x080f5a98
 8003384:	080f5a58 	.word	0x080f5a58

08003388 <__sflush_r>:
 8003388:	898a      	ldrh	r2, [r1, #12]
 800338a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800338e:	4605      	mov	r5, r0
 8003390:	0710      	lsls	r0, r2, #28
 8003392:	460c      	mov	r4, r1
 8003394:	d458      	bmi.n	8003448 <__sflush_r+0xc0>
 8003396:	684b      	ldr	r3, [r1, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	dc05      	bgt.n	80033a8 <__sflush_r+0x20>
 800339c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800339e:	2b00      	cmp	r3, #0
 80033a0:	dc02      	bgt.n	80033a8 <__sflush_r+0x20>
 80033a2:	2000      	movs	r0, #0
 80033a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033aa:	2e00      	cmp	r6, #0
 80033ac:	d0f9      	beq.n	80033a2 <__sflush_r+0x1a>
 80033ae:	2300      	movs	r3, #0
 80033b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80033b4:	682f      	ldr	r7, [r5, #0]
 80033b6:	6a21      	ldr	r1, [r4, #32]
 80033b8:	602b      	str	r3, [r5, #0]
 80033ba:	d032      	beq.n	8003422 <__sflush_r+0x9a>
 80033bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033be:	89a3      	ldrh	r3, [r4, #12]
 80033c0:	075a      	lsls	r2, r3, #29
 80033c2:	d505      	bpl.n	80033d0 <__sflush_r+0x48>
 80033c4:	6863      	ldr	r3, [r4, #4]
 80033c6:	1ac0      	subs	r0, r0, r3
 80033c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033ca:	b10b      	cbz	r3, 80033d0 <__sflush_r+0x48>
 80033cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033ce:	1ac0      	subs	r0, r0, r3
 80033d0:	2300      	movs	r3, #0
 80033d2:	4602      	mov	r2, r0
 80033d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033d6:	6a21      	ldr	r1, [r4, #32]
 80033d8:	4628      	mov	r0, r5
 80033da:	47b0      	blx	r6
 80033dc:	1c43      	adds	r3, r0, #1
 80033de:	89a3      	ldrh	r3, [r4, #12]
 80033e0:	d106      	bne.n	80033f0 <__sflush_r+0x68>
 80033e2:	6829      	ldr	r1, [r5, #0]
 80033e4:	291d      	cmp	r1, #29
 80033e6:	d848      	bhi.n	800347a <__sflush_r+0xf2>
 80033e8:	4a29      	ldr	r2, [pc, #164]	; (8003490 <__sflush_r+0x108>)
 80033ea:	40ca      	lsrs	r2, r1
 80033ec:	07d6      	lsls	r6, r2, #31
 80033ee:	d544      	bpl.n	800347a <__sflush_r+0xf2>
 80033f0:	2200      	movs	r2, #0
 80033f2:	6062      	str	r2, [r4, #4]
 80033f4:	04d9      	lsls	r1, r3, #19
 80033f6:	6922      	ldr	r2, [r4, #16]
 80033f8:	6022      	str	r2, [r4, #0]
 80033fa:	d504      	bpl.n	8003406 <__sflush_r+0x7e>
 80033fc:	1c42      	adds	r2, r0, #1
 80033fe:	d101      	bne.n	8003404 <__sflush_r+0x7c>
 8003400:	682b      	ldr	r3, [r5, #0]
 8003402:	b903      	cbnz	r3, 8003406 <__sflush_r+0x7e>
 8003404:	6560      	str	r0, [r4, #84]	; 0x54
 8003406:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003408:	602f      	str	r7, [r5, #0]
 800340a:	2900      	cmp	r1, #0
 800340c:	d0c9      	beq.n	80033a2 <__sflush_r+0x1a>
 800340e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003412:	4299      	cmp	r1, r3
 8003414:	d002      	beq.n	800341c <__sflush_r+0x94>
 8003416:	4628      	mov	r0, r5
 8003418:	f7ff fdc2 	bl	8002fa0 <_free_r>
 800341c:	2000      	movs	r0, #0
 800341e:	6360      	str	r0, [r4, #52]	; 0x34
 8003420:	e7c0      	b.n	80033a4 <__sflush_r+0x1c>
 8003422:	2301      	movs	r3, #1
 8003424:	4628      	mov	r0, r5
 8003426:	47b0      	blx	r6
 8003428:	1c41      	adds	r1, r0, #1
 800342a:	d1c8      	bne.n	80033be <__sflush_r+0x36>
 800342c:	682b      	ldr	r3, [r5, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0c5      	beq.n	80033be <__sflush_r+0x36>
 8003432:	2b1d      	cmp	r3, #29
 8003434:	d001      	beq.n	800343a <__sflush_r+0xb2>
 8003436:	2b16      	cmp	r3, #22
 8003438:	d101      	bne.n	800343e <__sflush_r+0xb6>
 800343a:	602f      	str	r7, [r5, #0]
 800343c:	e7b1      	b.n	80033a2 <__sflush_r+0x1a>
 800343e:	89a3      	ldrh	r3, [r4, #12]
 8003440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003444:	81a3      	strh	r3, [r4, #12]
 8003446:	e7ad      	b.n	80033a4 <__sflush_r+0x1c>
 8003448:	690f      	ldr	r7, [r1, #16]
 800344a:	2f00      	cmp	r7, #0
 800344c:	d0a9      	beq.n	80033a2 <__sflush_r+0x1a>
 800344e:	0793      	lsls	r3, r2, #30
 8003450:	680e      	ldr	r6, [r1, #0]
 8003452:	bf08      	it	eq
 8003454:	694b      	ldreq	r3, [r1, #20]
 8003456:	600f      	str	r7, [r1, #0]
 8003458:	bf18      	it	ne
 800345a:	2300      	movne	r3, #0
 800345c:	eba6 0807 	sub.w	r8, r6, r7
 8003460:	608b      	str	r3, [r1, #8]
 8003462:	f1b8 0f00 	cmp.w	r8, #0
 8003466:	dd9c      	ble.n	80033a2 <__sflush_r+0x1a>
 8003468:	4643      	mov	r3, r8
 800346a:	463a      	mov	r2, r7
 800346c:	6a21      	ldr	r1, [r4, #32]
 800346e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003470:	4628      	mov	r0, r5
 8003472:	47b0      	blx	r6
 8003474:	2800      	cmp	r0, #0
 8003476:	dc06      	bgt.n	8003486 <__sflush_r+0xfe>
 8003478:	89a3      	ldrh	r3, [r4, #12]
 800347a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800347e:	81a3      	strh	r3, [r4, #12]
 8003480:	f04f 30ff 	mov.w	r0, #4294967295
 8003484:	e78e      	b.n	80033a4 <__sflush_r+0x1c>
 8003486:	4407      	add	r7, r0
 8003488:	eba8 0800 	sub.w	r8, r8, r0
 800348c:	e7e9      	b.n	8003462 <__sflush_r+0xda>
 800348e:	bf00      	nop
 8003490:	20400001 	.word	0x20400001

08003494 <_fflush_r>:
 8003494:	b538      	push	{r3, r4, r5, lr}
 8003496:	690b      	ldr	r3, [r1, #16]
 8003498:	4605      	mov	r5, r0
 800349a:	460c      	mov	r4, r1
 800349c:	b1db      	cbz	r3, 80034d6 <_fflush_r+0x42>
 800349e:	b118      	cbz	r0, 80034a8 <_fflush_r+0x14>
 80034a0:	6983      	ldr	r3, [r0, #24]
 80034a2:	b90b      	cbnz	r3, 80034a8 <_fflush_r+0x14>
 80034a4:	f000 f860 	bl	8003568 <__sinit>
 80034a8:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <_fflush_r+0x48>)
 80034aa:	429c      	cmp	r4, r3
 80034ac:	d109      	bne.n	80034c2 <_fflush_r+0x2e>
 80034ae:	686c      	ldr	r4, [r5, #4]
 80034b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034b4:	b17b      	cbz	r3, 80034d6 <_fflush_r+0x42>
 80034b6:	4621      	mov	r1, r4
 80034b8:	4628      	mov	r0, r5
 80034ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034be:	f7ff bf63 	b.w	8003388 <__sflush_r>
 80034c2:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <_fflush_r+0x4c>)
 80034c4:	429c      	cmp	r4, r3
 80034c6:	d101      	bne.n	80034cc <_fflush_r+0x38>
 80034c8:	68ac      	ldr	r4, [r5, #8]
 80034ca:	e7f1      	b.n	80034b0 <_fflush_r+0x1c>
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <_fflush_r+0x50>)
 80034ce:	429c      	cmp	r4, r3
 80034d0:	bf08      	it	eq
 80034d2:	68ec      	ldreq	r4, [r5, #12]
 80034d4:	e7ec      	b.n	80034b0 <_fflush_r+0x1c>
 80034d6:	2000      	movs	r0, #0
 80034d8:	bd38      	pop	{r3, r4, r5, pc}
 80034da:	bf00      	nop
 80034dc:	080f5a78 	.word	0x080f5a78
 80034e0:	080f5a98 	.word	0x080f5a98
 80034e4:	080f5a58 	.word	0x080f5a58

080034e8 <std>:
 80034e8:	2300      	movs	r3, #0
 80034ea:	b510      	push	{r4, lr}
 80034ec:	4604      	mov	r4, r0
 80034ee:	e9c0 3300 	strd	r3, r3, [r0]
 80034f2:	6083      	str	r3, [r0, #8]
 80034f4:	8181      	strh	r1, [r0, #12]
 80034f6:	6643      	str	r3, [r0, #100]	; 0x64
 80034f8:	81c2      	strh	r2, [r0, #14]
 80034fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034fe:	6183      	str	r3, [r0, #24]
 8003500:	4619      	mov	r1, r3
 8003502:	2208      	movs	r2, #8
 8003504:	305c      	adds	r0, #92	; 0x5c
 8003506:	f7ff fd43 	bl	8002f90 <memset>
 800350a:	4b05      	ldr	r3, [pc, #20]	; (8003520 <std+0x38>)
 800350c:	6263      	str	r3, [r4, #36]	; 0x24
 800350e:	4b05      	ldr	r3, [pc, #20]	; (8003524 <std+0x3c>)
 8003510:	62a3      	str	r3, [r4, #40]	; 0x28
 8003512:	4b05      	ldr	r3, [pc, #20]	; (8003528 <std+0x40>)
 8003514:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003516:	4b05      	ldr	r3, [pc, #20]	; (800352c <std+0x44>)
 8003518:	6224      	str	r4, [r4, #32]
 800351a:	6323      	str	r3, [r4, #48]	; 0x30
 800351c:	bd10      	pop	{r4, pc}
 800351e:	bf00      	nop
 8003520:	08003cd9 	.word	0x08003cd9
 8003524:	08003cfb 	.word	0x08003cfb
 8003528:	08003d33 	.word	0x08003d33
 800352c:	08003d57 	.word	0x08003d57

08003530 <_cleanup_r>:
 8003530:	4901      	ldr	r1, [pc, #4]	; (8003538 <_cleanup_r+0x8>)
 8003532:	f000 b885 	b.w	8003640 <_fwalk_reent>
 8003536:	bf00      	nop
 8003538:	08003495 	.word	0x08003495

0800353c <__sfmoreglue>:
 800353c:	b570      	push	{r4, r5, r6, lr}
 800353e:	1e4a      	subs	r2, r1, #1
 8003540:	2568      	movs	r5, #104	; 0x68
 8003542:	4355      	muls	r5, r2
 8003544:	460e      	mov	r6, r1
 8003546:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800354a:	f7ff fd77 	bl	800303c <_malloc_r>
 800354e:	4604      	mov	r4, r0
 8003550:	b140      	cbz	r0, 8003564 <__sfmoreglue+0x28>
 8003552:	2100      	movs	r1, #0
 8003554:	e9c0 1600 	strd	r1, r6, [r0]
 8003558:	300c      	adds	r0, #12
 800355a:	60a0      	str	r0, [r4, #8]
 800355c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003560:	f7ff fd16 	bl	8002f90 <memset>
 8003564:	4620      	mov	r0, r4
 8003566:	bd70      	pop	{r4, r5, r6, pc}

08003568 <__sinit>:
 8003568:	6983      	ldr	r3, [r0, #24]
 800356a:	b510      	push	{r4, lr}
 800356c:	4604      	mov	r4, r0
 800356e:	bb33      	cbnz	r3, 80035be <__sinit+0x56>
 8003570:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003574:	6503      	str	r3, [r0, #80]	; 0x50
 8003576:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <__sinit+0x58>)
 8003578:	4a12      	ldr	r2, [pc, #72]	; (80035c4 <__sinit+0x5c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6282      	str	r2, [r0, #40]	; 0x28
 800357e:	4298      	cmp	r0, r3
 8003580:	bf04      	itt	eq
 8003582:	2301      	moveq	r3, #1
 8003584:	6183      	streq	r3, [r0, #24]
 8003586:	f000 f81f 	bl	80035c8 <__sfp>
 800358a:	6060      	str	r0, [r4, #4]
 800358c:	4620      	mov	r0, r4
 800358e:	f000 f81b 	bl	80035c8 <__sfp>
 8003592:	60a0      	str	r0, [r4, #8]
 8003594:	4620      	mov	r0, r4
 8003596:	f000 f817 	bl	80035c8 <__sfp>
 800359a:	2200      	movs	r2, #0
 800359c:	60e0      	str	r0, [r4, #12]
 800359e:	2104      	movs	r1, #4
 80035a0:	6860      	ldr	r0, [r4, #4]
 80035a2:	f7ff ffa1 	bl	80034e8 <std>
 80035a6:	2201      	movs	r2, #1
 80035a8:	2109      	movs	r1, #9
 80035aa:	68a0      	ldr	r0, [r4, #8]
 80035ac:	f7ff ff9c 	bl	80034e8 <std>
 80035b0:	2202      	movs	r2, #2
 80035b2:	2112      	movs	r1, #18
 80035b4:	68e0      	ldr	r0, [r4, #12]
 80035b6:	f7ff ff97 	bl	80034e8 <std>
 80035ba:	2301      	movs	r3, #1
 80035bc:	61a3      	str	r3, [r4, #24]
 80035be:	bd10      	pop	{r4, pc}
 80035c0:	080f5a54 	.word	0x080f5a54
 80035c4:	08003531 	.word	0x08003531

080035c8 <__sfp>:
 80035c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ca:	4b1b      	ldr	r3, [pc, #108]	; (8003638 <__sfp+0x70>)
 80035cc:	681e      	ldr	r6, [r3, #0]
 80035ce:	69b3      	ldr	r3, [r6, #24]
 80035d0:	4607      	mov	r7, r0
 80035d2:	b913      	cbnz	r3, 80035da <__sfp+0x12>
 80035d4:	4630      	mov	r0, r6
 80035d6:	f7ff ffc7 	bl	8003568 <__sinit>
 80035da:	3648      	adds	r6, #72	; 0x48
 80035dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80035e0:	3b01      	subs	r3, #1
 80035e2:	d503      	bpl.n	80035ec <__sfp+0x24>
 80035e4:	6833      	ldr	r3, [r6, #0]
 80035e6:	b133      	cbz	r3, 80035f6 <__sfp+0x2e>
 80035e8:	6836      	ldr	r6, [r6, #0]
 80035ea:	e7f7      	b.n	80035dc <__sfp+0x14>
 80035ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035f0:	b16d      	cbz	r5, 800360e <__sfp+0x46>
 80035f2:	3468      	adds	r4, #104	; 0x68
 80035f4:	e7f4      	b.n	80035e0 <__sfp+0x18>
 80035f6:	2104      	movs	r1, #4
 80035f8:	4638      	mov	r0, r7
 80035fa:	f7ff ff9f 	bl	800353c <__sfmoreglue>
 80035fe:	6030      	str	r0, [r6, #0]
 8003600:	2800      	cmp	r0, #0
 8003602:	d1f1      	bne.n	80035e8 <__sfp+0x20>
 8003604:	230c      	movs	r3, #12
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	4604      	mov	r4, r0
 800360a:	4620      	mov	r0, r4
 800360c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800360e:	4b0b      	ldr	r3, [pc, #44]	; (800363c <__sfp+0x74>)
 8003610:	6665      	str	r5, [r4, #100]	; 0x64
 8003612:	e9c4 5500 	strd	r5, r5, [r4]
 8003616:	60a5      	str	r5, [r4, #8]
 8003618:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800361c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003620:	2208      	movs	r2, #8
 8003622:	4629      	mov	r1, r5
 8003624:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003628:	f7ff fcb2 	bl	8002f90 <memset>
 800362c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003630:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003634:	e7e9      	b.n	800360a <__sfp+0x42>
 8003636:	bf00      	nop
 8003638:	080f5a54 	.word	0x080f5a54
 800363c:	ffff0001 	.word	0xffff0001

08003640 <_fwalk_reent>:
 8003640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003644:	4680      	mov	r8, r0
 8003646:	4689      	mov	r9, r1
 8003648:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800364c:	2600      	movs	r6, #0
 800364e:	b914      	cbnz	r4, 8003656 <_fwalk_reent+0x16>
 8003650:	4630      	mov	r0, r6
 8003652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003656:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800365a:	3f01      	subs	r7, #1
 800365c:	d501      	bpl.n	8003662 <_fwalk_reent+0x22>
 800365e:	6824      	ldr	r4, [r4, #0]
 8003660:	e7f5      	b.n	800364e <_fwalk_reent+0xe>
 8003662:	89ab      	ldrh	r3, [r5, #12]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d907      	bls.n	8003678 <_fwalk_reent+0x38>
 8003668:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800366c:	3301      	adds	r3, #1
 800366e:	d003      	beq.n	8003678 <_fwalk_reent+0x38>
 8003670:	4629      	mov	r1, r5
 8003672:	4640      	mov	r0, r8
 8003674:	47c8      	blx	r9
 8003676:	4306      	orrs	r6, r0
 8003678:	3568      	adds	r5, #104	; 0x68
 800367a:	e7ee      	b.n	800365a <_fwalk_reent+0x1a>

0800367c <__swhatbuf_r>:
 800367c:	b570      	push	{r4, r5, r6, lr}
 800367e:	460e      	mov	r6, r1
 8003680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003684:	2900      	cmp	r1, #0
 8003686:	b096      	sub	sp, #88	; 0x58
 8003688:	4614      	mov	r4, r2
 800368a:	461d      	mov	r5, r3
 800368c:	da07      	bge.n	800369e <__swhatbuf_r+0x22>
 800368e:	2300      	movs	r3, #0
 8003690:	602b      	str	r3, [r5, #0]
 8003692:	89b3      	ldrh	r3, [r6, #12]
 8003694:	061a      	lsls	r2, r3, #24
 8003696:	d410      	bmi.n	80036ba <__swhatbuf_r+0x3e>
 8003698:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800369c:	e00e      	b.n	80036bc <__swhatbuf_r+0x40>
 800369e:	466a      	mov	r2, sp
 80036a0:	f000 fb80 	bl	8003da4 <_fstat_r>
 80036a4:	2800      	cmp	r0, #0
 80036a6:	dbf2      	blt.n	800368e <__swhatbuf_r+0x12>
 80036a8:	9a01      	ldr	r2, [sp, #4]
 80036aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80036ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80036b2:	425a      	negs	r2, r3
 80036b4:	415a      	adcs	r2, r3
 80036b6:	602a      	str	r2, [r5, #0]
 80036b8:	e7ee      	b.n	8003698 <__swhatbuf_r+0x1c>
 80036ba:	2340      	movs	r3, #64	; 0x40
 80036bc:	2000      	movs	r0, #0
 80036be:	6023      	str	r3, [r4, #0]
 80036c0:	b016      	add	sp, #88	; 0x58
 80036c2:	bd70      	pop	{r4, r5, r6, pc}

080036c4 <__smakebuf_r>:
 80036c4:	898b      	ldrh	r3, [r1, #12]
 80036c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036c8:	079d      	lsls	r5, r3, #30
 80036ca:	4606      	mov	r6, r0
 80036cc:	460c      	mov	r4, r1
 80036ce:	d507      	bpl.n	80036e0 <__smakebuf_r+0x1c>
 80036d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036d4:	6023      	str	r3, [r4, #0]
 80036d6:	6123      	str	r3, [r4, #16]
 80036d8:	2301      	movs	r3, #1
 80036da:	6163      	str	r3, [r4, #20]
 80036dc:	b002      	add	sp, #8
 80036de:	bd70      	pop	{r4, r5, r6, pc}
 80036e0:	ab01      	add	r3, sp, #4
 80036e2:	466a      	mov	r2, sp
 80036e4:	f7ff ffca 	bl	800367c <__swhatbuf_r>
 80036e8:	9900      	ldr	r1, [sp, #0]
 80036ea:	4605      	mov	r5, r0
 80036ec:	4630      	mov	r0, r6
 80036ee:	f7ff fca5 	bl	800303c <_malloc_r>
 80036f2:	b948      	cbnz	r0, 8003708 <__smakebuf_r+0x44>
 80036f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036f8:	059a      	lsls	r2, r3, #22
 80036fa:	d4ef      	bmi.n	80036dc <__smakebuf_r+0x18>
 80036fc:	f023 0303 	bic.w	r3, r3, #3
 8003700:	f043 0302 	orr.w	r3, r3, #2
 8003704:	81a3      	strh	r3, [r4, #12]
 8003706:	e7e3      	b.n	80036d0 <__smakebuf_r+0xc>
 8003708:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <__smakebuf_r+0x7c>)
 800370a:	62b3      	str	r3, [r6, #40]	; 0x28
 800370c:	89a3      	ldrh	r3, [r4, #12]
 800370e:	6020      	str	r0, [r4, #0]
 8003710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003714:	81a3      	strh	r3, [r4, #12]
 8003716:	9b00      	ldr	r3, [sp, #0]
 8003718:	6163      	str	r3, [r4, #20]
 800371a:	9b01      	ldr	r3, [sp, #4]
 800371c:	6120      	str	r0, [r4, #16]
 800371e:	b15b      	cbz	r3, 8003738 <__smakebuf_r+0x74>
 8003720:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003724:	4630      	mov	r0, r6
 8003726:	f000 fb4f 	bl	8003dc8 <_isatty_r>
 800372a:	b128      	cbz	r0, 8003738 <__smakebuf_r+0x74>
 800372c:	89a3      	ldrh	r3, [r4, #12]
 800372e:	f023 0303 	bic.w	r3, r3, #3
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	81a3      	strh	r3, [r4, #12]
 8003738:	89a3      	ldrh	r3, [r4, #12]
 800373a:	431d      	orrs	r5, r3
 800373c:	81a5      	strh	r5, [r4, #12]
 800373e:	e7cd      	b.n	80036dc <__smakebuf_r+0x18>
 8003740:	08003531 	.word	0x08003531

08003744 <__malloc_lock>:
 8003744:	4770      	bx	lr

08003746 <__malloc_unlock>:
 8003746:	4770      	bx	lr

08003748 <__sfputc_r>:
 8003748:	6893      	ldr	r3, [r2, #8]
 800374a:	3b01      	subs	r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	b410      	push	{r4}
 8003750:	6093      	str	r3, [r2, #8]
 8003752:	da08      	bge.n	8003766 <__sfputc_r+0x1e>
 8003754:	6994      	ldr	r4, [r2, #24]
 8003756:	42a3      	cmp	r3, r4
 8003758:	db01      	blt.n	800375e <__sfputc_r+0x16>
 800375a:	290a      	cmp	r1, #10
 800375c:	d103      	bne.n	8003766 <__sfputc_r+0x1e>
 800375e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003762:	f7ff bd51 	b.w	8003208 <__swbuf_r>
 8003766:	6813      	ldr	r3, [r2, #0]
 8003768:	1c58      	adds	r0, r3, #1
 800376a:	6010      	str	r0, [r2, #0]
 800376c:	7019      	strb	r1, [r3, #0]
 800376e:	4608      	mov	r0, r1
 8003770:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003774:	4770      	bx	lr

08003776 <__sfputs_r>:
 8003776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003778:	4606      	mov	r6, r0
 800377a:	460f      	mov	r7, r1
 800377c:	4614      	mov	r4, r2
 800377e:	18d5      	adds	r5, r2, r3
 8003780:	42ac      	cmp	r4, r5
 8003782:	d101      	bne.n	8003788 <__sfputs_r+0x12>
 8003784:	2000      	movs	r0, #0
 8003786:	e007      	b.n	8003798 <__sfputs_r+0x22>
 8003788:	463a      	mov	r2, r7
 800378a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800378e:	4630      	mov	r0, r6
 8003790:	f7ff ffda 	bl	8003748 <__sfputc_r>
 8003794:	1c43      	adds	r3, r0, #1
 8003796:	d1f3      	bne.n	8003780 <__sfputs_r+0xa>
 8003798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800379c <_vfiprintf_r>:
 800379c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037a0:	460c      	mov	r4, r1
 80037a2:	b09d      	sub	sp, #116	; 0x74
 80037a4:	4617      	mov	r7, r2
 80037a6:	461d      	mov	r5, r3
 80037a8:	4606      	mov	r6, r0
 80037aa:	b118      	cbz	r0, 80037b4 <_vfiprintf_r+0x18>
 80037ac:	6983      	ldr	r3, [r0, #24]
 80037ae:	b90b      	cbnz	r3, 80037b4 <_vfiprintf_r+0x18>
 80037b0:	f7ff feda 	bl	8003568 <__sinit>
 80037b4:	4b7c      	ldr	r3, [pc, #496]	; (80039a8 <_vfiprintf_r+0x20c>)
 80037b6:	429c      	cmp	r4, r3
 80037b8:	d158      	bne.n	800386c <_vfiprintf_r+0xd0>
 80037ba:	6874      	ldr	r4, [r6, #4]
 80037bc:	89a3      	ldrh	r3, [r4, #12]
 80037be:	0718      	lsls	r0, r3, #28
 80037c0:	d55e      	bpl.n	8003880 <_vfiprintf_r+0xe4>
 80037c2:	6923      	ldr	r3, [r4, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d05b      	beq.n	8003880 <_vfiprintf_r+0xe4>
 80037c8:	2300      	movs	r3, #0
 80037ca:	9309      	str	r3, [sp, #36]	; 0x24
 80037cc:	2320      	movs	r3, #32
 80037ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037d2:	2330      	movs	r3, #48	; 0x30
 80037d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037d8:	9503      	str	r5, [sp, #12]
 80037da:	f04f 0b01 	mov.w	fp, #1
 80037de:	46b8      	mov	r8, r7
 80037e0:	4645      	mov	r5, r8
 80037e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80037e6:	b10b      	cbz	r3, 80037ec <_vfiprintf_r+0x50>
 80037e8:	2b25      	cmp	r3, #37	; 0x25
 80037ea:	d154      	bne.n	8003896 <_vfiprintf_r+0xfa>
 80037ec:	ebb8 0a07 	subs.w	sl, r8, r7
 80037f0:	d00b      	beq.n	800380a <_vfiprintf_r+0x6e>
 80037f2:	4653      	mov	r3, sl
 80037f4:	463a      	mov	r2, r7
 80037f6:	4621      	mov	r1, r4
 80037f8:	4630      	mov	r0, r6
 80037fa:	f7ff ffbc 	bl	8003776 <__sfputs_r>
 80037fe:	3001      	adds	r0, #1
 8003800:	f000 80c2 	beq.w	8003988 <_vfiprintf_r+0x1ec>
 8003804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003806:	4453      	add	r3, sl
 8003808:	9309      	str	r3, [sp, #36]	; 0x24
 800380a:	f898 3000 	ldrb.w	r3, [r8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 80ba 	beq.w	8003988 <_vfiprintf_r+0x1ec>
 8003814:	2300      	movs	r3, #0
 8003816:	f04f 32ff 	mov.w	r2, #4294967295
 800381a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800381e:	9304      	str	r3, [sp, #16]
 8003820:	9307      	str	r3, [sp, #28]
 8003822:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003826:	931a      	str	r3, [sp, #104]	; 0x68
 8003828:	46a8      	mov	r8, r5
 800382a:	2205      	movs	r2, #5
 800382c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003830:	485e      	ldr	r0, [pc, #376]	; (80039ac <_vfiprintf_r+0x210>)
 8003832:	f7fc fce5 	bl	8000200 <memchr>
 8003836:	9b04      	ldr	r3, [sp, #16]
 8003838:	bb78      	cbnz	r0, 800389a <_vfiprintf_r+0xfe>
 800383a:	06d9      	lsls	r1, r3, #27
 800383c:	bf44      	itt	mi
 800383e:	2220      	movmi	r2, #32
 8003840:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003844:	071a      	lsls	r2, r3, #28
 8003846:	bf44      	itt	mi
 8003848:	222b      	movmi	r2, #43	; 0x2b
 800384a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800384e:	782a      	ldrb	r2, [r5, #0]
 8003850:	2a2a      	cmp	r2, #42	; 0x2a
 8003852:	d02a      	beq.n	80038aa <_vfiprintf_r+0x10e>
 8003854:	9a07      	ldr	r2, [sp, #28]
 8003856:	46a8      	mov	r8, r5
 8003858:	2000      	movs	r0, #0
 800385a:	250a      	movs	r5, #10
 800385c:	4641      	mov	r1, r8
 800385e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003862:	3b30      	subs	r3, #48	; 0x30
 8003864:	2b09      	cmp	r3, #9
 8003866:	d969      	bls.n	800393c <_vfiprintf_r+0x1a0>
 8003868:	b360      	cbz	r0, 80038c4 <_vfiprintf_r+0x128>
 800386a:	e024      	b.n	80038b6 <_vfiprintf_r+0x11a>
 800386c:	4b50      	ldr	r3, [pc, #320]	; (80039b0 <_vfiprintf_r+0x214>)
 800386e:	429c      	cmp	r4, r3
 8003870:	d101      	bne.n	8003876 <_vfiprintf_r+0xda>
 8003872:	68b4      	ldr	r4, [r6, #8]
 8003874:	e7a2      	b.n	80037bc <_vfiprintf_r+0x20>
 8003876:	4b4f      	ldr	r3, [pc, #316]	; (80039b4 <_vfiprintf_r+0x218>)
 8003878:	429c      	cmp	r4, r3
 800387a:	bf08      	it	eq
 800387c:	68f4      	ldreq	r4, [r6, #12]
 800387e:	e79d      	b.n	80037bc <_vfiprintf_r+0x20>
 8003880:	4621      	mov	r1, r4
 8003882:	4630      	mov	r0, r6
 8003884:	f7ff fd12 	bl	80032ac <__swsetup_r>
 8003888:	2800      	cmp	r0, #0
 800388a:	d09d      	beq.n	80037c8 <_vfiprintf_r+0x2c>
 800388c:	f04f 30ff 	mov.w	r0, #4294967295
 8003890:	b01d      	add	sp, #116	; 0x74
 8003892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003896:	46a8      	mov	r8, r5
 8003898:	e7a2      	b.n	80037e0 <_vfiprintf_r+0x44>
 800389a:	4a44      	ldr	r2, [pc, #272]	; (80039ac <_vfiprintf_r+0x210>)
 800389c:	1a80      	subs	r0, r0, r2
 800389e:	fa0b f000 	lsl.w	r0, fp, r0
 80038a2:	4318      	orrs	r0, r3
 80038a4:	9004      	str	r0, [sp, #16]
 80038a6:	4645      	mov	r5, r8
 80038a8:	e7be      	b.n	8003828 <_vfiprintf_r+0x8c>
 80038aa:	9a03      	ldr	r2, [sp, #12]
 80038ac:	1d11      	adds	r1, r2, #4
 80038ae:	6812      	ldr	r2, [r2, #0]
 80038b0:	9103      	str	r1, [sp, #12]
 80038b2:	2a00      	cmp	r2, #0
 80038b4:	db01      	blt.n	80038ba <_vfiprintf_r+0x11e>
 80038b6:	9207      	str	r2, [sp, #28]
 80038b8:	e004      	b.n	80038c4 <_vfiprintf_r+0x128>
 80038ba:	4252      	negs	r2, r2
 80038bc:	f043 0302 	orr.w	r3, r3, #2
 80038c0:	9207      	str	r2, [sp, #28]
 80038c2:	9304      	str	r3, [sp, #16]
 80038c4:	f898 3000 	ldrb.w	r3, [r8]
 80038c8:	2b2e      	cmp	r3, #46	; 0x2e
 80038ca:	d10e      	bne.n	80038ea <_vfiprintf_r+0x14e>
 80038cc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80038d0:	2b2a      	cmp	r3, #42	; 0x2a
 80038d2:	d138      	bne.n	8003946 <_vfiprintf_r+0x1aa>
 80038d4:	9b03      	ldr	r3, [sp, #12]
 80038d6:	1d1a      	adds	r2, r3, #4
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	9203      	str	r2, [sp, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	bfb8      	it	lt
 80038e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80038e4:	f108 0802 	add.w	r8, r8, #2
 80038e8:	9305      	str	r3, [sp, #20]
 80038ea:	4d33      	ldr	r5, [pc, #204]	; (80039b8 <_vfiprintf_r+0x21c>)
 80038ec:	f898 1000 	ldrb.w	r1, [r8]
 80038f0:	2203      	movs	r2, #3
 80038f2:	4628      	mov	r0, r5
 80038f4:	f7fc fc84 	bl	8000200 <memchr>
 80038f8:	b140      	cbz	r0, 800390c <_vfiprintf_r+0x170>
 80038fa:	2340      	movs	r3, #64	; 0x40
 80038fc:	1b40      	subs	r0, r0, r5
 80038fe:	fa03 f000 	lsl.w	r0, r3, r0
 8003902:	9b04      	ldr	r3, [sp, #16]
 8003904:	4303      	orrs	r3, r0
 8003906:	f108 0801 	add.w	r8, r8, #1
 800390a:	9304      	str	r3, [sp, #16]
 800390c:	f898 1000 	ldrb.w	r1, [r8]
 8003910:	482a      	ldr	r0, [pc, #168]	; (80039bc <_vfiprintf_r+0x220>)
 8003912:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003916:	2206      	movs	r2, #6
 8003918:	f108 0701 	add.w	r7, r8, #1
 800391c:	f7fc fc70 	bl	8000200 <memchr>
 8003920:	2800      	cmp	r0, #0
 8003922:	d037      	beq.n	8003994 <_vfiprintf_r+0x1f8>
 8003924:	4b26      	ldr	r3, [pc, #152]	; (80039c0 <_vfiprintf_r+0x224>)
 8003926:	bb1b      	cbnz	r3, 8003970 <_vfiprintf_r+0x1d4>
 8003928:	9b03      	ldr	r3, [sp, #12]
 800392a:	3307      	adds	r3, #7
 800392c:	f023 0307 	bic.w	r3, r3, #7
 8003930:	3308      	adds	r3, #8
 8003932:	9303      	str	r3, [sp, #12]
 8003934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003936:	444b      	add	r3, r9
 8003938:	9309      	str	r3, [sp, #36]	; 0x24
 800393a:	e750      	b.n	80037de <_vfiprintf_r+0x42>
 800393c:	fb05 3202 	mla	r2, r5, r2, r3
 8003940:	2001      	movs	r0, #1
 8003942:	4688      	mov	r8, r1
 8003944:	e78a      	b.n	800385c <_vfiprintf_r+0xc0>
 8003946:	2300      	movs	r3, #0
 8003948:	f108 0801 	add.w	r8, r8, #1
 800394c:	9305      	str	r3, [sp, #20]
 800394e:	4619      	mov	r1, r3
 8003950:	250a      	movs	r5, #10
 8003952:	4640      	mov	r0, r8
 8003954:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003958:	3a30      	subs	r2, #48	; 0x30
 800395a:	2a09      	cmp	r2, #9
 800395c:	d903      	bls.n	8003966 <_vfiprintf_r+0x1ca>
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0c3      	beq.n	80038ea <_vfiprintf_r+0x14e>
 8003962:	9105      	str	r1, [sp, #20]
 8003964:	e7c1      	b.n	80038ea <_vfiprintf_r+0x14e>
 8003966:	fb05 2101 	mla	r1, r5, r1, r2
 800396a:	2301      	movs	r3, #1
 800396c:	4680      	mov	r8, r0
 800396e:	e7f0      	b.n	8003952 <_vfiprintf_r+0x1b6>
 8003970:	ab03      	add	r3, sp, #12
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	4622      	mov	r2, r4
 8003976:	4b13      	ldr	r3, [pc, #76]	; (80039c4 <_vfiprintf_r+0x228>)
 8003978:	a904      	add	r1, sp, #16
 800397a:	4630      	mov	r0, r6
 800397c:	f3af 8000 	nop.w
 8003980:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003984:	4681      	mov	r9, r0
 8003986:	d1d5      	bne.n	8003934 <_vfiprintf_r+0x198>
 8003988:	89a3      	ldrh	r3, [r4, #12]
 800398a:	065b      	lsls	r3, r3, #25
 800398c:	f53f af7e 	bmi.w	800388c <_vfiprintf_r+0xf0>
 8003990:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003992:	e77d      	b.n	8003890 <_vfiprintf_r+0xf4>
 8003994:	ab03      	add	r3, sp, #12
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	4622      	mov	r2, r4
 800399a:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <_vfiprintf_r+0x228>)
 800399c:	a904      	add	r1, sp, #16
 800399e:	4630      	mov	r0, r6
 80039a0:	f000 f888 	bl	8003ab4 <_printf_i>
 80039a4:	e7ec      	b.n	8003980 <_vfiprintf_r+0x1e4>
 80039a6:	bf00      	nop
 80039a8:	080f5a78 	.word	0x080f5a78
 80039ac:	080f5ab8 	.word	0x080f5ab8
 80039b0:	080f5a98 	.word	0x080f5a98
 80039b4:	080f5a58 	.word	0x080f5a58
 80039b8:	080f5abe 	.word	0x080f5abe
 80039bc:	080f5ac2 	.word	0x080f5ac2
 80039c0:	00000000 	.word	0x00000000
 80039c4:	08003777 	.word	0x08003777

080039c8 <_printf_common>:
 80039c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039cc:	4691      	mov	r9, r2
 80039ce:	461f      	mov	r7, r3
 80039d0:	688a      	ldr	r2, [r1, #8]
 80039d2:	690b      	ldr	r3, [r1, #16]
 80039d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039d8:	4293      	cmp	r3, r2
 80039da:	bfb8      	it	lt
 80039dc:	4613      	movlt	r3, r2
 80039de:	f8c9 3000 	str.w	r3, [r9]
 80039e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039e6:	4606      	mov	r6, r0
 80039e8:	460c      	mov	r4, r1
 80039ea:	b112      	cbz	r2, 80039f2 <_printf_common+0x2a>
 80039ec:	3301      	adds	r3, #1
 80039ee:	f8c9 3000 	str.w	r3, [r9]
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	0699      	lsls	r1, r3, #26
 80039f6:	bf42      	ittt	mi
 80039f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80039fc:	3302      	addmi	r3, #2
 80039fe:	f8c9 3000 	strmi.w	r3, [r9]
 8003a02:	6825      	ldr	r5, [r4, #0]
 8003a04:	f015 0506 	ands.w	r5, r5, #6
 8003a08:	d107      	bne.n	8003a1a <_printf_common+0x52>
 8003a0a:	f104 0a19 	add.w	sl, r4, #25
 8003a0e:	68e3      	ldr	r3, [r4, #12]
 8003a10:	f8d9 2000 	ldr.w	r2, [r9]
 8003a14:	1a9b      	subs	r3, r3, r2
 8003a16:	42ab      	cmp	r3, r5
 8003a18:	dc28      	bgt.n	8003a6c <_printf_common+0xa4>
 8003a1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003a1e:	6822      	ldr	r2, [r4, #0]
 8003a20:	3300      	adds	r3, #0
 8003a22:	bf18      	it	ne
 8003a24:	2301      	movne	r3, #1
 8003a26:	0692      	lsls	r2, r2, #26
 8003a28:	d42d      	bmi.n	8003a86 <_printf_common+0xbe>
 8003a2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a2e:	4639      	mov	r1, r7
 8003a30:	4630      	mov	r0, r6
 8003a32:	47c0      	blx	r8
 8003a34:	3001      	adds	r0, #1
 8003a36:	d020      	beq.n	8003a7a <_printf_common+0xb2>
 8003a38:	6823      	ldr	r3, [r4, #0]
 8003a3a:	68e5      	ldr	r5, [r4, #12]
 8003a3c:	f8d9 2000 	ldr.w	r2, [r9]
 8003a40:	f003 0306 	and.w	r3, r3, #6
 8003a44:	2b04      	cmp	r3, #4
 8003a46:	bf08      	it	eq
 8003a48:	1aad      	subeq	r5, r5, r2
 8003a4a:	68a3      	ldr	r3, [r4, #8]
 8003a4c:	6922      	ldr	r2, [r4, #16]
 8003a4e:	bf0c      	ite	eq
 8003a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a54:	2500      	movne	r5, #0
 8003a56:	4293      	cmp	r3, r2
 8003a58:	bfc4      	itt	gt
 8003a5a:	1a9b      	subgt	r3, r3, r2
 8003a5c:	18ed      	addgt	r5, r5, r3
 8003a5e:	f04f 0900 	mov.w	r9, #0
 8003a62:	341a      	adds	r4, #26
 8003a64:	454d      	cmp	r5, r9
 8003a66:	d11a      	bne.n	8003a9e <_printf_common+0xd6>
 8003a68:	2000      	movs	r0, #0
 8003a6a:	e008      	b.n	8003a7e <_printf_common+0xb6>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	4652      	mov	r2, sl
 8003a70:	4639      	mov	r1, r7
 8003a72:	4630      	mov	r0, r6
 8003a74:	47c0      	blx	r8
 8003a76:	3001      	adds	r0, #1
 8003a78:	d103      	bne.n	8003a82 <_printf_common+0xba>
 8003a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a82:	3501      	adds	r5, #1
 8003a84:	e7c3      	b.n	8003a0e <_printf_common+0x46>
 8003a86:	18e1      	adds	r1, r4, r3
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	2030      	movs	r0, #48	; 0x30
 8003a8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a90:	4422      	add	r2, r4
 8003a92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a9a:	3302      	adds	r3, #2
 8003a9c:	e7c5      	b.n	8003a2a <_printf_common+0x62>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	4622      	mov	r2, r4
 8003aa2:	4639      	mov	r1, r7
 8003aa4:	4630      	mov	r0, r6
 8003aa6:	47c0      	blx	r8
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	d0e6      	beq.n	8003a7a <_printf_common+0xb2>
 8003aac:	f109 0901 	add.w	r9, r9, #1
 8003ab0:	e7d8      	b.n	8003a64 <_printf_common+0x9c>
	...

08003ab4 <_printf_i>:
 8003ab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ab8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003abc:	460c      	mov	r4, r1
 8003abe:	7e09      	ldrb	r1, [r1, #24]
 8003ac0:	b085      	sub	sp, #20
 8003ac2:	296e      	cmp	r1, #110	; 0x6e
 8003ac4:	4617      	mov	r7, r2
 8003ac6:	4606      	mov	r6, r0
 8003ac8:	4698      	mov	r8, r3
 8003aca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003acc:	f000 80b3 	beq.w	8003c36 <_printf_i+0x182>
 8003ad0:	d822      	bhi.n	8003b18 <_printf_i+0x64>
 8003ad2:	2963      	cmp	r1, #99	; 0x63
 8003ad4:	d036      	beq.n	8003b44 <_printf_i+0x90>
 8003ad6:	d80a      	bhi.n	8003aee <_printf_i+0x3a>
 8003ad8:	2900      	cmp	r1, #0
 8003ada:	f000 80b9 	beq.w	8003c50 <_printf_i+0x19c>
 8003ade:	2958      	cmp	r1, #88	; 0x58
 8003ae0:	f000 8083 	beq.w	8003bea <_printf_i+0x136>
 8003ae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ae8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003aec:	e032      	b.n	8003b54 <_printf_i+0xa0>
 8003aee:	2964      	cmp	r1, #100	; 0x64
 8003af0:	d001      	beq.n	8003af6 <_printf_i+0x42>
 8003af2:	2969      	cmp	r1, #105	; 0x69
 8003af4:	d1f6      	bne.n	8003ae4 <_printf_i+0x30>
 8003af6:	6820      	ldr	r0, [r4, #0]
 8003af8:	6813      	ldr	r3, [r2, #0]
 8003afa:	0605      	lsls	r5, r0, #24
 8003afc:	f103 0104 	add.w	r1, r3, #4
 8003b00:	d52a      	bpl.n	8003b58 <_printf_i+0xa4>
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6011      	str	r1, [r2, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	da03      	bge.n	8003b12 <_printf_i+0x5e>
 8003b0a:	222d      	movs	r2, #45	; 0x2d
 8003b0c:	425b      	negs	r3, r3
 8003b0e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003b12:	486f      	ldr	r0, [pc, #444]	; (8003cd0 <_printf_i+0x21c>)
 8003b14:	220a      	movs	r2, #10
 8003b16:	e039      	b.n	8003b8c <_printf_i+0xd8>
 8003b18:	2973      	cmp	r1, #115	; 0x73
 8003b1a:	f000 809d 	beq.w	8003c58 <_printf_i+0x1a4>
 8003b1e:	d808      	bhi.n	8003b32 <_printf_i+0x7e>
 8003b20:	296f      	cmp	r1, #111	; 0x6f
 8003b22:	d020      	beq.n	8003b66 <_printf_i+0xb2>
 8003b24:	2970      	cmp	r1, #112	; 0x70
 8003b26:	d1dd      	bne.n	8003ae4 <_printf_i+0x30>
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	f043 0320 	orr.w	r3, r3, #32
 8003b2e:	6023      	str	r3, [r4, #0]
 8003b30:	e003      	b.n	8003b3a <_printf_i+0x86>
 8003b32:	2975      	cmp	r1, #117	; 0x75
 8003b34:	d017      	beq.n	8003b66 <_printf_i+0xb2>
 8003b36:	2978      	cmp	r1, #120	; 0x78
 8003b38:	d1d4      	bne.n	8003ae4 <_printf_i+0x30>
 8003b3a:	2378      	movs	r3, #120	; 0x78
 8003b3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b40:	4864      	ldr	r0, [pc, #400]	; (8003cd4 <_printf_i+0x220>)
 8003b42:	e055      	b.n	8003bf0 <_printf_i+0x13c>
 8003b44:	6813      	ldr	r3, [r2, #0]
 8003b46:	1d19      	adds	r1, r3, #4
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6011      	str	r1, [r2, #0]
 8003b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b54:	2301      	movs	r3, #1
 8003b56:	e08c      	b.n	8003c72 <_printf_i+0x1be>
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6011      	str	r1, [r2, #0]
 8003b5c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b60:	bf18      	it	ne
 8003b62:	b21b      	sxthne	r3, r3
 8003b64:	e7cf      	b.n	8003b06 <_printf_i+0x52>
 8003b66:	6813      	ldr	r3, [r2, #0]
 8003b68:	6825      	ldr	r5, [r4, #0]
 8003b6a:	1d18      	adds	r0, r3, #4
 8003b6c:	6010      	str	r0, [r2, #0]
 8003b6e:	0628      	lsls	r0, r5, #24
 8003b70:	d501      	bpl.n	8003b76 <_printf_i+0xc2>
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	e002      	b.n	8003b7c <_printf_i+0xc8>
 8003b76:	0668      	lsls	r0, r5, #25
 8003b78:	d5fb      	bpl.n	8003b72 <_printf_i+0xbe>
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	4854      	ldr	r0, [pc, #336]	; (8003cd0 <_printf_i+0x21c>)
 8003b7e:	296f      	cmp	r1, #111	; 0x6f
 8003b80:	bf14      	ite	ne
 8003b82:	220a      	movne	r2, #10
 8003b84:	2208      	moveq	r2, #8
 8003b86:	2100      	movs	r1, #0
 8003b88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b8c:	6865      	ldr	r5, [r4, #4]
 8003b8e:	60a5      	str	r5, [r4, #8]
 8003b90:	2d00      	cmp	r5, #0
 8003b92:	f2c0 8095 	blt.w	8003cc0 <_printf_i+0x20c>
 8003b96:	6821      	ldr	r1, [r4, #0]
 8003b98:	f021 0104 	bic.w	r1, r1, #4
 8003b9c:	6021      	str	r1, [r4, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d13d      	bne.n	8003c1e <_printf_i+0x16a>
 8003ba2:	2d00      	cmp	r5, #0
 8003ba4:	f040 808e 	bne.w	8003cc4 <_printf_i+0x210>
 8003ba8:	4665      	mov	r5, ip
 8003baa:	2a08      	cmp	r2, #8
 8003bac:	d10b      	bne.n	8003bc6 <_printf_i+0x112>
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	07db      	lsls	r3, r3, #31
 8003bb2:	d508      	bpl.n	8003bc6 <_printf_i+0x112>
 8003bb4:	6923      	ldr	r3, [r4, #16]
 8003bb6:	6862      	ldr	r2, [r4, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	bfde      	ittt	le
 8003bbc:	2330      	movle	r3, #48	; 0x30
 8003bbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003bc2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003bc6:	ebac 0305 	sub.w	r3, ip, r5
 8003bca:	6123      	str	r3, [r4, #16]
 8003bcc:	f8cd 8000 	str.w	r8, [sp]
 8003bd0:	463b      	mov	r3, r7
 8003bd2:	aa03      	add	r2, sp, #12
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	4630      	mov	r0, r6
 8003bd8:	f7ff fef6 	bl	80039c8 <_printf_common>
 8003bdc:	3001      	adds	r0, #1
 8003bde:	d14d      	bne.n	8003c7c <_printf_i+0x1c8>
 8003be0:	f04f 30ff 	mov.w	r0, #4294967295
 8003be4:	b005      	add	sp, #20
 8003be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003bea:	4839      	ldr	r0, [pc, #228]	; (8003cd0 <_printf_i+0x21c>)
 8003bec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003bf0:	6813      	ldr	r3, [r2, #0]
 8003bf2:	6821      	ldr	r1, [r4, #0]
 8003bf4:	1d1d      	adds	r5, r3, #4
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6015      	str	r5, [r2, #0]
 8003bfa:	060a      	lsls	r2, r1, #24
 8003bfc:	d50b      	bpl.n	8003c16 <_printf_i+0x162>
 8003bfe:	07ca      	lsls	r2, r1, #31
 8003c00:	bf44      	itt	mi
 8003c02:	f041 0120 	orrmi.w	r1, r1, #32
 8003c06:	6021      	strmi	r1, [r4, #0]
 8003c08:	b91b      	cbnz	r3, 8003c12 <_printf_i+0x15e>
 8003c0a:	6822      	ldr	r2, [r4, #0]
 8003c0c:	f022 0220 	bic.w	r2, r2, #32
 8003c10:	6022      	str	r2, [r4, #0]
 8003c12:	2210      	movs	r2, #16
 8003c14:	e7b7      	b.n	8003b86 <_printf_i+0xd2>
 8003c16:	064d      	lsls	r5, r1, #25
 8003c18:	bf48      	it	mi
 8003c1a:	b29b      	uxthmi	r3, r3
 8003c1c:	e7ef      	b.n	8003bfe <_printf_i+0x14a>
 8003c1e:	4665      	mov	r5, ip
 8003c20:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c24:	fb02 3311 	mls	r3, r2, r1, r3
 8003c28:	5cc3      	ldrb	r3, [r0, r3]
 8003c2a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003c2e:	460b      	mov	r3, r1
 8003c30:	2900      	cmp	r1, #0
 8003c32:	d1f5      	bne.n	8003c20 <_printf_i+0x16c>
 8003c34:	e7b9      	b.n	8003baa <_printf_i+0xf6>
 8003c36:	6813      	ldr	r3, [r2, #0]
 8003c38:	6825      	ldr	r5, [r4, #0]
 8003c3a:	6961      	ldr	r1, [r4, #20]
 8003c3c:	1d18      	adds	r0, r3, #4
 8003c3e:	6010      	str	r0, [r2, #0]
 8003c40:	0628      	lsls	r0, r5, #24
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	d501      	bpl.n	8003c4a <_printf_i+0x196>
 8003c46:	6019      	str	r1, [r3, #0]
 8003c48:	e002      	b.n	8003c50 <_printf_i+0x19c>
 8003c4a:	066a      	lsls	r2, r5, #25
 8003c4c:	d5fb      	bpl.n	8003c46 <_printf_i+0x192>
 8003c4e:	8019      	strh	r1, [r3, #0]
 8003c50:	2300      	movs	r3, #0
 8003c52:	6123      	str	r3, [r4, #16]
 8003c54:	4665      	mov	r5, ip
 8003c56:	e7b9      	b.n	8003bcc <_printf_i+0x118>
 8003c58:	6813      	ldr	r3, [r2, #0]
 8003c5a:	1d19      	adds	r1, r3, #4
 8003c5c:	6011      	str	r1, [r2, #0]
 8003c5e:	681d      	ldr	r5, [r3, #0]
 8003c60:	6862      	ldr	r2, [r4, #4]
 8003c62:	2100      	movs	r1, #0
 8003c64:	4628      	mov	r0, r5
 8003c66:	f7fc facb 	bl	8000200 <memchr>
 8003c6a:	b108      	cbz	r0, 8003c70 <_printf_i+0x1bc>
 8003c6c:	1b40      	subs	r0, r0, r5
 8003c6e:	6060      	str	r0, [r4, #4]
 8003c70:	6863      	ldr	r3, [r4, #4]
 8003c72:	6123      	str	r3, [r4, #16]
 8003c74:	2300      	movs	r3, #0
 8003c76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c7a:	e7a7      	b.n	8003bcc <_printf_i+0x118>
 8003c7c:	6923      	ldr	r3, [r4, #16]
 8003c7e:	462a      	mov	r2, r5
 8003c80:	4639      	mov	r1, r7
 8003c82:	4630      	mov	r0, r6
 8003c84:	47c0      	blx	r8
 8003c86:	3001      	adds	r0, #1
 8003c88:	d0aa      	beq.n	8003be0 <_printf_i+0x12c>
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	079b      	lsls	r3, r3, #30
 8003c8e:	d413      	bmi.n	8003cb8 <_printf_i+0x204>
 8003c90:	68e0      	ldr	r0, [r4, #12]
 8003c92:	9b03      	ldr	r3, [sp, #12]
 8003c94:	4298      	cmp	r0, r3
 8003c96:	bfb8      	it	lt
 8003c98:	4618      	movlt	r0, r3
 8003c9a:	e7a3      	b.n	8003be4 <_printf_i+0x130>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	464a      	mov	r2, r9
 8003ca0:	4639      	mov	r1, r7
 8003ca2:	4630      	mov	r0, r6
 8003ca4:	47c0      	blx	r8
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	d09a      	beq.n	8003be0 <_printf_i+0x12c>
 8003caa:	3501      	adds	r5, #1
 8003cac:	68e3      	ldr	r3, [r4, #12]
 8003cae:	9a03      	ldr	r2, [sp, #12]
 8003cb0:	1a9b      	subs	r3, r3, r2
 8003cb2:	42ab      	cmp	r3, r5
 8003cb4:	dcf2      	bgt.n	8003c9c <_printf_i+0x1e8>
 8003cb6:	e7eb      	b.n	8003c90 <_printf_i+0x1dc>
 8003cb8:	2500      	movs	r5, #0
 8003cba:	f104 0919 	add.w	r9, r4, #25
 8003cbe:	e7f5      	b.n	8003cac <_printf_i+0x1f8>
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1ac      	bne.n	8003c1e <_printf_i+0x16a>
 8003cc4:	7803      	ldrb	r3, [r0, #0]
 8003cc6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cce:	e76c      	b.n	8003baa <_printf_i+0xf6>
 8003cd0:	080f5ac9 	.word	0x080f5ac9
 8003cd4:	080f5ada 	.word	0x080f5ada

08003cd8 <__sread>:
 8003cd8:	b510      	push	{r4, lr}
 8003cda:	460c      	mov	r4, r1
 8003cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ce0:	f000 f894 	bl	8003e0c <_read_r>
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	bfab      	itete	ge
 8003ce8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cea:	89a3      	ldrhlt	r3, [r4, #12]
 8003cec:	181b      	addge	r3, r3, r0
 8003cee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cf2:	bfac      	ite	ge
 8003cf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003cf6:	81a3      	strhlt	r3, [r4, #12]
 8003cf8:	bd10      	pop	{r4, pc}

08003cfa <__swrite>:
 8003cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cfe:	461f      	mov	r7, r3
 8003d00:	898b      	ldrh	r3, [r1, #12]
 8003d02:	05db      	lsls	r3, r3, #23
 8003d04:	4605      	mov	r5, r0
 8003d06:	460c      	mov	r4, r1
 8003d08:	4616      	mov	r6, r2
 8003d0a:	d505      	bpl.n	8003d18 <__swrite+0x1e>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d14:	f000 f868 	bl	8003de8 <_lseek_r>
 8003d18:	89a3      	ldrh	r3, [r4, #12]
 8003d1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d22:	81a3      	strh	r3, [r4, #12]
 8003d24:	4632      	mov	r2, r6
 8003d26:	463b      	mov	r3, r7
 8003d28:	4628      	mov	r0, r5
 8003d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d2e:	f000 b817 	b.w	8003d60 <_write_r>

08003d32 <__sseek>:
 8003d32:	b510      	push	{r4, lr}
 8003d34:	460c      	mov	r4, r1
 8003d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d3a:	f000 f855 	bl	8003de8 <_lseek_r>
 8003d3e:	1c43      	adds	r3, r0, #1
 8003d40:	89a3      	ldrh	r3, [r4, #12]
 8003d42:	bf15      	itete	ne
 8003d44:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d4e:	81a3      	strheq	r3, [r4, #12]
 8003d50:	bf18      	it	ne
 8003d52:	81a3      	strhne	r3, [r4, #12]
 8003d54:	bd10      	pop	{r4, pc}

08003d56 <__sclose>:
 8003d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d5a:	f000 b813 	b.w	8003d84 <_close_r>
	...

08003d60 <_write_r>:
 8003d60:	b538      	push	{r3, r4, r5, lr}
 8003d62:	4c07      	ldr	r4, [pc, #28]	; (8003d80 <_write_r+0x20>)
 8003d64:	4605      	mov	r5, r0
 8003d66:	4608      	mov	r0, r1
 8003d68:	4611      	mov	r1, r2
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	6022      	str	r2, [r4, #0]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f7fd f873 	bl	8000e5a <_write>
 8003d74:	1c43      	adds	r3, r0, #1
 8003d76:	d102      	bne.n	8003d7e <_write_r+0x1e>
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	b103      	cbz	r3, 8003d7e <_write_r+0x1e>
 8003d7c:	602b      	str	r3, [r5, #0]
 8003d7e:	bd38      	pop	{r3, r4, r5, pc}
 8003d80:	20000130 	.word	0x20000130

08003d84 <_close_r>:
 8003d84:	b538      	push	{r3, r4, r5, lr}
 8003d86:	4c06      	ldr	r4, [pc, #24]	; (8003da0 <_close_r+0x1c>)
 8003d88:	2300      	movs	r3, #0
 8003d8a:	4605      	mov	r5, r0
 8003d8c:	4608      	mov	r0, r1
 8003d8e:	6023      	str	r3, [r4, #0]
 8003d90:	f7fd f87f 	bl	8000e92 <_close>
 8003d94:	1c43      	adds	r3, r0, #1
 8003d96:	d102      	bne.n	8003d9e <_close_r+0x1a>
 8003d98:	6823      	ldr	r3, [r4, #0]
 8003d9a:	b103      	cbz	r3, 8003d9e <_close_r+0x1a>
 8003d9c:	602b      	str	r3, [r5, #0]
 8003d9e:	bd38      	pop	{r3, r4, r5, pc}
 8003da0:	20000130 	.word	0x20000130

08003da4 <_fstat_r>:
 8003da4:	b538      	push	{r3, r4, r5, lr}
 8003da6:	4c07      	ldr	r4, [pc, #28]	; (8003dc4 <_fstat_r+0x20>)
 8003da8:	2300      	movs	r3, #0
 8003daa:	4605      	mov	r5, r0
 8003dac:	4608      	mov	r0, r1
 8003dae:	4611      	mov	r1, r2
 8003db0:	6023      	str	r3, [r4, #0]
 8003db2:	f7fd f87a 	bl	8000eaa <_fstat>
 8003db6:	1c43      	adds	r3, r0, #1
 8003db8:	d102      	bne.n	8003dc0 <_fstat_r+0x1c>
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	b103      	cbz	r3, 8003dc0 <_fstat_r+0x1c>
 8003dbe:	602b      	str	r3, [r5, #0]
 8003dc0:	bd38      	pop	{r3, r4, r5, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000130 	.word	0x20000130

08003dc8 <_isatty_r>:
 8003dc8:	b538      	push	{r3, r4, r5, lr}
 8003dca:	4c06      	ldr	r4, [pc, #24]	; (8003de4 <_isatty_r+0x1c>)
 8003dcc:	2300      	movs	r3, #0
 8003dce:	4605      	mov	r5, r0
 8003dd0:	4608      	mov	r0, r1
 8003dd2:	6023      	str	r3, [r4, #0]
 8003dd4:	f7fd f879 	bl	8000eca <_isatty>
 8003dd8:	1c43      	adds	r3, r0, #1
 8003dda:	d102      	bne.n	8003de2 <_isatty_r+0x1a>
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	b103      	cbz	r3, 8003de2 <_isatty_r+0x1a>
 8003de0:	602b      	str	r3, [r5, #0]
 8003de2:	bd38      	pop	{r3, r4, r5, pc}
 8003de4:	20000130 	.word	0x20000130

08003de8 <_lseek_r>:
 8003de8:	b538      	push	{r3, r4, r5, lr}
 8003dea:	4c07      	ldr	r4, [pc, #28]	; (8003e08 <_lseek_r+0x20>)
 8003dec:	4605      	mov	r5, r0
 8003dee:	4608      	mov	r0, r1
 8003df0:	4611      	mov	r1, r2
 8003df2:	2200      	movs	r2, #0
 8003df4:	6022      	str	r2, [r4, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	f7fd f872 	bl	8000ee0 <_lseek>
 8003dfc:	1c43      	adds	r3, r0, #1
 8003dfe:	d102      	bne.n	8003e06 <_lseek_r+0x1e>
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	b103      	cbz	r3, 8003e06 <_lseek_r+0x1e>
 8003e04:	602b      	str	r3, [r5, #0]
 8003e06:	bd38      	pop	{r3, r4, r5, pc}
 8003e08:	20000130 	.word	0x20000130

08003e0c <_read_r>:
 8003e0c:	b538      	push	{r3, r4, r5, lr}
 8003e0e:	4c07      	ldr	r4, [pc, #28]	; (8003e2c <_read_r+0x20>)
 8003e10:	4605      	mov	r5, r0
 8003e12:	4608      	mov	r0, r1
 8003e14:	4611      	mov	r1, r2
 8003e16:	2200      	movs	r2, #0
 8003e18:	6022      	str	r2, [r4, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f7fd f800 	bl	8000e20 <_read>
 8003e20:	1c43      	adds	r3, r0, #1
 8003e22:	d102      	bne.n	8003e2a <_read_r+0x1e>
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	b103      	cbz	r3, 8003e2a <_read_r+0x1e>
 8003e28:	602b      	str	r3, [r5, #0]
 8003e2a:	bd38      	pop	{r3, r4, r5, pc}
 8003e2c:	20000130 	.word	0x20000130

08003e30 <_init>:
 8003e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e32:	bf00      	nop
 8003e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e36:	bc08      	pop	{r3}
 8003e38:	469e      	mov	lr, r3
 8003e3a:	4770      	bx	lr

08003e3c <_fini>:
 8003e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3e:	bf00      	nop
 8003e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e42:	bc08      	pop	{r3}
 8003e44:	469e      	mov	lr, r3
 8003e46:	4770      	bx	lr
=======
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f7ff ff5d 	bl	8002d5e <SPI_WaitFifoStateUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eae:	f043 0220 	orr.w	r2, r3, #32
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e000      	b.n	8002ebc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <__errno>:
 8002ec4:	4b01      	ldr	r3, [pc, #4]	; (8002ecc <__errno+0x8>)
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	2000000c 	.word	0x2000000c

08002ed0 <__libc_init_array>:
 8002ed0:	b570      	push	{r4, r5, r6, lr}
 8002ed2:	4e0d      	ldr	r6, [pc, #52]	; (8002f08 <__libc_init_array+0x38>)
 8002ed4:	4c0d      	ldr	r4, [pc, #52]	; (8002f0c <__libc_init_array+0x3c>)
 8002ed6:	1ba4      	subs	r4, r4, r6
 8002ed8:	10a4      	asrs	r4, r4, #2
 8002eda:	2500      	movs	r5, #0
 8002edc:	42a5      	cmp	r5, r4
 8002ede:	d109      	bne.n	8002ef4 <__libc_init_array+0x24>
 8002ee0:	4e0b      	ldr	r6, [pc, #44]	; (8002f10 <__libc_init_array+0x40>)
 8002ee2:	4c0c      	ldr	r4, [pc, #48]	; (8002f14 <__libc_init_array+0x44>)
 8002ee4:	f000 ff68 	bl	8003db8 <_init>
 8002ee8:	1ba4      	subs	r4, r4, r6
 8002eea:	10a4      	asrs	r4, r4, #2
 8002eec:	2500      	movs	r5, #0
 8002eee:	42a5      	cmp	r5, r4
 8002ef0:	d105      	bne.n	8002efe <__libc_init_array+0x2e>
 8002ef2:	bd70      	pop	{r4, r5, r6, pc}
 8002ef4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ef8:	4798      	blx	r3
 8002efa:	3501      	adds	r5, #1
 8002efc:	e7ee      	b.n	8002edc <__libc_init_array+0xc>
 8002efe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f02:	4798      	blx	r3
 8002f04:	3501      	adds	r5, #1
 8002f06:	e7f2      	b.n	8002eee <__libc_init_array+0x1e>
 8002f08:	0816e80c 	.word	0x0816e80c
 8002f0c:	0816e80c 	.word	0x0816e80c
 8002f10:	0816e80c 	.word	0x0816e80c
 8002f14:	0816e810 	.word	0x0816e810

08002f18 <memset>:
 8002f18:	4402      	add	r2, r0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d100      	bne.n	8002f22 <memset+0xa>
 8002f20:	4770      	bx	lr
 8002f22:	f803 1b01 	strb.w	r1, [r3], #1
 8002f26:	e7f9      	b.n	8002f1c <memset+0x4>

08002f28 <iprintf>:
 8002f28:	b40f      	push	{r0, r1, r2, r3}
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <iprintf+0x2c>)
 8002f2c:	b513      	push	{r0, r1, r4, lr}
 8002f2e:	681c      	ldr	r4, [r3, #0]
 8002f30:	b124      	cbz	r4, 8002f3c <iprintf+0x14>
 8002f32:	69a3      	ldr	r3, [r4, #24]
 8002f34:	b913      	cbnz	r3, 8002f3c <iprintf+0x14>
 8002f36:	4620      	mov	r0, r4
 8002f38:	f000 fa22 	bl	8003380 <__sinit>
 8002f3c:	ab05      	add	r3, sp, #20
 8002f3e:	9a04      	ldr	r2, [sp, #16]
 8002f40:	68a1      	ldr	r1, [r4, #8]
 8002f42:	9301      	str	r3, [sp, #4]
 8002f44:	4620      	mov	r0, r4
 8002f46:	f000 fbdb 	bl	8003700 <_vfiprintf_r>
 8002f4a:	b002      	add	sp, #8
 8002f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f50:	b004      	add	sp, #16
 8002f52:	4770      	bx	lr
 8002f54:	2000000c 	.word	0x2000000c

08002f58 <_puts_r>:
 8002f58:	b570      	push	{r4, r5, r6, lr}
 8002f5a:	460e      	mov	r6, r1
 8002f5c:	4605      	mov	r5, r0
 8002f5e:	b118      	cbz	r0, 8002f68 <_puts_r+0x10>
 8002f60:	6983      	ldr	r3, [r0, #24]
 8002f62:	b90b      	cbnz	r3, 8002f68 <_puts_r+0x10>
 8002f64:	f000 fa0c 	bl	8003380 <__sinit>
 8002f68:	69ab      	ldr	r3, [r5, #24]
 8002f6a:	68ac      	ldr	r4, [r5, #8]
 8002f6c:	b913      	cbnz	r3, 8002f74 <_puts_r+0x1c>
 8002f6e:	4628      	mov	r0, r5
 8002f70:	f000 fa06 	bl	8003380 <__sinit>
 8002f74:	4b23      	ldr	r3, [pc, #140]	; (8003004 <_puts_r+0xac>)
 8002f76:	429c      	cmp	r4, r3
 8002f78:	d117      	bne.n	8002faa <_puts_r+0x52>
 8002f7a:	686c      	ldr	r4, [r5, #4]
 8002f7c:	89a3      	ldrh	r3, [r4, #12]
 8002f7e:	071b      	lsls	r3, r3, #28
 8002f80:	d51d      	bpl.n	8002fbe <_puts_r+0x66>
 8002f82:	6923      	ldr	r3, [r4, #16]
 8002f84:	b1db      	cbz	r3, 8002fbe <_puts_r+0x66>
 8002f86:	3e01      	subs	r6, #1
 8002f88:	68a3      	ldr	r3, [r4, #8]
 8002f8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	60a3      	str	r3, [r4, #8]
 8002f92:	b9e9      	cbnz	r1, 8002fd0 <_puts_r+0x78>
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	da2e      	bge.n	8002ff6 <_puts_r+0x9e>
 8002f98:	4622      	mov	r2, r4
 8002f9a:	210a      	movs	r1, #10
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	f000 f83f 	bl	8003020 <__swbuf_r>
 8002fa2:	3001      	adds	r0, #1
 8002fa4:	d011      	beq.n	8002fca <_puts_r+0x72>
 8002fa6:	200a      	movs	r0, #10
 8002fa8:	e011      	b.n	8002fce <_puts_r+0x76>
 8002faa:	4b17      	ldr	r3, [pc, #92]	; (8003008 <_puts_r+0xb0>)
 8002fac:	429c      	cmp	r4, r3
 8002fae:	d101      	bne.n	8002fb4 <_puts_r+0x5c>
 8002fb0:	68ac      	ldr	r4, [r5, #8]
 8002fb2:	e7e3      	b.n	8002f7c <_puts_r+0x24>
 8002fb4:	4b15      	ldr	r3, [pc, #84]	; (800300c <_puts_r+0xb4>)
 8002fb6:	429c      	cmp	r4, r3
 8002fb8:	bf08      	it	eq
 8002fba:	68ec      	ldreq	r4, [r5, #12]
 8002fbc:	e7de      	b.n	8002f7c <_puts_r+0x24>
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	4628      	mov	r0, r5
 8002fc2:	f000 f87f 	bl	80030c4 <__swsetup_r>
 8002fc6:	2800      	cmp	r0, #0
 8002fc8:	d0dd      	beq.n	8002f86 <_puts_r+0x2e>
 8002fca:	f04f 30ff 	mov.w	r0, #4294967295
 8002fce:	bd70      	pop	{r4, r5, r6, pc}
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	da04      	bge.n	8002fde <_puts_r+0x86>
 8002fd4:	69a2      	ldr	r2, [r4, #24]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	dc06      	bgt.n	8002fe8 <_puts_r+0x90>
 8002fda:	290a      	cmp	r1, #10
 8002fdc:	d004      	beq.n	8002fe8 <_puts_r+0x90>
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	6022      	str	r2, [r4, #0]
 8002fe4:	7019      	strb	r1, [r3, #0]
 8002fe6:	e7cf      	b.n	8002f88 <_puts_r+0x30>
 8002fe8:	4622      	mov	r2, r4
 8002fea:	4628      	mov	r0, r5
 8002fec:	f000 f818 	bl	8003020 <__swbuf_r>
 8002ff0:	3001      	adds	r0, #1
 8002ff2:	d1c9      	bne.n	8002f88 <_puts_r+0x30>
 8002ff4:	e7e9      	b.n	8002fca <_puts_r+0x72>
 8002ff6:	6823      	ldr	r3, [r4, #0]
 8002ff8:	200a      	movs	r0, #10
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	6022      	str	r2, [r4, #0]
 8002ffe:	7018      	strb	r0, [r3, #0]
 8003000:	e7e5      	b.n	8002fce <_puts_r+0x76>
 8003002:	bf00      	nop
 8003004:	0816e798 	.word	0x0816e798
 8003008:	0816e7b8 	.word	0x0816e7b8
 800300c:	0816e778 	.word	0x0816e778

08003010 <puts>:
 8003010:	4b02      	ldr	r3, [pc, #8]	; (800301c <puts+0xc>)
 8003012:	4601      	mov	r1, r0
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	f7ff bf9f 	b.w	8002f58 <_puts_r>
 800301a:	bf00      	nop
 800301c:	2000000c 	.word	0x2000000c

08003020 <__swbuf_r>:
 8003020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003022:	460e      	mov	r6, r1
 8003024:	4614      	mov	r4, r2
 8003026:	4605      	mov	r5, r0
 8003028:	b118      	cbz	r0, 8003032 <__swbuf_r+0x12>
 800302a:	6983      	ldr	r3, [r0, #24]
 800302c:	b90b      	cbnz	r3, 8003032 <__swbuf_r+0x12>
 800302e:	f000 f9a7 	bl	8003380 <__sinit>
 8003032:	4b21      	ldr	r3, [pc, #132]	; (80030b8 <__swbuf_r+0x98>)
 8003034:	429c      	cmp	r4, r3
 8003036:	d12a      	bne.n	800308e <__swbuf_r+0x6e>
 8003038:	686c      	ldr	r4, [r5, #4]
 800303a:	69a3      	ldr	r3, [r4, #24]
 800303c:	60a3      	str	r3, [r4, #8]
 800303e:	89a3      	ldrh	r3, [r4, #12]
 8003040:	071a      	lsls	r2, r3, #28
 8003042:	d52e      	bpl.n	80030a2 <__swbuf_r+0x82>
 8003044:	6923      	ldr	r3, [r4, #16]
 8003046:	b363      	cbz	r3, 80030a2 <__swbuf_r+0x82>
 8003048:	6923      	ldr	r3, [r4, #16]
 800304a:	6820      	ldr	r0, [r4, #0]
 800304c:	1ac0      	subs	r0, r0, r3
 800304e:	6963      	ldr	r3, [r4, #20]
 8003050:	b2f6      	uxtb	r6, r6
 8003052:	4283      	cmp	r3, r0
 8003054:	4637      	mov	r7, r6
 8003056:	dc04      	bgt.n	8003062 <__swbuf_r+0x42>
 8003058:	4621      	mov	r1, r4
 800305a:	4628      	mov	r0, r5
 800305c:	f000 f926 	bl	80032ac <_fflush_r>
 8003060:	bb28      	cbnz	r0, 80030ae <__swbuf_r+0x8e>
 8003062:	68a3      	ldr	r3, [r4, #8]
 8003064:	3b01      	subs	r3, #1
 8003066:	60a3      	str	r3, [r4, #8]
 8003068:	6823      	ldr	r3, [r4, #0]
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	6022      	str	r2, [r4, #0]
 800306e:	701e      	strb	r6, [r3, #0]
 8003070:	6963      	ldr	r3, [r4, #20]
 8003072:	3001      	adds	r0, #1
 8003074:	4283      	cmp	r3, r0
 8003076:	d004      	beq.n	8003082 <__swbuf_r+0x62>
 8003078:	89a3      	ldrh	r3, [r4, #12]
 800307a:	07db      	lsls	r3, r3, #31
 800307c:	d519      	bpl.n	80030b2 <__swbuf_r+0x92>
 800307e:	2e0a      	cmp	r6, #10
 8003080:	d117      	bne.n	80030b2 <__swbuf_r+0x92>
 8003082:	4621      	mov	r1, r4
 8003084:	4628      	mov	r0, r5
 8003086:	f000 f911 	bl	80032ac <_fflush_r>
 800308a:	b190      	cbz	r0, 80030b2 <__swbuf_r+0x92>
 800308c:	e00f      	b.n	80030ae <__swbuf_r+0x8e>
 800308e:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <__swbuf_r+0x9c>)
 8003090:	429c      	cmp	r4, r3
 8003092:	d101      	bne.n	8003098 <__swbuf_r+0x78>
 8003094:	68ac      	ldr	r4, [r5, #8]
 8003096:	e7d0      	b.n	800303a <__swbuf_r+0x1a>
 8003098:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <__swbuf_r+0xa0>)
 800309a:	429c      	cmp	r4, r3
 800309c:	bf08      	it	eq
 800309e:	68ec      	ldreq	r4, [r5, #12]
 80030a0:	e7cb      	b.n	800303a <__swbuf_r+0x1a>
 80030a2:	4621      	mov	r1, r4
 80030a4:	4628      	mov	r0, r5
 80030a6:	f000 f80d 	bl	80030c4 <__swsetup_r>
 80030aa:	2800      	cmp	r0, #0
 80030ac:	d0cc      	beq.n	8003048 <__swbuf_r+0x28>
 80030ae:	f04f 37ff 	mov.w	r7, #4294967295
 80030b2:	4638      	mov	r0, r7
 80030b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030b6:	bf00      	nop
 80030b8:	0816e798 	.word	0x0816e798
 80030bc:	0816e7b8 	.word	0x0816e7b8
 80030c0:	0816e778 	.word	0x0816e778

080030c4 <__swsetup_r>:
 80030c4:	4b32      	ldr	r3, [pc, #200]	; (8003190 <__swsetup_r+0xcc>)
 80030c6:	b570      	push	{r4, r5, r6, lr}
 80030c8:	681d      	ldr	r5, [r3, #0]
 80030ca:	4606      	mov	r6, r0
 80030cc:	460c      	mov	r4, r1
 80030ce:	b125      	cbz	r5, 80030da <__swsetup_r+0x16>
 80030d0:	69ab      	ldr	r3, [r5, #24]
 80030d2:	b913      	cbnz	r3, 80030da <__swsetup_r+0x16>
 80030d4:	4628      	mov	r0, r5
 80030d6:	f000 f953 	bl	8003380 <__sinit>
 80030da:	4b2e      	ldr	r3, [pc, #184]	; (8003194 <__swsetup_r+0xd0>)
 80030dc:	429c      	cmp	r4, r3
 80030de:	d10f      	bne.n	8003100 <__swsetup_r+0x3c>
 80030e0:	686c      	ldr	r4, [r5, #4]
 80030e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	0715      	lsls	r5, r2, #28
 80030ea:	d42c      	bmi.n	8003146 <__swsetup_r+0x82>
 80030ec:	06d0      	lsls	r0, r2, #27
 80030ee:	d411      	bmi.n	8003114 <__swsetup_r+0x50>
 80030f0:	2209      	movs	r2, #9
 80030f2:	6032      	str	r2, [r6, #0]
 80030f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030f8:	81a3      	strh	r3, [r4, #12]
 80030fa:	f04f 30ff 	mov.w	r0, #4294967295
 80030fe:	e03e      	b.n	800317e <__swsetup_r+0xba>
 8003100:	4b25      	ldr	r3, [pc, #148]	; (8003198 <__swsetup_r+0xd4>)
 8003102:	429c      	cmp	r4, r3
 8003104:	d101      	bne.n	800310a <__swsetup_r+0x46>
 8003106:	68ac      	ldr	r4, [r5, #8]
 8003108:	e7eb      	b.n	80030e2 <__swsetup_r+0x1e>
 800310a:	4b24      	ldr	r3, [pc, #144]	; (800319c <__swsetup_r+0xd8>)
 800310c:	429c      	cmp	r4, r3
 800310e:	bf08      	it	eq
 8003110:	68ec      	ldreq	r4, [r5, #12]
 8003112:	e7e6      	b.n	80030e2 <__swsetup_r+0x1e>
 8003114:	0751      	lsls	r1, r2, #29
 8003116:	d512      	bpl.n	800313e <__swsetup_r+0x7a>
 8003118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800311a:	b141      	cbz	r1, 800312e <__swsetup_r+0x6a>
 800311c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003120:	4299      	cmp	r1, r3
 8003122:	d002      	beq.n	800312a <__swsetup_r+0x66>
 8003124:	4630      	mov	r0, r6
 8003126:	f000 fa19 	bl	800355c <_free_r>
 800312a:	2300      	movs	r3, #0
 800312c:	6363      	str	r3, [r4, #52]	; 0x34
 800312e:	89a3      	ldrh	r3, [r4, #12]
 8003130:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003134:	81a3      	strh	r3, [r4, #12]
 8003136:	2300      	movs	r3, #0
 8003138:	6063      	str	r3, [r4, #4]
 800313a:	6923      	ldr	r3, [r4, #16]
 800313c:	6023      	str	r3, [r4, #0]
 800313e:	89a3      	ldrh	r3, [r4, #12]
 8003140:	f043 0308 	orr.w	r3, r3, #8
 8003144:	81a3      	strh	r3, [r4, #12]
 8003146:	6923      	ldr	r3, [r4, #16]
 8003148:	b94b      	cbnz	r3, 800315e <__swsetup_r+0x9a>
 800314a:	89a3      	ldrh	r3, [r4, #12]
 800314c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003154:	d003      	beq.n	800315e <__swsetup_r+0x9a>
 8003156:	4621      	mov	r1, r4
 8003158:	4630      	mov	r0, r6
 800315a:	f000 f9bf 	bl	80034dc <__smakebuf_r>
 800315e:	89a2      	ldrh	r2, [r4, #12]
 8003160:	f012 0301 	ands.w	r3, r2, #1
 8003164:	d00c      	beq.n	8003180 <__swsetup_r+0xbc>
 8003166:	2300      	movs	r3, #0
 8003168:	60a3      	str	r3, [r4, #8]
 800316a:	6963      	ldr	r3, [r4, #20]
 800316c:	425b      	negs	r3, r3
 800316e:	61a3      	str	r3, [r4, #24]
 8003170:	6923      	ldr	r3, [r4, #16]
 8003172:	b953      	cbnz	r3, 800318a <__swsetup_r+0xc6>
 8003174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003178:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800317c:	d1ba      	bne.n	80030f4 <__swsetup_r+0x30>
 800317e:	bd70      	pop	{r4, r5, r6, pc}
 8003180:	0792      	lsls	r2, r2, #30
 8003182:	bf58      	it	pl
 8003184:	6963      	ldrpl	r3, [r4, #20]
 8003186:	60a3      	str	r3, [r4, #8]
 8003188:	e7f2      	b.n	8003170 <__swsetup_r+0xac>
 800318a:	2000      	movs	r0, #0
 800318c:	e7f7      	b.n	800317e <__swsetup_r+0xba>
 800318e:	bf00      	nop
 8003190:	2000000c 	.word	0x2000000c
 8003194:	0816e798 	.word	0x0816e798
 8003198:	0816e7b8 	.word	0x0816e7b8
 800319c:	0816e778 	.word	0x0816e778

080031a0 <__sflush_r>:
 80031a0:	898a      	ldrh	r2, [r1, #12]
 80031a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031a6:	4605      	mov	r5, r0
 80031a8:	0710      	lsls	r0, r2, #28
 80031aa:	460c      	mov	r4, r1
 80031ac:	d458      	bmi.n	8003260 <__sflush_r+0xc0>
 80031ae:	684b      	ldr	r3, [r1, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	dc05      	bgt.n	80031c0 <__sflush_r+0x20>
 80031b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	dc02      	bgt.n	80031c0 <__sflush_r+0x20>
 80031ba:	2000      	movs	r0, #0
 80031bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031c2:	2e00      	cmp	r6, #0
 80031c4:	d0f9      	beq.n	80031ba <__sflush_r+0x1a>
 80031c6:	2300      	movs	r3, #0
 80031c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80031cc:	682f      	ldr	r7, [r5, #0]
 80031ce:	6a21      	ldr	r1, [r4, #32]
 80031d0:	602b      	str	r3, [r5, #0]
 80031d2:	d032      	beq.n	800323a <__sflush_r+0x9a>
 80031d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031d6:	89a3      	ldrh	r3, [r4, #12]
 80031d8:	075a      	lsls	r2, r3, #29
 80031da:	d505      	bpl.n	80031e8 <__sflush_r+0x48>
 80031dc:	6863      	ldr	r3, [r4, #4]
 80031de:	1ac0      	subs	r0, r0, r3
 80031e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031e2:	b10b      	cbz	r3, 80031e8 <__sflush_r+0x48>
 80031e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031e6:	1ac0      	subs	r0, r0, r3
 80031e8:	2300      	movs	r3, #0
 80031ea:	4602      	mov	r2, r0
 80031ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031ee:	6a21      	ldr	r1, [r4, #32]
 80031f0:	4628      	mov	r0, r5
 80031f2:	47b0      	blx	r6
 80031f4:	1c43      	adds	r3, r0, #1
 80031f6:	89a3      	ldrh	r3, [r4, #12]
 80031f8:	d106      	bne.n	8003208 <__sflush_r+0x68>
 80031fa:	6829      	ldr	r1, [r5, #0]
 80031fc:	291d      	cmp	r1, #29
 80031fe:	d848      	bhi.n	8003292 <__sflush_r+0xf2>
 8003200:	4a29      	ldr	r2, [pc, #164]	; (80032a8 <__sflush_r+0x108>)
 8003202:	40ca      	lsrs	r2, r1
 8003204:	07d6      	lsls	r6, r2, #31
 8003206:	d544      	bpl.n	8003292 <__sflush_r+0xf2>
 8003208:	2200      	movs	r2, #0
 800320a:	6062      	str	r2, [r4, #4]
 800320c:	04d9      	lsls	r1, r3, #19
 800320e:	6922      	ldr	r2, [r4, #16]
 8003210:	6022      	str	r2, [r4, #0]
 8003212:	d504      	bpl.n	800321e <__sflush_r+0x7e>
 8003214:	1c42      	adds	r2, r0, #1
 8003216:	d101      	bne.n	800321c <__sflush_r+0x7c>
 8003218:	682b      	ldr	r3, [r5, #0]
 800321a:	b903      	cbnz	r3, 800321e <__sflush_r+0x7e>
 800321c:	6560      	str	r0, [r4, #84]	; 0x54
 800321e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003220:	602f      	str	r7, [r5, #0]
 8003222:	2900      	cmp	r1, #0
 8003224:	d0c9      	beq.n	80031ba <__sflush_r+0x1a>
 8003226:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800322a:	4299      	cmp	r1, r3
 800322c:	d002      	beq.n	8003234 <__sflush_r+0x94>
 800322e:	4628      	mov	r0, r5
 8003230:	f000 f994 	bl	800355c <_free_r>
 8003234:	2000      	movs	r0, #0
 8003236:	6360      	str	r0, [r4, #52]	; 0x34
 8003238:	e7c0      	b.n	80031bc <__sflush_r+0x1c>
 800323a:	2301      	movs	r3, #1
 800323c:	4628      	mov	r0, r5
 800323e:	47b0      	blx	r6
 8003240:	1c41      	adds	r1, r0, #1
 8003242:	d1c8      	bne.n	80031d6 <__sflush_r+0x36>
 8003244:	682b      	ldr	r3, [r5, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0c5      	beq.n	80031d6 <__sflush_r+0x36>
 800324a:	2b1d      	cmp	r3, #29
 800324c:	d001      	beq.n	8003252 <__sflush_r+0xb2>
 800324e:	2b16      	cmp	r3, #22
 8003250:	d101      	bne.n	8003256 <__sflush_r+0xb6>
 8003252:	602f      	str	r7, [r5, #0]
 8003254:	e7b1      	b.n	80031ba <__sflush_r+0x1a>
 8003256:	89a3      	ldrh	r3, [r4, #12]
 8003258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800325c:	81a3      	strh	r3, [r4, #12]
 800325e:	e7ad      	b.n	80031bc <__sflush_r+0x1c>
 8003260:	690f      	ldr	r7, [r1, #16]
 8003262:	2f00      	cmp	r7, #0
 8003264:	d0a9      	beq.n	80031ba <__sflush_r+0x1a>
 8003266:	0793      	lsls	r3, r2, #30
 8003268:	680e      	ldr	r6, [r1, #0]
 800326a:	bf08      	it	eq
 800326c:	694b      	ldreq	r3, [r1, #20]
 800326e:	600f      	str	r7, [r1, #0]
 8003270:	bf18      	it	ne
 8003272:	2300      	movne	r3, #0
 8003274:	eba6 0807 	sub.w	r8, r6, r7
 8003278:	608b      	str	r3, [r1, #8]
 800327a:	f1b8 0f00 	cmp.w	r8, #0
 800327e:	dd9c      	ble.n	80031ba <__sflush_r+0x1a>
 8003280:	4643      	mov	r3, r8
 8003282:	463a      	mov	r2, r7
 8003284:	6a21      	ldr	r1, [r4, #32]
 8003286:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003288:	4628      	mov	r0, r5
 800328a:	47b0      	blx	r6
 800328c:	2800      	cmp	r0, #0
 800328e:	dc06      	bgt.n	800329e <__sflush_r+0xfe>
 8003290:	89a3      	ldrh	r3, [r4, #12]
 8003292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003296:	81a3      	strh	r3, [r4, #12]
 8003298:	f04f 30ff 	mov.w	r0, #4294967295
 800329c:	e78e      	b.n	80031bc <__sflush_r+0x1c>
 800329e:	4407      	add	r7, r0
 80032a0:	eba8 0800 	sub.w	r8, r8, r0
 80032a4:	e7e9      	b.n	800327a <__sflush_r+0xda>
 80032a6:	bf00      	nop
 80032a8:	20400001 	.word	0x20400001

080032ac <_fflush_r>:
 80032ac:	b538      	push	{r3, r4, r5, lr}
 80032ae:	690b      	ldr	r3, [r1, #16]
 80032b0:	4605      	mov	r5, r0
 80032b2:	460c      	mov	r4, r1
 80032b4:	b1db      	cbz	r3, 80032ee <_fflush_r+0x42>
 80032b6:	b118      	cbz	r0, 80032c0 <_fflush_r+0x14>
 80032b8:	6983      	ldr	r3, [r0, #24]
 80032ba:	b90b      	cbnz	r3, 80032c0 <_fflush_r+0x14>
 80032bc:	f000 f860 	bl	8003380 <__sinit>
 80032c0:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <_fflush_r+0x48>)
 80032c2:	429c      	cmp	r4, r3
 80032c4:	d109      	bne.n	80032da <_fflush_r+0x2e>
 80032c6:	686c      	ldr	r4, [r5, #4]
 80032c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032cc:	b17b      	cbz	r3, 80032ee <_fflush_r+0x42>
 80032ce:	4621      	mov	r1, r4
 80032d0:	4628      	mov	r0, r5
 80032d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032d6:	f7ff bf63 	b.w	80031a0 <__sflush_r>
 80032da:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <_fflush_r+0x4c>)
 80032dc:	429c      	cmp	r4, r3
 80032de:	d101      	bne.n	80032e4 <_fflush_r+0x38>
 80032e0:	68ac      	ldr	r4, [r5, #8]
 80032e2:	e7f1      	b.n	80032c8 <_fflush_r+0x1c>
 80032e4:	4b05      	ldr	r3, [pc, #20]	; (80032fc <_fflush_r+0x50>)
 80032e6:	429c      	cmp	r4, r3
 80032e8:	bf08      	it	eq
 80032ea:	68ec      	ldreq	r4, [r5, #12]
 80032ec:	e7ec      	b.n	80032c8 <_fflush_r+0x1c>
 80032ee:	2000      	movs	r0, #0
 80032f0:	bd38      	pop	{r3, r4, r5, pc}
 80032f2:	bf00      	nop
 80032f4:	0816e798 	.word	0x0816e798
 80032f8:	0816e7b8 	.word	0x0816e7b8
 80032fc:	0816e778 	.word	0x0816e778

08003300 <std>:
 8003300:	2300      	movs	r3, #0
 8003302:	b510      	push	{r4, lr}
 8003304:	4604      	mov	r4, r0
 8003306:	e9c0 3300 	strd	r3, r3, [r0]
 800330a:	6083      	str	r3, [r0, #8]
 800330c:	8181      	strh	r1, [r0, #12]
 800330e:	6643      	str	r3, [r0, #100]	; 0x64
 8003310:	81c2      	strh	r2, [r0, #14]
 8003312:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003316:	6183      	str	r3, [r0, #24]
 8003318:	4619      	mov	r1, r3
 800331a:	2208      	movs	r2, #8
 800331c:	305c      	adds	r0, #92	; 0x5c
 800331e:	f7ff fdfb 	bl	8002f18 <memset>
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <std+0x38>)
 8003324:	6263      	str	r3, [r4, #36]	; 0x24
 8003326:	4b05      	ldr	r3, [pc, #20]	; (800333c <std+0x3c>)
 8003328:	62a3      	str	r3, [r4, #40]	; 0x28
 800332a:	4b05      	ldr	r3, [pc, #20]	; (8003340 <std+0x40>)
 800332c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800332e:	4b05      	ldr	r3, [pc, #20]	; (8003344 <std+0x44>)
 8003330:	6224      	str	r4, [r4, #32]
 8003332:	6323      	str	r3, [r4, #48]	; 0x30
 8003334:	bd10      	pop	{r4, pc}
 8003336:	bf00      	nop
 8003338:	08003c5d 	.word	0x08003c5d
 800333c:	08003c7f 	.word	0x08003c7f
 8003340:	08003cb7 	.word	0x08003cb7
 8003344:	08003cdb 	.word	0x08003cdb

08003348 <_cleanup_r>:
 8003348:	4901      	ldr	r1, [pc, #4]	; (8003350 <_cleanup_r+0x8>)
 800334a:	f000 b885 	b.w	8003458 <_fwalk_reent>
 800334e:	bf00      	nop
 8003350:	080032ad 	.word	0x080032ad

08003354 <__sfmoreglue>:
 8003354:	b570      	push	{r4, r5, r6, lr}
 8003356:	1e4a      	subs	r2, r1, #1
 8003358:	2568      	movs	r5, #104	; 0x68
 800335a:	4355      	muls	r5, r2
 800335c:	460e      	mov	r6, r1
 800335e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003362:	f000 f949 	bl	80035f8 <_malloc_r>
 8003366:	4604      	mov	r4, r0
 8003368:	b140      	cbz	r0, 800337c <__sfmoreglue+0x28>
 800336a:	2100      	movs	r1, #0
 800336c:	e9c0 1600 	strd	r1, r6, [r0]
 8003370:	300c      	adds	r0, #12
 8003372:	60a0      	str	r0, [r4, #8]
 8003374:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003378:	f7ff fdce 	bl	8002f18 <memset>
 800337c:	4620      	mov	r0, r4
 800337e:	bd70      	pop	{r4, r5, r6, pc}

08003380 <__sinit>:
 8003380:	6983      	ldr	r3, [r0, #24]
 8003382:	b510      	push	{r4, lr}
 8003384:	4604      	mov	r4, r0
 8003386:	bb33      	cbnz	r3, 80033d6 <__sinit+0x56>
 8003388:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800338c:	6503      	str	r3, [r0, #80]	; 0x50
 800338e:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <__sinit+0x58>)
 8003390:	4a12      	ldr	r2, [pc, #72]	; (80033dc <__sinit+0x5c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6282      	str	r2, [r0, #40]	; 0x28
 8003396:	4298      	cmp	r0, r3
 8003398:	bf04      	itt	eq
 800339a:	2301      	moveq	r3, #1
 800339c:	6183      	streq	r3, [r0, #24]
 800339e:	f000 f81f 	bl	80033e0 <__sfp>
 80033a2:	6060      	str	r0, [r4, #4]
 80033a4:	4620      	mov	r0, r4
 80033a6:	f000 f81b 	bl	80033e0 <__sfp>
 80033aa:	60a0      	str	r0, [r4, #8]
 80033ac:	4620      	mov	r0, r4
 80033ae:	f000 f817 	bl	80033e0 <__sfp>
 80033b2:	2200      	movs	r2, #0
 80033b4:	60e0      	str	r0, [r4, #12]
 80033b6:	2104      	movs	r1, #4
 80033b8:	6860      	ldr	r0, [r4, #4]
 80033ba:	f7ff ffa1 	bl	8003300 <std>
 80033be:	2201      	movs	r2, #1
 80033c0:	2109      	movs	r1, #9
 80033c2:	68a0      	ldr	r0, [r4, #8]
 80033c4:	f7ff ff9c 	bl	8003300 <std>
 80033c8:	2202      	movs	r2, #2
 80033ca:	2112      	movs	r1, #18
 80033cc:	68e0      	ldr	r0, [r4, #12]
 80033ce:	f7ff ff97 	bl	8003300 <std>
 80033d2:	2301      	movs	r3, #1
 80033d4:	61a3      	str	r3, [r4, #24]
 80033d6:	bd10      	pop	{r4, pc}
 80033d8:	0816e774 	.word	0x0816e774
 80033dc:	08003349 	.word	0x08003349

080033e0 <__sfp>:
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e2:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <__sfp+0x70>)
 80033e4:	681e      	ldr	r6, [r3, #0]
 80033e6:	69b3      	ldr	r3, [r6, #24]
 80033e8:	4607      	mov	r7, r0
 80033ea:	b913      	cbnz	r3, 80033f2 <__sfp+0x12>
 80033ec:	4630      	mov	r0, r6
 80033ee:	f7ff ffc7 	bl	8003380 <__sinit>
 80033f2:	3648      	adds	r6, #72	; 0x48
 80033f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	d503      	bpl.n	8003404 <__sfp+0x24>
 80033fc:	6833      	ldr	r3, [r6, #0]
 80033fe:	b133      	cbz	r3, 800340e <__sfp+0x2e>
 8003400:	6836      	ldr	r6, [r6, #0]
 8003402:	e7f7      	b.n	80033f4 <__sfp+0x14>
 8003404:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003408:	b16d      	cbz	r5, 8003426 <__sfp+0x46>
 800340a:	3468      	adds	r4, #104	; 0x68
 800340c:	e7f4      	b.n	80033f8 <__sfp+0x18>
 800340e:	2104      	movs	r1, #4
 8003410:	4638      	mov	r0, r7
 8003412:	f7ff ff9f 	bl	8003354 <__sfmoreglue>
 8003416:	6030      	str	r0, [r6, #0]
 8003418:	2800      	cmp	r0, #0
 800341a:	d1f1      	bne.n	8003400 <__sfp+0x20>
 800341c:	230c      	movs	r3, #12
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	4604      	mov	r4, r0
 8003422:	4620      	mov	r0, r4
 8003424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003426:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <__sfp+0x74>)
 8003428:	6665      	str	r5, [r4, #100]	; 0x64
 800342a:	e9c4 5500 	strd	r5, r5, [r4]
 800342e:	60a5      	str	r5, [r4, #8]
 8003430:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003434:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003438:	2208      	movs	r2, #8
 800343a:	4629      	mov	r1, r5
 800343c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003440:	f7ff fd6a 	bl	8002f18 <memset>
 8003444:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003448:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800344c:	e7e9      	b.n	8003422 <__sfp+0x42>
 800344e:	bf00      	nop
 8003450:	0816e774 	.word	0x0816e774
 8003454:	ffff0001 	.word	0xffff0001

08003458 <_fwalk_reent>:
 8003458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800345c:	4680      	mov	r8, r0
 800345e:	4689      	mov	r9, r1
 8003460:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003464:	2600      	movs	r6, #0
 8003466:	b914      	cbnz	r4, 800346e <_fwalk_reent+0x16>
 8003468:	4630      	mov	r0, r6
 800346a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800346e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003472:	3f01      	subs	r7, #1
 8003474:	d501      	bpl.n	800347a <_fwalk_reent+0x22>
 8003476:	6824      	ldr	r4, [r4, #0]
 8003478:	e7f5      	b.n	8003466 <_fwalk_reent+0xe>
 800347a:	89ab      	ldrh	r3, [r5, #12]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d907      	bls.n	8003490 <_fwalk_reent+0x38>
 8003480:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003484:	3301      	adds	r3, #1
 8003486:	d003      	beq.n	8003490 <_fwalk_reent+0x38>
 8003488:	4629      	mov	r1, r5
 800348a:	4640      	mov	r0, r8
 800348c:	47c8      	blx	r9
 800348e:	4306      	orrs	r6, r0
 8003490:	3568      	adds	r5, #104	; 0x68
 8003492:	e7ee      	b.n	8003472 <_fwalk_reent+0x1a>

08003494 <__swhatbuf_r>:
 8003494:	b570      	push	{r4, r5, r6, lr}
 8003496:	460e      	mov	r6, r1
 8003498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800349c:	2900      	cmp	r1, #0
 800349e:	b096      	sub	sp, #88	; 0x58
 80034a0:	4614      	mov	r4, r2
 80034a2:	461d      	mov	r5, r3
 80034a4:	da07      	bge.n	80034b6 <__swhatbuf_r+0x22>
 80034a6:	2300      	movs	r3, #0
 80034a8:	602b      	str	r3, [r5, #0]
 80034aa:	89b3      	ldrh	r3, [r6, #12]
 80034ac:	061a      	lsls	r2, r3, #24
 80034ae:	d410      	bmi.n	80034d2 <__swhatbuf_r+0x3e>
 80034b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034b4:	e00e      	b.n	80034d4 <__swhatbuf_r+0x40>
 80034b6:	466a      	mov	r2, sp
 80034b8:	f000 fc36 	bl	8003d28 <_fstat_r>
 80034bc:	2800      	cmp	r0, #0
 80034be:	dbf2      	blt.n	80034a6 <__swhatbuf_r+0x12>
 80034c0:	9a01      	ldr	r2, [sp, #4]
 80034c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80034c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80034ca:	425a      	negs	r2, r3
 80034cc:	415a      	adcs	r2, r3
 80034ce:	602a      	str	r2, [r5, #0]
 80034d0:	e7ee      	b.n	80034b0 <__swhatbuf_r+0x1c>
 80034d2:	2340      	movs	r3, #64	; 0x40
 80034d4:	2000      	movs	r0, #0
 80034d6:	6023      	str	r3, [r4, #0]
 80034d8:	b016      	add	sp, #88	; 0x58
 80034da:	bd70      	pop	{r4, r5, r6, pc}

080034dc <__smakebuf_r>:
 80034dc:	898b      	ldrh	r3, [r1, #12]
 80034de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80034e0:	079d      	lsls	r5, r3, #30
 80034e2:	4606      	mov	r6, r0
 80034e4:	460c      	mov	r4, r1
 80034e6:	d507      	bpl.n	80034f8 <__smakebuf_r+0x1c>
 80034e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80034ec:	6023      	str	r3, [r4, #0]
 80034ee:	6123      	str	r3, [r4, #16]
 80034f0:	2301      	movs	r3, #1
 80034f2:	6163      	str	r3, [r4, #20]
 80034f4:	b002      	add	sp, #8
 80034f6:	bd70      	pop	{r4, r5, r6, pc}
 80034f8:	ab01      	add	r3, sp, #4
 80034fa:	466a      	mov	r2, sp
 80034fc:	f7ff ffca 	bl	8003494 <__swhatbuf_r>
 8003500:	9900      	ldr	r1, [sp, #0]
 8003502:	4605      	mov	r5, r0
 8003504:	4630      	mov	r0, r6
 8003506:	f000 f877 	bl	80035f8 <_malloc_r>
 800350a:	b948      	cbnz	r0, 8003520 <__smakebuf_r+0x44>
 800350c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003510:	059a      	lsls	r2, r3, #22
 8003512:	d4ef      	bmi.n	80034f4 <__smakebuf_r+0x18>
 8003514:	f023 0303 	bic.w	r3, r3, #3
 8003518:	f043 0302 	orr.w	r3, r3, #2
 800351c:	81a3      	strh	r3, [r4, #12]
 800351e:	e7e3      	b.n	80034e8 <__smakebuf_r+0xc>
 8003520:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <__smakebuf_r+0x7c>)
 8003522:	62b3      	str	r3, [r6, #40]	; 0x28
 8003524:	89a3      	ldrh	r3, [r4, #12]
 8003526:	6020      	str	r0, [r4, #0]
 8003528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800352c:	81a3      	strh	r3, [r4, #12]
 800352e:	9b00      	ldr	r3, [sp, #0]
 8003530:	6163      	str	r3, [r4, #20]
 8003532:	9b01      	ldr	r3, [sp, #4]
 8003534:	6120      	str	r0, [r4, #16]
 8003536:	b15b      	cbz	r3, 8003550 <__smakebuf_r+0x74>
 8003538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800353c:	4630      	mov	r0, r6
 800353e:	f000 fc05 	bl	8003d4c <_isatty_r>
 8003542:	b128      	cbz	r0, 8003550 <__smakebuf_r+0x74>
 8003544:	89a3      	ldrh	r3, [r4, #12]
 8003546:	f023 0303 	bic.w	r3, r3, #3
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	81a3      	strh	r3, [r4, #12]
 8003550:	89a3      	ldrh	r3, [r4, #12]
 8003552:	431d      	orrs	r5, r3
 8003554:	81a5      	strh	r5, [r4, #12]
 8003556:	e7cd      	b.n	80034f4 <__smakebuf_r+0x18>
 8003558:	08003349 	.word	0x08003349

0800355c <_free_r>:
 800355c:	b538      	push	{r3, r4, r5, lr}
 800355e:	4605      	mov	r5, r0
 8003560:	2900      	cmp	r1, #0
 8003562:	d045      	beq.n	80035f0 <_free_r+0x94>
 8003564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003568:	1f0c      	subs	r4, r1, #4
 800356a:	2b00      	cmp	r3, #0
 800356c:	bfb8      	it	lt
 800356e:	18e4      	addlt	r4, r4, r3
 8003570:	f000 fc0e 	bl	8003d90 <__malloc_lock>
 8003574:	4a1f      	ldr	r2, [pc, #124]	; (80035f4 <_free_r+0x98>)
 8003576:	6813      	ldr	r3, [r2, #0]
 8003578:	4610      	mov	r0, r2
 800357a:	b933      	cbnz	r3, 800358a <_free_r+0x2e>
 800357c:	6063      	str	r3, [r4, #4]
 800357e:	6014      	str	r4, [r2, #0]
 8003580:	4628      	mov	r0, r5
 8003582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003586:	f000 bc04 	b.w	8003d92 <__malloc_unlock>
 800358a:	42a3      	cmp	r3, r4
 800358c:	d90c      	bls.n	80035a8 <_free_r+0x4c>
 800358e:	6821      	ldr	r1, [r4, #0]
 8003590:	1862      	adds	r2, r4, r1
 8003592:	4293      	cmp	r3, r2
 8003594:	bf04      	itt	eq
 8003596:	681a      	ldreq	r2, [r3, #0]
 8003598:	685b      	ldreq	r3, [r3, #4]
 800359a:	6063      	str	r3, [r4, #4]
 800359c:	bf04      	itt	eq
 800359e:	1852      	addeq	r2, r2, r1
 80035a0:	6022      	streq	r2, [r4, #0]
 80035a2:	6004      	str	r4, [r0, #0]
 80035a4:	e7ec      	b.n	8003580 <_free_r+0x24>
 80035a6:	4613      	mov	r3, r2
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	b10a      	cbz	r2, 80035b0 <_free_r+0x54>
 80035ac:	42a2      	cmp	r2, r4
 80035ae:	d9fa      	bls.n	80035a6 <_free_r+0x4a>
 80035b0:	6819      	ldr	r1, [r3, #0]
 80035b2:	1858      	adds	r0, r3, r1
 80035b4:	42a0      	cmp	r0, r4
 80035b6:	d10b      	bne.n	80035d0 <_free_r+0x74>
 80035b8:	6820      	ldr	r0, [r4, #0]
 80035ba:	4401      	add	r1, r0
 80035bc:	1858      	adds	r0, r3, r1
 80035be:	4282      	cmp	r2, r0
 80035c0:	6019      	str	r1, [r3, #0]
 80035c2:	d1dd      	bne.n	8003580 <_free_r+0x24>
 80035c4:	6810      	ldr	r0, [r2, #0]
 80035c6:	6852      	ldr	r2, [r2, #4]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	4401      	add	r1, r0
 80035cc:	6019      	str	r1, [r3, #0]
 80035ce:	e7d7      	b.n	8003580 <_free_r+0x24>
 80035d0:	d902      	bls.n	80035d8 <_free_r+0x7c>
 80035d2:	230c      	movs	r3, #12
 80035d4:	602b      	str	r3, [r5, #0]
 80035d6:	e7d3      	b.n	8003580 <_free_r+0x24>
 80035d8:	6820      	ldr	r0, [r4, #0]
 80035da:	1821      	adds	r1, r4, r0
 80035dc:	428a      	cmp	r2, r1
 80035de:	bf04      	itt	eq
 80035e0:	6811      	ldreq	r1, [r2, #0]
 80035e2:	6852      	ldreq	r2, [r2, #4]
 80035e4:	6062      	str	r2, [r4, #4]
 80035e6:	bf04      	itt	eq
 80035e8:	1809      	addeq	r1, r1, r0
 80035ea:	6021      	streq	r1, [r4, #0]
 80035ec:	605c      	str	r4, [r3, #4]
 80035ee:	e7c7      	b.n	8003580 <_free_r+0x24>
 80035f0:	bd38      	pop	{r3, r4, r5, pc}
 80035f2:	bf00      	nop
 80035f4:	20000090 	.word	0x20000090

080035f8 <_malloc_r>:
 80035f8:	b570      	push	{r4, r5, r6, lr}
 80035fa:	1ccd      	adds	r5, r1, #3
 80035fc:	f025 0503 	bic.w	r5, r5, #3
 8003600:	3508      	adds	r5, #8
 8003602:	2d0c      	cmp	r5, #12
 8003604:	bf38      	it	cc
 8003606:	250c      	movcc	r5, #12
 8003608:	2d00      	cmp	r5, #0
 800360a:	4606      	mov	r6, r0
 800360c:	db01      	blt.n	8003612 <_malloc_r+0x1a>
 800360e:	42a9      	cmp	r1, r5
 8003610:	d903      	bls.n	800361a <_malloc_r+0x22>
 8003612:	230c      	movs	r3, #12
 8003614:	6033      	str	r3, [r6, #0]
 8003616:	2000      	movs	r0, #0
 8003618:	bd70      	pop	{r4, r5, r6, pc}
 800361a:	f000 fbb9 	bl	8003d90 <__malloc_lock>
 800361e:	4a21      	ldr	r2, [pc, #132]	; (80036a4 <_malloc_r+0xac>)
 8003620:	6814      	ldr	r4, [r2, #0]
 8003622:	4621      	mov	r1, r4
 8003624:	b991      	cbnz	r1, 800364c <_malloc_r+0x54>
 8003626:	4c20      	ldr	r4, [pc, #128]	; (80036a8 <_malloc_r+0xb0>)
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	b91b      	cbnz	r3, 8003634 <_malloc_r+0x3c>
 800362c:	4630      	mov	r0, r6
 800362e:	f000 fb05 	bl	8003c3c <_sbrk_r>
 8003632:	6020      	str	r0, [r4, #0]
 8003634:	4629      	mov	r1, r5
 8003636:	4630      	mov	r0, r6
 8003638:	f000 fb00 	bl	8003c3c <_sbrk_r>
 800363c:	1c43      	adds	r3, r0, #1
 800363e:	d124      	bne.n	800368a <_malloc_r+0x92>
 8003640:	230c      	movs	r3, #12
 8003642:	6033      	str	r3, [r6, #0]
 8003644:	4630      	mov	r0, r6
 8003646:	f000 fba4 	bl	8003d92 <__malloc_unlock>
 800364a:	e7e4      	b.n	8003616 <_malloc_r+0x1e>
 800364c:	680b      	ldr	r3, [r1, #0]
 800364e:	1b5b      	subs	r3, r3, r5
 8003650:	d418      	bmi.n	8003684 <_malloc_r+0x8c>
 8003652:	2b0b      	cmp	r3, #11
 8003654:	d90f      	bls.n	8003676 <_malloc_r+0x7e>
 8003656:	600b      	str	r3, [r1, #0]
 8003658:	50cd      	str	r5, [r1, r3]
 800365a:	18cc      	adds	r4, r1, r3
 800365c:	4630      	mov	r0, r6
 800365e:	f000 fb98 	bl	8003d92 <__malloc_unlock>
 8003662:	f104 000b 	add.w	r0, r4, #11
 8003666:	1d23      	adds	r3, r4, #4
 8003668:	f020 0007 	bic.w	r0, r0, #7
 800366c:	1ac3      	subs	r3, r0, r3
 800366e:	d0d3      	beq.n	8003618 <_malloc_r+0x20>
 8003670:	425a      	negs	r2, r3
 8003672:	50e2      	str	r2, [r4, r3]
 8003674:	e7d0      	b.n	8003618 <_malloc_r+0x20>
 8003676:	428c      	cmp	r4, r1
 8003678:	684b      	ldr	r3, [r1, #4]
 800367a:	bf16      	itet	ne
 800367c:	6063      	strne	r3, [r4, #4]
 800367e:	6013      	streq	r3, [r2, #0]
 8003680:	460c      	movne	r4, r1
 8003682:	e7eb      	b.n	800365c <_malloc_r+0x64>
 8003684:	460c      	mov	r4, r1
 8003686:	6849      	ldr	r1, [r1, #4]
 8003688:	e7cc      	b.n	8003624 <_malloc_r+0x2c>
 800368a:	1cc4      	adds	r4, r0, #3
 800368c:	f024 0403 	bic.w	r4, r4, #3
 8003690:	42a0      	cmp	r0, r4
 8003692:	d005      	beq.n	80036a0 <_malloc_r+0xa8>
 8003694:	1a21      	subs	r1, r4, r0
 8003696:	4630      	mov	r0, r6
 8003698:	f000 fad0 	bl	8003c3c <_sbrk_r>
 800369c:	3001      	adds	r0, #1
 800369e:	d0cf      	beq.n	8003640 <_malloc_r+0x48>
 80036a0:	6025      	str	r5, [r4, #0]
 80036a2:	e7db      	b.n	800365c <_malloc_r+0x64>
 80036a4:	20000090 	.word	0x20000090
 80036a8:	20000094 	.word	0x20000094

080036ac <__sfputc_r>:
 80036ac:	6893      	ldr	r3, [r2, #8]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	b410      	push	{r4}
 80036b4:	6093      	str	r3, [r2, #8]
 80036b6:	da08      	bge.n	80036ca <__sfputc_r+0x1e>
 80036b8:	6994      	ldr	r4, [r2, #24]
 80036ba:	42a3      	cmp	r3, r4
 80036bc:	db01      	blt.n	80036c2 <__sfputc_r+0x16>
 80036be:	290a      	cmp	r1, #10
 80036c0:	d103      	bne.n	80036ca <__sfputc_r+0x1e>
 80036c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036c6:	f7ff bcab 	b.w	8003020 <__swbuf_r>
 80036ca:	6813      	ldr	r3, [r2, #0]
 80036cc:	1c58      	adds	r0, r3, #1
 80036ce:	6010      	str	r0, [r2, #0]
 80036d0:	7019      	strb	r1, [r3, #0]
 80036d2:	4608      	mov	r0, r1
 80036d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036d8:	4770      	bx	lr

080036da <__sfputs_r>:
 80036da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036dc:	4606      	mov	r6, r0
 80036de:	460f      	mov	r7, r1
 80036e0:	4614      	mov	r4, r2
 80036e2:	18d5      	adds	r5, r2, r3
 80036e4:	42ac      	cmp	r4, r5
 80036e6:	d101      	bne.n	80036ec <__sfputs_r+0x12>
 80036e8:	2000      	movs	r0, #0
 80036ea:	e007      	b.n	80036fc <__sfputs_r+0x22>
 80036ec:	463a      	mov	r2, r7
 80036ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036f2:	4630      	mov	r0, r6
 80036f4:	f7ff ffda 	bl	80036ac <__sfputc_r>
 80036f8:	1c43      	adds	r3, r0, #1
 80036fa:	d1f3      	bne.n	80036e4 <__sfputs_r+0xa>
 80036fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003700 <_vfiprintf_r>:
 8003700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003704:	460c      	mov	r4, r1
 8003706:	b09d      	sub	sp, #116	; 0x74
 8003708:	4617      	mov	r7, r2
 800370a:	461d      	mov	r5, r3
 800370c:	4606      	mov	r6, r0
 800370e:	b118      	cbz	r0, 8003718 <_vfiprintf_r+0x18>
 8003710:	6983      	ldr	r3, [r0, #24]
 8003712:	b90b      	cbnz	r3, 8003718 <_vfiprintf_r+0x18>
 8003714:	f7ff fe34 	bl	8003380 <__sinit>
 8003718:	4b7c      	ldr	r3, [pc, #496]	; (800390c <_vfiprintf_r+0x20c>)
 800371a:	429c      	cmp	r4, r3
 800371c:	d158      	bne.n	80037d0 <_vfiprintf_r+0xd0>
 800371e:	6874      	ldr	r4, [r6, #4]
 8003720:	89a3      	ldrh	r3, [r4, #12]
 8003722:	0718      	lsls	r0, r3, #28
 8003724:	d55e      	bpl.n	80037e4 <_vfiprintf_r+0xe4>
 8003726:	6923      	ldr	r3, [r4, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d05b      	beq.n	80037e4 <_vfiprintf_r+0xe4>
 800372c:	2300      	movs	r3, #0
 800372e:	9309      	str	r3, [sp, #36]	; 0x24
 8003730:	2320      	movs	r3, #32
 8003732:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003736:	2330      	movs	r3, #48	; 0x30
 8003738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800373c:	9503      	str	r5, [sp, #12]
 800373e:	f04f 0b01 	mov.w	fp, #1
 8003742:	46b8      	mov	r8, r7
 8003744:	4645      	mov	r5, r8
 8003746:	f815 3b01 	ldrb.w	r3, [r5], #1
 800374a:	b10b      	cbz	r3, 8003750 <_vfiprintf_r+0x50>
 800374c:	2b25      	cmp	r3, #37	; 0x25
 800374e:	d154      	bne.n	80037fa <_vfiprintf_r+0xfa>
 8003750:	ebb8 0a07 	subs.w	sl, r8, r7
 8003754:	d00b      	beq.n	800376e <_vfiprintf_r+0x6e>
 8003756:	4653      	mov	r3, sl
 8003758:	463a      	mov	r2, r7
 800375a:	4621      	mov	r1, r4
 800375c:	4630      	mov	r0, r6
 800375e:	f7ff ffbc 	bl	80036da <__sfputs_r>
 8003762:	3001      	adds	r0, #1
 8003764:	f000 80c2 	beq.w	80038ec <_vfiprintf_r+0x1ec>
 8003768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800376a:	4453      	add	r3, sl
 800376c:	9309      	str	r3, [sp, #36]	; 0x24
 800376e:	f898 3000 	ldrb.w	r3, [r8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 80ba 	beq.w	80038ec <_vfiprintf_r+0x1ec>
 8003778:	2300      	movs	r3, #0
 800377a:	f04f 32ff 	mov.w	r2, #4294967295
 800377e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003782:	9304      	str	r3, [sp, #16]
 8003784:	9307      	str	r3, [sp, #28]
 8003786:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800378a:	931a      	str	r3, [sp, #104]	; 0x68
 800378c:	46a8      	mov	r8, r5
 800378e:	2205      	movs	r2, #5
 8003790:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003794:	485e      	ldr	r0, [pc, #376]	; (8003910 <_vfiprintf_r+0x210>)
 8003796:	f7fc fd33 	bl	8000200 <memchr>
 800379a:	9b04      	ldr	r3, [sp, #16]
 800379c:	bb78      	cbnz	r0, 80037fe <_vfiprintf_r+0xfe>
 800379e:	06d9      	lsls	r1, r3, #27
 80037a0:	bf44      	itt	mi
 80037a2:	2220      	movmi	r2, #32
 80037a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80037a8:	071a      	lsls	r2, r3, #28
 80037aa:	bf44      	itt	mi
 80037ac:	222b      	movmi	r2, #43	; 0x2b
 80037ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80037b2:	782a      	ldrb	r2, [r5, #0]
 80037b4:	2a2a      	cmp	r2, #42	; 0x2a
 80037b6:	d02a      	beq.n	800380e <_vfiprintf_r+0x10e>
 80037b8:	9a07      	ldr	r2, [sp, #28]
 80037ba:	46a8      	mov	r8, r5
 80037bc:	2000      	movs	r0, #0
 80037be:	250a      	movs	r5, #10
 80037c0:	4641      	mov	r1, r8
 80037c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037c6:	3b30      	subs	r3, #48	; 0x30
 80037c8:	2b09      	cmp	r3, #9
 80037ca:	d969      	bls.n	80038a0 <_vfiprintf_r+0x1a0>
 80037cc:	b360      	cbz	r0, 8003828 <_vfiprintf_r+0x128>
 80037ce:	e024      	b.n	800381a <_vfiprintf_r+0x11a>
 80037d0:	4b50      	ldr	r3, [pc, #320]	; (8003914 <_vfiprintf_r+0x214>)
 80037d2:	429c      	cmp	r4, r3
 80037d4:	d101      	bne.n	80037da <_vfiprintf_r+0xda>
 80037d6:	68b4      	ldr	r4, [r6, #8]
 80037d8:	e7a2      	b.n	8003720 <_vfiprintf_r+0x20>
 80037da:	4b4f      	ldr	r3, [pc, #316]	; (8003918 <_vfiprintf_r+0x218>)
 80037dc:	429c      	cmp	r4, r3
 80037de:	bf08      	it	eq
 80037e0:	68f4      	ldreq	r4, [r6, #12]
 80037e2:	e79d      	b.n	8003720 <_vfiprintf_r+0x20>
 80037e4:	4621      	mov	r1, r4
 80037e6:	4630      	mov	r0, r6
 80037e8:	f7ff fc6c 	bl	80030c4 <__swsetup_r>
 80037ec:	2800      	cmp	r0, #0
 80037ee:	d09d      	beq.n	800372c <_vfiprintf_r+0x2c>
 80037f0:	f04f 30ff 	mov.w	r0, #4294967295
 80037f4:	b01d      	add	sp, #116	; 0x74
 80037f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037fa:	46a8      	mov	r8, r5
 80037fc:	e7a2      	b.n	8003744 <_vfiprintf_r+0x44>
 80037fe:	4a44      	ldr	r2, [pc, #272]	; (8003910 <_vfiprintf_r+0x210>)
 8003800:	1a80      	subs	r0, r0, r2
 8003802:	fa0b f000 	lsl.w	r0, fp, r0
 8003806:	4318      	orrs	r0, r3
 8003808:	9004      	str	r0, [sp, #16]
 800380a:	4645      	mov	r5, r8
 800380c:	e7be      	b.n	800378c <_vfiprintf_r+0x8c>
 800380e:	9a03      	ldr	r2, [sp, #12]
 8003810:	1d11      	adds	r1, r2, #4
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	9103      	str	r1, [sp, #12]
 8003816:	2a00      	cmp	r2, #0
 8003818:	db01      	blt.n	800381e <_vfiprintf_r+0x11e>
 800381a:	9207      	str	r2, [sp, #28]
 800381c:	e004      	b.n	8003828 <_vfiprintf_r+0x128>
 800381e:	4252      	negs	r2, r2
 8003820:	f043 0302 	orr.w	r3, r3, #2
 8003824:	9207      	str	r2, [sp, #28]
 8003826:	9304      	str	r3, [sp, #16]
 8003828:	f898 3000 	ldrb.w	r3, [r8]
 800382c:	2b2e      	cmp	r3, #46	; 0x2e
 800382e:	d10e      	bne.n	800384e <_vfiprintf_r+0x14e>
 8003830:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003834:	2b2a      	cmp	r3, #42	; 0x2a
 8003836:	d138      	bne.n	80038aa <_vfiprintf_r+0x1aa>
 8003838:	9b03      	ldr	r3, [sp, #12]
 800383a:	1d1a      	adds	r2, r3, #4
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	9203      	str	r2, [sp, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	bfb8      	it	lt
 8003844:	f04f 33ff 	movlt.w	r3, #4294967295
 8003848:	f108 0802 	add.w	r8, r8, #2
 800384c:	9305      	str	r3, [sp, #20]
 800384e:	4d33      	ldr	r5, [pc, #204]	; (800391c <_vfiprintf_r+0x21c>)
 8003850:	f898 1000 	ldrb.w	r1, [r8]
 8003854:	2203      	movs	r2, #3
 8003856:	4628      	mov	r0, r5
 8003858:	f7fc fcd2 	bl	8000200 <memchr>
 800385c:	b140      	cbz	r0, 8003870 <_vfiprintf_r+0x170>
 800385e:	2340      	movs	r3, #64	; 0x40
 8003860:	1b40      	subs	r0, r0, r5
 8003862:	fa03 f000 	lsl.w	r0, r3, r0
 8003866:	9b04      	ldr	r3, [sp, #16]
 8003868:	4303      	orrs	r3, r0
 800386a:	f108 0801 	add.w	r8, r8, #1
 800386e:	9304      	str	r3, [sp, #16]
 8003870:	f898 1000 	ldrb.w	r1, [r8]
 8003874:	482a      	ldr	r0, [pc, #168]	; (8003920 <_vfiprintf_r+0x220>)
 8003876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800387a:	2206      	movs	r2, #6
 800387c:	f108 0701 	add.w	r7, r8, #1
 8003880:	f7fc fcbe 	bl	8000200 <memchr>
 8003884:	2800      	cmp	r0, #0
 8003886:	d037      	beq.n	80038f8 <_vfiprintf_r+0x1f8>
 8003888:	4b26      	ldr	r3, [pc, #152]	; (8003924 <_vfiprintf_r+0x224>)
 800388a:	bb1b      	cbnz	r3, 80038d4 <_vfiprintf_r+0x1d4>
 800388c:	9b03      	ldr	r3, [sp, #12]
 800388e:	3307      	adds	r3, #7
 8003890:	f023 0307 	bic.w	r3, r3, #7
 8003894:	3308      	adds	r3, #8
 8003896:	9303      	str	r3, [sp, #12]
 8003898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800389a:	444b      	add	r3, r9
 800389c:	9309      	str	r3, [sp, #36]	; 0x24
 800389e:	e750      	b.n	8003742 <_vfiprintf_r+0x42>
 80038a0:	fb05 3202 	mla	r2, r5, r2, r3
 80038a4:	2001      	movs	r0, #1
 80038a6:	4688      	mov	r8, r1
 80038a8:	e78a      	b.n	80037c0 <_vfiprintf_r+0xc0>
 80038aa:	2300      	movs	r3, #0
 80038ac:	f108 0801 	add.w	r8, r8, #1
 80038b0:	9305      	str	r3, [sp, #20]
 80038b2:	4619      	mov	r1, r3
 80038b4:	250a      	movs	r5, #10
 80038b6:	4640      	mov	r0, r8
 80038b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038bc:	3a30      	subs	r2, #48	; 0x30
 80038be:	2a09      	cmp	r2, #9
 80038c0:	d903      	bls.n	80038ca <_vfiprintf_r+0x1ca>
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0c3      	beq.n	800384e <_vfiprintf_r+0x14e>
 80038c6:	9105      	str	r1, [sp, #20]
 80038c8:	e7c1      	b.n	800384e <_vfiprintf_r+0x14e>
 80038ca:	fb05 2101 	mla	r1, r5, r1, r2
 80038ce:	2301      	movs	r3, #1
 80038d0:	4680      	mov	r8, r0
 80038d2:	e7f0      	b.n	80038b6 <_vfiprintf_r+0x1b6>
 80038d4:	ab03      	add	r3, sp, #12
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	4622      	mov	r2, r4
 80038da:	4b13      	ldr	r3, [pc, #76]	; (8003928 <_vfiprintf_r+0x228>)
 80038dc:	a904      	add	r1, sp, #16
 80038de:	4630      	mov	r0, r6
 80038e0:	f3af 8000 	nop.w
 80038e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80038e8:	4681      	mov	r9, r0
 80038ea:	d1d5      	bne.n	8003898 <_vfiprintf_r+0x198>
 80038ec:	89a3      	ldrh	r3, [r4, #12]
 80038ee:	065b      	lsls	r3, r3, #25
 80038f0:	f53f af7e 	bmi.w	80037f0 <_vfiprintf_r+0xf0>
 80038f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038f6:	e77d      	b.n	80037f4 <_vfiprintf_r+0xf4>
 80038f8:	ab03      	add	r3, sp, #12
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	4622      	mov	r2, r4
 80038fe:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <_vfiprintf_r+0x228>)
 8003900:	a904      	add	r1, sp, #16
 8003902:	4630      	mov	r0, r6
 8003904:	f000 f888 	bl	8003a18 <_printf_i>
 8003908:	e7ec      	b.n	80038e4 <_vfiprintf_r+0x1e4>
 800390a:	bf00      	nop
 800390c:	0816e798 	.word	0x0816e798
 8003910:	0816e7d8 	.word	0x0816e7d8
 8003914:	0816e7b8 	.word	0x0816e7b8
 8003918:	0816e778 	.word	0x0816e778
 800391c:	0816e7de 	.word	0x0816e7de
 8003920:	0816e7e2 	.word	0x0816e7e2
 8003924:	00000000 	.word	0x00000000
 8003928:	080036db 	.word	0x080036db

0800392c <_printf_common>:
 800392c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003930:	4691      	mov	r9, r2
 8003932:	461f      	mov	r7, r3
 8003934:	688a      	ldr	r2, [r1, #8]
 8003936:	690b      	ldr	r3, [r1, #16]
 8003938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800393c:	4293      	cmp	r3, r2
 800393e:	bfb8      	it	lt
 8003940:	4613      	movlt	r3, r2
 8003942:	f8c9 3000 	str.w	r3, [r9]
 8003946:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800394a:	4606      	mov	r6, r0
 800394c:	460c      	mov	r4, r1
 800394e:	b112      	cbz	r2, 8003956 <_printf_common+0x2a>
 8003950:	3301      	adds	r3, #1
 8003952:	f8c9 3000 	str.w	r3, [r9]
 8003956:	6823      	ldr	r3, [r4, #0]
 8003958:	0699      	lsls	r1, r3, #26
 800395a:	bf42      	ittt	mi
 800395c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003960:	3302      	addmi	r3, #2
 8003962:	f8c9 3000 	strmi.w	r3, [r9]
 8003966:	6825      	ldr	r5, [r4, #0]
 8003968:	f015 0506 	ands.w	r5, r5, #6
 800396c:	d107      	bne.n	800397e <_printf_common+0x52>
 800396e:	f104 0a19 	add.w	sl, r4, #25
 8003972:	68e3      	ldr	r3, [r4, #12]
 8003974:	f8d9 2000 	ldr.w	r2, [r9]
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	42ab      	cmp	r3, r5
 800397c:	dc28      	bgt.n	80039d0 <_printf_common+0xa4>
 800397e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003982:	6822      	ldr	r2, [r4, #0]
 8003984:	3300      	adds	r3, #0
 8003986:	bf18      	it	ne
 8003988:	2301      	movne	r3, #1
 800398a:	0692      	lsls	r2, r2, #26
 800398c:	d42d      	bmi.n	80039ea <_printf_common+0xbe>
 800398e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003992:	4639      	mov	r1, r7
 8003994:	4630      	mov	r0, r6
 8003996:	47c0      	blx	r8
 8003998:	3001      	adds	r0, #1
 800399a:	d020      	beq.n	80039de <_printf_common+0xb2>
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	68e5      	ldr	r5, [r4, #12]
 80039a0:	f8d9 2000 	ldr.w	r2, [r9]
 80039a4:	f003 0306 	and.w	r3, r3, #6
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	bf08      	it	eq
 80039ac:	1aad      	subeq	r5, r5, r2
 80039ae:	68a3      	ldr	r3, [r4, #8]
 80039b0:	6922      	ldr	r2, [r4, #16]
 80039b2:	bf0c      	ite	eq
 80039b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039b8:	2500      	movne	r5, #0
 80039ba:	4293      	cmp	r3, r2
 80039bc:	bfc4      	itt	gt
 80039be:	1a9b      	subgt	r3, r3, r2
 80039c0:	18ed      	addgt	r5, r5, r3
 80039c2:	f04f 0900 	mov.w	r9, #0
 80039c6:	341a      	adds	r4, #26
 80039c8:	454d      	cmp	r5, r9
 80039ca:	d11a      	bne.n	8003a02 <_printf_common+0xd6>
 80039cc:	2000      	movs	r0, #0
 80039ce:	e008      	b.n	80039e2 <_printf_common+0xb6>
 80039d0:	2301      	movs	r3, #1
 80039d2:	4652      	mov	r2, sl
 80039d4:	4639      	mov	r1, r7
 80039d6:	4630      	mov	r0, r6
 80039d8:	47c0      	blx	r8
 80039da:	3001      	adds	r0, #1
 80039dc:	d103      	bne.n	80039e6 <_printf_common+0xba>
 80039de:	f04f 30ff 	mov.w	r0, #4294967295
 80039e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e6:	3501      	adds	r5, #1
 80039e8:	e7c3      	b.n	8003972 <_printf_common+0x46>
 80039ea:	18e1      	adds	r1, r4, r3
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	2030      	movs	r0, #48	; 0x30
 80039f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039f4:	4422      	add	r2, r4
 80039f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039fe:	3302      	adds	r3, #2
 8003a00:	e7c5      	b.n	800398e <_printf_common+0x62>
 8003a02:	2301      	movs	r3, #1
 8003a04:	4622      	mov	r2, r4
 8003a06:	4639      	mov	r1, r7
 8003a08:	4630      	mov	r0, r6
 8003a0a:	47c0      	blx	r8
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	d0e6      	beq.n	80039de <_printf_common+0xb2>
 8003a10:	f109 0901 	add.w	r9, r9, #1
 8003a14:	e7d8      	b.n	80039c8 <_printf_common+0x9c>
	...

=======
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f7ff ff5d 	bl	8002d5e <SPI_WaitFifoStateUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eae:	f043 0220 	orr.w	r2, r3, #32
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e000      	b.n	8002ebc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <__errno>:
 8002ec4:	4b01      	ldr	r3, [pc, #4]	; (8002ecc <__errno+0x8>)
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	2000000c 	.word	0x2000000c

08002ed0 <__libc_init_array>:
 8002ed0:	b570      	push	{r4, r5, r6, lr}
 8002ed2:	4e0d      	ldr	r6, [pc, #52]	; (8002f08 <__libc_init_array+0x38>)
 8002ed4:	4c0d      	ldr	r4, [pc, #52]	; (8002f0c <__libc_init_array+0x3c>)
 8002ed6:	1ba4      	subs	r4, r4, r6
 8002ed8:	10a4      	asrs	r4, r4, #2
 8002eda:	2500      	movs	r5, #0
 8002edc:	42a5      	cmp	r5, r4
 8002ede:	d109      	bne.n	8002ef4 <__libc_init_array+0x24>
 8002ee0:	4e0b      	ldr	r6, [pc, #44]	; (8002f10 <__libc_init_array+0x40>)
 8002ee2:	4c0c      	ldr	r4, [pc, #48]	; (8002f14 <__libc_init_array+0x44>)
 8002ee4:	f000 ff68 	bl	8003db8 <_init>
 8002ee8:	1ba4      	subs	r4, r4, r6
 8002eea:	10a4      	asrs	r4, r4, #2
 8002eec:	2500      	movs	r5, #0
 8002eee:	42a5      	cmp	r5, r4
 8002ef0:	d105      	bne.n	8002efe <__libc_init_array+0x2e>
 8002ef2:	bd70      	pop	{r4, r5, r6, pc}
 8002ef4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ef8:	4798      	blx	r3
 8002efa:	3501      	adds	r5, #1
 8002efc:	e7ee      	b.n	8002edc <__libc_init_array+0xc>
 8002efe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f02:	4798      	blx	r3
 8002f04:	3501      	adds	r5, #1
 8002f06:	e7f2      	b.n	8002eee <__libc_init_array+0x1e>
 8002f08:	0816e80c 	.word	0x0816e80c
 8002f0c:	0816e80c 	.word	0x0816e80c
 8002f10:	0816e80c 	.word	0x0816e80c
 8002f14:	0816e810 	.word	0x0816e810

08002f18 <memset>:
 8002f18:	4402      	add	r2, r0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d100      	bne.n	8002f22 <memset+0xa>
 8002f20:	4770      	bx	lr
 8002f22:	f803 1b01 	strb.w	r1, [r3], #1
 8002f26:	e7f9      	b.n	8002f1c <memset+0x4>

08002f28 <iprintf>:
 8002f28:	b40f      	push	{r0, r1, r2, r3}
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <iprintf+0x2c>)
 8002f2c:	b513      	push	{r0, r1, r4, lr}
 8002f2e:	681c      	ldr	r4, [r3, #0]
 8002f30:	b124      	cbz	r4, 8002f3c <iprintf+0x14>
 8002f32:	69a3      	ldr	r3, [r4, #24]
 8002f34:	b913      	cbnz	r3, 8002f3c <iprintf+0x14>
 8002f36:	4620      	mov	r0, r4
 8002f38:	f000 fa22 	bl	8003380 <__sinit>
 8002f3c:	ab05      	add	r3, sp, #20
 8002f3e:	9a04      	ldr	r2, [sp, #16]
 8002f40:	68a1      	ldr	r1, [r4, #8]
 8002f42:	9301      	str	r3, [sp, #4]
 8002f44:	4620      	mov	r0, r4
 8002f46:	f000 fbdb 	bl	8003700 <_vfiprintf_r>
 8002f4a:	b002      	add	sp, #8
 8002f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f50:	b004      	add	sp, #16
 8002f52:	4770      	bx	lr
 8002f54:	2000000c 	.word	0x2000000c

08002f58 <_puts_r>:
 8002f58:	b570      	push	{r4, r5, r6, lr}
 8002f5a:	460e      	mov	r6, r1
 8002f5c:	4605      	mov	r5, r0
 8002f5e:	b118      	cbz	r0, 8002f68 <_puts_r+0x10>
 8002f60:	6983      	ldr	r3, [r0, #24]
 8002f62:	b90b      	cbnz	r3, 8002f68 <_puts_r+0x10>
 8002f64:	f000 fa0c 	bl	8003380 <__sinit>
 8002f68:	69ab      	ldr	r3, [r5, #24]
 8002f6a:	68ac      	ldr	r4, [r5, #8]
 8002f6c:	b913      	cbnz	r3, 8002f74 <_puts_r+0x1c>
 8002f6e:	4628      	mov	r0, r5
 8002f70:	f000 fa06 	bl	8003380 <__sinit>
 8002f74:	4b23      	ldr	r3, [pc, #140]	; (8003004 <_puts_r+0xac>)
 8002f76:	429c      	cmp	r4, r3
 8002f78:	d117      	bne.n	8002faa <_puts_r+0x52>
 8002f7a:	686c      	ldr	r4, [r5, #4]
 8002f7c:	89a3      	ldrh	r3, [r4, #12]
 8002f7e:	071b      	lsls	r3, r3, #28
 8002f80:	d51d      	bpl.n	8002fbe <_puts_r+0x66>
 8002f82:	6923      	ldr	r3, [r4, #16]
 8002f84:	b1db      	cbz	r3, 8002fbe <_puts_r+0x66>
 8002f86:	3e01      	subs	r6, #1
 8002f88:	68a3      	ldr	r3, [r4, #8]
 8002f8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	60a3      	str	r3, [r4, #8]
 8002f92:	b9e9      	cbnz	r1, 8002fd0 <_puts_r+0x78>
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	da2e      	bge.n	8002ff6 <_puts_r+0x9e>
 8002f98:	4622      	mov	r2, r4
 8002f9a:	210a      	movs	r1, #10
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	f000 f83f 	bl	8003020 <__swbuf_r>
 8002fa2:	3001      	adds	r0, #1
 8002fa4:	d011      	beq.n	8002fca <_puts_r+0x72>
 8002fa6:	200a      	movs	r0, #10
 8002fa8:	e011      	b.n	8002fce <_puts_r+0x76>
 8002faa:	4b17      	ldr	r3, [pc, #92]	; (8003008 <_puts_r+0xb0>)
 8002fac:	429c      	cmp	r4, r3
 8002fae:	d101      	bne.n	8002fb4 <_puts_r+0x5c>
 8002fb0:	68ac      	ldr	r4, [r5, #8]
 8002fb2:	e7e3      	b.n	8002f7c <_puts_r+0x24>
 8002fb4:	4b15      	ldr	r3, [pc, #84]	; (800300c <_puts_r+0xb4>)
 8002fb6:	429c      	cmp	r4, r3
 8002fb8:	bf08      	it	eq
 8002fba:	68ec      	ldreq	r4, [r5, #12]
 8002fbc:	e7de      	b.n	8002f7c <_puts_r+0x24>
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	4628      	mov	r0, r5
 8002fc2:	f000 f87f 	bl	80030c4 <__swsetup_r>
 8002fc6:	2800      	cmp	r0, #0
 8002fc8:	d0dd      	beq.n	8002f86 <_puts_r+0x2e>
 8002fca:	f04f 30ff 	mov.w	r0, #4294967295
 8002fce:	bd70      	pop	{r4, r5, r6, pc}
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	da04      	bge.n	8002fde <_puts_r+0x86>
 8002fd4:	69a2      	ldr	r2, [r4, #24]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	dc06      	bgt.n	8002fe8 <_puts_r+0x90>
 8002fda:	290a      	cmp	r1, #10
 8002fdc:	d004      	beq.n	8002fe8 <_puts_r+0x90>
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	6022      	str	r2, [r4, #0]
 8002fe4:	7019      	strb	r1, [r3, #0]
 8002fe6:	e7cf      	b.n	8002f88 <_puts_r+0x30>
 8002fe8:	4622      	mov	r2, r4
 8002fea:	4628      	mov	r0, r5
 8002fec:	f000 f818 	bl	8003020 <__swbuf_r>
 8002ff0:	3001      	adds	r0, #1
 8002ff2:	d1c9      	bne.n	8002f88 <_puts_r+0x30>
 8002ff4:	e7e9      	b.n	8002fca <_puts_r+0x72>
 8002ff6:	6823      	ldr	r3, [r4, #0]
 8002ff8:	200a      	movs	r0, #10
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	6022      	str	r2, [r4, #0]
 8002ffe:	7018      	strb	r0, [r3, #0]
 8003000:	e7e5      	b.n	8002fce <_puts_r+0x76>
 8003002:	bf00      	nop
 8003004:	0816e798 	.word	0x0816e798
 8003008:	0816e7b8 	.word	0x0816e7b8
 800300c:	0816e778 	.word	0x0816e778

08003010 <puts>:
 8003010:	4b02      	ldr	r3, [pc, #8]	; (800301c <puts+0xc>)
 8003012:	4601      	mov	r1, r0
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	f7ff bf9f 	b.w	8002f58 <_puts_r>
 800301a:	bf00      	nop
 800301c:	2000000c 	.word	0x2000000c

08003020 <__swbuf_r>:
 8003020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003022:	460e      	mov	r6, r1
 8003024:	4614      	mov	r4, r2
 8003026:	4605      	mov	r5, r0
 8003028:	b118      	cbz	r0, 8003032 <__swbuf_r+0x12>
 800302a:	6983      	ldr	r3, [r0, #24]
 800302c:	b90b      	cbnz	r3, 8003032 <__swbuf_r+0x12>
 800302e:	f000 f9a7 	bl	8003380 <__sinit>
 8003032:	4b21      	ldr	r3, [pc, #132]	; (80030b8 <__swbuf_r+0x98>)
 8003034:	429c      	cmp	r4, r3
 8003036:	d12a      	bne.n	800308e <__swbuf_r+0x6e>
 8003038:	686c      	ldr	r4, [r5, #4]
 800303a:	69a3      	ldr	r3, [r4, #24]
 800303c:	60a3      	str	r3, [r4, #8]
 800303e:	89a3      	ldrh	r3, [r4, #12]
 8003040:	071a      	lsls	r2, r3, #28
 8003042:	d52e      	bpl.n	80030a2 <__swbuf_r+0x82>
 8003044:	6923      	ldr	r3, [r4, #16]
 8003046:	b363      	cbz	r3, 80030a2 <__swbuf_r+0x82>
 8003048:	6923      	ldr	r3, [r4, #16]
 800304a:	6820      	ldr	r0, [r4, #0]
 800304c:	1ac0      	subs	r0, r0, r3
 800304e:	6963      	ldr	r3, [r4, #20]
 8003050:	b2f6      	uxtb	r6, r6
 8003052:	4283      	cmp	r3, r0
 8003054:	4637      	mov	r7, r6
 8003056:	dc04      	bgt.n	8003062 <__swbuf_r+0x42>
 8003058:	4621      	mov	r1, r4
 800305a:	4628      	mov	r0, r5
 800305c:	f000 f926 	bl	80032ac <_fflush_r>
 8003060:	bb28      	cbnz	r0, 80030ae <__swbuf_r+0x8e>
 8003062:	68a3      	ldr	r3, [r4, #8]
 8003064:	3b01      	subs	r3, #1
 8003066:	60a3      	str	r3, [r4, #8]
 8003068:	6823      	ldr	r3, [r4, #0]
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	6022      	str	r2, [r4, #0]
 800306e:	701e      	strb	r6, [r3, #0]
 8003070:	6963      	ldr	r3, [r4, #20]
 8003072:	3001      	adds	r0, #1
 8003074:	4283      	cmp	r3, r0
 8003076:	d004      	beq.n	8003082 <__swbuf_r+0x62>
 8003078:	89a3      	ldrh	r3, [r4, #12]
 800307a:	07db      	lsls	r3, r3, #31
 800307c:	d519      	bpl.n	80030b2 <__swbuf_r+0x92>
 800307e:	2e0a      	cmp	r6, #10
 8003080:	d117      	bne.n	80030b2 <__swbuf_r+0x92>
 8003082:	4621      	mov	r1, r4
 8003084:	4628      	mov	r0, r5
 8003086:	f000 f911 	bl	80032ac <_fflush_r>
 800308a:	b190      	cbz	r0, 80030b2 <__swbuf_r+0x92>
 800308c:	e00f      	b.n	80030ae <__swbuf_r+0x8e>
 800308e:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <__swbuf_r+0x9c>)
 8003090:	429c      	cmp	r4, r3
 8003092:	d101      	bne.n	8003098 <__swbuf_r+0x78>
 8003094:	68ac      	ldr	r4, [r5, #8]
 8003096:	e7d0      	b.n	800303a <__swbuf_r+0x1a>
 8003098:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <__swbuf_r+0xa0>)
 800309a:	429c      	cmp	r4, r3
 800309c:	bf08      	it	eq
 800309e:	68ec      	ldreq	r4, [r5, #12]
 80030a0:	e7cb      	b.n	800303a <__swbuf_r+0x1a>
 80030a2:	4621      	mov	r1, r4
 80030a4:	4628      	mov	r0, r5
 80030a6:	f000 f80d 	bl	80030c4 <__swsetup_r>
 80030aa:	2800      	cmp	r0, #0
 80030ac:	d0cc      	beq.n	8003048 <__swbuf_r+0x28>
 80030ae:	f04f 37ff 	mov.w	r7, #4294967295
 80030b2:	4638      	mov	r0, r7
 80030b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030b6:	bf00      	nop
 80030b8:	0816e798 	.word	0x0816e798
 80030bc:	0816e7b8 	.word	0x0816e7b8
 80030c0:	0816e778 	.word	0x0816e778

080030c4 <__swsetup_r>:
 80030c4:	4b32      	ldr	r3, [pc, #200]	; (8003190 <__swsetup_r+0xcc>)
 80030c6:	b570      	push	{r4, r5, r6, lr}
 80030c8:	681d      	ldr	r5, [r3, #0]
 80030ca:	4606      	mov	r6, r0
 80030cc:	460c      	mov	r4, r1
 80030ce:	b125      	cbz	r5, 80030da <__swsetup_r+0x16>
 80030d0:	69ab      	ldr	r3, [r5, #24]
 80030d2:	b913      	cbnz	r3, 80030da <__swsetup_r+0x16>
 80030d4:	4628      	mov	r0, r5
 80030d6:	f000 f953 	bl	8003380 <__sinit>
 80030da:	4b2e      	ldr	r3, [pc, #184]	; (8003194 <__swsetup_r+0xd0>)
 80030dc:	429c      	cmp	r4, r3
 80030de:	d10f      	bne.n	8003100 <__swsetup_r+0x3c>
 80030e0:	686c      	ldr	r4, [r5, #4]
 80030e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	0715      	lsls	r5, r2, #28
 80030ea:	d42c      	bmi.n	8003146 <__swsetup_r+0x82>
 80030ec:	06d0      	lsls	r0, r2, #27
 80030ee:	d411      	bmi.n	8003114 <__swsetup_r+0x50>
 80030f0:	2209      	movs	r2, #9
 80030f2:	6032      	str	r2, [r6, #0]
 80030f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030f8:	81a3      	strh	r3, [r4, #12]
 80030fa:	f04f 30ff 	mov.w	r0, #4294967295
 80030fe:	e03e      	b.n	800317e <__swsetup_r+0xba>
 8003100:	4b25      	ldr	r3, [pc, #148]	; (8003198 <__swsetup_r+0xd4>)
 8003102:	429c      	cmp	r4, r3
 8003104:	d101      	bne.n	800310a <__swsetup_r+0x46>
 8003106:	68ac      	ldr	r4, [r5, #8]
 8003108:	e7eb      	b.n	80030e2 <__swsetup_r+0x1e>
 800310a:	4b24      	ldr	r3, [pc, #144]	; (800319c <__swsetup_r+0xd8>)
 800310c:	429c      	cmp	r4, r3
 800310e:	bf08      	it	eq
 8003110:	68ec      	ldreq	r4, [r5, #12]
 8003112:	e7e6      	b.n	80030e2 <__swsetup_r+0x1e>
 8003114:	0751      	lsls	r1, r2, #29
 8003116:	d512      	bpl.n	800313e <__swsetup_r+0x7a>
 8003118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800311a:	b141      	cbz	r1, 800312e <__swsetup_r+0x6a>
 800311c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003120:	4299      	cmp	r1, r3
 8003122:	d002      	beq.n	800312a <__swsetup_r+0x66>
 8003124:	4630      	mov	r0, r6
 8003126:	f000 fa19 	bl	800355c <_free_r>
 800312a:	2300      	movs	r3, #0
 800312c:	6363      	str	r3, [r4, #52]	; 0x34
 800312e:	89a3      	ldrh	r3, [r4, #12]
 8003130:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003134:	81a3      	strh	r3, [r4, #12]
 8003136:	2300      	movs	r3, #0
 8003138:	6063      	str	r3, [r4, #4]
 800313a:	6923      	ldr	r3, [r4, #16]
 800313c:	6023      	str	r3, [r4, #0]
 800313e:	89a3      	ldrh	r3, [r4, #12]
 8003140:	f043 0308 	orr.w	r3, r3, #8
 8003144:	81a3      	strh	r3, [r4, #12]
 8003146:	6923      	ldr	r3, [r4, #16]
 8003148:	b94b      	cbnz	r3, 800315e <__swsetup_r+0x9a>
 800314a:	89a3      	ldrh	r3, [r4, #12]
 800314c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003154:	d003      	beq.n	800315e <__swsetup_r+0x9a>
 8003156:	4621      	mov	r1, r4
 8003158:	4630      	mov	r0, r6
 800315a:	f000 f9bf 	bl	80034dc <__smakebuf_r>
 800315e:	89a2      	ldrh	r2, [r4, #12]
 8003160:	f012 0301 	ands.w	r3, r2, #1
 8003164:	d00c      	beq.n	8003180 <__swsetup_r+0xbc>
 8003166:	2300      	movs	r3, #0
 8003168:	60a3      	str	r3, [r4, #8]
 800316a:	6963      	ldr	r3, [r4, #20]
 800316c:	425b      	negs	r3, r3
 800316e:	61a3      	str	r3, [r4, #24]
 8003170:	6923      	ldr	r3, [r4, #16]
 8003172:	b953      	cbnz	r3, 800318a <__swsetup_r+0xc6>
 8003174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003178:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800317c:	d1ba      	bne.n	80030f4 <__swsetup_r+0x30>
 800317e:	bd70      	pop	{r4, r5, r6, pc}
 8003180:	0792      	lsls	r2, r2, #30
 8003182:	bf58      	it	pl
 8003184:	6963      	ldrpl	r3, [r4, #20]
 8003186:	60a3      	str	r3, [r4, #8]
 8003188:	e7f2      	b.n	8003170 <__swsetup_r+0xac>
 800318a:	2000      	movs	r0, #0
 800318c:	e7f7      	b.n	800317e <__swsetup_r+0xba>
 800318e:	bf00      	nop
 8003190:	2000000c 	.word	0x2000000c
 8003194:	0816e798 	.word	0x0816e798
 8003198:	0816e7b8 	.word	0x0816e7b8
 800319c:	0816e778 	.word	0x0816e778

080031a0 <__sflush_r>:
 80031a0:	898a      	ldrh	r2, [r1, #12]
 80031a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031a6:	4605      	mov	r5, r0
 80031a8:	0710      	lsls	r0, r2, #28
 80031aa:	460c      	mov	r4, r1
 80031ac:	d458      	bmi.n	8003260 <__sflush_r+0xc0>
 80031ae:	684b      	ldr	r3, [r1, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	dc05      	bgt.n	80031c0 <__sflush_r+0x20>
 80031b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	dc02      	bgt.n	80031c0 <__sflush_r+0x20>
 80031ba:	2000      	movs	r0, #0
 80031bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031c2:	2e00      	cmp	r6, #0
 80031c4:	d0f9      	beq.n	80031ba <__sflush_r+0x1a>
 80031c6:	2300      	movs	r3, #0
 80031c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80031cc:	682f      	ldr	r7, [r5, #0]
 80031ce:	6a21      	ldr	r1, [r4, #32]
 80031d0:	602b      	str	r3, [r5, #0]
 80031d2:	d032      	beq.n	800323a <__sflush_r+0x9a>
 80031d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031d6:	89a3      	ldrh	r3, [r4, #12]
 80031d8:	075a      	lsls	r2, r3, #29
 80031da:	d505      	bpl.n	80031e8 <__sflush_r+0x48>
 80031dc:	6863      	ldr	r3, [r4, #4]
 80031de:	1ac0      	subs	r0, r0, r3
 80031e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031e2:	b10b      	cbz	r3, 80031e8 <__sflush_r+0x48>
 80031e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031e6:	1ac0      	subs	r0, r0, r3
 80031e8:	2300      	movs	r3, #0
 80031ea:	4602      	mov	r2, r0
 80031ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031ee:	6a21      	ldr	r1, [r4, #32]
 80031f0:	4628      	mov	r0, r5
 80031f2:	47b0      	blx	r6
 80031f4:	1c43      	adds	r3, r0, #1
 80031f6:	89a3      	ldrh	r3, [r4, #12]
 80031f8:	d106      	bne.n	8003208 <__sflush_r+0x68>
 80031fa:	6829      	ldr	r1, [r5, #0]
 80031fc:	291d      	cmp	r1, #29
 80031fe:	d848      	bhi.n	8003292 <__sflush_r+0xf2>
 8003200:	4a29      	ldr	r2, [pc, #164]	; (80032a8 <__sflush_r+0x108>)
 8003202:	40ca      	lsrs	r2, r1
 8003204:	07d6      	lsls	r6, r2, #31
 8003206:	d544      	bpl.n	8003292 <__sflush_r+0xf2>
 8003208:	2200      	movs	r2, #0
 800320a:	6062      	str	r2, [r4, #4]
 800320c:	04d9      	lsls	r1, r3, #19
 800320e:	6922      	ldr	r2, [r4, #16]
 8003210:	6022      	str	r2, [r4, #0]
 8003212:	d504      	bpl.n	800321e <__sflush_r+0x7e>
 8003214:	1c42      	adds	r2, r0, #1
 8003216:	d101      	bne.n	800321c <__sflush_r+0x7c>
 8003218:	682b      	ldr	r3, [r5, #0]
 800321a:	b903      	cbnz	r3, 800321e <__sflush_r+0x7e>
 800321c:	6560      	str	r0, [r4, #84]	; 0x54
 800321e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003220:	602f      	str	r7, [r5, #0]
 8003222:	2900      	cmp	r1, #0
 8003224:	d0c9      	beq.n	80031ba <__sflush_r+0x1a>
 8003226:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800322a:	4299      	cmp	r1, r3
 800322c:	d002      	beq.n	8003234 <__sflush_r+0x94>
 800322e:	4628      	mov	r0, r5
 8003230:	f000 f994 	bl	800355c <_free_r>
 8003234:	2000      	movs	r0, #0
 8003236:	6360      	str	r0, [r4, #52]	; 0x34
 8003238:	e7c0      	b.n	80031bc <__sflush_r+0x1c>
 800323a:	2301      	movs	r3, #1
 800323c:	4628      	mov	r0, r5
 800323e:	47b0      	blx	r6
 8003240:	1c41      	adds	r1, r0, #1
 8003242:	d1c8      	bne.n	80031d6 <__sflush_r+0x36>
 8003244:	682b      	ldr	r3, [r5, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0c5      	beq.n	80031d6 <__sflush_r+0x36>
 800324a:	2b1d      	cmp	r3, #29
 800324c:	d001      	beq.n	8003252 <__sflush_r+0xb2>
 800324e:	2b16      	cmp	r3, #22
 8003250:	d101      	bne.n	8003256 <__sflush_r+0xb6>
 8003252:	602f      	str	r7, [r5, #0]
 8003254:	e7b1      	b.n	80031ba <__sflush_r+0x1a>
 8003256:	89a3      	ldrh	r3, [r4, #12]
 8003258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800325c:	81a3      	strh	r3, [r4, #12]
 800325e:	e7ad      	b.n	80031bc <__sflush_r+0x1c>
 8003260:	690f      	ldr	r7, [r1, #16]
 8003262:	2f00      	cmp	r7, #0
 8003264:	d0a9      	beq.n	80031ba <__sflush_r+0x1a>
 8003266:	0793      	lsls	r3, r2, #30
 8003268:	680e      	ldr	r6, [r1, #0]
 800326a:	bf08      	it	eq
 800326c:	694b      	ldreq	r3, [r1, #20]
 800326e:	600f      	str	r7, [r1, #0]
 8003270:	bf18      	it	ne
 8003272:	2300      	movne	r3, #0
 8003274:	eba6 0807 	sub.w	r8, r6, r7
 8003278:	608b      	str	r3, [r1, #8]
 800327a:	f1b8 0f00 	cmp.w	r8, #0
 800327e:	dd9c      	ble.n	80031ba <__sflush_r+0x1a>
 8003280:	4643      	mov	r3, r8
 8003282:	463a      	mov	r2, r7
 8003284:	6a21      	ldr	r1, [r4, #32]
 8003286:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003288:	4628      	mov	r0, r5
 800328a:	47b0      	blx	r6
 800328c:	2800      	cmp	r0, #0
 800328e:	dc06      	bgt.n	800329e <__sflush_r+0xfe>
 8003290:	89a3      	ldrh	r3, [r4, #12]
 8003292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003296:	81a3      	strh	r3, [r4, #12]
 8003298:	f04f 30ff 	mov.w	r0, #4294967295
 800329c:	e78e      	b.n	80031bc <__sflush_r+0x1c>
 800329e:	4407      	add	r7, r0
 80032a0:	eba8 0800 	sub.w	r8, r8, r0
 80032a4:	e7e9      	b.n	800327a <__sflush_r+0xda>
 80032a6:	bf00      	nop
 80032a8:	20400001 	.word	0x20400001

080032ac <_fflush_r>:
 80032ac:	b538      	push	{r3, r4, r5, lr}
 80032ae:	690b      	ldr	r3, [r1, #16]
 80032b0:	4605      	mov	r5, r0
 80032b2:	460c      	mov	r4, r1
 80032b4:	b1db      	cbz	r3, 80032ee <_fflush_r+0x42>
 80032b6:	b118      	cbz	r0, 80032c0 <_fflush_r+0x14>
 80032b8:	6983      	ldr	r3, [r0, #24]
 80032ba:	b90b      	cbnz	r3, 80032c0 <_fflush_r+0x14>
 80032bc:	f000 f860 	bl	8003380 <__sinit>
 80032c0:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <_fflush_r+0x48>)
 80032c2:	429c      	cmp	r4, r3
 80032c4:	d109      	bne.n	80032da <_fflush_r+0x2e>
 80032c6:	686c      	ldr	r4, [r5, #4]
 80032c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032cc:	b17b      	cbz	r3, 80032ee <_fflush_r+0x42>
 80032ce:	4621      	mov	r1, r4
 80032d0:	4628      	mov	r0, r5
 80032d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032d6:	f7ff bf63 	b.w	80031a0 <__sflush_r>
 80032da:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <_fflush_r+0x4c>)
 80032dc:	429c      	cmp	r4, r3
 80032de:	d101      	bne.n	80032e4 <_fflush_r+0x38>
 80032e0:	68ac      	ldr	r4, [r5, #8]
 80032e2:	e7f1      	b.n	80032c8 <_fflush_r+0x1c>
 80032e4:	4b05      	ldr	r3, [pc, #20]	; (80032fc <_fflush_r+0x50>)
 80032e6:	429c      	cmp	r4, r3
 80032e8:	bf08      	it	eq
 80032ea:	68ec      	ldreq	r4, [r5, #12]
 80032ec:	e7ec      	b.n	80032c8 <_fflush_r+0x1c>
 80032ee:	2000      	movs	r0, #0
 80032f0:	bd38      	pop	{r3, r4, r5, pc}
 80032f2:	bf00      	nop
 80032f4:	0816e798 	.word	0x0816e798
 80032f8:	0816e7b8 	.word	0x0816e7b8
 80032fc:	0816e778 	.word	0x0816e778

08003300 <std>:
 8003300:	2300      	movs	r3, #0
 8003302:	b510      	push	{r4, lr}
 8003304:	4604      	mov	r4, r0
 8003306:	e9c0 3300 	strd	r3, r3, [r0]
 800330a:	6083      	str	r3, [r0, #8]
 800330c:	8181      	strh	r1, [r0, #12]
 800330e:	6643      	str	r3, [r0, #100]	; 0x64
 8003310:	81c2      	strh	r2, [r0, #14]
 8003312:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003316:	6183      	str	r3, [r0, #24]
 8003318:	4619      	mov	r1, r3
 800331a:	2208      	movs	r2, #8
 800331c:	305c      	adds	r0, #92	; 0x5c
 800331e:	f7ff fdfb 	bl	8002f18 <memset>
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <std+0x38>)
 8003324:	6263      	str	r3, [r4, #36]	; 0x24
 8003326:	4b05      	ldr	r3, [pc, #20]	; (800333c <std+0x3c>)
 8003328:	62a3      	str	r3, [r4, #40]	; 0x28
 800332a:	4b05      	ldr	r3, [pc, #20]	; (8003340 <std+0x40>)
 800332c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800332e:	4b05      	ldr	r3, [pc, #20]	; (8003344 <std+0x44>)
 8003330:	6224      	str	r4, [r4, #32]
 8003332:	6323      	str	r3, [r4, #48]	; 0x30
 8003334:	bd10      	pop	{r4, pc}
 8003336:	bf00      	nop
 8003338:	08003c5d 	.word	0x08003c5d
 800333c:	08003c7f 	.word	0x08003c7f
 8003340:	08003cb7 	.word	0x08003cb7
 8003344:	08003cdb 	.word	0x08003cdb

08003348 <_cleanup_r>:
 8003348:	4901      	ldr	r1, [pc, #4]	; (8003350 <_cleanup_r+0x8>)
 800334a:	f000 b885 	b.w	8003458 <_fwalk_reent>
 800334e:	bf00      	nop
 8003350:	080032ad 	.word	0x080032ad

08003354 <__sfmoreglue>:
 8003354:	b570      	push	{r4, r5, r6, lr}
 8003356:	1e4a      	subs	r2, r1, #1
 8003358:	2568      	movs	r5, #104	; 0x68
 800335a:	4355      	muls	r5, r2
 800335c:	460e      	mov	r6, r1
 800335e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003362:	f000 f949 	bl	80035f8 <_malloc_r>
 8003366:	4604      	mov	r4, r0
 8003368:	b140      	cbz	r0, 800337c <__sfmoreglue+0x28>
 800336a:	2100      	movs	r1, #0
 800336c:	e9c0 1600 	strd	r1, r6, [r0]
 8003370:	300c      	adds	r0, #12
 8003372:	60a0      	str	r0, [r4, #8]
 8003374:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003378:	f7ff fdce 	bl	8002f18 <memset>
 800337c:	4620      	mov	r0, r4
 800337e:	bd70      	pop	{r4, r5, r6, pc}

08003380 <__sinit>:
 8003380:	6983      	ldr	r3, [r0, #24]
 8003382:	b510      	push	{r4, lr}
 8003384:	4604      	mov	r4, r0
 8003386:	bb33      	cbnz	r3, 80033d6 <__sinit+0x56>
 8003388:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800338c:	6503      	str	r3, [r0, #80]	; 0x50
 800338e:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <__sinit+0x58>)
 8003390:	4a12      	ldr	r2, [pc, #72]	; (80033dc <__sinit+0x5c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6282      	str	r2, [r0, #40]	; 0x28
 8003396:	4298      	cmp	r0, r3
 8003398:	bf04      	itt	eq
 800339a:	2301      	moveq	r3, #1
 800339c:	6183      	streq	r3, [r0, #24]
 800339e:	f000 f81f 	bl	80033e0 <__sfp>
 80033a2:	6060      	str	r0, [r4, #4]
 80033a4:	4620      	mov	r0, r4
 80033a6:	f000 f81b 	bl	80033e0 <__sfp>
 80033aa:	60a0      	str	r0, [r4, #8]
 80033ac:	4620      	mov	r0, r4
 80033ae:	f000 f817 	bl	80033e0 <__sfp>
 80033b2:	2200      	movs	r2, #0
 80033b4:	60e0      	str	r0, [r4, #12]
 80033b6:	2104      	movs	r1, #4
 80033b8:	6860      	ldr	r0, [r4, #4]
 80033ba:	f7ff ffa1 	bl	8003300 <std>
 80033be:	2201      	movs	r2, #1
 80033c0:	2109      	movs	r1, #9
 80033c2:	68a0      	ldr	r0, [r4, #8]
 80033c4:	f7ff ff9c 	bl	8003300 <std>
 80033c8:	2202      	movs	r2, #2
 80033ca:	2112      	movs	r1, #18
 80033cc:	68e0      	ldr	r0, [r4, #12]
 80033ce:	f7ff ff97 	bl	8003300 <std>
 80033d2:	2301      	movs	r3, #1
 80033d4:	61a3      	str	r3, [r4, #24]
 80033d6:	bd10      	pop	{r4, pc}
 80033d8:	0816e774 	.word	0x0816e774
 80033dc:	08003349 	.word	0x08003349

080033e0 <__sfp>:
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e2:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <__sfp+0x70>)
 80033e4:	681e      	ldr	r6, [r3, #0]
 80033e6:	69b3      	ldr	r3, [r6, #24]
 80033e8:	4607      	mov	r7, r0
 80033ea:	b913      	cbnz	r3, 80033f2 <__sfp+0x12>
 80033ec:	4630      	mov	r0, r6
 80033ee:	f7ff ffc7 	bl	8003380 <__sinit>
 80033f2:	3648      	adds	r6, #72	; 0x48
 80033f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	d503      	bpl.n	8003404 <__sfp+0x24>
 80033fc:	6833      	ldr	r3, [r6, #0]
 80033fe:	b133      	cbz	r3, 800340e <__sfp+0x2e>
 8003400:	6836      	ldr	r6, [r6, #0]
 8003402:	e7f7      	b.n	80033f4 <__sfp+0x14>
 8003404:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003408:	b16d      	cbz	r5, 8003426 <__sfp+0x46>
 800340a:	3468      	adds	r4, #104	; 0x68
 800340c:	e7f4      	b.n	80033f8 <__sfp+0x18>
 800340e:	2104      	movs	r1, #4
 8003410:	4638      	mov	r0, r7
 8003412:	f7ff ff9f 	bl	8003354 <__sfmoreglue>
 8003416:	6030      	str	r0, [r6, #0]
 8003418:	2800      	cmp	r0, #0
 800341a:	d1f1      	bne.n	8003400 <__sfp+0x20>
 800341c:	230c      	movs	r3, #12
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	4604      	mov	r4, r0
 8003422:	4620      	mov	r0, r4
 8003424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003426:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <__sfp+0x74>)
 8003428:	6665      	str	r5, [r4, #100]	; 0x64
 800342a:	e9c4 5500 	strd	r5, r5, [r4]
 800342e:	60a5      	str	r5, [r4, #8]
 8003430:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003434:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003438:	2208      	movs	r2, #8
 800343a:	4629      	mov	r1, r5
 800343c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003440:	f7ff fd6a 	bl	8002f18 <memset>
 8003444:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003448:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800344c:	e7e9      	b.n	8003422 <__sfp+0x42>
 800344e:	bf00      	nop
 8003450:	0816e774 	.word	0x0816e774
 8003454:	ffff0001 	.word	0xffff0001

08003458 <_fwalk_reent>:
 8003458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800345c:	4680      	mov	r8, r0
 800345e:	4689      	mov	r9, r1
 8003460:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003464:	2600      	movs	r6, #0
 8003466:	b914      	cbnz	r4, 800346e <_fwalk_reent+0x16>
 8003468:	4630      	mov	r0, r6
 800346a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800346e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003472:	3f01      	subs	r7, #1
 8003474:	d501      	bpl.n	800347a <_fwalk_reent+0x22>
 8003476:	6824      	ldr	r4, [r4, #0]
 8003478:	e7f5      	b.n	8003466 <_fwalk_reent+0xe>
 800347a:	89ab      	ldrh	r3, [r5, #12]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d907      	bls.n	8003490 <_fwalk_reent+0x38>
 8003480:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003484:	3301      	adds	r3, #1
 8003486:	d003      	beq.n	8003490 <_fwalk_reent+0x38>
 8003488:	4629      	mov	r1, r5
 800348a:	4640      	mov	r0, r8
 800348c:	47c8      	blx	r9
 800348e:	4306      	orrs	r6, r0
 8003490:	3568      	adds	r5, #104	; 0x68
 8003492:	e7ee      	b.n	8003472 <_fwalk_reent+0x1a>

08003494 <__swhatbuf_r>:
 8003494:	b570      	push	{r4, r5, r6, lr}
 8003496:	460e      	mov	r6, r1
 8003498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800349c:	2900      	cmp	r1, #0
 800349e:	b096      	sub	sp, #88	; 0x58
 80034a0:	4614      	mov	r4, r2
 80034a2:	461d      	mov	r5, r3
 80034a4:	da07      	bge.n	80034b6 <__swhatbuf_r+0x22>
 80034a6:	2300      	movs	r3, #0
 80034a8:	602b      	str	r3, [r5, #0]
 80034aa:	89b3      	ldrh	r3, [r6, #12]
 80034ac:	061a      	lsls	r2, r3, #24
 80034ae:	d410      	bmi.n	80034d2 <__swhatbuf_r+0x3e>
 80034b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034b4:	e00e      	b.n	80034d4 <__swhatbuf_r+0x40>
 80034b6:	466a      	mov	r2, sp
 80034b8:	f000 fc36 	bl	8003d28 <_fstat_r>
 80034bc:	2800      	cmp	r0, #0
 80034be:	dbf2      	blt.n	80034a6 <__swhatbuf_r+0x12>
 80034c0:	9a01      	ldr	r2, [sp, #4]
 80034c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80034c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80034ca:	425a      	negs	r2, r3
 80034cc:	415a      	adcs	r2, r3
 80034ce:	602a      	str	r2, [r5, #0]
 80034d0:	e7ee      	b.n	80034b0 <__swhatbuf_r+0x1c>
 80034d2:	2340      	movs	r3, #64	; 0x40
 80034d4:	2000      	movs	r0, #0
 80034d6:	6023      	str	r3, [r4, #0]
 80034d8:	b016      	add	sp, #88	; 0x58
 80034da:	bd70      	pop	{r4, r5, r6, pc}

080034dc <__smakebuf_r>:
 80034dc:	898b      	ldrh	r3, [r1, #12]
 80034de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80034e0:	079d      	lsls	r5, r3, #30
 80034e2:	4606      	mov	r6, r0
 80034e4:	460c      	mov	r4, r1
 80034e6:	d507      	bpl.n	80034f8 <__smakebuf_r+0x1c>
 80034e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80034ec:	6023      	str	r3, [r4, #0]
 80034ee:	6123      	str	r3, [r4, #16]
 80034f0:	2301      	movs	r3, #1
 80034f2:	6163      	str	r3, [r4, #20]
 80034f4:	b002      	add	sp, #8
 80034f6:	bd70      	pop	{r4, r5, r6, pc}
 80034f8:	ab01      	add	r3, sp, #4
 80034fa:	466a      	mov	r2, sp
 80034fc:	f7ff ffca 	bl	8003494 <__swhatbuf_r>
 8003500:	9900      	ldr	r1, [sp, #0]
 8003502:	4605      	mov	r5, r0
 8003504:	4630      	mov	r0, r6
 8003506:	f000 f877 	bl	80035f8 <_malloc_r>
 800350a:	b948      	cbnz	r0, 8003520 <__smakebuf_r+0x44>
 800350c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003510:	059a      	lsls	r2, r3, #22
 8003512:	d4ef      	bmi.n	80034f4 <__smakebuf_r+0x18>
 8003514:	f023 0303 	bic.w	r3, r3, #3
 8003518:	f043 0302 	orr.w	r3, r3, #2
 800351c:	81a3      	strh	r3, [r4, #12]
 800351e:	e7e3      	b.n	80034e8 <__smakebuf_r+0xc>
 8003520:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <__smakebuf_r+0x7c>)
 8003522:	62b3      	str	r3, [r6, #40]	; 0x28
 8003524:	89a3      	ldrh	r3, [r4, #12]
 8003526:	6020      	str	r0, [r4, #0]
 8003528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800352c:	81a3      	strh	r3, [r4, #12]
 800352e:	9b00      	ldr	r3, [sp, #0]
 8003530:	6163      	str	r3, [r4, #20]
 8003532:	9b01      	ldr	r3, [sp, #4]
 8003534:	6120      	str	r0, [r4, #16]
 8003536:	b15b      	cbz	r3, 8003550 <__smakebuf_r+0x74>
 8003538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800353c:	4630      	mov	r0, r6
 800353e:	f000 fc05 	bl	8003d4c <_isatty_r>
 8003542:	b128      	cbz	r0, 8003550 <__smakebuf_r+0x74>
 8003544:	89a3      	ldrh	r3, [r4, #12]
 8003546:	f023 0303 	bic.w	r3, r3, #3
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	81a3      	strh	r3, [r4, #12]
 8003550:	89a3      	ldrh	r3, [r4, #12]
 8003552:	431d      	orrs	r5, r3
 8003554:	81a5      	strh	r5, [r4, #12]
 8003556:	e7cd      	b.n	80034f4 <__smakebuf_r+0x18>
 8003558:	08003349 	.word	0x08003349

0800355c <_free_r>:
 800355c:	b538      	push	{r3, r4, r5, lr}
 800355e:	4605      	mov	r5, r0
 8003560:	2900      	cmp	r1, #0
 8003562:	d045      	beq.n	80035f0 <_free_r+0x94>
 8003564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003568:	1f0c      	subs	r4, r1, #4
 800356a:	2b00      	cmp	r3, #0
 800356c:	bfb8      	it	lt
 800356e:	18e4      	addlt	r4, r4, r3
 8003570:	f000 fc0e 	bl	8003d90 <__malloc_lock>
 8003574:	4a1f      	ldr	r2, [pc, #124]	; (80035f4 <_free_r+0x98>)
 8003576:	6813      	ldr	r3, [r2, #0]
 8003578:	4610      	mov	r0, r2
 800357a:	b933      	cbnz	r3, 800358a <_free_r+0x2e>
 800357c:	6063      	str	r3, [r4, #4]
 800357e:	6014      	str	r4, [r2, #0]
 8003580:	4628      	mov	r0, r5
 8003582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003586:	f000 bc04 	b.w	8003d92 <__malloc_unlock>
 800358a:	42a3      	cmp	r3, r4
 800358c:	d90c      	bls.n	80035a8 <_free_r+0x4c>
 800358e:	6821      	ldr	r1, [r4, #0]
 8003590:	1862      	adds	r2, r4, r1
 8003592:	4293      	cmp	r3, r2
 8003594:	bf04      	itt	eq
 8003596:	681a      	ldreq	r2, [r3, #0]
 8003598:	685b      	ldreq	r3, [r3, #4]
 800359a:	6063      	str	r3, [r4, #4]
 800359c:	bf04      	itt	eq
 800359e:	1852      	addeq	r2, r2, r1
 80035a0:	6022      	streq	r2, [r4, #0]
 80035a2:	6004      	str	r4, [r0, #0]
 80035a4:	e7ec      	b.n	8003580 <_free_r+0x24>
 80035a6:	4613      	mov	r3, r2
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	b10a      	cbz	r2, 80035b0 <_free_r+0x54>
 80035ac:	42a2      	cmp	r2, r4
 80035ae:	d9fa      	bls.n	80035a6 <_free_r+0x4a>
 80035b0:	6819      	ldr	r1, [r3, #0]
 80035b2:	1858      	adds	r0, r3, r1
 80035b4:	42a0      	cmp	r0, r4
 80035b6:	d10b      	bne.n	80035d0 <_free_r+0x74>
 80035b8:	6820      	ldr	r0, [r4, #0]
 80035ba:	4401      	add	r1, r0
 80035bc:	1858      	adds	r0, r3, r1
 80035be:	4282      	cmp	r2, r0
 80035c0:	6019      	str	r1, [r3, #0]
 80035c2:	d1dd      	bne.n	8003580 <_free_r+0x24>
 80035c4:	6810      	ldr	r0, [r2, #0]
 80035c6:	6852      	ldr	r2, [r2, #4]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	4401      	add	r1, r0
 80035cc:	6019      	str	r1, [r3, #0]
 80035ce:	e7d7      	b.n	8003580 <_free_r+0x24>
 80035d0:	d902      	bls.n	80035d8 <_free_r+0x7c>
 80035d2:	230c      	movs	r3, #12
 80035d4:	602b      	str	r3, [r5, #0]
 80035d6:	e7d3      	b.n	8003580 <_free_r+0x24>
 80035d8:	6820      	ldr	r0, [r4, #0]
 80035da:	1821      	adds	r1, r4, r0
 80035dc:	428a      	cmp	r2, r1
 80035de:	bf04      	itt	eq
 80035e0:	6811      	ldreq	r1, [r2, #0]
 80035e2:	6852      	ldreq	r2, [r2, #4]
 80035e4:	6062      	str	r2, [r4, #4]
 80035e6:	bf04      	itt	eq
 80035e8:	1809      	addeq	r1, r1, r0
 80035ea:	6021      	streq	r1, [r4, #0]
 80035ec:	605c      	str	r4, [r3, #4]
 80035ee:	e7c7      	b.n	8003580 <_free_r+0x24>
 80035f0:	bd38      	pop	{r3, r4, r5, pc}
 80035f2:	bf00      	nop
 80035f4:	20000090 	.word	0x20000090

080035f8 <_malloc_r>:
 80035f8:	b570      	push	{r4, r5, r6, lr}
 80035fa:	1ccd      	adds	r5, r1, #3
 80035fc:	f025 0503 	bic.w	r5, r5, #3
 8003600:	3508      	adds	r5, #8
 8003602:	2d0c      	cmp	r5, #12
 8003604:	bf38      	it	cc
 8003606:	250c      	movcc	r5, #12
 8003608:	2d00      	cmp	r5, #0
 800360a:	4606      	mov	r6, r0
 800360c:	db01      	blt.n	8003612 <_malloc_r+0x1a>
 800360e:	42a9      	cmp	r1, r5
 8003610:	d903      	bls.n	800361a <_malloc_r+0x22>
 8003612:	230c      	movs	r3, #12
 8003614:	6033      	str	r3, [r6, #0]
 8003616:	2000      	movs	r0, #0
 8003618:	bd70      	pop	{r4, r5, r6, pc}
 800361a:	f000 fbb9 	bl	8003d90 <__malloc_lock>
 800361e:	4a21      	ldr	r2, [pc, #132]	; (80036a4 <_malloc_r+0xac>)
 8003620:	6814      	ldr	r4, [r2, #0]
 8003622:	4621      	mov	r1, r4
 8003624:	b991      	cbnz	r1, 800364c <_malloc_r+0x54>
 8003626:	4c20      	ldr	r4, [pc, #128]	; (80036a8 <_malloc_r+0xb0>)
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	b91b      	cbnz	r3, 8003634 <_malloc_r+0x3c>
 800362c:	4630      	mov	r0, r6
 800362e:	f000 fb05 	bl	8003c3c <_sbrk_r>
 8003632:	6020      	str	r0, [r4, #0]
 8003634:	4629      	mov	r1, r5
 8003636:	4630      	mov	r0, r6
 8003638:	f000 fb00 	bl	8003c3c <_sbrk_r>
 800363c:	1c43      	adds	r3, r0, #1
 800363e:	d124      	bne.n	800368a <_malloc_r+0x92>
 8003640:	230c      	movs	r3, #12
 8003642:	6033      	str	r3, [r6, #0]
 8003644:	4630      	mov	r0, r6
 8003646:	f000 fba4 	bl	8003d92 <__malloc_unlock>
 800364a:	e7e4      	b.n	8003616 <_malloc_r+0x1e>
 800364c:	680b      	ldr	r3, [r1, #0]
 800364e:	1b5b      	subs	r3, r3, r5
 8003650:	d418      	bmi.n	8003684 <_malloc_r+0x8c>
 8003652:	2b0b      	cmp	r3, #11
 8003654:	d90f      	bls.n	8003676 <_malloc_r+0x7e>
 8003656:	600b      	str	r3, [r1, #0]
 8003658:	50cd      	str	r5, [r1, r3]
 800365a:	18cc      	adds	r4, r1, r3
 800365c:	4630      	mov	r0, r6
 800365e:	f000 fb98 	bl	8003d92 <__malloc_unlock>
 8003662:	f104 000b 	add.w	r0, r4, #11
 8003666:	1d23      	adds	r3, r4, #4
 8003668:	f020 0007 	bic.w	r0, r0, #7
 800366c:	1ac3      	subs	r3, r0, r3
 800366e:	d0d3      	beq.n	8003618 <_malloc_r+0x20>
 8003670:	425a      	negs	r2, r3
 8003672:	50e2      	str	r2, [r4, r3]
 8003674:	e7d0      	b.n	8003618 <_malloc_r+0x20>
 8003676:	428c      	cmp	r4, r1
 8003678:	684b      	ldr	r3, [r1, #4]
 800367a:	bf16      	itet	ne
 800367c:	6063      	strne	r3, [r4, #4]
 800367e:	6013      	streq	r3, [r2, #0]
 8003680:	460c      	movne	r4, r1
 8003682:	e7eb      	b.n	800365c <_malloc_r+0x64>
 8003684:	460c      	mov	r4, r1
 8003686:	6849      	ldr	r1, [r1, #4]
 8003688:	e7cc      	b.n	8003624 <_malloc_r+0x2c>
 800368a:	1cc4      	adds	r4, r0, #3
 800368c:	f024 0403 	bic.w	r4, r4, #3
 8003690:	42a0      	cmp	r0, r4
 8003692:	d005      	beq.n	80036a0 <_malloc_r+0xa8>
 8003694:	1a21      	subs	r1, r4, r0
 8003696:	4630      	mov	r0, r6
 8003698:	f000 fad0 	bl	8003c3c <_sbrk_r>
 800369c:	3001      	adds	r0, #1
 800369e:	d0cf      	beq.n	8003640 <_malloc_r+0x48>
 80036a0:	6025      	str	r5, [r4, #0]
 80036a2:	e7db      	b.n	800365c <_malloc_r+0x64>
 80036a4:	20000090 	.word	0x20000090
 80036a8:	20000094 	.word	0x20000094

080036ac <__sfputc_r>:
 80036ac:	6893      	ldr	r3, [r2, #8]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	b410      	push	{r4}
 80036b4:	6093      	str	r3, [r2, #8]
 80036b6:	da08      	bge.n	80036ca <__sfputc_r+0x1e>
 80036b8:	6994      	ldr	r4, [r2, #24]
 80036ba:	42a3      	cmp	r3, r4
 80036bc:	db01      	blt.n	80036c2 <__sfputc_r+0x16>
 80036be:	290a      	cmp	r1, #10
 80036c0:	d103      	bne.n	80036ca <__sfputc_r+0x1e>
 80036c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036c6:	f7ff bcab 	b.w	8003020 <__swbuf_r>
 80036ca:	6813      	ldr	r3, [r2, #0]
 80036cc:	1c58      	adds	r0, r3, #1
 80036ce:	6010      	str	r0, [r2, #0]
 80036d0:	7019      	strb	r1, [r3, #0]
 80036d2:	4608      	mov	r0, r1
 80036d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036d8:	4770      	bx	lr

080036da <__sfputs_r>:
 80036da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036dc:	4606      	mov	r6, r0
 80036de:	460f      	mov	r7, r1
 80036e0:	4614      	mov	r4, r2
 80036e2:	18d5      	adds	r5, r2, r3
 80036e4:	42ac      	cmp	r4, r5
 80036e6:	d101      	bne.n	80036ec <__sfputs_r+0x12>
 80036e8:	2000      	movs	r0, #0
 80036ea:	e007      	b.n	80036fc <__sfputs_r+0x22>
 80036ec:	463a      	mov	r2, r7
 80036ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036f2:	4630      	mov	r0, r6
 80036f4:	f7ff ffda 	bl	80036ac <__sfputc_r>
 80036f8:	1c43      	adds	r3, r0, #1
 80036fa:	d1f3      	bne.n	80036e4 <__sfputs_r+0xa>
 80036fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003700 <_vfiprintf_r>:
 8003700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003704:	460c      	mov	r4, r1
 8003706:	b09d      	sub	sp, #116	; 0x74
 8003708:	4617      	mov	r7, r2
 800370a:	461d      	mov	r5, r3
 800370c:	4606      	mov	r6, r0
 800370e:	b118      	cbz	r0, 8003718 <_vfiprintf_r+0x18>
 8003710:	6983      	ldr	r3, [r0, #24]
 8003712:	b90b      	cbnz	r3, 8003718 <_vfiprintf_r+0x18>
 8003714:	f7ff fe34 	bl	8003380 <__sinit>
 8003718:	4b7c      	ldr	r3, [pc, #496]	; (800390c <_vfiprintf_r+0x20c>)
 800371a:	429c      	cmp	r4, r3
 800371c:	d158      	bne.n	80037d0 <_vfiprintf_r+0xd0>
 800371e:	6874      	ldr	r4, [r6, #4]
 8003720:	89a3      	ldrh	r3, [r4, #12]
 8003722:	0718      	lsls	r0, r3, #28
 8003724:	d55e      	bpl.n	80037e4 <_vfiprintf_r+0xe4>
 8003726:	6923      	ldr	r3, [r4, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d05b      	beq.n	80037e4 <_vfiprintf_r+0xe4>
 800372c:	2300      	movs	r3, #0
 800372e:	9309      	str	r3, [sp, #36]	; 0x24
 8003730:	2320      	movs	r3, #32
 8003732:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003736:	2330      	movs	r3, #48	; 0x30
 8003738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800373c:	9503      	str	r5, [sp, #12]
 800373e:	f04f 0b01 	mov.w	fp, #1
 8003742:	46b8      	mov	r8, r7
 8003744:	4645      	mov	r5, r8
 8003746:	f815 3b01 	ldrb.w	r3, [r5], #1
 800374a:	b10b      	cbz	r3, 8003750 <_vfiprintf_r+0x50>
 800374c:	2b25      	cmp	r3, #37	; 0x25
 800374e:	d154      	bne.n	80037fa <_vfiprintf_r+0xfa>
 8003750:	ebb8 0a07 	subs.w	sl, r8, r7
 8003754:	d00b      	beq.n	800376e <_vfiprintf_r+0x6e>
 8003756:	4653      	mov	r3, sl
 8003758:	463a      	mov	r2, r7
 800375a:	4621      	mov	r1, r4
 800375c:	4630      	mov	r0, r6
 800375e:	f7ff ffbc 	bl	80036da <__sfputs_r>
 8003762:	3001      	adds	r0, #1
 8003764:	f000 80c2 	beq.w	80038ec <_vfiprintf_r+0x1ec>
 8003768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800376a:	4453      	add	r3, sl
 800376c:	9309      	str	r3, [sp, #36]	; 0x24
 800376e:	f898 3000 	ldrb.w	r3, [r8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 80ba 	beq.w	80038ec <_vfiprintf_r+0x1ec>
 8003778:	2300      	movs	r3, #0
 800377a:	f04f 32ff 	mov.w	r2, #4294967295
 800377e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003782:	9304      	str	r3, [sp, #16]
 8003784:	9307      	str	r3, [sp, #28]
 8003786:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800378a:	931a      	str	r3, [sp, #104]	; 0x68
 800378c:	46a8      	mov	r8, r5
 800378e:	2205      	movs	r2, #5
 8003790:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003794:	485e      	ldr	r0, [pc, #376]	; (8003910 <_vfiprintf_r+0x210>)
 8003796:	f7fc fd33 	bl	8000200 <memchr>
 800379a:	9b04      	ldr	r3, [sp, #16]
 800379c:	bb78      	cbnz	r0, 80037fe <_vfiprintf_r+0xfe>
 800379e:	06d9      	lsls	r1, r3, #27
 80037a0:	bf44      	itt	mi
 80037a2:	2220      	movmi	r2, #32
 80037a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80037a8:	071a      	lsls	r2, r3, #28
 80037aa:	bf44      	itt	mi
 80037ac:	222b      	movmi	r2, #43	; 0x2b
 80037ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80037b2:	782a      	ldrb	r2, [r5, #0]
 80037b4:	2a2a      	cmp	r2, #42	; 0x2a
 80037b6:	d02a      	beq.n	800380e <_vfiprintf_r+0x10e>
 80037b8:	9a07      	ldr	r2, [sp, #28]
 80037ba:	46a8      	mov	r8, r5
 80037bc:	2000      	movs	r0, #0
 80037be:	250a      	movs	r5, #10
 80037c0:	4641      	mov	r1, r8
 80037c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037c6:	3b30      	subs	r3, #48	; 0x30
 80037c8:	2b09      	cmp	r3, #9
 80037ca:	d969      	bls.n	80038a0 <_vfiprintf_r+0x1a0>
 80037cc:	b360      	cbz	r0, 8003828 <_vfiprintf_r+0x128>
 80037ce:	e024      	b.n	800381a <_vfiprintf_r+0x11a>
 80037d0:	4b50      	ldr	r3, [pc, #320]	; (8003914 <_vfiprintf_r+0x214>)
 80037d2:	429c      	cmp	r4, r3
 80037d4:	d101      	bne.n	80037da <_vfiprintf_r+0xda>
 80037d6:	68b4      	ldr	r4, [r6, #8]
 80037d8:	e7a2      	b.n	8003720 <_vfiprintf_r+0x20>
 80037da:	4b4f      	ldr	r3, [pc, #316]	; (8003918 <_vfiprintf_r+0x218>)
 80037dc:	429c      	cmp	r4, r3
 80037de:	bf08      	it	eq
 80037e0:	68f4      	ldreq	r4, [r6, #12]
 80037e2:	e79d      	b.n	8003720 <_vfiprintf_r+0x20>
 80037e4:	4621      	mov	r1, r4
 80037e6:	4630      	mov	r0, r6
 80037e8:	f7ff fc6c 	bl	80030c4 <__swsetup_r>
 80037ec:	2800      	cmp	r0, #0
 80037ee:	d09d      	beq.n	800372c <_vfiprintf_r+0x2c>
 80037f0:	f04f 30ff 	mov.w	r0, #4294967295
 80037f4:	b01d      	add	sp, #116	; 0x74
 80037f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037fa:	46a8      	mov	r8, r5
 80037fc:	e7a2      	b.n	8003744 <_vfiprintf_r+0x44>
 80037fe:	4a44      	ldr	r2, [pc, #272]	; (8003910 <_vfiprintf_r+0x210>)
 8003800:	1a80      	subs	r0, r0, r2
 8003802:	fa0b f000 	lsl.w	r0, fp, r0
 8003806:	4318      	orrs	r0, r3
 8003808:	9004      	str	r0, [sp, #16]
 800380a:	4645      	mov	r5, r8
 800380c:	e7be      	b.n	800378c <_vfiprintf_r+0x8c>
 800380e:	9a03      	ldr	r2, [sp, #12]
 8003810:	1d11      	adds	r1, r2, #4
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	9103      	str	r1, [sp, #12]
 8003816:	2a00      	cmp	r2, #0
 8003818:	db01      	blt.n	800381e <_vfiprintf_r+0x11e>
 800381a:	9207      	str	r2, [sp, #28]
 800381c:	e004      	b.n	8003828 <_vfiprintf_r+0x128>
 800381e:	4252      	negs	r2, r2
 8003820:	f043 0302 	orr.w	r3, r3, #2
 8003824:	9207      	str	r2, [sp, #28]
 8003826:	9304      	str	r3, [sp, #16]
 8003828:	f898 3000 	ldrb.w	r3, [r8]
 800382c:	2b2e      	cmp	r3, #46	; 0x2e
 800382e:	d10e      	bne.n	800384e <_vfiprintf_r+0x14e>
 8003830:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003834:	2b2a      	cmp	r3, #42	; 0x2a
 8003836:	d138      	bne.n	80038aa <_vfiprintf_r+0x1aa>
 8003838:	9b03      	ldr	r3, [sp, #12]
 800383a:	1d1a      	adds	r2, r3, #4
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	9203      	str	r2, [sp, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	bfb8      	it	lt
 8003844:	f04f 33ff 	movlt.w	r3, #4294967295
 8003848:	f108 0802 	add.w	r8, r8, #2
 800384c:	9305      	str	r3, [sp, #20]
 800384e:	4d33      	ldr	r5, [pc, #204]	; (800391c <_vfiprintf_r+0x21c>)
 8003850:	f898 1000 	ldrb.w	r1, [r8]
 8003854:	2203      	movs	r2, #3
 8003856:	4628      	mov	r0, r5
 8003858:	f7fc fcd2 	bl	8000200 <memchr>
 800385c:	b140      	cbz	r0, 8003870 <_vfiprintf_r+0x170>
 800385e:	2340      	movs	r3, #64	; 0x40
 8003860:	1b40      	subs	r0, r0, r5
 8003862:	fa03 f000 	lsl.w	r0, r3, r0
 8003866:	9b04      	ldr	r3, [sp, #16]
 8003868:	4303      	orrs	r3, r0
 800386a:	f108 0801 	add.w	r8, r8, #1
 800386e:	9304      	str	r3, [sp, #16]
 8003870:	f898 1000 	ldrb.w	r1, [r8]
 8003874:	482a      	ldr	r0, [pc, #168]	; (8003920 <_vfiprintf_r+0x220>)
 8003876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800387a:	2206      	movs	r2, #6
 800387c:	f108 0701 	add.w	r7, r8, #1
 8003880:	f7fc fcbe 	bl	8000200 <memchr>
 8003884:	2800      	cmp	r0, #0
 8003886:	d037      	beq.n	80038f8 <_vfiprintf_r+0x1f8>
 8003888:	4b26      	ldr	r3, [pc, #152]	; (8003924 <_vfiprintf_r+0x224>)
 800388a:	bb1b      	cbnz	r3, 80038d4 <_vfiprintf_r+0x1d4>
 800388c:	9b03      	ldr	r3, [sp, #12]
 800388e:	3307      	adds	r3, #7
 8003890:	f023 0307 	bic.w	r3, r3, #7
 8003894:	3308      	adds	r3, #8
 8003896:	9303      	str	r3, [sp, #12]
 8003898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800389a:	444b      	add	r3, r9
 800389c:	9309      	str	r3, [sp, #36]	; 0x24
 800389e:	e750      	b.n	8003742 <_vfiprintf_r+0x42>
 80038a0:	fb05 3202 	mla	r2, r5, r2, r3
 80038a4:	2001      	movs	r0, #1
 80038a6:	4688      	mov	r8, r1
 80038a8:	e78a      	b.n	80037c0 <_vfiprintf_r+0xc0>
 80038aa:	2300      	movs	r3, #0
 80038ac:	f108 0801 	add.w	r8, r8, #1
 80038b0:	9305      	str	r3, [sp, #20]
 80038b2:	4619      	mov	r1, r3
 80038b4:	250a      	movs	r5, #10
 80038b6:	4640      	mov	r0, r8
 80038b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038bc:	3a30      	subs	r2, #48	; 0x30
 80038be:	2a09      	cmp	r2, #9
 80038c0:	d903      	bls.n	80038ca <_vfiprintf_r+0x1ca>
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0c3      	beq.n	800384e <_vfiprintf_r+0x14e>
 80038c6:	9105      	str	r1, [sp, #20]
 80038c8:	e7c1      	b.n	800384e <_vfiprintf_r+0x14e>
 80038ca:	fb05 2101 	mla	r1, r5, r1, r2
 80038ce:	2301      	movs	r3, #1
 80038d0:	4680      	mov	r8, r0
 80038d2:	e7f0      	b.n	80038b6 <_vfiprintf_r+0x1b6>
 80038d4:	ab03      	add	r3, sp, #12
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	4622      	mov	r2, r4
 80038da:	4b13      	ldr	r3, [pc, #76]	; (8003928 <_vfiprintf_r+0x228>)
 80038dc:	a904      	add	r1, sp, #16
 80038de:	4630      	mov	r0, r6
 80038e0:	f3af 8000 	nop.w
 80038e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80038e8:	4681      	mov	r9, r0
 80038ea:	d1d5      	bne.n	8003898 <_vfiprintf_r+0x198>
 80038ec:	89a3      	ldrh	r3, [r4, #12]
 80038ee:	065b      	lsls	r3, r3, #25
 80038f0:	f53f af7e 	bmi.w	80037f0 <_vfiprintf_r+0xf0>
 80038f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038f6:	e77d      	b.n	80037f4 <_vfiprintf_r+0xf4>
 80038f8:	ab03      	add	r3, sp, #12
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	4622      	mov	r2, r4
 80038fe:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <_vfiprintf_r+0x228>)
 8003900:	a904      	add	r1, sp, #16
 8003902:	4630      	mov	r0, r6
 8003904:	f000 f888 	bl	8003a18 <_printf_i>
 8003908:	e7ec      	b.n	80038e4 <_vfiprintf_r+0x1e4>
 800390a:	bf00      	nop
 800390c:	0816e798 	.word	0x0816e798
 8003910:	0816e7d8 	.word	0x0816e7d8
 8003914:	0816e7b8 	.word	0x0816e7b8
 8003918:	0816e778 	.word	0x0816e778
 800391c:	0816e7de 	.word	0x0816e7de
 8003920:	0816e7e2 	.word	0x0816e7e2
 8003924:	00000000 	.word	0x00000000
 8003928:	080036db 	.word	0x080036db

0800392c <_printf_common>:
 800392c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003930:	4691      	mov	r9, r2
 8003932:	461f      	mov	r7, r3
 8003934:	688a      	ldr	r2, [r1, #8]
 8003936:	690b      	ldr	r3, [r1, #16]
 8003938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800393c:	4293      	cmp	r3, r2
 800393e:	bfb8      	it	lt
 8003940:	4613      	movlt	r3, r2
 8003942:	f8c9 3000 	str.w	r3, [r9]
 8003946:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800394a:	4606      	mov	r6, r0
 800394c:	460c      	mov	r4, r1
 800394e:	b112      	cbz	r2, 8003956 <_printf_common+0x2a>
 8003950:	3301      	adds	r3, #1
 8003952:	f8c9 3000 	str.w	r3, [r9]
 8003956:	6823      	ldr	r3, [r4, #0]
 8003958:	0699      	lsls	r1, r3, #26
 800395a:	bf42      	ittt	mi
 800395c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003960:	3302      	addmi	r3, #2
 8003962:	f8c9 3000 	strmi.w	r3, [r9]
 8003966:	6825      	ldr	r5, [r4, #0]
 8003968:	f015 0506 	ands.w	r5, r5, #6
 800396c:	d107      	bne.n	800397e <_printf_common+0x52>
 800396e:	f104 0a19 	add.w	sl, r4, #25
 8003972:	68e3      	ldr	r3, [r4, #12]
 8003974:	f8d9 2000 	ldr.w	r2, [r9]
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	42ab      	cmp	r3, r5
 800397c:	dc28      	bgt.n	80039d0 <_printf_common+0xa4>
 800397e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003982:	6822      	ldr	r2, [r4, #0]
 8003984:	3300      	adds	r3, #0
 8003986:	bf18      	it	ne
 8003988:	2301      	movne	r3, #1
 800398a:	0692      	lsls	r2, r2, #26
 800398c:	d42d      	bmi.n	80039ea <_printf_common+0xbe>
 800398e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003992:	4639      	mov	r1, r7
 8003994:	4630      	mov	r0, r6
 8003996:	47c0      	blx	r8
 8003998:	3001      	adds	r0, #1
 800399a:	d020      	beq.n	80039de <_printf_common+0xb2>
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	68e5      	ldr	r5, [r4, #12]
 80039a0:	f8d9 2000 	ldr.w	r2, [r9]
 80039a4:	f003 0306 	and.w	r3, r3, #6
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	bf08      	it	eq
 80039ac:	1aad      	subeq	r5, r5, r2
 80039ae:	68a3      	ldr	r3, [r4, #8]
 80039b0:	6922      	ldr	r2, [r4, #16]
 80039b2:	bf0c      	ite	eq
 80039b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039b8:	2500      	movne	r5, #0
 80039ba:	4293      	cmp	r3, r2
 80039bc:	bfc4      	itt	gt
 80039be:	1a9b      	subgt	r3, r3, r2
 80039c0:	18ed      	addgt	r5, r5, r3
 80039c2:	f04f 0900 	mov.w	r9, #0
 80039c6:	341a      	adds	r4, #26
 80039c8:	454d      	cmp	r5, r9
 80039ca:	d11a      	bne.n	8003a02 <_printf_common+0xd6>
 80039cc:	2000      	movs	r0, #0
 80039ce:	e008      	b.n	80039e2 <_printf_common+0xb6>
 80039d0:	2301      	movs	r3, #1
 80039d2:	4652      	mov	r2, sl
 80039d4:	4639      	mov	r1, r7
 80039d6:	4630      	mov	r0, r6
 80039d8:	47c0      	blx	r8
 80039da:	3001      	adds	r0, #1
 80039dc:	d103      	bne.n	80039e6 <_printf_common+0xba>
 80039de:	f04f 30ff 	mov.w	r0, #4294967295
 80039e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e6:	3501      	adds	r5, #1
 80039e8:	e7c3      	b.n	8003972 <_printf_common+0x46>
 80039ea:	18e1      	adds	r1, r4, r3
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	2030      	movs	r0, #48	; 0x30
 80039f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039f4:	4422      	add	r2, r4
 80039f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039fe:	3302      	adds	r3, #2
 8003a00:	e7c5      	b.n	800398e <_printf_common+0x62>
 8003a02:	2301      	movs	r3, #1
 8003a04:	4622      	mov	r2, r4
 8003a06:	4639      	mov	r1, r7
 8003a08:	4630      	mov	r0, r6
 8003a0a:	47c0      	blx	r8
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	d0e6      	beq.n	80039de <_printf_common+0xb2>
 8003a10:	f109 0901 	add.w	r9, r9, #1
 8003a14:	e7d8      	b.n	80039c8 <_printf_common+0x9c>
	...

>>>>>>> Stashed changes
08003a18 <_printf_i>:
 8003a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a1c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003a20:	460c      	mov	r4, r1
 8003a22:	7e09      	ldrb	r1, [r1, #24]
 8003a24:	b085      	sub	sp, #20
 8003a26:	296e      	cmp	r1, #110	; 0x6e
 8003a28:	4617      	mov	r7, r2
 8003a2a:	4606      	mov	r6, r0
 8003a2c:	4698      	mov	r8, r3
 8003a2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003a30:	f000 80b3 	beq.w	8003b9a <_printf_i+0x182>
 8003a34:	d822      	bhi.n	8003a7c <_printf_i+0x64>
 8003a36:	2963      	cmp	r1, #99	; 0x63
 8003a38:	d036      	beq.n	8003aa8 <_printf_i+0x90>
 8003a3a:	d80a      	bhi.n	8003a52 <_printf_i+0x3a>
 8003a3c:	2900      	cmp	r1, #0
 8003a3e:	f000 80b9 	beq.w	8003bb4 <_printf_i+0x19c>
 8003a42:	2958      	cmp	r1, #88	; 0x58
 8003a44:	f000 8083 	beq.w	8003b4e <_printf_i+0x136>
 8003a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a4c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003a50:	e032      	b.n	8003ab8 <_printf_i+0xa0>
 8003a52:	2964      	cmp	r1, #100	; 0x64
 8003a54:	d001      	beq.n	8003a5a <_printf_i+0x42>
 8003a56:	2969      	cmp	r1, #105	; 0x69
 8003a58:	d1f6      	bne.n	8003a48 <_printf_i+0x30>
 8003a5a:	6820      	ldr	r0, [r4, #0]
 8003a5c:	6813      	ldr	r3, [r2, #0]
 8003a5e:	0605      	lsls	r5, r0, #24
 8003a60:	f103 0104 	add.w	r1, r3, #4
 8003a64:	d52a      	bpl.n	8003abc <_printf_i+0xa4>
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6011      	str	r1, [r2, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	da03      	bge.n	8003a76 <_printf_i+0x5e>
 8003a6e:	222d      	movs	r2, #45	; 0x2d
 8003a70:	425b      	negs	r3, r3
 8003a72:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003a76:	486f      	ldr	r0, [pc, #444]	; (8003c34 <_printf_i+0x21c>)
 8003a78:	220a      	movs	r2, #10
 8003a7a:	e039      	b.n	8003af0 <_printf_i+0xd8>
 8003a7c:	2973      	cmp	r1, #115	; 0x73
 8003a7e:	f000 809d 	beq.w	8003bbc <_printf_i+0x1a4>
 8003a82:	d808      	bhi.n	8003a96 <_printf_i+0x7e>
 8003a84:	296f      	cmp	r1, #111	; 0x6f
 8003a86:	d020      	beq.n	8003aca <_printf_i+0xb2>
 8003a88:	2970      	cmp	r1, #112	; 0x70
 8003a8a:	d1dd      	bne.n	8003a48 <_printf_i+0x30>
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	f043 0320 	orr.w	r3, r3, #32
 8003a92:	6023      	str	r3, [r4, #0]
 8003a94:	e003      	b.n	8003a9e <_printf_i+0x86>
 8003a96:	2975      	cmp	r1, #117	; 0x75
 8003a98:	d017      	beq.n	8003aca <_printf_i+0xb2>
 8003a9a:	2978      	cmp	r1, #120	; 0x78
 8003a9c:	d1d4      	bne.n	8003a48 <_printf_i+0x30>
 8003a9e:	2378      	movs	r3, #120	; 0x78
 8003aa0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003aa4:	4864      	ldr	r0, [pc, #400]	; (8003c38 <_printf_i+0x220>)
 8003aa6:	e055      	b.n	8003b54 <_printf_i+0x13c>
 8003aa8:	6813      	ldr	r3, [r2, #0]
 8003aaa:	1d19      	adds	r1, r3, #4
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6011      	str	r1, [r2, #0]
 8003ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ab4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e08c      	b.n	8003bd6 <_printf_i+0x1be>
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6011      	str	r1, [r2, #0]
 8003ac0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ac4:	bf18      	it	ne
 8003ac6:	b21b      	sxthne	r3, r3
 8003ac8:	e7cf      	b.n	8003a6a <_printf_i+0x52>
 8003aca:	6813      	ldr	r3, [r2, #0]
 8003acc:	6825      	ldr	r5, [r4, #0]
 8003ace:	1d18      	adds	r0, r3, #4
 8003ad0:	6010      	str	r0, [r2, #0]
 8003ad2:	0628      	lsls	r0, r5, #24
 8003ad4:	d501      	bpl.n	8003ada <_printf_i+0xc2>
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	e002      	b.n	8003ae0 <_printf_i+0xc8>
 8003ada:	0668      	lsls	r0, r5, #25
 8003adc:	d5fb      	bpl.n	8003ad6 <_printf_i+0xbe>
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	4854      	ldr	r0, [pc, #336]	; (8003c34 <_printf_i+0x21c>)
 8003ae2:	296f      	cmp	r1, #111	; 0x6f
 8003ae4:	bf14      	ite	ne
 8003ae6:	220a      	movne	r2, #10
 8003ae8:	2208      	moveq	r2, #8
 8003aea:	2100      	movs	r1, #0
 8003aec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003af0:	6865      	ldr	r5, [r4, #4]
 8003af2:	60a5      	str	r5, [r4, #8]
 8003af4:	2d00      	cmp	r5, #0
 8003af6:	f2c0 8095 	blt.w	8003c24 <_printf_i+0x20c>
 8003afa:	6821      	ldr	r1, [r4, #0]
 8003afc:	f021 0104 	bic.w	r1, r1, #4
 8003b00:	6021      	str	r1, [r4, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d13d      	bne.n	8003b82 <_printf_i+0x16a>
 8003b06:	2d00      	cmp	r5, #0
 8003b08:	f040 808e 	bne.w	8003c28 <_printf_i+0x210>
 8003b0c:	4665      	mov	r5, ip
 8003b0e:	2a08      	cmp	r2, #8
 8003b10:	d10b      	bne.n	8003b2a <_printf_i+0x112>
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	07db      	lsls	r3, r3, #31
 8003b16:	d508      	bpl.n	8003b2a <_printf_i+0x112>
 8003b18:	6923      	ldr	r3, [r4, #16]
 8003b1a:	6862      	ldr	r2, [r4, #4]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	bfde      	ittt	le
 8003b20:	2330      	movle	r3, #48	; 0x30
 8003b22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b26:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b2a:	ebac 0305 	sub.w	r3, ip, r5
 8003b2e:	6123      	str	r3, [r4, #16]
 8003b30:	f8cd 8000 	str.w	r8, [sp]
 8003b34:	463b      	mov	r3, r7
 8003b36:	aa03      	add	r2, sp, #12
 8003b38:	4621      	mov	r1, r4
 8003b3a:	4630      	mov	r0, r6
 8003b3c:	f7ff fef6 	bl	800392c <_printf_common>
 8003b40:	3001      	adds	r0, #1
 8003b42:	d14d      	bne.n	8003be0 <_printf_i+0x1c8>
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295
 8003b48:	b005      	add	sp, #20
 8003b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b4e:	4839      	ldr	r0, [pc, #228]	; (8003c34 <_printf_i+0x21c>)
 8003b50:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003b54:	6813      	ldr	r3, [r2, #0]
 8003b56:	6821      	ldr	r1, [r4, #0]
 8003b58:	1d1d      	adds	r5, r3, #4
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6015      	str	r5, [r2, #0]
 8003b5e:	060a      	lsls	r2, r1, #24
 8003b60:	d50b      	bpl.n	8003b7a <_printf_i+0x162>
 8003b62:	07ca      	lsls	r2, r1, #31
 8003b64:	bf44      	itt	mi
 8003b66:	f041 0120 	orrmi.w	r1, r1, #32
 8003b6a:	6021      	strmi	r1, [r4, #0]
 8003b6c:	b91b      	cbnz	r3, 8003b76 <_printf_i+0x15e>
 8003b6e:	6822      	ldr	r2, [r4, #0]
 8003b70:	f022 0220 	bic.w	r2, r2, #32
 8003b74:	6022      	str	r2, [r4, #0]
 8003b76:	2210      	movs	r2, #16
 8003b78:	e7b7      	b.n	8003aea <_printf_i+0xd2>
 8003b7a:	064d      	lsls	r5, r1, #25
 8003b7c:	bf48      	it	mi
 8003b7e:	b29b      	uxthmi	r3, r3
 8003b80:	e7ef      	b.n	8003b62 <_printf_i+0x14a>
 8003b82:	4665      	mov	r5, ip
 8003b84:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b88:	fb02 3311 	mls	r3, r2, r1, r3
 8003b8c:	5cc3      	ldrb	r3, [r0, r3]
 8003b8e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003b92:	460b      	mov	r3, r1
 8003b94:	2900      	cmp	r1, #0
 8003b96:	d1f5      	bne.n	8003b84 <_printf_i+0x16c>
 8003b98:	e7b9      	b.n	8003b0e <_printf_i+0xf6>
 8003b9a:	6813      	ldr	r3, [r2, #0]
 8003b9c:	6825      	ldr	r5, [r4, #0]
 8003b9e:	6961      	ldr	r1, [r4, #20]
 8003ba0:	1d18      	adds	r0, r3, #4
 8003ba2:	6010      	str	r0, [r2, #0]
 8003ba4:	0628      	lsls	r0, r5, #24
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	d501      	bpl.n	8003bae <_printf_i+0x196>
 8003baa:	6019      	str	r1, [r3, #0]
 8003bac:	e002      	b.n	8003bb4 <_printf_i+0x19c>
 8003bae:	066a      	lsls	r2, r5, #25
 8003bb0:	d5fb      	bpl.n	8003baa <_printf_i+0x192>
 8003bb2:	8019      	strh	r1, [r3, #0]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	6123      	str	r3, [r4, #16]
 8003bb8:	4665      	mov	r5, ip
 8003bba:	e7b9      	b.n	8003b30 <_printf_i+0x118>
 8003bbc:	6813      	ldr	r3, [r2, #0]
 8003bbe:	1d19      	adds	r1, r3, #4
 8003bc0:	6011      	str	r1, [r2, #0]
 8003bc2:	681d      	ldr	r5, [r3, #0]
 8003bc4:	6862      	ldr	r2, [r4, #4]
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4628      	mov	r0, r5
 8003bca:	f7fc fb19 	bl	8000200 <memchr>
 8003bce:	b108      	cbz	r0, 8003bd4 <_printf_i+0x1bc>
 8003bd0:	1b40      	subs	r0, r0, r5
 8003bd2:	6060      	str	r0, [r4, #4]
 8003bd4:	6863      	ldr	r3, [r4, #4]
 8003bd6:	6123      	str	r3, [r4, #16]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bde:	e7a7      	b.n	8003b30 <_printf_i+0x118>
 8003be0:	6923      	ldr	r3, [r4, #16]
 8003be2:	462a      	mov	r2, r5
 8003be4:	4639      	mov	r1, r7
 8003be6:	4630      	mov	r0, r6
 8003be8:	47c0      	blx	r8
 8003bea:	3001      	adds	r0, #1
 8003bec:	d0aa      	beq.n	8003b44 <_printf_i+0x12c>
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	079b      	lsls	r3, r3, #30
 8003bf2:	d413      	bmi.n	8003c1c <_printf_i+0x204>
 8003bf4:	68e0      	ldr	r0, [r4, #12]
 8003bf6:	9b03      	ldr	r3, [sp, #12]
 8003bf8:	4298      	cmp	r0, r3
 8003bfa:	bfb8      	it	lt
 8003bfc:	4618      	movlt	r0, r3
 8003bfe:	e7a3      	b.n	8003b48 <_printf_i+0x130>
 8003c00:	2301      	movs	r3, #1
 8003c02:	464a      	mov	r2, r9
 8003c04:	4639      	mov	r1, r7
 8003c06:	4630      	mov	r0, r6
 8003c08:	47c0      	blx	r8
 8003c0a:	3001      	adds	r0, #1
 8003c0c:	d09a      	beq.n	8003b44 <_printf_i+0x12c>
 8003c0e:	3501      	adds	r5, #1
 8003c10:	68e3      	ldr	r3, [r4, #12]
 8003c12:	9a03      	ldr	r2, [sp, #12]
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	42ab      	cmp	r3, r5
 8003c18:	dcf2      	bgt.n	8003c00 <_printf_i+0x1e8>
 8003c1a:	e7eb      	b.n	8003bf4 <_printf_i+0x1dc>
 8003c1c:	2500      	movs	r5, #0
 8003c1e:	f104 0919 	add.w	r9, r4, #25
 8003c22:	e7f5      	b.n	8003c10 <_printf_i+0x1f8>
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1ac      	bne.n	8003b82 <_printf_i+0x16a>
 8003c28:	7803      	ldrb	r3, [r0, #0]
 8003c2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c2e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c32:	e76c      	b.n	8003b0e <_printf_i+0xf6>
 8003c34:	0816e7e9 	.word	0x0816e7e9
 8003c38:	0816e7fa 	.word	0x0816e7fa

08003c3c <_sbrk_r>:
 8003c3c:	b538      	push	{r3, r4, r5, lr}
 8003c3e:	4c06      	ldr	r4, [pc, #24]	; (8003c58 <_sbrk_r+0x1c>)
 8003c40:	2300      	movs	r3, #0
 8003c42:	4605      	mov	r5, r0
 8003c44:	4608      	mov	r0, r1
 8003c46:	6023      	str	r3, [r4, #0]
 8003c48:	f7fd f91c 	bl	8000e84 <_sbrk>
 8003c4c:	1c43      	adds	r3, r0, #1
 8003c4e:	d102      	bne.n	8003c56 <_sbrk_r+0x1a>
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	b103      	cbz	r3, 8003c56 <_sbrk_r+0x1a>
 8003c54:	602b      	str	r3, [r5, #0]
 8003c56:	bd38      	pop	{r3, r4, r5, pc}
 8003c58:	2000012c 	.word	0x2000012c

08003c5c <__sread>:
 8003c5c:	b510      	push	{r4, lr}
 8003c5e:	460c      	mov	r4, r1
 8003c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c64:	f000 f896 	bl	8003d94 <_read_r>
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	bfab      	itete	ge
 8003c6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8003c70:	181b      	addge	r3, r3, r0
 8003c72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c76:	bfac      	ite	ge
 8003c78:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c7a:	81a3      	strhlt	r3, [r4, #12]
 8003c7c:	bd10      	pop	{r4, pc}

08003c7e <__swrite>:
 8003c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c82:	461f      	mov	r7, r3
 8003c84:	898b      	ldrh	r3, [r1, #12]
 8003c86:	05db      	lsls	r3, r3, #23
 8003c88:	4605      	mov	r5, r0
 8003c8a:	460c      	mov	r4, r1
 8003c8c:	4616      	mov	r6, r2
 8003c8e:	d505      	bpl.n	8003c9c <__swrite+0x1e>
 8003c90:	2302      	movs	r3, #2
 8003c92:	2200      	movs	r2, #0
 8003c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c98:	f000 f868 	bl	8003d6c <_lseek_r>
 8003c9c:	89a3      	ldrh	r3, [r4, #12]
 8003c9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ca2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ca6:	81a3      	strh	r3, [r4, #12]
 8003ca8:	4632      	mov	r2, r6
 8003caa:	463b      	mov	r3, r7
 8003cac:	4628      	mov	r0, r5
 8003cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cb2:	f000 b817 	b.w	8003ce4 <_write_r>

08003cb6 <__sseek>:
 8003cb6:	b510      	push	{r4, lr}
 8003cb8:	460c      	mov	r4, r1
 8003cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cbe:	f000 f855 	bl	8003d6c <_lseek_r>
 8003cc2:	1c43      	adds	r3, r0, #1
 8003cc4:	89a3      	ldrh	r3, [r4, #12]
 8003cc6:	bf15      	itete	ne
 8003cc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003cca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003cce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003cd2:	81a3      	strheq	r3, [r4, #12]
 8003cd4:	bf18      	it	ne
 8003cd6:	81a3      	strhne	r3, [r4, #12]
 8003cd8:	bd10      	pop	{r4, pc}

08003cda <__sclose>:
 8003cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cde:	f000 b813 	b.w	8003d08 <_close_r>
	...

08003ce4 <_write_r>:
 8003ce4:	b538      	push	{r3, r4, r5, lr}
 8003ce6:	4c07      	ldr	r4, [pc, #28]	; (8003d04 <_write_r+0x20>)
 8003ce8:	4605      	mov	r5, r0
 8003cea:	4608      	mov	r0, r1
 8003cec:	4611      	mov	r1, r2
 8003cee:	2200      	movs	r2, #0
 8003cf0:	6022      	str	r2, [r4, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f7fd f875 	bl	8000de2 <_write>
 8003cf8:	1c43      	adds	r3, r0, #1
 8003cfa:	d102      	bne.n	8003d02 <_write_r+0x1e>
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	b103      	cbz	r3, 8003d02 <_write_r+0x1e>
 8003d00:	602b      	str	r3, [r5, #0]
 8003d02:	bd38      	pop	{r3, r4, r5, pc}
 8003d04:	2000012c 	.word	0x2000012c

08003d08 <_close_r>:
 8003d08:	b538      	push	{r3, r4, r5, lr}
 8003d0a:	4c06      	ldr	r4, [pc, #24]	; (8003d24 <_close_r+0x1c>)
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	4605      	mov	r5, r0
 8003d10:	4608      	mov	r0, r1
 8003d12:	6023      	str	r3, [r4, #0]
 8003d14:	f7fd f881 	bl	8000e1a <_close>
 8003d18:	1c43      	adds	r3, r0, #1
 8003d1a:	d102      	bne.n	8003d22 <_close_r+0x1a>
 8003d1c:	6823      	ldr	r3, [r4, #0]
 8003d1e:	b103      	cbz	r3, 8003d22 <_close_r+0x1a>
 8003d20:	602b      	str	r3, [r5, #0]
 8003d22:	bd38      	pop	{r3, r4, r5, pc}
 8003d24:	2000012c 	.word	0x2000012c

08003d28 <_fstat_r>:
 8003d28:	b538      	push	{r3, r4, r5, lr}
 8003d2a:	4c07      	ldr	r4, [pc, #28]	; (8003d48 <_fstat_r+0x20>)
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	4605      	mov	r5, r0
 8003d30:	4608      	mov	r0, r1
 8003d32:	4611      	mov	r1, r2
 8003d34:	6023      	str	r3, [r4, #0]
 8003d36:	f7fd f87c 	bl	8000e32 <_fstat>
 8003d3a:	1c43      	adds	r3, r0, #1
 8003d3c:	d102      	bne.n	8003d44 <_fstat_r+0x1c>
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	b103      	cbz	r3, 8003d44 <_fstat_r+0x1c>
 8003d42:	602b      	str	r3, [r5, #0]
 8003d44:	bd38      	pop	{r3, r4, r5, pc}
 8003d46:	bf00      	nop
 8003d48:	2000012c 	.word	0x2000012c

08003d4c <_isatty_r>:
 8003d4c:	b538      	push	{r3, r4, r5, lr}
 8003d4e:	4c06      	ldr	r4, [pc, #24]	; (8003d68 <_isatty_r+0x1c>)
 8003d50:	2300      	movs	r3, #0
 8003d52:	4605      	mov	r5, r0
 8003d54:	4608      	mov	r0, r1
 8003d56:	6023      	str	r3, [r4, #0]
 8003d58:	f7fd f87b 	bl	8000e52 <_isatty>
 8003d5c:	1c43      	adds	r3, r0, #1
 8003d5e:	d102      	bne.n	8003d66 <_isatty_r+0x1a>
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	b103      	cbz	r3, 8003d66 <_isatty_r+0x1a>
 8003d64:	602b      	str	r3, [r5, #0]
 8003d66:	bd38      	pop	{r3, r4, r5, pc}
 8003d68:	2000012c 	.word	0x2000012c

08003d6c <_lseek_r>:
 8003d6c:	b538      	push	{r3, r4, r5, lr}
 8003d6e:	4c07      	ldr	r4, [pc, #28]	; (8003d8c <_lseek_r+0x20>)
 8003d70:	4605      	mov	r5, r0
 8003d72:	4608      	mov	r0, r1
 8003d74:	4611      	mov	r1, r2
 8003d76:	2200      	movs	r2, #0
 8003d78:	6022      	str	r2, [r4, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f7fd f874 	bl	8000e68 <_lseek>
 8003d80:	1c43      	adds	r3, r0, #1
 8003d82:	d102      	bne.n	8003d8a <_lseek_r+0x1e>
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	b103      	cbz	r3, 8003d8a <_lseek_r+0x1e>
 8003d88:	602b      	str	r3, [r5, #0]
 8003d8a:	bd38      	pop	{r3, r4, r5, pc}
 8003d8c:	2000012c 	.word	0x2000012c

08003d90 <__malloc_lock>:
 8003d90:	4770      	bx	lr

08003d92 <__malloc_unlock>:
 8003d92:	4770      	bx	lr

08003d94 <_read_r>:
 8003d94:	b538      	push	{r3, r4, r5, lr}
 8003d96:	4c07      	ldr	r4, [pc, #28]	; (8003db4 <_read_r+0x20>)
 8003d98:	4605      	mov	r5, r0
 8003d9a:	4608      	mov	r0, r1
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	2200      	movs	r2, #0
 8003da0:	6022      	str	r2, [r4, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	f7fd f800 	bl	8000da8 <_read>
 8003da8:	1c43      	adds	r3, r0, #1
 8003daa:	d102      	bne.n	8003db2 <_read_r+0x1e>
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	b103      	cbz	r3, 8003db2 <_read_r+0x1e>
 8003db0:	602b      	str	r3, [r5, #0]
 8003db2:	bd38      	pop	{r3, r4, r5, pc}
 8003db4:	2000012c 	.word	0x2000012c

08003db8 <_init>:
 8003db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dba:	bf00      	nop
 8003dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dbe:	bc08      	pop	{r3}
 8003dc0:	469e      	mov	lr, r3
 8003dc2:	4770      	bx	lr

08003dc4 <_fini>:
 8003dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc6:	bf00      	nop
 8003dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dca:	bc08      	pop	{r3}
 8003dcc:	469e      	mov	lr, r3
 8003dce:	4770      	bx	lr
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
