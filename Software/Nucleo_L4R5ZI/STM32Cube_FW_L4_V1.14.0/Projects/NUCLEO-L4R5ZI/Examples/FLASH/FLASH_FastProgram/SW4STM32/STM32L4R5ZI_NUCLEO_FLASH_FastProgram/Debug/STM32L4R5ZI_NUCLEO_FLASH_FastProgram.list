
STM32L4R5ZI_NUCLEO_FLASH_FastProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001328  080001c0  080001c0  000101c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  080014e8  080014e8  000114e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001740  08001740  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08001740  08001740  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001740  08001740  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08001740  08001740  00011740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08001748  08001748  00011748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08001750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000040  08001790  00020040  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08001790  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b60  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001988  00000000  00000000  00027bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000026bd  00000000  00000000  00029558  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000005f0  00000000  00000000  0002bc18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000007b0  00000000  00000000  0002c208  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00027c6c  00000000  00000000  0002c9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000061d5  00000000  00000000  00054624  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000f3053  00000000  00000000  0005a7f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0014d84c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d30  00000000  00000000  0014d8c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000040 	.word	0x20000040
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080014cc 	.word	0x080014cc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000044 	.word	0x20000044
 80001fc:	080014cc 	.word	0x080014cc

08000200 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000202:	4b17      	ldr	r3, [pc, #92]	; (8000260 <BSP_LED_Init+0x60>)
 8000204:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000206:	4604      	mov	r4, r0
 8000208:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800020a:	b9f8      	cbnz	r0, 800024c <BSP_LED_Init+0x4c>
 800020c:	f042 0204 	orr.w	r2, r2, #4
 8000210:	64da      	str	r2, [r3, #76]	; 0x4c
 8000212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000214:	f003 0304 	and.w	r3, r3, #4
 8000218:	9301      	str	r3, [sp, #4]
 800021a:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800021c:	4b11      	ldr	r3, [pc, #68]	; (8000264 <BSP_LED_Init+0x64>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800021e:	4d12      	ldr	r5, [pc, #72]	; (8000268 <BSP_LED_Init+0x68>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000220:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000224:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000228:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800022a:	2700      	movs	r7, #0
 800022c:	2301      	movs	r3, #1
 800022e:	e9cd 3704 	strd	r3, r7, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000232:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000234:	2302      	movs	r3, #2
 8000236:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000238:	f000 fa94 	bl	8000764 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800023c:	463a      	mov	r2, r7
 800023e:	4631      	mov	r1, r6
 8000240:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8000244:	f000 fb66 	bl	8000914 <HAL_GPIO_WritePin>
}
 8000248:	b009      	add	sp, #36	; 0x24
 800024a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 800024c:	f042 0202 	orr.w	r2, r2, #2
 8000250:	64da      	str	r2, [r3, #76]	; 0x4c
 8000252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000254:	f003 0302 	and.w	r3, r3, #2
 8000258:	9302      	str	r3, [sp, #8]
 800025a:	9b02      	ldr	r3, [sp, #8]
 800025c:	e7de      	b.n	800021c <BSP_LED_Init+0x1c>
 800025e:	bf00      	nop
 8000260:	40021000 	.word	0x40021000
 8000264:	080014e8 	.word	0x080014e8
 8000268:	20000000 	.word	0x20000000

0800026c <BSP_LED_On>:
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <BSP_LED_On+0x14>)
 800026e:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8000272:	4b04      	ldr	r3, [pc, #16]	; (8000284 <BSP_LED_On+0x18>)
 8000274:	2201      	movs	r2, #1
 8000276:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800027a:	f000 bb4b 	b.w	8000914 <HAL_GPIO_WritePin>
 800027e:	bf00      	nop
 8000280:	080014e8 	.word	0x080014e8
 8000284:	20000000 	.word	0x20000000

08000288 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000288:	490f      	ldr	r1, [pc, #60]	; (80002c8 <SystemInit+0x40>)
 800028a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800028e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000296:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <SystemInit+0x44>)
 8000298:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800029a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 800029c:	f042 0201 	orr.w	r2, r2, #1
 80002a0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80002a2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80002aa:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80002ae:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80002b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80002b4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80002bc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80002be:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80002c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80002c4:	608b      	str	r3, [r1, #8]
#endif
}
 80002c6:	4770      	bx	lr
 80002c8:	e000ed00 	.word	0xe000ed00
 80002cc:	40021000 	.word	0x40021000

080002d0 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80002d0:	4770      	bx	lr
	...

080002d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002d4:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80002d6:	4e0f      	ldr	r6, [pc, #60]	; (8000314 <HAL_InitTick+0x40>)
{
 80002d8:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 80002da:	6830      	ldr	r0, [r6, #0]
 80002dc:	b908      	cbnz	r0, 80002e2 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80002de:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80002e0:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80002e2:	4a0d      	ldr	r2, [pc, #52]	; (8000318 <HAL_InitTick+0x44>)
 80002e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e8:	fbb3 f3f0 	udiv	r3, r3, r0
 80002ec:	6810      	ldr	r0, [r2, #0]
 80002ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80002f2:	f000 f87b 	bl	80003ec <HAL_SYSTICK_Config>
 80002f6:	4604      	mov	r4, r0
 80002f8:	2800      	cmp	r0, #0
 80002fa:	d1f0      	bne.n	80002de <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002fc:	2d0f      	cmp	r5, #15
 80002fe:	d8ee      	bhi.n	80002de <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000300:	4602      	mov	r2, r0
 8000302:	4629      	mov	r1, r5
 8000304:	f04f 30ff 	mov.w	r0, #4294967295
 8000308:	f000 f83c 	bl	8000384 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800030c:	6075      	str	r5, [r6, #4]
 800030e:	4620      	mov	r0, r4
 8000310:	e7e6      	b.n	80002e0 <HAL_InitTick+0xc>
 8000312:	bf00      	nop
 8000314:	20000014 	.word	0x20000014
 8000318:	20000010 	.word	0x20000010

0800031c <HAL_Init>:
{
 800031c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800031e:	2003      	movs	r0, #3
 8000320:	f000 f81e 	bl	8000360 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000324:	200f      	movs	r0, #15
 8000326:	f7ff ffd5 	bl	80002d4 <HAL_InitTick>
 800032a:	4604      	mov	r4, r0
 800032c:	b918      	cbnz	r0, 8000336 <HAL_Init+0x1a>
    HAL_MspInit();
 800032e:	f7ff ffcf 	bl	80002d0 <HAL_MspInit>
}
 8000332:	4620      	mov	r0, r4
 8000334:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000336:	2401      	movs	r4, #1
 8000338:	e7fb      	b.n	8000332 <HAL_Init+0x16>
	...

0800033c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800033c:	4a03      	ldr	r2, [pc, #12]	; (800034c <HAL_IncTick+0x10>)
 800033e:	4904      	ldr	r1, [pc, #16]	; (8000350 <HAL_IncTick+0x14>)
 8000340:	6813      	ldr	r3, [r2, #0]
 8000342:	6809      	ldr	r1, [r1, #0]
 8000344:	440b      	add	r3, r1
 8000346:	6013      	str	r3, [r2, #0]
}
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	20000088 	.word	0x20000088
 8000350:	20000014 	.word	0x20000014

08000354 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000354:	4b01      	ldr	r3, [pc, #4]	; (800035c <HAL_GetTick+0x8>)
 8000356:	6818      	ldr	r0, [r3, #0]
}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	20000088 	.word	0x20000088

08000360 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000360:	4a07      	ldr	r2, [pc, #28]	; (8000380 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000362:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000364:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000368:	041b      	lsls	r3, r3, #16
 800036a:	0c1b      	lsrs	r3, r3, #16
 800036c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000370:	0200      	lsls	r0, r0, #8
 8000372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000376:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800037a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800037c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800037e:	4770      	bx	lr
 8000380:	e000ed00 	.word	0xe000ed00

08000384 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000386:	b570      	push	{r4, r5, r6, lr}
 8000388:	68dc      	ldr	r4, [r3, #12]
 800038a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800038e:	f1c4 0507 	rsb	r5, r4, #7
 8000392:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000394:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000398:	bf28      	it	cs
 800039a:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039c:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003a0:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a2:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003a6:	bf8c      	ite	hi
 80003a8:	3c03      	subhi	r4, #3
 80003aa:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003ac:	ea21 0303 	bic.w	r3, r1, r3
 80003b0:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003b2:	fa06 f404 	lsl.w	r4, r6, r4
 80003b6:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80003ba:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003bc:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c0:	bfa8      	it	ge
 80003c2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80003c6:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ca:	bfbc      	itt	lt
 80003cc:	f000 000f 	andlt.w	r0, r0, #15
 80003d0:	4a05      	ldrlt	r2, [pc, #20]	; (80003e8 <HAL_NVIC_SetPriority+0x64>)
 80003d2:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d4:	bfaa      	itet	ge
 80003d6:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003da:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003dc:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80003e0:	bd70      	pop	{r4, r5, r6, pc}
 80003e2:	bf00      	nop
 80003e4:	e000ed00 	.word	0xe000ed00
 80003e8:	e000ed14 	.word	0xe000ed14

080003ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003ec:	3801      	subs	r0, #1
 80003ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003f2:	d20a      	bcs.n	800040a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f6:	4a07      	ldr	r2, [pc, #28]	; (8000414 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003f8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003fa:	21f0      	movs	r1, #240	; 0xf0
 80003fc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000400:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000402:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000404:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800040a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	e000e010 	.word	0xe000e010
 8000414:	e000ed00 	.word	0xe000ed00

08000418 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8000418:	4a09      	ldr	r2, [pc, #36]	; (8000440 <FLASH_Program_Fast+0x28>)
 800041a:	6953      	ldr	r3, [r2, #20]
 800041c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
 8000420:	b510      	push	{r4, lr}
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8000422:	6153      	str	r3, [r2, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000424:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000428:	b672      	cpsid	i
 800042a:	f501 7200 	add.w	r2, r1, #512	; 0x200
 800042e:	1a40      	subs	r0, r0, r1
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8000430:	680c      	ldr	r4, [r1, #0]
 8000432:	500c      	str	r4, [r1, r0]
    dest_addr++;
    src_addr++;
 8000434:	3104      	adds	r1, #4
    row_index--;
  } while (row_index != 0U);
 8000436:	4291      	cmp	r1, r2
 8000438:	d1fa      	bne.n	8000430 <FLASH_Program_Fast+0x18>
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800043a:	f383 8810 	msr	PRIMASK, r3

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800043e:	bd10      	pop	{r4, pc}
 8000440:	40022000 	.word	0x40022000

08000444 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <HAL_FLASH_Unlock+0x1c>)
 8000446:	695a      	ldr	r2, [r3, #20]
 8000448:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800044a:	bfbf      	itttt	lt
 800044c:	4a05      	ldrlt	r2, [pc, #20]	; (8000464 <HAL_FLASH_Unlock+0x20>)
 800044e:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000450:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8000454:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000456:	bfba      	itte	lt
 8000458:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 800045a:	0fc0      	lsrlt	r0, r0, #31
 800045c:	2000      	movge	r0, #0
}
 800045e:	4770      	bx	lr
 8000460:	40022000 	.word	0x40022000
 8000464:	45670123 	.word	0x45670123

08000468 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000468:	4a03      	ldr	r2, [pc, #12]	; (8000478 <HAL_FLASH_Lock+0x10>)
 800046a:	6953      	ldr	r3, [r2, #20]
 800046c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000470:	6153      	str	r3, [r2, #20]
}
 8000472:	2000      	movs	r0, #0
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40022000 	.word	0x40022000

0800047c <FLASH_WaitForLastOperation>:
{
 800047c:	b570      	push	{r4, r5, r6, lr}
 800047e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8000480:	f7ff ff68 	bl	8000354 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000484:	4c1a      	ldr	r4, [pc, #104]	; (80004f0 <FLASH_WaitForLastOperation+0x74>)
  uint32_t tickstart = HAL_GetTick();
 8000486:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000488:	6923      	ldr	r3, [r4, #16]
 800048a:	03db      	lsls	r3, r3, #15
 800048c:	d41e      	bmi.n	80004cc <FLASH_WaitForLastOperation+0x50>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800048e:	6923      	ldr	r3, [r4, #16]
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 8000490:	69a0      	ldr	r0, [r4, #24]
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8000492:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000496:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800049a:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800049e:	f023 0305 	bic.w	r3, r3, #5
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 80004a2:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  if(error != 0u)
 80004a6:	4318      	orrs	r0, r3
 80004a8:	d019      	beq.n	80004de <FLASH_WaitForLastOperation+0x62>
    pFlash.ErrorCode |= error;
 80004aa:	4a12      	ldr	r2, [pc, #72]	; (80004f4 <FLASH_WaitForLastOperation+0x78>)
 80004ac:	6853      	ldr	r3, [r2, #4]
 80004ae:	4303      	orrs	r3, r0
 80004b0:	6053      	str	r3, [r2, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 80004b2:	f010 4340 	ands.w	r3, r0, #3221225472	; 0xc0000000
 80004b6:	bf1e      	ittt	ne
 80004b8:	69a2      	ldrne	r2, [r4, #24]
 80004ba:	4313      	orrne	r3, r2
 80004bc:	61a3      	strne	r3, [r4, #24]
 80004be:	f030 4040 	bics.w	r0, r0, #3221225472	; 0xc0000000
 80004c2:	d001      	beq.n	80004c8 <FLASH_WaitForLastOperation+0x4c>
 80004c4:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <FLASH_WaitForLastOperation+0x74>)
 80004c6:	6118      	str	r0, [r3, #16]
    return HAL_ERROR;
 80004c8:	2001      	movs	r0, #1
 80004ca:	e00e      	b.n	80004ea <FLASH_WaitForLastOperation+0x6e>
    if(Timeout != HAL_MAX_DELAY)
 80004cc:	1c6a      	adds	r2, r5, #1
 80004ce:	d0db      	beq.n	8000488 <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 80004d0:	f7ff ff40 	bl	8000354 <HAL_GetTick>
 80004d4:	1b80      	subs	r0, r0, r6
 80004d6:	42a8      	cmp	r0, r5
 80004d8:	d3d6      	bcc.n	8000488 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 80004da:	2003      	movs	r0, #3
 80004dc:	e005      	b.n	80004ea <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80004de:	6923      	ldr	r3, [r4, #16]
 80004e0:	f013 0301 	ands.w	r3, r3, #1
 80004e4:	d002      	beq.n	80004ec <FLASH_WaitForLastOperation+0x70>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80004e6:	2301      	movs	r3, #1
 80004e8:	6123      	str	r3, [r4, #16]
}
 80004ea:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80004ec:	4618      	mov	r0, r3
 80004ee:	e7fc      	b.n	80004ea <FLASH_WaitForLastOperation+0x6e>
 80004f0:	40022000 	.word	0x40022000
 80004f4:	2000001c 	.word	0x2000001c

080004f8 <HAL_FLASH_Program>:
{
 80004f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 80004fc:	4c25      	ldr	r4, [pc, #148]	; (8000594 <HAL_FLASH_Program+0x9c>)
{
 80004fe:	469a      	mov	sl, r3
  __HAL_LOCK(&pFlash);
 8000500:	7823      	ldrb	r3, [r4, #0]
 8000502:	2b01      	cmp	r3, #1
{
 8000504:	4607      	mov	r7, r0
 8000506:	4688      	mov	r8, r1
 8000508:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 800050a:	d041      	beq.n	8000590 <HAL_FLASH_Program+0x98>
 800050c:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800050e:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000512:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000514:	f7ff ffb2 	bl	800047c <FLASH_WaitForLastOperation>
 8000518:	4606      	mov	r6, r0
  if(status == HAL_OK)
 800051a:	bb30      	cbnz	r0, 800056a <HAL_FLASH_Program+0x72>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800051c:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800051e:	481e      	ldr	r0, [pc, #120]	; (8000598 <HAL_FLASH_Program+0xa0>)
 8000520:	6805      	ldr	r5, [r0, #0]
 8000522:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8000526:	bf17      	itett	ne
 8000528:	6803      	ldrne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800052a:	7725      	strbeq	r5, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800052c:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8000530:	6003      	strne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8000532:	bf1c      	itt	ne
 8000534:	2302      	movne	r3, #2
 8000536:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8000538:	b9e7      	cbnz	r7, 8000574 <HAL_FLASH_Program+0x7c>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800053a:	6945      	ldr	r5, [r0, #20]
 800053c:	f045 0501 	orr.w	r5, r5, #1
 8000540:	6145      	str	r5, [r0, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000542:	f8c8 9000 	str.w	r9, [r8]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000546:	f3bf 8f6f 	isb	sy
      prog_bit = FLASH_CR_PG;
 800054a:	2501      	movs	r5, #1
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800054c:	f8c8 a004 	str.w	sl, [r8, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000550:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000554:	f7ff ff92 	bl	800047c <FLASH_WaitForLastOperation>
 8000558:	4606      	mov	r6, r0
    if (prog_bit != 0U)
 800055a:	b125      	cbz	r5, 8000566 <HAL_FLASH_Program+0x6e>
      CLEAR_BIT(FLASH->CR, prog_bit);
 800055c:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <HAL_FLASH_Program+0xa0>)
 800055e:	6953      	ldr	r3, [r2, #20]
 8000560:	ea23 0505 	bic.w	r5, r3, r5
 8000564:	6155      	str	r5, [r2, #20]
    FLASH_FlushCaches();
 8000566:	f000 f85d 	bl	8000624 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800056a:	2300      	movs	r3, #0
 800056c:	7023      	strb	r3, [r4, #0]
}
 800056e:	4630      	mov	r0, r6
 8000570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8000574:	1e7b      	subs	r3, r7, #1
 8000576:	2b01      	cmp	r3, #1
 8000578:	d901      	bls.n	800057e <HAL_FLASH_Program+0x86>
  uint32_t prog_bit = 0;
 800057a:	2500      	movs	r5, #0
 800057c:	e7e8      	b.n	8000550 <HAL_FLASH_Program+0x58>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800057e:	4649      	mov	r1, r9
 8000580:	4640      	mov	r0, r8
 8000582:	f7ff ff49 	bl	8000418 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8000586:	2f02      	cmp	r7, #2
 8000588:	d1f7      	bne.n	800057a <HAL_FLASH_Program+0x82>
        prog_bit = FLASH_CR_FSTPG;
 800058a:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 800058e:	e7df      	b.n	8000550 <HAL_FLASH_Program+0x58>
  __HAL_LOCK(&pFlash);
 8000590:	2602      	movs	r6, #2
 8000592:	e7ec      	b.n	800056e <HAL_FLASH_Program+0x76>
 8000594:	2000001c 	.word	0x2000001c
 8000598:	40022000 	.word	0x40022000

0800059c <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
#if defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 800059c:	4a0f      	ldr	r2, [pc, #60]	; (80005dc <FLASH_MassErase+0x40>)
 800059e:	6a13      	ldr	r3, [r2, #32]
 80005a0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80005a4:	4613      	mov	r3, r2
 80005a6:	d011      	beq.n	80005cc <FLASH_MassErase+0x30>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80005a8:	07c1      	lsls	r1, r0, #31
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80005aa:	bf42      	ittt	mi
 80005ac:	6952      	ldrmi	r2, [r2, #20]
 80005ae:	f042 0204 	orrmi.w	r2, r2, #4
 80005b2:	615a      	strmi	r2, [r3, #20]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80005b4:	0782      	lsls	r2, r0, #30
 80005b6:	d503      	bpl.n	80005c0 <FLASH_MassErase+0x24>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80005b8:	695a      	ldr	r2, [r3, #20]
 80005ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80005be:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80005c0:	4a06      	ldr	r2, [pc, #24]	; (80005dc <FLASH_MassErase+0x40>)
 80005c2:	6953      	ldr	r3, [r2, #20]
 80005c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c8:	6153      	str	r3, [r2, #20]
}
 80005ca:	4770      	bx	lr
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80005cc:	6953      	ldr	r3, [r2, #20]
 80005ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005d2:	f043 0304 	orr.w	r3, r3, #4
 80005d6:	6153      	str	r3, [r2, #20]
 80005d8:	e7f2      	b.n	80005c0 <FLASH_MassErase+0x24>
 80005da:	bf00      	nop
 80005dc:	40022000 	.word	0x40022000

080005e0 <FLASH_PageErase>:

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
#if defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <FLASH_PageErase+0x40>)
 80005e2:	6a1a      	ldr	r2, [r3, #32]
 80005e4:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80005e8:	695a      	ldr	r2, [r3, #20]
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 80005ea:	d113      	bne.n	8000614 <FLASH_PageErase+0x34>
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80005ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 80005f0:	615a      	str	r2, [r3, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80005f2:	695a      	ldr	r2, [r3, #20]
 80005f4:	00c0      	lsls	r0, r0, #3
 80005f6:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80005fa:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 80005fe:	4310      	orrs	r0, r2
 8000600:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000602:	695a      	ldr	r2, [r3, #20]
 8000604:	f042 0202 	orr.w	r2, r2, #2
 8000608:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800060a:	695a      	ldr	r2, [r3, #20]
 800060c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000610:	615a      	str	r2, [r3, #20]
}
 8000612:	4770      	bx	lr
    if((Banks & FLASH_BANK_1) != 0U)
 8000614:	07c9      	lsls	r1, r1, #31
 8000616:	d4e9      	bmi.n	80005ec <FLASH_PageErase+0xc>
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8000618:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800061c:	e7e8      	b.n	80005f0 <FLASH_PageErase+0x10>
 800061e:	bf00      	nop
 8000620:	40022000 	.word	0x40022000

08000624 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8000624:	4913      	ldr	r1, [pc, #76]	; (8000674 <FLASH_FlushCaches+0x50>)
 8000626:	7f0b      	ldrb	r3, [r1, #28]
 8000628:	b2db      	uxtb	r3, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800062a:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800062e:	2a01      	cmp	r2, #1
 8000630:	d10c      	bne.n	800064c <FLASH_FlushCaches+0x28>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8000632:	4a11      	ldr	r2, [pc, #68]	; (8000678 <FLASH_FlushCaches+0x54>)
 8000634:	6810      	ldr	r0, [r2, #0]
 8000636:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 800063a:	6010      	str	r0, [r2, #0]
 800063c:	6810      	ldr	r0, [r2, #0]
 800063e:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8000642:	6010      	str	r0, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000644:	6810      	ldr	r0, [r2, #0]
 8000646:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 800064a:	6010      	str	r0, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800064c:	3b02      	subs	r3, #2
 800064e:	2b01      	cmp	r3, #1
 8000650:	d80c      	bhi.n	800066c <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <FLASH_FlushCaches+0x54>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000662:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800066a:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800066c:	2300      	movs	r3, #0
 800066e:	770b      	strb	r3, [r1, #28]
}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	2000001c 	.word	0x2000001c
 8000678:	40022000 	.word	0x40022000

0800067c <HAL_FLASHEx_Erase>:
{
 800067c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 8000680:	4c35      	ldr	r4, [pc, #212]	; (8000758 <HAL_FLASHEx_Erase+0xdc>)
 8000682:	7823      	ldrb	r3, [r4, #0]
 8000684:	2b01      	cmp	r3, #1
{
 8000686:	4606      	mov	r6, r0
 8000688:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800068a:	d062      	beq.n	8000752 <HAL_FLASHEx_Erase+0xd6>
 800068c:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800068e:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000692:	7027      	strb	r7, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000694:	f7ff fef2 	bl	800047c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8000698:	4605      	mov	r5, r0
 800069a:	bb40      	cbnz	r0, 80006ee <HAL_FLASHEx_Erase+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800069c:	4b2f      	ldr	r3, [pc, #188]	; (800075c <HAL_FLASHEx_Erase+0xe0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800069e:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80006a6:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80006a8:	d026      	beq.n	80006f8 <HAL_FLASHEx_Erase+0x7c>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80006aa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80006ae:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	0551      	lsls	r1, r2, #21
 80006b4:	d506      	bpl.n	80006c4 <HAL_FLASHEx_Erase+0x48>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006bc:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80006be:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80006c0:	7723      	strb	r3, [r4, #28]
 80006c2:	e000      	b.n	80006c6 <HAL_FLASHEx_Erase+0x4a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80006c4:	7727      	strb	r7, [r4, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80006c6:	6833      	ldr	r3, [r6, #0]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d11f      	bne.n	800070c <HAL_FLASHEx_Erase+0x90>
      FLASH_MassErase(pEraseInit->Banks);
 80006cc:	6870      	ldr	r0, [r6, #4]
 80006ce:	f7ff ff65 	bl	800059c <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80006d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80006d6:	f7ff fed1 	bl	800047c <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80006da:	4a20      	ldr	r2, [pc, #128]	; (800075c <HAL_FLASHEx_Erase+0xe0>)
 80006dc:	6953      	ldr	r3, [r2, #20]
 80006de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80006e2:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80006e6:	4605      	mov	r5, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80006e8:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 80006ea:	f7ff ff9b 	bl	8000624 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80006ee:	2300      	movs	r3, #0
 80006f0:	7023      	strb	r3, [r4, #0]
}
 80006f2:	4628      	mov	r0, r5
 80006f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80006f8:	0552      	lsls	r2, r2, #21
 80006fa:	d505      	bpl.n	8000708 <HAL_FLASHEx_Erase+0x8c>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000702:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8000704:	2302      	movs	r3, #2
 8000706:	e7db      	b.n	80006c0 <HAL_FLASHEx_Erase+0x44>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8000708:	7720      	strb	r0, [r4, #28]
 800070a:	e7dc      	b.n	80006c6 <HAL_FLASHEx_Erase+0x4a>
      *PageError = 0xFFFFFFFFU;
 800070c:	f04f 33ff 	mov.w	r3, #4294967295
 8000710:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8000714:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8000716:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800075c <HAL_FLASHEx_Erase+0xe0>
 800071a:	f8df a044 	ldr.w	sl, [pc, #68]	; 8000760 <HAL_FLASHEx_Erase+0xe4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800071e:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8000722:	4413      	add	r3, r2
 8000724:	42bb      	cmp	r3, r7
 8000726:	d9e0      	bls.n	80006ea <HAL_FLASHEx_Erase+0x6e>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8000728:	6871      	ldr	r1, [r6, #4]
 800072a:	4638      	mov	r0, r7
 800072c:	f7ff ff58 	bl	80005e0 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000730:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000734:	f7ff fea2 	bl	800047c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8000738:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800073c:	ea03 030a 	and.w	r3, r3, sl
 8000740:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 8000744:	b118      	cbz	r0, 800074e <HAL_FLASHEx_Erase+0xd2>
          *PageError = page_index;
 8000746:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800074a:	4605      	mov	r5, r0
          break;
 800074c:	e7cd      	b.n	80006ea <HAL_FLASHEx_Erase+0x6e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800074e:	3701      	adds	r7, #1
 8000750:	e7e5      	b.n	800071e <HAL_FLASHEx_Erase+0xa2>
  __HAL_LOCK(&pFlash);
 8000752:	2502      	movs	r5, #2
 8000754:	e7cd      	b.n	80006f2 <HAL_FLASHEx_Erase+0x76>
 8000756:	bf00      	nop
 8000758:	2000001c 	.word	0x2000001c
 800075c:	40022000 	.word	0x40022000
 8000760:	fffff805 	.word	0xfffff805

08000764 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000768:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076c:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000910 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000770:	4a65      	ldr	r2, [pc, #404]	; (8000908 <HAL_GPIO_Init+0x1a4>)
  uint32_t position = 0x00u;
 8000772:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000774:	fa38 f403 	lsrs.w	r4, r8, r3
 8000778:	d102      	bne.n	8000780 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800077a:	b003      	add	sp, #12
 800077c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000780:	f04f 0c01 	mov.w	ip, #1
 8000784:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8000788:	ea1c 0608 	ands.w	r6, ip, r8
 800078c:	f000 80ab 	beq.w	80008e6 <HAL_GPIO_Init+0x182>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000790:	684c      	ldr	r4, [r1, #4]
 8000792:	f024 0710 	bic.w	r7, r4, #16
 8000796:	2f02      	cmp	r7, #2
 8000798:	d116      	bne.n	80007c8 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 800079a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800079e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007a2:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80007a6:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007aa:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007ae:	f04f 0e0f 	mov.w	lr, #15
 80007b2:	fa0e fe0b 	lsl.w	lr, lr, fp
 80007b6:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80007ba:	690d      	ldr	r5, [r1, #16]
 80007bc:	fa05 f50b 	lsl.w	r5, r5, fp
 80007c0:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 80007c4:	f8ca 5020 	str.w	r5, [sl, #32]
 80007c8:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80007cc:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80007ce:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80007d2:	fa05 f50a 	lsl.w	r5, r5, sl
 80007d6:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80007d8:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80007dc:	ea05 0b0b 	and.w	fp, r5, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80007e0:	fa0e fe0a 	lsl.w	lr, lr, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007e4:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80007e6:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ea:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80007ec:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007f0:	d811      	bhi.n	8000816 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80007f2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80007f4:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007f8:	68cf      	ldr	r7, [r1, #12]
 80007fa:	fa07 fe0a 	lsl.w	lr, r7, sl
 80007fe:	ea4e 070b 	orr.w	r7, lr, fp
        GPIOx->OSPEEDR = temp;
 8000802:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000804:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000806:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800080a:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800080e:	409f      	lsls	r7, r3
 8000810:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8000814:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000816:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000818:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800081a:	688f      	ldr	r7, [r1, #8]
 800081c:	fa07 f70a 	lsl.w	r7, r7, sl
 8000820:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000822:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000824:	00e5      	lsls	r5, r4, #3
 8000826:	d55e      	bpl.n	80008e6 <HAL_GPIO_Init+0x182>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000828:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 800082c:	f045 0501 	orr.w	r5, r5, #1
 8000830:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 8000834:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8000838:	f023 0703 	bic.w	r7, r3, #3
 800083c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000840:	f005 0501 	and.w	r5, r5, #1
 8000844:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000848:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800084a:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000850:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000854:	f04f 0e0f 	mov.w	lr, #15
 8000858:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800085c:	fa0e f50c 	lsl.w	r5, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000860:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000864:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000868:	d03f      	beq.n	80008ea <HAL_GPIO_Init+0x186>
 800086a:	4d28      	ldr	r5, [pc, #160]	; (800090c <HAL_GPIO_Init+0x1a8>)
 800086c:	42a8      	cmp	r0, r5
 800086e:	d03e      	beq.n	80008ee <HAL_GPIO_Init+0x18a>
 8000870:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000874:	42a8      	cmp	r0, r5
 8000876:	d03c      	beq.n	80008f2 <HAL_GPIO_Init+0x18e>
 8000878:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800087c:	42a8      	cmp	r0, r5
 800087e:	d03a      	beq.n	80008f6 <HAL_GPIO_Init+0x192>
 8000880:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000884:	42a8      	cmp	r0, r5
 8000886:	d038      	beq.n	80008fa <HAL_GPIO_Init+0x196>
 8000888:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800088c:	42a8      	cmp	r0, r5
 800088e:	d036      	beq.n	80008fe <HAL_GPIO_Init+0x19a>
 8000890:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000894:	42a8      	cmp	r0, r5
 8000896:	d034      	beq.n	8000902 <HAL_GPIO_Init+0x19e>
 8000898:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800089c:	42a8      	cmp	r0, r5
 800089e:	bf14      	ite	ne
 80008a0:	2508      	movne	r5, #8
 80008a2:	2507      	moveq	r5, #7
 80008a4:	fa05 f50c 	lsl.w	r5, r5, ip
 80008a8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 80008ac:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR1;
 80008ae:	6815      	ldr	r5, [r2, #0]
        temp &= ~(iocurrent);
 80008b0:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008b2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 80008b6:	bf0c      	ite	eq
 80008b8:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80008ba:	4335      	orrne	r5, r6
        EXTI->IMR1 = temp;
 80008bc:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR1;
 80008be:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008c0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 80008c4:	bf0c      	ite	eq
 80008c6:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80008c8:	4335      	orrne	r5, r6
        EXTI->EMR1 = temp;
 80008ca:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR1;
 80008cc:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008ce:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80008d2:	bf0c      	ite	eq
 80008d4:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80008d6:	4335      	orrne	r5, r6
        EXTI->RTSR1 = temp;
 80008d8:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR1;
 80008da:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008dc:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 80008de:	bf54      	ite	pl
 80008e0:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80008e2:	4335      	orrmi	r5, r6
        EXTI->FTSR1 = temp;
 80008e4:	60d5      	str	r5, [r2, #12]
    position++;
 80008e6:	3301      	adds	r3, #1
 80008e8:	e744      	b.n	8000774 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80008ea:	2500      	movs	r5, #0
 80008ec:	e7da      	b.n	80008a4 <HAL_GPIO_Init+0x140>
 80008ee:	2501      	movs	r5, #1
 80008f0:	e7d8      	b.n	80008a4 <HAL_GPIO_Init+0x140>
 80008f2:	2502      	movs	r5, #2
 80008f4:	e7d6      	b.n	80008a4 <HAL_GPIO_Init+0x140>
 80008f6:	2503      	movs	r5, #3
 80008f8:	e7d4      	b.n	80008a4 <HAL_GPIO_Init+0x140>
 80008fa:	2504      	movs	r5, #4
 80008fc:	e7d2      	b.n	80008a4 <HAL_GPIO_Init+0x140>
 80008fe:	2505      	movs	r5, #5
 8000900:	e7d0      	b.n	80008a4 <HAL_GPIO_Init+0x140>
 8000902:	2506      	movs	r5, #6
 8000904:	e7ce      	b.n	80008a4 <HAL_GPIO_Init+0x140>
 8000906:	bf00      	nop
 8000908:	40010400 	.word	0x40010400
 800090c:	48000400 	.word	0x48000400
 8000910:	40021000 	.word	0x40021000

08000914 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000914:	b10a      	cbz	r2, 800091a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000916:	6181      	str	r1, [r0, #24]
 8000918:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800091a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800091c:	4770      	bx	lr
	...

08000920 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <HAL_PWREx_GetVoltageRange+0x20>)
 8000922:	6818      	ldr	r0, [r3, #0]
 8000924:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000928:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800092c:	d007      	beq.n	800093e <HAL_PWREx_GetVoltageRange+0x1e>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800092e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000932:	f413 7f80 	tst.w	r3, #256	; 0x100
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000936:	bf14      	ite	ne
 8000938:	f44f 7000 	movne.w	r0, #512	; 0x200
 800093c:	2000      	moveq	r0, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800093e:	4770      	bx	lr
 8000940:	40007000 	.word	0x40007000

08000944 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000944:	4b29      	ldr	r3, [pc, #164]	; (80009ec <HAL_PWREx_ControlVoltageScaling+0xa8>)

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000946:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000948:	bb28      	cbnz	r0, 8000996 <HAL_PWREx_ControlVoltageScaling+0x52>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800094a:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 800094e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000952:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000956:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800095a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800095e:	d119      	bne.n	8000994 <HAL_PWREx_ControlVoltageScaling+0x50>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800096a:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800096c:	4a20      	ldr	r2, [pc, #128]	; (80009f0 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800096e:	6811      	ldr	r1, [r2, #0]
 8000970:	2232      	movs	r2, #50	; 0x32
 8000972:	434a      	muls	r2, r1
 8000974:	491f      	ldr	r1, [pc, #124]	; (80009f4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000976:	fbb2 f2f1 	udiv	r2, r2, r1
 800097a:	4619      	mov	r1, r3
 800097c:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800097e:	6958      	ldr	r0, [r3, #20]
 8000980:	0540      	lsls	r0, r0, #21
 8000982:	d500      	bpl.n	8000986 <HAL_PWREx_ControlVoltageScaling+0x42>
 8000984:	b922      	cbnz	r2, 8000990 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000986:	694b      	ldr	r3, [r1, #20]
 8000988:	055b      	lsls	r3, r3, #21
 800098a:	d52d      	bpl.n	80009e8 <HAL_PWREx_ControlVoltageScaling+0xa4>
      {
        return HAL_TIMEOUT;
 800098c:	2003      	movs	r0, #3
 800098e:	4770      	bx	lr
        wait_loop_index--;
 8000990:	3a01      	subs	r2, #1
 8000992:	e7f4      	b.n	800097e <HAL_PWREx_ControlVoltageScaling+0x3a>
 8000994:	4770      	bx	lr
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000996:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800099a:	d120      	bne.n	80009de <HAL_PWREx_ControlVoltageScaling+0x9a>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800099c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 80009a0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80009a4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80009a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80009ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80009b0:	d11a      	bne.n	80009e8 <HAL_PWREx_ControlVoltageScaling+0xa4>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80009b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009bc:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80009be:	4a0c      	ldr	r2, [pc, #48]	; (80009f0 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80009c0:	6811      	ldr	r1, [r2, #0]
 80009c2:	2232      	movs	r2, #50	; 0x32
 80009c4:	434a      	muls	r2, r1
 80009c6:	490b      	ldr	r1, [pc, #44]	; (80009f4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80009c8:	fbb2 f2f1 	udiv	r2, r2, r1
 80009cc:	4619      	mov	r1, r3
 80009ce:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80009d0:	6958      	ldr	r0, [r3, #20]
 80009d2:	0540      	lsls	r0, r0, #21
 80009d4:	d5d7      	bpl.n	8000986 <HAL_PWREx_ControlVoltageScaling+0x42>
 80009d6:	2a00      	cmp	r2, #0
 80009d8:	d0d5      	beq.n	8000986 <HAL_PWREx_ControlVoltageScaling+0x42>
      {
        wait_loop_index--;
 80009da:	3a01      	subs	r2, #1
 80009dc:	e7f8      	b.n	80009d0 <HAL_PWREx_ControlVoltageScaling+0x8c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80009de:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80009e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80009e6:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80009e8:	2000      	movs	r0, #0
}
 80009ea:	4770      	bx	lr
 80009ec:	40007000 	.word	0x40007000
 80009f0:	20000010 	.word	0x20000010
 80009f4:	000f4240 	.word	0x000f4240

080009f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80009f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80009fa:	4d1c      	ldr	r5, [pc, #112]	; (8000a6c <RCC_SetFlashLatencyFromMSIRange+0x74>)
 80009fc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80009fe:	00da      	lsls	r2, r3, #3
{
 8000a00:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000a02:	d518      	bpl.n	8000a36 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000a04:	f7ff ff8c 	bl	8000920 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a08:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000a0c:	d123      	bne.n	8000a56 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000a0e:	2c80      	cmp	r4, #128	; 0x80
 8000a10:	d928      	bls.n	8000a64 <RCC_SetFlashLatencyFromMSIRange+0x6c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000a12:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000a14:	bf8c      	ite	hi
 8000a16:	2002      	movhi	r0, #2
 8000a18:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000a1a:	4a15      	ldr	r2, [pc, #84]	; (8000a70 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000a1c:	6813      	ldr	r3, [r2, #0]
 8000a1e:	f023 030f 	bic.w	r3, r3, #15
 8000a22:	4303      	orrs	r3, r0
 8000a24:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000a26:	6813      	ldr	r3, [r2, #0]
 8000a28:	f003 030f 	and.w	r3, r3, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000a2c:	1a18      	subs	r0, r3, r0
 8000a2e:	bf18      	it	ne
 8000a30:	2001      	movne	r0, #1
 8000a32:	b003      	add	sp, #12
 8000a34:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	65ab      	str	r3, [r5, #88]	; 0x58
 8000a3e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a44:	9301      	str	r3, [sp, #4]
 8000a46:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000a48:	f7ff ff6a 	bl	8000920 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000a4c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a52:	65ab      	str	r3, [r5, #88]	; 0x58
 8000a54:	e7d8      	b.n	8000a08 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange >= RCC_MSIRANGE_8)
 8000a56:	2c7f      	cmp	r4, #127	; 0x7f
 8000a58:	d806      	bhi.n	8000a68 <RCC_SetFlashLatencyFromMSIRange+0x70>
      if(msirange == RCC_MSIRANGE_7)
 8000a5a:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000a5e:	4258      	negs	r0, r3
 8000a60:	4158      	adcs	r0, r3
 8000a62:	e7da      	b.n	8000a1a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000a64:	2000      	movs	r0, #0
 8000a66:	e7d8      	b.n	8000a1a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000a68:	2002      	movs	r0, #2
 8000a6a:	e7d6      	b.n	8000a1a <RCC_SetFlashLatencyFromMSIRange+0x22>
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40022000 	.word	0x40022000

08000a74 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a74:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000a76:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a78:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000a7a:	f012 020c 	ands.w	r2, r2, #12
 8000a7e:	d005      	beq.n	8000a8c <HAL_RCC_GetSysClockFreq+0x18>
 8000a80:	2a0c      	cmp	r2, #12
 8000a82:	d115      	bne.n	8000ab0 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a84:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000a88:	2901      	cmp	r1, #1
 8000a8a:	d118      	bne.n	8000abe <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000a8c:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000a8e:	481d      	ldr	r0, [pc, #116]	; (8000b04 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000a90:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000a92:	bf55      	itete	pl
 8000a94:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000a98:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000a9a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000a9e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8000aa2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000aa6:	b34a      	cbz	r2, 8000afc <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000aa8:	2a0c      	cmp	r2, #12
 8000aaa:	d009      	beq.n	8000ac0 <HAL_RCC_GetSysClockFreq+0x4c>
 8000aac:	2000      	movs	r0, #0
  return sysclockfreq;
 8000aae:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000ab0:	2a04      	cmp	r2, #4
 8000ab2:	d022      	beq.n	8000afa <HAL_RCC_GetSysClockFreq+0x86>
 8000ab4:	2a08      	cmp	r2, #8
 8000ab6:	4814      	ldr	r0, [pc, #80]	; (8000b08 <HAL_RCC_GetSysClockFreq+0x94>)
 8000ab8:	bf18      	it	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000abe:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000ac0:	68da      	ldr	r2, [r3, #12]
 8000ac2:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8000ac6:	2a02      	cmp	r2, #2
 8000ac8:	d015      	beq.n	8000af6 <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 8000aca:	490f      	ldr	r1, [pc, #60]	; (8000b08 <HAL_RCC_GetSysClockFreq+0x94>)
 8000acc:	2a03      	cmp	r2, #3
 8000ace:	bf08      	it	eq
 8000ad0:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000ad2:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000ad4:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000adc:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000ae0:	f3c2 1203 	ubfx	r2, r2, #4, #4
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000ae4:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000ae6:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000ae8:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000aea:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000aec:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8000af0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000af4:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <HAL_RCC_GetSysClockFreq+0x98>)
 8000af8:	e7eb      	b.n	8000ad2 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8000afa:	4804      	ldr	r0, [pc, #16]	; (8000b0c <HAL_RCC_GetSysClockFreq+0x98>)
}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000
 8000b04:	080014f4 	.word	0x080014f4
 8000b08:	007a1200 	.word	0x007a1200
 8000b0c:	00f42400 	.word	0x00f42400

08000b10 <HAL_RCC_OscConfig>:
{
 8000b10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8000b14:	4605      	mov	r5, r0
 8000b16:	b908      	cbnz	r0, 8000b1c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000b18:	2001      	movs	r0, #1
 8000b1a:	e047      	b.n	8000bac <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b1c:	4ca8      	ldr	r4, [pc, #672]	; (8000dc0 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b1e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b20:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b22:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b24:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b26:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b2a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b2e:	d573      	bpl.n	8000c18 <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000b30:	b11e      	cbz	r6, 8000b3a <HAL_RCC_OscConfig+0x2a>
 8000b32:	2e0c      	cmp	r6, #12
 8000b34:	d152      	bne.n	8000bdc <HAL_RCC_OscConfig+0xcc>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000b36:	2f01      	cmp	r7, #1
 8000b38:	d150      	bne.n	8000bdc <HAL_RCC_OscConfig+0xcc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b3a:	6823      	ldr	r3, [r4, #0]
 8000b3c:	0799      	lsls	r1, r3, #30
 8000b3e:	d502      	bpl.n	8000b46 <HAL_RCC_OscConfig+0x36>
 8000b40:	69ab      	ldr	r3, [r5, #24]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d0e8      	beq.n	8000b18 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000b46:	6823      	ldr	r3, [r4, #0]
 8000b48:	6a28      	ldr	r0, [r5, #32]
 8000b4a:	071a      	lsls	r2, r3, #28
 8000b4c:	bf56      	itet	pl
 8000b4e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8000b52:	6823      	ldrmi	r3, [r4, #0]
 8000b54:	091b      	lsrpl	r3, r3, #4
 8000b56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b5a:	4298      	cmp	r0, r3
 8000b5c:	d929      	bls.n	8000bb2 <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b5e:	f7ff ff4b 	bl	80009f8 <RCC_SetFlashLatencyFromMSIRange>
 8000b62:	2800      	cmp	r0, #0
 8000b64:	d1d8      	bne.n	8000b18 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b66:	6823      	ldr	r3, [r4, #0]
 8000b68:	f043 0308 	orr.w	r3, r3, #8
 8000b6c:	6023      	str	r3, [r4, #0]
 8000b6e:	6823      	ldr	r3, [r4, #0]
 8000b70:	6a2a      	ldr	r2, [r5, #32]
 8000b72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b76:	4313      	orrs	r3, r2
 8000b78:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b7a:	6863      	ldr	r3, [r4, #4]
 8000b7c:	69ea      	ldr	r2, [r5, #28]
 8000b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b86:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000b88:	f7ff ff74 	bl	8000a74 <HAL_RCC_GetSysClockFreq>
 8000b8c:	68a3      	ldr	r3, [r4, #8]
 8000b8e:	4a8d      	ldr	r2, [pc, #564]	; (8000dc4 <HAL_RCC_OscConfig+0x2b4>)
 8000b90:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b94:	5cd3      	ldrb	r3, [r2, r3]
 8000b96:	f003 031f 	and.w	r3, r3, #31
 8000b9a:	40d8      	lsrs	r0, r3
 8000b9c:	4b8a      	ldr	r3, [pc, #552]	; (8000dc8 <HAL_RCC_OscConfig+0x2b8>)
 8000b9e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8000ba0:	4b8a      	ldr	r3, [pc, #552]	; (8000dcc <HAL_RCC_OscConfig+0x2bc>)
 8000ba2:	6818      	ldr	r0, [r3, #0]
 8000ba4:	f7ff fb96 	bl	80002d4 <HAL_InitTick>
        if(status != HAL_OK)
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d035      	beq.n	8000c18 <HAL_RCC_OscConfig+0x108>
}
 8000bac:	b003      	add	sp, #12
 8000bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bb2:	6823      	ldr	r3, [r4, #0]
 8000bb4:	f043 0308 	orr.w	r3, r3, #8
 8000bb8:	6023      	str	r3, [r4, #0]
 8000bba:	6823      	ldr	r3, [r4, #0]
 8000bbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000bc0:	4303      	orrs	r3, r0
 8000bc2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000bc4:	6863      	ldr	r3, [r4, #4]
 8000bc6:	69ea      	ldr	r2, [r5, #28]
 8000bc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000bcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000bd0:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000bd2:	f7ff ff11 	bl	80009f8 <RCC_SetFlashLatencyFromMSIRange>
 8000bd6:	2800      	cmp	r0, #0
 8000bd8:	d0d6      	beq.n	8000b88 <HAL_RCC_OscConfig+0x78>
 8000bda:	e79d      	b.n	8000b18 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000bdc:	69ab      	ldr	r3, [r5, #24]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d03a      	beq.n	8000c58 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_MSI_ENABLE();
 8000be2:	6823      	ldr	r3, [r4, #0]
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000bea:	f7ff fbb3 	bl	8000354 <HAL_GetTick>
 8000bee:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000bf0:	6823      	ldr	r3, [r4, #0]
 8000bf2:	079b      	lsls	r3, r3, #30
 8000bf4:	d528      	bpl.n	8000c48 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bf6:	6823      	ldr	r3, [r4, #0]
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	6023      	str	r3, [r4, #0]
 8000bfe:	6823      	ldr	r3, [r4, #0]
 8000c00:	6a2a      	ldr	r2, [r5, #32]
 8000c02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c06:	4313      	orrs	r3, r2
 8000c08:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c0a:	6863      	ldr	r3, [r4, #4]
 8000c0c:	69ea      	ldr	r2, [r5, #28]
 8000c0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000c12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c16:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c18:	682b      	ldr	r3, [r5, #0]
 8000c1a:	07d9      	lsls	r1, r3, #31
 8000c1c:	d42d      	bmi.n	8000c7a <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c1e:	682b      	ldr	r3, [r5, #0]
 8000c20:	079a      	lsls	r2, r3, #30
 8000c22:	d46b      	bmi.n	8000cfc <HAL_RCC_OscConfig+0x1ec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c24:	682b      	ldr	r3, [r5, #0]
 8000c26:	0719      	lsls	r1, r3, #28
 8000c28:	f100 80a0 	bmi.w	8000d6c <HAL_RCC_OscConfig+0x25c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c2c:	682b      	ldr	r3, [r5, #0]
 8000c2e:	075a      	lsls	r2, r3, #29
 8000c30:	f100 80ce 	bmi.w	8000dd0 <HAL_RCC_OscConfig+0x2c0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000c34:	682b      	ldr	r3, [r5, #0]
 8000c36:	069a      	lsls	r2, r3, #26
 8000c38:	f100 8137 	bmi.w	8000eaa <HAL_RCC_OscConfig+0x39a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000c3c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8000c3e:	2800      	cmp	r0, #0
 8000c40:	f040 815d 	bne.w	8000efe <HAL_RCC_OscConfig+0x3ee>
  return HAL_OK;
 8000c44:	2000      	movs	r0, #0
 8000c46:	e7b1      	b.n	8000bac <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c48:	f7ff fb84 	bl	8000354 <HAL_GetTick>
 8000c4c:	eba0 0008 	sub.w	r0, r0, r8
 8000c50:	2802      	cmp	r0, #2
 8000c52:	d9cd      	bls.n	8000bf0 <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 8000c54:	2003      	movs	r0, #3
 8000c56:	e7a9      	b.n	8000bac <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 8000c58:	6823      	ldr	r3, [r4, #0]
 8000c5a:	f023 0301 	bic.w	r3, r3, #1
 8000c5e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c60:	f7ff fb78 	bl	8000354 <HAL_GetTick>
 8000c64:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000c66:	6823      	ldr	r3, [r4, #0]
 8000c68:	0798      	lsls	r0, r3, #30
 8000c6a:	d5d5      	bpl.n	8000c18 <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c6c:	f7ff fb72 	bl	8000354 <HAL_GetTick>
 8000c70:	eba0 0008 	sub.w	r0, r0, r8
 8000c74:	2802      	cmp	r0, #2
 8000c76:	d9f6      	bls.n	8000c66 <HAL_RCC_OscConfig+0x156>
 8000c78:	e7ec      	b.n	8000c54 <HAL_RCC_OscConfig+0x144>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000c7a:	2e08      	cmp	r6, #8
 8000c7c:	d003      	beq.n	8000c86 <HAL_RCC_OscConfig+0x176>
 8000c7e:	2e0c      	cmp	r6, #12
 8000c80:	d108      	bne.n	8000c94 <HAL_RCC_OscConfig+0x184>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000c82:	2f03      	cmp	r7, #3
 8000c84:	d106      	bne.n	8000c94 <HAL_RCC_OscConfig+0x184>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c86:	6823      	ldr	r3, [r4, #0]
 8000c88:	039b      	lsls	r3, r3, #14
 8000c8a:	d5c8      	bpl.n	8000c1e <HAL_RCC_OscConfig+0x10e>
 8000c8c:	686b      	ldr	r3, [r5, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1c5      	bne.n	8000c1e <HAL_RCC_OscConfig+0x10e>
 8000c92:	e741      	b.n	8000b18 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c94:	686b      	ldr	r3, [r5, #4]
 8000c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c9a:	d110      	bne.n	8000cbe <HAL_RCC_OscConfig+0x1ae>
 8000c9c:	6823      	ldr	r3, [r4, #0]
 8000c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ca4:	f7ff fb56 	bl	8000354 <HAL_GetTick>
 8000ca8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000caa:	6823      	ldr	r3, [r4, #0]
 8000cac:	0398      	lsls	r0, r3, #14
 8000cae:	d4b6      	bmi.n	8000c1e <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cb0:	f7ff fb50 	bl	8000354 <HAL_GetTick>
 8000cb4:	eba0 0008 	sub.w	r0, r0, r8
 8000cb8:	2864      	cmp	r0, #100	; 0x64
 8000cba:	d9f6      	bls.n	8000caa <HAL_RCC_OscConfig+0x19a>
 8000cbc:	e7ca      	b.n	8000c54 <HAL_RCC_OscConfig+0x144>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cc2:	d104      	bne.n	8000cce <HAL_RCC_OscConfig+0x1be>
 8000cc4:	6823      	ldr	r3, [r4, #0]
 8000cc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cca:	6023      	str	r3, [r4, #0]
 8000ccc:	e7e6      	b.n	8000c9c <HAL_RCC_OscConfig+0x18c>
 8000cce:	6822      	ldr	r2, [r4, #0]
 8000cd0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000cd4:	6022      	str	r2, [r4, #0]
 8000cd6:	6822      	ldr	r2, [r4, #0]
 8000cd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000cdc:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1e0      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x194>
        tickstart = HAL_GetTick();
 8000ce2:	f7ff fb37 	bl	8000354 <HAL_GetTick>
 8000ce6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ce8:	6823      	ldr	r3, [r4, #0]
 8000cea:	0399      	lsls	r1, r3, #14
 8000cec:	d597      	bpl.n	8000c1e <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cee:	f7ff fb31 	bl	8000354 <HAL_GetTick>
 8000cf2:	eba0 0008 	sub.w	r0, r0, r8
 8000cf6:	2864      	cmp	r0, #100	; 0x64
 8000cf8:	d9f6      	bls.n	8000ce8 <HAL_RCC_OscConfig+0x1d8>
 8000cfa:	e7ab      	b.n	8000c54 <HAL_RCC_OscConfig+0x144>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000cfc:	2e04      	cmp	r6, #4
 8000cfe:	d003      	beq.n	8000d08 <HAL_RCC_OscConfig+0x1f8>
 8000d00:	2e0c      	cmp	r6, #12
 8000d02:	d110      	bne.n	8000d26 <HAL_RCC_OscConfig+0x216>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000d04:	2f02      	cmp	r7, #2
 8000d06:	d10e      	bne.n	8000d26 <HAL_RCC_OscConfig+0x216>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d08:	6823      	ldr	r3, [r4, #0]
 8000d0a:	055a      	lsls	r2, r3, #21
 8000d0c:	d503      	bpl.n	8000d16 <HAL_RCC_OscConfig+0x206>
 8000d0e:	68eb      	ldr	r3, [r5, #12]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f43f af01 	beq.w	8000b18 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d16:	6863      	ldr	r3, [r4, #4]
 8000d18:	692a      	ldr	r2, [r5, #16]
 8000d1a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8000d1e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d22:	6063      	str	r3, [r4, #4]
 8000d24:	e77e      	b.n	8000c24 <HAL_RCC_OscConfig+0x114>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d26:	68eb      	ldr	r3, [r5, #12]
 8000d28:	b17b      	cbz	r3, 8000d4a <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_HSI_ENABLE();
 8000d2a:	6823      	ldr	r3, [r4, #0]
 8000d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d30:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d32:	f7ff fb0f 	bl	8000354 <HAL_GetTick>
 8000d36:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d38:	6823      	ldr	r3, [r4, #0]
 8000d3a:	055b      	lsls	r3, r3, #21
 8000d3c:	d4eb      	bmi.n	8000d16 <HAL_RCC_OscConfig+0x206>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d3e:	f7ff fb09 	bl	8000354 <HAL_GetTick>
 8000d42:	1bc0      	subs	r0, r0, r7
 8000d44:	2802      	cmp	r0, #2
 8000d46:	d9f7      	bls.n	8000d38 <HAL_RCC_OscConfig+0x228>
 8000d48:	e784      	b.n	8000c54 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_HSI_DISABLE();
 8000d4a:	6823      	ldr	r3, [r4, #0]
 8000d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d50:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d52:	f7ff faff 	bl	8000354 <HAL_GetTick>
 8000d56:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d58:	6823      	ldr	r3, [r4, #0]
 8000d5a:	0558      	lsls	r0, r3, #21
 8000d5c:	f57f af62 	bpl.w	8000c24 <HAL_RCC_OscConfig+0x114>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d60:	f7ff faf8 	bl	8000354 <HAL_GetTick>
 8000d64:	1bc0      	subs	r0, r0, r7
 8000d66:	2802      	cmp	r0, #2
 8000d68:	d9f6      	bls.n	8000d58 <HAL_RCC_OscConfig+0x248>
 8000d6a:	e773      	b.n	8000c54 <HAL_RCC_OscConfig+0x144>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d6c:	696b      	ldr	r3, [r5, #20]
 8000d6e:	b19b      	cbz	r3, 8000d98 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 8000d70:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000d7c:	f7ff faea 	bl	8000354 <HAL_GetTick>
 8000d80:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d82:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000d86:	079b      	lsls	r3, r3, #30
 8000d88:	f53f af50 	bmi.w	8000c2c <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d8c:	f7ff fae2 	bl	8000354 <HAL_GetTick>
 8000d90:	1bc0      	subs	r0, r0, r7
 8000d92:	2802      	cmp	r0, #2
 8000d94:	d9f5      	bls.n	8000d82 <HAL_RCC_OscConfig+0x272>
 8000d96:	e75d      	b.n	8000c54 <HAL_RCC_OscConfig+0x144>
      __HAL_RCC_LSI_DISABLE();
 8000d98:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000d9c:	f023 0301 	bic.w	r3, r3, #1
 8000da0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000da4:	f7ff fad6 	bl	8000354 <HAL_GetTick>
 8000da8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000daa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000dae:	0798      	lsls	r0, r3, #30
 8000db0:	f57f af3c 	bpl.w	8000c2c <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db4:	f7ff face 	bl	8000354 <HAL_GetTick>
 8000db8:	1bc0      	subs	r0, r0, r7
 8000dba:	2802      	cmp	r0, #2
 8000dbc:	d9f5      	bls.n	8000daa <HAL_RCC_OscConfig+0x29a>
 8000dbe:	e749      	b.n	8000c54 <HAL_RCC_OscConfig+0x144>
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	08001524 	.word	0x08001524
 8000dc8:	20000010 	.word	0x20000010
 8000dcc:	20000018 	.word	0x20000018
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000dd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000dd2:	00d9      	lsls	r1, r3, #3
 8000dd4:	d429      	bmi.n	8000e2a <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	65a3      	str	r3, [r4, #88]	; 0x58
 8000dde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de4:	9301      	str	r3, [sp, #4]
 8000de6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000de8:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dec:	4f8d      	ldr	r7, [pc, #564]	; (8001024 <HAL_RCC_OscConfig+0x514>)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	05da      	lsls	r2, r3, #23
 8000df2:	d51d      	bpl.n	8000e30 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000df4:	68ab      	ldr	r3, [r5, #8]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d12b      	bne.n	8000e52 <HAL_RCC_OscConfig+0x342>
 8000dfa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000e06:	f7ff faa5 	bl	8000354 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e0a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e0e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e10:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000e14:	0798      	lsls	r0, r3, #30
 8000e16:	d542      	bpl.n	8000e9e <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8000e18:	f1b8 0f00 	cmp.w	r8, #0
 8000e1c:	f43f af0a 	beq.w	8000c34 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e26:	65a3      	str	r3, [r4, #88]	; 0x58
 8000e28:	e704      	b.n	8000c34 <HAL_RCC_OscConfig+0x124>
    FlagStatus       pwrclkchanged = RESET;
 8000e2a:	f04f 0800 	mov.w	r8, #0
 8000e2e:	e7dd      	b.n	8000dec <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e36:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000e38:	f7ff fa8c 	bl	8000354 <HAL_GetTick>
 8000e3c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	05db      	lsls	r3, r3, #23
 8000e42:	d4d7      	bmi.n	8000df4 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e44:	f7ff fa86 	bl	8000354 <HAL_GetTick>
 8000e48:	eba0 0009 	sub.w	r0, r0, r9
 8000e4c:	2802      	cmp	r0, #2
 8000e4e:	d9f6      	bls.n	8000e3e <HAL_RCC_OscConfig+0x32e>
 8000e50:	e700      	b.n	8000c54 <HAL_RCC_OscConfig+0x144>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e52:	2b05      	cmp	r3, #5
 8000e54:	d106      	bne.n	8000e64 <HAL_RCC_OscConfig+0x354>
 8000e56:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000e5a:	f043 0304 	orr.w	r3, r3, #4
 8000e5e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8000e62:	e7ca      	b.n	8000dfa <HAL_RCC_OscConfig+0x2ea>
 8000e64:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000e68:	f022 0201 	bic.w	r2, r2, #1
 8000e6c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000e70:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000e74:	f022 0204 	bic.w	r2, r2, #4
 8000e78:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1c2      	bne.n	8000e06 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8000e80:	f7ff fa68 	bl	8000354 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e84:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e88:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000e8a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000e8e:	0799      	lsls	r1, r3, #30
 8000e90:	d5c2      	bpl.n	8000e18 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e92:	f7ff fa5f 	bl	8000354 <HAL_GetTick>
 8000e96:	1bc0      	subs	r0, r0, r7
 8000e98:	4548      	cmp	r0, r9
 8000e9a:	d9f6      	bls.n	8000e8a <HAL_RCC_OscConfig+0x37a>
 8000e9c:	e6da      	b.n	8000c54 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e9e:	f7ff fa59 	bl	8000354 <HAL_GetTick>
 8000ea2:	1bc0      	subs	r0, r0, r7
 8000ea4:	4548      	cmp	r0, r9
 8000ea6:	d9b3      	bls.n	8000e10 <HAL_RCC_OscConfig+0x300>
 8000ea8:	e6d4      	b.n	8000c54 <HAL_RCC_OscConfig+0x144>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000eaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000eac:	b19b      	cbz	r3, 8000ed6 <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSI48_ENABLE();
 8000eae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000eba:	f7ff fa4b 	bl	8000354 <HAL_GetTick>
 8000ebe:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000ec0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000ec4:	079b      	lsls	r3, r3, #30
 8000ec6:	f53f aeb9 	bmi.w	8000c3c <HAL_RCC_OscConfig+0x12c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000eca:	f7ff fa43 	bl	8000354 <HAL_GetTick>
 8000ece:	1bc0      	subs	r0, r0, r7
 8000ed0:	2802      	cmp	r0, #2
 8000ed2:	d9f5      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x3b0>
 8000ed4:	e6be      	b.n	8000c54 <HAL_RCC_OscConfig+0x144>
      __HAL_RCC_HSI48_DISABLE();
 8000ed6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000eda:	f023 0301 	bic.w	r3, r3, #1
 8000ede:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000ee2:	f7ff fa37 	bl	8000354 <HAL_GetTick>
 8000ee6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000ee8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000eec:	0798      	lsls	r0, r3, #30
 8000eee:	f57f aea5 	bpl.w	8000c3c <HAL_RCC_OscConfig+0x12c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000ef2:	f7ff fa2f 	bl	8000354 <HAL_GetTick>
 8000ef6:	1bc0      	subs	r0, r0, r7
 8000ef8:	2802      	cmp	r0, #2
 8000efa:	d9f5      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x3d8>
 8000efc:	e6aa      	b.n	8000c54 <HAL_RCC_OscConfig+0x144>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000efe:	2e0c      	cmp	r6, #12
 8000f00:	d05b      	beq.n	8000fba <HAL_RCC_OscConfig+0x4aa>
        __HAL_RCC_PLL_DISABLE();
 8000f02:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000f04:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000f06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f0a:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000f0c:	d13a      	bne.n	8000f84 <HAL_RCC_OscConfig+0x474>
        tickstart = HAL_GetTick();
 8000f0e:	f7ff fa21 	bl	8000354 <HAL_GetTick>
 8000f12:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f14:	6823      	ldr	r3, [r4, #0]
 8000f16:	0199      	lsls	r1, r3, #6
 8000f18:	d42e      	bmi.n	8000f78 <HAL_RCC_OscConfig+0x468>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f1a:	68e2      	ldr	r2, [r4, #12]
 8000f1c:	4b42      	ldr	r3, [pc, #264]	; (8001028 <HAL_RCC_OscConfig+0x518>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000f22:	4313      	orrs	r3, r2
 8000f24:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000f26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000f2a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000f2c:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8000f30:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000f32:	3a01      	subs	r2, #1
 8000f34:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000f38:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000f3a:	0852      	lsrs	r2, r2, #1
 8000f3c:	3a01      	subs	r2, #1
 8000f3e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8000f42:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000f44:	0852      	lsrs	r2, r2, #1
 8000f46:	3a01      	subs	r2, #1
 8000f48:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000f4c:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000f4e:	6823      	ldr	r3, [r4, #0]
 8000f50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f54:	6023      	str	r3, [r4, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000f56:	68e3      	ldr	r3, [r4, #12]
 8000f58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f5c:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000f5e:	f7ff f9f9 	bl	8000354 <HAL_GetTick>
 8000f62:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f64:	6823      	ldr	r3, [r4, #0]
 8000f66:	019a      	lsls	r2, r3, #6
 8000f68:	f53f ae6c 	bmi.w	8000c44 <HAL_RCC_OscConfig+0x134>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f6c:	f7ff f9f2 	bl	8000354 <HAL_GetTick>
 8000f70:	1b40      	subs	r0, r0, r5
 8000f72:	2802      	cmp	r0, #2
 8000f74:	d9f6      	bls.n	8000f64 <HAL_RCC_OscConfig+0x454>
 8000f76:	e66d      	b.n	8000c54 <HAL_RCC_OscConfig+0x144>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f78:	f7ff f9ec 	bl	8000354 <HAL_GetTick>
 8000f7c:	1b80      	subs	r0, r0, r6
 8000f7e:	2802      	cmp	r0, #2
 8000f80:	d9c8      	bls.n	8000f14 <HAL_RCC_OscConfig+0x404>
 8000f82:	e667      	b.n	8000c54 <HAL_RCC_OscConfig+0x144>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000f8a:	bf02      	ittt	eq
 8000f8c:	68e3      	ldreq	r3, [r4, #12]
 8000f8e:	f023 0303 	biceq.w	r3, r3, #3
 8000f92:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000f94:	68e3      	ldr	r3, [r4, #12]
 8000f96:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f9e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000fa0:	f7ff f9d8 	bl	8000354 <HAL_GetTick>
 8000fa4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000fa6:	6823      	ldr	r3, [r4, #0]
 8000fa8:	019b      	lsls	r3, r3, #6
 8000faa:	f57f ae4b 	bpl.w	8000c44 <HAL_RCC_OscConfig+0x134>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fae:	f7ff f9d1 	bl	8000354 <HAL_GetTick>
 8000fb2:	1b40      	subs	r0, r0, r5
 8000fb4:	2802      	cmp	r0, #2
 8000fb6:	d9f6      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x496>
 8000fb8:	e64c      	b.n	8000c54 <HAL_RCC_OscConfig+0x144>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fba:	2801      	cmp	r0, #1
 8000fbc:	f43f adf6 	beq.w	8000bac <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 8000fc0:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fc2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000fc4:	f003 0103 	and.w	r1, r3, #3
 8000fc8:	4291      	cmp	r1, r2
 8000fca:	f47f ada5 	bne.w	8000b18 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000fce:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8000fd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000fd4:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fd6:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8000fda:	f47f ad9d 	bne.w	8000b18 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000fde:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8000fe0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000fe4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8000fe8:	f47f ad96 	bne.w	8000b18 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000fec:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8000fee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000ff2:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8000ff6:	f47f ad8f 	bne.w	8000b18 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000ffa:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000ffc:	0852      	lsrs	r2, r2, #1
 8000ffe:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001002:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001004:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001008:	f47f ad86 	bne.w	8000b18 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800100c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800100e:	0852      	lsrs	r2, r2, #1
 8001010:	3a01      	subs	r2, #1
 8001012:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001016:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 800101a:	bf14      	ite	ne
 800101c:	2001      	movne	r0, #1
 800101e:	2000      	moveq	r0, #0
 8001020:	e5c4      	b.n	8000bac <HAL_RCC_OscConfig+0x9c>
 8001022:	bf00      	nop
 8001024:	40007000 	.word	0x40007000
 8001028:	019d800c 	.word	0x019d800c

0800102c <HAL_RCC_ClockConfig>:
{
 800102c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001030:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8001032:	4605      	mov	r5, r0
 8001034:	b910      	cbnz	r0, 800103c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001036:	2001      	movs	r0, #1
}
 8001038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800103c:	4a6f      	ldr	r2, [pc, #444]	; (80011fc <HAL_RCC_ClockConfig+0x1d0>)
 800103e:	6813      	ldr	r3, [r2, #0]
 8001040:	f003 030f 	and.w	r3, r3, #15
 8001044:	428b      	cmp	r3, r1
 8001046:	d335      	bcc.n	80010b4 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001048:	6829      	ldr	r1, [r5, #0]
 800104a:	f011 0701 	ands.w	r7, r1, #1
 800104e:	d13c      	bne.n	80010ca <HAL_RCC_ClockConfig+0x9e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001050:	682a      	ldr	r2, [r5, #0]
 8001052:	0791      	lsls	r1, r2, #30
 8001054:	f140 80b7 	bpl.w	80011c6 <HAL_RCC_ClockConfig+0x19a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001058:	4969      	ldr	r1, [pc, #420]	; (8001200 <HAL_RCC_ClockConfig+0x1d4>)
 800105a:	68a8      	ldr	r0, [r5, #8]
 800105c:	688b      	ldr	r3, [r1, #8]
 800105e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001062:	4303      	orrs	r3, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001064:	608b      	str	r3, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001066:	4965      	ldr	r1, [pc, #404]	; (80011fc <HAL_RCC_ClockConfig+0x1d0>)
 8001068:	680b      	ldr	r3, [r1, #0]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	42b3      	cmp	r3, r6
 8001070:	f200 80b1 	bhi.w	80011d6 <HAL_RCC_ClockConfig+0x1aa>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001074:	f012 0f04 	tst.w	r2, #4
 8001078:	4c61      	ldr	r4, [pc, #388]	; (8001200 <HAL_RCC_ClockConfig+0x1d4>)
 800107a:	f040 80b8 	bne.w	80011ee <HAL_RCC_ClockConfig+0x1c2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800107e:	0713      	lsls	r3, r2, #28
 8001080:	d506      	bpl.n	8001090 <HAL_RCC_ClockConfig+0x64>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001082:	68a3      	ldr	r3, [r4, #8]
 8001084:	692a      	ldr	r2, [r5, #16]
 8001086:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800108a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800108e:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001090:	f7ff fcf0 	bl	8000a74 <HAL_RCC_GetSysClockFreq>
 8001094:	68a3      	ldr	r3, [r4, #8]
 8001096:	4a5b      	ldr	r2, [pc, #364]	; (8001204 <HAL_RCC_ClockConfig+0x1d8>)
 8001098:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800109c:	5cd3      	ldrb	r3, [r2, r3]
 800109e:	f003 031f 	and.w	r3, r3, #31
 80010a2:	40d8      	lsrs	r0, r3
 80010a4:	4b58      	ldr	r3, [pc, #352]	; (8001208 <HAL_RCC_ClockConfig+0x1dc>)
 80010a6:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80010a8:	4b58      	ldr	r3, [pc, #352]	; (800120c <HAL_RCC_ClockConfig+0x1e0>)
 80010aa:	6818      	ldr	r0, [r3, #0]
}
 80010ac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick(uwTickPrio);
 80010b0:	f7ff b910 	b.w	80002d4 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010b4:	6813      	ldr	r3, [r2, #0]
 80010b6:	f023 030f 	bic.w	r3, r3, #15
 80010ba:	430b      	orrs	r3, r1
 80010bc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010be:	6813      	ldr	r3, [r2, #0]
 80010c0:	f003 030f 	and.w	r3, r3, #15
 80010c4:	428b      	cmp	r3, r1
 80010c6:	d1b6      	bne.n	8001036 <HAL_RCC_ClockConfig+0xa>
 80010c8:	e7be      	b.n	8001048 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010ca:	686b      	ldr	r3, [r5, #4]
 80010cc:	4c4c      	ldr	r4, [pc, #304]	; (8001200 <HAL_RCC_ClockConfig+0x1d4>)
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d163      	bne.n	800119a <HAL_RCC_ClockConfig+0x16e>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010d2:	6823      	ldr	r3, [r4, #0]
 80010d4:	019b      	lsls	r3, r3, #6
 80010d6:	d5ae      	bpl.n	8001036 <HAL_RCC_ClockConfig+0xa>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80010d8:	68e3      	ldr	r3, [r4, #12]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d145      	bne.n	800116e <HAL_RCC_ClockConfig+0x142>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80010e2:	6823      	ldr	r3, [r4, #0]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80010e4:	4a4a      	ldr	r2, [pc, #296]	; (8001210 <HAL_RCC_ClockConfig+0x1e4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80010e6:	071f      	lsls	r7, r3, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80010e8:	bf55      	itete	pl
 80010ea:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80010ee:	6823      	ldrmi	r3, [r4, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80010f0:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80010f4:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    msirange = MSIRangeTable[msirange];
 80010f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80010fc:	68e2      	ldr	r2, [r4, #12]
 80010fe:	f002 0203 	and.w	r2, r2, #3

  switch (pllsource)
 8001102:	2a02      	cmp	r2, #2
 8001104:	d035      	beq.n	8001172 <HAL_RCC_ClockConfig+0x146>
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
    break;

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001106:	4843      	ldr	r0, [pc, #268]	; (8001214 <HAL_RCC_ClockConfig+0x1e8>)
 8001108:	2a03      	cmp	r2, #3
 800110a:	bf08      	it	eq
 800110c:	4603      	moveq	r3, r0
  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800110e:	68e0      	ldr	r0, [r4, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001110:	68e2      	ldr	r2, [r4, #12]
 8001112:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001116:	4353      	muls	r3, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001118:	68e2      	ldr	r2, [r4, #12]
 800111a:	f3c2 6241 	ubfx	r2, r2, #25, #2
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800111e:	f3c0 1003 	ubfx	r0, r0, #4, #4
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001122:	3201      	adds	r2, #1
 8001124:	0052      	lsls	r2, r2, #1
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001126:	3001      	adds	r0, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001128:	fbb3 f3f0 	udiv	r3, r3, r0
  sysclockfreq = pllvco / pllr;
 800112c:	fbb3 f3f2 	udiv	r3, r3, r2
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001130:	4a39      	ldr	r2, [pc, #228]	; (8001218 <HAL_RCC_ClockConfig+0x1ec>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d81f      	bhi.n	8001176 <HAL_RCC_ClockConfig+0x14a>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001136:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001138:	68a3      	ldr	r3, [r4, #8]
 800113a:	686a      	ldr	r2, [r5, #4]
 800113c:	f023 0303 	bic.w	r3, r3, #3
 8001140:	4313      	orrs	r3, r2
 8001142:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001144:	f7ff f906 	bl	8000354 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001148:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800114c:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800114e:	68a3      	ldr	r3, [r4, #8]
 8001150:	686a      	ldr	r2, [r5, #4]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800115a:	f43f af79 	beq.w	8001050 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800115e:	f7ff f8f9 	bl	8000354 <HAL_GetTick>
 8001162:	eba0 0008 	sub.w	r0, r0, r8
 8001166:	4548      	cmp	r0, r9
 8001168:	d9f1      	bls.n	800114e <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 800116a:	2003      	movs	r0, #3
 800116c:	e764      	b.n	8001038 <HAL_RCC_ClockConfig+0xc>
  uint32_t msirange = 0U;
 800116e:	2300      	movs	r3, #0
 8001170:	e7c4      	b.n	80010fc <HAL_RCC_ClockConfig+0xd0>
    pllvco = HSI_VALUE;
 8001172:	4b2a      	ldr	r3, [pc, #168]	; (800121c <HAL_RCC_ClockConfig+0x1f0>)
 8001174:	e7cb      	b.n	800110e <HAL_RCC_ClockConfig+0xe2>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001176:	68a3      	ldr	r3, [r4, #8]
 8001178:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800117c:	d107      	bne.n	800118e <HAL_RCC_ClockConfig+0x162>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800117e:	68a3      	ldr	r3, [r4, #8]
 8001180:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001188:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 800118a:	2780      	movs	r7, #128	; 0x80
 800118c:	e7d4      	b.n	8001138 <HAL_RCC_ClockConfig+0x10c>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800118e:	0788      	lsls	r0, r1, #30
 8001190:	d5d1      	bpl.n	8001136 <HAL_RCC_ClockConfig+0x10a>
 8001192:	68ab      	ldr	r3, [r5, #8]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1ce      	bne.n	8001136 <HAL_RCC_ClockConfig+0x10a>
 8001198:	e7f1      	b.n	800117e <HAL_RCC_ClockConfig+0x152>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800119a:	2b02      	cmp	r3, #2
 800119c:	d10a      	bne.n	80011b4 <HAL_RCC_ClockConfig+0x188>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800119e:	6823      	ldr	r3, [r4, #0]
 80011a0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011a4:	f43f af47 	beq.w	8001036 <HAL_RCC_ClockConfig+0xa>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80011a8:	f7ff fc64 	bl	8000a74 <HAL_RCC_GetSysClockFreq>
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <HAL_RCC_ClockConfig+0x1ec>)
 80011ae:	4298      	cmp	r0, r3
 80011b0:	d9c1      	bls.n	8001136 <HAL_RCC_ClockConfig+0x10a>
 80011b2:	e7e4      	b.n	800117e <HAL_RCC_ClockConfig+0x152>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80011b4:	b91b      	cbnz	r3, 80011be <HAL_RCC_ClockConfig+0x192>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011b6:	6823      	ldr	r3, [r4, #0]
 80011b8:	f013 0f02 	tst.w	r3, #2
 80011bc:	e7f2      	b.n	80011a4 <HAL_RCC_ClockConfig+0x178>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011be:	6823      	ldr	r3, [r4, #0]
 80011c0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80011c4:	e7ee      	b.n	80011a4 <HAL_RCC_ClockConfig+0x178>
    if(hpre == RCC_SYSCLK_DIV2)
 80011c6:	2f80      	cmp	r7, #128	; 0x80
 80011c8:	f47f af4d 	bne.w	8001066 <HAL_RCC_ClockConfig+0x3a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80011cc:	490c      	ldr	r1, [pc, #48]	; (8001200 <HAL_RCC_ClockConfig+0x1d4>)
 80011ce:	688b      	ldr	r3, [r1, #8]
 80011d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011d4:	e746      	b.n	8001064 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011d6:	680b      	ldr	r3, [r1, #0]
 80011d8:	f023 030f 	bic.w	r3, r3, #15
 80011dc:	4333      	orrs	r3, r6
 80011de:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011e0:	680b      	ldr	r3, [r1, #0]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	42b3      	cmp	r3, r6
 80011e8:	f47f af25 	bne.w	8001036 <HAL_RCC_ClockConfig+0xa>
 80011ec:	e742      	b.n	8001074 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011ee:	68a3      	ldr	r3, [r4, #8]
 80011f0:	68e9      	ldr	r1, [r5, #12]
 80011f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011f6:	430b      	orrs	r3, r1
 80011f8:	60a3      	str	r3, [r4, #8]
 80011fa:	e740      	b.n	800107e <HAL_RCC_ClockConfig+0x52>
 80011fc:	40022000 	.word	0x40022000
 8001200:	40021000 	.word	0x40021000
 8001204:	08001524 	.word	0x08001524
 8001208:	20000010 	.word	0x20000010
 800120c:	20000018 	.word	0x20000018
 8001210:	080014f4 	.word	0x080014f4
 8001214:	007a1200 	.word	0x007a1200
 8001218:	04c4b400 	.word	0x04c4b400
 800121c:	00f42400 	.word	0x00f42400

08001220 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001258 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001224:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001226:	e003      	b.n	8001230 <LoopCopyDataInit>

08001228 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800122a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800122c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800122e:	3104      	adds	r1, #4

08001230 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001230:	480b      	ldr	r0, [pc, #44]	; (8001260 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001234:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001236:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001238:	d3f6      	bcc.n	8001228 <CopyDataInit>
	ldr	r2, =_sbss
 800123a:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <LoopForever+0x12>)
	b	LoopFillZerobss
 800123c:	e002      	b.n	8001244 <LoopFillZerobss>

0800123e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800123e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001240:	f842 3b04 	str.w	r3, [r2], #4

08001244 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <LoopForever+0x16>)
	cmp	r2, r3
 8001246:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001248:	d3f9      	bcc.n	800123e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800124a:	f7ff f81d 	bl	8000288 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800124e:	f000 f911 	bl	8001474 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001252:	f000 f85d 	bl	8001310 <main>

08001256 <LoopForever>:

LoopForever:
    b LoopForever
 8001256:	e7fe      	b.n	8001256 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001258:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 800125c:	08001750 	.word	0x08001750
	ldr	r0, =_sdata
 8001260:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001264:	20000040 	.word	0x20000040
	ldr	r2, =_sbss
 8001268:	20000040 	.word	0x20000040
	ldr	r3, = _ebss
 800126c:	2000008c 	.word	0x2000008c

08001270 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001270:	e7fe      	b.n	8001270 <ADC1_IRQHandler>
	...

08001274 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8001274:	b510      	push	{r4, lr}
 8001276:	b098      	sub	sp, #96	; 0x60
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  
  /* Enable voltage range 1 boost mode for frequency above 80 Mhz */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001278:	4c24      	ldr	r4, [pc, #144]	; (800130c <SystemClock_Config+0x98>)
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127a:	2214      	movs	r2, #20
 800127c:	2100      	movs	r1, #0
 800127e:	a802      	add	r0, sp, #8
 8001280:	f000 f91c 	bl	80014bc <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001284:	2244      	movs	r2, #68	; 0x44
 8001286:	2100      	movs	r1, #0
 8001288:	a807      	add	r0, sp, #28
 800128a:	f000 f917 	bl	80014bc <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001294:	65a3      	str	r3, [r4, #88]	; 0x58
 8001296:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129c:	9301      	str	r3, [sp, #4]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800129e:	2000      	movs	r0, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80012a2:	f7ff fb4f 	bl	8000944 <HAL_PWREx_ControlVoltageScaling>
  __HAL_RCC_PWR_CLK_DISABLE();
 80012a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80012a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012ac:	65a3      	str	r3, [r4, #88]	; 0x58

  /* Enable MSI Oscillator and activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80012ae:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80012b0:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b2:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80012b4:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80012bc:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012c0:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 80012c2:	233c      	movs	r3, #60	; 0x3c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012c4:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLN = 60;
 80012c6:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLP = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c8:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLP = 7;
 80012ca:	2307      	movs	r3, #7
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012cc:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012ce:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = 7;
 80012d2:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d4:	f7ff fc1c 	bl	8000b10 <HAL_RCC_OscConfig>
 80012d8:	b100      	cbz	r0, 80012dc <SystemClock_Config+0x68>
 80012da:	e7fe      	b.n	80012da <SystemClock_Config+0x66>
  }
  
  /* To avoid undershoot due to maximum frequency, select PLL as system clock source */
  /* with AHB prescaler divider 2 as first step */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012dc:	230f      	movs	r3, #15
 80012de:	2103      	movs	r1, #3
 80012e0:	e9cd 3102 	strd	r3, r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80012e4:	2380      	movs	r3, #128	; 0x80
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;  
 80012e6:	e9cd 3004 	strd	r3, r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 80012ea:	9006      	str	r0, [sp, #24]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012ec:	a802      	add	r0, sp, #8
 80012ee:	f7ff fe9d 	bl	800102c <HAL_RCC_ClockConfig>
 80012f2:	b100      	cbz	r0, 80012f6 <SystemClock_Config+0x82>
 80012f4:	e7fe      	b.n	80012f4 <SystemClock_Config+0x80>
    while(1);
  }

  /* AHB prescaler divider at 1 as second step */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f6:	9004      	str	r0, [sp, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012f8:	2105      	movs	r1, #5
 80012fa:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK;
 80012fc:	9402      	str	r4, [sp, #8]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012fe:	f7ff fe95 	bl	800102c <HAL_RCC_ClockConfig>
 8001302:	b100      	cbz	r0, 8001306 <SystemClock_Config+0x92>
 8001304:	e7fe      	b.n	8001304 <SystemClock_Config+0x90>
  {
    /* Initialization Error */
    while(1);
  }
}
 8001306:	b018      	add	sp, #96	; 0x60
 8001308:	bd10      	pop	{r4, pc}
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000

08001310 <main>:
{
 8001310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_Init();
 8001314:	f7ff f802 	bl	800031c <HAL_Init>
  SystemClock_Config();
 8001318:	f7ff ffac 	bl	8001274 <SystemClock_Config>
  BSP_LED_Init(LED1);
 800131c:	2000      	movs	r0, #0
 800131e:	f7fe ff6f 	bl	8000200 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8001322:	2001      	movs	r0, #1
 8001324:	f7fe ff6c 	bl	8000200 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8001328:	2002      	movs	r0, #2
 800132a:	f7fe ff69 	bl	8000200 <BSP_LED_Init>
  HAL_FLASH_Unlock();
 800132e:	f7ff f889 	bl	8000444 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8001332:	4b44      	ldr	r3, [pc, #272]	; (8001444 <main+0x134>)
 8001334:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001338:	611a      	str	r2, [r3, #16]
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0)
 800133a:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 800133e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001348:	4b3f      	ldr	r3, [pc, #252]	; (8001448 <main+0x138>)
    if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	b293      	uxth	r3, r2
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0)
 800134e:	d11a      	bne.n	8001386 <main+0x76>
    if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8001350:	428b      	cmp	r3, r1
 8001352:	d025      	beq.n	80013a0 <main+0x90>
 8001354:	4b3d      	ldr	r3, [pc, #244]	; (800144c <main+0x13c>)
 8001356:	ea03 2342 	and.w	r3, r3, r2, lsl #9
 800135a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
      bank = FLASH_BANK_1;
 800135e:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001362:	bf94      	ite	ls
 8001364:	2302      	movls	r3, #2
 8001366:	2301      	movhi	r3, #1
  BankNumber = GetBank(FLASH_USER_START_ADDR);
 8001368:	4c39      	ldr	r4, [pc, #228]	; (8001450 <main+0x140>)
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_MASSERASE;
 800136a:	2201      	movs	r2, #1
  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 800136c:	f104 0114 	add.w	r1, r4, #20
 8001370:	1d20      	adds	r0, r4, #4
  BankNumber = GetBank(FLASH_USER_START_ADDR);
 8001372:	6023      	str	r3, [r4, #0]
  EraseInitStruct.Banks     = BankNumber;
 8001374:	e9c4 2301 	strd	r2, r3, [r4, #4]
  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8001378:	f7ff f980 	bl	800067c <HAL_FLASHEx_Erase>
 800137c:	b1a0      	cbz	r0, 80013a8 <main+0x98>
      BSP_LED_On(LED3);
 800137e:	2002      	movs	r0, #2
 8001380:	f7fe ff74 	bl	800026c <BSP_LED_On>
 8001384:	e7fb      	b.n	800137e <main+0x6e>
    if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8001386:	428b      	cmp	r3, r1
 8001388:	d00c      	beq.n	80013a4 <main+0x94>
 800138a:	4b30      	ldr	r3, [pc, #192]	; (800144c <main+0x13c>)
 800138c:	ea03 2342 	and.w	r3, r3, r2, lsl #9
 8001390:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
      bank = FLASH_BANK_2;
 8001394:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001398:	bf94      	ite	ls
 800139a:	2301      	movls	r3, #1
 800139c:	2302      	movhi	r3, #2
 800139e:	e7e3      	b.n	8001368 <main+0x58>
 80013a0:	2302      	movs	r3, #2
 80013a2:	e7e1      	b.n	8001368 <main+0x58>
      bank = FLASH_BANK_1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e7df      	b.n	8001368 <main+0x58>
 80013a8:	4d2a      	ldr	r5, [pc, #168]	; (8001454 <main+0x144>)
  while (Address < (FLASH_USER_END_ADDR - (FLASH_ROW_SIZE*sizeof(uint64_t))))
 80013aa:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800145c <main+0x14c>
  Address = FLASH_USER_START_ADDR;
 80013ae:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 80013b2:	61a3      	str	r3, [r4, #24]
 80013b4:	462e      	mov	r6, r5
 80013b6:	17ef      	asrs	r7, r5, #31
  while (Address < (FLASH_USER_END_ADDR - (FLASH_ROW_SIZE*sizeof(uint64_t))))
 80013b8:	69a1      	ldr	r1, [r4, #24]
 80013ba:	4541      	cmp	r1, r8
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FAST, Address, (uint64_t)Data64_To_Prog) == HAL_OK)
 80013bc:	4632      	mov	r2, r6
 80013be:	463b      	mov	r3, r7
  while (Address < (FLASH_USER_END_ADDR - (FLASH_ROW_SIZE*sizeof(uint64_t))))
 80013c0:	d908      	bls.n	80013d4 <main+0xc4>
  if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FAST_AND_LAST, Address, (uint64_t)Data64_To_Prog) != HAL_OK)
 80013c2:	2002      	movs	r0, #2
 80013c4:	f7ff f898 	bl	80004f8 <HAL_FLASH_Program>
 80013c8:	4606      	mov	r6, r0
 80013ca:	b180      	cbz	r0, 80013ee <main+0xde>
      BSP_LED_On(LED3);
 80013cc:	2002      	movs	r0, #2
 80013ce:	f7fe ff4d 	bl	800026c <BSP_LED_On>
 80013d2:	e7fb      	b.n	80013cc <main+0xbc>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FAST, Address, (uint64_t)Data64_To_Prog) == HAL_OK)
 80013d4:	2001      	movs	r0, #1
 80013d6:	f7ff f88f 	bl	80004f8 <HAL_FLASH_Program>
 80013da:	b920      	cbnz	r0, 80013e6 <main+0xd6>
      Address = Address + (FLASH_ROW_SIZE*sizeof(uint64_t));
 80013dc:	69a3      	ldr	r3, [r4, #24]
 80013de:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013e2:	61a3      	str	r3, [r4, #24]
 80013e4:	e7e8      	b.n	80013b8 <main+0xa8>
        BSP_LED_On(LED3);
 80013e6:	2002      	movs	r0, #2
 80013e8:	f7fe ff40 	bl	800026c <BSP_LED_On>
 80013ec:	e7fb      	b.n	80013e6 <main+0xd6>
  HAL_FLASH_Lock();
 80013ee:	f7ff f83b 	bl	8000468 <HAL_FLASH_Lock>
  Address = FLASH_USER_START_ADDR;
 80013f2:	f04f 6301 	mov.w	r3, #135266304	; 0x8100000
 80013f6:	4818      	ldr	r0, [pc, #96]	; (8001458 <main+0x148>)
 80013f8:	61a3      	str	r3, [r4, #24]
  MemoryProgramStatus = 0x0;
 80013fa:	61e6      	str	r6, [r4, #28]
 80013fc:	4915      	ldr	r1, [pc, #84]	; (8001454 <main+0x144>)
 80013fe:	eba3 0c05 	sub.w	ip, r3, r5
 8001402:	eb0c 0201 	add.w	r2, ip, r1
      data64 = *(__IO uint64_t *)Address;
 8001406:	e9d2 6700 	ldrd	r6, r7, [r2]
 800140a:	e9c4 6708 	strd	r6, r7, [r4, #32]
      if(data64 != Data64_To_Prog[data_index])
 800140e:	e8f1 8902 	ldrd	r8, r9, [r1], #8
 8001412:	e9d4 6708 	ldrd	r6, r7, [r4, #32]
 8001416:	45b9      	cmp	r9, r7
 8001418:	bf0f      	iteee	eq
 800141a:	45b0      	cmpeq	r8, r6
        MemoryProgramStatus++;
 800141c:	69e2      	ldrne	r2, [r4, #28]
 800141e:	3201      	addne	r2, #1
 8001420:	61e2      	strne	r2, [r4, #28]
    for (data_index = 0; data_index < FLASH_ROW_SIZE; data_index++)
 8001422:	4281      	cmp	r1, r0
 8001424:	d1ed      	bne.n	8001402 <main+0xf2>
 8001426:	f503 7300 	add.w	r3, r3, #512	; 0x200
  while (Address < FLASH_USER_END_ADDR)
 800142a:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800142e:	d1e5      	bne.n	80013fc <main+0xec>
  if (MemoryProgramStatus == 0)
 8001430:	69e0      	ldr	r0, [r4, #28]
 8001432:	61a3      	str	r3, [r4, #24]
 8001434:	b910      	cbnz	r0, 800143c <main+0x12c>
    BSP_LED_On(LED1);
 8001436:	f7fe ff19 	bl	800026c <BSP_LED_On>
 800143a:	e7fe      	b.n	800143a <main+0x12a>
    BSP_LED_On(LED2);
 800143c:	2001      	movs	r0, #1
 800143e:	f7fe ff15 	bl	800026c <BSP_LED_On>
 8001442:	e7fa      	b.n	800143a <main+0x12a>
 8001444:	40022000 	.word	0x40022000
 8001448:	1fff75e0 	.word	0x1fff75e0
 800144c:	01fffe00 	.word	0x01fffe00
 8001450:	20000060 	.word	0x20000060
 8001454:	08001540 	.word	0x08001540
 8001458:	08001740 	.word	0x08001740
 800145c:	081ffdfe 	.word	0x081ffdfe

08001460 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8001460:	4770      	bx	lr

08001462 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001462:	e7fe      	b.n	8001462 <HardFault_Handler>

08001464 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001464:	e7fe      	b.n	8001464 <MemManage_Handler>

08001466 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001466:	e7fe      	b.n	8001466 <BusFault_Handler>

08001468 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001468:	e7fe      	b.n	8001468 <UsageFault_Handler>

0800146a <SVC_Handler>:
 800146a:	4770      	bx	lr

0800146c <DebugMon_Handler>:
 800146c:	4770      	bx	lr

0800146e <PendSV_Handler>:
 800146e:	4770      	bx	lr

08001470 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8001470:	f7fe bf64 	b.w	800033c <HAL_IncTick>

08001474 <__libc_init_array>:
 8001474:	b570      	push	{r4, r5, r6, lr}
 8001476:	4e0d      	ldr	r6, [pc, #52]	; (80014ac <__libc_init_array+0x38>)
 8001478:	4c0d      	ldr	r4, [pc, #52]	; (80014b0 <__libc_init_array+0x3c>)
 800147a:	1ba4      	subs	r4, r4, r6
 800147c:	10a4      	asrs	r4, r4, #2
 800147e:	2500      	movs	r5, #0
 8001480:	42a5      	cmp	r5, r4
 8001482:	d109      	bne.n	8001498 <__libc_init_array+0x24>
 8001484:	4e0b      	ldr	r6, [pc, #44]	; (80014b4 <__libc_init_array+0x40>)
 8001486:	4c0c      	ldr	r4, [pc, #48]	; (80014b8 <__libc_init_array+0x44>)
 8001488:	f000 f820 	bl	80014cc <_init>
 800148c:	1ba4      	subs	r4, r4, r6
 800148e:	10a4      	asrs	r4, r4, #2
 8001490:	2500      	movs	r5, #0
 8001492:	42a5      	cmp	r5, r4
 8001494:	d105      	bne.n	80014a2 <__libc_init_array+0x2e>
 8001496:	bd70      	pop	{r4, r5, r6, pc}
 8001498:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800149c:	4798      	blx	r3
 800149e:	3501      	adds	r5, #1
 80014a0:	e7ee      	b.n	8001480 <__libc_init_array+0xc>
 80014a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014a6:	4798      	blx	r3
 80014a8:	3501      	adds	r5, #1
 80014aa:	e7f2      	b.n	8001492 <__libc_init_array+0x1e>
 80014ac:	08001740 	.word	0x08001740
 80014b0:	08001740 	.word	0x08001740
 80014b4:	08001740 	.word	0x08001740
 80014b8:	08001744 	.word	0x08001744

080014bc <memset>:
 80014bc:	4402      	add	r2, r0
 80014be:	4603      	mov	r3, r0
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d100      	bne.n	80014c6 <memset+0xa>
 80014c4:	4770      	bx	lr
 80014c6:	f803 1b01 	strb.w	r1, [r3], #1
 80014ca:	e7f9      	b.n	80014c0 <memset+0x4>

080014cc <_init>:
 80014cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ce:	bf00      	nop
 80014d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014d2:	bc08      	pop	{r3}
 80014d4:	469e      	mov	lr, r3
 80014d6:	4770      	bx	lr

080014d8 <_fini>:
 80014d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014da:	bf00      	nop
 80014dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014de:	bc08      	pop	{r3}
 80014e0:	469e      	mov	lr, r3
 80014e2:	4770      	bx	lr
 80014e4:	0000      	movs	r0, r0
	...
