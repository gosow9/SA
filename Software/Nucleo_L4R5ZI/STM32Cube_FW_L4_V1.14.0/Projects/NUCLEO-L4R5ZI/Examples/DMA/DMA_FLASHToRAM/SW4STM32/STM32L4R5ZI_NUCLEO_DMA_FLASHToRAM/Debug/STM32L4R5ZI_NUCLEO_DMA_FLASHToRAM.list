
STM32L4R5ZI_NUCLEO_DMA_FLASHToRAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001390  080001c0  080001c0  000101c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08001550  08001550  00011550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001628  08001628  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08001628  08001628  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001628  08001628  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08001628  08001628  00011628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08001630  08001630  00011630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08001638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000020  08001658  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08001658  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008401  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017ff  00000000  00000000  00028451  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000211a  00000000  00000000  00029c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000650  00000000  00000000  0002bd70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000718  00000000  00000000  0002c3c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00027692  00000000  00000000  0002cad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000062b9  00000000  00000000  0005416a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000f1033  00000000  00000000  0005a423  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0014b456  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000dc0  00000000  00000000  0014b4d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000020 	.word	0x20000020
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08001534 	.word	0x08001534

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000024 	.word	0x20000024
 80001fc:	08001534 	.word	0x08001534

08000200 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000202:	4b17      	ldr	r3, [pc, #92]	; (8000260 <BSP_LED_Init+0x60>)
 8000204:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000206:	4604      	mov	r4, r0
 8000208:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800020a:	b9f8      	cbnz	r0, 800024c <BSP_LED_Init+0x4c>
 800020c:	f042 0204 	orr.w	r2, r2, #4
 8000210:	64da      	str	r2, [r3, #76]	; 0x4c
 8000212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000214:	f003 0304 	and.w	r3, r3, #4
 8000218:	9301      	str	r3, [sp, #4]
 800021a:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800021c:	4b11      	ldr	r3, [pc, #68]	; (8000264 <BSP_LED_Init+0x64>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800021e:	4d12      	ldr	r5, [pc, #72]	; (8000268 <BSP_LED_Init+0x68>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000220:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000224:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000228:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800022a:	2700      	movs	r7, #0
 800022c:	2301      	movs	r3, #1
 800022e:	e9cd 3704 	strd	r3, r7, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000232:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000234:	2302      	movs	r3, #2
 8000236:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000238:	f000 fa8e 	bl	8000758 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800023c:	463a      	mov	r2, r7
 800023e:	4631      	mov	r1, r6
 8000240:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8000244:	f000 fb60 	bl	8000908 <HAL_GPIO_WritePin>
}
 8000248:	b009      	add	sp, #36	; 0x24
 800024a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 800024c:	f042 0202 	orr.w	r2, r2, #2
 8000250:	64da      	str	r2, [r3, #76]	; 0x4c
 8000252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000254:	f003 0302 	and.w	r3, r3, #2
 8000258:	9302      	str	r3, [sp, #8]
 800025a:	9b02      	ldr	r3, [sp, #8]
 800025c:	e7de      	b.n	800021c <BSP_LED_Init+0x1c>
 800025e:	bf00      	nop
 8000260:	40021000 	.word	0x40021000
 8000264:	08001550 	.word	0x08001550
 8000268:	20000000 	.word	0x20000000

0800026c <BSP_LED_On>:
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <BSP_LED_On+0x14>)
 800026e:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8000272:	4b04      	ldr	r3, [pc, #16]	; (8000284 <BSP_LED_On+0x18>)
 8000274:	2201      	movs	r2, #1
 8000276:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800027a:	f000 bb45 	b.w	8000908 <HAL_GPIO_WritePin>
 800027e:	bf00      	nop
 8000280:	08001550 	.word	0x08001550
 8000284:	20000000 	.word	0x20000000

08000288 <BSP_LED_Toggle>:
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000288:	4b03      	ldr	r3, [pc, #12]	; (8000298 <BSP_LED_Toggle+0x10>)
 800028a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800028e:	4b03      	ldr	r3, [pc, #12]	; (800029c <BSP_LED_Toggle+0x14>)
 8000290:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000294:	f000 bb3d 	b.w	8000912 <HAL_GPIO_TogglePin>
 8000298:	08001550 	.word	0x08001550
 800029c:	20000000 	.word	0x20000000

080002a0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002a0:	490f      	ldr	r1, [pc, #60]	; (80002e0 <SystemInit+0x40>)
 80002a2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80002a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80002ae:	4b0d      	ldr	r3, [pc, #52]	; (80002e4 <SystemInit+0x44>)
 80002b0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80002b2:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80002b4:	f042 0201 	orr.w	r2, r2, #1
 80002b8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80002ba:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80002c2:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80002c6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80002c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80002cc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80002d4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80002d6:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80002d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80002dc:	608b      	str	r3, [r1, #8]
#endif
}
 80002de:	4770      	bx	lr
 80002e0:	e000ed00 	.word	0xe000ed00
 80002e4:	40021000 	.word	0x40021000

080002e8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80002e8:	4770      	bx	lr
	...

080002ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002ec:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80002ee:	4e0f      	ldr	r6, [pc, #60]	; (800032c <HAL_InitTick+0x40>)
{
 80002f0:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 80002f2:	6830      	ldr	r0, [r6, #0]
 80002f4:	b908      	cbnz	r0, 80002fa <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80002f6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80002f8:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80002fa:	4a0d      	ldr	r2, [pc, #52]	; (8000330 <HAL_InitTick+0x44>)
 80002fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000300:	fbb3 f3f0 	udiv	r3, r3, r0
 8000304:	6810      	ldr	r0, [r2, #0]
 8000306:	fbb0 f0f3 	udiv	r0, r0, r3
 800030a:	f000 f8ad 	bl	8000468 <HAL_SYSTICK_Config>
 800030e:	4604      	mov	r4, r0
 8000310:	2800      	cmp	r0, #0
 8000312:	d1f0      	bne.n	80002f6 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000314:	2d0f      	cmp	r5, #15
 8000316:	d8ee      	bhi.n	80002f6 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000318:	4602      	mov	r2, r0
 800031a:	4629      	mov	r1, r5
 800031c:	f04f 30ff 	mov.w	r0, #4294967295
 8000320:	f000 f860 	bl	80003e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000324:	6075      	str	r5, [r6, #4]
 8000326:	4620      	mov	r0, r4
 8000328:	e7e6      	b.n	80002f8 <HAL_InitTick+0xc>
 800032a:	bf00      	nop
 800032c:	20000014 	.word	0x20000014
 8000330:	20000010 	.word	0x20000010

08000334 <HAL_Init>:
{
 8000334:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000336:	2003      	movs	r0, #3
 8000338:	f000 f842 	bl	80003c0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800033c:	200f      	movs	r0, #15
 800033e:	f7ff ffd5 	bl	80002ec <HAL_InitTick>
 8000342:	4604      	mov	r4, r0
 8000344:	b918      	cbnz	r0, 800034e <HAL_Init+0x1a>
    HAL_MspInit();
 8000346:	f7ff ffcf 	bl	80002e8 <HAL_MspInit>
}
 800034a:	4620      	mov	r0, r4
 800034c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800034e:	2401      	movs	r4, #1
 8000350:	e7fb      	b.n	800034a <HAL_Init+0x16>
	...

08000354 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <HAL_IncTick+0x10>)
 8000356:	4904      	ldr	r1, [pc, #16]	; (8000368 <HAL_IncTick+0x14>)
 8000358:	6813      	ldr	r3, [r2, #0]
 800035a:	6809      	ldr	r1, [r1, #0]
 800035c:	440b      	add	r3, r1
 800035e:	6013      	str	r3, [r2, #0]
}
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	200000c4 	.word	0x200000c4
 8000368:	20000014 	.word	0x20000014

0800036c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800036c:	4b01      	ldr	r3, [pc, #4]	; (8000374 <HAL_GetTick+0x8>)
 800036e:	6818      	ldr	r0, [r3, #0]
}
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	200000c4 	.word	0x200000c4

08000378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000378:	b538      	push	{r3, r4, r5, lr}
 800037a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800037c:	f7ff fff6 	bl	800036c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000380:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000382:	bf1c      	itt	ne
 8000384:	4b05      	ldrne	r3, [pc, #20]	; (800039c <HAL_Delay+0x24>)
 8000386:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000388:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800038a:	bf18      	it	ne
 800038c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800038e:	f7ff ffed 	bl	800036c <HAL_GetTick>
 8000392:	1b40      	subs	r0, r0, r5
 8000394:	42a0      	cmp	r0, r4
 8000396:	d3fa      	bcc.n	800038e <HAL_Delay+0x16>
  {
  }
}
 8000398:	bd38      	pop	{r3, r4, r5, pc}
 800039a:	bf00      	nop
 800039c:	20000014 	.word	0x20000014

080003a0 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80003a0:	4a02      	ldr	r2, [pc, #8]	; (80003ac <HAL_SuspendTick+0xc>)
 80003a2:	6813      	ldr	r3, [r2, #0]
 80003a4:	f023 0302 	bic.w	r3, r3, #2
 80003a8:	6013      	str	r3, [r2, #0]
}
 80003aa:	4770      	bx	lr
 80003ac:	e000e010 	.word	0xe000e010

080003b0 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80003b0:	4a02      	ldr	r2, [pc, #8]	; (80003bc <HAL_ResumeTick+0xc>)
 80003b2:	6813      	ldr	r3, [r2, #0]
 80003b4:	f043 0302 	orr.w	r3, r3, #2
 80003b8:	6013      	str	r3, [r2, #0]
}
 80003ba:	4770      	bx	lr
 80003bc:	e000e010 	.word	0xe000e010

080003c0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003c0:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80003c2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80003c8:	041b      	lsls	r3, r3, #16
 80003ca:	0c1b      	lsrs	r3, r3, #16
 80003cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80003d0:	0200      	lsls	r0, r0, #8
 80003d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003d6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80003da:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80003dc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80003de:	4770      	bx	lr
 80003e0:	e000ed00 	.word	0xe000ed00

080003e4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003e4:	4b17      	ldr	r3, [pc, #92]	; (8000444 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003e6:	b570      	push	{r4, r5, r6, lr}
 80003e8:	68dc      	ldr	r4, [r3, #12]
 80003ea:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003ee:	f1c4 0507 	rsb	r5, r4, #7
 80003f2:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003f4:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003f8:	bf28      	it	cs
 80003fa:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003fc:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000400:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000402:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000406:	bf8c      	ite	hi
 8000408:	3c03      	subhi	r4, #3
 800040a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800040c:	ea21 0303 	bic.w	r3, r1, r3
 8000410:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000412:	fa06 f404 	lsl.w	r4, r6, r4
 8000416:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800041a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800041c:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000420:	bfa8      	it	ge
 8000422:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8000426:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800042a:	bfbc      	itt	lt
 800042c:	f000 000f 	andlt.w	r0, r0, #15
 8000430:	4a05      	ldrlt	r2, [pc, #20]	; (8000448 <HAL_NVIC_SetPriority+0x64>)
 8000432:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000434:	bfaa      	itet	ge
 8000436:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800043a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800043c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000440:	bd70      	pop	{r4, r5, r6, pc}
 8000442:	bf00      	nop
 8000444:	e000ed00 	.word	0xe000ed00
 8000448:	e000ed14 	.word	0xe000ed14

0800044c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800044c:	2800      	cmp	r0, #0
 800044e:	db08      	blt.n	8000462 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000450:	0942      	lsrs	r2, r0, #5
 8000452:	2301      	movs	r3, #1
 8000454:	f000 001f 	and.w	r0, r0, #31
 8000458:	fa03 f000 	lsl.w	r0, r3, r0
 800045c:	4b01      	ldr	r3, [pc, #4]	; (8000464 <HAL_NVIC_EnableIRQ+0x18>)
 800045e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000462:	4770      	bx	lr
 8000464:	e000e100 	.word	0xe000e100

08000468 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000468:	3801      	subs	r0, #1
 800046a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800046e:	d20a      	bcs.n	8000486 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000472:	4a07      	ldr	r2, [pc, #28]	; (8000490 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000474:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000476:	21f0      	movs	r1, #240	; 0xf0
 8000478:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800047c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800047e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000480:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000486:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	e000e010 	.word	0xe000e010
 8000490:	e000ed00 	.word	0xe000ed00

08000494 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000494:	b570      	push	{r4, r5, r6, lr}
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000496:	e9d0 4513 	ldrd	r4, r5, [r0, #76]	; 0x4c
 800049a:	6065      	str	r5, [r4, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800049c:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800049e:	b114      	cbz	r4, 80004a6 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80004a0:	e9d0 4516 	ldrd	r4, r5, [r0, #88]	; 0x58
 80004a4:	6065      	str	r5, [r4, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80004a6:	e9d0 6410 	ldrd	r6, r4, [r0, #64]	; 0x40
 80004aa:	f004 051c 	and.w	r5, r4, #28
 80004ae:	2401      	movs	r4, #1
 80004b0:	40ac      	lsls	r4, r5
 80004b2:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80004b4:	6804      	ldr	r4, [r0, #0]
 80004b6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80004b8:	6883      	ldr	r3, [r0, #8]
 80004ba:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80004bc:	bf0b      	itete	eq
 80004be:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80004c0:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80004c2:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80004c4:	60e2      	strne	r2, [r4, #12]
  }
}
 80004c6:	bd70      	pop	{r4, r5, r6, pc}

080004c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80004c8:	4910      	ldr	r1, [pc, #64]	; (800050c <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 80004ca:	6803      	ldr	r3, [r0, #0]
 80004cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80004ce:	428b      	cmp	r3, r1
 80004d0:	f022 0203 	bic.w	r2, r2, #3
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80004d4:	bf95      	itete	ls
 80004d6:	f102 4280 	addls.w	r2, r2, #1073741824	; 0x40000000
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80004da:	490d      	ldrhi	r1, [pc, #52]	; (8000510 <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80004dc:	f502 3202 	addls.w	r2, r2, #133120	; 0x20800
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80004e0:	1889      	addhi	r1, r1, r2
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80004e2:	bf98      	it	ls
 80004e4:	6482      	strls	r2, [r0, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80004e6:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80004e8:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 80004ea:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80004ec:	f1a3 0308 	sub.w	r3, r3, #8
 80004f0:	f04f 0214 	mov.w	r2, #20
 80004f4:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1CU);
 80004f8:	f04f 0201 	mov.w	r2, #1
 80004fc:	f003 031c 	and.w	r3, r3, #28
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8000504:	bf88      	it	hi
 8000506:	6481      	strhi	r1, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1CU);
 8000508:	6503      	str	r3, [r0, #80]	; 0x50
}
 800050a:	4770      	bx	lr
 800050c:	40020407 	.word	0x40020407
 8000510:	4002081c 	.word	0x4002081c
 8000514:	40020880 	.word	0x40020880

08000518 <HAL_DMA_Init>:
{
 8000518:	b510      	push	{r4, lr}
  if(hdma == NULL)
 800051a:	4604      	mov	r4, r0
 800051c:	2800      	cmp	r0, #0
 800051e:	d05d      	beq.n	80005dc <HAL_DMA_Init+0xc4>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000520:	6801      	ldr	r1, [r0, #0]
 8000522:	4b2f      	ldr	r3, [pc, #188]	; (80005e0 <HAL_DMA_Init+0xc8>)
 8000524:	4299      	cmp	r1, r3
 8000526:	f04f 0014 	mov.w	r0, #20
 800052a:	d84a      	bhi.n	80005c2 <HAL_DMA_Init+0xaa>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800052c:	4a2d      	ldr	r2, [pc, #180]	; (80005e4 <HAL_DMA_Init+0xcc>)
 800052e:	440a      	add	r2, r1
 8000530:	fbb2 f2f0 	udiv	r2, r2, r0
 8000534:	0092      	lsls	r2, r2, #2
 8000536:	6462      	str	r2, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000538:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 800053c:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800053e:	2302      	movs	r3, #2
 8000540:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8000544:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8000548:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800054a:	6920      	ldr	r0, [r4, #16]
  tmp = hdma->Instance->CCR;
 800054c:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800054e:	4303      	orrs	r3, r0
 8000550:	6960      	ldr	r0, [r4, #20]
 8000552:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000554:	69a0      	ldr	r0, [r4, #24]
 8000556:	4303      	orrs	r3, r0
 8000558:	69e0      	ldr	r0, [r4, #28]
 800055a:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800055c:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800055e:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8000562:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8000566:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8000568:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 800056a:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800056c:	4620      	mov	r0, r4
 800056e:	f7ff ffab 	bl	80004c8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000572:	68a3      	ldr	r3, [r4, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000574:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000576:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800057a:	bf04      	itt	eq
 800057c:	2300      	moveq	r3, #0
 800057e:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000580:	6862      	ldr	r2, [r4, #4]
 8000582:	b2d3      	uxtb	r3, r2
 8000584:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000586:	e9d4 1013 	ldrd	r1, r0, [r4, #76]	; 0x4c
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800058a:	3a01      	subs	r2, #1
 800058c:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800058e:	6048      	str	r0, [r1, #4]
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000590:	d81f      	bhi.n	80005d2 <HAL_DMA_Init+0xba>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000592:	4a15      	ldr	r2, [pc, #84]	; (80005e8 <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000594:	4815      	ldr	r0, [pc, #84]	; (80005ec <HAL_DMA_Init+0xd4>)
 8000596:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000598:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800059a:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800059c:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800059e:	2101      	movs	r1, #1
 80005a0:	f003 0303 	and.w	r3, r3, #3
 80005a4:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80005a8:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80005aa:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80005ac:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80005ae:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80005b0:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80005b2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80005b4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80005b6:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80005b8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 80005bc:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
 80005c0:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <HAL_DMA_Init+0xd8>)
 80005c4:	440b      	add	r3, r1
 80005c6:	fbb3 f3f0 	udiv	r3, r3, r0
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <HAL_DMA_Init+0xdc>)
 80005d0:	e7b4      	b.n	800053c <HAL_DMA_Init+0x24>
    hdma->DMAmuxRequestGen = 0U;
 80005d2:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 80005d4:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80005d8:	65e3      	str	r3, [r4, #92]	; 0x5c
 80005da:	e7ea      	b.n	80005b2 <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 80005dc:	2001      	movs	r0, #1
 80005de:	e7ef      	b.n	80005c0 <HAL_DMA_Init+0xa8>
 80005e0:	40020407 	.word	0x40020407
 80005e4:	bffdfff8 	.word	0xbffdfff8
 80005e8:	1000823f 	.word	0x1000823f
 80005ec:	40020940 	.word	0x40020940
 80005f0:	bffdfbf8 	.word	0xbffdfbf8
 80005f4:	40020400 	.word	0x40020400

080005f8 <HAL_DMA_Start_IT>:
{
 80005f8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80005fa:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 80005fe:	2d01      	cmp	r5, #1
{
 8000600:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8000602:	d039      	beq.n	8000678 <HAL_DMA_Start_IT+0x80>
 8000604:	2501      	movs	r5, #1
 8000606:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 800060a:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 800060e:	2d01      	cmp	r5, #1
 8000610:	f04f 0600 	mov.w	r6, #0
 8000614:	f04f 0502 	mov.w	r5, #2
 8000618:	d12c      	bne.n	8000674 <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 800061a:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800061e:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8000620:	6806      	ldr	r6, [r0, #0]
 8000622:	6835      	ldr	r5, [r6, #0]
 8000624:	f025 0501 	bic.w	r5, r5, #1
 8000628:	6035      	str	r5, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800062a:	f7ff ff33 	bl	8000494 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 800062e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000630:	6803      	ldr	r3, [r0, #0]
 8000632:	b1ba      	cbz	r2, 8000664 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	f042 020e 	orr.w	r2, r2, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800063a:	601a      	str	r2, [r3, #0]
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800063c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800063e:	6811      	ldr	r1, [r2, #0]
 8000640:	03c9      	lsls	r1, r1, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000642:	bf42      	ittt	mi
 8000644:	6811      	ldrmi	r1, [r2, #0]
 8000646:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 800064a:	6011      	strmi	r1, [r2, #0]
    if(hdma->DMAmuxRequestGen != 0U)
 800064c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800064e:	b11a      	cbz	r2, 8000658 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000650:	6811      	ldr	r1, [r2, #0]
 8000652:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000656:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	f042 0201 	orr.w	r2, r2, #1
 800065e:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000660:	2000      	movs	r0, #0
}
 8000662:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	f022 0204 	bic.w	r2, r2, #4
 800066a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	f042 020a 	orr.w	r2, r2, #10
 8000672:	e7e2      	b.n	800063a <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 8000674:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8000678:	2002      	movs	r0, #2
 800067a:	e7f2      	b.n	8000662 <HAL_DMA_Start_IT+0x6a>

0800067c <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800067c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800067e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8000680:	6803      	ldr	r3, [r0, #0]
{
 8000682:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000684:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000688:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800068a:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800068c:	2404      	movs	r4, #4
 800068e:	4094      	lsls	r4, r2
 8000690:	4234      	tst	r4, r6
 8000692:	d00e      	beq.n	80006b2 <HAL_DMA_IRQHandler+0x36>
 8000694:	f015 0f04 	tst.w	r5, #4
 8000698:	d00b      	beq.n	80006b2 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800069e:	bf5e      	ittt	pl
 80006a0:	681a      	ldrpl	r2, [r3, #0]
 80006a2:	f022 0204 	bicpl.w	r2, r2, #4
 80006a6:	601a      	strpl	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80006a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80006aa:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 80006ac:	b373      	cbz	r3, 800070c <HAL_DMA_IRQHandler+0x90>
}
 80006ae:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80006b0:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80006b2:	2402      	movs	r4, #2
 80006b4:	4094      	lsls	r4, r2
 80006b6:	4234      	tst	r4, r6
 80006b8:	d012      	beq.n	80006e0 <HAL_DMA_IRQHandler+0x64>
 80006ba:	f015 0f02 	tst.w	r5, #2
 80006be:	d00f      	beq.n	80006e0 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	0695      	lsls	r5, r2, #26
 80006c4:	d406      	bmi.n	80006d4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	f022 020a 	bic.w	r2, r2, #10
 80006cc:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80006ce:	2301      	movs	r3, #1
 80006d0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80006d4:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80006d6:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 80006d8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 80006dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80006de:	e7e5      	b.n	80006ac <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80006e0:	2408      	movs	r4, #8
 80006e2:	4094      	lsls	r4, r2
 80006e4:	4234      	tst	r4, r6
 80006e6:	d011      	beq.n	800070c <HAL_DMA_IRQHandler+0x90>
 80006e8:	072c      	lsls	r4, r5, #28
 80006ea:	d50f      	bpl.n	800070c <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80006ec:	681c      	ldr	r4, [r3, #0]
 80006ee:	f024 040e 	bic.w	r4, r4, #14
 80006f2:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80006f4:	2301      	movs	r3, #1
 80006f6:	fa03 f202 	lsl.w	r2, r3, r2
 80006fa:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80006fc:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80006fe:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000702:	2300      	movs	r3, #0
 8000704:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8000708:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800070a:	e7cf      	b.n	80006ac <HAL_DMA_IRQHandler+0x30>
}
 800070c:	bc70      	pop	{r4, r5, r6}
 800070e:	4770      	bx	lr

08000710 <HAL_DMA_RegisterCallback>:
  __HAL_LOCK(hdma);
 8000710:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000714:	2b01      	cmp	r3, #1
{
 8000716:	b510      	push	{r4, lr}
 8000718:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800071a:	d01a      	beq.n	8000752 <HAL_DMA_RegisterCallback+0x42>
 800071c:	2301      	movs	r3, #1
 800071e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8000722:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
 8000726:	4298      	cmp	r0, r3
 8000728:	d111      	bne.n	800074e <HAL_DMA_RegisterCallback+0x3e>
    switch (CallbackID)
 800072a:	2903      	cmp	r1, #3
 800072c:	d80f      	bhi.n	800074e <HAL_DMA_RegisterCallback+0x3e>
 800072e:	e8df f001 	tbb	[pc, r1]
 8000732:	0802      	.short	0x0802
 8000734:	0c0a      	.short	0x0c0a
           hdma->XferCpltCallback = pCallback;
 8000736:	62e2      	str	r2, [r4, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 8000738:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdma);
 800073a:	2300      	movs	r3, #0
 800073c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8000740:	bd10      	pop	{r4, pc}
           hdma->XferHalfCpltCallback = pCallback;
 8000742:	6322      	str	r2, [r4, #48]	; 0x30
 8000744:	e7f8      	b.n	8000738 <HAL_DMA_RegisterCallback+0x28>
           hdma->XferErrorCallback = pCallback;
 8000746:	6362      	str	r2, [r4, #52]	; 0x34
 8000748:	e7f6      	b.n	8000738 <HAL_DMA_RegisterCallback+0x28>
           hdma->XferAbortCallback = pCallback;
 800074a:	63a2      	str	r2, [r4, #56]	; 0x38
 800074c:	e7f4      	b.n	8000738 <HAL_DMA_RegisterCallback+0x28>
           status = HAL_ERROR;
 800074e:	2001      	movs	r0, #1
 8000750:	e7f3      	b.n	800073a <HAL_DMA_RegisterCallback+0x2a>
  __HAL_LOCK(hdma);
 8000752:	2002      	movs	r0, #2
 8000754:	e7f4      	b.n	8000740 <HAL_DMA_RegisterCallback+0x30>
	...

08000758 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800075c:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000760:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000904 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000764:	4a65      	ldr	r2, [pc, #404]	; (80008fc <HAL_GPIO_Init+0x1a4>)
  uint32_t position = 0x00u;
 8000766:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000768:	fa38 f403 	lsrs.w	r4, r8, r3
 800076c:	d102      	bne.n	8000774 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800076e:	b003      	add	sp, #12
 8000770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000774:	f04f 0c01 	mov.w	ip, #1
 8000778:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800077c:	ea1c 0608 	ands.w	r6, ip, r8
 8000780:	f000 80ab 	beq.w	80008da <HAL_GPIO_Init+0x182>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000784:	684c      	ldr	r4, [r1, #4]
 8000786:	f024 0710 	bic.w	r7, r4, #16
 800078a:	2f02      	cmp	r7, #2
 800078c:	d116      	bne.n	80007bc <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 800078e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000792:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000796:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800079a:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800079e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007a2:	f04f 0e0f 	mov.w	lr, #15
 80007a6:	fa0e fe0b 	lsl.w	lr, lr, fp
 80007aa:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80007ae:	690d      	ldr	r5, [r1, #16]
 80007b0:	fa05 f50b 	lsl.w	r5, r5, fp
 80007b4:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 80007b8:	f8ca 5020 	str.w	r5, [sl, #32]
 80007bc:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80007c0:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80007c2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80007c6:	fa05 f50a 	lsl.w	r5, r5, sl
 80007ca:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80007cc:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80007d0:	ea05 0b0b 	and.w	fp, r5, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80007d4:	fa0e fe0a 	lsl.w	lr, lr, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007d8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80007da:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007de:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80007e0:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007e4:	d811      	bhi.n	800080a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80007e6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80007e8:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007ec:	68cf      	ldr	r7, [r1, #12]
 80007ee:	fa07 fe0a 	lsl.w	lr, r7, sl
 80007f2:	ea4e 070b 	orr.w	r7, lr, fp
        GPIOx->OSPEEDR = temp;
 80007f6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80007f8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80007fa:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80007fe:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000802:	409f      	lsls	r7, r3
 8000804:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8000808:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800080a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800080c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800080e:	688f      	ldr	r7, [r1, #8]
 8000810:	fa07 f70a 	lsl.w	r7, r7, sl
 8000814:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000816:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000818:	00e5      	lsls	r5, r4, #3
 800081a:	d55e      	bpl.n	80008da <HAL_GPIO_Init+0x182>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081c:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8000820:	f045 0501 	orr.w	r5, r5, #1
 8000824:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 8000828:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 800082c:	f023 0703 	bic.w	r7, r3, #3
 8000830:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000834:	f005 0501 	and.w	r5, r5, #1
 8000838:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800083c:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800083e:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000844:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000848:	f04f 0e0f 	mov.w	lr, #15
 800084c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000850:	fa0e f50c 	lsl.w	r5, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000854:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000858:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800085c:	d03f      	beq.n	80008de <HAL_GPIO_Init+0x186>
 800085e:	4d28      	ldr	r5, [pc, #160]	; (8000900 <HAL_GPIO_Init+0x1a8>)
 8000860:	42a8      	cmp	r0, r5
 8000862:	d03e      	beq.n	80008e2 <HAL_GPIO_Init+0x18a>
 8000864:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000868:	42a8      	cmp	r0, r5
 800086a:	d03c      	beq.n	80008e6 <HAL_GPIO_Init+0x18e>
 800086c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000870:	42a8      	cmp	r0, r5
 8000872:	d03a      	beq.n	80008ea <HAL_GPIO_Init+0x192>
 8000874:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000878:	42a8      	cmp	r0, r5
 800087a:	d038      	beq.n	80008ee <HAL_GPIO_Init+0x196>
 800087c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000880:	42a8      	cmp	r0, r5
 8000882:	d036      	beq.n	80008f2 <HAL_GPIO_Init+0x19a>
 8000884:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000888:	42a8      	cmp	r0, r5
 800088a:	d034      	beq.n	80008f6 <HAL_GPIO_Init+0x19e>
 800088c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000890:	42a8      	cmp	r0, r5
 8000892:	bf14      	ite	ne
 8000894:	2508      	movne	r5, #8
 8000896:	2507      	moveq	r5, #7
 8000898:	fa05 f50c 	lsl.w	r5, r5, ip
 800089c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 80008a0:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR1;
 80008a2:	6815      	ldr	r5, [r2, #0]
        temp &= ~(iocurrent);
 80008a4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008a6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 80008aa:	bf0c      	ite	eq
 80008ac:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80008ae:	4335      	orrne	r5, r6
        EXTI->IMR1 = temp;
 80008b0:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR1;
 80008b2:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008b4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 80008b8:	bf0c      	ite	eq
 80008ba:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80008bc:	4335      	orrne	r5, r6
        EXTI->EMR1 = temp;
 80008be:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR1;
 80008c0:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008c2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80008c6:	bf0c      	ite	eq
 80008c8:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80008ca:	4335      	orrne	r5, r6
        EXTI->RTSR1 = temp;
 80008cc:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR1;
 80008ce:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008d0:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 80008d2:	bf54      	ite	pl
 80008d4:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80008d6:	4335      	orrmi	r5, r6
        EXTI->FTSR1 = temp;
 80008d8:	60d5      	str	r5, [r2, #12]
    position++;
 80008da:	3301      	adds	r3, #1
 80008dc:	e744      	b.n	8000768 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80008de:	2500      	movs	r5, #0
 80008e0:	e7da      	b.n	8000898 <HAL_GPIO_Init+0x140>
 80008e2:	2501      	movs	r5, #1
 80008e4:	e7d8      	b.n	8000898 <HAL_GPIO_Init+0x140>
 80008e6:	2502      	movs	r5, #2
 80008e8:	e7d6      	b.n	8000898 <HAL_GPIO_Init+0x140>
 80008ea:	2503      	movs	r5, #3
 80008ec:	e7d4      	b.n	8000898 <HAL_GPIO_Init+0x140>
 80008ee:	2504      	movs	r5, #4
 80008f0:	e7d2      	b.n	8000898 <HAL_GPIO_Init+0x140>
 80008f2:	2505      	movs	r5, #5
 80008f4:	e7d0      	b.n	8000898 <HAL_GPIO_Init+0x140>
 80008f6:	2506      	movs	r5, #6
 80008f8:	e7ce      	b.n	8000898 <HAL_GPIO_Init+0x140>
 80008fa:	bf00      	nop
 80008fc:	40010400 	.word	0x40010400
 8000900:	48000400 	.word	0x48000400
 8000904:	40021000 	.word	0x40021000

08000908 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000908:	b10a      	cbz	r2, 800090e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800090a:	6181      	str	r1, [r0, #24]
 800090c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800090e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000910:	4770      	bx	lr

08000912 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000912:	6943      	ldr	r3, [r0, #20]
 8000914:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000916:	bf14      	ite	ne
 8000918:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800091a:	6181      	streq	r1, [r0, #24]
  }
}
 800091c:	4770      	bx	lr
	...

08000920 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8000920:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <HAL_PWR_EnterSLEEPMode+0x38>)
 8000922:	b510      	push	{r4, lr}

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8000924:	695b      	ldr	r3, [r3, #20]
{
 8000926:	460c      	mov	r4, r1
  if (Regulator == PWR_MAINREGULATOR_ON)
 8000928:	b928      	cbnz	r0, 8000936 <HAL_PWR_EnterSLEEPMode+0x16>
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800092a:	059a      	lsls	r2, r3, #22
 800092c:	d507      	bpl.n	800093e <HAL_PWR_EnterSLEEPMode+0x1e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800092e:	f000 f88b 	bl	8000a48 <HAL_PWREx_DisableLowPowerRunMode>
 8000932:	b120      	cbz	r0, 800093e <HAL_PWR_EnterSLEEPMode+0x1e>
    __SEV();
    __WFE();
    __WFE();
  }

}
 8000934:	bd10      	pop	{r4, pc}
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8000936:	059b      	lsls	r3, r3, #22
 8000938:	d401      	bmi.n	800093e <HAL_PWR_EnterSLEEPMode+0x1e>
      HAL_PWREx_EnableLowPowerRunMode();
 800093a:	f000 f87d 	bl	8000a38 <HAL_PWREx_EnableLowPowerRunMode>
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800093e:	4a07      	ldr	r2, [pc, #28]	; (800095c <HAL_PWR_EnterSLEEPMode+0x3c>)
 8000940:	6913      	ldr	r3, [r2, #16]
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8000942:	2c01      	cmp	r4, #1
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000944:	f023 0304 	bic.w	r3, r3, #4
 8000948:	6113      	str	r3, [r2, #16]
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800094a:	d101      	bne.n	8000950 <HAL_PWR_EnterSLEEPMode+0x30>
    __WFI();
 800094c:	bf30      	wfi
 800094e:	e7f1      	b.n	8000934 <HAL_PWR_EnterSLEEPMode+0x14>
    __SEV();
 8000950:	bf40      	sev
    __WFE();
 8000952:	bf20      	wfe
    __WFE();
 8000954:	bf20      	wfe
 8000956:	e7ed      	b.n	8000934 <HAL_PWR_EnterSLEEPMode+0x14>
 8000958:	40007000 	.word	0x40007000
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <HAL_PWREx_GetVoltageRange+0x20>)
 8000962:	6818      	ldr	r0, [r3, #0]
 8000964:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000968:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800096c:	d007      	beq.n	800097e <HAL_PWREx_GetVoltageRange+0x1e>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800096e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000972:	f413 7f80 	tst.w	r3, #256	; 0x100
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000976:	bf14      	ite	ne
 8000978:	f44f 7000 	movne.w	r0, #512	; 0x200
 800097c:	2000      	moveq	r0, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800097e:	4770      	bx	lr
 8000980:	40007000 	.word	0x40007000

08000984 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000984:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <HAL_PWREx_ControlVoltageScaling+0xa8>)

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000986:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000988:	bb28      	cbnz	r0, 80009d6 <HAL_PWREx_ControlVoltageScaling+0x52>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800098a:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 800098e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000992:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000996:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800099a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800099e:	d119      	bne.n	80009d4 <HAL_PWREx_ControlVoltageScaling+0x50>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80009a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009aa:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80009ac:	4a20      	ldr	r2, [pc, #128]	; (8000a30 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80009ae:	6811      	ldr	r1, [r2, #0]
 80009b0:	2232      	movs	r2, #50	; 0x32
 80009b2:	434a      	muls	r2, r1
 80009b4:	491f      	ldr	r1, [pc, #124]	; (8000a34 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80009b6:	fbb2 f2f1 	udiv	r2, r2, r1
 80009ba:	4619      	mov	r1, r3
 80009bc:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80009be:	6958      	ldr	r0, [r3, #20]
 80009c0:	0540      	lsls	r0, r0, #21
 80009c2:	d500      	bpl.n	80009c6 <HAL_PWREx_ControlVoltageScaling+0x42>
 80009c4:	b922      	cbnz	r2, 80009d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80009c6:	694b      	ldr	r3, [r1, #20]
 80009c8:	055b      	lsls	r3, r3, #21
 80009ca:	d52d      	bpl.n	8000a28 <HAL_PWREx_ControlVoltageScaling+0xa4>
      {
        return HAL_TIMEOUT;
 80009cc:	2003      	movs	r0, #3
 80009ce:	4770      	bx	lr
        wait_loop_index--;
 80009d0:	3a01      	subs	r2, #1
 80009d2:	e7f4      	b.n	80009be <HAL_PWREx_ControlVoltageScaling+0x3a>
 80009d4:	4770      	bx	lr
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80009d6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80009da:	d120      	bne.n	8000a1e <HAL_PWREx_ControlVoltageScaling+0x9a>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80009dc:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 80009e0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80009e4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80009e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80009ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80009f0:	d11a      	bne.n	8000a28 <HAL_PWREx_ControlVoltageScaling+0xa4>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80009f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009fc:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80009fe:	4a0c      	ldr	r2, [pc, #48]	; (8000a30 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8000a00:	6811      	ldr	r1, [r2, #0]
 8000a02:	2232      	movs	r2, #50	; 0x32
 8000a04:	434a      	muls	r2, r1
 8000a06:	490b      	ldr	r1, [pc, #44]	; (8000a34 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000a08:	fbb2 f2f1 	udiv	r2, r2, r1
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000a10:	6958      	ldr	r0, [r3, #20]
 8000a12:	0540      	lsls	r0, r0, #21
 8000a14:	d5d7      	bpl.n	80009c6 <HAL_PWREx_ControlVoltageScaling+0x42>
 8000a16:	2a00      	cmp	r2, #0
 8000a18:	d0d5      	beq.n	80009c6 <HAL_PWREx_ControlVoltageScaling+0x42>
      {
        wait_loop_index--;
 8000a1a:	3a01      	subs	r2, #1
 8000a1c:	e7f8      	b.n	8000a10 <HAL_PWREx_ControlVoltageScaling+0x8c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a1e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000a22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a26:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000a28:	2000      	movs	r0, #0
}
 8000a2a:	4770      	bx	lr
 8000a2c:	40007000 	.word	0x40007000
 8000a30:	20000010 	.word	0x20000010
 8000a34:	000f4240 	.word	0x000f4240

08000a38 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8000a38:	4a02      	ldr	r2, [pc, #8]	; (8000a44 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8000a3a:	6813      	ldr	r3, [r2, #0]
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a40:	6013      	str	r3, [r2, #0]
}
 8000a42:	4770      	bx	lr
 8000a44:	40007000 	.word	0x40007000

08000a48 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8000a48:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <HAL_PWREx_DisableLowPowerRunMode+0x38>)
 8000a4a:	6813      	ldr	r3, [r2, #0]
 8000a4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a50:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <HAL_PWREx_DisableLowPowerRunMode+0x3c>)
 8000a54:	6819      	ldr	r1, [r3, #0]
 8000a56:	2332      	movs	r3, #50	; 0x32
 8000a58:	434b      	muls	r3, r1
 8000a5a:	490b      	ldr	r1, [pc, #44]	; (8000a88 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8000a5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a60:	4611      	mov	r1, r2
 8000a62:	3301      	adds	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8000a64:	6950      	ldr	r0, [r2, #20]
 8000a66:	f410 7f00 	tst.w	r0, #512	; 0x200
 8000a6a:	d000      	beq.n	8000a6e <HAL_PWREx_DisableLowPowerRunMode+0x26>
 8000a6c:	b933      	cbnz	r3, 8000a7c <HAL_PWREx_DisableLowPowerRunMode+0x34>
  {
    wait_loop_index--;
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8000a6e:	694b      	ldr	r3, [r1, #20]
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8000a70:	f413 7f00 	tst.w	r3, #512	; 0x200
}
 8000a74:	bf14      	ite	ne
 8000a76:	2003      	movne	r0, #3
 8000a78:	2000      	moveq	r0, #0
 8000a7a:	4770      	bx	lr
    wait_loop_index--;
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	e7f1      	b.n	8000a64 <HAL_PWREx_DisableLowPowerRunMode+0x1c>
 8000a80:	40007000 	.word	0x40007000
 8000a84:	20000010 	.word	0x20000010
 8000a88:	000f4240 	.word	0x000f4240

08000a8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000a8e:	4d1c      	ldr	r5, [pc, #112]	; (8000b00 <RCC_SetFlashLatencyFromMSIRange+0x74>)
 8000a90:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000a92:	00da      	lsls	r2, r3, #3
{
 8000a94:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000a96:	d518      	bpl.n	8000aca <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000a98:	f7ff ff62 	bl	8000960 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a9c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000aa0:	d123      	bne.n	8000aea <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000aa2:	2c80      	cmp	r4, #128	; 0x80
 8000aa4:	d928      	bls.n	8000af8 <RCC_SetFlashLatencyFromMSIRange+0x6c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000aa6:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000aa8:	bf8c      	ite	hi
 8000aaa:	2002      	movhi	r0, #2
 8000aac:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000aae:	4a15      	ldr	r2, [pc, #84]	; (8000b04 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000ab0:	6813      	ldr	r3, [r2, #0]
 8000ab2:	f023 030f 	bic.w	r3, r3, #15
 8000ab6:	4303      	orrs	r3, r0
 8000ab8:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000aba:	6813      	ldr	r3, [r2, #0]
 8000abc:	f003 030f 	and.w	r3, r3, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000ac0:	1a18      	subs	r0, r3, r0
 8000ac2:	bf18      	it	ne
 8000ac4:	2001      	movne	r0, #1
 8000ac6:	b003      	add	sp, #12
 8000ac8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad0:	65ab      	str	r3, [r5, #88]	; 0x58
 8000ad2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	9301      	str	r3, [sp, #4]
 8000ada:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000adc:	f7ff ff40 	bl	8000960 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000ae0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000ae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	65ab      	str	r3, [r5, #88]	; 0x58
 8000ae8:	e7d8      	b.n	8000a9c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange >= RCC_MSIRANGE_8)
 8000aea:	2c7f      	cmp	r4, #127	; 0x7f
 8000aec:	d806      	bhi.n	8000afc <RCC_SetFlashLatencyFromMSIRange+0x70>
      if(msirange == RCC_MSIRANGE_7)
 8000aee:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000af2:	4258      	negs	r0, r3
 8000af4:	4158      	adcs	r0, r3
 8000af6:	e7da      	b.n	8000aae <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000af8:	2000      	movs	r0, #0
 8000afa:	e7d8      	b.n	8000aae <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000afc:	2002      	movs	r0, #2
 8000afe:	e7d6      	b.n	8000aae <RCC_SetFlashLatencyFromMSIRange+0x22>
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40022000 	.word	0x40022000

08000b08 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b08:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000b0a:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b0c:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000b0e:	f012 020c 	ands.w	r2, r2, #12
 8000b12:	d005      	beq.n	8000b20 <HAL_RCC_GetSysClockFreq+0x18>
 8000b14:	2a0c      	cmp	r2, #12
 8000b16:	d115      	bne.n	8000b44 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b18:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000b1c:	2901      	cmp	r1, #1
 8000b1e:	d118      	bne.n	8000b52 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000b20:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000b22:	481d      	ldr	r0, [pc, #116]	; (8000b98 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000b24:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000b26:	bf55      	itete	pl
 8000b28:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000b2c:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000b2e:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000b32:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8000b36:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000b3a:	b34a      	cbz	r2, 8000b90 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000b3c:	2a0c      	cmp	r2, #12
 8000b3e:	d009      	beq.n	8000b54 <HAL_RCC_GetSysClockFreq+0x4c>
 8000b40:	2000      	movs	r0, #0
  return sysclockfreq;
 8000b42:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000b44:	2a04      	cmp	r2, #4
 8000b46:	d022      	beq.n	8000b8e <HAL_RCC_GetSysClockFreq+0x86>
 8000b48:	2a08      	cmp	r2, #8
 8000b4a:	4814      	ldr	r0, [pc, #80]	; (8000b9c <HAL_RCC_GetSysClockFreq+0x94>)
 8000b4c:	bf18      	it	ne
 8000b4e:	2000      	movne	r0, #0
 8000b50:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000b52:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000b54:	68da      	ldr	r2, [r3, #12]
 8000b56:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8000b5a:	2a02      	cmp	r2, #2
 8000b5c:	d015      	beq.n	8000b8a <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 8000b5e:	490f      	ldr	r1, [pc, #60]	; (8000b9c <HAL_RCC_GetSysClockFreq+0x94>)
 8000b60:	2a03      	cmp	r2, #3
 8000b62:	bf08      	it	eq
 8000b64:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000b66:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000b68:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000b70:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000b74:	f3c2 1203 	ubfx	r2, r2, #4, #4
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000b78:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000b7a:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000b7c:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000b7e:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000b80:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8000b84:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b88:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <HAL_RCC_GetSysClockFreq+0x98>)
 8000b8c:	e7eb      	b.n	8000b66 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8000b8e:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40021000 	.word	0x40021000
 8000b98:	0800155c 	.word	0x0800155c
 8000b9c:	007a1200 	.word	0x007a1200
 8000ba0:	00f42400 	.word	0x00f42400

08000ba4 <HAL_RCC_OscConfig>:
{
 8000ba4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8000ba8:	4605      	mov	r5, r0
 8000baa:	b908      	cbnz	r0, 8000bb0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000bac:	2001      	movs	r0, #1
 8000bae:	e047      	b.n	8000c40 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bb0:	4ca8      	ldr	r4, [pc, #672]	; (8000e54 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000bb2:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bb4:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000bb6:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000bb8:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bba:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000bbe:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000bc2:	d573      	bpl.n	8000cac <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000bc4:	b11e      	cbz	r6, 8000bce <HAL_RCC_OscConfig+0x2a>
 8000bc6:	2e0c      	cmp	r6, #12
 8000bc8:	d152      	bne.n	8000c70 <HAL_RCC_OscConfig+0xcc>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000bca:	2f01      	cmp	r7, #1
 8000bcc:	d150      	bne.n	8000c70 <HAL_RCC_OscConfig+0xcc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000bce:	6823      	ldr	r3, [r4, #0]
 8000bd0:	0799      	lsls	r1, r3, #30
 8000bd2:	d502      	bpl.n	8000bda <HAL_RCC_OscConfig+0x36>
 8000bd4:	69ab      	ldr	r3, [r5, #24]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d0e8      	beq.n	8000bac <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000bda:	6823      	ldr	r3, [r4, #0]
 8000bdc:	6a28      	ldr	r0, [r5, #32]
 8000bde:	071a      	lsls	r2, r3, #28
 8000be0:	bf56      	itet	pl
 8000be2:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8000be6:	6823      	ldrmi	r3, [r4, #0]
 8000be8:	091b      	lsrpl	r3, r3, #4
 8000bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bee:	4298      	cmp	r0, r3
 8000bf0:	d929      	bls.n	8000c46 <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000bf2:	f7ff ff4b 	bl	8000a8c <RCC_SetFlashLatencyFromMSIRange>
 8000bf6:	2800      	cmp	r0, #0
 8000bf8:	d1d8      	bne.n	8000bac <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	f043 0308 	orr.w	r3, r3, #8
 8000c00:	6023      	str	r3, [r4, #0]
 8000c02:	6823      	ldr	r3, [r4, #0]
 8000c04:	6a2a      	ldr	r2, [r5, #32]
 8000c06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c0e:	6863      	ldr	r3, [r4, #4]
 8000c10:	69ea      	ldr	r2, [r5, #28]
 8000c12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000c16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c1a:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000c1c:	f7ff ff74 	bl	8000b08 <HAL_RCC_GetSysClockFreq>
 8000c20:	68a3      	ldr	r3, [r4, #8]
 8000c22:	4a8d      	ldr	r2, [pc, #564]	; (8000e58 <HAL_RCC_OscConfig+0x2b4>)
 8000c24:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c28:	5cd3      	ldrb	r3, [r2, r3]
 8000c2a:	f003 031f 	and.w	r3, r3, #31
 8000c2e:	40d8      	lsrs	r0, r3
 8000c30:	4b8a      	ldr	r3, [pc, #552]	; (8000e5c <HAL_RCC_OscConfig+0x2b8>)
 8000c32:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8000c34:	4b8a      	ldr	r3, [pc, #552]	; (8000e60 <HAL_RCC_OscConfig+0x2bc>)
 8000c36:	6818      	ldr	r0, [r3, #0]
 8000c38:	f7ff fb58 	bl	80002ec <HAL_InitTick>
        if(status != HAL_OK)
 8000c3c:	2800      	cmp	r0, #0
 8000c3e:	d035      	beq.n	8000cac <HAL_RCC_OscConfig+0x108>
}
 8000c40:	b003      	add	sp, #12
 8000c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c46:	6823      	ldr	r3, [r4, #0]
 8000c48:	f043 0308 	orr.w	r3, r3, #8
 8000c4c:	6023      	str	r3, [r4, #0]
 8000c4e:	6823      	ldr	r3, [r4, #0]
 8000c50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c54:	4303      	orrs	r3, r0
 8000c56:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c58:	6863      	ldr	r3, [r4, #4]
 8000c5a:	69ea      	ldr	r2, [r5, #28]
 8000c5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000c60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c64:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c66:	f7ff ff11 	bl	8000a8c <RCC_SetFlashLatencyFromMSIRange>
 8000c6a:	2800      	cmp	r0, #0
 8000c6c:	d0d6      	beq.n	8000c1c <HAL_RCC_OscConfig+0x78>
 8000c6e:	e79d      	b.n	8000bac <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000c70:	69ab      	ldr	r3, [r5, #24]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d03a      	beq.n	8000cec <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_MSI_ENABLE();
 8000c76:	6823      	ldr	r3, [r4, #0]
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c7e:	f7ff fb75 	bl	800036c <HAL_GetTick>
 8000c82:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000c84:	6823      	ldr	r3, [r4, #0]
 8000c86:	079b      	lsls	r3, r3, #30
 8000c88:	d528      	bpl.n	8000cdc <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c8a:	6823      	ldr	r3, [r4, #0]
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	6023      	str	r3, [r4, #0]
 8000c92:	6823      	ldr	r3, [r4, #0]
 8000c94:	6a2a      	ldr	r2, [r5, #32]
 8000c96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c9e:	6863      	ldr	r3, [r4, #4]
 8000ca0:	69ea      	ldr	r2, [r5, #28]
 8000ca2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000ca6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000caa:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cac:	682b      	ldr	r3, [r5, #0]
 8000cae:	07d9      	lsls	r1, r3, #31
 8000cb0:	d42d      	bmi.n	8000d0e <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cb2:	682b      	ldr	r3, [r5, #0]
 8000cb4:	079a      	lsls	r2, r3, #30
 8000cb6:	d46b      	bmi.n	8000d90 <HAL_RCC_OscConfig+0x1ec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cb8:	682b      	ldr	r3, [r5, #0]
 8000cba:	0719      	lsls	r1, r3, #28
 8000cbc:	f100 80a0 	bmi.w	8000e00 <HAL_RCC_OscConfig+0x25c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cc0:	682b      	ldr	r3, [r5, #0]
 8000cc2:	075a      	lsls	r2, r3, #29
 8000cc4:	f100 80ce 	bmi.w	8000e64 <HAL_RCC_OscConfig+0x2c0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000cc8:	682b      	ldr	r3, [r5, #0]
 8000cca:	069a      	lsls	r2, r3, #26
 8000ccc:	f100 8137 	bmi.w	8000f3e <HAL_RCC_OscConfig+0x39a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000cd0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	f040 815d 	bne.w	8000f92 <HAL_RCC_OscConfig+0x3ee>
  return HAL_OK;
 8000cd8:	2000      	movs	r0, #0
 8000cda:	e7b1      	b.n	8000c40 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000cdc:	f7ff fb46 	bl	800036c <HAL_GetTick>
 8000ce0:	eba0 0008 	sub.w	r0, r0, r8
 8000ce4:	2802      	cmp	r0, #2
 8000ce6:	d9cd      	bls.n	8000c84 <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 8000ce8:	2003      	movs	r0, #3
 8000cea:	e7a9      	b.n	8000c40 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 8000cec:	6823      	ldr	r3, [r4, #0]
 8000cee:	f023 0301 	bic.w	r3, r3, #1
 8000cf2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cf4:	f7ff fb3a 	bl	800036c <HAL_GetTick>
 8000cf8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000cfa:	6823      	ldr	r3, [r4, #0]
 8000cfc:	0798      	lsls	r0, r3, #30
 8000cfe:	d5d5      	bpl.n	8000cac <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d00:	f7ff fb34 	bl	800036c <HAL_GetTick>
 8000d04:	eba0 0008 	sub.w	r0, r0, r8
 8000d08:	2802      	cmp	r0, #2
 8000d0a:	d9f6      	bls.n	8000cfa <HAL_RCC_OscConfig+0x156>
 8000d0c:	e7ec      	b.n	8000ce8 <HAL_RCC_OscConfig+0x144>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000d0e:	2e08      	cmp	r6, #8
 8000d10:	d003      	beq.n	8000d1a <HAL_RCC_OscConfig+0x176>
 8000d12:	2e0c      	cmp	r6, #12
 8000d14:	d108      	bne.n	8000d28 <HAL_RCC_OscConfig+0x184>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000d16:	2f03      	cmp	r7, #3
 8000d18:	d106      	bne.n	8000d28 <HAL_RCC_OscConfig+0x184>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d1a:	6823      	ldr	r3, [r4, #0]
 8000d1c:	039b      	lsls	r3, r3, #14
 8000d1e:	d5c8      	bpl.n	8000cb2 <HAL_RCC_OscConfig+0x10e>
 8000d20:	686b      	ldr	r3, [r5, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1c5      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x10e>
 8000d26:	e741      	b.n	8000bac <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d28:	686b      	ldr	r3, [r5, #4]
 8000d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d2e:	d110      	bne.n	8000d52 <HAL_RCC_OscConfig+0x1ae>
 8000d30:	6823      	ldr	r3, [r4, #0]
 8000d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d36:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d38:	f7ff fb18 	bl	800036c <HAL_GetTick>
 8000d3c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d3e:	6823      	ldr	r3, [r4, #0]
 8000d40:	0398      	lsls	r0, r3, #14
 8000d42:	d4b6      	bmi.n	8000cb2 <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d44:	f7ff fb12 	bl	800036c <HAL_GetTick>
 8000d48:	eba0 0008 	sub.w	r0, r0, r8
 8000d4c:	2864      	cmp	r0, #100	; 0x64
 8000d4e:	d9f6      	bls.n	8000d3e <HAL_RCC_OscConfig+0x19a>
 8000d50:	e7ca      	b.n	8000ce8 <HAL_RCC_OscConfig+0x144>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d56:	d104      	bne.n	8000d62 <HAL_RCC_OscConfig+0x1be>
 8000d58:	6823      	ldr	r3, [r4, #0]
 8000d5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d5e:	6023      	str	r3, [r4, #0]
 8000d60:	e7e6      	b.n	8000d30 <HAL_RCC_OscConfig+0x18c>
 8000d62:	6822      	ldr	r2, [r4, #0]
 8000d64:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d68:	6022      	str	r2, [r4, #0]
 8000d6a:	6822      	ldr	r2, [r4, #0]
 8000d6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d70:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d1e0      	bne.n	8000d38 <HAL_RCC_OscConfig+0x194>
        tickstart = HAL_GetTick();
 8000d76:	f7ff faf9 	bl	800036c <HAL_GetTick>
 8000d7a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d7c:	6823      	ldr	r3, [r4, #0]
 8000d7e:	0399      	lsls	r1, r3, #14
 8000d80:	d597      	bpl.n	8000cb2 <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d82:	f7ff faf3 	bl	800036c <HAL_GetTick>
 8000d86:	eba0 0008 	sub.w	r0, r0, r8
 8000d8a:	2864      	cmp	r0, #100	; 0x64
 8000d8c:	d9f6      	bls.n	8000d7c <HAL_RCC_OscConfig+0x1d8>
 8000d8e:	e7ab      	b.n	8000ce8 <HAL_RCC_OscConfig+0x144>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000d90:	2e04      	cmp	r6, #4
 8000d92:	d003      	beq.n	8000d9c <HAL_RCC_OscConfig+0x1f8>
 8000d94:	2e0c      	cmp	r6, #12
 8000d96:	d110      	bne.n	8000dba <HAL_RCC_OscConfig+0x216>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000d98:	2f02      	cmp	r7, #2
 8000d9a:	d10e      	bne.n	8000dba <HAL_RCC_OscConfig+0x216>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d9c:	6823      	ldr	r3, [r4, #0]
 8000d9e:	055a      	lsls	r2, r3, #21
 8000da0:	d503      	bpl.n	8000daa <HAL_RCC_OscConfig+0x206>
 8000da2:	68eb      	ldr	r3, [r5, #12]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f43f af01 	beq.w	8000bac <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000daa:	6863      	ldr	r3, [r4, #4]
 8000dac:	692a      	ldr	r2, [r5, #16]
 8000dae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8000db2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000db6:	6063      	str	r3, [r4, #4]
 8000db8:	e77e      	b.n	8000cb8 <HAL_RCC_OscConfig+0x114>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dba:	68eb      	ldr	r3, [r5, #12]
 8000dbc:	b17b      	cbz	r3, 8000dde <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_HSI_ENABLE();
 8000dbe:	6823      	ldr	r3, [r4, #0]
 8000dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000dc6:	f7ff fad1 	bl	800036c <HAL_GetTick>
 8000dca:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000dcc:	6823      	ldr	r3, [r4, #0]
 8000dce:	055b      	lsls	r3, r3, #21
 8000dd0:	d4eb      	bmi.n	8000daa <HAL_RCC_OscConfig+0x206>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dd2:	f7ff facb 	bl	800036c <HAL_GetTick>
 8000dd6:	1bc0      	subs	r0, r0, r7
 8000dd8:	2802      	cmp	r0, #2
 8000dda:	d9f7      	bls.n	8000dcc <HAL_RCC_OscConfig+0x228>
 8000ddc:	e784      	b.n	8000ce8 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_HSI_DISABLE();
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000de4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000de6:	f7ff fac1 	bl	800036c <HAL_GetTick>
 8000dea:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000dec:	6823      	ldr	r3, [r4, #0]
 8000dee:	0558      	lsls	r0, r3, #21
 8000df0:	f57f af62 	bpl.w	8000cb8 <HAL_RCC_OscConfig+0x114>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000df4:	f7ff faba 	bl	800036c <HAL_GetTick>
 8000df8:	1bc0      	subs	r0, r0, r7
 8000dfa:	2802      	cmp	r0, #2
 8000dfc:	d9f6      	bls.n	8000dec <HAL_RCC_OscConfig+0x248>
 8000dfe:	e773      	b.n	8000ce8 <HAL_RCC_OscConfig+0x144>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e00:	696b      	ldr	r3, [r5, #20]
 8000e02:	b19b      	cbz	r3, 8000e2c <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 8000e04:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000e10:	f7ff faac 	bl	800036c <HAL_GetTick>
 8000e14:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e16:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000e1a:	079b      	lsls	r3, r3, #30
 8000e1c:	f53f af50 	bmi.w	8000cc0 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e20:	f7ff faa4 	bl	800036c <HAL_GetTick>
 8000e24:	1bc0      	subs	r0, r0, r7
 8000e26:	2802      	cmp	r0, #2
 8000e28:	d9f5      	bls.n	8000e16 <HAL_RCC_OscConfig+0x272>
 8000e2a:	e75d      	b.n	8000ce8 <HAL_RCC_OscConfig+0x144>
      __HAL_RCC_LSI_DISABLE();
 8000e2c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000e30:	f023 0301 	bic.w	r3, r3, #1
 8000e34:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000e38:	f7ff fa98 	bl	800036c <HAL_GetTick>
 8000e3c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e3e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000e42:	0798      	lsls	r0, r3, #30
 8000e44:	f57f af3c 	bpl.w	8000cc0 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e48:	f7ff fa90 	bl	800036c <HAL_GetTick>
 8000e4c:	1bc0      	subs	r0, r0, r7
 8000e4e:	2802      	cmp	r0, #2
 8000e50:	d9f5      	bls.n	8000e3e <HAL_RCC_OscConfig+0x29a>
 8000e52:	e749      	b.n	8000ce8 <HAL_RCC_OscConfig+0x144>
 8000e54:	40021000 	.word	0x40021000
 8000e58:	0800158c 	.word	0x0800158c
 8000e5c:	20000010 	.word	0x20000010
 8000e60:	20000018 	.word	0x20000018
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000e64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e66:	00d9      	lsls	r1, r3, #3
 8000e68:	d429      	bmi.n	8000ebe <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e70:	65a3      	str	r3, [r4, #88]	; 0x58
 8000e72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e7c:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e80:	4f8d      	ldr	r7, [pc, #564]	; (80010b8 <HAL_RCC_OscConfig+0x514>)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	05da      	lsls	r2, r3, #23
 8000e86:	d51d      	bpl.n	8000ec4 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e88:	68ab      	ldr	r3, [r5, #8]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d12b      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x342>
 8000e8e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000e9a:	f7ff fa67 	bl	800036c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e9e:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ea2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000ea4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000ea8:	0798      	lsls	r0, r3, #30
 8000eaa:	d542      	bpl.n	8000f32 <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8000eac:	f1b8 0f00 	cmp.w	r8, #0
 8000eb0:	f43f af0a 	beq.w	8000cc8 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000eb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000eba:	65a3      	str	r3, [r4, #88]	; 0x58
 8000ebc:	e704      	b.n	8000cc8 <HAL_RCC_OscConfig+0x124>
    FlagStatus       pwrclkchanged = RESET;
 8000ebe:	f04f 0800 	mov.w	r8, #0
 8000ec2:	e7dd      	b.n	8000e80 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eca:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000ecc:	f7ff fa4e 	bl	800036c <HAL_GetTick>
 8000ed0:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	05db      	lsls	r3, r3, #23
 8000ed6:	d4d7      	bmi.n	8000e88 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ed8:	f7ff fa48 	bl	800036c <HAL_GetTick>
 8000edc:	eba0 0009 	sub.w	r0, r0, r9
 8000ee0:	2802      	cmp	r0, #2
 8000ee2:	d9f6      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x32e>
 8000ee4:	e700      	b.n	8000ce8 <HAL_RCC_OscConfig+0x144>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ee6:	2b05      	cmp	r3, #5
 8000ee8:	d106      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x354>
 8000eea:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8000ef6:	e7ca      	b.n	8000e8e <HAL_RCC_OscConfig+0x2ea>
 8000ef8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000efc:	f022 0201 	bic.w	r2, r2, #1
 8000f00:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000f04:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000f08:	f022 0204 	bic.w	r2, r2, #4
 8000f0c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1c2      	bne.n	8000e9a <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8000f14:	f7ff fa2a 	bl	800036c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f18:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000f1c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000f1e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000f22:	0799      	lsls	r1, r3, #30
 8000f24:	d5c2      	bpl.n	8000eac <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f26:	f7ff fa21 	bl	800036c <HAL_GetTick>
 8000f2a:	1bc0      	subs	r0, r0, r7
 8000f2c:	4548      	cmp	r0, r9
 8000f2e:	d9f6      	bls.n	8000f1e <HAL_RCC_OscConfig+0x37a>
 8000f30:	e6da      	b.n	8000ce8 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f32:	f7ff fa1b 	bl	800036c <HAL_GetTick>
 8000f36:	1bc0      	subs	r0, r0, r7
 8000f38:	4548      	cmp	r0, r9
 8000f3a:	d9b3      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x300>
 8000f3c:	e6d4      	b.n	8000ce8 <HAL_RCC_OscConfig+0x144>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000f3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f40:	b19b      	cbz	r3, 8000f6a <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSI48_ENABLE();
 8000f42:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000f4e:	f7ff fa0d 	bl	800036c <HAL_GetTick>
 8000f52:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000f54:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000f58:	079b      	lsls	r3, r3, #30
 8000f5a:	f53f aeb9 	bmi.w	8000cd0 <HAL_RCC_OscConfig+0x12c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f5e:	f7ff fa05 	bl	800036c <HAL_GetTick>
 8000f62:	1bc0      	subs	r0, r0, r7
 8000f64:	2802      	cmp	r0, #2
 8000f66:	d9f5      	bls.n	8000f54 <HAL_RCC_OscConfig+0x3b0>
 8000f68:	e6be      	b.n	8000ce8 <HAL_RCC_OscConfig+0x144>
      __HAL_RCC_HSI48_DISABLE();
 8000f6a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000f6e:	f023 0301 	bic.w	r3, r3, #1
 8000f72:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000f76:	f7ff f9f9 	bl	800036c <HAL_GetTick>
 8000f7a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000f7c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000f80:	0798      	lsls	r0, r3, #30
 8000f82:	f57f aea5 	bpl.w	8000cd0 <HAL_RCC_OscConfig+0x12c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f86:	f7ff f9f1 	bl	800036c <HAL_GetTick>
 8000f8a:	1bc0      	subs	r0, r0, r7
 8000f8c:	2802      	cmp	r0, #2
 8000f8e:	d9f5      	bls.n	8000f7c <HAL_RCC_OscConfig+0x3d8>
 8000f90:	e6aa      	b.n	8000ce8 <HAL_RCC_OscConfig+0x144>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000f92:	2e0c      	cmp	r6, #12
 8000f94:	d05b      	beq.n	800104e <HAL_RCC_OscConfig+0x4aa>
        __HAL_RCC_PLL_DISABLE();
 8000f96:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000f98:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f9e:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000fa0:	d13a      	bne.n	8001018 <HAL_RCC_OscConfig+0x474>
        tickstart = HAL_GetTick();
 8000fa2:	f7ff f9e3 	bl	800036c <HAL_GetTick>
 8000fa6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000fa8:	6823      	ldr	r3, [r4, #0]
 8000faa:	0199      	lsls	r1, r3, #6
 8000fac:	d42e      	bmi.n	800100c <HAL_RCC_OscConfig+0x468>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fae:	68e2      	ldr	r2, [r4, #12]
 8000fb0:	4b42      	ldr	r3, [pc, #264]	; (80010bc <HAL_RCC_OscConfig+0x518>)
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000fba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000fbe:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000fc0:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8000fc4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000fc6:	3a01      	subs	r2, #1
 8000fc8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000fcc:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000fce:	0852      	lsrs	r2, r2, #1
 8000fd0:	3a01      	subs	r2, #1
 8000fd2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8000fd6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000fd8:	0852      	lsrs	r2, r2, #1
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000fe0:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000fe2:	6823      	ldr	r3, [r4, #0]
 8000fe4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fe8:	6023      	str	r3, [r4, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000fea:	68e3      	ldr	r3, [r4, #12]
 8000fec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ff0:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000ff2:	f7ff f9bb 	bl	800036c <HAL_GetTick>
 8000ff6:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ff8:	6823      	ldr	r3, [r4, #0]
 8000ffa:	019a      	lsls	r2, r3, #6
 8000ffc:	f53f ae6c 	bmi.w	8000cd8 <HAL_RCC_OscConfig+0x134>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001000:	f7ff f9b4 	bl	800036c <HAL_GetTick>
 8001004:	1b40      	subs	r0, r0, r5
 8001006:	2802      	cmp	r0, #2
 8001008:	d9f6      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x454>
 800100a:	e66d      	b.n	8000ce8 <HAL_RCC_OscConfig+0x144>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800100c:	f7ff f9ae 	bl	800036c <HAL_GetTick>
 8001010:	1b80      	subs	r0, r0, r6
 8001012:	2802      	cmp	r0, #2
 8001014:	d9c8      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x404>
 8001016:	e667      	b.n	8000ce8 <HAL_RCC_OscConfig+0x144>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001018:	6823      	ldr	r3, [r4, #0]
 800101a:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800101e:	bf02      	ittt	eq
 8001020:	68e3      	ldreq	r3, [r4, #12]
 8001022:	f023 0303 	biceq.w	r3, r3, #3
 8001026:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001028:	68e3      	ldr	r3, [r4, #12]
 800102a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800102e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001032:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001034:	f7ff f99a 	bl	800036c <HAL_GetTick>
 8001038:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800103a:	6823      	ldr	r3, [r4, #0]
 800103c:	019b      	lsls	r3, r3, #6
 800103e:	f57f ae4b 	bpl.w	8000cd8 <HAL_RCC_OscConfig+0x134>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001042:	f7ff f993 	bl	800036c <HAL_GetTick>
 8001046:	1b40      	subs	r0, r0, r5
 8001048:	2802      	cmp	r0, #2
 800104a:	d9f6      	bls.n	800103a <HAL_RCC_OscConfig+0x496>
 800104c:	e64c      	b.n	8000ce8 <HAL_RCC_OscConfig+0x144>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800104e:	2801      	cmp	r0, #1
 8001050:	f43f adf6 	beq.w	8000c40 <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 8001054:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001056:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001058:	f003 0103 	and.w	r1, r3, #3
 800105c:	4291      	cmp	r1, r2
 800105e:	f47f ada5 	bne.w	8000bac <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001062:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001064:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001068:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800106a:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800106e:	f47f ad9d 	bne.w	8000bac <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001072:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8001074:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001078:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800107c:	f47f ad96 	bne.w	8000bac <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001080:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8001082:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001086:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800108a:	f47f ad8f 	bne.w	8000bac <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800108e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001090:	0852      	lsrs	r2, r2, #1
 8001092:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001096:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001098:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800109c:	f47f ad86 	bne.w	8000bac <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80010a0:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80010a2:	0852      	lsrs	r2, r2, #1
 80010a4:	3a01      	subs	r2, #1
 80010a6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80010aa:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 80010ae:	bf14      	ite	ne
 80010b0:	2001      	movne	r0, #1
 80010b2:	2000      	moveq	r0, #0
 80010b4:	e5c4      	b.n	8000c40 <HAL_RCC_OscConfig+0x9c>
 80010b6:	bf00      	nop
 80010b8:	40007000 	.word	0x40007000
 80010bc:	019d800c 	.word	0x019d800c

080010c0 <HAL_RCC_ClockConfig>:
{
 80010c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010c4:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80010c6:	4605      	mov	r5, r0
 80010c8:	b910      	cbnz	r0, 80010d0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80010ca:	2001      	movs	r0, #1
}
 80010cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010d0:	4a6f      	ldr	r2, [pc, #444]	; (8001290 <HAL_RCC_ClockConfig+0x1d0>)
 80010d2:	6813      	ldr	r3, [r2, #0]
 80010d4:	f003 030f 	and.w	r3, r3, #15
 80010d8:	428b      	cmp	r3, r1
 80010da:	d335      	bcc.n	8001148 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010dc:	6829      	ldr	r1, [r5, #0]
 80010de:	f011 0701 	ands.w	r7, r1, #1
 80010e2:	d13c      	bne.n	800115e <HAL_RCC_ClockConfig+0x9e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010e4:	682a      	ldr	r2, [r5, #0]
 80010e6:	0791      	lsls	r1, r2, #30
 80010e8:	f140 80b7 	bpl.w	800125a <HAL_RCC_ClockConfig+0x19a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010ec:	4969      	ldr	r1, [pc, #420]	; (8001294 <HAL_RCC_ClockConfig+0x1d4>)
 80010ee:	68a8      	ldr	r0, [r5, #8]
 80010f0:	688b      	ldr	r3, [r1, #8]
 80010f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010f6:	4303      	orrs	r3, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80010f8:	608b      	str	r3, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010fa:	4965      	ldr	r1, [pc, #404]	; (8001290 <HAL_RCC_ClockConfig+0x1d0>)
 80010fc:	680b      	ldr	r3, [r1, #0]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	42b3      	cmp	r3, r6
 8001104:	f200 80b1 	bhi.w	800126a <HAL_RCC_ClockConfig+0x1aa>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001108:	f012 0f04 	tst.w	r2, #4
 800110c:	4c61      	ldr	r4, [pc, #388]	; (8001294 <HAL_RCC_ClockConfig+0x1d4>)
 800110e:	f040 80b8 	bne.w	8001282 <HAL_RCC_ClockConfig+0x1c2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001112:	0713      	lsls	r3, r2, #28
 8001114:	d506      	bpl.n	8001124 <HAL_RCC_ClockConfig+0x64>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001116:	68a3      	ldr	r3, [r4, #8]
 8001118:	692a      	ldr	r2, [r5, #16]
 800111a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800111e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001122:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001124:	f7ff fcf0 	bl	8000b08 <HAL_RCC_GetSysClockFreq>
 8001128:	68a3      	ldr	r3, [r4, #8]
 800112a:	4a5b      	ldr	r2, [pc, #364]	; (8001298 <HAL_RCC_ClockConfig+0x1d8>)
 800112c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001130:	5cd3      	ldrb	r3, [r2, r3]
 8001132:	f003 031f 	and.w	r3, r3, #31
 8001136:	40d8      	lsrs	r0, r3
 8001138:	4b58      	ldr	r3, [pc, #352]	; (800129c <HAL_RCC_ClockConfig+0x1dc>)
 800113a:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800113c:	4b58      	ldr	r3, [pc, #352]	; (80012a0 <HAL_RCC_ClockConfig+0x1e0>)
 800113e:	6818      	ldr	r0, [r3, #0]
}
 8001140:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick(uwTickPrio);
 8001144:	f7ff b8d2 	b.w	80002ec <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001148:	6813      	ldr	r3, [r2, #0]
 800114a:	f023 030f 	bic.w	r3, r3, #15
 800114e:	430b      	orrs	r3, r1
 8001150:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001152:	6813      	ldr	r3, [r2, #0]
 8001154:	f003 030f 	and.w	r3, r3, #15
 8001158:	428b      	cmp	r3, r1
 800115a:	d1b6      	bne.n	80010ca <HAL_RCC_ClockConfig+0xa>
 800115c:	e7be      	b.n	80010dc <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800115e:	686b      	ldr	r3, [r5, #4]
 8001160:	4c4c      	ldr	r4, [pc, #304]	; (8001294 <HAL_RCC_ClockConfig+0x1d4>)
 8001162:	2b03      	cmp	r3, #3
 8001164:	d163      	bne.n	800122e <HAL_RCC_ClockConfig+0x16e>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001166:	6823      	ldr	r3, [r4, #0]
 8001168:	019b      	lsls	r3, r3, #6
 800116a:	d5ae      	bpl.n	80010ca <HAL_RCC_ClockConfig+0xa>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800116c:	68e3      	ldr	r3, [r4, #12]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	2b01      	cmp	r3, #1
 8001174:	d145      	bne.n	8001202 <HAL_RCC_ClockConfig+0x142>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001176:	6823      	ldr	r3, [r4, #0]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001178:	4a4a      	ldr	r2, [pc, #296]	; (80012a4 <HAL_RCC_ClockConfig+0x1e4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800117a:	071f      	lsls	r7, r3, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800117c:	bf55      	itete	pl
 800117e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001182:	6823      	ldrmi	r3, [r4, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001184:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001188:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    msirange = MSIRangeTable[msirange];
 800118c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001190:	68e2      	ldr	r2, [r4, #12]
 8001192:	f002 0203 	and.w	r2, r2, #3

  switch (pllsource)
 8001196:	2a02      	cmp	r2, #2
 8001198:	d035      	beq.n	8001206 <HAL_RCC_ClockConfig+0x146>
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
    break;

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800119a:	4843      	ldr	r0, [pc, #268]	; (80012a8 <HAL_RCC_ClockConfig+0x1e8>)
 800119c:	2a03      	cmp	r2, #3
 800119e:	bf08      	it	eq
 80011a0:	4603      	moveq	r3, r0
  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80011a2:	68e0      	ldr	r0, [r4, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80011a4:	68e2      	ldr	r2, [r4, #12]
 80011a6:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80011aa:	4353      	muls	r3, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80011ac:	68e2      	ldr	r2, [r4, #12]
 80011ae:	f3c2 6241 	ubfx	r2, r2, #25, #2
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80011b2:	f3c0 1003 	ubfx	r0, r0, #4, #4
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80011b6:	3201      	adds	r2, #1
 80011b8:	0052      	lsls	r2, r2, #1
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80011ba:	3001      	adds	r0, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80011bc:	fbb3 f3f0 	udiv	r3, r3, r0
  sysclockfreq = pllvco / pllr;
 80011c0:	fbb3 f3f2 	udiv	r3, r3, r2
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80011c4:	4a39      	ldr	r2, [pc, #228]	; (80012ac <HAL_RCC_ClockConfig+0x1ec>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d81f      	bhi.n	800120a <HAL_RCC_ClockConfig+0x14a>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80011ca:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80011cc:	68a3      	ldr	r3, [r4, #8]
 80011ce:	686a      	ldr	r2, [r5, #4]
 80011d0:	f023 0303 	bic.w	r3, r3, #3
 80011d4:	4313      	orrs	r3, r2
 80011d6:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80011d8:	f7ff f8c8 	bl	800036c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011dc:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80011e0:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e2:	68a3      	ldr	r3, [r4, #8]
 80011e4:	686a      	ldr	r2, [r5, #4]
 80011e6:	f003 030c 	and.w	r3, r3, #12
 80011ea:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80011ee:	f43f af79 	beq.w	80010e4 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011f2:	f7ff f8bb 	bl	800036c <HAL_GetTick>
 80011f6:	eba0 0008 	sub.w	r0, r0, r8
 80011fa:	4548      	cmp	r0, r9
 80011fc:	d9f1      	bls.n	80011e2 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 80011fe:	2003      	movs	r0, #3
 8001200:	e764      	b.n	80010cc <HAL_RCC_ClockConfig+0xc>
  uint32_t msirange = 0U;
 8001202:	2300      	movs	r3, #0
 8001204:	e7c4      	b.n	8001190 <HAL_RCC_ClockConfig+0xd0>
    pllvco = HSI_VALUE;
 8001206:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001208:	e7cb      	b.n	80011a2 <HAL_RCC_ClockConfig+0xe2>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800120a:	68a3      	ldr	r3, [r4, #8]
 800120c:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8001210:	d107      	bne.n	8001222 <HAL_RCC_ClockConfig+0x162>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001212:	68a3      	ldr	r3, [r4, #8]
 8001214:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800121c:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 800121e:	2780      	movs	r7, #128	; 0x80
 8001220:	e7d4      	b.n	80011cc <HAL_RCC_ClockConfig+0x10c>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001222:	0788      	lsls	r0, r1, #30
 8001224:	d5d1      	bpl.n	80011ca <HAL_RCC_ClockConfig+0x10a>
 8001226:	68ab      	ldr	r3, [r5, #8]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1ce      	bne.n	80011ca <HAL_RCC_ClockConfig+0x10a>
 800122c:	e7f1      	b.n	8001212 <HAL_RCC_ClockConfig+0x152>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800122e:	2b02      	cmp	r3, #2
 8001230:	d10a      	bne.n	8001248 <HAL_RCC_ClockConfig+0x188>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001232:	6823      	ldr	r3, [r4, #0]
 8001234:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001238:	f43f af47 	beq.w	80010ca <HAL_RCC_ClockConfig+0xa>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800123c:	f7ff fc64 	bl	8000b08 <HAL_RCC_GetSysClockFreq>
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <HAL_RCC_ClockConfig+0x1ec>)
 8001242:	4298      	cmp	r0, r3
 8001244:	d9c1      	bls.n	80011ca <HAL_RCC_ClockConfig+0x10a>
 8001246:	e7e4      	b.n	8001212 <HAL_RCC_ClockConfig+0x152>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001248:	b91b      	cbnz	r3, 8001252 <HAL_RCC_ClockConfig+0x192>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	f013 0f02 	tst.w	r3, #2
 8001250:	e7f2      	b.n	8001238 <HAL_RCC_ClockConfig+0x178>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001252:	6823      	ldr	r3, [r4, #0]
 8001254:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001258:	e7ee      	b.n	8001238 <HAL_RCC_ClockConfig+0x178>
    if(hpre == RCC_SYSCLK_DIV2)
 800125a:	2f80      	cmp	r7, #128	; 0x80
 800125c:	f47f af4d 	bne.w	80010fa <HAL_RCC_ClockConfig+0x3a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001260:	490c      	ldr	r1, [pc, #48]	; (8001294 <HAL_RCC_ClockConfig+0x1d4>)
 8001262:	688b      	ldr	r3, [r1, #8]
 8001264:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001268:	e746      	b.n	80010f8 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126a:	680b      	ldr	r3, [r1, #0]
 800126c:	f023 030f 	bic.w	r3, r3, #15
 8001270:	4333      	orrs	r3, r6
 8001272:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001274:	680b      	ldr	r3, [r1, #0]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	42b3      	cmp	r3, r6
 800127c:	f47f af25 	bne.w	80010ca <HAL_RCC_ClockConfig+0xa>
 8001280:	e742      	b.n	8001108 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001282:	68a3      	ldr	r3, [r4, #8]
 8001284:	68e9      	ldr	r1, [r5, #12]
 8001286:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800128a:	430b      	orrs	r3, r1
 800128c:	60a3      	str	r3, [r4, #8]
 800128e:	e740      	b.n	8001112 <HAL_RCC_ClockConfig+0x52>
 8001290:	40022000 	.word	0x40022000
 8001294:	40021000 	.word	0x40021000
 8001298:	0800158c 	.word	0x0800158c
 800129c:	20000010 	.word	0x20000010
 80012a0:	20000018 	.word	0x20000018
 80012a4:	0800155c 	.word	0x0800155c
 80012a8:	007a1200 	.word	0x007a1200
 80012ac:	04c4b400 	.word	0x04c4b400
 80012b0:	00f42400 	.word	0x00f42400

080012b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012ba:	e003      	b.n	80012c4 <LoopCopyDataInit>

080012bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012c2:	3104      	adds	r1, #4

080012c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012c4:	480b      	ldr	r0, [pc, #44]	; (80012f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80012c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012cc:	d3f6      	bcc.n	80012bc <CopyDataInit>
	ldr	r2, =_sbss
 80012ce:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80012d0:	e002      	b.n	80012d8 <LoopFillZerobss>

080012d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012d4:	f842 3b04 	str.w	r3, [r2], #4

080012d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <LoopForever+0x16>)
	cmp	r2, r3
 80012da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012dc:	d3f9      	bcc.n	80012d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012de:	f7fe ffdf 	bl	80002a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012e2:	f000 f8fb 	bl	80014dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012e6:	f000 f81b 	bl	8001320 <main>

080012ea <LoopForever>:

LoopForever:
    b LoopForever
 80012ea:	e7fe      	b.n	80012ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012ec:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80012f0:	08001638 	.word	0x08001638
	ldr	r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80012f8:	20000020 	.word	0x20000020
	ldr	r2, =_sbss
 80012fc:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 8001300:	20000128 	.word	0x20000128

08001304 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001304:	e7fe      	b.n	8001304 <ADC1_IRQHandler>
	...

08001308 <TransferComplete>:
  *         is generated
  * @retval None
  */
static void TransferComplete(DMA_HandleTypeDef *DmaHandle)
{
  transferCompleteDetected = 1;
 8001308:	4b01      	ldr	r3, [pc, #4]	; (8001310 <TransferComplete+0x8>)
 800130a:	2201      	movs	r2, #1
 800130c:	601a      	str	r2, [r3, #0]
}
 800130e:	4770      	bx	lr
 8001310:	2000003c 	.word	0x2000003c

08001314 <TransferError>:
  *         is generated during DMA transfer
  * @retval None
  */
static void TransferError(DMA_HandleTypeDef *DmaHandle)
{
  transferErrorDetected = 1;
 8001314:	4b01      	ldr	r3, [pc, #4]	; (800131c <TransferError+0x8>)
 8001316:	2201      	movs	r2, #1
 8001318:	605a      	str	r2, [r3, #4]
}
 800131a:	4770      	bx	lr
 800131c:	2000003c 	.word	0x2000003c

08001320 <main>:
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b098      	sub	sp, #96	; 0x60
  HAL_Init();
 8001324:	f7ff f806 	bl	8000334 <HAL_Init>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  
  /* Enable voltage range 1 boost mode for frequency above 80 Mhz */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001328:	4c5d      	ldr	r4, [pc, #372]	; (80014a0 <main+0x180>)
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800132a:	2214      	movs	r2, #20
 800132c:	2100      	movs	r1, #0
 800132e:	a802      	add	r0, sp, #8
 8001330:	f000 f8f8 	bl	8001524 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001334:	2244      	movs	r2, #68	; 0x44
 8001336:	2100      	movs	r1, #0
 8001338:	a807      	add	r0, sp, #28
 800133a:	f000 f8f3 	bl	8001524 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001344:	65a3      	str	r3, [r4, #88]	; 0x58
 8001346:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134c:	9301      	str	r3, [sp, #4]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800134e:	2000      	movs	r0, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001350:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001352:	f7ff fb17 	bl	8000984 <HAL_PWREx_ControlVoltageScaling>
  __HAL_RCC_PWR_CLK_DISABLE();
 8001356:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800135c:	65a3      	str	r3, [r4, #88]	; 0x58

  /* Enable MSI Oscillator and activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800135e:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001360:	2601      	movs	r6, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001362:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001364:	2300      	movs	r3, #0
 8001366:	e9cd 630d 	strd	r6, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800136a:	2360      	movs	r3, #96	; 0x60
 800136c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 60;
 800136e:	233c      	movs	r3, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001370:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001372:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLP = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001374:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLP = 7;
 8001376:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001378:	e9cd 5611 	strd	r5, r6, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 800137c:	9613      	str	r6, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800137e:	e9cd 5516 	strd	r5, r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = 7;
 8001382:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001384:	f7ff fc0e 	bl	8000ba4 <HAL_RCC_OscConfig>
 8001388:	b100      	cbz	r0, 800138c <main+0x6c>
 800138a:	e7fe      	b.n	800138a <main+0x6a>
  
  /* To avoid undershoot due to maximum frequency, select PLL as system clock source */
  /* with AHB prescaler divider 2 as first step */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800138c:	f04f 0980 	mov.w	r9, #128	; 0x80
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001390:	230f      	movs	r3, #15
 8001392:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;  
 8001394:	e9cd 9004 	strd	r9, r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 8001398:	9006      	str	r0, [sp, #24]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800139a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800139c:	e9cd 3102 	strd	r3, r1, [sp, #8]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013a0:	f7ff fe8e 	bl	80010c0 <HAL_RCC_ClockConfig>
 80013a4:	b100      	cbz	r0, 80013a8 <main+0x88>
 80013a6:	e7fe      	b.n	80013a6 <main+0x86>
    while(1);
  }

  /* AHB prescaler divider at 1 as second step */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a8:	9004      	str	r0, [sp, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013aa:	2105      	movs	r1, #5
 80013ac:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK;
 80013ae:	9502      	str	r5, [sp, #8]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013b0:	f7ff fe86 	bl	80010c0 <HAL_RCC_ClockConfig>
 80013b4:	4680      	mov	r8, r0
 80013b6:	b100      	cbz	r0, 80013ba <main+0x9a>
 80013b8:	e7fe      	b.n	80013b8 <main+0x98>
  transferErrorDetected = 0;
 80013ba:	4f3a      	ldr	r7, [pc, #232]	; (80014a4 <main+0x184>)
  BSP_LED_Init(LED1);
 80013bc:	f7fe ff20 	bl	8000200 <BSP_LED_Init>
  transferErrorDetected = 0;
 80013c0:	f8c7 8004 	str.w	r8, [r7, #4]
  transferCompleteDetected = 0;
 80013c4:	f8c7 8000 	str.w	r8, [r7]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	64a3      	str	r3, [r4, #72]	; 0x48
 80013d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  DmaHandle.Init.Direction = DMA_MEMORY_TO_MEMORY;          /* M2M transfer mode                */
 80013d2:	4c35      	ldr	r4, [pc, #212]	; (80014a8 <main+0x188>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	9307      	str	r3, [sp, #28]
 80013da:	9b07      	ldr	r3, [sp, #28]
  DmaHandle.Init.MemInc = DMA_MINC_ENABLE;                  /* Memory increment mode Enable     */
 80013dc:	f8c4 9010 	str.w	r9, [r4, #16]
  DmaHandle.Init.PeriphInc = DMA_PINC_ENABLE;               /* Peripheral increment mode Enable */
 80013e0:	2340      	movs	r3, #64	; 0x40
 80013e2:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
 80013e6:	e9c4 a302 	strd	sl, r3, [r4, #8]
  DmaHandle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;    /* memory data alignment : Word     */
 80013ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013f2:	e9c4 2305 	strd	r2, r3, [r4, #20]
  DmaHandle.Init.Priority = DMA_PRIORITY_HIGH;              /* priority level : high            */
 80013f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013fa:	6223      	str	r3, [r4, #32]
  if (HAL_DMA_Init(&DmaHandle) != HAL_OK)
 80013fc:	4620      	mov	r0, r4
  DmaHandle.Instance = DMA_INSTANCE;
 80013fe:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <main+0x18c>)
  DmaHandle.Init.Mode = DMA_NORMAL;                         /* Normal DMA mode                  */
 8001400:	f8c4 801c 	str.w	r8, [r4, #28]
  DmaHandle.Instance = DMA_INSTANCE;
 8001404:	6023      	str	r3, [r4, #0]
  if (HAL_DMA_Init(&DmaHandle) != HAL_OK)
 8001406:	f7ff f887 	bl	8000518 <HAL_DMA_Init>
 800140a:	46b8      	mov	r8, r7
 800140c:	4681      	mov	r9, r0
 800140e:	b138      	cbz	r0, 8001420 <main+0x100>
static void Error_Handler(void)
{
  while (1)
  {
    /* Toggle LED1 with a period of 1 s */
    BSP_LED_Toggle(LED1);
 8001410:	2000      	movs	r0, #0
 8001412:	f7fe ff39 	bl	8000288 <BSP_LED_Toggle>
    HAL_Delay(1000);
 8001416:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800141a:	f7fe ffad 	bl	8000378 <HAL_Delay>
 800141e:	e7f7      	b.n	8001410 <main+0xf0>
  HAL_DMA_RegisterCallback(&DmaHandle, HAL_DMA_XFER_CPLT_CB_ID, TransferComplete);
 8001420:	4601      	mov	r1, r0
 8001422:	4a23      	ldr	r2, [pc, #140]	; (80014b0 <main+0x190>)
 8001424:	4620      	mov	r0, r4
 8001426:	f7ff f973 	bl	8000710 <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(&DmaHandle, HAL_DMA_XFER_ERROR_CB_ID, TransferError);
 800142a:	4a22      	ldr	r2, [pc, #136]	; (80014b4 <main+0x194>)
 800142c:	4629      	mov	r1, r5
 800142e:	4620      	mov	r0, r4
 8001430:	f7ff f96e 	bl	8000710 <HAL_DMA_RegisterCallback>
  HAL_NVIC_SetPriority(DMA_INSTANCE_IRQ, 0, 0);
 8001434:	464a      	mov	r2, r9
 8001436:	4649      	mov	r1, r9
 8001438:	200b      	movs	r0, #11
 800143a:	f7fe ffd3 	bl	80003e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA_INSTANCE_IRQ);
 800143e:	200b      	movs	r0, #11
 8001440:	f7ff f804 	bl	800044c <HAL_NVIC_EnableIRQ>
  if (HAL_DMA_Start_IT(&DmaHandle, (uint32_t)&aSRC_Const_Buffer, (uint32_t)&aDST_Buffer, BUFFER_SIZE) != HAL_OK)
 8001444:	4620      	mov	r0, r4
 8001446:	2320      	movs	r3, #32
 8001448:	f107 0208 	add.w	r2, r7, #8
 800144c:	491a      	ldr	r1, [pc, #104]	; (80014b8 <main+0x198>)
 800144e:	f7ff f8d3 	bl	80005f8 <HAL_DMA_Start_IT>
 8001452:	4604      	mov	r4, r0
 8001454:	b138      	cbz	r0, 8001466 <main+0x146>
    BSP_LED_Toggle(LED1);
 8001456:	2000      	movs	r0, #0
 8001458:	f7fe ff16 	bl	8000288 <BSP_LED_Toggle>
    HAL_Delay(1000);
 800145c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001460:	f7fe ff8a 	bl	8000378 <HAL_Delay>
 8001464:	e7f7      	b.n	8001456 <main+0x136>
  HAL_SuspendTick();
 8001466:	f7fe ff9b 	bl	80003a0 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800146a:	4631      	mov	r1, r6
 800146c:	4650      	mov	r0, sl
 800146e:	f7ff fa57 	bl	8000920 <HAL_PWR_EnterSLEEPMode>
  HAL_ResumeTick();
 8001472:	f7fe ff9d 	bl	80003b0 <HAL_ResumeTick>
    if (transferErrorDetected == 1)
 8001476:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d105      	bne.n	800148a <main+0x16a>
      BSP_LED_Toggle(LED1);
 800147e:	2000      	movs	r0, #0
 8001480:	f7fe ff02 	bl	8000288 <BSP_LED_Toggle>
      HAL_Delay(200);
 8001484:	20c8      	movs	r0, #200	; 0xc8
 8001486:	f7fe ff77 	bl	8000378 <HAL_Delay>
    if (transferCompleteDetected == 1)
 800148a:	f8d8 3000 	ldr.w	r3, [r8]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d1f1      	bne.n	8001476 <main+0x156>
      BSP_LED_On(LED1);
 8001492:	2000      	movs	r0, #0
 8001494:	f7fe feea 	bl	800026c <BSP_LED_On>
      transferCompleteDetected = 0;
 8001498:	f8c8 4000 	str.w	r4, [r8]
 800149c:	e7eb      	b.n	8001476 <main+0x156>
 800149e:	bf00      	nop
 80014a0:	40021000 	.word	0x40021000
 80014a4:	2000003c 	.word	0x2000003c
 80014a8:	200000c8 	.word	0x200000c8
 80014ac:	40020008 	.word	0x40020008
 80014b0:	08001309 	.word	0x08001309
 80014b4:	08001315 	.word	0x08001315
 80014b8:	080015a4 	.word	0x080015a4

080014bc <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80014bc:	4770      	bx	lr

080014be <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80014be:	e7fe      	b.n	80014be <HardFault_Handler>

080014c0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80014c0:	e7fe      	b.n	80014c0 <MemManage_Handler>

080014c2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80014c2:	e7fe      	b.n	80014c2 <BusFault_Handler>

080014c4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80014c4:	e7fe      	b.n	80014c4 <UsageFault_Handler>

080014c6 <SVC_Handler>:
 80014c6:	4770      	bx	lr

080014c8 <DebugMon_Handler>:
 80014c8:	4770      	bx	lr

080014ca <PendSV_Handler>:
 80014ca:	4770      	bx	lr

080014cc <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80014cc:	f7fe bf42 	b.w	8000354 <HAL_IncTick>

080014d0 <DMA1_Channel1_IRQHandler>:
  * @retval None
  */
void DMA_INSTANCE_IRQHANDLER(void)
{
  /* Check the interrupt and clear flag */
  HAL_DMA_IRQHandler(&DmaHandle);
 80014d0:	4801      	ldr	r0, [pc, #4]	; (80014d8 <DMA1_Channel1_IRQHandler+0x8>)
 80014d2:	f7ff b8d3 	b.w	800067c <HAL_DMA_IRQHandler>
 80014d6:	bf00      	nop
 80014d8:	200000c8 	.word	0x200000c8

080014dc <__libc_init_array>:
 80014dc:	b570      	push	{r4, r5, r6, lr}
 80014de:	4e0d      	ldr	r6, [pc, #52]	; (8001514 <__libc_init_array+0x38>)
 80014e0:	4c0d      	ldr	r4, [pc, #52]	; (8001518 <__libc_init_array+0x3c>)
 80014e2:	1ba4      	subs	r4, r4, r6
 80014e4:	10a4      	asrs	r4, r4, #2
 80014e6:	2500      	movs	r5, #0
 80014e8:	42a5      	cmp	r5, r4
 80014ea:	d109      	bne.n	8001500 <__libc_init_array+0x24>
 80014ec:	4e0b      	ldr	r6, [pc, #44]	; (800151c <__libc_init_array+0x40>)
 80014ee:	4c0c      	ldr	r4, [pc, #48]	; (8001520 <__libc_init_array+0x44>)
 80014f0:	f000 f820 	bl	8001534 <_init>
 80014f4:	1ba4      	subs	r4, r4, r6
 80014f6:	10a4      	asrs	r4, r4, #2
 80014f8:	2500      	movs	r5, #0
 80014fa:	42a5      	cmp	r5, r4
 80014fc:	d105      	bne.n	800150a <__libc_init_array+0x2e>
 80014fe:	bd70      	pop	{r4, r5, r6, pc}
 8001500:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001504:	4798      	blx	r3
 8001506:	3501      	adds	r5, #1
 8001508:	e7ee      	b.n	80014e8 <__libc_init_array+0xc>
 800150a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800150e:	4798      	blx	r3
 8001510:	3501      	adds	r5, #1
 8001512:	e7f2      	b.n	80014fa <__libc_init_array+0x1e>
 8001514:	08001628 	.word	0x08001628
 8001518:	08001628 	.word	0x08001628
 800151c:	08001628 	.word	0x08001628
 8001520:	0800162c 	.word	0x0800162c

08001524 <memset>:
 8001524:	4402      	add	r2, r0
 8001526:	4603      	mov	r3, r0
 8001528:	4293      	cmp	r3, r2
 800152a:	d100      	bne.n	800152e <memset+0xa>
 800152c:	4770      	bx	lr
 800152e:	f803 1b01 	strb.w	r1, [r3], #1
 8001532:	e7f9      	b.n	8001528 <memset+0x4>

08001534 <_init>:
 8001534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001536:	bf00      	nop
 8001538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800153a:	bc08      	pop	{r3}
 800153c:	469e      	mov	lr, r3
 800153e:	4770      	bx	lr

08001540 <_fini>:
 8001540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001542:	bf00      	nop
 8001544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001546:	bc08      	pop	{r3}
 8001548:	469e      	mov	lr, r3
 800154a:	4770      	bx	lr
 800154c:	0000      	movs	r0, r0
	...
