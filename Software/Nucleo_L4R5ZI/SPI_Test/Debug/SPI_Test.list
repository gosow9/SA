
SPI_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005988  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005b48  08005b48  00015b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ba0  08005ba0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ba0  08005ba0  00015ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ba8  08005ba8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ba8  08005ba8  00015ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bac  08005bac  00015bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  2000000c  08005bbc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  08005bbc  00020674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a7a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000293e  00000000  00000000  00032ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fc0  00000000  00000000  000353f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e58  00000000  00000000  000363b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a4c6  00000000  00000000  00037210  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ecb3  00000000  00000000  000616d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fe235  00000000  00000000  00070389  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016e5be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000402c  00000000  00000000  0016e63c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005b30 	.word	0x08005b30

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	08005b30 	.word	0x08005b30

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b972 	b.w	80004fc <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	4688      	mov	r8, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14b      	bne.n	80002d6 <__udivmoddi4+0xa6>
 800023e:	428a      	cmp	r2, r1
 8000240:	4615      	mov	r5, r2
 8000242:	d967      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0720 	rsb	r7, r2, #32
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	fa20 f707 	lsr.w	r7, r0, r7
 8000256:	4095      	lsls	r5, r2
 8000258:	ea47 0803 	orr.w	r8, r7, r3
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbb8 f7fe 	udiv	r7, r8, lr
 8000268:	fa1f fc85 	uxth.w	ip, r5
 800026c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000270:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000274:	fb07 f10c 	mul.w	r1, r7, ip
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18eb      	adds	r3, r5, r3
 800027e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000282:	f080 811b 	bcs.w	80004bc <__udivmoddi4+0x28c>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8118 	bls.w	80004bc <__udivmoddi4+0x28c>
 800028c:	3f02      	subs	r7, #2
 800028e:	442b      	add	r3, r5
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0fe 	udiv	r0, r3, lr
 8000298:	fb0e 3310 	mls	r3, lr, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a4:	45a4      	cmp	ip, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	192c      	adds	r4, r5, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x290>
 80002b2:	45a4      	cmp	ip, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x290>
 80002b8:	3802      	subs	r0, #2
 80002ba:	442c      	add	r4, r5
 80002bc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c0:	eba4 040c 	sub.w	r4, r4, ip
 80002c4:	2700      	movs	r7, #0
 80002c6:	b11e      	cbz	r6, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c6 4300 	strd	r4, r3, [r6]
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xbe>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80eb 	beq.w	80004b6 <__udivmoddi4+0x286>
 80002e0:	2700      	movs	r7, #0
 80002e2:	e9c6 0100 	strd	r0, r1, [r6]
 80002e6:	4638      	mov	r0, r7
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f783 	clz	r7, r3
 80002f2:	2f00      	cmp	r7, #0
 80002f4:	d147      	bne.n	8000386 <__udivmoddi4+0x156>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd0>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80fa 	bhi.w	80004f4 <__udivmoddi4+0x2c4>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	4698      	mov	r8, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800030e:	e9c6 4800 	strd	r4, r8, [r6]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xe8>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 808f 	bne.w	8000440 <__udivmoddi4+0x210>
 8000322:	1b49      	subs	r1, r1, r5
 8000324:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000328:	fa1f f885 	uxth.w	r8, r5
 800032c:	2701      	movs	r7, #1
 800032e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fb0e 111c 	mls	r1, lr, ip, r1
 8000338:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800033c:	fb08 f10c 	mul.w	r1, r8, ip
 8000340:	4299      	cmp	r1, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x124>
 8000344:	18eb      	adds	r3, r5, r3
 8000346:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4299      	cmp	r1, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 8000352:	4684      	mov	ip, r0
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb1 f0fe 	udiv	r0, r1, lr
 800035c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000360:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000364:	fb08 f800 	mul.w	r8, r8, r0
 8000368:	45a0      	cmp	r8, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x14c>
 800036c:	192c      	adds	r4, r5, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x14a>
 8000374:	45a0      	cmp	r8, r4
 8000376:	f200 80b6 	bhi.w	80004e6 <__udivmoddi4+0x2b6>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 0408 	sub.w	r4, r4, r8
 8000380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000384:	e79f      	b.n	80002c6 <__udivmoddi4+0x96>
 8000386:	f1c7 0c20 	rsb	ip, r7, #32
 800038a:	40bb      	lsls	r3, r7
 800038c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000390:	ea4e 0e03 	orr.w	lr, lr, r3
 8000394:	fa01 f407 	lsl.w	r4, r1, r7
 8000398:	fa20 f50c 	lsr.w	r5, r0, ip
 800039c:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a4:	4325      	orrs	r5, r4
 80003a6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003aa:	0c2c      	lsrs	r4, r5, #16
 80003ac:	fb08 3319 	mls	r3, r8, r9, r3
 80003b0:	fa1f fa8e 	uxth.w	sl, lr
 80003b4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b8:	fb09 f40a 	mul.w	r4, r9, sl
 80003bc:	429c      	cmp	r4, r3
 80003be:	fa02 f207 	lsl.w	r2, r2, r7
 80003c2:	fa00 f107 	lsl.w	r1, r0, r7
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1e 0303 	adds.w	r3, lr, r3
 80003cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d0:	f080 8087 	bcs.w	80004e2 <__udivmoddi4+0x2b2>
 80003d4:	429c      	cmp	r4, r3
 80003d6:	f240 8084 	bls.w	80004e2 <__udivmoddi4+0x2b2>
 80003da:	f1a9 0902 	sub.w	r9, r9, #2
 80003de:	4473      	add	r3, lr
 80003e0:	1b1b      	subs	r3, r3, r4
 80003e2:	b2ad      	uxth	r5, r5
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1e 0404 	adds.w	r4, lr, r4
 80003fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000400:	d26b      	bcs.n	80004da <__udivmoddi4+0x2aa>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d969      	bls.n	80004da <__udivmoddi4+0x2aa>
 8000406:	3802      	subs	r0, #2
 8000408:	4474      	add	r4, lr
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c2      	mov	sl, r8
 800041a:	464b      	mov	r3, r9
 800041c:	d354      	bcc.n	80004c8 <__udivmoddi4+0x298>
 800041e:	d051      	beq.n	80004c4 <__udivmoddi4+0x294>
 8000420:	2e00      	cmp	r6, #0
 8000422:	d069      	beq.n	80004f8 <__udivmoddi4+0x2c8>
 8000424:	ebb1 050a 	subs.w	r5, r1, sl
 8000428:	eb64 0403 	sbc.w	r4, r4, r3
 800042c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000430:	40fd      	lsrs	r5, r7
 8000432:	40fc      	lsrs	r4, r7
 8000434:	ea4c 0505 	orr.w	r5, ip, r5
 8000438:	e9c6 5400 	strd	r5, r4, [r6]
 800043c:	2700      	movs	r7, #0
 800043e:	e747      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000440:	f1c2 0320 	rsb	r3, r2, #32
 8000444:	fa20 f703 	lsr.w	r7, r0, r3
 8000448:	4095      	lsls	r5, r2
 800044a:	fa01 f002 	lsl.w	r0, r1, r2
 800044e:	fa21 f303 	lsr.w	r3, r1, r3
 8000452:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000456:	4338      	orrs	r0, r7
 8000458:	0c01      	lsrs	r1, r0, #16
 800045a:	fbb3 f7fe 	udiv	r7, r3, lr
 800045e:	fa1f f885 	uxth.w	r8, r5
 8000462:	fb0e 3317 	mls	r3, lr, r7, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb07 f308 	mul.w	r3, r7, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	fa04 f402 	lsl.w	r4, r4, r2
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x256>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f107 3cff 	add.w	ip, r7, #4294967295
 800047c:	d22f      	bcs.n	80004de <__udivmoddi4+0x2ae>
 800047e:	428b      	cmp	r3, r1
 8000480:	d92d      	bls.n	80004de <__udivmoddi4+0x2ae>
 8000482:	3f02      	subs	r7, #2
 8000484:	4429      	add	r1, r5
 8000486:	1acb      	subs	r3, r1, r3
 8000488:	b281      	uxth	r1, r0
 800048a:	fbb3 f0fe 	udiv	r0, r3, lr
 800048e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000496:	fb00 f308 	mul.w	r3, r0, r8
 800049a:	428b      	cmp	r3, r1
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x27e>
 800049e:	1869      	adds	r1, r5, r1
 80004a0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a4:	d217      	bcs.n	80004d6 <__udivmoddi4+0x2a6>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d915      	bls.n	80004d6 <__udivmoddi4+0x2a6>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4429      	add	r1, r5
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b4:	e73b      	b.n	800032e <__udivmoddi4+0xfe>
 80004b6:	4637      	mov	r7, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e709      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004bc:	4607      	mov	r7, r0
 80004be:	e6e7      	b.n	8000290 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c4:	4541      	cmp	r1, r8
 80004c6:	d2ab      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004c8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004cc:	eb69 020e 	sbc.w	r2, r9, lr
 80004d0:	3801      	subs	r0, #1
 80004d2:	4613      	mov	r3, r2
 80004d4:	e7a4      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d6:	4660      	mov	r0, ip
 80004d8:	e7e9      	b.n	80004ae <__udivmoddi4+0x27e>
 80004da:	4618      	mov	r0, r3
 80004dc:	e795      	b.n	800040a <__udivmoddi4+0x1da>
 80004de:	4667      	mov	r7, ip
 80004e0:	e7d1      	b.n	8000486 <__udivmoddi4+0x256>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e77c      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	442c      	add	r4, r5
 80004ea:	e747      	b.n	800037c <__udivmoddi4+0x14c>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	442b      	add	r3, r5
 80004f2:	e72f      	b.n	8000354 <__udivmoddi4+0x124>
 80004f4:	4638      	mov	r0, r7
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xda>
 80004f8:	4637      	mov	r7, r6
 80004fa:	e6e9      	b.n	80002d0 <__udivmoddi4+0xa0>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000506:	4b12      	ldr	r3, [pc, #72]	; (8000550 <MX_DMA_Init+0x50>)
 8000508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800050a:	4a11      	ldr	r2, [pc, #68]	; (8000550 <MX_DMA_Init+0x50>)
 800050c:	f043 0304 	orr.w	r3, r3, #4
 8000510:	6493      	str	r3, [r2, #72]	; 0x48
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_DMA_Init+0x50>)
 8000514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000516:	f003 0304 	and.w	r3, r3, #4
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_DMA_Init+0x50>)
 8000520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000522:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <MX_DMA_Init+0x50>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	6493      	str	r3, [r2, #72]	; 0x48
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_DMA_Init+0x50>)
 800052c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2100      	movs	r1, #0
 800053a:	200b      	movs	r0, #11
 800053c:	f000 ff71 	bl	8001422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000540:	200b      	movs	r0, #11
 8000542:	f000 ff8a 	bl	800145a <HAL_NVIC_EnableIRQ>

}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000

08000554 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08e      	sub	sp, #56	; 0x38
 8000558:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800056a:	4b98      	ldr	r3, [pc, #608]	; (80007cc <MX_GPIO_Init+0x278>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	4a97      	ldr	r2, [pc, #604]	; (80007cc <MX_GPIO_Init+0x278>)
 8000570:	f043 0310 	orr.w	r3, r3, #16
 8000574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000576:	4b95      	ldr	r3, [pc, #596]	; (80007cc <MX_GPIO_Init+0x278>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	f003 0310 	and.w	r3, r3, #16
 800057e:	623b      	str	r3, [r7, #32]
 8000580:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	4b92      	ldr	r3, [pc, #584]	; (80007cc <MX_GPIO_Init+0x278>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	4a91      	ldr	r2, [pc, #580]	; (80007cc <MX_GPIO_Init+0x278>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058e:	4b8f      	ldr	r3, [pc, #572]	; (80007cc <MX_GPIO_Init+0x278>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	61fb      	str	r3, [r7, #28]
 8000598:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800059a:	4b8c      	ldr	r3, [pc, #560]	; (80007cc <MX_GPIO_Init+0x278>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a8b      	ldr	r2, [pc, #556]	; (80007cc <MX_GPIO_Init+0x278>)
 80005a0:	f043 0320 	orr.w	r3, r3, #32
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b89      	ldr	r3, [pc, #548]	; (80007cc <MX_GPIO_Init+0x278>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0320 	and.w	r3, r3, #32
 80005ae:	61bb      	str	r3, [r7, #24]
 80005b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b2:	4b86      	ldr	r3, [pc, #536]	; (80007cc <MX_GPIO_Init+0x278>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a85      	ldr	r2, [pc, #532]	; (80007cc <MX_GPIO_Init+0x278>)
 80005b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005be:	4b83      	ldr	r3, [pc, #524]	; (80007cc <MX_GPIO_Init+0x278>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c6:	617b      	str	r3, [r7, #20]
 80005c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	4b80      	ldr	r3, [pc, #512]	; (80007cc <MX_GPIO_Init+0x278>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	4a7f      	ldr	r2, [pc, #508]	; (80007cc <MX_GPIO_Init+0x278>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d6:	4b7d      	ldr	r3, [pc, #500]	; (80007cc <MX_GPIO_Init+0x278>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	4b7a      	ldr	r3, [pc, #488]	; (80007cc <MX_GPIO_Init+0x278>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	4a79      	ldr	r2, [pc, #484]	; (80007cc <MX_GPIO_Init+0x278>)
 80005e8:	f043 0302 	orr.w	r3, r3, #2
 80005ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ee:	4b77      	ldr	r3, [pc, #476]	; (80007cc <MX_GPIO_Init+0x278>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005fa:	4b74      	ldr	r3, [pc, #464]	; (80007cc <MX_GPIO_Init+0x278>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4a73      	ldr	r2, [pc, #460]	; (80007cc <MX_GPIO_Init+0x278>)
 8000600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b71      	ldr	r3, [pc, #452]	; (80007cc <MX_GPIO_Init+0x278>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000612:	4b6e      	ldr	r3, [pc, #440]	; (80007cc <MX_GPIO_Init+0x278>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	4a6d      	ldr	r2, [pc, #436]	; (80007cc <MX_GPIO_Init+0x278>)
 8000618:	f043 0308 	orr.w	r3, r3, #8
 800061c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061e:	4b6b      	ldr	r3, [pc, #428]	; (80007cc <MX_GPIO_Init+0x278>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	f003 0308 	and.w	r3, r3, #8
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800062a:	f001 fcb1 	bl	8001f90 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EPD_DC_Pin|EPD_CS_Pin|EPD_RST_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2119      	movs	r1, #25
 8000632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000636:	f001 fa77 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000640:	4863      	ldr	r0, [pc, #396]	; (80007d0 <MX_GPIO_Init+0x27c>)
 8000642:	f001 fa71 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2120      	movs	r1, #32
 800064a:	4862      	ldr	r0, [pc, #392]	; (80007d4 <MX_GPIO_Init+0x280>)
 800064c:	f001 fa6c 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE8 PE9 
                           PE10 PE11 PE12 PE13 
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8000650:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000656:	2303      	movs	r3, #3
 8000658:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800065e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000662:	4619      	mov	r1, r3
 8000664:	485c      	ldr	r0, [pc, #368]	; (80007d8 <MX_GPIO_Init+0x284>)
 8000666:	f001 f8cd 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800066a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000670:	4b5a      	ldr	r3, [pc, #360]	; (80007dc <MX_GPIO_Init+0x288>)
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067c:	4619      	mov	r1, r3
 800067e:	4858      	ldr	r0, [pc, #352]	; (80007e0 <MX_GPIO_Init+0x28c>)
 8000680:	f001 f8c0 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 
                           PF4 PF5 PF6 PF7 
                           PF8 PF9 PF10 PF11 
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068a:	2303      	movs	r3, #3
 800068c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000696:	4619      	mov	r1, r3
 8000698:	4852      	ldr	r0, [pc, #328]	; (80007e4 <MX_GPIO_Init+0x290>)
 800069a:	f001 f8b3 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC4 
                           PC5 PC6 PC7 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800069e:	f641 73fd 	movw	r3, #8189	; 0x1ffd
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a4:	2303      	movs	r3, #3
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b0:	4619      	mov	r1, r3
 80006b2:	484b      	ldr	r0, [pc, #300]	; (80007e0 <MX_GPIO_Init+0x28c>)
 80006b4:	f001 f8a6 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = EPD_DC_Pin|EPD_CS_Pin|EPD_RST_Pin;
 80006b8:	2319      	movs	r3, #25
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	2301      	movs	r3, #1
 80006be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c4:	2302      	movs	r3, #2
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006cc:	4619      	mov	r1, r3
 80006ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d2:	f001 f897 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EPD_BUSY_Pin;
 80006d6:	2304      	movs	r3, #4
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006da:	2300      	movs	r3, #0
 80006dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EPD_BUSY_GPIO_Port, &GPIO_InitStruct);
 80006e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e6:	4619      	mov	r1, r3
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ec:	f001 f88a 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 80006f0:	f248 0360 	movw	r3, #32864	; 0x8060
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f6:	2303      	movs	r3, #3
 80006f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000702:	4619      	mov	r1, r3
 8000704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000708:	f001 f87c 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11 
                           PB12 PB13 PB15 PB4 
                           PB5 PB6 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11 
 800070c:	f64b 3377 	movw	r3, #47991	; 0xbb77
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000712:	2303      	movs	r3, #3
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071e:	4619      	mov	r1, r3
 8000720:	482b      	ldr	r0, [pc, #172]	; (80007d0 <MX_GPIO_Init+0x27c>)
 8000722:	f001 f86f 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 
                           PG4 PG9 PG10 PG11 
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000726:	f64f 631f 	movw	r3, #65055	; 0xfe1f
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800072c:	2303      	movs	r3, #3
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000738:	4619      	mov	r1, r3
 800073a:	4826      	ldr	r0, [pc, #152]	; (80007d4 <MX_GPIO_Init+0x280>)
 800073c:	f001 f862 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000740:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000756:	4619      	mov	r1, r3
 8000758:	481d      	ldr	r0, [pc, #116]	; (80007d0 <MX_GPIO_Init+0x27c>)
 800075a:	f001 f853 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13 
                           PD14 PD15 PD0 PD1 
                           PD2 PD3 PD4 PD5 
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 800075e:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000764:	2303      	movs	r3, #3
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800076c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000770:	4619      	mov	r1, r3
 8000772:	481d      	ldr	r0, [pc, #116]	; (80007e8 <MX_GPIO_Init+0x294>)
 8000774:	f001 f846 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000778:	2320      	movs	r3, #32
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078c:	4619      	mov	r1, r3
 800078e:	4811      	ldr	r0, [pc, #68]	; (80007d4 <MX_GPIO_Init+0x280>)
 8000790:	f001 f838 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000794:	2340      	movs	r3, #64	; 0x40
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000798:	2300      	movs	r3, #0
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a4:	4619      	mov	r1, r3
 80007a6:	480b      	ldr	r0, [pc, #44]	; (80007d4 <MX_GPIO_Init+0x280>)
 80007a8:	f001 f82c 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007ac:	2308      	movs	r3, #8
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b0:	2303      	movs	r3, #3
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80007b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007bc:	4619      	mov	r1, r3
 80007be:	480b      	ldr	r0, [pc, #44]	; (80007ec <MX_GPIO_Init+0x298>)
 80007c0:	f001 f820 	bl	8001804 <HAL_GPIO_Init>

}
 80007c4:	bf00      	nop
 80007c6:	3738      	adds	r7, #56	; 0x38
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000
 80007d0:	48000400 	.word	0x48000400
 80007d4:	48001800 	.word	0x48001800
 80007d8:	48001000 	.word	0x48001000
 80007dc:	10110000 	.word	0x10110000
 80007e0:	48000800 	.word	0x48000800
 80007e4:	48001400 	.word	0x48001400
 80007e8:	48000c00 	.word	0x48000c00
 80007ec:	48001c00 	.word	0x48001c00

080007f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b087      	sub	sp, #28
 80007f4:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f6:	f000 fca6 	bl	8001146 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 80007fa:	f000 f853 	bl	80008a4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fe:	f7ff fea9 	bl	8000554 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000802:	f000 fad5 	bl	8000db0 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000806:	f000 fb19 	bl	8000e3c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800080a:	f000 fbdd 	bl	8000fc8 <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 800080e:	f7ff fe77 	bl	8000500 <MX_DMA_Init>
  MX_SPI1_Init();
 8000812:	f000 f8ff 	bl	8000a14 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000816:	f000 f93b 	bl	8000a90 <MX_SPI2_Init>

  //HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
  uint16_t big = 65535;
 800081a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800081e:	827b      	strh	r3, [r7, #18]
  uint8_t pic[big];
 8000820:	8a78      	ldrh	r0, [r7, #18]
 8000822:	4603      	mov	r3, r0
 8000824:	3b01      	subs	r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	b281      	uxth	r1, r0
 800082a:	f04f 0200 	mov.w	r2, #0
 800082e:	f04f 0300 	mov.w	r3, #0
 8000832:	f04f 0400 	mov.w	r4, #0
 8000836:	00d4      	lsls	r4, r2, #3
 8000838:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800083c:	00cb      	lsls	r3, r1, #3
 800083e:	b281      	uxth	r1, r0
 8000840:	f04f 0200 	mov.w	r2, #0
 8000844:	f04f 0300 	mov.w	r3, #0
 8000848:	f04f 0400 	mov.w	r4, #0
 800084c:	00d4      	lsls	r4, r2, #3
 800084e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000852:	00cb      	lsls	r3, r1, #3
 8000854:	4603      	mov	r3, r0
 8000856:	3307      	adds	r3, #7
 8000858:	08db      	lsrs	r3, r3, #3
 800085a:	00db      	lsls	r3, r3, #3
 800085c:	ebad 0d03 	sub.w	sp, sp, r3
 8000860:	466b      	mov	r3, sp
 8000862:	3300      	adds	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  uint8_t test = 0xab;
 8000866:	23ab      	movs	r3, #171	; 0xab
 8000868:	70fb      	strb	r3, [r7, #3]
  for(int i = 0; i<big; i++)
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	e009      	b.n	8000884 <main+0x94>
  {
	  pic[i]=i;
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	b2d9      	uxtb	r1, r3
 8000874:	68ba      	ldr	r2, [r7, #8]
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	4413      	add	r3, r2
 800087a:	460a      	mov	r2, r1
 800087c:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i<big; i++)
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	3301      	adds	r3, #1
 8000882:	617b      	str	r3, [r7, #20]
 8000884:	8a7b      	ldrh	r3, [r7, #18]
 8000886:	697a      	ldr	r2, [r7, #20]
 8000888:	429a      	cmp	r2, r3
 800088a:	dbf1      	blt.n	8000870 <main+0x80>
  }
  uint8_t *add = &pic[0];
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	607b      	str	r3, [r7, #4]
	  HAL_SPI_Transmit_DMA(&hspi1, add, big);
	  HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
	  HAL_Delay(100);
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);*/

	  spi_comand(&hspi1, &test, 1 );
 8000890:	1cfb      	adds	r3, r7, #3
 8000892:	2201      	movs	r2, #1
 8000894:	4619      	mov	r1, r3
 8000896:	4802      	ldr	r0, [pc, #8]	; (80008a0 <main+0xb0>)
 8000898:	f000 f88b 	bl	80009b2 <spi_comand>
  {
 800089c:	e7f8      	b.n	8000890 <main+0xa0>
 800089e:	bf00      	nop
 80008a0:	2000008c 	.word	0x2000008c

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b0bc      	sub	sp, #240	; 0xf0
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008ae:	2244      	movs	r2, #68	; 0x44
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f005 f934 	bl	8005b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2294      	movs	r2, #148	; 0x94
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f005 f926 	bl	8005b20 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80008d4:	2000      	movs	r0, #0
 80008d6:	f001 faa7 	bl	8001e28 <HAL_PWREx_ControlVoltageScaling>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0x40>
  {
    Error_Handler();
 80008e0:	f000 f890 	bl	8000a04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e4:	2301      	movs	r3, #1
 80008e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008ea:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f2:	2302      	movs	r3, #2
 80008f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f8:	2303      	movs	r3, #3
 80008fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008fe:	2301      	movs	r3, #1
 8000900:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000904:	231e      	movs	r3, #30
 8000906:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800090a:	2302      	movs	r3, #2
 800090c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000910:	2302      	movs	r3, #2
 8000912:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000916:	2302      	movs	r3, #2
 8000918:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000920:	4618      	mov	r0, r3
 8000922:	f001 fb45 	bl	8001fb0 <HAL_RCC_OscConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800092c:	f000 f86a 	bl	8000a04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000930:	230f      	movs	r3, #15
 8000932:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000936:	2303      	movs	r3, #3
 8000938:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000946:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000950:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000954:	2105      	movs	r1, #5
 8000956:	4618      	mov	r0, r3
 8000958:	f001 ff18 	bl	800278c <HAL_RCC_ClockConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000962:	f000 f84f 	bl	8000a04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1
 8000966:	f242 0324 	movw	r3, #8228	; 0x2024
 800096a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800096c:	2300      	movs	r3, #0
 800096e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000970:	2300      	movs	r3, #0
 8000972:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000974:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000978:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800097a:	2303      	movs	r3, #3
 800097c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800097e:	2301      	movs	r3, #1
 8000980:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8000982:	230c      	movs	r3, #12
 8000984:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000986:	2302      	movs	r3, #2
 8000988:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800098a:	2302      	movs	r3, #2
 800098c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800098e:	2302      	movs	r3, #2
 8000990:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000992:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000996:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	4618      	mov	r0, r3
 800099c:	f002 f9a6 	bl	8002cec <HAL_RCCEx_PeriphCLKConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0x106>
  {
    Error_Handler();
 80009a6:	f000 f82d 	bl	8000a04 <Error_Handler>
  }
}
 80009aa:	bf00      	nop
 80009ac:	37f0      	adds	r7, #240	; 0xf0
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <spi_comand>:

/* USER CODE BEGIN 4 */
void spi_comand(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size )
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b084      	sub	sp, #16
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	60f8      	str	r0, [r7, #12]
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	4613      	mov	r3, r2
 80009be:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2108      	movs	r1, #8
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c8:	f001 f8ae 	bl	8001b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2101      	movs	r1, #1
 80009d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d4:	f001 f8a8 	bl	8001b28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, pData, Size, 0);
 80009d8:	88fa      	ldrh	r2, [r7, #6]
 80009da:	2300      	movs	r3, #0
 80009dc:	68b9      	ldr	r1, [r7, #8]
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f002 ff16 	bl	8003810 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2108      	movs	r1, #8
 80009e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ec:	f001 f89c 	bl	8001b28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2108      	movs	r1, #8
 80009f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f8:	f001 f896 	bl	8001b28 <HAL_GPIO_WritePin>

}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
	...

08000a14 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a1a:	4a1c      	ldr	r2, [pc, #112]	; (8000a8c <MX_SPI1_Init+0x78>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a2c:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a2e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a3a:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a46:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a4a:	2228      	movs	r2, #40	; 0x28
 8000a4c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a62:	2207      	movs	r2, #7
 8000a64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a6e:	2208      	movs	r2, #8
 8000a70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_SPI1_Init+0x74>)
 8000a74:	f002 fe42 	bl	80036fc <HAL_SPI_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a7e:	f7ff ffc1 	bl	8000a04 <Error_Handler>
  }

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	2000008c 	.word	0x2000008c
 8000a8c:	40013000 	.word	0x40013000

08000a90 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <MX_SPI2_Init+0x74>)
 8000a96:	4a1c      	ldr	r2, [pc, #112]	; (8000b08 <MX_SPI2_Init+0x78>)
 8000a98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_SPI2_Init+0x74>)
 8000a9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aa0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000aa2:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <MX_SPI2_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_SPI2_Init+0x74>)
 8000aaa:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000aae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_SPI2_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_SPI2_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_SPI2_Init+0x74>)
 8000abe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_SPI2_Init+0x74>)
 8000ac6:	2228      	movs	r2, #40	; 0x28
 8000ac8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_SPI2_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_SPI2_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_SPI2_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_SPI2_Init+0x74>)
 8000ade:	2207      	movs	r2, #7
 8000ae0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_SPI2_Init+0x74>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_SPI2_Init+0x74>)
 8000aea:	2208      	movs	r2, #8
 8000aec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_SPI2_Init+0x74>)
 8000af0:	f002 fe04 	bl	80036fc <HAL_SPI_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000afa:	f7ff ff83 	bl	8000a04 <Error_Handler>
  }

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000028 	.word	0x20000028
 8000b08:	40003800 	.word	0x40003800

08000b0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	; 0x30
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a51      	ldr	r2, [pc, #324]	; (8000c70 <HAL_SPI_MspInit+0x164>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d152      	bne.n	8000bd4 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b2e:	4b51      	ldr	r3, [pc, #324]	; (8000c74 <HAL_SPI_MspInit+0x168>)
 8000b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b32:	4a50      	ldr	r2, [pc, #320]	; (8000c74 <HAL_SPI_MspInit+0x168>)
 8000b34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b38:	6613      	str	r3, [r2, #96]	; 0x60
 8000b3a:	4b4e      	ldr	r3, [pc, #312]	; (8000c74 <HAL_SPI_MspInit+0x168>)
 8000b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b42:	61bb      	str	r3, [r7, #24]
 8000b44:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b4b      	ldr	r3, [pc, #300]	; (8000c74 <HAL_SPI_MspInit+0x168>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	4a4a      	ldr	r2, [pc, #296]	; (8000c74 <HAL_SPI_MspInit+0x168>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b52:	4b48      	ldr	r3, [pc, #288]	; (8000c74 <HAL_SPI_MspInit+0x168>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = EPD_SCK_Pin|EPD_MOSI_Pin;
 8000b5e:	2382      	movs	r3, #130	; 0x82
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b6e:	2305      	movs	r3, #5
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7c:	f000 fe42 	bl	8001804 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8000b80:	4b3d      	ldr	r3, [pc, #244]	; (8000c78 <HAL_SPI_MspInit+0x16c>)
 8000b82:	4a3e      	ldr	r2, [pc, #248]	; (8000c7c <HAL_SPI_MspInit+0x170>)
 8000b84:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000b86:	4b3c      	ldr	r3, [pc, #240]	; (8000c78 <HAL_SPI_MspInit+0x16c>)
 8000b88:	220b      	movs	r2, #11
 8000b8a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b8c:	4b3a      	ldr	r3, [pc, #232]	; (8000c78 <HAL_SPI_MspInit+0x16c>)
 8000b8e:	2210      	movs	r2, #16
 8000b90:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b92:	4b39      	ldr	r3, [pc, #228]	; (8000c78 <HAL_SPI_MspInit+0x16c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b98:	4b37      	ldr	r3, [pc, #220]	; (8000c78 <HAL_SPI_MspInit+0x16c>)
 8000b9a:	2280      	movs	r2, #128	; 0x80
 8000b9c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b9e:	4b36      	ldr	r3, [pc, #216]	; (8000c78 <HAL_SPI_MspInit+0x16c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ba4:	4b34      	ldr	r3, [pc, #208]	; (8000c78 <HAL_SPI_MspInit+0x16c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000baa:	4b33      	ldr	r3, [pc, #204]	; (8000c78 <HAL_SPI_MspInit+0x16c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bb0:	4b31      	ldr	r3, [pc, #196]	; (8000c78 <HAL_SPI_MspInit+0x16c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000bb6:	4830      	ldr	r0, [pc, #192]	; (8000c78 <HAL_SPI_MspInit+0x16c>)
 8000bb8:	f000 fc6a 	bl	8001490 <HAL_DMA_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8000bc2:	f7ff ff1f 	bl	8000a04 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a2b      	ldr	r2, [pc, #172]	; (8000c78 <HAL_SPI_MspInit+0x16c>)
 8000bca:	655a      	str	r2, [r3, #84]	; 0x54
 8000bcc:	4a2a      	ldr	r2, [pc, #168]	; (8000c78 <HAL_SPI_MspInit+0x16c>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000bd2:	e049      	b.n	8000c68 <HAL_SPI_MspInit+0x15c>
  else if(spiHandle->Instance==SPI2)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a29      	ldr	r2, [pc, #164]	; (8000c80 <HAL_SPI_MspInit+0x174>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d144      	bne.n	8000c68 <HAL_SPI_MspInit+0x15c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bde:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <HAL_SPI_MspInit+0x168>)
 8000be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be2:	4a24      	ldr	r2, [pc, #144]	; (8000c74 <HAL_SPI_MspInit+0x168>)
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bea:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <HAL_SPI_MspInit+0x168>)
 8000bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <HAL_SPI_MspInit+0x168>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	4a1e      	ldr	r2, [pc, #120]	; (8000c74 <HAL_SPI_MspInit+0x168>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <HAL_SPI_MspInit+0x168>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <HAL_SPI_MspInit+0x168>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <HAL_SPI_MspInit+0x168>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <HAL_SPI_MspInit+0x168>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8000c36:	2303      	movs	r3, #3
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4810      	ldr	r0, [pc, #64]	; (8000c84 <HAL_SPI_MspInit+0x178>)
 8000c42:	f000 fddf 	bl	8001804 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c58:	2305      	movs	r3, #5
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	4809      	ldr	r0, [pc, #36]	; (8000c88 <HAL_SPI_MspInit+0x17c>)
 8000c64:	f000 fdce 	bl	8001804 <HAL_GPIO_Init>
}
 8000c68:	bf00      	nop
 8000c6a:	3730      	adds	r7, #48	; 0x30
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40013000 	.word	0x40013000
 8000c74:	40021000 	.word	0x40021000
 8000c78:	200000f0 	.word	0x200000f0
 8000c7c:	40020008 	.word	0x40020008
 8000c80:	40003800 	.word	0x40003800
 8000c84:	48000800 	.word	0x48000800
 8000c88:	48000400 	.word	0x48000400

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <HAL_MspInit+0x44>)
 8000c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <HAL_MspInit+0x44>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_MspInit+0x44>)
 8000ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <HAL_MspInit+0x44>)
 8000cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cae:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <HAL_MspInit+0x44>)
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_MspInit+0x44>)
 8000cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <MemManage_Handler+0x4>

08000cee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d28:	f000 fa60 	bl	80011ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <DMA1_Channel1_IRQHandler+0x10>)
 8000d36:	f000 fc53 	bl	80015e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200000f0 	.word	0x200000f0

08000d44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <SystemInit+0x64>)
 8000d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4e:	4a16      	ldr	r2, [pc, #88]	; (8000da8 <SystemInit+0x64>)
 8000d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <SystemInit+0x68>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a13      	ldr	r2, [pc, #76]	; (8000dac <SystemInit+0x68>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <SystemInit+0x68>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <SystemInit+0x68>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a0f      	ldr	r2, [pc, #60]	; (8000dac <SystemInit+0x68>)
 8000d70:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d74:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d78:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <SystemInit+0x68>)
 8000d7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d80:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <SystemInit+0x68>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a09      	ldr	r2, [pc, #36]	; (8000dac <SystemInit+0x68>)
 8000d88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <SystemInit+0x68>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <SystemInit+0x64>)
 8000d96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d9a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00
 8000dac:	40021000 	.word	0x40021000

08000db0 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 8000db4:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <MX_LPUART1_UART_Init+0x80>)
 8000db6:	4a1f      	ldr	r2, [pc, #124]	; (8000e34 <MX_LPUART1_UART_Init+0x84>)
 8000db8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000dba:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <MX_LPUART1_UART_Init+0x80>)
 8000dbc:	4a1e      	ldr	r2, [pc, #120]	; (8000e38 <MX_LPUART1_UART_Init+0x88>)
 8000dbe:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <MX_LPUART1_UART_Init+0x80>)
 8000dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dc6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000dc8:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <MX_LPUART1_UART_Init+0x80>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000dce:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <MX_LPUART1_UART_Init+0x80>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <MX_LPUART1_UART_Init+0x80>)
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <MX_LPUART1_UART_Init+0x80>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <MX_LPUART1_UART_Init+0x80>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de6:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <MX_LPUART1_UART_Init+0x80>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dec:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <MX_LPUART1_UART_Init+0x80>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MX_LPUART1_UART_Init+0x80>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <MX_LPUART1_UART_Init+0x80>)
 8000dfa:	f002 ff8c 	bl	8003d16 <HAL_UART_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e04:	f7ff fdfe 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4809      	ldr	r0, [pc, #36]	; (8000e30 <MX_LPUART1_UART_Init+0x80>)
 8000e0c:	f004 fb01 	bl	8005412 <HAL_UARTEx_SetTxFifoThreshold>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e16:	f7ff fdf5 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4804      	ldr	r0, [pc, #16]	; (8000e30 <MX_LPUART1_UART_Init+0x80>)
 8000e1e:	f004 fb36 	bl	800548e <HAL_UARTEx_SetRxFifoThreshold>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e28:	f7ff fdec 	bl	8000a04 <Error_Handler>
  }

}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	200001dc 	.word	0x200001dc
 8000e34:	40008000 	.word	0x40008000
 8000e38:	00033324 	.word	0x00033324

08000e3c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000e40:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e42:	4a23      	ldr	r2, [pc, #140]	; (8000ed0 <MX_USART3_UART_Init+0x94>)
 8000e44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e54:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e60:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e62:	220c      	movs	r2, #12
 8000e64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e66:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e72:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e84:	4811      	ldr	r0, [pc, #68]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e86:	f002 ff46 	bl	8003d16 <HAL_UART_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e90:	f7ff fdb8 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e94:	2100      	movs	r1, #0
 8000e96:	480d      	ldr	r0, [pc, #52]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e98:	f004 fabb 	bl	8005412 <HAL_UARTEx_SetTxFifoThreshold>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ea2:	f7ff fdaf 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4808      	ldr	r0, [pc, #32]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000eaa:	f004 faf0 	bl	800548e <HAL_UARTEx_SetRxFifoThreshold>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000eb4:	f7ff fda6 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000eb8:	4804      	ldr	r0, [pc, #16]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000eba:	f004 fa71 	bl	80053a0 <HAL_UARTEx_DisableFifoMode>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ec4:	f7ff fd9e 	bl	8000a04 <Error_Handler>
  }

}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000150 	.word	0x20000150
 8000ed0:	40004800 	.word	0x40004800

08000ed4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	; 0x30
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a30      	ldr	r2, [pc, #192]	; (8000fb4 <HAL_UART_MspInit+0xe0>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d12b      	bne.n	8000f4e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ef6:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <HAL_UART_MspInit+0xe4>)
 8000ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000efa:	4a2f      	ldr	r2, [pc, #188]	; (8000fb8 <HAL_UART_MspInit+0xe4>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000f02:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <HAL_UART_MspInit+0xe4>)
 8000f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	61bb      	str	r3, [r7, #24]
 8000f0c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <HAL_UART_MspInit+0xe4>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	4a29      	ldr	r2, [pc, #164]	; (8000fb8 <HAL_UART_MspInit+0xe4>)
 8000f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1a:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <HAL_UART_MspInit+0xe4>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8000f26:	f001 f833 	bl	8001f90 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000f2a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f3c:	2308      	movs	r3, #8
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4619      	mov	r1, r3
 8000f46:	481d      	ldr	r0, [pc, #116]	; (8000fbc <HAL_UART_MspInit+0xe8>)
 8000f48:	f000 fc5c 	bl	8001804 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f4c:	e02d      	b.n	8000faa <HAL_UART_MspInit+0xd6>
  else if(uartHandle->Instance==USART3)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a1b      	ldr	r2, [pc, #108]	; (8000fc0 <HAL_UART_MspInit+0xec>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d128      	bne.n	8000faa <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_UART_MspInit+0xe4>)
 8000f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5c:	4a16      	ldr	r2, [pc, #88]	; (8000fb8 <HAL_UART_MspInit+0xe4>)
 8000f5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f62:	6593      	str	r3, [r2, #88]	; 0x58
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_UART_MspInit+0xe4>)
 8000f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_UART_MspInit+0xe4>)
 8000f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f74:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <HAL_UART_MspInit+0xe4>)
 8000f76:	f043 0308 	orr.w	r3, r3, #8
 8000f7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_UART_MspInit+0xe4>)
 8000f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f80:	f003 0308 	and.w	r3, r3, #8
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f96:	2303      	movs	r3, #3
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <HAL_UART_MspInit+0xf0>)
 8000fa6:	f000 fc2d 	bl	8001804 <HAL_GPIO_Init>
}
 8000faa:	bf00      	nop
 8000fac:	3730      	adds	r7, #48	; 0x30
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40008000 	.word	0x40008000
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	48001800 	.word	0x48001800
 8000fc0:	40004800 	.word	0x40004800
 8000fc4:	48000c00 	.word	0x48000c00

08000fc8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000fce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fd2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000fd6:	2206      	movs	r2, #6
 8000fd8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000fdc:	2202      	movs	r2, #2
 8000fde:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001000:	2201      	movs	r2, #1
 8001002:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001006:	f000 fda7 	bl	8001b58 <HAL_PCD_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8001010:	f7ff fcf8 	bl	8000a04 <Error_Handler>
  }

}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000268 	.word	0x20000268

0800101c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800103c:	d154      	bne.n	80010e8 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b2c      	ldr	r3, [pc, #176]	; (80010f0 <HAL_PCD_MspInit+0xd4>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	4a2b      	ldr	r2, [pc, #172]	; (80010f0 <HAL_PCD_MspInit+0xd4>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104a:	4b29      	ldr	r3, [pc, #164]	; (80010f0 <HAL_PCD_MspInit+0xd4>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001056:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800105a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001068:	230a      	movs	r3, #10
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001076:	f000 fbc5 	bl	8001804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800107a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800107e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001092:	f000 fbb7 	bl	8001804 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <HAL_PCD_MspInit+0xd4>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a15      	ldr	r2, [pc, #84]	; (80010f0 <HAL_PCD_MspInit+0xd4>)
 800109c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <HAL_PCD_MspInit+0xd4>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <HAL_PCD_MspInit+0xd4>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d114      	bne.n	80010e4 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ba:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <HAL_PCD_MspInit+0xd4>)
 80010bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010be:	4a0c      	ldr	r2, [pc, #48]	; (80010f0 <HAL_PCD_MspInit+0xd4>)
 80010c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c4:	6593      	str	r3, [r2, #88]	; 0x58
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <HAL_PCD_MspInit+0xd4>)
 80010c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80010d2:	f000 ff4d 	bl	8001f70 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_PCD_MspInit+0xd4>)
 80010d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010da:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <HAL_PCD_MspInit+0xd4>)
 80010dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80010e2:	e001      	b.n	80010e8 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80010e4:	f000 ff44 	bl	8001f70 <HAL_PWREx_EnableVddUSB>
}
 80010e8:	bf00      	nop
 80010ea:	3728      	adds	r7, #40	; 0x28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40021000 	.word	0x40021000

080010f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800112c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010fa:	e003      	b.n	8001104 <LoopCopyDataInit>

080010fc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010fe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001100:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001102:	3104      	adds	r1, #4

08001104 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001104:	480b      	ldr	r0, [pc, #44]	; (8001134 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001108:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800110a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800110c:	d3f6      	bcc.n	80010fc <CopyDataInit>
	ldr	r2, =_sbss
 800110e:	4a0b      	ldr	r2, [pc, #44]	; (800113c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001110:	e002      	b.n	8001118 <LoopFillZerobss>

08001112 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001112:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001114:	f842 3b04 	str.w	r3, [r2], #4

08001118 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <LoopForever+0x16>)
	cmp	r2, r3
 800111a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800111c:	d3f9      	bcc.n	8001112 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800111e:	f7ff fe11 	bl	8000d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001122:	f004 fcd9 	bl	8005ad8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001126:	f7ff fb63 	bl	80007f0 <main>

0800112a <LoopForever>:

LoopForever:
    b LoopForever
 800112a:	e7fe      	b.n	800112a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800112c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001130:	08005bb0 	.word	0x08005bb0
	ldr	r0, =_sdata
 8001134:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001138:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800113c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001140:	20000674 	.word	0x20000674

08001144 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC1_IRQHandler>

08001146 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001150:	2003      	movs	r0, #3
 8001152:	f000 f95b 	bl	800140c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001156:	2000      	movs	r0, #0
 8001158:	f000 f80e 	bl	8001178 <HAL_InitTick>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d002      	beq.n	8001168 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	71fb      	strb	r3, [r7, #7]
 8001166:	e001      	b.n	800116c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001168:	f7ff fd90 	bl	8000c8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800116c:	79fb      	ldrb	r3, [r7, #7]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001180:	2300      	movs	r3, #0
 8001182:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_InitTick+0x68>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d022      	beq.n	80011d2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_InitTick+0x6c>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <HAL_InitTick+0x68>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001198:	fbb1 f3f3 	udiv	r3, r1, r3
 800119c:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 f968 	bl	8001476 <HAL_SYSTICK_Config>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d10f      	bne.n	80011cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b0f      	cmp	r3, #15
 80011b0:	d809      	bhi.n	80011c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b2:	2200      	movs	r2, #0
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	f04f 30ff 	mov.w	r0, #4294967295
 80011ba:	f000 f932 	bl	8001422 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <HAL_InitTick+0x70>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	e007      	b.n	80011d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	73fb      	strb	r3, [r7, #15]
 80011ca:	e004      	b.n	80011d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
 80011d0:	e001      	b.n	80011d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000004 	.word	0x20000004

080011ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_IncTick+0x1c>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <HAL_IncTick+0x20>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4413      	add	r3, r2
 80011fa:	4a03      	ldr	r2, [pc, #12]	; (8001208 <HAL_IncTick+0x1c>)
 80011fc:	6013      	str	r3, [r2, #0]
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	20000670 	.word	0x20000670
 800120c:	20000008 	.word	0x20000008

08001210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return uwTick;
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <HAL_GetTick+0x14>)
 8001216:	681b      	ldr	r3, [r3, #0]
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000670 	.word	0x20000670

08001228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001230:	f7ff ffee 	bl	8001210 <HAL_GetTick>
 8001234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001240:	d004      	beq.n	800124c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <HAL_Delay+0x40>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	4413      	add	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800124c:	bf00      	nop
 800124e:	f7ff ffdf 	bl	8001210 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	429a      	cmp	r2, r3
 800125c:	d8f7      	bhi.n	800124e <HAL_Delay+0x26>
  {
  }
}
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000008 	.word	0x20000008

0800126c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <__NVIC_SetPriorityGrouping+0x44>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001288:	4013      	ands	r3, r2
 800128a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800129c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129e:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <__NVIC_SetPriorityGrouping+0x44>)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	60d3      	str	r3, [r2, #12]
}
 80012a4:	bf00      	nop
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <__NVIC_GetPriorityGrouping+0x18>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	f003 0307 	and.w	r3, r3, #7
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	db0b      	blt.n	80012fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	f003 021f 	and.w	r2, r3, #31
 80012e8:	4907      	ldr	r1, [pc, #28]	; (8001308 <__NVIC_EnableIRQ+0x38>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	095b      	lsrs	r3, r3, #5
 80012f0:	2001      	movs	r0, #1
 80012f2:	fa00 f202 	lsl.w	r2, r0, r2
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000e100 	.word	0xe000e100

0800130c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	6039      	str	r1, [r7, #0]
 8001316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131c:	2b00      	cmp	r3, #0
 800131e:	db0a      	blt.n	8001336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	b2da      	uxtb	r2, r3
 8001324:	490c      	ldr	r1, [pc, #48]	; (8001358 <__NVIC_SetPriority+0x4c>)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	0112      	lsls	r2, r2, #4
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	440b      	add	r3, r1
 8001330:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001334:	e00a      	b.n	800134c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4908      	ldr	r1, [pc, #32]	; (800135c <__NVIC_SetPriority+0x50>)
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	3b04      	subs	r3, #4
 8001344:	0112      	lsls	r2, r2, #4
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	440b      	add	r3, r1
 800134a:	761a      	strb	r2, [r3, #24]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000e100 	.word	0xe000e100
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001360:	b480      	push	{r7}
 8001362:	b089      	sub	sp, #36	; 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f1c3 0307 	rsb	r3, r3, #7
 800137a:	2b04      	cmp	r3, #4
 800137c:	bf28      	it	cs
 800137e:	2304      	movcs	r3, #4
 8001380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3304      	adds	r3, #4
 8001386:	2b06      	cmp	r3, #6
 8001388:	d902      	bls.n	8001390 <NVIC_EncodePriority+0x30>
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3b03      	subs	r3, #3
 800138e:	e000      	b.n	8001392 <NVIC_EncodePriority+0x32>
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	f04f 32ff 	mov.w	r2, #4294967295
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43da      	mvns	r2, r3
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	401a      	ands	r2, r3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	43d9      	mvns	r1, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	4313      	orrs	r3, r2
         );
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3724      	adds	r7, #36	; 0x24
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d8:	d301      	bcc.n	80013de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013da:	2301      	movs	r3, #1
 80013dc:	e00f      	b.n	80013fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013de:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <SysTick_Config+0x40>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e6:	210f      	movs	r1, #15
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ec:	f7ff ff8e 	bl	800130c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <SysTick_Config+0x40>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f6:	4b04      	ldr	r3, [pc, #16]	; (8001408 <SysTick_Config+0x40>)
 80013f8:	2207      	movs	r2, #7
 80013fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	e000e010 	.word	0xe000e010

0800140c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff29 	bl	800126c <__NVIC_SetPriorityGrouping>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001434:	f7ff ff3e 	bl	80012b4 <__NVIC_GetPriorityGrouping>
 8001438:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	6978      	ldr	r0, [r7, #20]
 8001440:	f7ff ff8e 	bl	8001360 <NVIC_EncodePriority>
 8001444:	4602      	mov	r2, r0
 8001446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff5d 	bl	800130c <__NVIC_SetPriority>
}
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff31 	bl	80012d0 <__NVIC_EnableIRQ>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ffa2 	bl	80013c8 <SysTick_Config>
 8001484:	4603      	mov	r3, r0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e08d      	b.n	80015be <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b47      	ldr	r3, [pc, #284]	; (80015c8 <HAL_DMA_Init+0x138>)
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d80f      	bhi.n	80014ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b45      	ldr	r3, [pc, #276]	; (80015cc <HAL_DMA_Init+0x13c>)
 80014b6:	4413      	add	r3, r2
 80014b8:	4a45      	ldr	r2, [pc, #276]	; (80015d0 <HAL_DMA_Init+0x140>)
 80014ba:	fba2 2303 	umull	r2, r3, r2, r3
 80014be:	091b      	lsrs	r3, r3, #4
 80014c0:	009a      	lsls	r2, r3, #2
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a42      	ldr	r2, [pc, #264]	; (80015d4 <HAL_DMA_Init+0x144>)
 80014ca:	641a      	str	r2, [r3, #64]	; 0x40
 80014cc:	e00e      	b.n	80014ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b40      	ldr	r3, [pc, #256]	; (80015d8 <HAL_DMA_Init+0x148>)
 80014d6:	4413      	add	r3, r2
 80014d8:	4a3d      	ldr	r2, [pc, #244]	; (80015d0 <HAL_DMA_Init+0x140>)
 80014da:	fba2 2303 	umull	r2, r3, r2, r3
 80014de:	091b      	lsrs	r3, r3, #4
 80014e0:	009a      	lsls	r2, r3, #2
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a3c      	ldr	r2, [pc, #240]	; (80015dc <HAL_DMA_Init+0x14c>)
 80014ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2202      	movs	r2, #2
 80014f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001506:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001510:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001528:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	4313      	orrs	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 f8fe 	bl	8001740 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800154c:	d102      	bne.n	8001554 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001568:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d010      	beq.n	8001594 <HAL_DMA_Init+0x104>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b04      	cmp	r3, #4
 8001578:	d80c      	bhi.n	8001594 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f91e 	bl	80017bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	e008      	b.n	80015a6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40020407 	.word	0x40020407
 80015cc:	bffdfff8 	.word	0xbffdfff8
 80015d0:	cccccccd 	.word	0xcccccccd
 80015d4:	40020000 	.word	0x40020000
 80015d8:	bffdfbf8 	.word	0xbffdfbf8
 80015dc:	40020400 	.word	0x40020400

080015e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fc:	f003 031c 	and.w	r3, r3, #28
 8001600:	2204      	movs	r2, #4
 8001602:	409a      	lsls	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4013      	ands	r3, r2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d026      	beq.n	800165a <HAL_DMA_IRQHandler+0x7a>
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	2b00      	cmp	r3, #0
 8001614:	d021      	beq.n	800165a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0320 	and.w	r3, r3, #32
 8001620:	2b00      	cmp	r3, #0
 8001622:	d107      	bne.n	8001634 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0204 	bic.w	r2, r2, #4
 8001632:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001638:	f003 021c 	and.w	r2, r3, #28
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	2104      	movs	r1, #4
 8001642:	fa01 f202 	lsl.w	r2, r1, r2
 8001646:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	2b00      	cmp	r3, #0
 800164e:	d071      	beq.n	8001734 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001658:	e06c      	b.n	8001734 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	f003 031c 	and.w	r3, r3, #28
 8001662:	2202      	movs	r2, #2
 8001664:	409a      	lsls	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4013      	ands	r3, r2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d02e      	beq.n	80016cc <HAL_DMA_IRQHandler+0xec>
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d029      	beq.n	80016cc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0320 	and.w	r3, r3, #32
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10b      	bne.n	800169e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 020a 	bic.w	r2, r2, #10
 8001694:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	f003 021c 	and.w	r2, r3, #28
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	2102      	movs	r1, #2
 80016ac:	fa01 f202 	lsl.w	r2, r1, r2
 80016b0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d038      	beq.n	8001734 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016ca:	e033      	b.n	8001734 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d0:	f003 031c 	and.w	r3, r3, #28
 80016d4:	2208      	movs	r2, #8
 80016d6:	409a      	lsls	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4013      	ands	r3, r2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d02a      	beq.n	8001736 <HAL_DMA_IRQHandler+0x156>
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d025      	beq.n	8001736 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 020e 	bic.w	r2, r2, #14
 80016f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f003 021c 	and.w	r2, r3, #28
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	2101      	movs	r1, #1
 8001708:	fa01 f202 	lsl.w	r2, r1, r2
 800170c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001728:	2b00      	cmp	r3, #0
 800172a:	d004      	beq.n	8001736 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001734:	bf00      	nop
 8001736:	bf00      	nop
}
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b17      	ldr	r3, [pc, #92]	; (80017ac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001750:	429a      	cmp	r2, r3
 8001752:	d80a      	bhi.n	800176a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001758:	089b      	lsrs	r3, r3, #2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001760:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6493      	str	r3, [r2, #72]	; 0x48
 8001768:	e007      	b.n	800177a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	089b      	lsrs	r3, r3, #2
 8001770:	009a      	lsls	r2, r3, #2
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001774:	4413      	add	r3, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	3b08      	subs	r3, #8
 8001782:	4a0c      	ldr	r2, [pc, #48]	; (80017b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001784:	fba2 2303 	umull	r2, r3, r2, r3
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001790:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1CU);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f003 031c 	and.w	r3, r3, #28
 8001798:	2201      	movs	r2, #1
 800179a:	409a      	lsls	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	651a      	str	r2, [r3, #80]	; 0x50
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	40020407 	.word	0x40020407
 80017b0:	4002081c 	.word	0x4002081c
 80017b4:	cccccccd 	.word	0xcccccccd
 80017b8:	40020880 	.word	0x40020880

080017bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80017d0:	4413      	add	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	461a      	mov	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a08      	ldr	r2, [pc, #32]	; (8001800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80017de:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	2201      	movs	r2, #1
 80017ea:	409a      	lsls	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	1000823f 	.word	0x1000823f
 8001800:	40020940 	.word	0x40020940

08001804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001804:	b480      	push	{r7}
 8001806:	b087      	sub	sp, #28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001812:	e166      	b.n	8001ae2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	2101      	movs	r1, #1
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	fa01 f303 	lsl.w	r3, r1, r3
 8001820:	4013      	ands	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 8158 	beq.w	8001adc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b02      	cmp	r3, #2
 8001832:	d003      	beq.n	800183c <HAL_GPIO_Init+0x38>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b12      	cmp	r3, #18
 800183a:	d123      	bne.n	8001884 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	08da      	lsrs	r2, r3, #3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3208      	adds	r2, #8
 8001844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	220f      	movs	r2, #15
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	08da      	lsrs	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3208      	adds	r2, #8
 800187e:	6939      	ldr	r1, [r7, #16]
 8001880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2203      	movs	r2, #3
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0203 	and.w	r2, r3, #3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d00b      	beq.n	80018d8 <HAL_GPIO_Init+0xd4>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d007      	beq.n	80018d8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018cc:	2b11      	cmp	r3, #17
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b12      	cmp	r3, #18
 80018d6:	d130      	bne.n	800193a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	2203      	movs	r2, #3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800190e:	2201      	movs	r2, #1
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	091b      	lsrs	r3, r3, #4
 8001924:	f003 0201 	and.w	r2, r3, #1
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	2203      	movs	r2, #3
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4013      	ands	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 80b2 	beq.w	8001adc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001978:	4b61      	ldr	r3, [pc, #388]	; (8001b00 <HAL_GPIO_Init+0x2fc>)
 800197a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197c:	4a60      	ldr	r2, [pc, #384]	; (8001b00 <HAL_GPIO_Init+0x2fc>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6613      	str	r3, [r2, #96]	; 0x60
 8001984:	4b5e      	ldr	r3, [pc, #376]	; (8001b00 <HAL_GPIO_Init+0x2fc>)
 8001986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001990:	4a5c      	ldr	r2, [pc, #368]	; (8001b04 <HAL_GPIO_Init+0x300>)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	089b      	lsrs	r3, r3, #2
 8001996:	3302      	adds	r3, #2
 8001998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	220f      	movs	r2, #15
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019ba:	d02b      	beq.n	8001a14 <HAL_GPIO_Init+0x210>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a52      	ldr	r2, [pc, #328]	; (8001b08 <HAL_GPIO_Init+0x304>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d025      	beq.n	8001a10 <HAL_GPIO_Init+0x20c>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a51      	ldr	r2, [pc, #324]	; (8001b0c <HAL_GPIO_Init+0x308>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d01f      	beq.n	8001a0c <HAL_GPIO_Init+0x208>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a50      	ldr	r2, [pc, #320]	; (8001b10 <HAL_GPIO_Init+0x30c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d019      	beq.n	8001a08 <HAL_GPIO_Init+0x204>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a4f      	ldr	r2, [pc, #316]	; (8001b14 <HAL_GPIO_Init+0x310>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d013      	beq.n	8001a04 <HAL_GPIO_Init+0x200>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a4e      	ldr	r2, [pc, #312]	; (8001b18 <HAL_GPIO_Init+0x314>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d00d      	beq.n	8001a00 <HAL_GPIO_Init+0x1fc>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a4d      	ldr	r2, [pc, #308]	; (8001b1c <HAL_GPIO_Init+0x318>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d007      	beq.n	80019fc <HAL_GPIO_Init+0x1f8>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a4c      	ldr	r2, [pc, #304]	; (8001b20 <HAL_GPIO_Init+0x31c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d101      	bne.n	80019f8 <HAL_GPIO_Init+0x1f4>
 80019f4:	2307      	movs	r3, #7
 80019f6:	e00e      	b.n	8001a16 <HAL_GPIO_Init+0x212>
 80019f8:	2308      	movs	r3, #8
 80019fa:	e00c      	b.n	8001a16 <HAL_GPIO_Init+0x212>
 80019fc:	2306      	movs	r3, #6
 80019fe:	e00a      	b.n	8001a16 <HAL_GPIO_Init+0x212>
 8001a00:	2305      	movs	r3, #5
 8001a02:	e008      	b.n	8001a16 <HAL_GPIO_Init+0x212>
 8001a04:	2304      	movs	r3, #4
 8001a06:	e006      	b.n	8001a16 <HAL_GPIO_Init+0x212>
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e004      	b.n	8001a16 <HAL_GPIO_Init+0x212>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e002      	b.n	8001a16 <HAL_GPIO_Init+0x212>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <HAL_GPIO_Init+0x212>
 8001a14:	2300      	movs	r3, #0
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	f002 0203 	and.w	r2, r2, #3
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	4093      	lsls	r3, r2
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a26:	4937      	ldr	r1, [pc, #220]	; (8001b04 <HAL_GPIO_Init+0x300>)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a34:	4b3b      	ldr	r3, [pc, #236]	; (8001b24 <HAL_GPIO_Init+0x320>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a58:	4a32      	ldr	r2, [pc, #200]	; (8001b24 <HAL_GPIO_Init+0x320>)
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a5e:	4b31      	ldr	r3, [pc, #196]	; (8001b24 <HAL_GPIO_Init+0x320>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a82:	4a28      	ldr	r2, [pc, #160]	; (8001b24 <HAL_GPIO_Init+0x320>)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a88:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <HAL_GPIO_Init+0x320>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aac:	4a1d      	ldr	r2, [pc, #116]	; (8001b24 <HAL_GPIO_Init+0x320>)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <HAL_GPIO_Init+0x320>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ad6:	4a13      	ldr	r2, [pc, #76]	; (8001b24 <HAL_GPIO_Init+0x320>)
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f47f ae91 	bne.w	8001814 <HAL_GPIO_Init+0x10>
  }
}
 8001af2:	bf00      	nop
 8001af4:	371c      	adds	r7, #28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40010000 	.word	0x40010000
 8001b08:	48000400 	.word	0x48000400
 8001b0c:	48000800 	.word	0x48000800
 8001b10:	48000c00 	.word	0x48000c00
 8001b14:	48001000 	.word	0x48001000
 8001b18:	48001400 	.word	0x48001400
 8001b1c:	48001800 	.word	0x48001800
 8001b20:	48001c00 	.word	0x48001c00
 8001b24:	40010400 	.word	0x40010400

08001b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
 8001b34:	4613      	mov	r3, r2
 8001b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b38:	787b      	ldrb	r3, [r7, #1]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b44:	e002      	b.n	8001b4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b46:	887a      	ldrh	r2, [r7, #2]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b5a:	b08f      	sub	sp, #60	; 0x3c
 8001b5c:	af0a      	add	r7, sp, #40	; 0x28
 8001b5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e116      	b.n	8001d98 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d106      	bne.n	8001b8a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff fa49 	bl	800101c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d102      	bne.n	8001ba4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 fd69 	bl	8005680 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	687e      	ldr	r6, [r7, #4]
 8001bb6:	466d      	mov	r5, sp
 8001bb8:	f106 0410 	add.w	r4, r6, #16
 8001bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bc8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bcc:	1d33      	adds	r3, r6, #4
 8001bce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bd0:	6838      	ldr	r0, [r7, #0]
 8001bd2:	f003 fd03 	bl	80055dc <USB_CoreInit>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2202      	movs	r2, #2
 8001be0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0d7      	b.n	8001d98 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f003 fd57 	bl	80056a2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73fb      	strb	r3, [r7, #15]
 8001bf8:	e04a      	b.n	8001c90 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bfa:	7bfa      	ldrb	r2, [r7, #15]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	1a9b      	subs	r3, r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	333d      	adds	r3, #61	; 0x3d
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c0e:	7bfa      	ldrb	r2, [r7, #15]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	333c      	adds	r3, #60	; 0x3c
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c22:	7bfa      	ldrb	r2, [r7, #15]
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	b298      	uxth	r0, r3
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	1a9b      	subs	r3, r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	440b      	add	r3, r1
 8001c34:	3342      	adds	r3, #66	; 0x42
 8001c36:	4602      	mov	r2, r0
 8001c38:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	1a9b      	subs	r3, r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	440b      	add	r3, r1
 8001c48:	333f      	adds	r3, #63	; 0x3f
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	1a9b      	subs	r3, r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	3344      	adds	r3, #68	; 0x44
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c62:	7bfa      	ldrb	r2, [r7, #15]
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	1a9b      	subs	r3, r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	440b      	add	r3, r1
 8001c70:	3348      	adds	r3, #72	; 0x48
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c76:	7bfa      	ldrb	r2, [r7, #15]
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	1a9b      	subs	r3, r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	440b      	add	r3, r1
 8001c84:	3350      	adds	r3, #80	; 0x50
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
 8001c90:	7bfa      	ldrb	r2, [r7, #15]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d3af      	bcc.n	8001bfa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73fb      	strb	r3, [r7, #15]
 8001c9e:	e044      	b.n	8001d2a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	1a9b      	subs	r3, r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cb6:	7bfa      	ldrb	r2, [r7, #15]
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ccc:	7bfa      	ldrb	r2, [r7, #15]
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	1a9b      	subs	r3, r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	440b      	add	r3, r1
 8001cda:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ce2:	7bfa      	ldrb	r2, [r7, #15]
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	1a9b      	subs	r3, r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	1a9b      	subs	r3, r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	1a9b      	subs	r3, r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
 8001d26:	3301      	adds	r3, #1
 8001d28:	73fb      	strb	r3, [r7, #15]
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d3b5      	bcc.n	8001ca0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	687e      	ldr	r6, [r7, #4]
 8001d3c:	466d      	mov	r5, sp
 8001d3e:	f106 0410 	add.w	r4, r6, #16
 8001d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d52:	1d33      	adds	r3, r6, #4
 8001d54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d56:	6838      	ldr	r0, [r7, #0]
 8001d58:	f003 fcce 	bl	80056f8 <USB_DevInit>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d005      	beq.n	8001d6e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2202      	movs	r2, #2
 8001d66:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e014      	b.n	8001d98 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d102      	bne.n	8001d8c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f80a 	bl	8001da0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f003 fe54 	bl	8005a3e <USB_DevDisconnect>

  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001da0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	f043 0303 	orr.w	r3, r3, #3
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001df8:	d102      	bne.n	8001e00 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dfe:	e00b      	b.n	8001e18 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e0e:	d102      	bne.n	8001e16 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e14:	e000      	b.n	8001e18 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001e16:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40007000 	.word	0x40007000

08001e28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d141      	bne.n	8001eba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e36:	4b4b      	ldr	r3, [pc, #300]	; (8001f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e42:	d131      	bne.n	8001ea8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e44:	4b47      	ldr	r3, [pc, #284]	; (8001f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e4a:	4a46      	ldr	r2, [pc, #280]	; (8001f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e54:	4b43      	ldr	r3, [pc, #268]	; (8001f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e5c:	4a41      	ldr	r2, [pc, #260]	; (8001f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001e64:	4b40      	ldr	r3, [pc, #256]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2232      	movs	r2, #50	; 0x32
 8001e6a:	fb02 f303 	mul.w	r3, r2, r3
 8001e6e:	4a3f      	ldr	r2, [pc, #252]	; (8001f6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e70:	fba2 2303 	umull	r2, r3, r2, r3
 8001e74:	0c9b      	lsrs	r3, r3, #18
 8001e76:	3301      	adds	r3, #1
 8001e78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e7a:	e002      	b.n	8001e82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e82:	4b38      	ldr	r3, [pc, #224]	; (8001f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e8e:	d102      	bne.n	8001e96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f2      	bne.n	8001e7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e96:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea2:	d158      	bne.n	8001f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e057      	b.n	8001f58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ea8:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eae:	4a2d      	ldr	r2, [pc, #180]	; (8001f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001eb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001eb8:	e04d      	b.n	8001f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ec0:	d141      	bne.n	8001f46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ec2:	4b28      	ldr	r3, [pc, #160]	; (8001f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ece:	d131      	bne.n	8001f34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ed0:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ed6:	4a23      	ldr	r2, [pc, #140]	; (8001f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001edc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ee0:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ee8:	4a1e      	ldr	r2, [pc, #120]	; (8001f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2232      	movs	r2, #50	; 0x32
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	4a1c      	ldr	r2, [pc, #112]	; (8001f6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001efc:	fba2 2303 	umull	r2, r3, r2, r3
 8001f00:	0c9b      	lsrs	r3, r3, #18
 8001f02:	3301      	adds	r3, #1
 8001f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f06:	e002      	b.n	8001f0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f1a:	d102      	bne.n	8001f22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f2      	bne.n	8001f08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f2e:	d112      	bne.n	8001f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e011      	b.n	8001f58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f44:	e007      	b.n	8001f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f4e:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f54:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	40007000 	.word	0x40007000
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	431bde83 	.word	0x431bde83

08001f70 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <HAL_PWREx_EnableVddUSB+0x1c>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <HAL_PWREx_EnableVddUSB+0x1c>)
 8001f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f7e:	6053      	str	r3, [r2, #4]
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40007000 	.word	0x40007000

08001f90 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_PWREx_EnableVddIO2+0x1c>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	4a04      	ldr	r2, [pc, #16]	; (8001fac <HAL_PWREx_EnableVddIO2+0x1c>)
 8001f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f9e:	6053      	str	r3, [r2, #4]
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40007000 	.word	0x40007000

08001fb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e3db      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fc2:	4ba4      	ldr	r3, [pc, #656]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fcc:	4ba1      	ldr	r3, [pc, #644]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 80e1 	beq.w	80021a6 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d007      	beq.n	8001ffa <HAL_RCC_OscConfig+0x4a>
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	2b0c      	cmp	r3, #12
 8001fee:	f040 8088 	bne.w	8002102 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	f040 8084 	bne.w	8002102 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ffa:	4b96      	ldr	r3, [pc, #600]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <HAL_RCC_OscConfig+0x62>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e3b3      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1a      	ldr	r2, [r3, #32]
 8002016:	4b8f      	ldr	r3, [pc, #572]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d004      	beq.n	800202c <HAL_RCC_OscConfig+0x7c>
 8002022:	4b8c      	ldr	r3, [pc, #560]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800202a:	e005      	b.n	8002038 <HAL_RCC_OscConfig+0x88>
 800202c:	4b89      	ldr	r3, [pc, #548]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 800202e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002032:	091b      	lsrs	r3, r3, #4
 8002034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002038:	4293      	cmp	r3, r2
 800203a:	d223      	bcs.n	8002084 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	4618      	mov	r0, r3
 8002042:	f000 fd91 	bl	8002b68 <RCC_SetFlashLatencyFromMSIRange>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e394      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002050:	4b80      	ldr	r3, [pc, #512]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a7f      	ldr	r2, [pc, #508]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 8002056:	f043 0308 	orr.w	r3, r3, #8
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4b7d      	ldr	r3, [pc, #500]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	497a      	ldr	r1, [pc, #488]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800206e:	4b79      	ldr	r3, [pc, #484]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	4975      	ldr	r1, [pc, #468]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 800207e:	4313      	orrs	r3, r2
 8002080:	604b      	str	r3, [r1, #4]
 8002082:	e022      	b.n	80020ca <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002084:	4b73      	ldr	r3, [pc, #460]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a72      	ldr	r2, [pc, #456]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 800208a:	f043 0308 	orr.w	r3, r3, #8
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	4b70      	ldr	r3, [pc, #448]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	496d      	ldr	r1, [pc, #436]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020a2:	4b6c      	ldr	r3, [pc, #432]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	4968      	ldr	r1, [pc, #416]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 fd54 	bl	8002b68 <RCC_SetFlashLatencyFromMSIRange>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e357      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020ca:	f000 fc8b 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 80020ce:	4601      	mov	r1, r0
 80020d0:	4b60      	ldr	r3, [pc, #384]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	4a5f      	ldr	r2, [pc, #380]	; (8002258 <HAL_RCC_OscConfig+0x2a8>)
 80020dc:	5cd3      	ldrb	r3, [r2, r3]
 80020de:	f003 031f 	and.w	r3, r3, #31
 80020e2:	fa21 f303 	lsr.w	r3, r1, r3
 80020e6:	4a5d      	ldr	r2, [pc, #372]	; (800225c <HAL_RCC_OscConfig+0x2ac>)
 80020e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020ea:	4b5d      	ldr	r3, [pc, #372]	; (8002260 <HAL_RCC_OscConfig+0x2b0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff f842 	bl	8001178 <HAL_InitTick>
 80020f4:	4603      	mov	r3, r0
 80020f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d052      	beq.n	80021a4 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	e33b      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d032      	beq.n	8002170 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800210a:	4b52      	ldr	r3, [pc, #328]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a51      	ldr	r2, [pc, #324]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002116:	f7ff f87b 	bl	8001210 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800211e:	f7ff f877 	bl	8001210 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e324      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002130:	4b48      	ldr	r3, [pc, #288]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800213c:	4b45      	ldr	r3, [pc, #276]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a44      	ldr	r2, [pc, #272]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 8002142:	f043 0308 	orr.w	r3, r3, #8
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	4b42      	ldr	r3, [pc, #264]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	493f      	ldr	r1, [pc, #252]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 8002156:	4313      	orrs	r3, r2
 8002158:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800215a:	4b3e      	ldr	r3, [pc, #248]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	493a      	ldr	r1, [pc, #232]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 800216a:	4313      	orrs	r3, r2
 800216c:	604b      	str	r3, [r1, #4]
 800216e:	e01a      	b.n	80021a6 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002170:	4b38      	ldr	r3, [pc, #224]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a37      	ldr	r2, [pc, #220]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 8002176:	f023 0301 	bic.w	r3, r3, #1
 800217a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800217c:	f7ff f848 	bl	8001210 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002184:	f7ff f844 	bl	8001210 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e2f1      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002196:	4b2f      	ldr	r3, [pc, #188]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x1d4>
 80021a2:	e000      	b.n	80021a6 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d074      	beq.n	800229c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d005      	beq.n	80021c4 <HAL_RCC_OscConfig+0x214>
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	2b0c      	cmp	r3, #12
 80021bc:	d10e      	bne.n	80021dc <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d10b      	bne.n	80021dc <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c4:	4b23      	ldr	r3, [pc, #140]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d064      	beq.n	800229a <HAL_RCC_OscConfig+0x2ea>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d160      	bne.n	800229a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e2ce      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e4:	d106      	bne.n	80021f4 <HAL_RCC_OscConfig+0x244>
 80021e6:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a1a      	ldr	r2, [pc, #104]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 80021ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	e01d      	b.n	8002230 <HAL_RCC_OscConfig+0x280>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0x268>
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a14      	ldr	r2, [pc, #80]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 8002204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	4b12      	ldr	r3, [pc, #72]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a11      	ldr	r2, [pc, #68]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 8002210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e00b      	b.n	8002230 <HAL_RCC_OscConfig+0x280>
 8002218:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a0d      	ldr	r2, [pc, #52]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 800221e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <HAL_RCC_OscConfig+0x2a4>)
 800222a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d01c      	beq.n	8002272 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7fe ffea 	bl	8001210 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800223e:	e011      	b.n	8002264 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002240:	f7fe ffe6 	bl	8001210 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	; 0x64
 800224c:	d90a      	bls.n	8002264 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e293      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	08005b58 	.word	0x08005b58
 800225c:	20000000 	.word	0x20000000
 8002260:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002264:	4bae      	ldr	r3, [pc, #696]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0e7      	beq.n	8002240 <HAL_RCC_OscConfig+0x290>
 8002270:	e014      	b.n	800229c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002272:	f7fe ffcd 	bl	8001210 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800227a:	f7fe ffc9 	bl	8001210 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b64      	cmp	r3, #100	; 0x64
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e276      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800228c:	4ba4      	ldr	r3, [pc, #656]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1f0      	bne.n	800227a <HAL_RCC_OscConfig+0x2ca>
 8002298:	e000      	b.n	800229c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d060      	beq.n	800236a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d005      	beq.n	80022ba <HAL_RCC_OscConfig+0x30a>
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2b0c      	cmp	r3, #12
 80022b2:	d119      	bne.n	80022e8 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d116      	bne.n	80022e8 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022ba:	4b99      	ldr	r3, [pc, #612]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_RCC_OscConfig+0x322>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e253      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d2:	4b93      	ldr	r3, [pc, #588]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	061b      	lsls	r3, r3, #24
 80022e0:	498f      	ldr	r1, [pc, #572]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022e6:	e040      	b.n	800236a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d023      	beq.n	8002338 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f0:	4b8b      	ldr	r3, [pc, #556]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a8a      	ldr	r2, [pc, #552]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 80022f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe ff88 	bl	8001210 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002304:	f7fe ff84 	bl	8001210 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e231      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002316:	4b82      	ldr	r3, [pc, #520]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002322:	4b7f      	ldr	r3, [pc, #508]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	061b      	lsls	r3, r3, #24
 8002330:	497b      	ldr	r1, [pc, #492]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 8002332:	4313      	orrs	r3, r2
 8002334:	604b      	str	r3, [r1, #4]
 8002336:	e018      	b.n	800236a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002338:	4b79      	ldr	r3, [pc, #484]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a78      	ldr	r2, [pc, #480]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 800233e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002342:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7fe ff64 	bl	8001210 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800234c:	f7fe ff60 	bl	8001210 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e20d      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800235e:	4b70      	ldr	r3, [pc, #448]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d03c      	beq.n	80023f0 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d01c      	beq.n	80023b8 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800237e:	4b68      	ldr	r3, [pc, #416]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 8002380:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002384:	4a66      	ldr	r2, [pc, #408]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238e:	f7fe ff3f 	bl	8001210 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002396:	f7fe ff3b 	bl	8001210 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e1e8      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023a8:	4b5d      	ldr	r3, [pc, #372]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 80023aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0ef      	beq.n	8002396 <HAL_RCC_OscConfig+0x3e6>
 80023b6:	e01b      	b.n	80023f0 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b8:	4b59      	ldr	r3, [pc, #356]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 80023ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023be:	4a58      	ldr	r2, [pc, #352]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c8:	f7fe ff22 	bl	8001210 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d0:	f7fe ff1e 	bl	8001210 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e1cb      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023e2:	4b4f      	ldr	r3, [pc, #316]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 80023e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1ef      	bne.n	80023d0 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 80a5 	beq.w	8002548 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023fe:	2300      	movs	r3, #0
 8002400:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 8002404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10d      	bne.n	800242a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800240e:	4b44      	ldr	r3, [pc, #272]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 8002410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002412:	4a43      	ldr	r2, [pc, #268]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 8002414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002418:	6593      	str	r3, [r2, #88]	; 0x58
 800241a:	4b41      	ldr	r3, [pc, #260]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 800241c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002426:	2301      	movs	r3, #1
 8002428:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800242a:	4b3e      	ldr	r3, [pc, #248]	; (8002524 <HAL_RCC_OscConfig+0x574>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002432:	2b00      	cmp	r3, #0
 8002434:	d118      	bne.n	8002468 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002436:	4b3b      	ldr	r3, [pc, #236]	; (8002524 <HAL_RCC_OscConfig+0x574>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a3a      	ldr	r2, [pc, #232]	; (8002524 <HAL_RCC_OscConfig+0x574>)
 800243c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002442:	f7fe fee5 	bl	8001210 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244a:	f7fe fee1 	bl	8001210 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e18e      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800245c:	4b31      	ldr	r3, [pc, #196]	; (8002524 <HAL_RCC_OscConfig+0x574>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0f0      	beq.n	800244a <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d108      	bne.n	8002482 <HAL_RCC_OscConfig+0x4d2>
 8002470:	4b2b      	ldr	r3, [pc, #172]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	4a2a      	ldr	r2, [pc, #168]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002480:	e024      	b.n	80024cc <HAL_RCC_OscConfig+0x51c>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b05      	cmp	r3, #5
 8002488:	d110      	bne.n	80024ac <HAL_RCC_OscConfig+0x4fc>
 800248a:	4b25      	ldr	r3, [pc, #148]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 800248c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002490:	4a23      	ldr	r2, [pc, #140]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 8002492:	f043 0304 	orr.w	r3, r3, #4
 8002496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800249a:	4b21      	ldr	r3, [pc, #132]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 800249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a0:	4a1f      	ldr	r2, [pc, #124]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024aa:	e00f      	b.n	80024cc <HAL_RCC_OscConfig+0x51c>
 80024ac:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 80024ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b2:	4a1b      	ldr	r2, [pc, #108]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024bc:	4b18      	ldr	r3, [pc, #96]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c2:	4a17      	ldr	r2, [pc, #92]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 80024c4:	f023 0304 	bic.w	r3, r3, #4
 80024c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d016      	beq.n	8002502 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d4:	f7fe fe9c 	bl	8001210 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024dc:	f7fe fe98 	bl	8001210 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e143      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024f2:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_OscConfig+0x570>)
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0ed      	beq.n	80024dc <HAL_RCC_OscConfig+0x52c>
 8002500:	e019      	b.n	8002536 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002502:	f7fe fe85 	bl	8001210 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002508:	e00e      	b.n	8002528 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250a:	f7fe fe81 	bl	8001210 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	f241 3288 	movw	r2, #5000	; 0x1388
 8002518:	4293      	cmp	r3, r2
 800251a:	d905      	bls.n	8002528 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e12c      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
 8002520:	40021000 	.word	0x40021000
 8002524:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002528:	4b96      	ldr	r3, [pc, #600]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1e9      	bne.n	800250a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002536:	7ffb      	ldrb	r3, [r7, #31]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d105      	bne.n	8002548 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800253c:	4b91      	ldr	r3, [pc, #580]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 800253e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002540:	4a90      	ldr	r2, [pc, #576]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 8002542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002546:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b00      	cmp	r3, #0
 8002552:	d03c      	beq.n	80025ce <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	2b00      	cmp	r3, #0
 800255a:	d01c      	beq.n	8002596 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800255c:	4b89      	ldr	r3, [pc, #548]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 800255e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002562:	4a88      	ldr	r2, [pc, #544]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256c:	f7fe fe50 	bl	8001210 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002574:	f7fe fe4c 	bl	8001210 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e0f9      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002586:	4b7f      	ldr	r3, [pc, #508]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 8002588:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0ef      	beq.n	8002574 <HAL_RCC_OscConfig+0x5c4>
 8002594:	e01b      	b.n	80025ce <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002596:	4b7b      	ldr	r3, [pc, #492]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 8002598:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800259c:	4a79      	ldr	r2, [pc, #484]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 800259e:	f023 0301 	bic.w	r3, r3, #1
 80025a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a6:	f7fe fe33 	bl	8001210 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025ae:	f7fe fe2f 	bl	8001210 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e0dc      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025c0:	4b70      	ldr	r3, [pc, #448]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 80025c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1ef      	bne.n	80025ae <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 80d0 	beq.w	8002778 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2b0c      	cmp	r3, #12
 80025dc:	f000 808d 	beq.w	80026fa <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d15a      	bne.n	800269e <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e8:	4b66      	ldr	r3, [pc, #408]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a65      	ldr	r2, [pc, #404]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 80025ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7fe fe0c 	bl	8001210 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fc:	f7fe fe08 	bl	8001210 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e0b5      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800260e:	4b5d      	ldr	r3, [pc, #372]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800261a:	4b5a      	ldr	r3, [pc, #360]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	4b5a      	ldr	r3, [pc, #360]	; (8002788 <HAL_RCC_OscConfig+0x7d8>)
 8002620:	4013      	ands	r3, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800262a:	3a01      	subs	r2, #1
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	4311      	orrs	r1, r2
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002634:	0212      	lsls	r2, r2, #8
 8002636:	4311      	orrs	r1, r2
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800263c:	0852      	lsrs	r2, r2, #1
 800263e:	3a01      	subs	r2, #1
 8002640:	0552      	lsls	r2, r2, #21
 8002642:	4311      	orrs	r1, r2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002648:	0852      	lsrs	r2, r2, #1
 800264a:	3a01      	subs	r2, #1
 800264c:	0652      	lsls	r2, r2, #25
 800264e:	4311      	orrs	r1, r2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002654:	06d2      	lsls	r2, r2, #27
 8002656:	430a      	orrs	r2, r1
 8002658:	494a      	ldr	r1, [pc, #296]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 800265a:	4313      	orrs	r3, r2
 800265c:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800265e:	4b49      	ldr	r3, [pc, #292]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a48      	ldr	r2, [pc, #288]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 8002664:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002668:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800266a:	4b46      	ldr	r3, [pc, #280]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	4a45      	ldr	r2, [pc, #276]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 8002670:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002674:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002676:	f7fe fdcb 	bl	8001210 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267e:	f7fe fdc7 	bl	8001210 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e074      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002690:	4b3c      	ldr	r3, [pc, #240]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x6ce>
 800269c:	e06c      	b.n	8002778 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269e:	4b39      	ldr	r3, [pc, #228]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a38      	ldr	r2, [pc, #224]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 80026a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026a8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80026aa:	4b36      	ldr	r3, [pc, #216]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d105      	bne.n	80026c2 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80026b6:	4b33      	ldr	r3, [pc, #204]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	4a32      	ldr	r2, [pc, #200]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 80026bc:	f023 0303 	bic.w	r3, r3, #3
 80026c0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026c2:	4b30      	ldr	r3, [pc, #192]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	4a2f      	ldr	r2, [pc, #188]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 80026c8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80026cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d2:	f7fe fd9d 	bl	8001210 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026da:	f7fe fd99 	bl	8001210 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e046      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ec:	4b25      	ldr	r3, [pc, #148]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f0      	bne.n	80026da <HAL_RCC_OscConfig+0x72a>
 80026f8:	e03e      	b.n	8002778 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e039      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002706:	4b1f      	ldr	r3, [pc, #124]	; (8002784 <HAL_RCC_OscConfig+0x7d4>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f003 0203 	and.w	r2, r3, #3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	429a      	cmp	r2, r3
 8002718:	d12c      	bne.n	8002774 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	3b01      	subs	r3, #1
 8002726:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002728:	429a      	cmp	r2, r3
 800272a:	d123      	bne.n	8002774 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002736:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002738:	429a      	cmp	r2, r3
 800273a:	d11b      	bne.n	8002774 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002746:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002748:	429a      	cmp	r2, r3
 800274a:	d113      	bne.n	8002774 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002756:	085b      	lsrs	r3, r3, #1
 8002758:	3b01      	subs	r3, #1
 800275a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800275c:	429a      	cmp	r2, r3
 800275e:	d109      	bne.n	8002774 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	085b      	lsrs	r3, r3, #1
 800276c:	3b01      	subs	r3, #1
 800276e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002770:	429a      	cmp	r2, r3
 8002772:	d001      	beq.n	8002778 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3720      	adds	r7, #32
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000
 8002788:	019d800c 	.word	0x019d800c

0800278c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e10f      	b.n	80029c4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027a4:	4b89      	ldr	r3, [pc, #548]	; (80029cc <HAL_RCC_ClockConfig+0x240>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d910      	bls.n	80027d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b2:	4b86      	ldr	r3, [pc, #536]	; (80029cc <HAL_RCC_ClockConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 020f 	bic.w	r2, r3, #15
 80027ba:	4984      	ldr	r1, [pc, #528]	; (80029cc <HAL_RCC_ClockConfig+0x240>)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c2:	4b82      	ldr	r3, [pc, #520]	; (80029cc <HAL_RCC_ClockConfig+0x240>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0f7      	b.n	80029c4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 8089 	beq.w	80028f4 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d133      	bne.n	8002852 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ea:	4b79      	ldr	r3, [pc, #484]	; (80029d0 <HAL_RCC_ClockConfig+0x244>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e0e4      	b.n	80029c4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80027fa:	f000 fa0f 	bl	8002c1c <RCC_GetSysClockFreqFromPLLSource>
 80027fe:	4602      	mov	r2, r0
 8002800:	4b74      	ldr	r3, [pc, #464]	; (80029d4 <HAL_RCC_ClockConfig+0x248>)
 8002802:	429a      	cmp	r2, r3
 8002804:	d955      	bls.n	80028b2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002806:	4b72      	ldr	r3, [pc, #456]	; (80029d0 <HAL_RCC_ClockConfig+0x244>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10a      	bne.n	8002828 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002812:	4b6f      	ldr	r3, [pc, #444]	; (80029d0 <HAL_RCC_ClockConfig+0x244>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800281a:	4a6d      	ldr	r2, [pc, #436]	; (80029d0 <HAL_RCC_ClockConfig+0x244>)
 800281c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002820:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	e044      	b.n	80028b2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d03e      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x126>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d13a      	bne.n	80028b2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800283c:	4b64      	ldr	r3, [pc, #400]	; (80029d0 <HAL_RCC_ClockConfig+0x244>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002844:	4a62      	ldr	r2, [pc, #392]	; (80029d0 <HAL_RCC_ClockConfig+0x244>)
 8002846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800284a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	e02f      	b.n	80028b2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800285a:	4b5d      	ldr	r3, [pc, #372]	; (80029d0 <HAL_RCC_ClockConfig+0x244>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d115      	bne.n	8002892 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e0ac      	b.n	80029c4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d107      	bne.n	8002882 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002872:	4b57      	ldr	r3, [pc, #348]	; (80029d0 <HAL_RCC_ClockConfig+0x244>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d109      	bne.n	8002892 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e0a0      	b.n	80029c4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002882:	4b53      	ldr	r3, [pc, #332]	; (80029d0 <HAL_RCC_ClockConfig+0x244>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e098      	b.n	80029c4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002892:	f000 f8a7 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 8002896:	4602      	mov	r2, r0
 8002898:	4b4e      	ldr	r3, [pc, #312]	; (80029d4 <HAL_RCC_ClockConfig+0x248>)
 800289a:	429a      	cmp	r2, r3
 800289c:	d909      	bls.n	80028b2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800289e:	4b4c      	ldr	r3, [pc, #304]	; (80029d0 <HAL_RCC_ClockConfig+0x244>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028a6:	4a4a      	ldr	r2, [pc, #296]	; (80029d0 <HAL_RCC_ClockConfig+0x244>)
 80028a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80028ae:	2380      	movs	r3, #128	; 0x80
 80028b0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028b2:	4b47      	ldr	r3, [pc, #284]	; (80029d0 <HAL_RCC_ClockConfig+0x244>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f023 0203 	bic.w	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4944      	ldr	r1, [pc, #272]	; (80029d0 <HAL_RCC_ClockConfig+0x244>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c4:	f7fe fca4 	bl	8001210 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	e00a      	b.n	80028e2 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028cc:	f7fe fca0 	bl	8001210 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e070      	b.n	80029c4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	4b3b      	ldr	r3, [pc, #236]	; (80029d0 <HAL_RCC_ClockConfig+0x244>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 020c 	and.w	r2, r3, #12
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d1eb      	bne.n	80028cc <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d009      	beq.n	8002914 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002900:	4b33      	ldr	r3, [pc, #204]	; (80029d0 <HAL_RCC_ClockConfig+0x244>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4930      	ldr	r1, [pc, #192]	; (80029d0 <HAL_RCC_ClockConfig+0x244>)
 800290e:	4313      	orrs	r3, r2
 8002910:	608b      	str	r3, [r1, #8]
 8002912:	e008      	b.n	8002926 <HAL_RCC_ClockConfig+0x19a>
  }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2b80      	cmp	r3, #128	; 0x80
 8002918:	d105      	bne.n	8002926 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800291a:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <HAL_RCC_ClockConfig+0x244>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	4a2c      	ldr	r2, [pc, #176]	; (80029d0 <HAL_RCC_ClockConfig+0x244>)
 8002920:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002924:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002926:	4b29      	ldr	r3, [pc, #164]	; (80029cc <HAL_RCC_ClockConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d210      	bcs.n	8002956 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002934:	4b25      	ldr	r3, [pc, #148]	; (80029cc <HAL_RCC_ClockConfig+0x240>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f023 020f 	bic.w	r2, r3, #15
 800293c:	4923      	ldr	r1, [pc, #140]	; (80029cc <HAL_RCC_ClockConfig+0x240>)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	4313      	orrs	r3, r2
 8002942:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002944:	4b21      	ldr	r3, [pc, #132]	; (80029cc <HAL_RCC_ClockConfig+0x240>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d001      	beq.n	8002956 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e036      	b.n	80029c4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b00      	cmp	r3, #0
 8002960:	d008      	beq.n	8002974 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002962:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <HAL_RCC_ClockConfig+0x244>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	4918      	ldr	r1, [pc, #96]	; (80029d0 <HAL_RCC_ClockConfig+0x244>)
 8002970:	4313      	orrs	r3, r2
 8002972:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d009      	beq.n	8002994 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002980:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <HAL_RCC_ClockConfig+0x244>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4910      	ldr	r1, [pc, #64]	; (80029d0 <HAL_RCC_ClockConfig+0x244>)
 8002990:	4313      	orrs	r3, r2
 8002992:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002994:	f000 f826 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 8002998:	4601      	mov	r1, r0
 800299a:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <HAL_RCC_ClockConfig+0x244>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	091b      	lsrs	r3, r3, #4
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	4a0c      	ldr	r2, [pc, #48]	; (80029d8 <HAL_RCC_ClockConfig+0x24c>)
 80029a6:	5cd3      	ldrb	r3, [r2, r3]
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	fa21 f303 	lsr.w	r3, r1, r3
 80029b0:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <HAL_RCC_ClockConfig+0x250>)
 80029b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029b4:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <HAL_RCC_ClockConfig+0x254>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe fbdd 	bl	8001178 <HAL_InitTick>
 80029be:	4603      	mov	r3, r0
 80029c0:	73fb      	strb	r3, [r7, #15]

  return status;
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40022000 	.word	0x40022000
 80029d0:	40021000 	.word	0x40021000
 80029d4:	04c4b400 	.word	0x04c4b400
 80029d8:	08005b58 	.word	0x08005b58
 80029dc:	20000000 	.word	0x20000000
 80029e0:	20000004 	.word	0x20000004

080029e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b089      	sub	sp, #36	; 0x24
 80029e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
 80029ee:	2300      	movs	r3, #0
 80029f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029f2:	4b3d      	ldr	r3, [pc, #244]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x104>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029fc:	4b3a      	ldr	r3, [pc, #232]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x104>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_GetSysClockFreq+0x34>
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	2b0c      	cmp	r3, #12
 8002a10:	d121      	bne.n	8002a56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d11e      	bne.n	8002a56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a18:	4b33      	ldr	r3, [pc, #204]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d107      	bne.n	8002a34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a24:	4b30      	ldr	r3, [pc, #192]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a2a:	0a1b      	lsrs	r3, r3, #8
 8002a2c:	f003 030f 	and.w	r3, r3, #15
 8002a30:	61fb      	str	r3, [r7, #28]
 8002a32:	e005      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a34:	4b2c      	ldr	r3, [pc, #176]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a40:	4a2a      	ldr	r2, [pc, #168]	; (8002aec <HAL_RCC_GetSysClockFreq+0x108>)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10d      	bne.n	8002a6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a54:	e00a      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d102      	bne.n	8002a62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a5c:	4b24      	ldr	r3, [pc, #144]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a5e:	61bb      	str	r3, [r7, #24]
 8002a60:	e004      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a68:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	2b0c      	cmp	r3, #12
 8002a70:	d133      	bne.n	8002ada <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a72:	4b1d      	ldr	r3, [pc, #116]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d002      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0xa4>
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d003      	beq.n	8002a8e <HAL_RCC_GetSysClockFreq+0xaa>
 8002a86:	e005      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a8a:	617b      	str	r3, [r7, #20]
      break;
 8002a8c:	e005      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a8e:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a90:	617b      	str	r3, [r7, #20]
      break;
 8002a92:	e002      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	617b      	str	r3, [r7, #20]
      break;
 8002a98:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a9a:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	091b      	lsrs	r3, r3, #4
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002aa8:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	0a1b      	lsrs	r3, r3, #8
 8002aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	fb02 f203 	mul.w	r2, r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abe:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ac0:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	0e5b      	lsrs	r3, r3, #25
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	3301      	adds	r3, #1
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ada:	69bb      	ldr	r3, [r7, #24]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3724      	adds	r7, #36	; 0x24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	08005b70 	.word	0x08005b70
 8002af0:	00f42400 	.word	0x00f42400
 8002af4:	007a1200 	.word	0x007a1200

08002af8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002afc:	4b03      	ldr	r3, [pc, #12]	; (8002b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002afe:	681b      	ldr	r3, [r3, #0]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	20000000 	.word	0x20000000

08002b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b14:	f7ff fff0 	bl	8002af8 <HAL_RCC_GetHCLKFreq>
 8002b18:	4601      	mov	r1, r0
 8002b1a:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	0a1b      	lsrs	r3, r3, #8
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b26:	5cd3      	ldrb	r3, [r2, r3]
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40021000 	.word	0x40021000
 8002b38:	08005b68 	.word	0x08005b68

08002b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b40:	f7ff ffda 	bl	8002af8 <HAL_RCC_GetHCLKFreq>
 8002b44:	4601      	mov	r1, r0
 8002b46:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	0adb      	lsrs	r3, r3, #11
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b52:	5cd3      	ldrb	r3, [r2, r3]
 8002b54:	f003 031f 	and.w	r3, r3, #31
 8002b58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40021000 	.word	0x40021000
 8002b64:	08005b68 	.word	0x08005b68

08002b68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b70:	2300      	movs	r3, #0
 8002b72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b74:	4b27      	ldr	r3, [pc, #156]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b80:	f7ff f932 	bl	8001de8 <HAL_PWREx_GetVoltageRange>
 8002b84:	6178      	str	r0, [r7, #20]
 8002b86:	e014      	b.n	8002bb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b88:	4b22      	ldr	r3, [pc, #136]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8c:	4a21      	ldr	r2, [pc, #132]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b92:	6593      	str	r3, [r2, #88]	; 0x58
 8002b94:	4b1f      	ldr	r3, [pc, #124]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ba0:	f7ff f922 	bl	8001de8 <HAL_PWREx_GetVoltageRange>
 8002ba4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ba6:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002baa:	4a1a      	ldr	r2, [pc, #104]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb8:	d10b      	bne.n	8002bd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b80      	cmp	r3, #128	; 0x80
 8002bbe:	d913      	bls.n	8002be8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2ba0      	cmp	r3, #160	; 0xa0
 8002bc4:	d902      	bls.n	8002bcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	e00d      	b.n	8002be8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bcc:	2301      	movs	r3, #1
 8002bce:	613b      	str	r3, [r7, #16]
 8002bd0:	e00a      	b.n	8002be8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b7f      	cmp	r3, #127	; 0x7f
 8002bd6:	d902      	bls.n	8002bde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002bd8:	2302      	movs	r3, #2
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	e004      	b.n	8002be8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b70      	cmp	r3, #112	; 0x70
 8002be2:	d101      	bne.n	8002be8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002be4:	2301      	movs	r3, #1
 8002be6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f023 020f 	bic.w	r2, r3, #15
 8002bf0:	4909      	ldr	r1, [pc, #36]	; (8002c18 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bf8:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d001      	beq.n	8002c0a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40022000 	.word	0x40022000

08002c1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002c26:	4b2d      	ldr	r3, [pc, #180]	; (8002cdc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d118      	bne.n	8002c64 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c32:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d107      	bne.n	8002c4e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c3e:	4b27      	ldr	r3, [pc, #156]	; (8002cdc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c44:	0a1b      	lsrs	r3, r3, #8
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	e005      	b.n	8002c5a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c4e:	4b23      	ldr	r3, [pc, #140]	; (8002cdc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c5a:	4a21      	ldr	r2, [pc, #132]	; (8002ce0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c62:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c64:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d002      	beq.n	8002c7a <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d003      	beq.n	8002c80 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002c78:	e005      	b.n	8002c86 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002c7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002c7c:	613b      	str	r3, [r7, #16]
    break;
 8002c7e:	e005      	b.n	8002c8c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002c82:	613b      	str	r3, [r7, #16]
    break;
 8002c84:	e002      	b.n	8002c8c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	613b      	str	r3, [r7, #16]
    break;
 8002c8a:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c8c:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	3301      	adds	r3, #1
 8002c98:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c9a:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	0a1b      	lsrs	r3, r3, #8
 8002ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	fb02 f203 	mul.w	r2, r2, r3
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb0:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cb2:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	0e5b      	lsrs	r3, r3, #25
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cca:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002ccc:	683b      	ldr	r3, [r7, #0]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	08005b70 	.word	0x08005b70
 8002ce4:	00f42400 	.word	0x00f42400
 8002ce8:	007a1200 	.word	0x007a1200

08002cec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d03d      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d0c:	2b40      	cmp	r3, #64	; 0x40
 8002d0e:	d00b      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002d10:	2b40      	cmp	r3, #64	; 0x40
 8002d12:	d804      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00e      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8002d18:	2b20      	cmp	r3, #32
 8002d1a:	d015      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002d1c:	e01d      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002d1e:	2b60      	cmp	r3, #96	; 0x60
 8002d20:	d01e      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002d22:	2b80      	cmp	r3, #128	; 0x80
 8002d24:	d01c      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002d26:	e018      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d28:	4b86      	ldr	r3, [pc, #536]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4a85      	ldr	r2, [pc, #532]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d32:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d34:	e015      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 fafd 	bl	800333c <RCCEx_PLLSAI1_Config>
 8002d42:	4603      	mov	r3, r0
 8002d44:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d46:	e00c      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3320      	adds	r3, #32
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fbe4 	bl	800351c <RCCEx_PLLSAI2_Config>
 8002d54:	4603      	mov	r3, r0
 8002d56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d58:	e003      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	74fb      	strb	r3, [r7, #19]
      break;
 8002d5e:	e000      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8002d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d62:	7cfb      	ldrb	r3, [r7, #19]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10b      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d68:	4b76      	ldr	r3, [pc, #472]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d6e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d76:	4973      	ldr	r1, [pc, #460]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002d7e:	e001      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d80:	7cfb      	ldrb	r3, [r7, #19]
 8002d82:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d042      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d98:	d00f      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xce>
 8002d9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d9e:	d805      	bhi.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d011      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da8:	d017      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xee>
 8002daa:	e01f      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x100>
 8002dac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002db0:	d01f      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db6:	d01c      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002db8:	e018      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dba:	4b62      	ldr	r3, [pc, #392]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	4a61      	ldr	r2, [pc, #388]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dc6:	e015      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fab4 	bl	800333c <RCCEx_PLLSAI1_Config>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dd8:	e00c      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3320      	adds	r3, #32
 8002dde:	2100      	movs	r1, #0
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 fb9b 	bl	800351c <RCCEx_PLLSAI2_Config>
 8002de6:	4603      	mov	r3, r0
 8002de8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dea:	e003      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	74fb      	strb	r3, [r7, #19]
      break;
 8002df0:	e000      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8002df2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002df4:	7cfb      	ldrb	r3, [r7, #19]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10b      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dfa:	4b52      	ldr	r3, [pc, #328]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e08:	494e      	ldr	r1, [pc, #312]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002e10:	e001      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e12:	7cfb      	ldrb	r3, [r7, #19]
 8002e14:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 809f 	beq.w	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e24:	2300      	movs	r3, #0
 8002e26:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e28:	4b46      	ldr	r3, [pc, #280]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00d      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	4b41      	ldr	r3, [pc, #260]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e42:	4a40      	ldr	r2, [pc, #256]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e48:	6593      	str	r3, [r2, #88]	; 0x58
 8002e4a:	4b3e      	ldr	r3, [pc, #248]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e56:	2301      	movs	r3, #1
 8002e58:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e5a:	4b3b      	ldr	r3, [pc, #236]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a3a      	ldr	r2, [pc, #232]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e66:	f7fe f9d3 	bl	8001210 <HAL_GetTick>
 8002e6a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e6c:	e009      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6e:	f7fe f9cf 	bl	8001210 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d902      	bls.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	74fb      	strb	r3, [r7, #19]
        break;
 8002e80:	e005      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e82:	4b31      	ldr	r3, [pc, #196]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0ef      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8002e8e:	7cfb      	ldrb	r3, [r7, #19]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d15b      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e94:	4b2b      	ldr	r3, [pc, #172]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e9e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d01f      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d019      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002eb2:	4b24      	ldr	r3, [pc, #144]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ebc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ebe:	4b21      	ldr	r3, [pc, #132]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec4:	4a1f      	ldr	r2, [pc, #124]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ece:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed4:	4a1b      	ldr	r2, [pc, #108]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ede:	4a19      	ldr	r2, [pc, #100]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d016      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7fe f98e 	bl	8001210 <HAL_GetTick>
 8002ef4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef6:	e00b      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef8:	f7fe f98a 	bl	8001210 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d902      	bls.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	74fb      	strb	r3, [r7, #19]
            break;
 8002f0e:	e006      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0ec      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8002f1e:	7cfb      	ldrb	r3, [r7, #19]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10c      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f24:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f34:	4903      	ldr	r1, [pc, #12]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f3c:	e008      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f3e:	7cfb      	ldrb	r3, [r7, #19]
 8002f40:	74bb      	strb	r3, [r7, #18]
 8002f42:	e005      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f4c:	7cfb      	ldrb	r3, [r7, #19]
 8002f4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f50:	7c7b      	ldrb	r3, [r7, #17]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d105      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f56:	4ba0      	ldr	r3, [pc, #640]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5a:	4a9f      	ldr	r2, [pc, #636]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f6e:	4b9a      	ldr	r3, [pc, #616]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f74:	f023 0203 	bic.w	r2, r3, #3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7c:	4996      	ldr	r1, [pc, #600]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00a      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f90:	4b91      	ldr	r3, [pc, #580]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f96:	f023 020c 	bic.w	r2, r3, #12
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	498e      	ldr	r1, [pc, #568]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0304 	and.w	r3, r3, #4
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fb2:	4b89      	ldr	r3, [pc, #548]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc0:	4985      	ldr	r1, [pc, #532]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00a      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fd4:	4b80      	ldr	r3, [pc, #512]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe2:	497d      	ldr	r1, [pc, #500]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00a      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ff6:	4b78      	ldr	r3, [pc, #480]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003004:	4974      	ldr	r1, [pc, #464]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0320 	and.w	r3, r3, #32
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00a      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003018:	4b6f      	ldr	r3, [pc, #444]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003026:	496c      	ldr	r1, [pc, #432]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800303a:	4b67      	ldr	r3, [pc, #412]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003040:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003048:	4963      	ldr	r1, [pc, #396]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800305c:	4b5e      	ldr	r3, [pc, #376]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003062:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800306a:	495b      	ldr	r1, [pc, #364]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800307e:	4b56      	ldr	r3, [pc, #344]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003084:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308c:	4952      	ldr	r1, [pc, #328]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308e:	4313      	orrs	r3, r2
 8003090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030a0:	4b4d      	ldr	r3, [pc, #308]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ae:	494a      	ldr	r1, [pc, #296]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030c2:	4b45      	ldr	r3, [pc, #276]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d0:	4941      	ldr	r1, [pc, #260]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030e4:	4b3c      	ldr	r3, [pc, #240]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030ea:	f023 0203 	bic.w	r2, r3, #3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f2:	4939      	ldr	r1, [pc, #228]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d028      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003106:	4b34      	ldr	r3, [pc, #208]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003114:	4930      	ldr	r1, [pc, #192]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003120:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003124:	d106      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003126:	4b2c      	ldr	r3, [pc, #176]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	4a2b      	ldr	r2, [pc, #172]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003130:	60d3      	str	r3, [r2, #12]
 8003132:	e011      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003138:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800313c:	d10c      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3304      	adds	r3, #4
 8003142:	2101      	movs	r1, #1
 8003144:	4618      	mov	r0, r3
 8003146:	f000 f8f9 	bl	800333c <RCCEx_PLLSAI1_Config>
 800314a:	4603      	mov	r3, r0
 800314c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800314e:	7cfb      	ldrb	r3, [r7, #19]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003154:	7cfb      	ldrb	r3, [r7, #19]
 8003156:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d04d      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003168:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800316c:	d108      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800316e:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003170:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003174:	4a18      	ldr	r2, [pc, #96]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003176:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800317a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800317e:	e012      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003180:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003182:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003186:	4a14      	ldr	r2, [pc, #80]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003188:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800318c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003190:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003196:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800319e:	490e      	ldr	r1, [pc, #56]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031ae:	d106      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031b0:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	4a08      	ldr	r2, [pc, #32]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031ba:	60d3      	str	r3, [r2, #12]
 80031bc:	e020      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031c6:	d109      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031c8:	4b03      	ldr	r3, [pc, #12]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4a02      	ldr	r2, [pc, #8]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d2:	60d3      	str	r3, [r2, #12]
 80031d4:	e014      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80031d6:	bf00      	nop
 80031d8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031e4:	d10c      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3304      	adds	r3, #4
 80031ea:	2101      	movs	r1, #1
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 f8a5 	bl	800333c <RCCEx_PLLSAI1_Config>
 80031f2:	4603      	mov	r3, r0
 80031f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031f6:	7cfb      	ldrb	r3, [r7, #19]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80031fc:	7cfb      	ldrb	r3, [r7, #19]
 80031fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d028      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800320c:	4b4a      	ldr	r3, [pc, #296]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003212:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800321a:	4947      	ldr	r1, [pc, #284]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003226:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800322a:	d106      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800322c:	4b42      	ldr	r3, [pc, #264]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4a41      	ldr	r2, [pc, #260]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003232:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003236:	60d3      	str	r3, [r2, #12]
 8003238:	e011      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800323e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003242:	d10c      	bne.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3304      	adds	r3, #4
 8003248:	2101      	movs	r1, #1
 800324a:	4618      	mov	r0, r3
 800324c:	f000 f876 	bl	800333c <RCCEx_PLLSAI1_Config>
 8003250:	4603      	mov	r3, r0
 8003252:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003254:	7cfb      	ldrb	r3, [r7, #19]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 800325a:	7cfb      	ldrb	r3, [r7, #19]
 800325c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d01e      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800326a:	4b33      	ldr	r3, [pc, #204]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800326c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003270:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800327a:	492f      	ldr	r1, [pc, #188]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003288:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800328c:	d10c      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3304      	adds	r3, #4
 8003292:	2102      	movs	r1, #2
 8003294:	4618      	mov	r0, r3
 8003296:	f000 f851 	bl	800333c <RCCEx_PLLSAI1_Config>
 800329a:	4603      	mov	r3, r0
 800329c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800329e:	7cfb      	ldrb	r3, [r7, #19]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80032a4:	7cfb      	ldrb	r3, [r7, #19]
 80032a6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00b      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032b4:	4b20      	ldr	r3, [pc, #128]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032ba:	f023 0204 	bic.w	r2, r3, #4
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c4:	491c      	ldr	r1, [pc, #112]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00b      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80032d8:	4b17      	ldr	r3, [pc, #92]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032de:	f023 0218 	bic.w	r2, r3, #24
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e8:	4913      	ldr	r1, [pc, #76]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d017      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80032fc:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003302:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800330c:	490a      	ldr	r1, [pc, #40]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800331a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800331e:	d105      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	4a04      	ldr	r2, [pc, #16]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800332a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800332c:	7cbb      	ldrb	r3, [r7, #18]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40021000 	.word	0x40021000

0800333c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800334a:	4b70      	ldr	r3, [pc, #448]	; (800350c <RCCEx_PLLSAI1_Config+0x1d0>)
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00e      	beq.n	8003374 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003356:	4b6d      	ldr	r3, [pc, #436]	; (800350c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f003 0203 	and.w	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d103      	bne.n	800336e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
       ||
 800336a:	2b00      	cmp	r3, #0
 800336c:	d13f      	bne.n	80033ee <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
 8003372:	e03c      	b.n	80033ee <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b02      	cmp	r3, #2
 800337a:	d00c      	beq.n	8003396 <RCCEx_PLLSAI1_Config+0x5a>
 800337c:	2b03      	cmp	r3, #3
 800337e:	d013      	beq.n	80033a8 <RCCEx_PLLSAI1_Config+0x6c>
 8003380:	2b01      	cmp	r3, #1
 8003382:	d120      	bne.n	80033c6 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003384:	4b61      	ldr	r3, [pc, #388]	; (800350c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d11d      	bne.n	80033cc <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003394:	e01a      	b.n	80033cc <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003396:	4b5d      	ldr	r3, [pc, #372]	; (800350c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d116      	bne.n	80033d0 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a6:	e013      	b.n	80033d0 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033a8:	4b58      	ldr	r3, [pc, #352]	; (800350c <RCCEx_PLLSAI1_Config+0x1d0>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10f      	bne.n	80033d4 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033b4:	4b55      	ldr	r3, [pc, #340]	; (800350c <RCCEx_PLLSAI1_Config+0x1d0>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d109      	bne.n	80033d4 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033c4:	e006      	b.n	80033d4 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
      break;
 80033ca:	e004      	b.n	80033d6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80033cc:	bf00      	nop
 80033ce:	e002      	b.n	80033d6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80033d0:	bf00      	nop
 80033d2:	e000      	b.n	80033d6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80033d4:	bf00      	nop
    }

    if(status == HAL_OK)
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d108      	bne.n	80033ee <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80033dc:	4b4b      	ldr	r3, [pc, #300]	; (800350c <RCCEx_PLLSAI1_Config+0x1d0>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f023 0203 	bic.w	r2, r3, #3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4948      	ldr	r1, [pc, #288]	; (800350c <RCCEx_PLLSAI1_Config+0x1d0>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f040 8086 	bne.w	8003502 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033f6:	4b45      	ldr	r3, [pc, #276]	; (800350c <RCCEx_PLLSAI1_Config+0x1d0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a44      	ldr	r2, [pc, #272]	; (800350c <RCCEx_PLLSAI1_Config+0x1d0>)
 80033fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003402:	f7fd ff05 	bl	8001210 <HAL_GetTick>
 8003406:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003408:	e009      	b.n	800341e <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800340a:	f7fd ff01 	bl	8001210 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d902      	bls.n	800341e <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	73fb      	strb	r3, [r7, #15]
        break;
 800341c:	e005      	b.n	800342a <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800341e:	4b3b      	ldr	r3, [pc, #236]	; (800350c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1ef      	bne.n	800340a <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d168      	bne.n	8003502 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d113      	bne.n	800345e <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003436:	4b35      	ldr	r3, [pc, #212]	; (800350c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	4b35      	ldr	r3, [pc, #212]	; (8003510 <RCCEx_PLLSAI1_Config+0x1d4>)
 800343c:	4013      	ands	r3, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6892      	ldr	r2, [r2, #8]
 8003442:	0211      	lsls	r1, r2, #8
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	68d2      	ldr	r2, [r2, #12]
 8003448:	06d2      	lsls	r2, r2, #27
 800344a:	4311      	orrs	r1, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6852      	ldr	r2, [r2, #4]
 8003450:	3a01      	subs	r2, #1
 8003452:	0112      	lsls	r2, r2, #4
 8003454:	430a      	orrs	r2, r1
 8003456:	492d      	ldr	r1, [pc, #180]	; (800350c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003458:	4313      	orrs	r3, r2
 800345a:	610b      	str	r3, [r1, #16]
 800345c:	e02d      	b.n	80034ba <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d115      	bne.n	8003490 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003464:	4b29      	ldr	r3, [pc, #164]	; (800350c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	4b2a      	ldr	r3, [pc, #168]	; (8003514 <RCCEx_PLLSAI1_Config+0x1d8>)
 800346a:	4013      	ands	r3, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6892      	ldr	r2, [r2, #8]
 8003470:	0211      	lsls	r1, r2, #8
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6912      	ldr	r2, [r2, #16]
 8003476:	0852      	lsrs	r2, r2, #1
 8003478:	3a01      	subs	r2, #1
 800347a:	0552      	lsls	r2, r2, #21
 800347c:	4311      	orrs	r1, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6852      	ldr	r2, [r2, #4]
 8003482:	3a01      	subs	r2, #1
 8003484:	0112      	lsls	r2, r2, #4
 8003486:	430a      	orrs	r2, r1
 8003488:	4920      	ldr	r1, [pc, #128]	; (800350c <RCCEx_PLLSAI1_Config+0x1d0>)
 800348a:	4313      	orrs	r3, r2
 800348c:	610b      	str	r3, [r1, #16]
 800348e:	e014      	b.n	80034ba <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003490:	4b1e      	ldr	r3, [pc, #120]	; (800350c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	4b20      	ldr	r3, [pc, #128]	; (8003518 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003496:	4013      	ands	r3, r2
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6892      	ldr	r2, [r2, #8]
 800349c:	0211      	lsls	r1, r2, #8
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6952      	ldr	r2, [r2, #20]
 80034a2:	0852      	lsrs	r2, r2, #1
 80034a4:	3a01      	subs	r2, #1
 80034a6:	0652      	lsls	r2, r2, #25
 80034a8:	4311      	orrs	r1, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6852      	ldr	r2, [r2, #4]
 80034ae:	3a01      	subs	r2, #1
 80034b0:	0112      	lsls	r2, r2, #4
 80034b2:	430a      	orrs	r2, r1
 80034b4:	4915      	ldr	r1, [pc, #84]	; (800350c <RCCEx_PLLSAI1_Config+0x1d0>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80034ba:	4b14      	ldr	r3, [pc, #80]	; (800350c <RCCEx_PLLSAI1_Config+0x1d0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a13      	ldr	r2, [pc, #76]	; (800350c <RCCEx_PLLSAI1_Config+0x1d0>)
 80034c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c6:	f7fd fea3 	bl	8001210 <HAL_GetTick>
 80034ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034cc:	e009      	b.n	80034e2 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034ce:	f7fd fe9f 	bl	8001210 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d902      	bls.n	80034e2 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	73fb      	strb	r3, [r7, #15]
          break;
 80034e0:	e005      	b.n	80034ee <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034e2:	4b0a      	ldr	r3, [pc, #40]	; (800350c <RCCEx_PLLSAI1_Config+0x1d0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0ef      	beq.n	80034ce <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d106      	bne.n	8003502 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034f4:	4b05      	ldr	r3, [pc, #20]	; (800350c <RCCEx_PLLSAI1_Config+0x1d0>)
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	4903      	ldr	r1, [pc, #12]	; (800350c <RCCEx_PLLSAI1_Config+0x1d0>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003502:	7bfb      	ldrb	r3, [r7, #15]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40021000 	.word	0x40021000
 8003510:	07ff800f 	.word	0x07ff800f
 8003514:	ff9f800f 	.word	0xff9f800f
 8003518:	f9ff800f 	.word	0xf9ff800f

0800351c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003526:	2300      	movs	r3, #0
 8003528:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800352a:	4b70      	ldr	r3, [pc, #448]	; (80036ec <RCCEx_PLLSAI2_Config+0x1d0>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00e      	beq.n	8003554 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003536:	4b6d      	ldr	r3, [pc, #436]	; (80036ec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f003 0203 	and.w	r2, r3, #3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d103      	bne.n	800354e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
       ||
 800354a:	2b00      	cmp	r3, #0
 800354c:	d13f      	bne.n	80035ce <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	73fb      	strb	r3, [r7, #15]
 8003552:	e03c      	b.n	80035ce <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b02      	cmp	r3, #2
 800355a:	d00c      	beq.n	8003576 <RCCEx_PLLSAI2_Config+0x5a>
 800355c:	2b03      	cmp	r3, #3
 800355e:	d013      	beq.n	8003588 <RCCEx_PLLSAI2_Config+0x6c>
 8003560:	2b01      	cmp	r3, #1
 8003562:	d120      	bne.n	80035a6 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003564:	4b61      	ldr	r3, [pc, #388]	; (80036ec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d11d      	bne.n	80035ac <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003574:	e01a      	b.n	80035ac <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003576:	4b5d      	ldr	r3, [pc, #372]	; (80036ec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357e:	2b00      	cmp	r3, #0
 8003580:	d116      	bne.n	80035b0 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003586:	e013      	b.n	80035b0 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003588:	4b58      	ldr	r3, [pc, #352]	; (80036ec <RCCEx_PLLSAI2_Config+0x1d0>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10f      	bne.n	80035b4 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003594:	4b55      	ldr	r3, [pc, #340]	; (80036ec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035a4:	e006      	b.n	80035b4 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	73fb      	strb	r3, [r7, #15]
      break;
 80035aa:	e004      	b.n	80035b6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80035ac:	bf00      	nop
 80035ae:	e002      	b.n	80035b6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80035b0:	bf00      	nop
 80035b2:	e000      	b.n	80035b6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80035b4:	bf00      	nop
    }

    if(status == HAL_OK)
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d108      	bne.n	80035ce <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80035bc:	4b4b      	ldr	r3, [pc, #300]	; (80036ec <RCCEx_PLLSAI2_Config+0x1d0>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f023 0203 	bic.w	r2, r3, #3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4948      	ldr	r1, [pc, #288]	; (80036ec <RCCEx_PLLSAI2_Config+0x1d0>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f040 8086 	bne.w	80036e2 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80035d6:	4b45      	ldr	r3, [pc, #276]	; (80036ec <RCCEx_PLLSAI2_Config+0x1d0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a44      	ldr	r2, [pc, #272]	; (80036ec <RCCEx_PLLSAI2_Config+0x1d0>)
 80035dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e2:	f7fd fe15 	bl	8001210 <HAL_GetTick>
 80035e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035e8:	e009      	b.n	80035fe <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035ea:	f7fd fe11 	bl	8001210 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d902      	bls.n	80035fe <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	73fb      	strb	r3, [r7, #15]
        break;
 80035fc:	e005      	b.n	800360a <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035fe:	4b3b      	ldr	r3, [pc, #236]	; (80036ec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1ef      	bne.n	80035ea <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800360a:	7bfb      	ldrb	r3, [r7, #15]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d168      	bne.n	80036e2 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d113      	bne.n	800363e <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003616:	4b35      	ldr	r3, [pc, #212]	; (80036ec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	4b35      	ldr	r3, [pc, #212]	; (80036f0 <RCCEx_PLLSAI2_Config+0x1d4>)
 800361c:	4013      	ands	r3, r2
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6892      	ldr	r2, [r2, #8]
 8003622:	0211      	lsls	r1, r2, #8
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	68d2      	ldr	r2, [r2, #12]
 8003628:	06d2      	lsls	r2, r2, #27
 800362a:	4311      	orrs	r1, r2
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6852      	ldr	r2, [r2, #4]
 8003630:	3a01      	subs	r2, #1
 8003632:	0112      	lsls	r2, r2, #4
 8003634:	430a      	orrs	r2, r1
 8003636:	492d      	ldr	r1, [pc, #180]	; (80036ec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003638:	4313      	orrs	r3, r2
 800363a:	614b      	str	r3, [r1, #20]
 800363c:	e02d      	b.n	800369a <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d115      	bne.n	8003670 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003644:	4b29      	ldr	r3, [pc, #164]	; (80036ec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003646:	695a      	ldr	r2, [r3, #20]
 8003648:	4b2a      	ldr	r3, [pc, #168]	; (80036f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800364a:	4013      	ands	r3, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6892      	ldr	r2, [r2, #8]
 8003650:	0211      	lsls	r1, r2, #8
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6912      	ldr	r2, [r2, #16]
 8003656:	0852      	lsrs	r2, r2, #1
 8003658:	3a01      	subs	r2, #1
 800365a:	0552      	lsls	r2, r2, #21
 800365c:	4311      	orrs	r1, r2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6852      	ldr	r2, [r2, #4]
 8003662:	3a01      	subs	r2, #1
 8003664:	0112      	lsls	r2, r2, #4
 8003666:	430a      	orrs	r2, r1
 8003668:	4920      	ldr	r1, [pc, #128]	; (80036ec <RCCEx_PLLSAI2_Config+0x1d0>)
 800366a:	4313      	orrs	r3, r2
 800366c:	614b      	str	r3, [r1, #20]
 800366e:	e014      	b.n	800369a <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003670:	4b1e      	ldr	r3, [pc, #120]	; (80036ec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003676:	4013      	ands	r3, r2
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6892      	ldr	r2, [r2, #8]
 800367c:	0211      	lsls	r1, r2, #8
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6952      	ldr	r2, [r2, #20]
 8003682:	0852      	lsrs	r2, r2, #1
 8003684:	3a01      	subs	r2, #1
 8003686:	0652      	lsls	r2, r2, #25
 8003688:	4311      	orrs	r1, r2
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6852      	ldr	r2, [r2, #4]
 800368e:	3a01      	subs	r2, #1
 8003690:	0112      	lsls	r2, r2, #4
 8003692:	430a      	orrs	r2, r1
 8003694:	4915      	ldr	r1, [pc, #84]	; (80036ec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003696:	4313      	orrs	r3, r2
 8003698:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800369a:	4b14      	ldr	r3, [pc, #80]	; (80036ec <RCCEx_PLLSAI2_Config+0x1d0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a13      	ldr	r2, [pc, #76]	; (80036ec <RCCEx_PLLSAI2_Config+0x1d0>)
 80036a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a6:	f7fd fdb3 	bl	8001210 <HAL_GetTick>
 80036aa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036ac:	e009      	b.n	80036c2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036ae:	f7fd fdaf 	bl	8001210 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d902      	bls.n	80036c2 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	73fb      	strb	r3, [r7, #15]
          break;
 80036c0:	e005      	b.n	80036ce <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036c2:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <RCCEx_PLLSAI2_Config+0x1d0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0ef      	beq.n	80036ae <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d106      	bne.n	80036e2 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <RCCEx_PLLSAI2_Config+0x1d0>)
 80036d6:	695a      	ldr	r2, [r3, #20]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	4903      	ldr	r1, [pc, #12]	; (80036ec <RCCEx_PLLSAI2_Config+0x1d0>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40021000 	.word	0x40021000
 80036f0:	07ff800f 	.word	0x07ff800f
 80036f4:	ff9f800f 	.word	0xff9f800f
 80036f8:	f9ff800f 	.word	0xf9ff800f

080036fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e07c      	b.n	8003808 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d106      	bne.n	800372e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7fd f9ef 	bl	8000b0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2202      	movs	r2, #2
 8003732:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003744:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800374e:	d902      	bls.n	8003756 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	e002      	b.n	800375c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800375a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003764:	d007      	beq.n	8003776 <HAL_SPI_Init+0x7a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800376e:	d002      	beq.n	8003776 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10b      	bne.n	8003796 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003786:	d903      	bls.n	8003790 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	631a      	str	r2, [r3, #48]	; 0x30
 800378e:	e002      	b.n	8003796 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	ea42 0103 	orr.w	r1, r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	0c1b      	lsrs	r3, r3, #16
 80037d6:	f003 0204 	and.w	r2, r3, #4
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	ea42 0103 	orr.w	r1, r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	4613      	mov	r3, r2
 800381e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003820:	2300      	movs	r3, #0
 8003822:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <HAL_SPI_Transmit+0x22>
 800382e:	2302      	movs	r3, #2
 8003830:	e150      	b.n	8003ad4 <HAL_SPI_Transmit+0x2c4>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800383a:	f7fd fce9 	bl	8001210 <HAL_GetTick>
 800383e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003840:	88fb      	ldrh	r3, [r7, #6]
 8003842:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b01      	cmp	r3, #1
 800384e:	d002      	beq.n	8003856 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003850:	2302      	movs	r3, #2
 8003852:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003854:	e135      	b.n	8003ac2 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <HAL_SPI_Transmit+0x52>
 800385c:	88fb      	ldrh	r3, [r7, #6]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d102      	bne.n	8003868 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003866:	e12c      	b.n	8003ac2 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2203      	movs	r2, #3
 800386c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	88fa      	ldrh	r2, [r7, #6]
 8003880:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	88fa      	ldrh	r2, [r7, #6]
 8003886:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b2:	d107      	bne.n	80038c4 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ce:	2b40      	cmp	r3, #64	; 0x40
 80038d0:	d007      	beq.n	80038e2 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038ea:	d94b      	bls.n	8003984 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <HAL_SPI_Transmit+0xea>
 80038f4:	8afb      	ldrh	r3, [r7, #22]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d13e      	bne.n	8003978 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	881a      	ldrh	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	1c9a      	adds	r2, r3, #2
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800391e:	e02b      	b.n	8003978 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b02      	cmp	r3, #2
 800392c:	d112      	bne.n	8003954 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	881a      	ldrh	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	1c9a      	adds	r2, r3, #2
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003948:	b29b      	uxth	r3, r3
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003952:	e011      	b.n	8003978 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003954:	f7fd fc5c 	bl	8001210 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d803      	bhi.n	800396c <HAL_SPI_Transmit+0x15c>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396a:	d102      	bne.n	8003972 <HAL_SPI_Transmit+0x162>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d102      	bne.n	8003978 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003976:	e0a4      	b.n	8003ac2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1ce      	bne.n	8003920 <HAL_SPI_Transmit+0x110>
 8003982:	e07c      	b.n	8003a7e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <HAL_SPI_Transmit+0x182>
 800398c:	8afb      	ldrh	r3, [r7, #22]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d170      	bne.n	8003a74 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003996:	b29b      	uxth	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	d912      	bls.n	80039c2 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a0:	881a      	ldrh	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ac:	1c9a      	adds	r2, r3, #2
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b02      	subs	r3, #2
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039c0:	e058      	b.n	8003a74 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	330c      	adds	r3, #12
 80039cc:	7812      	ldrb	r2, [r2, #0]
 80039ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80039e8:	e044      	b.n	8003a74 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d12b      	bne.n	8003a50 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d912      	bls.n	8003a28 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	881a      	ldrh	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a12:	1c9a      	adds	r2, r3, #2
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b02      	subs	r3, #2
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a26:	e025      	b.n	8003a74 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	330c      	adds	r3, #12
 8003a32:	7812      	ldrb	r2, [r2, #0]
 8003a34:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a4e:	e011      	b.n	8003a74 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a50:	f7fd fbde 	bl	8001210 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d803      	bhi.n	8003a68 <HAL_SPI_Transmit+0x258>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a66:	d102      	bne.n	8003a6e <HAL_SPI_Transmit+0x25e>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d102      	bne.n	8003a74 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a72:	e026      	b.n	8003ac2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1b5      	bne.n	80039ea <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	6839      	ldr	r1, [r7, #0]
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 f901 	bl	8003c8a <SPI_EndRxTxTransaction>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10a      	bne.n	8003ab2 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	77fb      	strb	r3, [r7, #31]
 8003abe:	e000      	b.n	8003ac2 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003ac0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ad2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3720      	adds	r7, #32
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aec:	e04c      	b.n	8003b88 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af4:	d048      	beq.n	8003b88 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003af6:	f7fd fb8b 	bl	8001210 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d902      	bls.n	8003b0c <SPI_WaitFlagStateUntilTimeout+0x30>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d13d      	bne.n	8003b88 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b24:	d111      	bne.n	8003b4a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b2e:	d004      	beq.n	8003b3a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b38:	d107      	bne.n	8003b4a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b52:	d10f      	bne.n	8003b74 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e00f      	b.n	8003ba8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	4013      	ands	r3, r2
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	bf0c      	ite	eq
 8003b98:	2301      	moveq	r3, #1
 8003b9a:	2300      	movne	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d1a3      	bne.n	8003aee <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003bbe:	e057      	b.n	8003c70 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003bc6:	d106      	bne.n	8003bd6 <SPI_WaitFifoStateUntilTimeout+0x26>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d103      	bne.n	8003bd6 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	330c      	adds	r3, #12
 8003bd4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bdc:	d048      	beq.n	8003c70 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003bde:	f7fd fb17 	bl	8001210 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d902      	bls.n	8003bf4 <SPI_WaitFifoStateUntilTimeout+0x44>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d13d      	bne.n	8003c70 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c0c:	d111      	bne.n	8003c32 <SPI_WaitFifoStateUntilTimeout+0x82>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c16:	d004      	beq.n	8003c22 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c20:	d107      	bne.n	8003c32 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c30:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c3a:	d10f      	bne.n	8003c5c <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c5a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e008      	b.n	8003c82 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d19f      	bne.n	8003bc0 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b086      	sub	sp, #24
 8003c8e:	af02      	add	r7, sp, #8
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f7ff ff84 	bl	8003bb0 <SPI_WaitFifoStateUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d007      	beq.n	8003cbe <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb2:	f043 0220 	orr.w	r2, r3, #32
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e027      	b.n	8003d0e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2180      	movs	r1, #128	; 0x80
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f7ff ff07 	bl	8003adc <SPI_WaitFlagStateUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d007      	beq.n	8003ce4 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd8:	f043 0220 	orr.w	r2, r3, #32
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e014      	b.n	8003d0e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f7ff ff5d 	bl	8003bb0 <SPI_WaitFifoStateUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d007      	beq.n	8003d0c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d00:	f043 0220 	orr.w	r2, r3, #32
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e000      	b.n	8003d0e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b082      	sub	sp, #8
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e042      	b.n	8003dae <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fd f8ca 	bl	8000ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2224      	movs	r2, #36	; 0x24
 8003d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0201 	bic.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f82d 	bl	8003db8 <UART_SetConfig>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e022      	b.n	8003dae <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f001 f9e1 	bl	8005138 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d94:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0201 	orr.w	r2, r2, #1
 8003da4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f001 fa68 	bl	800527c <UART_CheckIdleState>
 8003dac:	4603      	mov	r3, r0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003db8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003dbc:	b088      	sub	sp, #32
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	4bac      	ldr	r3, [pc, #688]	; (80040a8 <UART_SetConfig+0x2f0>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	69f9      	ldr	r1, [r7, #28]
 8003e00:	430b      	orrs	r3, r1
 8003e02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4aa1      	ldr	r2, [pc, #644]	; (80040ac <UART_SetConfig+0x2f4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d004      	beq.n	8003e34 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	69fa      	ldr	r2, [r7, #28]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003e3e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6812      	ldr	r2, [r2, #0]
 8003e46:	69f9      	ldr	r1, [r7, #28]
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e52:	f023 010f 	bic.w	r1, r3, #15
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a92      	ldr	r2, [pc, #584]	; (80040b0 <UART_SetConfig+0x2f8>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d121      	bne.n	8003eb0 <UART_SetConfig+0xf8>
 8003e6c:	4b91      	ldr	r3, [pc, #580]	; (80040b4 <UART_SetConfig+0x2fc>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d816      	bhi.n	8003ea8 <UART_SetConfig+0xf0>
 8003e7a:	a201      	add	r2, pc, #4	; (adr r2, 8003e80 <UART_SetConfig+0xc8>)
 8003e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e80:	08003e91 	.word	0x08003e91
 8003e84:	08003e9d 	.word	0x08003e9d
 8003e88:	08003e97 	.word	0x08003e97
 8003e8c:	08003ea3 	.word	0x08003ea3
 8003e90:	2301      	movs	r3, #1
 8003e92:	76fb      	strb	r3, [r7, #27]
 8003e94:	e0e8      	b.n	8004068 <UART_SetConfig+0x2b0>
 8003e96:	2302      	movs	r3, #2
 8003e98:	76fb      	strb	r3, [r7, #27]
 8003e9a:	e0e5      	b.n	8004068 <UART_SetConfig+0x2b0>
 8003e9c:	2304      	movs	r3, #4
 8003e9e:	76fb      	strb	r3, [r7, #27]
 8003ea0:	e0e2      	b.n	8004068 <UART_SetConfig+0x2b0>
 8003ea2:	2308      	movs	r3, #8
 8003ea4:	76fb      	strb	r3, [r7, #27]
 8003ea6:	e0df      	b.n	8004068 <UART_SetConfig+0x2b0>
 8003ea8:	2310      	movs	r3, #16
 8003eaa:	76fb      	strb	r3, [r7, #27]
 8003eac:	bf00      	nop
 8003eae:	e0db      	b.n	8004068 <UART_SetConfig+0x2b0>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a80      	ldr	r2, [pc, #512]	; (80040b8 <UART_SetConfig+0x300>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d134      	bne.n	8003f24 <UART_SetConfig+0x16c>
 8003eba:	4b7e      	ldr	r3, [pc, #504]	; (80040b4 <UART_SetConfig+0x2fc>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec0:	f003 030c 	and.w	r3, r3, #12
 8003ec4:	2b0c      	cmp	r3, #12
 8003ec6:	d829      	bhi.n	8003f1c <UART_SetConfig+0x164>
 8003ec8:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <UART_SetConfig+0x118>)
 8003eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ece:	bf00      	nop
 8003ed0:	08003f05 	.word	0x08003f05
 8003ed4:	08003f1d 	.word	0x08003f1d
 8003ed8:	08003f1d 	.word	0x08003f1d
 8003edc:	08003f1d 	.word	0x08003f1d
 8003ee0:	08003f11 	.word	0x08003f11
 8003ee4:	08003f1d 	.word	0x08003f1d
 8003ee8:	08003f1d 	.word	0x08003f1d
 8003eec:	08003f1d 	.word	0x08003f1d
 8003ef0:	08003f0b 	.word	0x08003f0b
 8003ef4:	08003f1d 	.word	0x08003f1d
 8003ef8:	08003f1d 	.word	0x08003f1d
 8003efc:	08003f1d 	.word	0x08003f1d
 8003f00:	08003f17 	.word	0x08003f17
 8003f04:	2300      	movs	r3, #0
 8003f06:	76fb      	strb	r3, [r7, #27]
 8003f08:	e0ae      	b.n	8004068 <UART_SetConfig+0x2b0>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	76fb      	strb	r3, [r7, #27]
 8003f0e:	e0ab      	b.n	8004068 <UART_SetConfig+0x2b0>
 8003f10:	2304      	movs	r3, #4
 8003f12:	76fb      	strb	r3, [r7, #27]
 8003f14:	e0a8      	b.n	8004068 <UART_SetConfig+0x2b0>
 8003f16:	2308      	movs	r3, #8
 8003f18:	76fb      	strb	r3, [r7, #27]
 8003f1a:	e0a5      	b.n	8004068 <UART_SetConfig+0x2b0>
 8003f1c:	2310      	movs	r3, #16
 8003f1e:	76fb      	strb	r3, [r7, #27]
 8003f20:	bf00      	nop
 8003f22:	e0a1      	b.n	8004068 <UART_SetConfig+0x2b0>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a64      	ldr	r2, [pc, #400]	; (80040bc <UART_SetConfig+0x304>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d120      	bne.n	8003f70 <UART_SetConfig+0x1b8>
 8003f2e:	4b61      	ldr	r3, [pc, #388]	; (80040b4 <UART_SetConfig+0x2fc>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f34:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f38:	2b10      	cmp	r3, #16
 8003f3a:	d00f      	beq.n	8003f5c <UART_SetConfig+0x1a4>
 8003f3c:	2b10      	cmp	r3, #16
 8003f3e:	d802      	bhi.n	8003f46 <UART_SetConfig+0x18e>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <UART_SetConfig+0x198>
 8003f44:	e010      	b.n	8003f68 <UART_SetConfig+0x1b0>
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	d005      	beq.n	8003f56 <UART_SetConfig+0x19e>
 8003f4a:	2b30      	cmp	r3, #48	; 0x30
 8003f4c:	d009      	beq.n	8003f62 <UART_SetConfig+0x1aa>
 8003f4e:	e00b      	b.n	8003f68 <UART_SetConfig+0x1b0>
 8003f50:	2300      	movs	r3, #0
 8003f52:	76fb      	strb	r3, [r7, #27]
 8003f54:	e088      	b.n	8004068 <UART_SetConfig+0x2b0>
 8003f56:	2302      	movs	r3, #2
 8003f58:	76fb      	strb	r3, [r7, #27]
 8003f5a:	e085      	b.n	8004068 <UART_SetConfig+0x2b0>
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	76fb      	strb	r3, [r7, #27]
 8003f60:	e082      	b.n	8004068 <UART_SetConfig+0x2b0>
 8003f62:	2308      	movs	r3, #8
 8003f64:	76fb      	strb	r3, [r7, #27]
 8003f66:	e07f      	b.n	8004068 <UART_SetConfig+0x2b0>
 8003f68:	2310      	movs	r3, #16
 8003f6a:	76fb      	strb	r3, [r7, #27]
 8003f6c:	bf00      	nop
 8003f6e:	e07b      	b.n	8004068 <UART_SetConfig+0x2b0>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a52      	ldr	r2, [pc, #328]	; (80040c0 <UART_SetConfig+0x308>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d120      	bne.n	8003fbc <UART_SetConfig+0x204>
 8003f7a:	4b4e      	ldr	r3, [pc, #312]	; (80040b4 <UART_SetConfig+0x2fc>)
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f84:	2b40      	cmp	r3, #64	; 0x40
 8003f86:	d00f      	beq.n	8003fa8 <UART_SetConfig+0x1f0>
 8003f88:	2b40      	cmp	r3, #64	; 0x40
 8003f8a:	d802      	bhi.n	8003f92 <UART_SetConfig+0x1da>
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <UART_SetConfig+0x1e4>
 8003f90:	e010      	b.n	8003fb4 <UART_SetConfig+0x1fc>
 8003f92:	2b80      	cmp	r3, #128	; 0x80
 8003f94:	d005      	beq.n	8003fa2 <UART_SetConfig+0x1ea>
 8003f96:	2bc0      	cmp	r3, #192	; 0xc0
 8003f98:	d009      	beq.n	8003fae <UART_SetConfig+0x1f6>
 8003f9a:	e00b      	b.n	8003fb4 <UART_SetConfig+0x1fc>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	76fb      	strb	r3, [r7, #27]
 8003fa0:	e062      	b.n	8004068 <UART_SetConfig+0x2b0>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	76fb      	strb	r3, [r7, #27]
 8003fa6:	e05f      	b.n	8004068 <UART_SetConfig+0x2b0>
 8003fa8:	2304      	movs	r3, #4
 8003faa:	76fb      	strb	r3, [r7, #27]
 8003fac:	e05c      	b.n	8004068 <UART_SetConfig+0x2b0>
 8003fae:	2308      	movs	r3, #8
 8003fb0:	76fb      	strb	r3, [r7, #27]
 8003fb2:	e059      	b.n	8004068 <UART_SetConfig+0x2b0>
 8003fb4:	2310      	movs	r3, #16
 8003fb6:	76fb      	strb	r3, [r7, #27]
 8003fb8:	bf00      	nop
 8003fba:	e055      	b.n	8004068 <UART_SetConfig+0x2b0>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a40      	ldr	r2, [pc, #256]	; (80040c4 <UART_SetConfig+0x30c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d124      	bne.n	8004010 <UART_SetConfig+0x258>
 8003fc6:	4b3b      	ldr	r3, [pc, #236]	; (80040b4 <UART_SetConfig+0x2fc>)
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fd4:	d012      	beq.n	8003ffc <UART_SetConfig+0x244>
 8003fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fda:	d802      	bhi.n	8003fe2 <UART_SetConfig+0x22a>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d007      	beq.n	8003ff0 <UART_SetConfig+0x238>
 8003fe0:	e012      	b.n	8004008 <UART_SetConfig+0x250>
 8003fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fe6:	d006      	beq.n	8003ff6 <UART_SetConfig+0x23e>
 8003fe8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fec:	d009      	beq.n	8004002 <UART_SetConfig+0x24a>
 8003fee:	e00b      	b.n	8004008 <UART_SetConfig+0x250>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	76fb      	strb	r3, [r7, #27]
 8003ff4:	e038      	b.n	8004068 <UART_SetConfig+0x2b0>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	76fb      	strb	r3, [r7, #27]
 8003ffa:	e035      	b.n	8004068 <UART_SetConfig+0x2b0>
 8003ffc:	2304      	movs	r3, #4
 8003ffe:	76fb      	strb	r3, [r7, #27]
 8004000:	e032      	b.n	8004068 <UART_SetConfig+0x2b0>
 8004002:	2308      	movs	r3, #8
 8004004:	76fb      	strb	r3, [r7, #27]
 8004006:	e02f      	b.n	8004068 <UART_SetConfig+0x2b0>
 8004008:	2310      	movs	r3, #16
 800400a:	76fb      	strb	r3, [r7, #27]
 800400c:	bf00      	nop
 800400e:	e02b      	b.n	8004068 <UART_SetConfig+0x2b0>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a25      	ldr	r2, [pc, #148]	; (80040ac <UART_SetConfig+0x2f4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d124      	bne.n	8004064 <UART_SetConfig+0x2ac>
 800401a:	4b26      	ldr	r3, [pc, #152]	; (80040b4 <UART_SetConfig+0x2fc>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004020:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004028:	d012      	beq.n	8004050 <UART_SetConfig+0x298>
 800402a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402e:	d802      	bhi.n	8004036 <UART_SetConfig+0x27e>
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <UART_SetConfig+0x28c>
 8004034:	e012      	b.n	800405c <UART_SetConfig+0x2a4>
 8004036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800403a:	d006      	beq.n	800404a <UART_SetConfig+0x292>
 800403c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004040:	d009      	beq.n	8004056 <UART_SetConfig+0x29e>
 8004042:	e00b      	b.n	800405c <UART_SetConfig+0x2a4>
 8004044:	2300      	movs	r3, #0
 8004046:	76fb      	strb	r3, [r7, #27]
 8004048:	e00e      	b.n	8004068 <UART_SetConfig+0x2b0>
 800404a:	2302      	movs	r3, #2
 800404c:	76fb      	strb	r3, [r7, #27]
 800404e:	e00b      	b.n	8004068 <UART_SetConfig+0x2b0>
 8004050:	2304      	movs	r3, #4
 8004052:	76fb      	strb	r3, [r7, #27]
 8004054:	e008      	b.n	8004068 <UART_SetConfig+0x2b0>
 8004056:	2308      	movs	r3, #8
 8004058:	76fb      	strb	r3, [r7, #27]
 800405a:	e005      	b.n	8004068 <UART_SetConfig+0x2b0>
 800405c:	2310      	movs	r3, #16
 800405e:	76fb      	strb	r3, [r7, #27]
 8004060:	bf00      	nop
 8004062:	e001      	b.n	8004068 <UART_SetConfig+0x2b0>
 8004064:	2310      	movs	r3, #16
 8004066:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a0f      	ldr	r2, [pc, #60]	; (80040ac <UART_SetConfig+0x2f4>)
 800406e:	4293      	cmp	r3, r2
 8004070:	f040 842d 	bne.w	80048ce <UART_SetConfig+0xb16>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004074:	7efb      	ldrb	r3, [r7, #27]
 8004076:	2b08      	cmp	r3, #8
 8004078:	f200 816b 	bhi.w	8004352 <UART_SetConfig+0x59a>
 800407c:	a201      	add	r2, pc, #4	; (adr r2, 8004084 <UART_SetConfig+0x2cc>)
 800407e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004082:	bf00      	nop
 8004084:	080040c9 	.word	0x080040c9
 8004088:	08004353 	.word	0x08004353
 800408c:	0800416b 	.word	0x0800416b
 8004090:	08004353 	.word	0x08004353
 8004094:	08004203 	.word	0x08004203
 8004098:	08004353 	.word	0x08004353
 800409c:	08004353 	.word	0x08004353
 80040a0:	08004353 	.word	0x08004353
 80040a4:	080042a5 	.word	0x080042a5
 80040a8:	cfff69f3 	.word	0xcfff69f3
 80040ac:	40008000 	.word	0x40008000
 80040b0:	40013800 	.word	0x40013800
 80040b4:	40021000 	.word	0x40021000
 80040b8:	40004400 	.word	0x40004400
 80040bc:	40004800 	.word	0x40004800
 80040c0:	40004c00 	.word	0x40004c00
 80040c4:	40005000 	.word	0x40005000
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80040c8:	f7fe fd22 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
 80040cc:	4602      	mov	r2, r0
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d044      	beq.n	8004160 <UART_SetConfig+0x3a8>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d03e      	beq.n	800415c <UART_SetConfig+0x3a4>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d038      	beq.n	8004158 <UART_SetConfig+0x3a0>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d032      	beq.n	8004154 <UART_SetConfig+0x39c>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d02c      	beq.n	8004150 <UART_SetConfig+0x398>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	2b05      	cmp	r3, #5
 80040fc:	d026      	beq.n	800414c <UART_SetConfig+0x394>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	2b06      	cmp	r3, #6
 8004104:	d020      	beq.n	8004148 <UART_SetConfig+0x390>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	2b07      	cmp	r3, #7
 800410c:	d01a      	beq.n	8004144 <UART_SetConfig+0x38c>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	2b08      	cmp	r3, #8
 8004114:	d014      	beq.n	8004140 <UART_SetConfig+0x388>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	2b09      	cmp	r3, #9
 800411c:	d00e      	beq.n	800413c <UART_SetConfig+0x384>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	2b0a      	cmp	r3, #10
 8004124:	d008      	beq.n	8004138 <UART_SetConfig+0x380>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	2b0b      	cmp	r3, #11
 800412c:	d102      	bne.n	8004134 <UART_SetConfig+0x37c>
 800412e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004132:	e016      	b.n	8004162 <UART_SetConfig+0x3aa>
 8004134:	2301      	movs	r3, #1
 8004136:	e014      	b.n	8004162 <UART_SetConfig+0x3aa>
 8004138:	2380      	movs	r3, #128	; 0x80
 800413a:	e012      	b.n	8004162 <UART_SetConfig+0x3aa>
 800413c:	2340      	movs	r3, #64	; 0x40
 800413e:	e010      	b.n	8004162 <UART_SetConfig+0x3aa>
 8004140:	2320      	movs	r3, #32
 8004142:	e00e      	b.n	8004162 <UART_SetConfig+0x3aa>
 8004144:	2310      	movs	r3, #16
 8004146:	e00c      	b.n	8004162 <UART_SetConfig+0x3aa>
 8004148:	230c      	movs	r3, #12
 800414a:	e00a      	b.n	8004162 <UART_SetConfig+0x3aa>
 800414c:	230a      	movs	r3, #10
 800414e:	e008      	b.n	8004162 <UART_SetConfig+0x3aa>
 8004150:	2308      	movs	r3, #8
 8004152:	e006      	b.n	8004162 <UART_SetConfig+0x3aa>
 8004154:	2306      	movs	r3, #6
 8004156:	e004      	b.n	8004162 <UART_SetConfig+0x3aa>
 8004158:	2304      	movs	r3, #4
 800415a:	e002      	b.n	8004162 <UART_SetConfig+0x3aa>
 800415c:	2302      	movs	r3, #2
 800415e:	e000      	b.n	8004162 <UART_SetConfig+0x3aa>
 8004160:	2301      	movs	r3, #1
 8004162:	fbb2 f3f3 	udiv	r3, r2, r3
 8004166:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8004168:	e0f6      	b.n	8004358 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	2b00      	cmp	r3, #0
 8004170:	d044      	beq.n	80041fc <UART_SetConfig+0x444>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	2b01      	cmp	r3, #1
 8004178:	d03e      	beq.n	80041f8 <UART_SetConfig+0x440>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	2b02      	cmp	r3, #2
 8004180:	d038      	beq.n	80041f4 <UART_SetConfig+0x43c>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	2b03      	cmp	r3, #3
 8004188:	d032      	beq.n	80041f0 <UART_SetConfig+0x438>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	2b04      	cmp	r3, #4
 8004190:	d02c      	beq.n	80041ec <UART_SetConfig+0x434>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	2b05      	cmp	r3, #5
 8004198:	d026      	beq.n	80041e8 <UART_SetConfig+0x430>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	2b06      	cmp	r3, #6
 80041a0:	d020      	beq.n	80041e4 <UART_SetConfig+0x42c>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	2b07      	cmp	r3, #7
 80041a8:	d01a      	beq.n	80041e0 <UART_SetConfig+0x428>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d014      	beq.n	80041dc <UART_SetConfig+0x424>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	2b09      	cmp	r3, #9
 80041b8:	d00e      	beq.n	80041d8 <UART_SetConfig+0x420>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	2b0a      	cmp	r3, #10
 80041c0:	d008      	beq.n	80041d4 <UART_SetConfig+0x41c>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	2b0b      	cmp	r3, #11
 80041c8:	d102      	bne.n	80041d0 <UART_SetConfig+0x418>
 80041ca:	f24f 4324 	movw	r3, #62500	; 0xf424
 80041ce:	e016      	b.n	80041fe <UART_SetConfig+0x446>
 80041d0:	4ba1      	ldr	r3, [pc, #644]	; (8004458 <UART_SetConfig+0x6a0>)
 80041d2:	e014      	b.n	80041fe <UART_SetConfig+0x446>
 80041d4:	4ba1      	ldr	r3, [pc, #644]	; (800445c <UART_SetConfig+0x6a4>)
 80041d6:	e012      	b.n	80041fe <UART_SetConfig+0x446>
 80041d8:	4ba1      	ldr	r3, [pc, #644]	; (8004460 <UART_SetConfig+0x6a8>)
 80041da:	e010      	b.n	80041fe <UART_SetConfig+0x446>
 80041dc:	4ba1      	ldr	r3, [pc, #644]	; (8004464 <UART_SetConfig+0x6ac>)
 80041de:	e00e      	b.n	80041fe <UART_SetConfig+0x446>
 80041e0:	4ba1      	ldr	r3, [pc, #644]	; (8004468 <UART_SetConfig+0x6b0>)
 80041e2:	e00c      	b.n	80041fe <UART_SetConfig+0x446>
 80041e4:	4ba1      	ldr	r3, [pc, #644]	; (800446c <UART_SetConfig+0x6b4>)
 80041e6:	e00a      	b.n	80041fe <UART_SetConfig+0x446>
 80041e8:	4ba1      	ldr	r3, [pc, #644]	; (8004470 <UART_SetConfig+0x6b8>)
 80041ea:	e008      	b.n	80041fe <UART_SetConfig+0x446>
 80041ec:	4ba1      	ldr	r3, [pc, #644]	; (8004474 <UART_SetConfig+0x6bc>)
 80041ee:	e006      	b.n	80041fe <UART_SetConfig+0x446>
 80041f0:	4ba1      	ldr	r3, [pc, #644]	; (8004478 <UART_SetConfig+0x6c0>)
 80041f2:	e004      	b.n	80041fe <UART_SetConfig+0x446>
 80041f4:	4ba1      	ldr	r3, [pc, #644]	; (800447c <UART_SetConfig+0x6c4>)
 80041f6:	e002      	b.n	80041fe <UART_SetConfig+0x446>
 80041f8:	4ba1      	ldr	r3, [pc, #644]	; (8004480 <UART_SetConfig+0x6c8>)
 80041fa:	e000      	b.n	80041fe <UART_SetConfig+0x446>
 80041fc:	4b96      	ldr	r3, [pc, #600]	; (8004458 <UART_SetConfig+0x6a0>)
 80041fe:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8004200:	e0aa      	b.n	8004358 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004202:	f7fe fbef 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 8004206:	4602      	mov	r2, r0
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	2b00      	cmp	r3, #0
 800420e:	d044      	beq.n	800429a <UART_SetConfig+0x4e2>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	2b01      	cmp	r3, #1
 8004216:	d03e      	beq.n	8004296 <UART_SetConfig+0x4de>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	2b02      	cmp	r3, #2
 800421e:	d038      	beq.n	8004292 <UART_SetConfig+0x4da>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	2b03      	cmp	r3, #3
 8004226:	d032      	beq.n	800428e <UART_SetConfig+0x4d6>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	2b04      	cmp	r3, #4
 800422e:	d02c      	beq.n	800428a <UART_SetConfig+0x4d2>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	2b05      	cmp	r3, #5
 8004236:	d026      	beq.n	8004286 <UART_SetConfig+0x4ce>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	2b06      	cmp	r3, #6
 800423e:	d020      	beq.n	8004282 <UART_SetConfig+0x4ca>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	2b07      	cmp	r3, #7
 8004246:	d01a      	beq.n	800427e <UART_SetConfig+0x4c6>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	2b08      	cmp	r3, #8
 800424e:	d014      	beq.n	800427a <UART_SetConfig+0x4c2>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	2b09      	cmp	r3, #9
 8004256:	d00e      	beq.n	8004276 <UART_SetConfig+0x4be>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	2b0a      	cmp	r3, #10
 800425e:	d008      	beq.n	8004272 <UART_SetConfig+0x4ba>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	2b0b      	cmp	r3, #11
 8004266:	d102      	bne.n	800426e <UART_SetConfig+0x4b6>
 8004268:	f44f 7380 	mov.w	r3, #256	; 0x100
 800426c:	e016      	b.n	800429c <UART_SetConfig+0x4e4>
 800426e:	2301      	movs	r3, #1
 8004270:	e014      	b.n	800429c <UART_SetConfig+0x4e4>
 8004272:	2380      	movs	r3, #128	; 0x80
 8004274:	e012      	b.n	800429c <UART_SetConfig+0x4e4>
 8004276:	2340      	movs	r3, #64	; 0x40
 8004278:	e010      	b.n	800429c <UART_SetConfig+0x4e4>
 800427a:	2320      	movs	r3, #32
 800427c:	e00e      	b.n	800429c <UART_SetConfig+0x4e4>
 800427e:	2310      	movs	r3, #16
 8004280:	e00c      	b.n	800429c <UART_SetConfig+0x4e4>
 8004282:	230c      	movs	r3, #12
 8004284:	e00a      	b.n	800429c <UART_SetConfig+0x4e4>
 8004286:	230a      	movs	r3, #10
 8004288:	e008      	b.n	800429c <UART_SetConfig+0x4e4>
 800428a:	2308      	movs	r3, #8
 800428c:	e006      	b.n	800429c <UART_SetConfig+0x4e4>
 800428e:	2306      	movs	r3, #6
 8004290:	e004      	b.n	800429c <UART_SetConfig+0x4e4>
 8004292:	2304      	movs	r3, #4
 8004294:	e002      	b.n	800429c <UART_SetConfig+0x4e4>
 8004296:	2302      	movs	r3, #2
 8004298:	e000      	b.n	800429c <UART_SetConfig+0x4e4>
 800429a:	2301      	movs	r3, #1
 800429c:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a0:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 80042a2:	e059      	b.n	8004358 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d04e      	beq.n	800434a <UART_SetConfig+0x592>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d047      	beq.n	8004344 <UART_SetConfig+0x58c>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d040      	beq.n	800433e <UART_SetConfig+0x586>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d039      	beq.n	8004338 <UART_SetConfig+0x580>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d032      	beq.n	8004332 <UART_SetConfig+0x57a>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	2b05      	cmp	r3, #5
 80042d2:	d02b      	beq.n	800432c <UART_SetConfig+0x574>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	2b06      	cmp	r3, #6
 80042da:	d024      	beq.n	8004326 <UART_SetConfig+0x56e>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	2b07      	cmp	r3, #7
 80042e2:	d01d      	beq.n	8004320 <UART_SetConfig+0x568>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d016      	beq.n	800431a <UART_SetConfig+0x562>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	2b09      	cmp	r3, #9
 80042f2:	d00f      	beq.n	8004314 <UART_SetConfig+0x55c>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	2b0a      	cmp	r3, #10
 80042fa:	d008      	beq.n	800430e <UART_SetConfig+0x556>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	2b0b      	cmp	r3, #11
 8004302:	d101      	bne.n	8004308 <UART_SetConfig+0x550>
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	e022      	b.n	800434e <UART_SetConfig+0x596>
 8004308:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800430c:	e01f      	b.n	800434e <UART_SetConfig+0x596>
 800430e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004312:	e01c      	b.n	800434e <UART_SetConfig+0x596>
 8004314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004318:	e019      	b.n	800434e <UART_SetConfig+0x596>
 800431a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800431e:	e016      	b.n	800434e <UART_SetConfig+0x596>
 8004320:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004324:	e013      	b.n	800434e <UART_SetConfig+0x596>
 8004326:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800432a:	e010      	b.n	800434e <UART_SetConfig+0x596>
 800432c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004330:	e00d      	b.n	800434e <UART_SetConfig+0x596>
 8004332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004336:	e00a      	b.n	800434e <UART_SetConfig+0x596>
 8004338:	f241 5355 	movw	r3, #5461	; 0x1555
 800433c:	e007      	b.n	800434e <UART_SetConfig+0x596>
 800433e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004342:	e004      	b.n	800434e <UART_SetConfig+0x596>
 8004344:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004348:	e001      	b.n	800434e <UART_SetConfig+0x596>
 800434a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800434e:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8004350:	e002      	b.n	8004358 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	74fb      	strb	r3, [r7, #19]
        break;
 8004356:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 86c2 	beq.w	80050e4 <UART_SetConfig+0x132c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	4613      	mov	r3, r2
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	4413      	add	r3, r2
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	429a      	cmp	r2, r3
 800436e:	d305      	bcc.n	800437c <UART_SetConfig+0x5c4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	429a      	cmp	r2, r3
 800437a:	d903      	bls.n	8004384 <UART_SetConfig+0x5cc>
      {
        ret = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	74fb      	strb	r3, [r7, #19]
 8004380:	f000 beb0 	b.w	80050e4 <UART_SetConfig+0x132c>
      }
      else
      {
        switch (clocksource)
 8004384:	7efb      	ldrb	r3, [r7, #27]
 8004386:	2b08      	cmp	r3, #8
 8004388:	f200 828c 	bhi.w	80048a4 <UART_SetConfig+0xaec>
 800438c:	a201      	add	r2, pc, #4	; (adr r2, 8004394 <UART_SetConfig+0x5dc>)
 800438e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004392:	bf00      	nop
 8004394:	080043b9 	.word	0x080043b9
 8004398:	080048a5 	.word	0x080048a5
 800439c:	08004523 	.word	0x08004523
 80043a0:	080048a5 	.word	0x080048a5
 80043a4:	08004619 	.word	0x08004619
 80043a8:	080048a5 	.word	0x080048a5
 80043ac:	080048a5 	.word	0x080048a5
 80043b0:	080048a5 	.word	0x080048a5
 80043b4:	08004755 	.word	0x08004755
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043b8:	f7fe fbaa 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
 80043bc:	4603      	mov	r3, r0
 80043be:	4618      	mov	r0, r3
 80043c0:	f04f 0100 	mov.w	r1, #0
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d07e      	beq.n	80044ca <UART_SetConfig+0x712>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d075      	beq.n	80044c0 <UART_SetConfig+0x708>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d06c      	beq.n	80044b6 <UART_SetConfig+0x6fe>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d063      	beq.n	80044ac <UART_SetConfig+0x6f4>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d05a      	beq.n	80044a2 <UART_SetConfig+0x6ea>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	2b05      	cmp	r3, #5
 80043f2:	d051      	beq.n	8004498 <UART_SetConfig+0x6e0>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	2b06      	cmp	r3, #6
 80043fa:	d048      	beq.n	800448e <UART_SetConfig+0x6d6>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	2b07      	cmp	r3, #7
 8004402:	d03f      	beq.n	8004484 <UART_SetConfig+0x6cc>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	2b08      	cmp	r3, #8
 800440a:	d01f      	beq.n	800444c <UART_SetConfig+0x694>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	2b09      	cmp	r3, #9
 8004412:	d016      	beq.n	8004442 <UART_SetConfig+0x68a>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	2b0a      	cmp	r3, #10
 800441a:	d00d      	beq.n	8004438 <UART_SetConfig+0x680>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	2b0b      	cmp	r3, #11
 8004422:	d104      	bne.n	800442e <UART_SetConfig+0x676>
 8004424:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004428:	f04f 0400 	mov.w	r4, #0
 800442c:	e051      	b.n	80044d2 <UART_SetConfig+0x71a>
 800442e:	f04f 0301 	mov.w	r3, #1
 8004432:	f04f 0400 	mov.w	r4, #0
 8004436:	e04c      	b.n	80044d2 <UART_SetConfig+0x71a>
 8004438:	f04f 0380 	mov.w	r3, #128	; 0x80
 800443c:	f04f 0400 	mov.w	r4, #0
 8004440:	e047      	b.n	80044d2 <UART_SetConfig+0x71a>
 8004442:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004446:	f04f 0400 	mov.w	r4, #0
 800444a:	e042      	b.n	80044d2 <UART_SetConfig+0x71a>
 800444c:	f04f 0320 	mov.w	r3, #32
 8004450:	f04f 0400 	mov.w	r4, #0
 8004454:	e03d      	b.n	80044d2 <UART_SetConfig+0x71a>
 8004456:	bf00      	nop
 8004458:	00f42400 	.word	0x00f42400
 800445c:	0001e848 	.word	0x0001e848
 8004460:	0003d090 	.word	0x0003d090
 8004464:	0007a120 	.word	0x0007a120
 8004468:	000f4240 	.word	0x000f4240
 800446c:	00145855 	.word	0x00145855
 8004470:	00186a00 	.word	0x00186a00
 8004474:	001e8480 	.word	0x001e8480
 8004478:	0028b0aa 	.word	0x0028b0aa
 800447c:	003d0900 	.word	0x003d0900
 8004480:	007a1200 	.word	0x007a1200
 8004484:	f04f 0310 	mov.w	r3, #16
 8004488:	f04f 0400 	mov.w	r4, #0
 800448c:	e021      	b.n	80044d2 <UART_SetConfig+0x71a>
 800448e:	f04f 030c 	mov.w	r3, #12
 8004492:	f04f 0400 	mov.w	r4, #0
 8004496:	e01c      	b.n	80044d2 <UART_SetConfig+0x71a>
 8004498:	f04f 030a 	mov.w	r3, #10
 800449c:	f04f 0400 	mov.w	r4, #0
 80044a0:	e017      	b.n	80044d2 <UART_SetConfig+0x71a>
 80044a2:	f04f 0308 	mov.w	r3, #8
 80044a6:	f04f 0400 	mov.w	r4, #0
 80044aa:	e012      	b.n	80044d2 <UART_SetConfig+0x71a>
 80044ac:	f04f 0306 	mov.w	r3, #6
 80044b0:	f04f 0400 	mov.w	r4, #0
 80044b4:	e00d      	b.n	80044d2 <UART_SetConfig+0x71a>
 80044b6:	f04f 0304 	mov.w	r3, #4
 80044ba:	f04f 0400 	mov.w	r4, #0
 80044be:	e008      	b.n	80044d2 <UART_SetConfig+0x71a>
 80044c0:	f04f 0302 	mov.w	r3, #2
 80044c4:	f04f 0400 	mov.w	r4, #0
 80044c8:	e003      	b.n	80044d2 <UART_SetConfig+0x71a>
 80044ca:	f04f 0301 	mov.w	r3, #1
 80044ce:	f04f 0400 	mov.w	r4, #0
 80044d2:	461a      	mov	r2, r3
 80044d4:	4623      	mov	r3, r4
 80044d6:	f7fb fe93 	bl	8000200 <__aeabi_uldivmod>
 80044da:	4603      	mov	r3, r0
 80044dc:	460c      	mov	r4, r1
 80044de:	4619      	mov	r1, r3
 80044e0:	4622      	mov	r2, r4
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	f04f 0400 	mov.w	r4, #0
 80044ea:	0214      	lsls	r4, r2, #8
 80044ec:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80044f0:	020b      	lsls	r3, r1, #8
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6852      	ldr	r2, [r2, #4]
 80044f6:	0852      	lsrs	r2, r2, #1
 80044f8:	4611      	mov	r1, r2
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	eb13 0b01 	adds.w	fp, r3, r1
 8004502:	eb44 0c02 	adc.w	ip, r4, r2
 8004506:	4658      	mov	r0, fp
 8004508:	4661      	mov	r1, ip
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f04f 0400 	mov.w	r4, #0
 8004512:	461a      	mov	r2, r3
 8004514:	4623      	mov	r3, r4
 8004516:	f7fb fe73 	bl	8000200 <__aeabi_uldivmod>
 800451a:	4603      	mov	r3, r0
 800451c:	460c      	mov	r4, r1
 800451e:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8004520:	e1c3      	b.n	80048aa <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	2b00      	cmp	r3, #0
 8004528:	d05b      	beq.n	80045e2 <UART_SetConfig+0x82a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	2b01      	cmp	r3, #1
 8004530:	d053      	beq.n	80045da <UART_SetConfig+0x822>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	2b02      	cmp	r3, #2
 8004538:	d04b      	beq.n	80045d2 <UART_SetConfig+0x81a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	2b03      	cmp	r3, #3
 8004540:	d043      	beq.n	80045ca <UART_SetConfig+0x812>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	2b04      	cmp	r3, #4
 8004548:	d03b      	beq.n	80045c2 <UART_SetConfig+0x80a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	2b05      	cmp	r3, #5
 8004550:	d033      	beq.n	80045ba <UART_SetConfig+0x802>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	2b06      	cmp	r3, #6
 8004558:	d02b      	beq.n	80045b2 <UART_SetConfig+0x7fa>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	2b07      	cmp	r3, #7
 8004560:	d023      	beq.n	80045aa <UART_SetConfig+0x7f2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	2b08      	cmp	r3, #8
 8004568:	d01b      	beq.n	80045a2 <UART_SetConfig+0x7ea>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	2b09      	cmp	r3, #9
 8004570:	d013      	beq.n	800459a <UART_SetConfig+0x7e2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	2b0a      	cmp	r3, #10
 8004578:	d00b      	beq.n	8004592 <UART_SetConfig+0x7da>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	2b0b      	cmp	r3, #11
 8004580:	d103      	bne.n	800458a <UART_SetConfig+0x7d2>
 8004582:	4bad      	ldr	r3, [pc, #692]	; (8004838 <UART_SetConfig+0xa80>)
 8004584:	f04f 0400 	mov.w	r4, #0
 8004588:	e02e      	b.n	80045e8 <UART_SetConfig+0x830>
 800458a:	4bac      	ldr	r3, [pc, #688]	; (800483c <UART_SetConfig+0xa84>)
 800458c:	f04f 0400 	mov.w	r4, #0
 8004590:	e02a      	b.n	80045e8 <UART_SetConfig+0x830>
 8004592:	4bab      	ldr	r3, [pc, #684]	; (8004840 <UART_SetConfig+0xa88>)
 8004594:	f04f 0400 	mov.w	r4, #0
 8004598:	e026      	b.n	80045e8 <UART_SetConfig+0x830>
 800459a:	4baa      	ldr	r3, [pc, #680]	; (8004844 <UART_SetConfig+0xa8c>)
 800459c:	f04f 0400 	mov.w	r4, #0
 80045a0:	e022      	b.n	80045e8 <UART_SetConfig+0x830>
 80045a2:	4ba9      	ldr	r3, [pc, #676]	; (8004848 <UART_SetConfig+0xa90>)
 80045a4:	f04f 0400 	mov.w	r4, #0
 80045a8:	e01e      	b.n	80045e8 <UART_SetConfig+0x830>
 80045aa:	4ba8      	ldr	r3, [pc, #672]	; (800484c <UART_SetConfig+0xa94>)
 80045ac:	f04f 0400 	mov.w	r4, #0
 80045b0:	e01a      	b.n	80045e8 <UART_SetConfig+0x830>
 80045b2:	a49d      	add	r4, pc, #628	; (adr r4, 8004828 <UART_SetConfig+0xa70>)
 80045b4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80045b8:	e016      	b.n	80045e8 <UART_SetConfig+0x830>
 80045ba:	4ba5      	ldr	r3, [pc, #660]	; (8004850 <UART_SetConfig+0xa98>)
 80045bc:	f04f 0400 	mov.w	r4, #0
 80045c0:	e012      	b.n	80045e8 <UART_SetConfig+0x830>
 80045c2:	4ba4      	ldr	r3, [pc, #656]	; (8004854 <UART_SetConfig+0xa9c>)
 80045c4:	f04f 0400 	mov.w	r4, #0
 80045c8:	e00e      	b.n	80045e8 <UART_SetConfig+0x830>
 80045ca:	a499      	add	r4, pc, #612	; (adr r4, 8004830 <UART_SetConfig+0xa78>)
 80045cc:	e9d4 3400 	ldrd	r3, r4, [r4]
 80045d0:	e00a      	b.n	80045e8 <UART_SetConfig+0x830>
 80045d2:	4ba1      	ldr	r3, [pc, #644]	; (8004858 <UART_SetConfig+0xaa0>)
 80045d4:	f04f 0400 	mov.w	r4, #0
 80045d8:	e006      	b.n	80045e8 <UART_SetConfig+0x830>
 80045da:	4ba0      	ldr	r3, [pc, #640]	; (800485c <UART_SetConfig+0xaa4>)
 80045dc:	f04f 0400 	mov.w	r4, #0
 80045e0:	e002      	b.n	80045e8 <UART_SetConfig+0x830>
 80045e2:	4b96      	ldr	r3, [pc, #600]	; (800483c <UART_SetConfig+0xa84>)
 80045e4:	f04f 0400 	mov.w	r4, #0
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6852      	ldr	r2, [r2, #4]
 80045ec:	0852      	lsrs	r2, r2, #1
 80045ee:	4611      	mov	r1, r2
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	eb13 0b01 	adds.w	fp, r3, r1
 80045f8:	eb44 0c02 	adc.w	ip, r4, r2
 80045fc:	4658      	mov	r0, fp
 80045fe:	4661      	mov	r1, ip
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f04f 0400 	mov.w	r4, #0
 8004608:	461a      	mov	r2, r3
 800460a:	4623      	mov	r3, r4
 800460c:	f7fb fdf8 	bl	8000200 <__aeabi_uldivmod>
 8004610:	4603      	mov	r3, r0
 8004612:	460c      	mov	r4, r1
 8004614:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8004616:	e148      	b.n	80048aa <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004618:	f7fe f9e4 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 800461c:	4603      	mov	r3, r0
 800461e:	4618      	mov	r0, r3
 8004620:	f04f 0100 	mov.w	r1, #0
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	2b00      	cmp	r3, #0
 800462a:	d067      	beq.n	80046fc <UART_SetConfig+0x944>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	2b01      	cmp	r3, #1
 8004632:	d05e      	beq.n	80046f2 <UART_SetConfig+0x93a>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	2b02      	cmp	r3, #2
 800463a:	d055      	beq.n	80046e8 <UART_SetConfig+0x930>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	2b03      	cmp	r3, #3
 8004642:	d04c      	beq.n	80046de <UART_SetConfig+0x926>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	2b04      	cmp	r3, #4
 800464a:	d043      	beq.n	80046d4 <UART_SetConfig+0x91c>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	2b05      	cmp	r3, #5
 8004652:	d03a      	beq.n	80046ca <UART_SetConfig+0x912>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	2b06      	cmp	r3, #6
 800465a:	d031      	beq.n	80046c0 <UART_SetConfig+0x908>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	2b07      	cmp	r3, #7
 8004662:	d028      	beq.n	80046b6 <UART_SetConfig+0x8fe>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	2b08      	cmp	r3, #8
 800466a:	d01f      	beq.n	80046ac <UART_SetConfig+0x8f4>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	2b09      	cmp	r3, #9
 8004672:	d016      	beq.n	80046a2 <UART_SetConfig+0x8ea>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	2b0a      	cmp	r3, #10
 800467a:	d00d      	beq.n	8004698 <UART_SetConfig+0x8e0>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	2b0b      	cmp	r3, #11
 8004682:	d104      	bne.n	800468e <UART_SetConfig+0x8d6>
 8004684:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004688:	f04f 0400 	mov.w	r4, #0
 800468c:	e03a      	b.n	8004704 <UART_SetConfig+0x94c>
 800468e:	f04f 0301 	mov.w	r3, #1
 8004692:	f04f 0400 	mov.w	r4, #0
 8004696:	e035      	b.n	8004704 <UART_SetConfig+0x94c>
 8004698:	f04f 0380 	mov.w	r3, #128	; 0x80
 800469c:	f04f 0400 	mov.w	r4, #0
 80046a0:	e030      	b.n	8004704 <UART_SetConfig+0x94c>
 80046a2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80046a6:	f04f 0400 	mov.w	r4, #0
 80046aa:	e02b      	b.n	8004704 <UART_SetConfig+0x94c>
 80046ac:	f04f 0320 	mov.w	r3, #32
 80046b0:	f04f 0400 	mov.w	r4, #0
 80046b4:	e026      	b.n	8004704 <UART_SetConfig+0x94c>
 80046b6:	f04f 0310 	mov.w	r3, #16
 80046ba:	f04f 0400 	mov.w	r4, #0
 80046be:	e021      	b.n	8004704 <UART_SetConfig+0x94c>
 80046c0:	f04f 030c 	mov.w	r3, #12
 80046c4:	f04f 0400 	mov.w	r4, #0
 80046c8:	e01c      	b.n	8004704 <UART_SetConfig+0x94c>
 80046ca:	f04f 030a 	mov.w	r3, #10
 80046ce:	f04f 0400 	mov.w	r4, #0
 80046d2:	e017      	b.n	8004704 <UART_SetConfig+0x94c>
 80046d4:	f04f 0308 	mov.w	r3, #8
 80046d8:	f04f 0400 	mov.w	r4, #0
 80046dc:	e012      	b.n	8004704 <UART_SetConfig+0x94c>
 80046de:	f04f 0306 	mov.w	r3, #6
 80046e2:	f04f 0400 	mov.w	r4, #0
 80046e6:	e00d      	b.n	8004704 <UART_SetConfig+0x94c>
 80046e8:	f04f 0304 	mov.w	r3, #4
 80046ec:	f04f 0400 	mov.w	r4, #0
 80046f0:	e008      	b.n	8004704 <UART_SetConfig+0x94c>
 80046f2:	f04f 0302 	mov.w	r3, #2
 80046f6:	f04f 0400 	mov.w	r4, #0
 80046fa:	e003      	b.n	8004704 <UART_SetConfig+0x94c>
 80046fc:	f04f 0301 	mov.w	r3, #1
 8004700:	f04f 0400 	mov.w	r4, #0
 8004704:	461a      	mov	r2, r3
 8004706:	4623      	mov	r3, r4
 8004708:	f7fb fd7a 	bl	8000200 <__aeabi_uldivmod>
 800470c:	4603      	mov	r3, r0
 800470e:	460c      	mov	r4, r1
 8004710:	4619      	mov	r1, r3
 8004712:	4622      	mov	r2, r4
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	f04f 0400 	mov.w	r4, #0
 800471c:	0214      	lsls	r4, r2, #8
 800471e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004722:	020b      	lsls	r3, r1, #8
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6852      	ldr	r2, [r2, #4]
 8004728:	0852      	lsrs	r2, r2, #1
 800472a:	4611      	mov	r1, r2
 800472c:	f04f 0200 	mov.w	r2, #0
 8004730:	eb13 0b01 	adds.w	fp, r3, r1
 8004734:	eb44 0c02 	adc.w	ip, r4, r2
 8004738:	4658      	mov	r0, fp
 800473a:	4661      	mov	r1, ip
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f04f 0400 	mov.w	r4, #0
 8004744:	461a      	mov	r2, r3
 8004746:	4623      	mov	r3, r4
 8004748:	f7fb fd5a 	bl	8000200 <__aeabi_uldivmod>
 800474c:	4603      	mov	r3, r0
 800474e:	460c      	mov	r4, r1
 8004750:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8004752:	e0aa      	b.n	80048aa <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 8087 	beq.w	800486c <UART_SetConfig+0xab4>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	2b01      	cmp	r3, #1
 8004764:	d05b      	beq.n	800481e <UART_SetConfig+0xa66>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	2b02      	cmp	r3, #2
 800476c:	d052      	beq.n	8004814 <UART_SetConfig+0xa5c>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	2b03      	cmp	r3, #3
 8004774:	d04a      	beq.n	800480c <UART_SetConfig+0xa54>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	2b04      	cmp	r3, #4
 800477c:	d041      	beq.n	8004802 <UART_SetConfig+0xa4a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	2b05      	cmp	r3, #5
 8004784:	d039      	beq.n	80047fa <UART_SetConfig+0xa42>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	2b06      	cmp	r3, #6
 800478c:	d031      	beq.n	80047f2 <UART_SetConfig+0xa3a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	2b07      	cmp	r3, #7
 8004794:	d028      	beq.n	80047e8 <UART_SetConfig+0xa30>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	2b08      	cmp	r3, #8
 800479c:	d01f      	beq.n	80047de <UART_SetConfig+0xa26>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	2b09      	cmp	r3, #9
 80047a4:	d016      	beq.n	80047d4 <UART_SetConfig+0xa1c>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	2b0a      	cmp	r3, #10
 80047ac:	d00d      	beq.n	80047ca <UART_SetConfig+0xa12>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	2b0b      	cmp	r3, #11
 80047b4:	d104      	bne.n	80047c0 <UART_SetConfig+0xa08>
 80047b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ba:	f04f 0400 	mov.w	r4, #0
 80047be:	e059      	b.n	8004874 <UART_SetConfig+0xabc>
 80047c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80047c4:	f04f 0400 	mov.w	r4, #0
 80047c8:	e054      	b.n	8004874 <UART_SetConfig+0xabc>
 80047ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047ce:	f04f 0400 	mov.w	r4, #0
 80047d2:	e04f      	b.n	8004874 <UART_SetConfig+0xabc>
 80047d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047d8:	f04f 0400 	mov.w	r4, #0
 80047dc:	e04a      	b.n	8004874 <UART_SetConfig+0xabc>
 80047de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80047e2:	f04f 0400 	mov.w	r4, #0
 80047e6:	e045      	b.n	8004874 <UART_SetConfig+0xabc>
 80047e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80047ec:	f04f 0400 	mov.w	r4, #0
 80047f0:	e040      	b.n	8004874 <UART_SetConfig+0xabc>
 80047f2:	4b1b      	ldr	r3, [pc, #108]	; (8004860 <UART_SetConfig+0xaa8>)
 80047f4:	f04f 0400 	mov.w	r4, #0
 80047f8:	e03c      	b.n	8004874 <UART_SetConfig+0xabc>
 80047fa:	4b1a      	ldr	r3, [pc, #104]	; (8004864 <UART_SetConfig+0xaac>)
 80047fc:	f04f 0400 	mov.w	r4, #0
 8004800:	e038      	b.n	8004874 <UART_SetConfig+0xabc>
 8004802:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004806:	f04f 0400 	mov.w	r4, #0
 800480a:	e033      	b.n	8004874 <UART_SetConfig+0xabc>
 800480c:	4b16      	ldr	r3, [pc, #88]	; (8004868 <UART_SetConfig+0xab0>)
 800480e:	f04f 0400 	mov.w	r4, #0
 8004812:	e02f      	b.n	8004874 <UART_SetConfig+0xabc>
 8004814:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004818:	f04f 0400 	mov.w	r4, #0
 800481c:	e02a      	b.n	8004874 <UART_SetConfig+0xabc>
 800481e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004822:	f04f 0400 	mov.w	r4, #0
 8004826:	e025      	b.n	8004874 <UART_SetConfig+0xabc>
 8004828:	14585500 	.word	0x14585500
 800482c:	00000000 	.word	0x00000000
 8004830:	28b0aa00 	.word	0x28b0aa00
 8004834:	00000000 	.word	0x00000000
 8004838:	00f42400 	.word	0x00f42400
 800483c:	f4240000 	.word	0xf4240000
 8004840:	01e84800 	.word	0x01e84800
 8004844:	03d09000 	.word	0x03d09000
 8004848:	07a12000 	.word	0x07a12000
 800484c:	0f424000 	.word	0x0f424000
 8004850:	186a0000 	.word	0x186a0000
 8004854:	1e848000 	.word	0x1e848000
 8004858:	3d090000 	.word	0x3d090000
 800485c:	7a120000 	.word	0x7a120000
 8004860:	000aaa00 	.word	0x000aaa00
 8004864:	000ccc00 	.word	0x000ccc00
 8004868:	00155500 	.word	0x00155500
 800486c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004870:	f04f 0400 	mov.w	r4, #0
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6852      	ldr	r2, [r2, #4]
 8004878:	0852      	lsrs	r2, r2, #1
 800487a:	4611      	mov	r1, r2
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	eb13 0b01 	adds.w	fp, r3, r1
 8004884:	eb44 0c02 	adc.w	ip, r4, r2
 8004888:	4658      	mov	r0, fp
 800488a:	4661      	mov	r1, ip
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f04f 0400 	mov.w	r4, #0
 8004894:	461a      	mov	r2, r3
 8004896:	4623      	mov	r3, r4
 8004898:	f7fb fcb2 	bl	8000200 <__aeabi_uldivmod>
 800489c:	4603      	mov	r3, r0
 800489e:	460c      	mov	r4, r1
 80048a0:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 80048a2:	e002      	b.n	80048aa <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	74fb      	strb	r3, [r7, #19]
            break;
 80048a8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048b0:	d309      	bcc.n	80048c6 <UART_SetConfig+0xb0e>
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048b8:	d205      	bcs.n	80048c6 <UART_SetConfig+0xb0e>
        {
          huart->Instance->BRR = usartdiv;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	60da      	str	r2, [r3, #12]
 80048c2:	f000 bc0f 	b.w	80050e4 <UART_SetConfig+0x132c>
        }
        else
        {
          ret = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	74fb      	strb	r3, [r7, #19]
 80048ca:	f000 bc0b 	b.w	80050e4 <UART_SetConfig+0x132c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d6:	f040 81ff 	bne.w	8004cd8 <UART_SetConfig+0xf20>
  {
    switch (clocksource)
 80048da:	7efb      	ldrb	r3, [r7, #27]
 80048dc:	2b08      	cmp	r3, #8
 80048de:	f200 81db 	bhi.w	8004c98 <UART_SetConfig+0xee0>
 80048e2:	a201      	add	r2, pc, #4	; (adr r2, 80048e8 <UART_SetConfig+0xb30>)
 80048e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e8:	0800490d 	.word	0x0800490d
 80048ec:	080049c3 	.word	0x080049c3
 80048f0:	08004a79 	.word	0x08004a79
 80048f4:	08004c99 	.word	0x08004c99
 80048f8:	08004b21 	.word	0x08004b21
 80048fc:	08004c99 	.word	0x08004c99
 8004900:	08004c99 	.word	0x08004c99
 8004904:	08004c99 	.word	0x08004c99
 8004908:	08004bd7 	.word	0x08004bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800490c:	f7fe f900 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
 8004910:	4602      	mov	r2, r0
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	2b00      	cmp	r3, #0
 8004918:	d044      	beq.n	80049a4 <UART_SetConfig+0xbec>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	2b01      	cmp	r3, #1
 8004920:	d03e      	beq.n	80049a0 <UART_SetConfig+0xbe8>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	2b02      	cmp	r3, #2
 8004928:	d038      	beq.n	800499c <UART_SetConfig+0xbe4>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	2b03      	cmp	r3, #3
 8004930:	d032      	beq.n	8004998 <UART_SetConfig+0xbe0>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	2b04      	cmp	r3, #4
 8004938:	d02c      	beq.n	8004994 <UART_SetConfig+0xbdc>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	2b05      	cmp	r3, #5
 8004940:	d026      	beq.n	8004990 <UART_SetConfig+0xbd8>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	2b06      	cmp	r3, #6
 8004948:	d020      	beq.n	800498c <UART_SetConfig+0xbd4>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	2b07      	cmp	r3, #7
 8004950:	d01a      	beq.n	8004988 <UART_SetConfig+0xbd0>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	2b08      	cmp	r3, #8
 8004958:	d014      	beq.n	8004984 <UART_SetConfig+0xbcc>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	2b09      	cmp	r3, #9
 8004960:	d00e      	beq.n	8004980 <UART_SetConfig+0xbc8>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	2b0a      	cmp	r3, #10
 8004968:	d008      	beq.n	800497c <UART_SetConfig+0xbc4>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	2b0b      	cmp	r3, #11
 8004970:	d102      	bne.n	8004978 <UART_SetConfig+0xbc0>
 8004972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004976:	e016      	b.n	80049a6 <UART_SetConfig+0xbee>
 8004978:	2301      	movs	r3, #1
 800497a:	e014      	b.n	80049a6 <UART_SetConfig+0xbee>
 800497c:	2380      	movs	r3, #128	; 0x80
 800497e:	e012      	b.n	80049a6 <UART_SetConfig+0xbee>
 8004980:	2340      	movs	r3, #64	; 0x40
 8004982:	e010      	b.n	80049a6 <UART_SetConfig+0xbee>
 8004984:	2320      	movs	r3, #32
 8004986:	e00e      	b.n	80049a6 <UART_SetConfig+0xbee>
 8004988:	2310      	movs	r3, #16
 800498a:	e00c      	b.n	80049a6 <UART_SetConfig+0xbee>
 800498c:	230c      	movs	r3, #12
 800498e:	e00a      	b.n	80049a6 <UART_SetConfig+0xbee>
 8004990:	230a      	movs	r3, #10
 8004992:	e008      	b.n	80049a6 <UART_SetConfig+0xbee>
 8004994:	2308      	movs	r3, #8
 8004996:	e006      	b.n	80049a6 <UART_SetConfig+0xbee>
 8004998:	2306      	movs	r3, #6
 800499a:	e004      	b.n	80049a6 <UART_SetConfig+0xbee>
 800499c:	2304      	movs	r3, #4
 800499e:	e002      	b.n	80049a6 <UART_SetConfig+0xbee>
 80049a0:	2302      	movs	r3, #2
 80049a2:	e000      	b.n	80049a6 <UART_SetConfig+0xbee>
 80049a4:	2301      	movs	r3, #1
 80049a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049aa:	005a      	lsls	r2, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	085b      	lsrs	r3, r3, #1
 80049b2:	441a      	add	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049bc:	b29b      	uxth	r3, r3
 80049be:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80049c0:	e16d      	b.n	8004c9e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049c2:	f7fe f8bb 	bl	8002b3c <HAL_RCC_GetPCLK2Freq>
 80049c6:	4602      	mov	r2, r0
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d044      	beq.n	8004a5a <UART_SetConfig+0xca2>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d03e      	beq.n	8004a56 <UART_SetConfig+0xc9e>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d038      	beq.n	8004a52 <UART_SetConfig+0xc9a>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	2b03      	cmp	r3, #3
 80049e6:	d032      	beq.n	8004a4e <UART_SetConfig+0xc96>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d02c      	beq.n	8004a4a <UART_SetConfig+0xc92>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	2b05      	cmp	r3, #5
 80049f6:	d026      	beq.n	8004a46 <UART_SetConfig+0xc8e>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	2b06      	cmp	r3, #6
 80049fe:	d020      	beq.n	8004a42 <UART_SetConfig+0xc8a>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	2b07      	cmp	r3, #7
 8004a06:	d01a      	beq.n	8004a3e <UART_SetConfig+0xc86>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d014      	beq.n	8004a3a <UART_SetConfig+0xc82>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	2b09      	cmp	r3, #9
 8004a16:	d00e      	beq.n	8004a36 <UART_SetConfig+0xc7e>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	2b0a      	cmp	r3, #10
 8004a1e:	d008      	beq.n	8004a32 <UART_SetConfig+0xc7a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	2b0b      	cmp	r3, #11
 8004a26:	d102      	bne.n	8004a2e <UART_SetConfig+0xc76>
 8004a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a2c:	e016      	b.n	8004a5c <UART_SetConfig+0xca4>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e014      	b.n	8004a5c <UART_SetConfig+0xca4>
 8004a32:	2380      	movs	r3, #128	; 0x80
 8004a34:	e012      	b.n	8004a5c <UART_SetConfig+0xca4>
 8004a36:	2340      	movs	r3, #64	; 0x40
 8004a38:	e010      	b.n	8004a5c <UART_SetConfig+0xca4>
 8004a3a:	2320      	movs	r3, #32
 8004a3c:	e00e      	b.n	8004a5c <UART_SetConfig+0xca4>
 8004a3e:	2310      	movs	r3, #16
 8004a40:	e00c      	b.n	8004a5c <UART_SetConfig+0xca4>
 8004a42:	230c      	movs	r3, #12
 8004a44:	e00a      	b.n	8004a5c <UART_SetConfig+0xca4>
 8004a46:	230a      	movs	r3, #10
 8004a48:	e008      	b.n	8004a5c <UART_SetConfig+0xca4>
 8004a4a:	2308      	movs	r3, #8
 8004a4c:	e006      	b.n	8004a5c <UART_SetConfig+0xca4>
 8004a4e:	2306      	movs	r3, #6
 8004a50:	e004      	b.n	8004a5c <UART_SetConfig+0xca4>
 8004a52:	2304      	movs	r3, #4
 8004a54:	e002      	b.n	8004a5c <UART_SetConfig+0xca4>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e000      	b.n	8004a5c <UART_SetConfig+0xca4>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a60:	005a      	lsls	r2, r3, #1
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	085b      	lsrs	r3, r3, #1
 8004a68:	441a      	add	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a76:	e112      	b.n	8004c9e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d043      	beq.n	8004b08 <UART_SetConfig+0xd50>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d03d      	beq.n	8004b04 <UART_SetConfig+0xd4c>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d037      	beq.n	8004b00 <UART_SetConfig+0xd48>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d031      	beq.n	8004afc <UART_SetConfig+0xd44>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d02b      	beq.n	8004af8 <UART_SetConfig+0xd40>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	2b05      	cmp	r3, #5
 8004aa6:	d025      	beq.n	8004af4 <UART_SetConfig+0xd3c>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	2b06      	cmp	r3, #6
 8004aae:	d01f      	beq.n	8004af0 <UART_SetConfig+0xd38>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	2b07      	cmp	r3, #7
 8004ab6:	d019      	beq.n	8004aec <UART_SetConfig+0xd34>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d013      	beq.n	8004ae8 <UART_SetConfig+0xd30>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	2b09      	cmp	r3, #9
 8004ac6:	d00d      	beq.n	8004ae4 <UART_SetConfig+0xd2c>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	2b0a      	cmp	r3, #10
 8004ace:	d007      	beq.n	8004ae0 <UART_SetConfig+0xd28>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	2b0b      	cmp	r3, #11
 8004ad6:	d101      	bne.n	8004adc <UART_SetConfig+0xd24>
 8004ad8:	4b8c      	ldr	r3, [pc, #560]	; (8004d0c <UART_SetConfig+0xf54>)
 8004ada:	e016      	b.n	8004b0a <UART_SetConfig+0xd52>
 8004adc:	4b8c      	ldr	r3, [pc, #560]	; (8004d10 <UART_SetConfig+0xf58>)
 8004ade:	e014      	b.n	8004b0a <UART_SetConfig+0xd52>
 8004ae0:	4b8c      	ldr	r3, [pc, #560]	; (8004d14 <UART_SetConfig+0xf5c>)
 8004ae2:	e012      	b.n	8004b0a <UART_SetConfig+0xd52>
 8004ae4:	4b8c      	ldr	r3, [pc, #560]	; (8004d18 <UART_SetConfig+0xf60>)
 8004ae6:	e010      	b.n	8004b0a <UART_SetConfig+0xd52>
 8004ae8:	4b8c      	ldr	r3, [pc, #560]	; (8004d1c <UART_SetConfig+0xf64>)
 8004aea:	e00e      	b.n	8004b0a <UART_SetConfig+0xd52>
 8004aec:	4b8c      	ldr	r3, [pc, #560]	; (8004d20 <UART_SetConfig+0xf68>)
 8004aee:	e00c      	b.n	8004b0a <UART_SetConfig+0xd52>
 8004af0:	4b8c      	ldr	r3, [pc, #560]	; (8004d24 <UART_SetConfig+0xf6c>)
 8004af2:	e00a      	b.n	8004b0a <UART_SetConfig+0xd52>
 8004af4:	4b8c      	ldr	r3, [pc, #560]	; (8004d28 <UART_SetConfig+0xf70>)
 8004af6:	e008      	b.n	8004b0a <UART_SetConfig+0xd52>
 8004af8:	4b8c      	ldr	r3, [pc, #560]	; (8004d2c <UART_SetConfig+0xf74>)
 8004afa:	e006      	b.n	8004b0a <UART_SetConfig+0xd52>
 8004afc:	4b8c      	ldr	r3, [pc, #560]	; (8004d30 <UART_SetConfig+0xf78>)
 8004afe:	e004      	b.n	8004b0a <UART_SetConfig+0xd52>
 8004b00:	4b8c      	ldr	r3, [pc, #560]	; (8004d34 <UART_SetConfig+0xf7c>)
 8004b02:	e002      	b.n	8004b0a <UART_SetConfig+0xd52>
 8004b04:	4b8c      	ldr	r3, [pc, #560]	; (8004d38 <UART_SetConfig+0xf80>)
 8004b06:	e000      	b.n	8004b0a <UART_SetConfig+0xd52>
 8004b08:	4b81      	ldr	r3, [pc, #516]	; (8004d10 <UART_SetConfig+0xf58>)
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6852      	ldr	r2, [r2, #4]
 8004b0e:	0852      	lsrs	r2, r2, #1
 8004b10:	441a      	add	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b1e:	e0be      	b.n	8004c9e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b20:	f7fd ff60 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 8004b24:	4602      	mov	r2, r0
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d044      	beq.n	8004bb8 <UART_SetConfig+0xe00>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d03e      	beq.n	8004bb4 <UART_SetConfig+0xdfc>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d038      	beq.n	8004bb0 <UART_SetConfig+0xdf8>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	d032      	beq.n	8004bac <UART_SetConfig+0xdf4>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d02c      	beq.n	8004ba8 <UART_SetConfig+0xdf0>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	2b05      	cmp	r3, #5
 8004b54:	d026      	beq.n	8004ba4 <UART_SetConfig+0xdec>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	2b06      	cmp	r3, #6
 8004b5c:	d020      	beq.n	8004ba0 <UART_SetConfig+0xde8>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	2b07      	cmp	r3, #7
 8004b64:	d01a      	beq.n	8004b9c <UART_SetConfig+0xde4>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	2b08      	cmp	r3, #8
 8004b6c:	d014      	beq.n	8004b98 <UART_SetConfig+0xde0>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	2b09      	cmp	r3, #9
 8004b74:	d00e      	beq.n	8004b94 <UART_SetConfig+0xddc>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	2b0a      	cmp	r3, #10
 8004b7c:	d008      	beq.n	8004b90 <UART_SetConfig+0xdd8>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	2b0b      	cmp	r3, #11
 8004b84:	d102      	bne.n	8004b8c <UART_SetConfig+0xdd4>
 8004b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b8a:	e016      	b.n	8004bba <UART_SetConfig+0xe02>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e014      	b.n	8004bba <UART_SetConfig+0xe02>
 8004b90:	2380      	movs	r3, #128	; 0x80
 8004b92:	e012      	b.n	8004bba <UART_SetConfig+0xe02>
 8004b94:	2340      	movs	r3, #64	; 0x40
 8004b96:	e010      	b.n	8004bba <UART_SetConfig+0xe02>
 8004b98:	2320      	movs	r3, #32
 8004b9a:	e00e      	b.n	8004bba <UART_SetConfig+0xe02>
 8004b9c:	2310      	movs	r3, #16
 8004b9e:	e00c      	b.n	8004bba <UART_SetConfig+0xe02>
 8004ba0:	230c      	movs	r3, #12
 8004ba2:	e00a      	b.n	8004bba <UART_SetConfig+0xe02>
 8004ba4:	230a      	movs	r3, #10
 8004ba6:	e008      	b.n	8004bba <UART_SetConfig+0xe02>
 8004ba8:	2308      	movs	r3, #8
 8004baa:	e006      	b.n	8004bba <UART_SetConfig+0xe02>
 8004bac:	2306      	movs	r3, #6
 8004bae:	e004      	b.n	8004bba <UART_SetConfig+0xe02>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	e002      	b.n	8004bba <UART_SetConfig+0xe02>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e000      	b.n	8004bba <UART_SetConfig+0xe02>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbe:	005a      	lsls	r2, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	085b      	lsrs	r3, r3, #1
 8004bc6:	441a      	add	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004bd4:	e063      	b.n	8004c9e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d04f      	beq.n	8004c7e <UART_SetConfig+0xec6>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d048      	beq.n	8004c78 <UART_SetConfig+0xec0>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d041      	beq.n	8004c72 <UART_SetConfig+0xeba>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d03a      	beq.n	8004c6c <UART_SetConfig+0xeb4>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d033      	beq.n	8004c66 <UART_SetConfig+0xeae>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	2b05      	cmp	r3, #5
 8004c04:	d02c      	beq.n	8004c60 <UART_SetConfig+0xea8>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	2b06      	cmp	r3, #6
 8004c0c:	d025      	beq.n	8004c5a <UART_SetConfig+0xea2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	2b07      	cmp	r3, #7
 8004c14:	d01e      	beq.n	8004c54 <UART_SetConfig+0xe9c>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d017      	beq.n	8004c4e <UART_SetConfig+0xe96>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	2b09      	cmp	r3, #9
 8004c24:	d010      	beq.n	8004c48 <UART_SetConfig+0xe90>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	2b0a      	cmp	r3, #10
 8004c2c:	d009      	beq.n	8004c42 <UART_SetConfig+0xe8a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	2b0b      	cmp	r3, #11
 8004c34:	d102      	bne.n	8004c3c <UART_SetConfig+0xe84>
 8004c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c3a:	e022      	b.n	8004c82 <UART_SetConfig+0xeca>
 8004c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c40:	e01f      	b.n	8004c82 <UART_SetConfig+0xeca>
 8004c42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c46:	e01c      	b.n	8004c82 <UART_SetConfig+0xeca>
 8004c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c4c:	e019      	b.n	8004c82 <UART_SetConfig+0xeca>
 8004c4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c52:	e016      	b.n	8004c82 <UART_SetConfig+0xeca>
 8004c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c58:	e013      	b.n	8004c82 <UART_SetConfig+0xeca>
 8004c5a:	f241 5354 	movw	r3, #5460	; 0x1554
 8004c5e:	e010      	b.n	8004c82 <UART_SetConfig+0xeca>
 8004c60:	f641 1398 	movw	r3, #6552	; 0x1998
 8004c64:	e00d      	b.n	8004c82 <UART_SetConfig+0xeca>
 8004c66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c6a:	e00a      	b.n	8004c82 <UART_SetConfig+0xeca>
 8004c6c:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8004c70:	e007      	b.n	8004c82 <UART_SetConfig+0xeca>
 8004c72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c76:	e004      	b.n	8004c82 <UART_SetConfig+0xeca>
 8004c78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c7c:	e001      	b.n	8004c82 <UART_SetConfig+0xeca>
 8004c7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6852      	ldr	r2, [r2, #4]
 8004c86:	0852      	lsrs	r2, r2, #1
 8004c88:	441a      	add	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c96:	e002      	b.n	8004c9e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	74fb      	strb	r3, [r7, #19]
        break;
 8004c9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2b0f      	cmp	r3, #15
 8004ca2:	d916      	bls.n	8004cd2 <UART_SetConfig+0xf1a>
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004caa:	d212      	bcs.n	8004cd2 <UART_SetConfig+0xf1a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	f023 030f 	bic.w	r3, r3, #15
 8004cb4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	085b      	lsrs	r3, r3, #1
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	897b      	ldrh	r3, [r7, #10]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	897a      	ldrh	r2, [r7, #10]
 8004cce:	60da      	str	r2, [r3, #12]
 8004cd0:	e208      	b.n	80050e4 <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	74fb      	strb	r3, [r7, #19]
 8004cd6:	e205      	b.n	80050e4 <UART_SetConfig+0x132c>
    }
  }
  else
  {
    switch (clocksource)
 8004cd8:	7efb      	ldrb	r3, [r7, #27]
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	f200 81f1 	bhi.w	80050c2 <UART_SetConfig+0x130a>
 8004ce0:	a201      	add	r2, pc, #4	; (adr r2, 8004ce8 <UART_SetConfig+0xf30>)
 8004ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce6:	bf00      	nop
 8004ce8:	08004d3d 	.word	0x08004d3d
 8004cec:	08004df1 	.word	0x08004df1
 8004cf0:	08004ea5 	.word	0x08004ea5
 8004cf4:	080050c3 	.word	0x080050c3
 8004cf8:	08004f4f 	.word	0x08004f4f
 8004cfc:	080050c3 	.word	0x080050c3
 8004d00:	080050c3 	.word	0x080050c3
 8004d04:	080050c3 	.word	0x080050c3
 8004d08:	08005003 	.word	0x08005003
 8004d0c:	0001e848 	.word	0x0001e848
 8004d10:	01e84800 	.word	0x01e84800
 8004d14:	0003d090 	.word	0x0003d090
 8004d18:	0007a120 	.word	0x0007a120
 8004d1c:	000f4240 	.word	0x000f4240
 8004d20:	001e8480 	.word	0x001e8480
 8004d24:	0028b0aa 	.word	0x0028b0aa
 8004d28:	0030d400 	.word	0x0030d400
 8004d2c:	003d0900 	.word	0x003d0900
 8004d30:	00516154 	.word	0x00516154
 8004d34:	007a1200 	.word	0x007a1200
 8004d38:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d3c:	f7fd fee8 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
 8004d40:	4602      	mov	r2, r0
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d044      	beq.n	8004dd4 <UART_SetConfig+0x101c>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d03e      	beq.n	8004dd0 <UART_SetConfig+0x1018>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d038      	beq.n	8004dcc <UART_SetConfig+0x1014>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	d032      	beq.n	8004dc8 <UART_SetConfig+0x1010>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d02c      	beq.n	8004dc4 <UART_SetConfig+0x100c>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	2b05      	cmp	r3, #5
 8004d70:	d026      	beq.n	8004dc0 <UART_SetConfig+0x1008>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	2b06      	cmp	r3, #6
 8004d78:	d020      	beq.n	8004dbc <UART_SetConfig+0x1004>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	2b07      	cmp	r3, #7
 8004d80:	d01a      	beq.n	8004db8 <UART_SetConfig+0x1000>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	2b08      	cmp	r3, #8
 8004d88:	d014      	beq.n	8004db4 <UART_SetConfig+0xffc>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	2b09      	cmp	r3, #9
 8004d90:	d00e      	beq.n	8004db0 <UART_SetConfig+0xff8>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	2b0a      	cmp	r3, #10
 8004d98:	d008      	beq.n	8004dac <UART_SetConfig+0xff4>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	2b0b      	cmp	r3, #11
 8004da0:	d102      	bne.n	8004da8 <UART_SetConfig+0xff0>
 8004da2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004da6:	e016      	b.n	8004dd6 <UART_SetConfig+0x101e>
 8004da8:	2301      	movs	r3, #1
 8004daa:	e014      	b.n	8004dd6 <UART_SetConfig+0x101e>
 8004dac:	2380      	movs	r3, #128	; 0x80
 8004dae:	e012      	b.n	8004dd6 <UART_SetConfig+0x101e>
 8004db0:	2340      	movs	r3, #64	; 0x40
 8004db2:	e010      	b.n	8004dd6 <UART_SetConfig+0x101e>
 8004db4:	2320      	movs	r3, #32
 8004db6:	e00e      	b.n	8004dd6 <UART_SetConfig+0x101e>
 8004db8:	2310      	movs	r3, #16
 8004dba:	e00c      	b.n	8004dd6 <UART_SetConfig+0x101e>
 8004dbc:	230c      	movs	r3, #12
 8004dbe:	e00a      	b.n	8004dd6 <UART_SetConfig+0x101e>
 8004dc0:	230a      	movs	r3, #10
 8004dc2:	e008      	b.n	8004dd6 <UART_SetConfig+0x101e>
 8004dc4:	2308      	movs	r3, #8
 8004dc6:	e006      	b.n	8004dd6 <UART_SetConfig+0x101e>
 8004dc8:	2306      	movs	r3, #6
 8004dca:	e004      	b.n	8004dd6 <UART_SetConfig+0x101e>
 8004dcc:	2304      	movs	r3, #4
 8004dce:	e002      	b.n	8004dd6 <UART_SetConfig+0x101e>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e000      	b.n	8004dd6 <UART_SetConfig+0x101e>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	085b      	lsrs	r3, r3, #1
 8004de0:	441a      	add	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004dee:	e16b      	b.n	80050c8 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004df0:	f7fd fea4 	bl	8002b3c <HAL_RCC_GetPCLK2Freq>
 8004df4:	4602      	mov	r2, r0
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d044      	beq.n	8004e88 <UART_SetConfig+0x10d0>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d03e      	beq.n	8004e84 <UART_SetConfig+0x10cc>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d038      	beq.n	8004e80 <UART_SetConfig+0x10c8>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	2b03      	cmp	r3, #3
 8004e14:	d032      	beq.n	8004e7c <UART_SetConfig+0x10c4>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d02c      	beq.n	8004e78 <UART_SetConfig+0x10c0>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	2b05      	cmp	r3, #5
 8004e24:	d026      	beq.n	8004e74 <UART_SetConfig+0x10bc>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	2b06      	cmp	r3, #6
 8004e2c:	d020      	beq.n	8004e70 <UART_SetConfig+0x10b8>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	2b07      	cmp	r3, #7
 8004e34:	d01a      	beq.n	8004e6c <UART_SetConfig+0x10b4>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	d014      	beq.n	8004e68 <UART_SetConfig+0x10b0>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	2b09      	cmp	r3, #9
 8004e44:	d00e      	beq.n	8004e64 <UART_SetConfig+0x10ac>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	2b0a      	cmp	r3, #10
 8004e4c:	d008      	beq.n	8004e60 <UART_SetConfig+0x10a8>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	2b0b      	cmp	r3, #11
 8004e54:	d102      	bne.n	8004e5c <UART_SetConfig+0x10a4>
 8004e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e5a:	e016      	b.n	8004e8a <UART_SetConfig+0x10d2>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e014      	b.n	8004e8a <UART_SetConfig+0x10d2>
 8004e60:	2380      	movs	r3, #128	; 0x80
 8004e62:	e012      	b.n	8004e8a <UART_SetConfig+0x10d2>
 8004e64:	2340      	movs	r3, #64	; 0x40
 8004e66:	e010      	b.n	8004e8a <UART_SetConfig+0x10d2>
 8004e68:	2320      	movs	r3, #32
 8004e6a:	e00e      	b.n	8004e8a <UART_SetConfig+0x10d2>
 8004e6c:	2310      	movs	r3, #16
 8004e6e:	e00c      	b.n	8004e8a <UART_SetConfig+0x10d2>
 8004e70:	230c      	movs	r3, #12
 8004e72:	e00a      	b.n	8004e8a <UART_SetConfig+0x10d2>
 8004e74:	230a      	movs	r3, #10
 8004e76:	e008      	b.n	8004e8a <UART_SetConfig+0x10d2>
 8004e78:	2308      	movs	r3, #8
 8004e7a:	e006      	b.n	8004e8a <UART_SetConfig+0x10d2>
 8004e7c:	2306      	movs	r3, #6
 8004e7e:	e004      	b.n	8004e8a <UART_SetConfig+0x10d2>
 8004e80:	2304      	movs	r3, #4
 8004e82:	e002      	b.n	8004e8a <UART_SetConfig+0x10d2>
 8004e84:	2302      	movs	r3, #2
 8004e86:	e000      	b.n	8004e8a <UART_SetConfig+0x10d2>
 8004e88:	2301      	movs	r3, #1
 8004e8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	085b      	lsrs	r3, r3, #1
 8004e94:	441a      	add	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ea2:	e111      	b.n	80050c8 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d044      	beq.n	8004f36 <UART_SetConfig+0x117e>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d03e      	beq.n	8004f32 <UART_SetConfig+0x117a>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d038      	beq.n	8004f2e <UART_SetConfig+0x1176>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	2b03      	cmp	r3, #3
 8004ec2:	d032      	beq.n	8004f2a <UART_SetConfig+0x1172>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	2b04      	cmp	r3, #4
 8004eca:	d02c      	beq.n	8004f26 <UART_SetConfig+0x116e>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	2b05      	cmp	r3, #5
 8004ed2:	d026      	beq.n	8004f22 <UART_SetConfig+0x116a>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	2b06      	cmp	r3, #6
 8004eda:	d020      	beq.n	8004f1e <UART_SetConfig+0x1166>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	2b07      	cmp	r3, #7
 8004ee2:	d01a      	beq.n	8004f1a <UART_SetConfig+0x1162>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d014      	beq.n	8004f16 <UART_SetConfig+0x115e>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	2b09      	cmp	r3, #9
 8004ef2:	d00e      	beq.n	8004f12 <UART_SetConfig+0x115a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	2b0a      	cmp	r3, #10
 8004efa:	d008      	beq.n	8004f0e <UART_SetConfig+0x1156>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	2b0b      	cmp	r3, #11
 8004f02:	d102      	bne.n	8004f0a <UART_SetConfig+0x1152>
 8004f04:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004f08:	e016      	b.n	8004f38 <UART_SetConfig+0x1180>
 8004f0a:	4b80      	ldr	r3, [pc, #512]	; (800510c <UART_SetConfig+0x1354>)
 8004f0c:	e014      	b.n	8004f38 <UART_SetConfig+0x1180>
 8004f0e:	4b80      	ldr	r3, [pc, #512]	; (8005110 <UART_SetConfig+0x1358>)
 8004f10:	e012      	b.n	8004f38 <UART_SetConfig+0x1180>
 8004f12:	4b80      	ldr	r3, [pc, #512]	; (8005114 <UART_SetConfig+0x135c>)
 8004f14:	e010      	b.n	8004f38 <UART_SetConfig+0x1180>
 8004f16:	4b80      	ldr	r3, [pc, #512]	; (8005118 <UART_SetConfig+0x1360>)
 8004f18:	e00e      	b.n	8004f38 <UART_SetConfig+0x1180>
 8004f1a:	4b80      	ldr	r3, [pc, #512]	; (800511c <UART_SetConfig+0x1364>)
 8004f1c:	e00c      	b.n	8004f38 <UART_SetConfig+0x1180>
 8004f1e:	4b80      	ldr	r3, [pc, #512]	; (8005120 <UART_SetConfig+0x1368>)
 8004f20:	e00a      	b.n	8004f38 <UART_SetConfig+0x1180>
 8004f22:	4b80      	ldr	r3, [pc, #512]	; (8005124 <UART_SetConfig+0x136c>)
 8004f24:	e008      	b.n	8004f38 <UART_SetConfig+0x1180>
 8004f26:	4b80      	ldr	r3, [pc, #512]	; (8005128 <UART_SetConfig+0x1370>)
 8004f28:	e006      	b.n	8004f38 <UART_SetConfig+0x1180>
 8004f2a:	4b80      	ldr	r3, [pc, #512]	; (800512c <UART_SetConfig+0x1374>)
 8004f2c:	e004      	b.n	8004f38 <UART_SetConfig+0x1180>
 8004f2e:	4b80      	ldr	r3, [pc, #512]	; (8005130 <UART_SetConfig+0x1378>)
 8004f30:	e002      	b.n	8004f38 <UART_SetConfig+0x1180>
 8004f32:	4b80      	ldr	r3, [pc, #512]	; (8005134 <UART_SetConfig+0x137c>)
 8004f34:	e000      	b.n	8004f38 <UART_SetConfig+0x1180>
 8004f36:	4b75      	ldr	r3, [pc, #468]	; (800510c <UART_SetConfig+0x1354>)
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6852      	ldr	r2, [r2, #4]
 8004f3c:	0852      	lsrs	r2, r2, #1
 8004f3e:	441a      	add	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f4c:	e0bc      	b.n	80050c8 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f4e:	f7fd fd49 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 8004f52:	4602      	mov	r2, r0
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d044      	beq.n	8004fe6 <UART_SetConfig+0x122e>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d03e      	beq.n	8004fe2 <UART_SetConfig+0x122a>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d038      	beq.n	8004fde <UART_SetConfig+0x1226>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	2b03      	cmp	r3, #3
 8004f72:	d032      	beq.n	8004fda <UART_SetConfig+0x1222>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d02c      	beq.n	8004fd6 <UART_SetConfig+0x121e>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	2b05      	cmp	r3, #5
 8004f82:	d026      	beq.n	8004fd2 <UART_SetConfig+0x121a>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	2b06      	cmp	r3, #6
 8004f8a:	d020      	beq.n	8004fce <UART_SetConfig+0x1216>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	2b07      	cmp	r3, #7
 8004f92:	d01a      	beq.n	8004fca <UART_SetConfig+0x1212>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d014      	beq.n	8004fc6 <UART_SetConfig+0x120e>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	2b09      	cmp	r3, #9
 8004fa2:	d00e      	beq.n	8004fc2 <UART_SetConfig+0x120a>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	2b0a      	cmp	r3, #10
 8004faa:	d008      	beq.n	8004fbe <UART_SetConfig+0x1206>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	2b0b      	cmp	r3, #11
 8004fb2:	d102      	bne.n	8004fba <UART_SetConfig+0x1202>
 8004fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fb8:	e016      	b.n	8004fe8 <UART_SetConfig+0x1230>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e014      	b.n	8004fe8 <UART_SetConfig+0x1230>
 8004fbe:	2380      	movs	r3, #128	; 0x80
 8004fc0:	e012      	b.n	8004fe8 <UART_SetConfig+0x1230>
 8004fc2:	2340      	movs	r3, #64	; 0x40
 8004fc4:	e010      	b.n	8004fe8 <UART_SetConfig+0x1230>
 8004fc6:	2320      	movs	r3, #32
 8004fc8:	e00e      	b.n	8004fe8 <UART_SetConfig+0x1230>
 8004fca:	2310      	movs	r3, #16
 8004fcc:	e00c      	b.n	8004fe8 <UART_SetConfig+0x1230>
 8004fce:	230c      	movs	r3, #12
 8004fd0:	e00a      	b.n	8004fe8 <UART_SetConfig+0x1230>
 8004fd2:	230a      	movs	r3, #10
 8004fd4:	e008      	b.n	8004fe8 <UART_SetConfig+0x1230>
 8004fd6:	2308      	movs	r3, #8
 8004fd8:	e006      	b.n	8004fe8 <UART_SetConfig+0x1230>
 8004fda:	2306      	movs	r3, #6
 8004fdc:	e004      	b.n	8004fe8 <UART_SetConfig+0x1230>
 8004fde:	2304      	movs	r3, #4
 8004fe0:	e002      	b.n	8004fe8 <UART_SetConfig+0x1230>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	e000      	b.n	8004fe8 <UART_SetConfig+0x1230>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	085b      	lsrs	r3, r3, #1
 8004ff2:	441a      	add	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005000:	e062      	b.n	80050c8 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	2b00      	cmp	r3, #0
 8005008:	d04e      	beq.n	80050a8 <UART_SetConfig+0x12f0>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	2b01      	cmp	r3, #1
 8005010:	d047      	beq.n	80050a2 <UART_SetConfig+0x12ea>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	2b02      	cmp	r3, #2
 8005018:	d040      	beq.n	800509c <UART_SetConfig+0x12e4>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	2b03      	cmp	r3, #3
 8005020:	d039      	beq.n	8005096 <UART_SetConfig+0x12de>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	2b04      	cmp	r3, #4
 8005028:	d032      	beq.n	8005090 <UART_SetConfig+0x12d8>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	2b05      	cmp	r3, #5
 8005030:	d02b      	beq.n	800508a <UART_SetConfig+0x12d2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	2b06      	cmp	r3, #6
 8005038:	d024      	beq.n	8005084 <UART_SetConfig+0x12cc>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	2b07      	cmp	r3, #7
 8005040:	d01d      	beq.n	800507e <UART_SetConfig+0x12c6>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	2b08      	cmp	r3, #8
 8005048:	d016      	beq.n	8005078 <UART_SetConfig+0x12c0>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	2b09      	cmp	r3, #9
 8005050:	d00f      	beq.n	8005072 <UART_SetConfig+0x12ba>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	2b0a      	cmp	r3, #10
 8005058:	d008      	beq.n	800506c <UART_SetConfig+0x12b4>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	2b0b      	cmp	r3, #11
 8005060:	d101      	bne.n	8005066 <UART_SetConfig+0x12ae>
 8005062:	2380      	movs	r3, #128	; 0x80
 8005064:	e022      	b.n	80050ac <UART_SetConfig+0x12f4>
 8005066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800506a:	e01f      	b.n	80050ac <UART_SetConfig+0x12f4>
 800506c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005070:	e01c      	b.n	80050ac <UART_SetConfig+0x12f4>
 8005072:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005076:	e019      	b.n	80050ac <UART_SetConfig+0x12f4>
 8005078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800507c:	e016      	b.n	80050ac <UART_SetConfig+0x12f4>
 800507e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005082:	e013      	b.n	80050ac <UART_SetConfig+0x12f4>
 8005084:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005088:	e010      	b.n	80050ac <UART_SetConfig+0x12f4>
 800508a:	f640 43cc 	movw	r3, #3276	; 0xccc
 800508e:	e00d      	b.n	80050ac <UART_SetConfig+0x12f4>
 8005090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005094:	e00a      	b.n	80050ac <UART_SetConfig+0x12f4>
 8005096:	f241 5355 	movw	r3, #5461	; 0x1555
 800509a:	e007      	b.n	80050ac <UART_SetConfig+0x12f4>
 800509c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050a0:	e004      	b.n	80050ac <UART_SetConfig+0x12f4>
 80050a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050a6:	e001      	b.n	80050ac <UART_SetConfig+0x12f4>
 80050a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6852      	ldr	r2, [r2, #4]
 80050b0:	0852      	lsrs	r2, r2, #1
 80050b2:	441a      	add	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050bc:	b29b      	uxth	r3, r3
 80050be:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80050c0:	e002      	b.n	80050c8 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	74fb      	strb	r3, [r7, #19]
        break;
 80050c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2b0f      	cmp	r3, #15
 80050cc:	d908      	bls.n	80050e0 <UART_SetConfig+0x1328>
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d4:	d204      	bcs.n	80050e0 <UART_SetConfig+0x1328>
    {
      huart->Instance->BRR = usartdiv;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	60da      	str	r2, [r3, #12]
 80050de:	e001      	b.n	80050e4 <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	74fb      	strb	r3, [r7, #19]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005100:	7cfb      	ldrb	r3, [r7, #19]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3720      	adds	r7, #32
 8005106:	46bd      	mov	sp, r7
 8005108:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800510c:	00f42400 	.word	0x00f42400
 8005110:	0001e848 	.word	0x0001e848
 8005114:	0003d090 	.word	0x0003d090
 8005118:	0007a120 	.word	0x0007a120
 800511c:	000f4240 	.word	0x000f4240
 8005120:	00145855 	.word	0x00145855
 8005124:	00186a00 	.word	0x00186a00
 8005128:	001e8480 	.word	0x001e8480
 800512c:	0028b0aa 	.word	0x0028b0aa
 8005130:	003d0900 	.word	0x003d0900
 8005134:	007a1200 	.word	0x007a1200

08005138 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00a      	beq.n	8005162 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00a      	beq.n	80051a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051aa:	f003 0308 	and.w	r3, r3, #8
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	f003 0310 	and.w	r3, r3, #16
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ee:	f003 0320 	and.w	r3, r3, #32
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005214:	2b00      	cmp	r3, #0
 8005216:	d01a      	beq.n	800524e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005236:	d10a      	bne.n	800524e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	605a      	str	r2, [r3, #4]
  }
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af02      	add	r7, sp, #8
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800528c:	f7fb ffc0 	bl	8001210 <HAL_GetTick>
 8005290:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b08      	cmp	r3, #8
 800529e:	d10e      	bne.n	80052be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f82c 	bl	800530c <UART_WaitOnFlagUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e022      	b.n	8005304 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b04      	cmp	r3, #4
 80052ca:	d10e      	bne.n	80052ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f816 	bl	800530c <UART_WaitOnFlagUntilTimeout>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e00c      	b.n	8005304 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	4613      	mov	r3, r2
 800531a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800531c:	e02c      	b.n	8005378 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005324:	d028      	beq.n	8005378 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005326:	f7fb ff73 	bl	8001210 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	429a      	cmp	r2, r3
 8005334:	d302      	bcc.n	800533c <UART_WaitOnFlagUntilTimeout+0x30>
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d11d      	bne.n	8005378 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800534a:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0201 	bic.w	r2, r2, #1
 800535a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2220      	movs	r2, #32
 8005360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2220      	movs	r2, #32
 8005368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e00f      	b.n	8005398 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	69da      	ldr	r2, [r3, #28]
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	4013      	ands	r3, r2
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	429a      	cmp	r2, r3
 8005386:	bf0c      	ite	eq
 8005388:	2301      	moveq	r3, #1
 800538a:	2300      	movne	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	461a      	mov	r2, r3
 8005390:	79fb      	ldrb	r3, [r7, #7]
 8005392:	429a      	cmp	r2, r3
 8005394:	d0c3      	beq.n	800531e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d101      	bne.n	80053b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80053b2:	2302      	movs	r3, #2
 80053b4:	e027      	b.n	8005406 <HAL_UARTEx_DisableFifoMode+0x66>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2224      	movs	r2, #36	; 0x24
 80053c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0201 	bic.w	r2, r2, #1
 80053dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80053e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b084      	sub	sp, #16
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005422:	2b01      	cmp	r3, #1
 8005424:	d101      	bne.n	800542a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005426:	2302      	movs	r3, #2
 8005428:	e02d      	b.n	8005486 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2224      	movs	r2, #36	; 0x24
 8005436:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 0201 	bic.w	r2, r2, #1
 8005450:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f850 	bl	800550c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2220      	movs	r2, #32
 8005478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d101      	bne.n	80054a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80054a2:	2302      	movs	r3, #2
 80054a4:	e02d      	b.n	8005502 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2224      	movs	r2, #36	; 0x24
 80054b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0201 	bic.w	r2, r2, #1
 80054cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f812 	bl	800550c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800550c:	b480      	push	{r7}
 800550e:	b089      	sub	sp, #36	; 0x24
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005514:	4a2f      	ldr	r2, [pc, #188]	; (80055d4 <UARTEx_SetNbDataToProcess+0xc8>)
 8005516:	f107 0314 	add.w	r3, r7, #20
 800551a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800551e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005522:	4a2d      	ldr	r2, [pc, #180]	; (80055d8 <UARTEx_SetNbDataToProcess+0xcc>)
 8005524:	f107 030c 	add.w	r3, r7, #12
 8005528:	e892 0003 	ldmia.w	r2, {r0, r1}
 800552c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005534:	2b00      	cmp	r3, #0
 8005536:	d108      	bne.n	800554a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005548:	e03d      	b.n	80055c6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800554a:	2308      	movs	r3, #8
 800554c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800554e:	2308      	movs	r3, #8
 8005550:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	0e5b      	lsrs	r3, r3, #25
 800555a:	b2db      	uxtb	r3, r3
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	0f5b      	lsrs	r3, r3, #29
 800556a:	b2db      	uxtb	r3, r3
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005572:	7fbb      	ldrb	r3, [r7, #30]
 8005574:	7f3a      	ldrb	r2, [r7, #28]
 8005576:	f107 0120 	add.w	r1, r7, #32
 800557a:	440a      	add	r2, r1
 800557c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005580:	fb02 f303 	mul.w	r3, r2, r3
 8005584:	7f3a      	ldrb	r2, [r7, #28]
 8005586:	f107 0120 	add.w	r1, r7, #32
 800558a:	440a      	add	r2, r1
 800558c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005590:	fb93 f3f2 	sdiv	r3, r3, r2
 8005594:	b29a      	uxth	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800559c:	7ffb      	ldrb	r3, [r7, #31]
 800559e:	7f7a      	ldrb	r2, [r7, #29]
 80055a0:	f107 0120 	add.w	r1, r7, #32
 80055a4:	440a      	add	r2, r1
 80055a6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80055aa:	fb02 f303 	mul.w	r3, r2, r3
 80055ae:	7f7a      	ldrb	r2, [r7, #29]
 80055b0:	f107 0120 	add.w	r1, r7, #32
 80055b4:	440a      	add	r2, r1
 80055b6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80055ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80055be:	b29a      	uxth	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80055c6:	bf00      	nop
 80055c8:	3724      	adds	r7, #36	; 0x24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	08005b48 	.word	0x08005b48
 80055d8:	08005b50 	.word	0x08005b50

080055dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055dc:	b084      	sub	sp, #16
 80055de:	b580      	push	{r7, lr}
 80055e0:	b084      	sub	sp, #16
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	f107 001c 	add.w	r0, r7, #28
 80055ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d122      	bne.n	800563a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800561c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800561e:	2b01      	cmp	r3, #1
 8005620:	d105      	bne.n	800562e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fa1e 	bl	8005a70 <USB_CoreReset>
 8005634:	4603      	mov	r3, r0
 8005636:	73fb      	strb	r3, [r7, #15]
 8005638:	e01a      	b.n	8005670 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fa12 	bl	8005a70 <USB_CoreReset>
 800564c:	4603      	mov	r3, r0
 800564e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005652:	2b00      	cmp	r3, #0
 8005654:	d106      	bne.n	8005664 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	639a      	str	r2, [r3, #56]	; 0x38
 8005662:	e005      	b.n	8005670 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005668:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8005670:	7bfb      	ldrb	r3, [r7, #15]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800567c:	b004      	add	sp, #16
 800567e:	4770      	bx	lr

08005680 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f023 0201 	bic.w	r2, r3, #1
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b082      	sub	sp, #8
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	460b      	mov	r3, r1
 80056ac:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056ba:	78fb      	ldrb	r3, [r7, #3]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d106      	bne.n	80056ce <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	60da      	str	r2, [r3, #12]
 80056cc:	e00b      	b.n	80056e6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80056ce:	78fb      	ldrb	r3, [r7, #3]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d106      	bne.n	80056e2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	60da      	str	r2, [r3, #12]
 80056e0:	e001      	b.n	80056e6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e003      	b.n	80056ee <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80056e6:	2032      	movs	r0, #50	; 0x32
 80056e8:	f7fb fd9e 	bl	8001228 <HAL_Delay>

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
	...

080056f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056f8:	b084      	sub	sp, #16
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b086      	sub	sp, #24
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005712:	2300      	movs	r3, #0
 8005714:	613b      	str	r3, [r7, #16]
 8005716:	e009      	b.n	800572c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	3340      	adds	r3, #64	; 0x40
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	2200      	movs	r2, #0
 8005724:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	3301      	adds	r3, #1
 800572a:	613b      	str	r3, [r7, #16]
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	2b0e      	cmp	r3, #14
 8005730:	d9f2      	bls.n	8005718 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005734:	2b00      	cmp	r3, #0
 8005736:	d112      	bne.n	800575e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	e005      	b.n	800576a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005762:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005770:	461a      	mov	r2, r3
 8005772:	2300      	movs	r3, #0
 8005774:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577c:	4619      	mov	r1, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005784:	461a      	mov	r2, r3
 8005786:	680b      	ldr	r3, [r1, #0]
 8005788:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800578a:	2103      	movs	r1, #3
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f93d 	bl	8005a0c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005792:	2110      	movs	r1, #16
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f8f1 	bl	800597c <USB_FlushTxFifo>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f90f 	bl	80059c8 <USB_FlushRxFifo>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ba:	461a      	mov	r2, r3
 80057bc:	2300      	movs	r3, #0
 80057be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c6:	461a      	mov	r2, r3
 80057c8:	2300      	movs	r3, #0
 80057ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d2:	461a      	mov	r2, r3
 80057d4:	2300      	movs	r3, #0
 80057d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057d8:	2300      	movs	r3, #0
 80057da:	613b      	str	r3, [r7, #16]
 80057dc:	e043      	b.n	8005866 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057f4:	d118      	bne.n	8005828 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005808:	461a      	mov	r2, r3
 800580a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	e013      	b.n	800583a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581e:	461a      	mov	r2, r3
 8005820:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	e008      	b.n	800583a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005834:	461a      	mov	r2, r3
 8005836:	2300      	movs	r3, #0
 8005838:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005846:	461a      	mov	r2, r3
 8005848:	2300      	movs	r3, #0
 800584a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005858:	461a      	mov	r2, r3
 800585a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800585e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	3301      	adds	r3, #1
 8005864:	613b      	str	r3, [r7, #16]
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	429a      	cmp	r2, r3
 800586c:	d3b7      	bcc.n	80057de <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800586e:	2300      	movs	r3, #0
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	e043      	b.n	80058fc <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005886:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800588a:	d118      	bne.n	80058be <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10a      	bne.n	80058a8 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589e:	461a      	mov	r2, r3
 80058a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	e013      	b.n	80058d0 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b4:	461a      	mov	r2, r3
 80058b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058ba:	6013      	str	r3, [r2, #0]
 80058bc:	e008      	b.n	80058d0 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ca:	461a      	mov	r2, r3
 80058cc:	2300      	movs	r3, #0
 80058ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058dc:	461a      	mov	r2, r3
 80058de:	2300      	movs	r3, #0
 80058e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ee:	461a      	mov	r2, r3
 80058f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	3301      	adds	r3, #1
 80058fa:	613b      	str	r3, [r7, #16]
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	429a      	cmp	r2, r3
 8005902:	d3b7      	bcc.n	8005874 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005912:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005916:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005924:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	f043 0210 	orr.w	r2, r3, #16
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	4b10      	ldr	r3, [pc, #64]	; (8005978 <USB_DevInit+0x280>)
 8005938:	4313      	orrs	r3, r2
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800593e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005940:	2b00      	cmp	r3, #0
 8005942:	d005      	beq.n	8005950 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	f043 0208 	orr.w	r2, r3, #8
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005952:	2b01      	cmp	r3, #1
 8005954:	d107      	bne.n	8005966 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800595e:	f043 0304 	orr.w	r3, r3, #4
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005966:	7dfb      	ldrb	r3, [r7, #23]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005972:	b004      	add	sp, #16
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	803c3800 	.word	0x803c3800

0800597c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	019b      	lsls	r3, r3, #6
 800598e:	f043 0220 	orr.w	r2, r3, #32
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	3301      	adds	r3, #1
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4a09      	ldr	r2, [pc, #36]	; (80059c4 <USB_FlushTxFifo+0x48>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d901      	bls.n	80059a8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e006      	b.n	80059b6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	f003 0320 	and.w	r3, r3, #32
 80059b0:	2b20      	cmp	r3, #32
 80059b2:	d0f0      	beq.n	8005996 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	00030d40 	.word	0x00030d40

080059c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2210      	movs	r2, #16
 80059d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3301      	adds	r3, #1
 80059de:	60fb      	str	r3, [r7, #12]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4a09      	ldr	r2, [pc, #36]	; (8005a08 <USB_FlushRxFifo+0x40>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d901      	bls.n	80059ec <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e006      	b.n	80059fa <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	f003 0310 	and.w	r3, r3, #16
 80059f4:	2b10      	cmp	r3, #16
 80059f6:	d0f0      	beq.n	80059da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	00030d40 	.word	0x00030d40

08005a0c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	78fb      	ldrb	r3, [r7, #3]
 8005a26:	68f9      	ldr	r1, [r7, #12]
 8005a28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b084      	sub	sp, #16
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a58:	f043 0302 	orr.w	r3, r3, #2
 8005a5c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005a5e:	2003      	movs	r0, #3
 8005a60:	f7fb fbe2 	bl	8001228 <HAL_Delay>

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
	...

08005a70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	60fb      	str	r3, [r7, #12]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4a13      	ldr	r2, [pc, #76]	; (8005ad4 <USB_CoreReset+0x64>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d901      	bls.n	8005a8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e01b      	b.n	8005ac6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	daf2      	bge.n	8005a7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f043 0201 	orr.w	r2, r3, #1
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4a09      	ldr	r2, [pc, #36]	; (8005ad4 <USB_CoreReset+0x64>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d901      	bls.n	8005ab8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e006      	b.n	8005ac6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d0f0      	beq.n	8005aa6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	00030d40 	.word	0x00030d40

08005ad8 <__libc_init_array>:
 8005ad8:	b570      	push	{r4, r5, r6, lr}
 8005ada:	4e0d      	ldr	r6, [pc, #52]	; (8005b10 <__libc_init_array+0x38>)
 8005adc:	4c0d      	ldr	r4, [pc, #52]	; (8005b14 <__libc_init_array+0x3c>)
 8005ade:	1ba4      	subs	r4, r4, r6
 8005ae0:	10a4      	asrs	r4, r4, #2
 8005ae2:	2500      	movs	r5, #0
 8005ae4:	42a5      	cmp	r5, r4
 8005ae6:	d109      	bne.n	8005afc <__libc_init_array+0x24>
 8005ae8:	4e0b      	ldr	r6, [pc, #44]	; (8005b18 <__libc_init_array+0x40>)
 8005aea:	4c0c      	ldr	r4, [pc, #48]	; (8005b1c <__libc_init_array+0x44>)
 8005aec:	f000 f820 	bl	8005b30 <_init>
 8005af0:	1ba4      	subs	r4, r4, r6
 8005af2:	10a4      	asrs	r4, r4, #2
 8005af4:	2500      	movs	r5, #0
 8005af6:	42a5      	cmp	r5, r4
 8005af8:	d105      	bne.n	8005b06 <__libc_init_array+0x2e>
 8005afa:	bd70      	pop	{r4, r5, r6, pc}
 8005afc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b00:	4798      	blx	r3
 8005b02:	3501      	adds	r5, #1
 8005b04:	e7ee      	b.n	8005ae4 <__libc_init_array+0xc>
 8005b06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b0a:	4798      	blx	r3
 8005b0c:	3501      	adds	r5, #1
 8005b0e:	e7f2      	b.n	8005af6 <__libc_init_array+0x1e>
 8005b10:	08005ba8 	.word	0x08005ba8
 8005b14:	08005ba8 	.word	0x08005ba8
 8005b18:	08005ba8 	.word	0x08005ba8
 8005b1c:	08005bac 	.word	0x08005bac

08005b20 <memset>:
 8005b20:	4402      	add	r2, r0
 8005b22:	4603      	mov	r3, r0
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d100      	bne.n	8005b2a <memset+0xa>
 8005b28:	4770      	bx	lr
 8005b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b2e:	e7f9      	b.n	8005b24 <memset+0x4>

08005b30 <_init>:
 8005b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b32:	bf00      	nop
 8005b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b36:	bc08      	pop	{r3}
 8005b38:	469e      	mov	lr, r3
 8005b3a:	4770      	bx	lr

08005b3c <_fini>:
 8005b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3e:	bf00      	nop
 8005b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b42:	bc08      	pop	{r3}
 8005b44:	469e      	mov	lr, r3
 8005b46:	4770      	bx	lr
